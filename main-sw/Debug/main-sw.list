
main-sw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd18  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a84  0800ceb8  0800ceb8  0001ceb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d93c  0800d93c  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800d93c  0800d93c  0001d93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d944  0800d944  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d944  0800d944  0001d944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d948  0800d948  0001d948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800d94c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  20000240  0800db8c  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008b0  0800db8c  000208b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016678  00000000  00000000  000202b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036b5  00000000  00000000  0003692b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001310  00000000  00000000  00039fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ead  00000000  00000000  0003b2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000199c5  00000000  00000000  0003c19d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017d24  00000000  00000000  00055b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000936c8  00000000  00000000  0006d886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006424  00000000  00000000  00100f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00107374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000240 	.word	0x20000240
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cea0 	.word	0x0800cea0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000244 	.word	0x20000244
 80001dc:	0800cea0 	.word	0x0800cea0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <ILI9341_SendCommand>:
};

//***** Functions prototypes *****//
//1. Write Command to LCD
void ILI9341_SendCommand(uint8_t com)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <ILI9341_SendCommand+0x54>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a11      	ldr	r2, [pc, #68]	; (8001058 <ILI9341_SendCommand+0x58>)
 8001014:	8811      	ldrh	r1, [r2, #0]
 8001016:	2200      	movs	r2, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f004 f935 	bl	8005288 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 800101e:	4b0f      	ldr	r3, [pc, #60]	; (800105c <ILI9341_SendCommand+0x5c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a0f      	ldr	r2, [pc, #60]	; (8001060 <ILI9341_SendCommand+0x60>)
 8001024:	8811      	ldrh	r1, [r2, #0]
 8001026:	2200      	movs	r2, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f004 f92d 	bl	8005288 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 800102e:	f107 010f 	add.w	r1, r7, #15
 8001032:	2305      	movs	r3, #5
 8001034:	2201      	movs	r2, #1
 8001036:	480b      	ldr	r0, [pc, #44]	; (8001064 <ILI9341_SendCommand+0x64>)
 8001038:	f004 fe61 	bl	8005cfe <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <ILI9341_SendCommand+0x5c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a07      	ldr	r2, [pc, #28]	; (8001060 <ILI9341_SendCommand+0x60>)
 8001042:	8811      	ldrh	r1, [r2, #0]
 8001044:	2201      	movs	r2, #1
 8001046:	4618      	mov	r0, r3
 8001048:	f004 f91e 	bl	8005288 <HAL_GPIO_WritePin>
}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200002c0 	.word	0x200002c0
 8001058:	200002c4 	.word	0x200002c4
 800105c:	200002b8 	.word	0x200002b8
 8001060:	200002bc 	.word	0x200002bc
 8001064:	20000260 	.word	0x20000260

08001068 <ILI9341_SendData>:

//2. Write data to LCD
void ILI9341_SendData(uint8_t data)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <ILI9341_SendData+0x54>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a11      	ldr	r2, [pc, #68]	; (80010c0 <ILI9341_SendData+0x58>)
 800107c:	8811      	ldrh	r1, [r2, #0]
 800107e:	2201      	movs	r2, #1
 8001080:	4618      	mov	r0, r3
 8001082:	f004 f901 	bl	8005288 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8001086:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <ILI9341_SendData+0x5c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <ILI9341_SendData+0x60>)
 800108c:	8811      	ldrh	r1, [r2, #0]
 800108e:	2200      	movs	r2, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f004 f8f9 	bl	8005288 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 8001096:	f107 010f 	add.w	r1, r7, #15
 800109a:	2305      	movs	r3, #5
 800109c:	2201      	movs	r2, #1
 800109e:	480b      	ldr	r0, [pc, #44]	; (80010cc <ILI9341_SendData+0x64>)
 80010a0:	f004 fe2d 	bl	8005cfe <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 80010a4:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <ILI9341_SendData+0x5c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <ILI9341_SendData+0x60>)
 80010aa:	8811      	ldrh	r1, [r2, #0]
 80010ac:	2201      	movs	r2, #1
 80010ae:	4618      	mov	r0, r3
 80010b0:	f004 f8ea 	bl	8005288 <HAL_GPIO_WritePin>
}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200002c0 	.word	0x200002c0
 80010c0:	200002c4 	.word	0x200002c4
 80010c4:	200002b8 	.word	0x200002b8
 80010c8:	200002bc 	.word	0x200002bc
 80010cc:	20000260 	.word	0x20000260

080010d0 <ILI9341_SetCursorPosition>:
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}

//3. Set cursor position
void ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4604      	mov	r4, r0
 80010d8:	4608      	mov	r0, r1
 80010da:	4611      	mov	r1, r2
 80010dc:	461a      	mov	r2, r3
 80010de:	4623      	mov	r3, r4
 80010e0:	80fb      	strh	r3, [r7, #6]
 80010e2:	4603      	mov	r3, r0
 80010e4:	80bb      	strh	r3, [r7, #4]
 80010e6:	460b      	mov	r3, r1
 80010e8:	807b      	strh	r3, [r7, #2]
 80010ea:	4613      	mov	r3, r2
 80010ec:	803b      	strh	r3, [r7, #0]

  ILI9341_SendCommand (ILI9341_COLUMN_ADDR);
 80010ee:	202a      	movs	r0, #42	; 0x2a
 80010f0:	f7ff ff86 	bl	8001000 <ILI9341_SendCommand>
  ILI9341_SendData(x1>>8);
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	0a1b      	lsrs	r3, r3, #8
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ffb3 	bl	8001068 <ILI9341_SendData>
  ILI9341_SendData(x1 & 0xFF);
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ffae 	bl	8001068 <ILI9341_SendData>
  ILI9341_SendData(x2>>8);
 800110c:	887b      	ldrh	r3, [r7, #2]
 800110e:	0a1b      	lsrs	r3, r3, #8
 8001110:	b29b      	uxth	r3, r3
 8001112:	b2db      	uxtb	r3, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ffa7 	bl	8001068 <ILI9341_SendData>
  ILI9341_SendData(x2 & 0xFF);
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ffa2 	bl	8001068 <ILI9341_SendData>

  ILI9341_SendCommand (ILI9341_PAGE_ADDR);
 8001124:	202b      	movs	r0, #43	; 0x2b
 8001126:	f7ff ff6b 	bl	8001000 <ILI9341_SendCommand>
  ILI9341_SendData(y1>>8);
 800112a:	88bb      	ldrh	r3, [r7, #4]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	b29b      	uxth	r3, r3
 8001130:	b2db      	uxtb	r3, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff98 	bl	8001068 <ILI9341_SendData>
  ILI9341_SendData(y1 & 0xFF);
 8001138:	88bb      	ldrh	r3, [r7, #4]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff93 	bl	8001068 <ILI9341_SendData>
  ILI9341_SendData(y2>>8);
 8001142:	883b      	ldrh	r3, [r7, #0]
 8001144:	0a1b      	lsrs	r3, r3, #8
 8001146:	b29b      	uxth	r3, r3
 8001148:	b2db      	uxtb	r3, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff8c 	bl	8001068 <ILI9341_SendData>
  ILI9341_SendData(y2 & 0xFF);
 8001150:	883b      	ldrh	r3, [r7, #0]
 8001152:	b2db      	uxtb	r3, r3
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff87 	bl	8001068 <ILI9341_SendData>
  ILI9341_SendCommand (ILI9341_GRAM);
 800115a:	202c      	movs	r0, #44	; 0x2c
 800115c:	f7ff ff50 	bl	8001000 <ILI9341_SendCommand>
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	bd90      	pop	{r4, r7, pc}

08001168 <ILI9341_Init>:
//4. Initialise function
void ILI9341_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
 {
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	4613      	mov	r3, r2
 8001176:	80fb      	strh	r3, [r7, #6]
	 //Copy SPI settings
	 memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 8001178:	2258      	movs	r2, #88	; 0x58
 800117a:	68f9      	ldr	r1, [r7, #12]
 800117c:	4853      	ldr	r0, [pc, #332]	; (80012cc <ILI9341_Init+0x164>)
 800117e:	f009 f97a 	bl	800a476 <memcpy>
	 //CS pin
	 tftCS_GPIO = csPORT;
 8001182:	4a53      	ldr	r2, [pc, #332]	; (80012d0 <ILI9341_Init+0x168>)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	6013      	str	r3, [r2, #0]
	 tftCS_PIN = csPIN;
 8001188:	4a52      	ldr	r2, [pc, #328]	; (80012d4 <ILI9341_Init+0x16c>)
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	8013      	strh	r3, [r2, #0]
	 //DC pin
	 tftDC_GPIO = dcPORT;
 800118e:	4a52      	ldr	r2, [pc, #328]	; (80012d8 <ILI9341_Init+0x170>)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	6013      	str	r3, [r2, #0]
	 tftDC_PIN = dcPIN;
 8001194:	4a51      	ldr	r2, [pc, #324]	; (80012dc <ILI9341_Init+0x174>)
 8001196:	8b3b      	ldrh	r3, [r7, #24]
 8001198:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 800119a:	4b4d      	ldr	r3, [pc, #308]	; (80012d0 <ILI9341_Init+0x168>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a4d      	ldr	r2, [pc, #308]	; (80012d4 <ILI9341_Init+0x16c>)
 80011a0:	8811      	ldrh	r1, [r2, #0]
 80011a2:	2201      	movs	r2, #1
 80011a4:	4618      	mov	r0, r3
 80011a6:	f004 f86f 	bl	8005288 <HAL_GPIO_WritePin>
	 //RESET pin
	 tftRESET_GPIO = resetPORT;
 80011aa:	4a4d      	ldr	r2, [pc, #308]	; (80012e0 <ILI9341_Init+0x178>)
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	6013      	str	r3, [r2, #0]
	 tftRESET_PIN = resetPIN;
 80011b0:	4a4c      	ldr	r2, [pc, #304]	; (80012e4 <ILI9341_Init+0x17c>)
 80011b2:	8c3b      	ldrh	r3, [r7, #32]
 80011b4:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);  //Turn LCD ON
 80011b6:	8c3b      	ldrh	r3, [r7, #32]
 80011b8:	2201      	movs	r2, #1
 80011ba:	4619      	mov	r1, r3
 80011bc:	69f8      	ldr	r0, [r7, #28]
 80011be:	f004 f863 	bl	8005288 <HAL_GPIO_WritePin>
	 
   ILI9341_SendCommand (ILI9341_RESET); // software reset comand
 80011c2:	2001      	movs	r0, #1
 80011c4:	f7ff ff1c 	bl	8001000 <ILI9341_SendCommand>
   HAL_Delay(100);
 80011c8:	2064      	movs	r0, #100	; 0x64
 80011ca:	f003 fd11 	bl	8004bf0 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_OFF); // display off
 80011ce:	2028      	movs	r0, #40	; 0x28
 80011d0:	f7ff ff16 	bl	8001000 <ILI9341_SendCommand>
   //------------power control------------------------------
   ILI9341_SendCommand (ILI9341_POWER1); // power control
 80011d4:	20c0      	movs	r0, #192	; 0xc0
 80011d6:	f7ff ff13 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData   (0x26); // GVDD = 4.75v
 80011da:	2026      	movs	r0, #38	; 0x26
 80011dc:	f7ff ff44 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_POWER2); // power control
 80011e0:	20c1      	movs	r0, #193	; 0xc1
 80011e2:	f7ff ff0d 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData   (0x11); // AVDD=VCIx2, VGH=VCIx7, VGL=-VCIx3
 80011e6:	2011      	movs	r0, #17
 80011e8:	f7ff ff3e 	bl	8001068 <ILI9341_SendData>
   //--------------VCOM-------------------------------------
   ILI9341_SendCommand (ILI9341_VCOM1); // vcom control
 80011ec:	20c5      	movs	r0, #197	; 0xc5
 80011ee:	f7ff ff07 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData   (0x35); // Set the VCOMH voltage (0x35 = 4.025v)
 80011f2:	2035      	movs	r0, #53	; 0x35
 80011f4:	f7ff ff38 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0x3e); // Set the VCOML voltage (0x3E = -0.950v)
 80011f8:	203e      	movs	r0, #62	; 0x3e
 80011fa:	f7ff ff35 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_VCOM2); // vcom control
 80011fe:	20c7      	movs	r0, #199	; 0xc7
 8001200:	f7ff fefe 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData   (0xbe);
 8001204:	20be      	movs	r0, #190	; 0xbe
 8001206:	f7ff ff2f 	bl	8001068 <ILI9341_SendData>

   //------------memory access control------------------------
   ILI9341_SendCommand (ILI9341_MAC); // memory access control
 800120a:	2036      	movs	r0, #54	; 0x36
 800120c:	f7ff fef8 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData(0x48);
 8001210:	2048      	movs	r0, #72	; 0x48
 8001212:	f7ff ff29 	bl	8001068 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_PIXEL_FORMAT); // pixel format set
 8001216:	203a      	movs	r0, #58	; 0x3a
 8001218:	f7ff fef2 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData   (0x55); // 16bit /pixel
 800121c:	2055      	movs	r0, #85	; 0x55
 800121e:	f7ff ff23 	bl	8001068 <ILI9341_SendData>

	 ILI9341_SendCommand(ILI9341_FRC);
 8001222:	20b1      	movs	r0, #177	; 0xb1
 8001224:	f7ff feec 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData(0);
 8001228:	2000      	movs	r0, #0
 800122a:	f7ff ff1d 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData(0x1F);
 800122e:	201f      	movs	r0, #31
 8001230:	f7ff ff1a 	bl	8001068 <ILI9341_SendData>
   //-------------ddram ----------------------------
   ILI9341_SendCommand (ILI9341_COLUMN_ADDR); // column set
 8001234:	202a      	movs	r0, #42	; 0x2a
 8001236:	f7ff fee3 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // x0_HIGH---0
 800123a:	2000      	movs	r0, #0
 800123c:	f7ff ff14 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x0_LOW----0
 8001240:	2000      	movs	r0, #0
 8001242:	f7ff ff11 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x1_HIGH---240
 8001246:	2000      	movs	r0, #0
 8001248:	f7ff ff0e 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0xEF); // x1_LOW----240
 800124c:	20ef      	movs	r0, #239	; 0xef
 800124e:	f7ff ff0b 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_PAGE_ADDR); // page address set
 8001252:	202b      	movs	r0, #43	; 0x2b
 8001254:	f7ff fed4 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // y0_HIGH---0
 8001258:	2000      	movs	r0, #0
 800125a:	f7ff ff05 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // y0_LOW----0
 800125e:	2000      	movs	r0, #0
 8001260:	f7ff ff02 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0x01); // y1_HIGH---320
 8001264:	2001      	movs	r0, #1
 8001266:	f7ff feff 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0x3F); // y1_LOW----320
 800126a:	203f      	movs	r0, #63	; 0x3f
 800126c:	f7ff fefc 	bl	8001068 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_TEARING_OFF); // tearing effect off
 8001270:	2034      	movs	r0, #52	; 0x34
 8001272:	f7ff fec5 	bl	8001000 <ILI9341_SendCommand>
   //LCD_write_cmd(ILI9341_TEARING_ON); // tearing effect on
   //LCD_write_cmd(ILI9341_DISPLAY_INVERSION); // display inversion
   ILI9341_SendCommand (ILI9341_Entry_Mode_Set); // entry mode set
 8001276:	20b7      	movs	r0, #183	; 0xb7
 8001278:	f7ff fec2 	bl	8001000 <ILI9341_SendCommand>
   // Deep Standby Mode: OFF
   // Set the output level of gate driver G1-G320: Normal display
   // Low voltage detection: Disable
   ILI9341_SendData   (0x07);
 800127c:	2007      	movs	r0, #7
 800127e:	f7ff fef3 	bl	8001068 <ILI9341_SendData>
   //-----------------display------------------------
   ILI9341_SendCommand (ILI9341_DFC); // display function control
 8001282:	20b6      	movs	r0, #182	; 0xb6
 8001284:	f7ff febc 	bl	8001000 <ILI9341_SendCommand>
   //Set the scan mode in non-display area
   //Determine source/VCOM output in a non-display area in the partial display mode
   ILI9341_SendData   (0x0a);
 8001288:	200a      	movs	r0, #10
 800128a:	f7ff feed 	bl	8001068 <ILI9341_SendData>
   //Select whether the liquid crystal type is normally white type or normally black type
   //Sets the direction of scan by the gate driver in the range determined by SCN and NL
   //Select the shift direction of outputs from the source driver
   //Sets the gate driver pin arrangement in combination with the GS bit to select the optimal scan mode for the module
   //Specify the scan cycle interval of gate driver in non-display area when PTG to select interval scan
   ILI9341_SendData   (0x82);
 800128e:	2082      	movs	r0, #130	; 0x82
 8001290:	f7ff feea 	bl	8001068 <ILI9341_SendData>
   // Sets the number of lines to drive the LCD at an interval of 8 lines
   ILI9341_SendData   (0x27);
 8001294:	2027      	movs	r0, #39	; 0x27
 8001296:	f7ff fee7 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // clock divisor
 800129a:	2000      	movs	r0, #0
 800129c:	f7ff fee4 	bl	8001068 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_SLEEP_OUT); // sleep out
 80012a0:	2011      	movs	r0, #17
 80012a2:	f7ff fead 	bl	8001000 <ILI9341_SendCommand>
   HAL_Delay(100);
 80012a6:	2064      	movs	r0, #100	; 0x64
 80012a8:	f003 fca2 	bl	8004bf0 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_ON); // display on
 80012ac:	2029      	movs	r0, #41	; 0x29
 80012ae:	f7ff fea7 	bl	8001000 <ILI9341_SendCommand>
   HAL_Delay(100);
 80012b2:	2064      	movs	r0, #100	; 0x64
 80012b4:	f003 fc9c 	bl	8004bf0 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_GRAM); // memory write
 80012b8:	202c      	movs	r0, #44	; 0x2c
 80012ba:	f7ff fea1 	bl	8001000 <ILI9341_SendCommand>
   HAL_Delay(5);
 80012be:	2005      	movs	r0, #5
 80012c0:	f003 fc96 	bl	8004bf0 <HAL_Delay>
 }
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000260 	.word	0x20000260
 80012d0:	200002b8 	.word	0x200002b8
 80012d4:	200002bc 	.word	0x200002bc
 80012d8:	200002c0 	.word	0x200002c0
 80012dc:	200002c4 	.word	0x200002c4
 80012e0:	200002c8 	.word	0x200002c8
 80012e4:	200002cc 	.word	0x200002cc

080012e8 <ILI9341_DrawPixel>:

//5. Write data to a single pixel
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	80fb      	strh	r3, [r7, #6]
 80012f2:	460b      	mov	r3, r1
 80012f4:	80bb      	strh	r3, [r7, #4]
 80012f6:	4613      	mov	r3, r2
 80012f8:	807b      	strh	r3, [r7, #2]
  ILI9341_SetCursorPosition(x, y, x, y);
 80012fa:	88bb      	ldrh	r3, [r7, #4]
 80012fc:	88fa      	ldrh	r2, [r7, #6]
 80012fe:	88b9      	ldrh	r1, [r7, #4]
 8001300:	88f8      	ldrh	r0, [r7, #6]
 8001302:	f7ff fee5 	bl	80010d0 <ILI9341_SetCursorPosition>
	ILI9341_SendData(color>>8);
 8001306:	887b      	ldrh	r3, [r7, #2]
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	b29b      	uxth	r3, r3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff feaa 	bl	8001068 <ILI9341_SendData>
	ILI9341_SendData(color&0xFF);
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fea5 	bl	8001068 <ILI9341_SendData>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <ILI9341_Fill>:
//6. Fill the entire screen with a background color
void ILI9341_Fill(uint16_t color) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	80fb      	strh	r3, [r7, #6]
	uint32_t n = ILI9341_PIXEL_COUNT;
 8001332:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001336:	60fb      	str	r3, [r7, #12]
	uint16_t myColor = 0xFF;
 8001338:	23ff      	movs	r3, #255	; 0xff
 800133a:	817b      	strh	r3, [r7, #10]
	
	if(rotationNum==1 || rotationNum==3)
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <ILI9341_Fill+0x84>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d003      	beq.n	800134c <ILI9341_Fill+0x24>
 8001344:	4b19      	ldr	r3, [pc, #100]	; (80013ac <ILI9341_Fill+0x84>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b03      	cmp	r3, #3
 800134a:	d107      	bne.n	800135c <ILI9341_Fill+0x34>
	{
		ILI9341_SetCursorPosition(0, 0,   ILI9341_WIDTH -1, ILI9341_HEIGHT -1);
 800134c:	f240 133f 	movw	r3, #319	; 0x13f
 8001350:	22ef      	movs	r2, #239	; 0xef
 8001352:	2100      	movs	r1, #0
 8001354:	2000      	movs	r0, #0
 8001356:	f7ff febb 	bl	80010d0 <ILI9341_SetCursorPosition>
 800135a:	e00e      	b.n	800137a <ILI9341_Fill+0x52>
	}
	else if(rotationNum==2 || rotationNum==4)
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <ILI9341_Fill+0x84>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d003      	beq.n	800136c <ILI9341_Fill+0x44>
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <ILI9341_Fill+0x84>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b04      	cmp	r3, #4
 800136a:	d116      	bne.n	800139a <ILI9341_Fill+0x72>
	{
		ILI9341_SetCursorPosition(0, 0, ILI9341_HEIGHT -1, ILI9341_WIDTH -1);
 800136c:	23ef      	movs	r3, #239	; 0xef
 800136e:	f240 123f 	movw	r2, #319	; 0x13f
 8001372:	2100      	movs	r1, #0
 8001374:	2000      	movs	r0, #0
 8001376:	f7ff feab 	bl	80010d0 <ILI9341_SetCursorPosition>
	}
	
	
	while (n) {
 800137a:	e00e      	b.n	800139a <ILI9341_Fill+0x72>
			n--;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	3b01      	subs	r3, #1
 8001380:	60fb      	str	r3, [r7, #12]
       ILI9341_SendData(color>>8);
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	b29b      	uxth	r3, r3
 8001388:	b2db      	uxtb	r3, r3
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fe6c 	bl	8001068 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fe67 	bl	8001068 <ILI9341_SendData>
	while (n) {
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1ed      	bne.n	800137c <ILI9341_Fill+0x54>
	}
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000000 	.word	0x20000000

080013b0 <ILI9341_Fill_Rect>:
//7. Rectangle drawing functions
void ILI9341_Fill_Rect(unsigned int x0,unsigned int y0, unsigned int x1,unsigned int y1, uint16_t color) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
 80013bc:	603b      	str	r3, [r7, #0]
	uint32_t n = ((x1+1)-x0)*((y1+1)-y0);
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	3301      	adds	r3, #1
 80013c6:	6839      	ldr	r1, [r7, #0]
 80013c8:	68ba      	ldr	r2, [r7, #8]
 80013ca:	1a8a      	subs	r2, r1, r2
 80013cc:	3201      	adds	r2, #1
 80013ce:	fb02 f303 	mul.w	r3, r2, r3
 80013d2:	617b      	str	r3, [r7, #20]
	if (n>ILI9341_PIXEL_COUNT) n=ILI9341_PIXEL_COUNT;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 80013da:	d902      	bls.n	80013e2 <ILI9341_Fill_Rect+0x32>
 80013dc:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80013e0:	617b      	str	r3, [r7, #20]
	ILI9341_SetCursorPosition(x0, y0, x1, y1);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	b298      	uxth	r0, r3
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	b299      	uxth	r1, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	f7ff fe6d 	bl	80010d0 <ILI9341_SetCursorPosition>
	while (n) {
 80013f6:	e00e      	b.n	8001416 <ILI9341_Fill_Rect+0x66>
			n--;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
      ILI9341_SendData(color>>8);
 80013fe:	8c3b      	ldrh	r3, [r7, #32]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	b29b      	uxth	r3, r3
 8001404:	b2db      	uxtb	r3, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fe2e 	bl	8001068 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 800140c:	8c3b      	ldrh	r3, [r7, #32]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fe29 	bl	8001068 <ILI9341_SendData>
	while (n) {
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1ed      	bne.n	80013f8 <ILI9341_Fill_Rect+0x48>
	}
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <fillCircleHelper>:
      ILI9341_DrawPixel(x0 - x, y0 - y, color);
    }
  }
}
static void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 8001426:	b590      	push	{r4, r7, lr}
 8001428:	b087      	sub	sp, #28
 800142a:	af00      	add	r7, sp, #0
 800142c:	4604      	mov	r4, r0
 800142e:	4608      	mov	r0, r1
 8001430:	4611      	mov	r1, r2
 8001432:	461a      	mov	r2, r3
 8001434:	4623      	mov	r3, r4
 8001436:	80fb      	strh	r3, [r7, #6]
 8001438:	4603      	mov	r3, r0
 800143a:	80bb      	strh	r3, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
 8001440:	4613      	mov	r3, r2
 8001442:	707b      	strb	r3, [r7, #1]
	int16_t f     = 1 - r;
 8001444:	887b      	ldrh	r3, [r7, #2]
 8001446:	f1c3 0301 	rsb	r3, r3, #1
 800144a:	b29b      	uxth	r3, r3
 800144c:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 800144e:	2301      	movs	r3, #1
 8001450:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8001452:	887b      	ldrh	r3, [r7, #2]
 8001454:	461a      	mov	r2, r3
 8001456:	03d2      	lsls	r2, r2, #15
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	b29b      	uxth	r3, r3
 800145e:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 8001464:	887b      	ldrh	r3, [r7, #2]
 8001466:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 8001468:	e083      	b.n	8001572 <fillCircleHelper+0x14c>
    if (f >= 0) {
 800146a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800146e:	2b00      	cmp	r3, #0
 8001470:	db0e      	blt.n	8001490 <fillCircleHelper+0x6a>
      y--;
 8001472:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001476:	b29b      	uxth	r3, r3
 8001478:	3b01      	subs	r3, #1
 800147a:	b29b      	uxth	r3, r3
 800147c:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 800147e:	8a7b      	ldrh	r3, [r7, #18]
 8001480:	3302      	adds	r3, #2
 8001482:	b29b      	uxth	r3, r3
 8001484:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 8001486:	8afa      	ldrh	r2, [r7, #22]
 8001488:	8a7b      	ldrh	r3, [r7, #18]
 800148a:	4413      	add	r3, r2
 800148c:	b29b      	uxth	r3, r3
 800148e:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8001490:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001494:	b29b      	uxth	r3, r3
 8001496:	3301      	adds	r3, #1
 8001498:	b29b      	uxth	r3, r3
 800149a:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 800149c:	8abb      	ldrh	r3, [r7, #20]
 800149e:	3302      	adds	r3, #2
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 80014a4:	8afa      	ldrh	r2, [r7, #22]
 80014a6:	8abb      	ldrh	r3, [r7, #20]
 80014a8:	4413      	add	r3, r2
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 80014ae:	787b      	ldrb	r3, [r7, #1]
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d02b      	beq.n	8001510 <fillCircleHelper+0xea>
      ILI9341_drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 80014b8:	88fa      	ldrh	r2, [r7, #6]
 80014ba:	8a3b      	ldrh	r3, [r7, #16]
 80014bc:	4413      	add	r3, r2
 80014be:	b29b      	uxth	r3, r3
 80014c0:	b218      	sxth	r0, r3
 80014c2:	88ba      	ldrh	r2, [r7, #4]
 80014c4:	89fb      	ldrh	r3, [r7, #14]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	b219      	sxth	r1, r3
 80014cc:	89fb      	ldrh	r3, [r7, #14]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014d4:	4413      	add	r3, r2
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	3301      	adds	r3, #1
 80014da:	b29b      	uxth	r3, r3
 80014dc:	b21a      	sxth	r2, r3
 80014de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014e0:	f000 f921 	bl	8001726 <ILI9341_drawFastVLine>
      ILI9341_drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80014e4:	88fa      	ldrh	r2, [r7, #6]
 80014e6:	89fb      	ldrh	r3, [r7, #14]
 80014e8:	4413      	add	r3, r2
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	b218      	sxth	r0, r3
 80014ee:	88ba      	ldrh	r2, [r7, #4]
 80014f0:	8a3b      	ldrh	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	b219      	sxth	r1, r3
 80014f8:	8a3b      	ldrh	r3, [r7, #16]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001500:	4413      	add	r3, r2
 8001502:	b29b      	uxth	r3, r3
 8001504:	3301      	adds	r3, #1
 8001506:	b29b      	uxth	r3, r3
 8001508:	b21a      	sxth	r2, r3
 800150a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800150c:	f000 f90b 	bl	8001726 <ILI9341_drawFastVLine>
    }
    if (cornername & 0x2) {
 8001510:	787b      	ldrb	r3, [r7, #1]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d02b      	beq.n	8001572 <fillCircleHelper+0x14c>
      ILI9341_drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 800151a:	88fa      	ldrh	r2, [r7, #6]
 800151c:	8a3b      	ldrh	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	b29b      	uxth	r3, r3
 8001522:	b218      	sxth	r0, r3
 8001524:	88ba      	ldrh	r2, [r7, #4]
 8001526:	89fb      	ldrh	r3, [r7, #14]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	b29b      	uxth	r3, r3
 800152c:	b219      	sxth	r1, r3
 800152e:	89fb      	ldrh	r3, [r7, #14]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	b29a      	uxth	r2, r3
 8001534:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001536:	4413      	add	r3, r2
 8001538:	b29b      	uxth	r3, r3
 800153a:	3301      	adds	r3, #1
 800153c:	b29b      	uxth	r3, r3
 800153e:	b21a      	sxth	r2, r3
 8001540:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001542:	f000 f8f0 	bl	8001726 <ILI9341_drawFastVLine>
      ILI9341_drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 8001546:	88fa      	ldrh	r2, [r7, #6]
 8001548:	89fb      	ldrh	r3, [r7, #14]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	b29b      	uxth	r3, r3
 800154e:	b218      	sxth	r0, r3
 8001550:	88ba      	ldrh	r2, [r7, #4]
 8001552:	8a3b      	ldrh	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	b29b      	uxth	r3, r3
 8001558:	b219      	sxth	r1, r3
 800155a:	8a3b      	ldrh	r3, [r7, #16]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	b29a      	uxth	r2, r3
 8001560:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001562:	4413      	add	r3, r2
 8001564:	b29b      	uxth	r3, r3
 8001566:	3301      	adds	r3, #1
 8001568:	b29b      	uxth	r3, r3
 800156a:	b21a      	sxth	r2, r3
 800156c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800156e:	f000 f8da 	bl	8001726 <ILI9341_drawFastVLine>
  while (x<y) {
 8001572:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001576:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800157a:	429a      	cmp	r2, r3
 800157c:	f6ff af75 	blt.w	800146a <fillCircleHelper+0x44>
    }
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	371c      	adds	r7, #28
 8001586:	46bd      	mov	sp, r7
 8001588:	bd90      	pop	{r4, r7, pc}

0800158a <ILI9341_fillCircle>:
void ILI9341_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 800158a:	b590      	push	{r4, r7, lr}
 800158c:	b085      	sub	sp, #20
 800158e:	af02      	add	r7, sp, #8
 8001590:	4604      	mov	r4, r0
 8001592:	4608      	mov	r0, r1
 8001594:	4611      	mov	r1, r2
 8001596:	461a      	mov	r2, r3
 8001598:	4623      	mov	r3, r4
 800159a:	80fb      	strh	r3, [r7, #6]
 800159c:	4603      	mov	r3, r0
 800159e:	80bb      	strh	r3, [r7, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	807b      	strh	r3, [r7, #2]
 80015a4:	4613      	mov	r3, r2
 80015a6:	803b      	strh	r3, [r7, #0]
	ILI9341_drawFastVLine(x0, y0-r, 2*r+1, color);
 80015a8:	88ba      	ldrh	r2, [r7, #4]
 80015aa:	887b      	ldrh	r3, [r7, #2]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	b219      	sxth	r1, r3
 80015b2:	887b      	ldrh	r3, [r7, #2]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	3301      	adds	r3, #1
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	b21a      	sxth	r2, r3
 80015be:	883b      	ldrh	r3, [r7, #0]
 80015c0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80015c4:	f000 f8af 	bl	8001726 <ILI9341_drawFastVLine>
  fillCircleHelper(x0, y0, r, 3, 0, color);
 80015c8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80015cc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80015d0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80015d4:	883b      	ldrh	r3, [r7, #0]
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	2300      	movs	r3, #0
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2303      	movs	r3, #3
 80015de:	f7ff ff22 	bl	8001426 <fillCircleHelper>
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd90      	pop	{r4, r7, pc}

080015ea <ILI9341_drawLine>:

//9. Line drawing functions
void ILI9341_drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80015ea:	b590      	push	{r4, r7, lr}
 80015ec:	b089      	sub	sp, #36	; 0x24
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4604      	mov	r4, r0
 80015f2:	4608      	mov	r0, r1
 80015f4:	4611      	mov	r1, r2
 80015f6:	461a      	mov	r2, r3
 80015f8:	4623      	mov	r3, r4
 80015fa:	80fb      	strh	r3, [r7, #6]
 80015fc:	4603      	mov	r3, r0
 80015fe:	80bb      	strh	r3, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	807b      	strh	r3, [r7, #2]
 8001604:	4613      	mov	r3, r2
 8001606:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8001608:	f9b7 2000 	ldrsh.w	r2, [r7]
 800160c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001616:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800161a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800161e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001622:	1acb      	subs	r3, r1, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	bfb8      	it	lt
 8001628:	425b      	neglt	r3, r3
 800162a:	429a      	cmp	r2, r3
 800162c:	bfcc      	ite	gt
 800162e:	2301      	movgt	r3, #1
 8001630:	2300      	movle	r3, #0
 8001632:	b2db      	uxtb	r3, r3
 8001634:	837b      	strh	r3, [r7, #26]
  if (steep) {
 8001636:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00b      	beq.n	8001656 <ILI9341_drawLine+0x6c>
    swap(x0, y0);
 800163e:	88fb      	ldrh	r3, [r7, #6]
 8001640:	833b      	strh	r3, [r7, #24]
 8001642:	88bb      	ldrh	r3, [r7, #4]
 8001644:	80fb      	strh	r3, [r7, #6]
 8001646:	8b3b      	ldrh	r3, [r7, #24]
 8001648:	80bb      	strh	r3, [r7, #4]
    swap(x1, y1);
 800164a:	887b      	ldrh	r3, [r7, #2]
 800164c:	82fb      	strh	r3, [r7, #22]
 800164e:	883b      	ldrh	r3, [r7, #0]
 8001650:	807b      	strh	r3, [r7, #2]
 8001652:	8afb      	ldrh	r3, [r7, #22]
 8001654:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1) {
 8001656:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800165a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800165e:	429a      	cmp	r2, r3
 8001660:	dd0b      	ble.n	800167a <ILI9341_drawLine+0x90>
    swap(x0, x1);
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	82bb      	strh	r3, [r7, #20]
 8001666:	887b      	ldrh	r3, [r7, #2]
 8001668:	80fb      	strh	r3, [r7, #6]
 800166a:	8abb      	ldrh	r3, [r7, #20]
 800166c:	807b      	strh	r3, [r7, #2]
    swap(y0, y1);
 800166e:	88bb      	ldrh	r3, [r7, #4]
 8001670:	827b      	strh	r3, [r7, #18]
 8001672:	883b      	ldrh	r3, [r7, #0]
 8001674:	80bb      	strh	r3, [r7, #4]
 8001676:	8a7b      	ldrh	r3, [r7, #18]
 8001678:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	b29b      	uxth	r3, r3
 8001682:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8001684:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001688:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	bfb8      	it	lt
 8001692:	425b      	neglt	r3, r3
 8001694:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 8001696:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800169a:	0fda      	lsrs	r2, r3, #31
 800169c:	4413      	add	r3, r2
 800169e:	105b      	asrs	r3, r3, #1
 80016a0:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1) {
 80016a2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80016a6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	da02      	bge.n	80016b4 <ILI9341_drawLine+0xca>
    ystep = 1;
 80016ae:	2301      	movs	r3, #1
 80016b0:	83bb      	strh	r3, [r7, #28]
 80016b2:	e02d      	b.n	8001710 <ILI9341_drawLine+0x126>
  } else {
    ystep = -1;
 80016b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016b8:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++) {
 80016ba:	e029      	b.n	8001710 <ILI9341_drawLine+0x126>
    if (steep) {
 80016bc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d006      	beq.n	80016d2 <ILI9341_drawLine+0xe8>
      ILI9341_DrawPixel(y0, x0, color);
 80016c4:	88bb      	ldrh	r3, [r7, #4]
 80016c6:	88f9      	ldrh	r1, [r7, #6]
 80016c8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fe0c 	bl	80012e8 <ILI9341_DrawPixel>
 80016d0:	e005      	b.n	80016de <ILI9341_drawLine+0xf4>
    } else {
      ILI9341_DrawPixel(x0, y0, color);
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	88b9      	ldrh	r1, [r7, #4]
 80016d6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fe05 	bl	80012e8 <ILI9341_DrawPixel>
    }
    err -= dy;
 80016de:	8bfa      	ldrh	r2, [r7, #30]
 80016e0:	89fb      	ldrh	r3, [r7, #14]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	83fb      	strh	r3, [r7, #30]
    if (err < 0) {
 80016e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	da09      	bge.n	8001704 <ILI9341_drawLine+0x11a>
      y0 += ystep;
 80016f0:	88ba      	ldrh	r2, [r7, #4]
 80016f2:	8bbb      	ldrh	r3, [r7, #28]
 80016f4:	4413      	add	r3, r2
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	80bb      	strh	r3, [r7, #4]
      err += dx;
 80016fa:	8bfa      	ldrh	r2, [r7, #30]
 80016fc:	8a3b      	ldrh	r3, [r7, #16]
 80016fe:	4413      	add	r3, r2
 8001700:	b29b      	uxth	r3, r3
 8001702:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++) {
 8001704:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001708:	b29b      	uxth	r3, r3
 800170a:	3301      	adds	r3, #1
 800170c:	b29b      	uxth	r3, r3
 800170e:	80fb      	strh	r3, [r7, #6]
 8001710:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001714:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001718:	429a      	cmp	r2, r3
 800171a:	ddcf      	ble.n	80016bc <ILI9341_drawLine+0xd2>
    }
  }
}	
 800171c:	bf00      	nop
 800171e:	bf00      	nop
 8001720:	3724      	adds	r7, #36	; 0x24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd90      	pop	{r4, r7, pc}

08001726 <ILI9341_drawFastVLine>:
{
	ILI9341_drawLine(x, y, x+w-1, y, color);
}

void ILI9341_drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8001726:	b590      	push	{r4, r7, lr}
 8001728:	b085      	sub	sp, #20
 800172a:	af02      	add	r7, sp, #8
 800172c:	4604      	mov	r4, r0
 800172e:	4608      	mov	r0, r1
 8001730:	4611      	mov	r1, r2
 8001732:	461a      	mov	r2, r3
 8001734:	4623      	mov	r3, r4
 8001736:	80fb      	strh	r3, [r7, #6]
 8001738:	4603      	mov	r3, r0
 800173a:	80bb      	strh	r3, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	807b      	strh	r3, [r7, #2]
 8001740:	4613      	mov	r3, r2
 8001742:	803b      	strh	r3, [r7, #0]
	ILI9341_drawLine(x, y, x, y+h-1, color);
 8001744:	88ba      	ldrh	r2, [r7, #4]
 8001746:	887b      	ldrh	r3, [r7, #2]
 8001748:	4413      	add	r3, r2
 800174a:	b29b      	uxth	r3, r3
 800174c:	3b01      	subs	r3, #1
 800174e:	b29b      	uxth	r3, r3
 8001750:	b21c      	sxth	r4, r3
 8001752:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001756:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800175a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800175e:	883b      	ldrh	r3, [r7, #0]
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	4623      	mov	r3, r4
 8001764:	f7ff ff41 	bl	80015ea <ILI9341_drawLine>
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	bd90      	pop	{r4, r7, pc}

08001770 <ILI9341_drawChar>:
	}
}

//11. Text printing functions
void ILI9341_drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8001770:	b5b0      	push	{r4, r5, r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af02      	add	r7, sp, #8
 8001776:	4604      	mov	r4, r0
 8001778:	4608      	mov	r0, r1
 800177a:	4611      	mov	r1, r2
 800177c:	461a      	mov	r2, r3
 800177e:	4623      	mov	r3, r4
 8001780:	80fb      	strh	r3, [r7, #6]
 8001782:	4603      	mov	r3, r0
 8001784:	80bb      	strh	r3, [r7, #4]
 8001786:	460b      	mov	r3, r1
 8001788:	70fb      	strb	r3, [r7, #3]
 800178a:	4613      	mov	r3, r2
 800178c:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 800178e:	4b98      	ldr	r3, [pc, #608]	; (80019f0 <ILI9341_drawChar+0x280>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d003      	beq.n	800179e <ILI9341_drawChar+0x2e>
 8001796:	4b96      	ldr	r3, [pc, #600]	; (80019f0 <ILI9341_drawChar+0x280>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b03      	cmp	r3, #3
 800179c:	d11f      	bne.n	80017de <ILI9341_drawChar+0x6e>
	{
		if((x >= ILI9341_WIDTH)            || // Clip right
 800179e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017a2:	2bef      	cmp	r3, #239	; 0xef
 80017a4:	f300 811d 	bgt.w	80019e2 <ILI9341_drawChar+0x272>
 80017a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017ac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80017b0:	f280 8117 	bge.w	80019e2 <ILI9341_drawChar+0x272>
     (y >= ILI9341_HEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 80017b4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80017b8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80017bc:	4613      	mov	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4413      	add	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	440b      	add	r3, r1
     (y >= ILI9341_HEIGHT)           || // Clip bottom
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f340 810b 	ble.w	80019e2 <ILI9341_drawChar+0x272>
     ((y + 8 * size - 1) < 0))   // Clip top
 80017cc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80017d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 80017d8:	2b00      	cmp	r3, #0
 80017da:	dc21      	bgt.n	8001820 <ILI9341_drawChar+0xb0>
    return;
 80017dc:	e101      	b.n	80019e2 <ILI9341_drawChar+0x272>
	}
	else
	{
		if((y >= ILI9341_WIDTH)            || // Clip right
 80017de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017e2:	2bef      	cmp	r3, #239	; 0xef
 80017e4:	f300 80ff 	bgt.w	80019e6 <ILI9341_drawChar+0x276>
 80017e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ec:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80017f0:	f280 80f9 	bge.w	80019e6 <ILI9341_drawChar+0x276>
     (x >= ILI9341_HEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 80017f4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80017f8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80017fc:	4613      	mov	r3, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4413      	add	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	440b      	add	r3, r1
     (x >= ILI9341_HEIGHT)           || // Clip bottom
 8001806:	2b00      	cmp	r3, #0
 8001808:	f340 80ed 	ble.w	80019e6 <ILI9341_drawChar+0x276>
     ((x + 8 * size - 1) < 0))   // Clip top
 800180c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001810:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4413      	add	r3, r2
     ((y + 6 * size - 1) < 0) || // Clip left
 8001818:	2b00      	cmp	r3, #0
 800181a:	f340 80e4 	ble.w	80019e6 <ILI9341_drawChar+0x276>
 800181e:	e000      	b.n	8001822 <ILI9341_drawChar+0xb2>
		if((x >= ILI9341_WIDTH)            || // Clip right
 8001820:	bf00      	nop
    return;
	}	
	

  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 8001822:	4b74      	ldr	r3, [pc, #464]	; (80019f4 <ILI9341_drawChar+0x284>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	f083 0301 	eor.w	r3, r3, #1
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <ILI9341_drawChar+0xcc>
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	2baf      	cmp	r3, #175	; 0xaf
 8001834:	d902      	bls.n	800183c <ILI9341_drawChar+0xcc>
 8001836:	78fb      	ldrb	r3, [r7, #3]
 8001838:	3301      	adds	r3, #1
 800183a:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 800183c:	2300      	movs	r3, #0
 800183e:	73fb      	strb	r3, [r7, #15]
 8001840:	e0c9      	b.n	80019d6 <ILI9341_drawChar+0x266>
    uint8_t line;
    if (i == 5) 
 8001842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001846:	2b05      	cmp	r3, #5
 8001848:	d102      	bne.n	8001850 <ILI9341_drawChar+0xe0>
      line = 0x0;
 800184a:	2300      	movs	r3, #0
 800184c:	73bb      	strb	r3, [r7, #14]
 800184e:	e00b      	b.n	8001868 <ILI9341_drawChar+0xf8>
    else 
      line = pgm_read_byte(font1+(c*5)+i);
 8001850:	78fa      	ldrb	r2, [r7, #3]
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	461a      	mov	r2, r3
 800185a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185e:	4413      	add	r3, r2
 8001860:	4a65      	ldr	r2, [pc, #404]	; (80019f8 <ILI9341_drawChar+0x288>)
 8001862:	4413      	add	r3, r2
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8001868:	2300      	movs	r3, #0
 800186a:	737b      	strb	r3, [r7, #13]
 800186c:	e0a8      	b.n	80019c0 <ILI9341_drawChar+0x250>
      if (line & 0x1) {
 800186e:	7bbb      	ldrb	r3, [r7, #14]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	d04b      	beq.n	8001910 <ILI9341_drawChar+0x1a0>
        if (size == 1) // default size
 8001878:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800187c:	2b01      	cmp	r3, #1
 800187e:	d110      	bne.n	80018a2 <ILI9341_drawChar+0x132>
          ILI9341_DrawPixel(x+i, y+j, color);
 8001880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001884:	b29a      	uxth	r2, r3
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	4413      	add	r3, r2
 800188a:	b298      	uxth	r0, r3
 800188c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001890:	b29a      	uxth	r2, r3
 8001892:	88bb      	ldrh	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	b29b      	uxth	r3, r3
 8001898:	883a      	ldrh	r2, [r7, #0]
 800189a:	4619      	mov	r1, r3
 800189c:	f7ff fd24 	bl	80012e8 <ILI9341_DrawPixel>
 80018a0:	e085      	b.n	80019ae <ILI9341_drawChar+0x23e>
        else {  // big size
          ILI9341_Fill_Rect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 80018a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80018a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018aa:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80018ae:	fb01 f303 	mul.w	r3, r1, r3
 80018b2:	4413      	add	r3, r2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80018ba:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018be:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80018c2:	fb01 f303 	mul.w	r3, r1, r3
 80018c6:	4413      	add	r3, r2
 80018c8:	461c      	mov	r4, r3
 80018ca:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80018ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d2:	441a      	add	r2, r3
 80018d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d8:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80018dc:	fb01 f303 	mul.w	r3, r1, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	461d      	mov	r5, r3
 80018e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018ee:	441a      	add	r2, r3
 80018f0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018f4:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80018f8:	fb01 f303 	mul.w	r3, r1, r3
 80018fc:	4413      	add	r3, r2
 80018fe:	461a      	mov	r2, r3
 8001900:	883b      	ldrh	r3, [r7, #0]
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	4613      	mov	r3, r2
 8001906:	462a      	mov	r2, r5
 8001908:	4621      	mov	r1, r4
 800190a:	f7ff fd51 	bl	80013b0 <ILI9341_Fill_Rect>
 800190e:	e04e      	b.n	80019ae <ILI9341_drawChar+0x23e>
        } 
      } else if (bg != color) {
 8001910:	8c3a      	ldrh	r2, [r7, #32]
 8001912:	883b      	ldrh	r3, [r7, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d04a      	beq.n	80019ae <ILI9341_drawChar+0x23e>
        if (size == 1) // default size
 8001918:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800191c:	2b01      	cmp	r3, #1
 800191e:	d110      	bne.n	8001942 <ILI9341_drawChar+0x1d2>
          ILI9341_DrawPixel(x+i, y+j, bg);
 8001920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001924:	b29a      	uxth	r2, r3
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	4413      	add	r3, r2
 800192a:	b298      	uxth	r0, r3
 800192c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001930:	b29a      	uxth	r2, r3
 8001932:	88bb      	ldrh	r3, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	b29b      	uxth	r3, r3
 8001938:	8c3a      	ldrh	r2, [r7, #32]
 800193a:	4619      	mov	r1, r3
 800193c:	f7ff fcd4 	bl	80012e8 <ILI9341_DrawPixel>
 8001940:	e035      	b.n	80019ae <ILI9341_drawChar+0x23e>
        else {  // big size
          ILI9341_Fill_Rect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 8001942:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800194e:	fb01 f303 	mul.w	r3, r1, r3
 8001952:	4413      	add	r3, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800195a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800195e:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001962:	fb01 f303 	mul.w	r3, r1, r3
 8001966:	4413      	add	r3, r2
 8001968:	461c      	mov	r4, r3
 800196a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800196e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001972:	441a      	add	r2, r3
 8001974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001978:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800197c:	fb01 f303 	mul.w	r3, r1, r3
 8001980:	4413      	add	r3, r2
 8001982:	461d      	mov	r5, r3
 8001984:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800198e:	441a      	add	r2, r3
 8001990:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001994:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001998:	fb01 f303 	mul.w	r3, r1, r3
 800199c:	4413      	add	r3, r2
 800199e:	461a      	mov	r2, r3
 80019a0:	8c3b      	ldrh	r3, [r7, #32]
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	4613      	mov	r3, r2
 80019a6:	462a      	mov	r2, r5
 80019a8:	4621      	mov	r1, r4
 80019aa:	f7ff fd01 	bl	80013b0 <ILI9341_Fill_Rect>
        }
      }
      line >>= 1;
 80019ae:	7bbb      	ldrb	r3, [r7, #14]
 80019b0:	085b      	lsrs	r3, r3, #1
 80019b2:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 80019b4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	3301      	adds	r3, #1
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	737b      	strb	r3, [r7, #13]
 80019c0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80019c4:	2b07      	cmp	r3, #7
 80019c6:	f77f af52 	ble.w	800186e <ILI9341_drawChar+0xfe>
  for (int8_t i=0; i<6; i++ ) {
 80019ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	3301      	adds	r3, #1
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	73fb      	strb	r3, [r7, #15]
 80019d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019da:	2b05      	cmp	r3, #5
 80019dc:	f77f af31 	ble.w	8001842 <ILI9341_drawChar+0xd2>
 80019e0:	e002      	b.n	80019e8 <ILI9341_drawChar+0x278>
    return;
 80019e2:	bf00      	nop
 80019e4:	e000      	b.n	80019e8 <ILI9341_drawChar+0x278>
    return;
 80019e6:	bf00      	nop
    }
  }
}
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bdb0      	pop	{r4, r5, r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000000 	.word	0x20000000
 80019f4:	2000025c 	.word	0x2000025c
 80019f8:	0800cffc 	.word	0x0800cffc

080019fc <ILI9341_printText>:
void ILI9341_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 80019fc:	b590      	push	{r4, r7, lr}
 80019fe:	b089      	sub	sp, #36	; 0x24
 8001a00:	af02      	add	r7, sp, #8
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	4608      	mov	r0, r1
 8001a06:	4611      	mov	r1, r2
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	817b      	strh	r3, [r7, #10]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	813b      	strh	r3, [r7, #8]
 8001a12:	4613      	mov	r3, r2
 8001a14:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 8001a16:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	0052      	lsls	r2, r2, #1
 8001a20:	4413      	add	r3, r2
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	82fb      	strh	r3, [r7, #22]
 8001a2c:	e01a      	b.n	8001a64 <ILI9341_printText+0x68>
	{
		ILI9341_drawChar(x+(offset*i), y, text[i],color,bg,size);
 8001a2e:	8abb      	ldrh	r3, [r7, #20]
 8001a30:	8afa      	ldrh	r2, [r7, #22]
 8001a32:	fb12 f303 	smulbb	r3, r2, r3
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	897b      	ldrh	r3, [r7, #10]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	b218      	sxth	r0, r3
 8001a40:	8afb      	ldrh	r3, [r7, #22]
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	4413      	add	r3, r2
 8001a46:	781a      	ldrb	r2, [r3, #0]
 8001a48:	88fc      	ldrh	r4, [r7, #6]
 8001a4a:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8001a4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a52:	9301      	str	r3, [sp, #4]
 8001a54:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	4623      	mov	r3, r4
 8001a5a:	f7ff fe89 	bl	8001770 <ILI9341_drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8001a5e:	8afb      	ldrh	r3, [r7, #22]
 8001a60:	3301      	adds	r3, #1
 8001a62:	82fb      	strh	r3, [r7, #22]
 8001a64:	8afb      	ldrh	r3, [r7, #22]
 8001a66:	2b27      	cmp	r3, #39	; 0x27
 8001a68:	d805      	bhi.n	8001a76 <ILI9341_printText+0x7a>
 8001a6a:	8afb      	ldrh	r3, [r7, #22]
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	4413      	add	r3, r2
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1db      	bne.n	8001a2e <ILI9341_printText+0x32>
	}
}
 8001a76:	bf00      	nop
 8001a78:	371c      	adds	r7, #28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd90      	pop	{r4, r7, pc}
	...

08001a80 <ILI9341_setRotation>:
	}
}

//13. Set screen rotation
void ILI9341_setRotation(uint8_t rotate)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
	switch(rotate)
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d832      	bhi.n	8001af8 <ILI9341_setRotation+0x78>
 8001a92:	a201      	add	r2, pc, #4	; (adr r2, 8001a98 <ILI9341_setRotation+0x18>)
 8001a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a98:	08001aa9 	.word	0x08001aa9
 8001a9c:	08001abd 	.word	0x08001abd
 8001aa0:	08001ad1 	.word	0x08001ad1
 8001aa4:	08001ae5 	.word	0x08001ae5
	{
		case 1:
			rotationNum = 1;
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <ILI9341_setRotation+0x94>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001aae:	2036      	movs	r0, #54	; 0x36
 8001ab0:	f7ff faa6 	bl	8001000 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8001ab4:	2088      	movs	r0, #136	; 0x88
 8001ab6:	f7ff fad7 	bl	8001068 <ILI9341_SendData>
			break;
 8001aba:	e027      	b.n	8001b0c <ILI9341_setRotation+0x8c>
		case 2:
			rotationNum = 2;
 8001abc:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <ILI9341_setRotation+0x94>)
 8001abe:	2202      	movs	r2, #2
 8001ac0:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001ac2:	2036      	movs	r0, #54	; 0x36
 8001ac4:	f7ff fa9c 	bl	8001000 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8001ac8:	2028      	movs	r0, #40	; 0x28
 8001aca:	f7ff facd 	bl	8001068 <ILI9341_SendData>
			break;
 8001ace:	e01d      	b.n	8001b0c <ILI9341_setRotation+0x8c>
		case 3:
			rotationNum = 3;
 8001ad0:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <ILI9341_setRotation+0x94>)
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001ad6:	2036      	movs	r0, #54	; 0x36
 8001ad8:	f7ff fa92 	bl	8001000 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 8001adc:	2048      	movs	r0, #72	; 0x48
 8001ade:	f7ff fac3 	bl	8001068 <ILI9341_SendData>
			break;
 8001ae2:	e013      	b.n	8001b0c <ILI9341_setRotation+0x8c>
		case 4:
			rotationNum = 4;
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <ILI9341_setRotation+0x94>)
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001aea:	2036      	movs	r0, #54	; 0x36
 8001aec:	f7ff fa88 	bl	8001000 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8001af0:	20e8      	movs	r0, #232	; 0xe8
 8001af2:	f7ff fab9 	bl	8001068 <ILI9341_SendData>
			break;
 8001af6:	e009      	b.n	8001b0c <ILI9341_setRotation+0x8c>
		default:
			rotationNum = 1;
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <ILI9341_setRotation+0x94>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001afe:	2036      	movs	r0, #54	; 0x36
 8001b00:	f7ff fa7e 	bl	8001000 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8001b04:	2088      	movs	r0, #136	; 0x88
 8001b06:	f7ff faaf 	bl	8001068 <ILI9341_SendData>
			break;
 8001b0a:	bf00      	nop
	}
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000000 	.word	0x20000000

08001b18 <ILI9341_getRotation>:
//14. Get screen rotation
uint8_t ILI9341_getRotation(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
	return rotationNum;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <ILI9341_getRotation+0x14>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000000 	.word	0x20000000

08001b30 <TSC2046_SendCommand>:
#define _TS_CS_DISABLE		HAL_GPIO_WritePin(tsCS_GPIO, tsCS_PIN, GPIO_PIN_SET);

//Functions definitions
//1. Send TSC2046 Command and wait for a response
uint16_t TSC2046_SendCommand(uint8_t cmd)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3] = {0,0,0};
 8001b3a:	4a1e      	ldr	r2, [pc, #120]	; (8001bb4 <TSC2046_SendCommand+0x84>)
 8001b3c:	f107 0308 	add.w	r3, r7, #8
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	4611      	mov	r1, r2
 8001b44:	8019      	strh	r1, [r3, #0]
 8001b46:	3302      	adds	r3, #2
 8001b48:	0c12      	lsrs	r2, r2, #16
 8001b4a:	701a      	strb	r2, [r3, #0]
	uint16_t return16=0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	81fb      	strh	r3, [r7, #14]
	
	_TS_CS_ENBALE;
 8001b50:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <TSC2046_SendCommand+0x88>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a19      	ldr	r2, [pc, #100]	; (8001bbc <TSC2046_SendCommand+0x8c>)
 8001b56:	8811      	ldrh	r1, [r2, #0]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f003 fb94 	bl	8005288 <HAL_GPIO_WritePin>
	spiBuf[0] = cmd;
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	723b      	strb	r3, [r7, #8]
	HAL_SPI_Transmit(&tsSPIhandle, spiBuf, 1, 10);
 8001b64:	f107 0108 	add.w	r1, r7, #8
 8001b68:	230a      	movs	r3, #10
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	4814      	ldr	r0, [pc, #80]	; (8001bc0 <TSC2046_SendCommand+0x90>)
 8001b6e:	f004 f8c6 	bl	8005cfe <HAL_SPI_Transmit>
	//Wait for response (3 ms)
	HAL_Delay(3);
 8001b72:	2003      	movs	r0, #3
 8001b74:	f003 f83c 	bl	8004bf0 <HAL_Delay>
	if(HAL_SPI_Receive(&tsSPIhandle, &spiBuf[1], 2, 10) == HAL_OK) return16 = (spiBuf[1]<<4) + (spiBuf[2]>>4);
 8001b78:	f107 0308 	add.w	r3, r7, #8
 8001b7c:	1c59      	adds	r1, r3, #1
 8001b7e:	230a      	movs	r3, #10
 8001b80:	2202      	movs	r2, #2
 8001b82:	480f      	ldr	r0, [pc, #60]	; (8001bc0 <TSC2046_SendCommand+0x90>)
 8001b84:	f004 f9f7 	bl	8005f76 <HAL_SPI_Receive>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10a      	bne.n	8001ba4 <TSC2046_SendCommand+0x74>
 8001b8e:	7a7b      	ldrb	r3, [r7, #9]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	7abb      	ldrb	r3, [r7, #10]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	81fb      	strh	r3, [r7, #14]
 8001ba2:	e001      	b.n	8001ba8 <TSC2046_SendCommand+0x78>
	else return16 = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	81fb      	strh	r3, [r7, #14]
	
	
	return return16;
 8001ba8:	89fb      	ldrh	r3, [r7, #14]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	0800ceb8 	.word	0x0800ceb8
 8001bb8:	20000328 	.word	0x20000328
 8001bbc:	2000032c 	.word	0x2000032c
 8001bc0:	200002d0 	.word	0x200002d0
 8001bc4:	00000000 	.word	0x00000000

08001bc8 <TSC2046_Calibrate>:
//2. Calibrate resistive touch panel
void TSC2046_Calibrate(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
	uint16_t watchVar1=0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	80bb      	strh	r3, [r7, #4]
	TS_TOUCH_RAW_Def myRawTouchDef;
	//Get Top-Left corner calibration coordinate
	TSC2046_TL_point();
 8001bd2:	f000 f9f7 	bl	8001fc4 <TSC2046_TL_point>
	myTS_Calibrate.TL_X = 0;
 8001bd6:	4b8c      	ldr	r3, [pc, #560]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	801a      	strh	r2, [r3, #0]
	myTS_Calibrate.TL_Y = 0;
 8001bdc:	4b8a      	ldr	r3, [pc, #552]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	805a      	strh	r2, [r3, #2]
	myTS_Calibrate.BR_X = 0;
 8001be2:	4b89      	ldr	r3, [pc, #548]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	809a      	strh	r2, [r3, #4]
	myTS_Calibrate.BR_Y = 0;
 8001be8:	4b87      	ldr	r3, [pc, #540]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	80da      	strh	r2, [r3, #6]
	
	while(1)
	{
		watchVar1 = TSC2046_getRaw_Z();
 8001bee:	f000 f9d9 	bl	8001fa4 <TSC2046_getRaw_Z>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	80bb      	strh	r3, [r7, #4]
		if(watchVar1>50)
 8001bf6:	88bb      	ldrh	r3, [r7, #4]
 8001bf8:	2b32      	cmp	r3, #50	; 0x32
 8001bfa:	d91b      	bls.n	8001c34 <TSC2046_Calibrate+0x6c>
		{
			for(uint8_t i=0; i<10; i++)
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	71fb      	strb	r3, [r7, #7]
 8001c00:	e014      	b.n	8001c2c <TSC2046_Calibrate+0x64>
			{
				myRawTouchDef = TSC2046_GetRawTouch();
 8001c02:	f000 f905 	bl	8001e10 <TSC2046_GetRawTouch>
 8001c06:	4603      	mov	r3, r0
 8001c08:	603b      	str	r3, [r7, #0]
				myTS_Calibrate.TL_X += myRawTouchDef.x_touch;
 8001c0a:	4b7f      	ldr	r3, [pc, #508]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c0c:	881a      	ldrh	r2, [r3, #0]
 8001c0e:	883b      	ldrh	r3, [r7, #0]
 8001c10:	4413      	add	r3, r2
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	4b7c      	ldr	r3, [pc, #496]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c16:	801a      	strh	r2, [r3, #0]
				myTS_Calibrate.TL_Y += myRawTouchDef.y_touch;
 8001c18:	4b7b      	ldr	r3, [pc, #492]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c1a:	885a      	ldrh	r2, [r3, #2]
 8001c1c:	887b      	ldrh	r3, [r7, #2]
 8001c1e:	4413      	add	r3, r2
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	4b79      	ldr	r3, [pc, #484]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c24:	805a      	strh	r2, [r3, #2]
			for(uint8_t i=0; i<10; i++)
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	71fb      	strb	r3, [r7, #7]
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	2b09      	cmp	r3, #9
 8001c30:	d9e7      	bls.n	8001c02 <TSC2046_Calibrate+0x3a>
			}
			
			break;
 8001c32:	e003      	b.n	8001c3c <TSC2046_Calibrate+0x74>
		}
		HAL_Delay(10);
 8001c34:	200a      	movs	r0, #10
 8001c36:	f002 ffdb 	bl	8004bf0 <HAL_Delay>
		watchVar1 = TSC2046_getRaw_Z();
 8001c3a:	e7d8      	b.n	8001bee <TSC2046_Calibrate+0x26>
	}
	HAL_Delay(1000);
 8001c3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c40:	f002 ffd6 	bl	8004bf0 <HAL_Delay>
	//Get Bottom-Right corner calibration coordinate
	TSC2046_BR_point();
 8001c44:	f000 f9da 	bl	8001ffc <TSC2046_BR_point>
	while(1)
	{
		watchVar1 = TSC2046_getRaw_Z();
 8001c48:	f000 f9ac 	bl	8001fa4 <TSC2046_getRaw_Z>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	80bb      	strh	r3, [r7, #4]
		if(watchVar1>50)
 8001c50:	88bb      	ldrh	r3, [r7, #4]
 8001c52:	2b32      	cmp	r3, #50	; 0x32
 8001c54:	d91b      	bls.n	8001c8e <TSC2046_Calibrate+0xc6>
		{
			for(uint8_t i=0; i<10; i++)
 8001c56:	2300      	movs	r3, #0
 8001c58:	71bb      	strb	r3, [r7, #6]
 8001c5a:	e014      	b.n	8001c86 <TSC2046_Calibrate+0xbe>
			{
				myRawTouchDef = TSC2046_GetRawTouch();
 8001c5c:	f000 f8d8 	bl	8001e10 <TSC2046_GetRawTouch>
 8001c60:	4603      	mov	r3, r0
 8001c62:	603b      	str	r3, [r7, #0]
				myTS_Calibrate.BR_X += myRawTouchDef.x_touch;
 8001c64:	4b68      	ldr	r3, [pc, #416]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c66:	889a      	ldrh	r2, [r3, #4]
 8001c68:	883b      	ldrh	r3, [r7, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	4b66      	ldr	r3, [pc, #408]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c70:	809a      	strh	r2, [r3, #4]
				myTS_Calibrate.BR_Y += myRawTouchDef.y_touch;
 8001c72:	4b65      	ldr	r3, [pc, #404]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c74:	88da      	ldrh	r2, [r3, #6]
 8001c76:	887b      	ldrh	r3, [r7, #2]
 8001c78:	4413      	add	r3, r2
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	4b62      	ldr	r3, [pc, #392]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c7e:	80da      	strh	r2, [r3, #6]
			for(uint8_t i=0; i<10; i++)
 8001c80:	79bb      	ldrb	r3, [r7, #6]
 8001c82:	3301      	adds	r3, #1
 8001c84:	71bb      	strb	r3, [r7, #6]
 8001c86:	79bb      	ldrb	r3, [r7, #6]
 8001c88:	2b09      	cmp	r3, #9
 8001c8a:	d9e7      	bls.n	8001c5c <TSC2046_Calibrate+0x94>
			}
			break;
 8001c8c:	e003      	b.n	8001c96 <TSC2046_Calibrate+0xce>
		}
		HAL_Delay(10);
 8001c8e:	200a      	movs	r0, #10
 8001c90:	f002 ffae 	bl	8004bf0 <HAL_Delay>
		watchVar1 = TSC2046_getRaw_Z();
 8001c94:	e7d8      	b.n	8001c48 <TSC2046_Calibrate+0x80>
	}
	
	myTS_Calibrate.TL_X *=0.1;
 8001c96:	4b5c      	ldr	r3, [pc, #368]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fc4a 	bl	8000534 <__aeabi_i2d>
 8001ca0:	a357      	add	r3, pc, #348	; (adr r3, 8001e00 <TSC2046_Calibrate+0x238>)
 8001ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca6:	f7fe fcaf 	bl	8000608 <__aeabi_dmul>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4610      	mov	r0, r2
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f7fe ff81 	bl	8000bb8 <__aeabi_d2uiz>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	4b53      	ldr	r3, [pc, #332]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001cbc:	801a      	strh	r2, [r3, #0]
	myTS_Calibrate.TL_Y *=0.1;
 8001cbe:	4b52      	ldr	r3, [pc, #328]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001cc0:	885b      	ldrh	r3, [r3, #2]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fc36 	bl	8000534 <__aeabi_i2d>
 8001cc8:	a34d      	add	r3, pc, #308	; (adr r3, 8001e00 <TSC2046_Calibrate+0x238>)
 8001cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cce:	f7fe fc9b 	bl	8000608 <__aeabi_dmul>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f7fe ff6d 	bl	8000bb8 <__aeabi_d2uiz>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	4b49      	ldr	r3, [pc, #292]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001ce4:	805a      	strh	r2, [r3, #2]
	
	myTS_Calibrate.BR_X *=0.1;
 8001ce6:	4b48      	ldr	r3, [pc, #288]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001ce8:	889b      	ldrh	r3, [r3, #4]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fc22 	bl	8000534 <__aeabi_i2d>
 8001cf0:	a343      	add	r3, pc, #268	; (adr r3, 8001e00 <TSC2046_Calibrate+0x238>)
 8001cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf6:	f7fe fc87 	bl	8000608 <__aeabi_dmul>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4610      	mov	r0, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	f7fe ff59 	bl	8000bb8 <__aeabi_d2uiz>
 8001d06:	4603      	mov	r3, r0
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	4b3f      	ldr	r3, [pc, #252]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d0c:	809a      	strh	r2, [r3, #4]
	myTS_Calibrate.BR_Y *=0.1;
 8001d0e:	4b3e      	ldr	r3, [pc, #248]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d10:	88db      	ldrh	r3, [r3, #6]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fc0e 	bl	8000534 <__aeabi_i2d>
 8001d18:	a339      	add	r3, pc, #228	; (adr r3, 8001e00 <TSC2046_Calibrate+0x238>)
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	f7fe fc73 	bl	8000608 <__aeabi_dmul>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4610      	mov	r0, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f7fe ff45 	bl	8000bb8 <__aeabi_d2uiz>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	4b35      	ldr	r3, [pc, #212]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d34:	80da      	strh	r2, [r3, #6]
	
	//1. Calculate X_Diff, Y_Diff
	myTS_Calibrate.Scale_X = (myTS_Calibrate.Width + 0.0f)/(myTS_Calibrate.BR_X - myTS_Calibrate.TL_X + 0.0f);
 8001d36:	4b34      	ldr	r3, [pc, #208]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d38:	8b1b      	ldrh	r3, [r3, #24]
 8001d3a:	ee07 3a90 	vmov	s15, r3
 8001d3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d42:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001e0c <TSC2046_Calibrate+0x244>
 8001d46:	ee77 6a87 	vadd.f32	s13, s15, s14
 8001d4a:	4b2f      	ldr	r3, [pc, #188]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d4c:	889b      	ldrh	r3, [r3, #4]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b2d      	ldr	r3, [pc, #180]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	ee07 3a90 	vmov	s15, r3
 8001d5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d5e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001e0c <TSC2046_Calibrate+0x244>
 8001d62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001d66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d6a:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d6c:	edc3 7a02 	vstr	s15, [r3, #8]
	myTS_Calibrate.Scale_Y = (myTS_Calibrate.Height + 0.0f)/(myTS_Calibrate.BR_Y - myTS_Calibrate.TL_Y + 0.0f);
 8001d70:	4b25      	ldr	r3, [pc, #148]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d72:	8b5b      	ldrh	r3, [r3, #26]
 8001d74:	ee07 3a90 	vmov	s15, r3
 8001d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d7c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001e0c <TSC2046_Calibrate+0x244>
 8001d80:	ee77 6a87 	vadd.f32	s13, s15, s14
 8001d84:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d86:	88db      	ldrh	r3, [r3, #6]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b1f      	ldr	r3, [pc, #124]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d8c:	885b      	ldrh	r3, [r3, #2]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	ee07 3a90 	vmov	s15, r3
 8001d94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d98:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001e0c <TSC2046_Calibrate+0x244>
 8001d9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001da4:	4b18      	ldr	r3, [pc, #96]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001da6:	edc3 7a03 	vstr	s15, [r3, #12]
	//2. Calculate Scalling ()
	myTS_Calibrate.Bias_X = 10 - myTS_Calibrate.Scale_X*myTS_Calibrate.TL_X;
 8001daa:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001dac:	ed93 7a02 	vldr	s14, [r3, #8]
 8001db0:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	ee07 3a90 	vmov	s15, r3
 8001db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001dca:	edc3 7a04 	vstr	s15, [r3, #16]
	myTS_Calibrate.Bias_Y = 10 - myTS_Calibrate.Scale_Y*myTS_Calibrate.TL_Y;
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001dd0:	ed93 7a03 	vldr	s14, [r3, #12]
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001dd6:	885b      	ldrh	r3, [r3, #2]
 8001dd8:	ee07 3a90 	vmov	s15, r3
 8001ddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001de8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001dee:	edc3 7a05 	vstr	s15, [r3, #20]
	
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	f3af 8000 	nop.w
 8001e00:	9999999a 	.word	0x9999999a
 8001e04:	3fb99999 	.word	0x3fb99999
 8001e08:	20000330 	.word	0x20000330
 8001e0c:	00000000 	.word	0x00000000

08001e10 <TSC2046_GetRawTouch>:
//3. Poll for touch status
TS_TOUCH_RAW_Def TSC2046_GetRawTouch(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
	
	//Assign raw touch based on orientation
	switch (ScreenOrientation)
 8001e16:	4b3d      	ldr	r3, [pc, #244]	; (8001f0c <TSC2046_GetRawTouch+0xfc>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	d867      	bhi.n	8001ef0 <TSC2046_GetRawTouch+0xe0>
 8001e20:	a201      	add	r2, pc, #4	; (adr r2, 8001e28 <TSC2046_GetRawTouch+0x18>)
 8001e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e26:	bf00      	nop
 8001e28:	08001e39 	.word	0x08001e39
 8001e2c:	08001e67 	.word	0x08001e67
 8001e30:	08001e9b 	.word	0x08001e9b
 8001e34:	08001ec9 	.word	0x08001ec9
	{
		case 1:
			localRawTouch.x_touch = 4095 - TSC2046_getRaw_X();
 8001e38:	f000 f894 	bl	8001f64 <TSC2046_getRaw_X>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001e42:	330f      	adds	r3, #15
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	4b32      	ldr	r3, [pc, #200]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001e48:	801a      	strh	r2, [r3, #0]
			localRawTouch.y_touch = TSC2046_getRaw_Y();
 8001e4a:	f000 f89b 	bl	8001f84 <TSC2046_getRaw_Y>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b2f      	ldr	r3, [pc, #188]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001e54:	805a      	strh	r2, [r3, #2]
			myTS_Calibrate.Width = 230;
 8001e56:	4b2f      	ldr	r3, [pc, #188]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001e58:	22e6      	movs	r2, #230	; 0xe6
 8001e5a:	831a      	strh	r2, [r3, #24]
			myTS_Calibrate.Height = 320;
 8001e5c:	4b2d      	ldr	r3, [pc, #180]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001e5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e62:	835a      	strh	r2, [r3, #26]
			break;
 8001e64:	e044      	b.n	8001ef0 <TSC2046_GetRawTouch+0xe0>
		
		case 2:
			localRawTouch.x_touch = 4095 - TSC2046_getRaw_Y();
 8001e66:	f000 f88d 	bl	8001f84 <TSC2046_getRaw_Y>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001e70:	330f      	adds	r3, #15
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	4b26      	ldr	r3, [pc, #152]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001e76:	801a      	strh	r2, [r3, #0]
			localRawTouch.y_touch = 4095 - TSC2046_getRaw_X();
 8001e78:	f000 f874 	bl	8001f64 <TSC2046_getRaw_X>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001e82:	330f      	adds	r3, #15
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001e88:	805a      	strh	r2, [r3, #2]
			myTS_Calibrate.Width = 320;
 8001e8a:	4b22      	ldr	r3, [pc, #136]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001e8c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e90:	831a      	strh	r2, [r3, #24]
			myTS_Calibrate.Height = 240;
 8001e92:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001e94:	22f0      	movs	r2, #240	; 0xf0
 8001e96:	835a      	strh	r2, [r3, #26]
			break;
 8001e98:	e02a      	b.n	8001ef0 <TSC2046_GetRawTouch+0xe0>
		
		case 3:
			localRawTouch.x_touch = TSC2046_getRaw_X();
 8001e9a:	f000 f863 	bl	8001f64 <TSC2046_getRaw_X>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001ea4:	801a      	strh	r2, [r3, #0]
			localRawTouch.y_touch = 4095 - TSC2046_getRaw_Y();
 8001ea6:	f000 f86d 	bl	8001f84 <TSC2046_getRaw_Y>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001eb0:	330f      	adds	r3, #15
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001eb6:	805a      	strh	r2, [r3, #2]
			myTS_Calibrate.Width = 230;
 8001eb8:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001eba:	22e6      	movs	r2, #230	; 0xe6
 8001ebc:	831a      	strh	r2, [r3, #24]
			myTS_Calibrate.Height = 320;
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001ec0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ec4:	835a      	strh	r2, [r3, #26]
			break;
 8001ec6:	e013      	b.n	8001ef0 <TSC2046_GetRawTouch+0xe0>
		
		case 4:
			localRawTouch.x_touch = TSC2046_getRaw_Y();
 8001ec8:	f000 f85c 	bl	8001f84 <TSC2046_getRaw_Y>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001ed2:	801a      	strh	r2, [r3, #0]
			localRawTouch.y_touch = TSC2046_getRaw_X();
 8001ed4:	f000 f846 	bl	8001f64 <TSC2046_getRaw_X>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	461a      	mov	r2, r3
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001ede:	805a      	strh	r2, [r3, #2]
			myTS_Calibrate.Width = 320;
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001ee2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ee6:	831a      	strh	r2, [r3, #24]
			myTS_Calibrate.Height = 240;
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001eea:	22f0      	movs	r2, #240	; 0xf0
 8001eec:	835a      	strh	r2, [r3, #26]
			break;
 8001eee:	bf00      	nop
	}
	
	return localRawTouch;
 8001ef0:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	88ba      	ldrh	r2, [r7, #4]
 8001efa:	f362 030f 	bfi	r3, r2, #0, #16
 8001efe:	88fa      	ldrh	r2, [r7, #6]
 8001f00:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	2000032e 	.word	0x2000032e
 8001f10:	2000034c 	.word	0x2000034c
 8001f14:	20000330 	.word	0x20000330

08001f18 <TSC2046_Begin>:

//4. Begin function
bool  TSC2046_Begin(SPI_HandleTypeDef *touchSPI, GPIO_TypeDef *csPort, uint16_t csPin)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	4613      	mov	r3, r2
 8001f24:	80fb      	strh	r3, [r7, #6]
	//Touch Screen SPI
	memcpy(&tsSPIhandle, touchSPI, sizeof(*touchSPI));
 8001f26:	2258      	movs	r2, #88	; 0x58
 8001f28:	68f9      	ldr	r1, [r7, #12]
 8001f2a:	480a      	ldr	r0, [pc, #40]	; (8001f54 <TSC2046_Begin+0x3c>)
 8001f2c:	f008 faa3 	bl	800a476 <memcpy>
	//Chip-Select Port and Pin
	tsCS_GPIO = csPort;
 8001f30:	4a09      	ldr	r2, [pc, #36]	; (8001f58 <TSC2046_Begin+0x40>)
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	6013      	str	r3, [r2, #0]
	tsCS_PIN = csPin;
 8001f36:	4a09      	ldr	r2, [pc, #36]	; (8001f5c <TSC2046_Begin+0x44>)
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	8013      	strh	r3, [r2, #0]
	//Get screen orientation
	ScreenOrientation = TSC2046_getOrientation();
 8001f3c:	f000 f88c 	bl	8002058 <TSC2046_getOrientation>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <TSC2046_Begin+0x48>)
 8001f46:	701a      	strb	r2, [r3, #0]
}
 8001f48:	bf00      	nop
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	200002d0 	.word	0x200002d0
 8001f58:	20000328 	.word	0x20000328
 8001f5c:	2000032c 	.word	0x2000032c
 8001f60:	2000032e 	.word	0x2000032e

08001f64 <TSC2046_getRaw_X>:

//5. Get raw touch data
//i. get x-axis raw touch 12-bit value
uint16_t TSC2046_getRaw_X(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
	return TSC2046_SendCommand(CMD_X_AXIS | CMD_Default);
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <TSC2046_getRaw_X+0x1c>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fddc 	bl	8001b30 <TSC2046_SendCommand>
 8001f78:	4603      	mov	r3, r0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000001 	.word	0x20000001

08001f84 <TSC2046_getRaw_Y>:
//ii. get y-axis raw touch 12-bit value
uint16_t TSC2046_getRaw_Y(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
	return TSC2046_SendCommand(CMD_Y_AXIS | CMD_Default);
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <TSC2046_getRaw_Y+0x1c>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fdcc 	bl	8001b30 <TSC2046_SendCommand>
 8001f98:	4603      	mov	r3, r0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000001 	.word	0x20000001

08001fa4 <TSC2046_getRaw_Z>:
//iii. get z-axis raw touch 12-bit value
uint16_t TSC2046_getRaw_Z(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
	return TSC2046_SendCommand(CMD_Z_AXIS | CMD_Default);
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <TSC2046_getRaw_Z+0x1c>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fdbc 	bl	8001b30 <TSC2046_SendCommand>
 8001fb8:	4603      	mov	r3, r0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000001 	.word	0x20000001

08001fc4 <TSC2046_TL_point>:

//6. Print calibration points
//i. Top-Left corner point
void TSC2046_TL_point(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af02      	add	r7, sp, #8
	ILI9341_fillCircle(10, 10, 3, COLOR_RED);
 8001fca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001fce:	2203      	movs	r2, #3
 8001fd0:	210a      	movs	r1, #10
 8001fd2:	200a      	movs	r0, #10
 8001fd4:	f7ff fad9 	bl	800158a <ILI9341_fillCircle>
	ILI9341_printText("Press here", 20, 30, COLOR_RED, COLOR_RED, 1);
 8001fd8:	2301      	movs	r3, #1
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001fe6:	221e      	movs	r2, #30
 8001fe8:	2114      	movs	r1, #20
 8001fea:	4803      	ldr	r0, [pc, #12]	; (8001ff8 <TSC2046_TL_point+0x34>)
 8001fec:	f7ff fd06 	bl	80019fc <ILI9341_printText>
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	0800cebc 	.word	0x0800cebc

08001ffc <TSC2046_BR_point>:
//ii. Bottom-Right corner point
void TSC2046_BR_point(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af02      	add	r7, sp, #8
	ILI9341_fillCircle(myTS_Calibrate.Width-10, myTS_Calibrate.Height-10, 3, COLOR_RED);
 8002002:	4b13      	ldr	r3, [pc, #76]	; (8002050 <TSC2046_BR_point+0x54>)
 8002004:	8b1b      	ldrh	r3, [r3, #24]
 8002006:	3b0a      	subs	r3, #10
 8002008:	b29b      	uxth	r3, r3
 800200a:	b218      	sxth	r0, r3
 800200c:	4b10      	ldr	r3, [pc, #64]	; (8002050 <TSC2046_BR_point+0x54>)
 800200e:	8b5b      	ldrh	r3, [r3, #26]
 8002010:	3b0a      	subs	r3, #10
 8002012:	b29b      	uxth	r3, r3
 8002014:	b219      	sxth	r1, r3
 8002016:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800201a:	2203      	movs	r2, #3
 800201c:	f7ff fab5 	bl	800158a <ILI9341_fillCircle>
	ILI9341_printText("Press here", myTS_Calibrate.Width-80, myTS_Calibrate.Height-40, COLOR_RED, COLOR_RED, 1);
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <TSC2046_BR_point+0x54>)
 8002022:	8b1b      	ldrh	r3, [r3, #24]
 8002024:	3b50      	subs	r3, #80	; 0x50
 8002026:	b29b      	uxth	r3, r3
 8002028:	b219      	sxth	r1, r3
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <TSC2046_BR_point+0x54>)
 800202c:	8b5b      	ldrh	r3, [r3, #26]
 800202e:	3b28      	subs	r3, #40	; 0x28
 8002030:	b29b      	uxth	r3, r3
 8002032:	b21a      	sxth	r2, r3
 8002034:	2301      	movs	r3, #1
 8002036:	9301      	str	r3, [sp, #4]
 8002038:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002042:	4804      	ldr	r0, [pc, #16]	; (8002054 <TSC2046_BR_point+0x58>)
 8002044:	f7ff fcda 	bl	80019fc <ILI9341_printText>
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000330 	.word	0x20000330
 8002054:	0800cebc 	.word	0x0800cebc

08002058 <TSC2046_getOrientation>:

//7. Get orientation (from LCD driver)
uint8_t TSC2046_getOrientation(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
	return ILI9341_getRotation();
 800205c:	f7ff fd5c 	bl	8001b18 <ILI9341_getRotation>
 8002060:	4603      	mov	r3, r0
}
 8002062:	4618      	mov	r0, r3
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <TSC2046_GetTouchData>:

//8. Get touch sccreen data
TS_TOUCH_DATA_Def TSC2046_GetTouchData(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
	TS_TOUCH_DATA_Def myTsData;
	uint16_t temp16x=0, temp16y=0;
 8002070:	2300      	movs	r3, #0
 8002072:	82fb      	strh	r3, [r7, #22]
 8002074:	2300      	movs	r3, #0
 8002076:	82bb      	strh	r3, [r7, #20]
	//Is screen pressed
	if(TSC2046_getRaw_Z()>50)
 8002078:	f7ff ff94 	bl	8001fa4 <TSC2046_getRaw_Z>
 800207c:	4603      	mov	r3, r0
 800207e:	2b32      	cmp	r3, #50	; 0x32
 8002080:	d920      	bls.n	80020c4 <TSC2046_GetTouchData+0x5c>
	{
		myTsData.isPressed = true;
 8002082:	2301      	movs	r3, #1
 8002084:	733b      	strb	r3, [r7, #12]
		//Read touch data
		for(uint8_t i=0; i<1; i++)
 8002086:	2300      	movs	r3, #0
 8002088:	74fb      	strb	r3, [r7, #19]
 800208a:	e011      	b.n	80020b0 <TSC2046_GetTouchData+0x48>
		{
			localRawTouch = TSC2046_GetRawTouch();
 800208c:	f7ff fec0 	bl	8001e10 <TSC2046_GetRawTouch>
 8002090:	4603      	mov	r3, r0
 8002092:	4a29      	ldr	r2, [pc, #164]	; (8002138 <TSC2046_GetTouchData+0xd0>)
 8002094:	6013      	str	r3, [r2, #0]
			temp16x += localRawTouch.x_touch;
 8002096:	4b28      	ldr	r3, [pc, #160]	; (8002138 <TSC2046_GetTouchData+0xd0>)
 8002098:	881a      	ldrh	r2, [r3, #0]
 800209a:	8afb      	ldrh	r3, [r7, #22]
 800209c:	4413      	add	r3, r2
 800209e:	82fb      	strh	r3, [r7, #22]
			temp16y += localRawTouch.y_touch;
 80020a0:	4b25      	ldr	r3, [pc, #148]	; (8002138 <TSC2046_GetTouchData+0xd0>)
 80020a2:	885a      	ldrh	r2, [r3, #2]
 80020a4:	8abb      	ldrh	r3, [r7, #20]
 80020a6:	4413      	add	r3, r2
 80020a8:	82bb      	strh	r3, [r7, #20]
		for(uint8_t i=0; i<1; i++)
 80020aa:	7cfb      	ldrb	r3, [r7, #19]
 80020ac:	3301      	adds	r3, #1
 80020ae:	74fb      	strb	r3, [r7, #19]
 80020b0:	7cfb      	ldrb	r3, [r7, #19]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0ea      	beq.n	800208c <TSC2046_GetTouchData+0x24>
		}
		localRawTouch.x_touch = temp16x*1;
 80020b6:	4a20      	ldr	r2, [pc, #128]	; (8002138 <TSC2046_GetTouchData+0xd0>)
 80020b8:	8afb      	ldrh	r3, [r7, #22]
 80020ba:	8013      	strh	r3, [r2, #0]
		localRawTouch.y_touch = temp16y*1;
 80020bc:	4a1e      	ldr	r2, [pc, #120]	; (8002138 <TSC2046_GetTouchData+0xd0>)
 80020be:	8abb      	ldrh	r3, [r7, #20]
 80020c0:	8053      	strh	r3, [r2, #2]
 80020c2:	e001      	b.n	80020c8 <TSC2046_GetTouchData+0x60>
	}
	else myTsData.isPressed = false;
 80020c4:	2300      	movs	r3, #0
 80020c6:	733b      	strb	r3, [r7, #12]
	
	
	//X_Touch value
	myTsData.X = myTS_Calibrate.Scale_X*localRawTouch.x_touch + myTS_Calibrate.Bias_X;
 80020c8:	4b1c      	ldr	r3, [pc, #112]	; (800213c <TSC2046_GetTouchData+0xd4>)
 80020ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80020ce:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <TSC2046_GetTouchData+0xd0>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	ee07 3a90 	vmov	s15, r3
 80020d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020de:	4b17      	ldr	r3, [pc, #92]	; (800213c <TSC2046_GetTouchData+0xd4>)
 80020e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80020e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020ec:	ee17 3a90 	vmov	r3, s15
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	81fb      	strh	r3, [r7, #14]
	//Y_Touch value
	myTsData.Y = myTS_Calibrate.Scale_Y*localRawTouch.y_touch + myTS_Calibrate.Bias_Y;
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <TSC2046_GetTouchData+0xd4>)
 80020f6:	ed93 7a03 	vldr	s14, [r3, #12]
 80020fa:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <TSC2046_GetTouchData+0xd0>)
 80020fc:	885b      	ldrh	r3, [r3, #2]
 80020fe:	ee07 3a90 	vmov	s15, r3
 8002102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002106:	ee27 7a27 	vmul.f32	s14, s14, s15
 800210a:	4b0c      	ldr	r3, [pc, #48]	; (800213c <TSC2046_GetTouchData+0xd4>)
 800210c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002118:	ee17 3a90 	vmov	r3, s15
 800211c:	b29b      	uxth	r3, r3
 800211e:	823b      	strh	r3, [r7, #16]
	
	return myTsData;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	461a      	mov	r2, r3
 8002124:	f107 030c 	add.w	r3, r7, #12
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	6010      	str	r0, [r2, #0]
 800212c:	889b      	ldrh	r3, [r3, #4]
 800212e:	8093      	strh	r3, [r2, #4]
}
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	2000034c 	.word	0x2000034c
 800213c:	20000330 	.word	0x20000330

08002140 <HMI_init>:

#include <HMI/hmi_display.h>


Hmi HMI_init(StateMachine* stateMachine, Sensor* sensorExtruder, Sensor* sensorBack, PIDController *pidController)
{
 8002140:	b590      	push	{r4, r7, lr}
 8002142:	b08f      	sub	sp, #60	; 0x3c
 8002144:	af02      	add	r7, sp, #8
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
 800214c:	603b      	str	r3, [r7, #0]
	Hmi hmi;
	hmi.HmiInformation.stateMachine = stateMachine;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
	hmi.HmiInformation.sensorExtruder = sensorExtruder;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	62bb      	str	r3, [r7, #40]	; 0x28
	hmi.HmiInformation.sensorBack = sensorBack;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	62fb      	str	r3, [r7, #44]	; 0x2c

	TSC2046_Calibrate();
 800215a:	f7ff fd35 	bl	8001bc8 <TSC2046_Calibrate>
	ILI9341_Fill(COLOR_WHITE);
 800215e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002162:	f7ff f8e1 	bl	8001328 <ILI9341_Fill>

	ILI9341_Fill_Rect(5, 10, 315, 50, COLOR_ORANGE);
 8002166:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	2332      	movs	r3, #50	; 0x32
 800216e:	f240 123b 	movw	r2, #315	; 0x13b
 8002172:	210a      	movs	r1, #10
 8002174:	2005      	movs	r0, #5
 8002176:	f7ff f91b 	bl	80013b0 <ILI9341_Fill_Rect>
	ILI9341_printText("Sensor1 : 0 mm", 50, 25, COLOR_WHITE, COLOR_ORANGE, 2);
 800217a:	2302      	movs	r3, #2
 800217c:	9301      	str	r3, [sp, #4]
 800217e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002188:	2219      	movs	r2, #25
 800218a:	2132      	movs	r1, #50	; 0x32
 800218c:	4848      	ldr	r0, [pc, #288]	; (80022b0 <HMI_init+0x170>)
 800218e:	f7ff fc35 	bl	80019fc <ILI9341_printText>

	ILI9341_Fill_Rect(5, 60, 315, 100, COLOR_ORANGE);
 8002192:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	2364      	movs	r3, #100	; 0x64
 800219a:	f240 123b 	movw	r2, #315	; 0x13b
 800219e:	213c      	movs	r1, #60	; 0x3c
 80021a0:	2005      	movs	r0, #5
 80021a2:	f7ff f905 	bl	80013b0 <ILI9341_Fill_Rect>
	ILI9341_printText("Sensor2 : 0 mm", 50, 75, COLOR_WHITE, COLOR_ORANGE, 2);
 80021a6:	2302      	movs	r3, #2
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021b4:	224b      	movs	r2, #75	; 0x4b
 80021b6:	2132      	movs	r1, #50	; 0x32
 80021b8:	483e      	ldr	r0, [pc, #248]	; (80022b4 <HMI_init+0x174>)
 80021ba:	f7ff fc1f 	bl	80019fc <ILI9341_printText>

	char buf[20];
	sprintf(buf, "Soll: %.2f mm", pidController->get_setPoint(pidController));
 80021be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80021c4:	4798      	blx	r3
 80021c6:	ee10 3a10 	vmov	r3, s0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe f9c4 	bl	8000558 <__aeabi_f2d>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	f107 0010 	add.w	r0, r7, #16
 80021d8:	4937      	ldr	r1, [pc, #220]	; (80022b8 <HMI_init+0x178>)
 80021da:	f008 f845 	bl	800a268 <siprintf>

	ILI9341_Fill_Rect(5, 110, 315, 150, COLOR_BLUE);
 80021de:	231f      	movs	r3, #31
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2396      	movs	r3, #150	; 0x96
 80021e4:	f240 123b 	movw	r2, #315	; 0x13b
 80021e8:	216e      	movs	r1, #110	; 0x6e
 80021ea:	2005      	movs	r0, #5
 80021ec:	f7ff f8e0 	bl	80013b0 <ILI9341_Fill_Rect>
	ILI9341_printText(buf, 50, 120, COLOR_WHITE, COLOR_BLUE, 2);
 80021f0:	f107 0010 	add.w	r0, r7, #16
 80021f4:	2302      	movs	r3, #2
 80021f6:	9301      	str	r3, [sp, #4]
 80021f8:	231f      	movs	r3, #31
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002200:	2278      	movs	r2, #120	; 0x78
 8002202:	2132      	movs	r1, #50	; 0x32
 8002204:	f7ff fbfa 	bl	80019fc <ILI9341_printText>

	ILI9341_Fill_Rect(30, 160, 70, 200, COLOR_BLUE);
 8002208:	231f      	movs	r3, #31
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	23c8      	movs	r3, #200	; 0xc8
 800220e:	2246      	movs	r2, #70	; 0x46
 8002210:	21a0      	movs	r1, #160	; 0xa0
 8002212:	201e      	movs	r0, #30
 8002214:	f7ff f8cc 	bl	80013b0 <ILI9341_Fill_Rect>
	ILI9341_printText("UP", 45,  180, COLOR_WHITE, COLOR_BLUE, 1);
 8002218:	2301      	movs	r3, #1
 800221a:	9301      	str	r3, [sp, #4]
 800221c:	231f      	movs	r3, #31
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002224:	22b4      	movs	r2, #180	; 0xb4
 8002226:	212d      	movs	r1, #45	; 0x2d
 8002228:	4824      	ldr	r0, [pc, #144]	; (80022bc <HMI_init+0x17c>)
 800222a:	f7ff fbe7 	bl	80019fc <ILI9341_printText>

	ILI9341_Fill_Rect(80, 160, 120, 200, COLOR_BLUE);
 800222e:	231f      	movs	r3, #31
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	23c8      	movs	r3, #200	; 0xc8
 8002234:	2278      	movs	r2, #120	; 0x78
 8002236:	21a0      	movs	r1, #160	; 0xa0
 8002238:	2050      	movs	r0, #80	; 0x50
 800223a:	f7ff f8b9 	bl	80013b0 <ILI9341_Fill_Rect>
	ILI9341_printText("DOWN", 90,  180, COLOR_WHITE, COLOR_BLUE, 1);
 800223e:	2301      	movs	r3, #1
 8002240:	9301      	str	r3, [sp, #4]
 8002242:	231f      	movs	r3, #31
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800224a:	22b4      	movs	r2, #180	; 0xb4
 800224c:	215a      	movs	r1, #90	; 0x5a
 800224e:	481c      	ldr	r0, [pc, #112]	; (80022c0 <HMI_init+0x180>)
 8002250:	f7ff fbd4 	bl	80019fc <ILI9341_printText>

	ILI9341_Fill_Rect(180, 190, 300, 230, COLOR_RED);
 8002254:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	23e6      	movs	r3, #230	; 0xe6
 800225c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002260:	21be      	movs	r1, #190	; 0xbe
 8002262:	20b4      	movs	r0, #180	; 0xb4
 8002264:	f7ff f8a4 	bl	80013b0 <ILI9341_Fill_Rect>
	ILI9341_printText("IDLE", 230,  205, COLOR_WHITE, COLOR_RED, 2);
 8002268:	2302      	movs	r3, #2
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002276:	22cd      	movs	r2, #205	; 0xcd
 8002278:	21e6      	movs	r1, #230	; 0xe6
 800227a:	4812      	ldr	r0, [pc, #72]	; (80022c4 <HMI_init+0x184>)
 800227c:	f7ff fbbe 	bl	80019fc <ILI9341_printText>

	ILI9341_printText("REGELUNG", 195,  170, COLOR_BLACK, COLOR_WHITE, 2);
 8002280:	2302      	movs	r3, #2
 8002282:	9301      	str	r3, [sp, #4]
 8002284:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	2300      	movs	r3, #0
 800228c:	22aa      	movs	r2, #170	; 0xaa
 800228e:	21c3      	movs	r1, #195	; 0xc3
 8002290:	480d      	ldr	r0, [pc, #52]	; (80022c8 <HMI_init+0x188>)
 8002292:	f7ff fbb3 	bl	80019fc <ILI9341_printText>

	return hmi;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	461c      	mov	r4, r3
 800229a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	3734      	adds	r7, #52	; 0x34
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd90      	pop	{r4, r7, pc}
 80022ae:	bf00      	nop
 80022b0:	0800cec8 	.word	0x0800cec8
 80022b4:	0800ced8 	.word	0x0800ced8
 80022b8:	0800cee8 	.word	0x0800cee8
 80022bc:	0800cef8 	.word	0x0800cef8
 80022c0:	0800cefc 	.word	0x0800cefc
 80022c4:	0800cf04 	.word	0x0800cf04
 80022c8:	0800cf0c 	.word	0x0800cf0c
 80022cc:	00000000 	.word	0x00000000

080022d0 <HMI_getTouch>:


void HMI_getTouch(Hmi *hmi, TS_TOUCH_DATA_Def myTS_Handle, StateMachine *state, PIDController *pidController)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b098      	sub	sp, #96	; 0x60
 80022d4:	af02      	add	r7, sp, #8
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	1d38      	adds	r0, r7, #4
 80022da:	e880 0006 	stmia.w	r0, {r1, r2}
 80022de:	603b      	str	r3, [r7, #0]
	if(myTS_Handle.isPressed)
 80022e0:	793b      	ldrb	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 8201 	beq.w	80026ea <HMI_getTouch+0x41a>
	{
		//Draw a point


		if(myTS_Handle.X >=30 && myTS_Handle.X<=70 && myTS_Handle.Y>=160 && myTS_Handle.Y<=200)
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	2b1d      	cmp	r3, #29
 80022ec:	d943      	bls.n	8002376 <HMI_getTouch+0xa6>
 80022ee:	88fb      	ldrh	r3, [r7, #6]
 80022f0:	2b46      	cmp	r3, #70	; 0x46
 80022f2:	d840      	bhi.n	8002376 <HMI_getTouch+0xa6>
 80022f4:	893b      	ldrh	r3, [r7, #8]
 80022f6:	2b9f      	cmp	r3, #159	; 0x9f
 80022f8:	d93d      	bls.n	8002376 <HMI_getTouch+0xa6>
 80022fa:	893b      	ldrh	r3, [r7, #8]
 80022fc:	2bc8      	cmp	r3, #200	; 0xc8
 80022fe:	d83a      	bhi.n	8002376 <HMI_getTouch+0xa6>
		{
			float Soll = pidController->get_setPoint(pidController);
 8002300:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002306:	4798      	blx	r3
 8002308:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
			Soll = Soll + 0.05;
 800230c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800230e:	f7fe f923 	bl	8000558 <__aeabi_f2d>
 8002312:	a36f      	add	r3, pc, #444	; (adr r3, 80024d0 <HMI_getTouch+0x200>)
 8002314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002318:	f7fd ffc0 	bl	800029c <__adddf3>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	4610      	mov	r0, r2
 8002322:	4619      	mov	r1, r3
 8002324:	f7fe fc68 	bl	8000bf8 <__aeabi_d2f>
 8002328:	4603      	mov	r3, r0
 800232a:	657b      	str	r3, [r7, #84]	; 0x54
			pidController->set_setPoint(pidController,Soll);
 800232c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800232e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002330:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8002334:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002336:	4798      	blx	r3
			char buf[20];
			sprintf(buf, "Soll: %.2f mm", Soll);
 8002338:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800233a:	f7fe f90d 	bl	8000558 <__aeabi_f2d>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8002346:	4964      	ldr	r1, [pc, #400]	; (80024d8 <HMI_getTouch+0x208>)
 8002348:	f007 ff8e 	bl	800a268 <siprintf>

			ILI9341_Fill_Rect(5, 110, 315, 150, COLOR_BLUE);
 800234c:	231f      	movs	r3, #31
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	2396      	movs	r3, #150	; 0x96
 8002352:	f240 123b 	movw	r2, #315	; 0x13b
 8002356:	216e      	movs	r1, #110	; 0x6e
 8002358:	2005      	movs	r0, #5
 800235a:	f7ff f829 	bl	80013b0 <ILI9341_Fill_Rect>
			ILI9341_printText(buf, 50, 120, COLOR_WHITE, COLOR_BLUE, 2);
 800235e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8002362:	2302      	movs	r3, #2
 8002364:	9301      	str	r3, [sp, #4]
 8002366:	231f      	movs	r3, #31
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800236e:	2278      	movs	r2, #120	; 0x78
 8002370:	2132      	movs	r1, #50	; 0x32
 8002372:	f7ff fb43 	bl	80019fc <ILI9341_printText>



		}

		if(myTS_Handle.X >=80 && myTS_Handle.X<=120 && myTS_Handle.Y>=160 && myTS_Handle.Y<=200)
 8002376:	88fb      	ldrh	r3, [r7, #6]
 8002378:	2b4f      	cmp	r3, #79	; 0x4f
 800237a:	d948      	bls.n	800240e <HMI_getTouch+0x13e>
 800237c:	88fb      	ldrh	r3, [r7, #6]
 800237e:	2b78      	cmp	r3, #120	; 0x78
 8002380:	d845      	bhi.n	800240e <HMI_getTouch+0x13e>
 8002382:	893b      	ldrh	r3, [r7, #8]
 8002384:	2b9f      	cmp	r3, #159	; 0x9f
 8002386:	d942      	bls.n	800240e <HMI_getTouch+0x13e>
 8002388:	893b      	ldrh	r3, [r7, #8]
 800238a:	2bc8      	cmp	r3, #200	; 0xc8
 800238c:	d83f      	bhi.n	800240e <HMI_getTouch+0x13e>
		{
			float Soll = pidController->get_setPoint(pidController);
 800238e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002394:	4798      	blx	r3
 8002396:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
			Soll = Soll - 0.05;
 800239a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800239c:	f7fe f8dc 	bl	8000558 <__aeabi_f2d>
 80023a0:	a34b      	add	r3, pc, #300	; (adr r3, 80024d0 <HMI_getTouch+0x200>)
 80023a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a6:	f7fd ff77 	bl	8000298 <__aeabi_dsub>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4610      	mov	r0, r2
 80023b0:	4619      	mov	r1, r3
 80023b2:	f7fe fc21 	bl	8000bf8 <__aeabi_d2f>
 80023b6:	4603      	mov	r3, r0
 80023b8:	653b      	str	r3, [r7, #80]	; 0x50
			pidController->set_setPoint(pidController,Soll);
 80023ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023be:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 80023c2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80023c4:	4798      	blx	r3

			char buf[20];
			sprintf(buf, "Soll: %.2f mm", Soll);
 80023c6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80023c8:	f7fe f8c6 	bl	8000558 <__aeabi_f2d>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80023d4:	4940      	ldr	r1, [pc, #256]	; (80024d8 <HMI_getTouch+0x208>)
 80023d6:	f007 ff47 	bl	800a268 <siprintf>

			ILI9341_Fill_Rect(5, 110, 315, 150, COLOR_BLUE);
 80023da:	231f      	movs	r3, #31
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	2396      	movs	r3, #150	; 0x96
 80023e0:	f240 123b 	movw	r2, #315	; 0x13b
 80023e4:	216e      	movs	r1, #110	; 0x6e
 80023e6:	2005      	movs	r0, #5
 80023e8:	f7fe ffe2 	bl	80013b0 <ILI9341_Fill_Rect>
			ILI9341_printText(buf, 50, 120, COLOR_WHITE, COLOR_BLUE, 2);
 80023ec:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80023f0:	2302      	movs	r3, #2
 80023f2:	9301      	str	r3, [sp, #4]
 80023f4:	231f      	movs	r3, #31
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023fc:	2278      	movs	r2, #120	; 0x78
 80023fe:	2132      	movs	r1, #50	; 0x32
 8002400:	f7ff fafc 	bl	80019fc <ILI9341_printText>



			HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
 8002404:	2200      	movs	r2, #0
 8002406:	2120      	movs	r1, #32
 8002408:	4834      	ldr	r0, [pc, #208]	; (80024dc <HMI_getTouch+0x20c>)
 800240a:	f002 ff3d 	bl	8005288 <HAL_GPIO_WritePin>
		}

		if(myTS_Handle.X >=180 && myTS_Handle.X<=300 && myTS_Handle.Y>=190 && myTS_Handle.Y<=230)
 800240e:	88fb      	ldrh	r3, [r7, #6]
 8002410:	2bb3      	cmp	r3, #179	; 0xb3
 8002412:	f240 8087 	bls.w	8002524 <HMI_getTouch+0x254>
 8002416:	88fb      	ldrh	r3, [r7, #6]
 8002418:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800241c:	f200 8082 	bhi.w	8002524 <HMI_getTouch+0x254>
 8002420:	893b      	ldrh	r3, [r7, #8]
 8002422:	2bbd      	cmp	r3, #189	; 0xbd
 8002424:	d97e      	bls.n	8002524 <HMI_getTouch+0x254>
 8002426:	893b      	ldrh	r3, [r7, #8]
 8002428:	2be6      	cmp	r3, #230	; 0xe6
 800242a:	d87b      	bhi.n	8002524 <HMI_getTouch+0x254>
		{
			if(hmi->HmiInformation.stateMachine->getState(hmi->HmiInformation.stateMachine) == STATE_IDLE){
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	6812      	ldr	r2, [r2, #0]
 8002436:	4610      	mov	r0, r2
 8002438:	4798      	blx	r3
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d11e      	bne.n	800247e <HMI_getTouch+0x1ae>
				hmi->HmiInformation.stateMachine->changeState(hmi->HmiInformation.stateMachine, STATE_MANUAL_CONTROL);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	2101      	movs	r1, #1
 800244c:	4610      	mov	r0, r2
 800244e:	4798      	blx	r3
  				ILI9341_Fill_Rect(180, 190, 300, 230, COLOR_ORANGE);
 8002450:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	23e6      	movs	r3, #230	; 0xe6
 8002458:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800245c:	21be      	movs	r1, #190	; 0xbe
 800245e:	20b4      	movs	r0, #180	; 0xb4
 8002460:	f7fe ffa6 	bl	80013b0 <ILI9341_Fill_Rect>
  				ILI9341_printText("Manual", 230,  205, COLOR_WHITE, COLOR_ORANGE, 2);
 8002464:	2302      	movs	r3, #2
 8002466:	9301      	str	r3, [sp, #4]
 8002468:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002472:	22cd      	movs	r2, #205	; 0xcd
 8002474:	21e6      	movs	r1, #230	; 0xe6
 8002476:	481a      	ldr	r0, [pc, #104]	; (80024e0 <HMI_getTouch+0x210>)
 8002478:	f7ff fac0 	bl	80019fc <ILI9341_printText>
 800247c:	e052      	b.n	8002524 <HMI_getTouch+0x254>
			}
			else if(hmi->HmiInformation.stateMachine->getState(hmi->HmiInformation.stateMachine) == STATE_MANUAL_CONTROL){
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	4610      	mov	r0, r2
 800248a:	4798      	blx	r3
 800248c:	4603      	mov	r3, r0
 800248e:	2b01      	cmp	r3, #1
 8002490:	d12a      	bne.n	80024e8 <HMI_getTouch+0x218>
				hmi->HmiInformation.stateMachine->changeState(hmi->HmiInformation.stateMachine, STATE_AUTOMATIC_MODE);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	6812      	ldr	r2, [r2, #0]
 800249c:	2102      	movs	r1, #2
 800249e:	4610      	mov	r0, r2
 80024a0:	4798      	blx	r3
  				ILI9341_Fill_Rect(180, 190, 300, 230, COLOR_GREEN);
 80024a2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	23e6      	movs	r3, #230	; 0xe6
 80024aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024ae:	21be      	movs	r1, #190	; 0xbe
 80024b0:	20b4      	movs	r0, #180	; 0xb4
 80024b2:	f7fe ff7d 	bl	80013b0 <ILI9341_Fill_Rect>
  				ILI9341_printText("Auto", 230,  205, COLOR_WHITE, COLOR_GREEN, 2);
 80024b6:	2302      	movs	r3, #2
 80024b8:	9301      	str	r3, [sp, #4]
 80024ba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024c4:	22cd      	movs	r2, #205	; 0xcd
 80024c6:	21e6      	movs	r1, #230	; 0xe6
 80024c8:	4806      	ldr	r0, [pc, #24]	; (80024e4 <HMI_getTouch+0x214>)
 80024ca:	f7ff fa97 	bl	80019fc <ILI9341_printText>
 80024ce:	e029      	b.n	8002524 <HMI_getTouch+0x254>
 80024d0:	9999999a 	.word	0x9999999a
 80024d4:	3fa99999 	.word	0x3fa99999
 80024d8:	0800cee8 	.word	0x0800cee8
 80024dc:	40020000 	.word	0x40020000
 80024e0:	0800cf18 	.word	0x0800cf18
 80024e4:	0800cf20 	.word	0x0800cf20
			}
			else{
				hmi->HmiInformation.stateMachine->changeState(hmi->HmiInformation.stateMachine, STATE_IDLE);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	2100      	movs	r1, #0
 80024f4:	4610      	mov	r0, r2
 80024f6:	4798      	blx	r3
  				ILI9341_Fill_Rect(180, 190, 300, 230, COLOR_RED);
 80024f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	23e6      	movs	r3, #230	; 0xe6
 8002500:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002504:	21be      	movs	r1, #190	; 0xbe
 8002506:	20b4      	movs	r0, #180	; 0xb4
 8002508:	f7fe ff52 	bl	80013b0 <ILI9341_Fill_Rect>
  				ILI9341_printText("Idle", 230,  205, COLOR_WHITE, COLOR_RED, 2);
 800250c:	2302      	movs	r3, #2
 800250e:	9301      	str	r3, [sp, #4]
 8002510:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800251a:	22cd      	movs	r2, #205	; 0xcd
 800251c:	21e6      	movs	r1, #230	; 0xe6
 800251e:	4875      	ldr	r0, [pc, #468]	; (80026f4 <HMI_getTouch+0x424>)
 8002520:	f7ff fa6c 	bl	80019fc <ILI9341_printText>
			}
		}

		if(hmi->HmiInformation.stateMachine->getBlobDetected(hmi->HmiInformation.stateMachine)==1)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	4610      	mov	r0, r2
 8002530:	4798      	blx	r3
 8002532:	4603      	mov	r3, r0
 8002534:	2b01      	cmp	r3, #1
 8002536:	f040 80d8 	bne.w	80026ea <HMI_getTouch+0x41a>
		{
			ILI9341_Fill(COLOR_RED);
 800253a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800253e:	f7fe fef3 	bl	8001328 <ILI9341_Fill>
			ILI9341_Fill_Rect(110, 70, 210, 170, COLOR_WHITE);
 8002542:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	23aa      	movs	r3, #170	; 0xaa
 800254a:	22d2      	movs	r2, #210	; 0xd2
 800254c:	2146      	movs	r1, #70	; 0x46
 800254e:	206e      	movs	r0, #110	; 0x6e
 8002550:	f7fe ff2e 	bl	80013b0 <ILI9341_Fill_Rect>
			ILI9341_printText("BLOB erkannt!", 90, 20, COLOR_WHITE, COLOR_RED, 2);
 8002554:	2302      	movs	r3, #2
 8002556:	9301      	str	r3, [sp, #4]
 8002558:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002562:	2214      	movs	r2, #20
 8002564:	215a      	movs	r1, #90	; 0x5a
 8002566:	4864      	ldr	r0, [pc, #400]	; (80026f8 <HMI_getTouch+0x428>)
 8002568:	f7ff fa48 	bl	80019fc <ILI9341_printText>
			ILI9341_printText("OK", 145, 110, COLOR_BLACK, COLOR_WHITE, 3);
 800256c:	2303      	movs	r3, #3
 800256e:	9301      	str	r3, [sp, #4]
 8002570:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	2300      	movs	r3, #0
 8002578:	226e      	movs	r2, #110	; 0x6e
 800257a:	2191      	movs	r1, #145	; 0x91
 800257c:	485f      	ldr	r0, [pc, #380]	; (80026fc <HMI_getTouch+0x42c>)
 800257e:	f7ff fa3d 	bl	80019fc <ILI9341_printText>
			if(myTS_Handle.X >=110 && myTS_Handle.X<=210 && myTS_Handle.Y>=70 && myTS_Handle.Y<=140)
 8002582:	88fb      	ldrh	r3, [r7, #6]
 8002584:	2b6d      	cmp	r3, #109	; 0x6d
 8002586:	f240 80b0 	bls.w	80026ea <HMI_getTouch+0x41a>
 800258a:	88fb      	ldrh	r3, [r7, #6]
 800258c:	2bd2      	cmp	r3, #210	; 0xd2
 800258e:	f200 80ac 	bhi.w	80026ea <HMI_getTouch+0x41a>
 8002592:	893b      	ldrh	r3, [r7, #8]
 8002594:	2b45      	cmp	r3, #69	; 0x45
 8002596:	f240 80a8 	bls.w	80026ea <HMI_getTouch+0x41a>
 800259a:	893b      	ldrh	r3, [r7, #8]
 800259c:	2b8c      	cmp	r3, #140	; 0x8c
 800259e:	f200 80a4 	bhi.w	80026ea <HMI_getTouch+0x41a>
				{
				hmi->HmiInformation.stateMachine->setBlobDetected(hmi->HmiInformation.stateMachine,0);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	2100      	movs	r1, #0
 80025ae:	4610      	mov	r0, r2
 80025b0:	4798      	blx	r3
				ILI9341_Fill(COLOR_WHITE);
 80025b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80025b6:	f7fe feb7 	bl	8001328 <ILI9341_Fill>

				ILI9341_Fill_Rect(5, 10, 315, 50, COLOR_ORANGE);
 80025ba:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	2332      	movs	r3, #50	; 0x32
 80025c2:	f240 123b 	movw	r2, #315	; 0x13b
 80025c6:	210a      	movs	r1, #10
 80025c8:	2005      	movs	r0, #5
 80025ca:	f7fe fef1 	bl	80013b0 <ILI9341_Fill_Rect>
				ILI9341_printText("Sensor1: 0 mm", 50, 25, COLOR_WHITE, COLOR_ORANGE, 2);
 80025ce:	2302      	movs	r3, #2
 80025d0:	9301      	str	r3, [sp, #4]
 80025d2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025dc:	2219      	movs	r2, #25
 80025de:	2132      	movs	r1, #50	; 0x32
 80025e0:	4847      	ldr	r0, [pc, #284]	; (8002700 <HMI_getTouch+0x430>)
 80025e2:	f7ff fa0b 	bl	80019fc <ILI9341_printText>

				ILI9341_Fill_Rect(5, 60, 315, 100, COLOR_ORANGE);
 80025e6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	2364      	movs	r3, #100	; 0x64
 80025ee:	f240 123b 	movw	r2, #315	; 0x13b
 80025f2:	213c      	movs	r1, #60	; 0x3c
 80025f4:	2005      	movs	r0, #5
 80025f6:	f7fe fedb 	bl	80013b0 <ILI9341_Fill_Rect>
				ILI9341_printText("Sensor2 : 0 mm", 50, 75, COLOR_WHITE, COLOR_ORANGE, 2);
 80025fa:	2302      	movs	r3, #2
 80025fc:	9301      	str	r3, [sp, #4]
 80025fe:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002608:	224b      	movs	r2, #75	; 0x4b
 800260a:	2132      	movs	r1, #50	; 0x32
 800260c:	483d      	ldr	r0, [pc, #244]	; (8002704 <HMI_getTouch+0x434>)
 800260e:	f7ff f9f5 	bl	80019fc <ILI9341_printText>

				char buf[20];
				sprintf(buf, "Soll: %.2f mm", pidController->get_setPoint(pidController));
 8002612:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002618:	4798      	blx	r3
 800261a:	ee10 3a10 	vmov	r3, s0
 800261e:	4618      	mov	r0, r3
 8002620:	f7fd ff9a 	bl	8000558 <__aeabi_f2d>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	f107 0014 	add.w	r0, r7, #20
 800262c:	4936      	ldr	r1, [pc, #216]	; (8002708 <HMI_getTouch+0x438>)
 800262e:	f007 fe1b 	bl	800a268 <siprintf>
				ILI9341_Fill_Rect(5, 110, 315, 150, COLOR_BLUE);
 8002632:	231f      	movs	r3, #31
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	2396      	movs	r3, #150	; 0x96
 8002638:	f240 123b 	movw	r2, #315	; 0x13b
 800263c:	216e      	movs	r1, #110	; 0x6e
 800263e:	2005      	movs	r0, #5
 8002640:	f7fe feb6 	bl	80013b0 <ILI9341_Fill_Rect>
				ILI9341_printText(buf, 50, 120, COLOR_WHITE, COLOR_BLUE, 2);
 8002644:	f107 0014 	add.w	r0, r7, #20
 8002648:	2302      	movs	r3, #2
 800264a:	9301      	str	r3, [sp, #4]
 800264c:	231f      	movs	r3, #31
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002654:	2278      	movs	r2, #120	; 0x78
 8002656:	2132      	movs	r1, #50	; 0x32
 8002658:	f7ff f9d0 	bl	80019fc <ILI9341_printText>

				ILI9341_Fill_Rect(30, 160, 70, 200, COLOR_BLUE);
 800265c:	231f      	movs	r3, #31
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	23c8      	movs	r3, #200	; 0xc8
 8002662:	2246      	movs	r2, #70	; 0x46
 8002664:	21a0      	movs	r1, #160	; 0xa0
 8002666:	201e      	movs	r0, #30
 8002668:	f7fe fea2 	bl	80013b0 <ILI9341_Fill_Rect>
				ILI9341_printText("UP", 45,  180, COLOR_WHITE, COLOR_BLUE, 1);
 800266c:	2301      	movs	r3, #1
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	231f      	movs	r3, #31
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002678:	22b4      	movs	r2, #180	; 0xb4
 800267a:	212d      	movs	r1, #45	; 0x2d
 800267c:	4823      	ldr	r0, [pc, #140]	; (800270c <HMI_getTouch+0x43c>)
 800267e:	f7ff f9bd 	bl	80019fc <ILI9341_printText>

				ILI9341_Fill_Rect(80, 160, 120, 200, COLOR_BLUE);
 8002682:	231f      	movs	r3, #31
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	23c8      	movs	r3, #200	; 0xc8
 8002688:	2278      	movs	r2, #120	; 0x78
 800268a:	21a0      	movs	r1, #160	; 0xa0
 800268c:	2050      	movs	r0, #80	; 0x50
 800268e:	f7fe fe8f 	bl	80013b0 <ILI9341_Fill_Rect>
				ILI9341_printText("DOWN", 90,  180, COLOR_WHITE, COLOR_BLUE, 1);
 8002692:	2301      	movs	r3, #1
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	231f      	movs	r3, #31
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800269e:	22b4      	movs	r2, #180	; 0xb4
 80026a0:	215a      	movs	r1, #90	; 0x5a
 80026a2:	481b      	ldr	r0, [pc, #108]	; (8002710 <HMI_getTouch+0x440>)
 80026a4:	f7ff f9aa 	bl	80019fc <ILI9341_printText>

				ILI9341_printText("REGELUNG", 195,  170, COLOR_BLACK, COLOR_WHITE, 2);
 80026a8:	2302      	movs	r3, #2
 80026aa:	9301      	str	r3, [sp, #4]
 80026ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	2300      	movs	r3, #0
 80026b4:	22aa      	movs	r2, #170	; 0xaa
 80026b6:	21c3      	movs	r1, #195	; 0xc3
 80026b8:	4816      	ldr	r0, [pc, #88]	; (8002714 <HMI_getTouch+0x444>)
 80026ba:	f7ff f99f 	bl	80019fc <ILI9341_printText>


				ILI9341_Fill_Rect(180, 190, 300, 230, COLOR_RED);
 80026be:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	23e6      	movs	r3, #230	; 0xe6
 80026c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026ca:	21be      	movs	r1, #190	; 0xbe
 80026cc:	20b4      	movs	r0, #180	; 0xb4
 80026ce:	f7fe fe6f 	bl	80013b0 <ILI9341_Fill_Rect>
				ILI9341_printText("IDLE", 230,  205, COLOR_WHITE, COLOR_RED, 2);
 80026d2:	2302      	movs	r3, #2
 80026d4:	9301      	str	r3, [sp, #4]
 80026d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026e0:	22cd      	movs	r2, #205	; 0xcd
 80026e2:	21e6      	movs	r1, #230	; 0xe6
 80026e4:	480c      	ldr	r0, [pc, #48]	; (8002718 <HMI_getTouch+0x448>)
 80026e6:	f7ff f989 	bl	80019fc <ILI9341_printText>


	}


}
 80026ea:	bf00      	nop
 80026ec:	3758      	adds	r7, #88	; 0x58
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	0800cf28 	.word	0x0800cf28
 80026f8:	0800cf30 	.word	0x0800cf30
 80026fc:	0800cf40 	.word	0x0800cf40
 8002700:	0800cf44 	.word	0x0800cf44
 8002704:	0800ced8 	.word	0x0800ced8
 8002708:	0800cee8 	.word	0x0800cee8
 800270c:	0800cef8 	.word	0x0800cef8
 8002710:	0800cefc 	.word	0x0800cefc
 8002714:	0800cf0c 	.word	0x0800cf0c
 8002718:	0800cf04 	.word	0x0800cf04

0800271c <HMI_updateDisplaySensor>:

void HMI_updateDisplaySensor(float extruder, float back)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08e      	sub	sp, #56	; 0x38
 8002720:	af02      	add	r7, sp, #8
 8002722:	ed87 0a01 	vstr	s0, [r7, #4]
 8002726:	edc7 0a00 	vstr	s1, [r7]
	if(extruder >= 0 && extruder <5){
 800272a:	edd7 7a01 	vldr	s15, [r7, #4]
 800272e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002736:	db29      	blt.n	800278c <HMI_updateDisplaySensor+0x70>
 8002738:	edd7 7a01 	vldr	s15, [r7, #4]
 800273c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002740:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002748:	d520      	bpl.n	800278c <HMI_updateDisplaySensor+0x70>
		//float value1 = sensorExtruder->getDiameter(sensorExtruder);
		char buf1[20];
		sprintf(buf1, "Sensor Ext: %.2f mm", extruder);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fd ff04 	bl	8000558 <__aeabi_f2d>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	f107 001c 	add.w	r0, r7, #28
 8002758:	4928      	ldr	r1, [pc, #160]	; (80027fc <HMI_updateDisplaySensor+0xe0>)
 800275a:	f007 fd85 	bl	800a268 <siprintf>


		ILI9341_Fill_Rect(5, 10, 315, 50, COLOR_ORANGE);
 800275e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2332      	movs	r3, #50	; 0x32
 8002766:	f240 123b 	movw	r2, #315	; 0x13b
 800276a:	210a      	movs	r1, #10
 800276c:	2005      	movs	r0, #5
 800276e:	f7fe fe1f 	bl	80013b0 <ILI9341_Fill_Rect>
		ILI9341_printText(buf1, 50, 25, COLOR_WHITE, COLOR_ORANGE, 2);
 8002772:	f107 001c 	add.w	r0, r7, #28
 8002776:	2302      	movs	r3, #2
 8002778:	9301      	str	r3, [sp, #4]
 800277a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002784:	2219      	movs	r2, #25
 8002786:	2132      	movs	r1, #50	; 0x32
 8002788:	f7ff f938 	bl	80019fc <ILI9341_printText>
	}
	if (back >= 0 && back <5){
 800278c:	edd7 7a00 	vldr	s15, [r7]
 8002790:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002798:	da00      	bge.n	800279c <HMI_updateDisplaySensor+0x80>

		ILI9341_Fill_Rect(5, 60, 315, 100, COLOR_ORANGE);
		ILI9341_printText(buf2, 50, 75, COLOR_WHITE, COLOR_ORANGE, 2);
	}

}
 800279a:	e02a      	b.n	80027f2 <HMI_updateDisplaySensor+0xd6>
	if (back >= 0 && back <5){
 800279c:	edd7 7a00 	vldr	s15, [r7]
 80027a0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80027a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ac:	d400      	bmi.n	80027b0 <HMI_updateDisplaySensor+0x94>
}
 80027ae:	e020      	b.n	80027f2 <HMI_updateDisplaySensor+0xd6>
		sprintf(buf2, "Sensor B: %.2f mm", back);
 80027b0:	6838      	ldr	r0, [r7, #0]
 80027b2:	f7fd fed1 	bl	8000558 <__aeabi_f2d>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	f107 0008 	add.w	r0, r7, #8
 80027be:	4910      	ldr	r1, [pc, #64]	; (8002800 <HMI_updateDisplaySensor+0xe4>)
 80027c0:	f007 fd52 	bl	800a268 <siprintf>
		ILI9341_Fill_Rect(5, 60, 315, 100, COLOR_ORANGE);
 80027c4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	2364      	movs	r3, #100	; 0x64
 80027cc:	f240 123b 	movw	r2, #315	; 0x13b
 80027d0:	213c      	movs	r1, #60	; 0x3c
 80027d2:	2005      	movs	r0, #5
 80027d4:	f7fe fdec 	bl	80013b0 <ILI9341_Fill_Rect>
		ILI9341_printText(buf2, 50, 75, COLOR_WHITE, COLOR_ORANGE, 2);
 80027d8:	f107 0008 	add.w	r0, r7, #8
 80027dc:	2302      	movs	r3, #2
 80027de:	9301      	str	r3, [sp, #4]
 80027e0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027ea:	224b      	movs	r2, #75	; 0x4b
 80027ec:	2132      	movs	r1, #50	; 0x32
 80027ee:	f7ff f905 	bl	80019fc <ILI9341_printText>
}
 80027f2:	bf00      	nop
 80027f4:	3730      	adds	r7, #48	; 0x30
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	0800cf54 	.word	0x0800cf54
 8002800:	0800cf68 	.word	0x0800cf68

08002804 <createPcReceiveHandler>:
PcReceiveHandler createPcReceiveHandler(StateMachine*  stateMachine,
										PIDController* controller,
		   								Motor* motor,
		   								PcSendHandler* sender,
		   								UART_HandleTypeDef* uart3)
{
 8002804:	b5b0      	push	{r4, r5, r7, lr}
 8002806:	b08a      	sub	sp, #40	; 0x28
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
 8002810:	603b      	str	r3, [r7, #0]
    PcReceiveHandler handler;
    handler.stateMachine	= stateMachine;
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	613b      	str	r3, [r7, #16]
    handler.pidController 	= controller;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	617b      	str	r3, [r7, #20]
    handler.motor 			= motor;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	61bb      	str	r3, [r7, #24]
    handler.sender 			= sender;
 800281e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002820:	61fb      	str	r3, [r7, #28]
    handler.uart3 			= uart3;
 8002822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002824:	623b      	str	r3, [r7, #32]

    // Zuweisung der globalen Variable
    gPcHandler = handler;
 8002826:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <createPcReceiveHandler+0x5c>)
 8002828:	461d      	mov	r5, r3
 800282a:	f107 0410 	add.w	r4, r7, #16
 800282e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002830:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002832:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002836:	e885 0003 	stmia.w	r5, {r0, r1}

    handler.uartProcessor = createUartProcessor(pc_interface_dictionary);
 800283a:	480a      	ldr	r0, [pc, #40]	; (8002864 <createPcReceiveHandler+0x60>)
 800283c:	f000 fe8c 	bl	8003558 <createUartProcessor>
 8002840:	6278      	str	r0, [r7, #36]	; 0x24
    return handler;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	461d      	mov	r5, r3
 8002846:	f107 0410 	add.w	r4, r7, #16
 800284a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800284c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800284e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002852:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	3728      	adds	r7, #40	; 0x28
 800285a:	46bd      	mov	sp, r7
 800285c:	bdb0      	pop	{r4, r5, r7, pc}
 800285e:	bf00      	nop
 8002860:	20000350 	.word	0x20000350
 8002864:	20000004 	.word	0x20000004

08002868 <handleSetSpeed>:

// Handle-Methods
void handleSetSpeed(uint8_t uartNr, const char* value){
 8002868:	b5b0      	push	{r4, r5, r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	6039      	str	r1, [r7, #0]
 8002872:	71fb      	strb	r3, [r7, #7]
	if(gPcHandler.stateMachine->getState(gPcHandler.stateMachine) == STATE_MANUAL_CONTROL){
 8002874:	4b0f      	ldr	r3, [pc, #60]	; (80028b4 <handleSetSpeed+0x4c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	4a0e      	ldr	r2, [pc, #56]	; (80028b4 <handleSetSpeed+0x4c>)
 800287c:	6812      	ldr	r2, [r2, #0]
 800287e:	4610      	mov	r0, r2
 8002880:	4798      	blx	r3
 8002882:	4603      	mov	r3, r0
 8002884:	2b01      	cmp	r3, #1
 8002886:	d110      	bne.n	80028aa <handleSetSpeed+0x42>
		gPcHandler.motor->setSpeed(gPcHandler.motor,extractFloatValue(3,value));
 8002888:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <handleSetSpeed+0x4c>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	68dc      	ldr	r4, [r3, #12]
 800288e:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <handleSetSpeed+0x4c>)
 8002890:	689d      	ldr	r5, [r3, #8]
 8002892:	6839      	ldr	r1, [r7, #0]
 8002894:	2003      	movs	r0, #3
 8002896:	f000 f933 	bl	8002b00 <extractFloatValue>
 800289a:	eef0 7a40 	vmov.f32	s15, s0
 800289e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028a2:	ee17 1a90 	vmov	r1, s15
 80028a6:	4628      	mov	r0, r5
 80028a8:	47a0      	blx	r4
	}

}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bdb0      	pop	{r4, r5, r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000350 	.word	0x20000350

080028b8 <handleSetState>:


void handleSetState(uint8_t uartNr, const char* value){
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	6039      	str	r1, [r7, #0]
 80028c2:	71fb      	strb	r3, [r7, #7]
	int state = extractIntValue(3, value);
 80028c4:	6839      	ldr	r1, [r7, #0]
 80028c6:	2003      	movs	r0, #3
 80028c8:	f000 f9a6 	bl	8002c18 <extractIntValue>
 80028cc:	60b8      	str	r0, [r7, #8]
	State s = STATE_IDLE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	73fb      	strb	r3, [r7, #15]
	if(state == 1){
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d102      	bne.n	80028de <handleSetState+0x26>
		s = STATE_MANUAL_CONTROL;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
 80028dc:	e004      	b.n	80028e8 <handleSetState+0x30>
	}else if(state ==2){
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d101      	bne.n	80028e8 <handleSetState+0x30>
		s = STATE_AUTOMATIC_MODE;
 80028e4:	2302      	movs	r3, #2
 80028e6:	73fb      	strb	r3, [r7, #15]
	}

	gPcHandler.stateMachine->changeState(gPcHandler.stateMachine,s);
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <handleSetState+0x48>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	4a04      	ldr	r2, [pc, #16]	; (8002900 <handleSetState+0x48>)
 80028f0:	6812      	ldr	r2, [r2, #0]
 80028f2:	7bf9      	ldrb	r1, [r7, #15]
 80028f4:	4610      	mov	r0, r2
 80028f6:	4798      	blx	r3
}
 80028f8:	bf00      	nop
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000350 	.word	0x20000350

08002904 <handleSetCP>:

void handleSetCP(uint8_t uartNr, const char* value){
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	6039      	str	r1, [r7, #0]
 800290e:	71fb      	strb	r3, [r7, #7]
	float kp = extractFloatValue(3, value);
 8002910:	6839      	ldr	r1, [r7, #0]
 8002912:	2003      	movs	r0, #3
 8002914:	f000 f8f4 	bl	8002b00 <extractFloatValue>
 8002918:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.pidController->set_kp(gPcHandler.pidController,kp);
 800291c:	4b06      	ldr	r3, [pc, #24]	; (8002938 <handleSetCP+0x34>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002922:	4a05      	ldr	r2, [pc, #20]	; (8002938 <handleSetCP+0x34>)
 8002924:	6852      	ldr	r2, [r2, #4]
 8002926:	ed97 0a03 	vldr	s0, [r7, #12]
 800292a:	4610      	mov	r0, r2
 800292c:	4798      	blx	r3
}
 800292e:	bf00      	nop
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000350 	.word	0x20000350

0800293c <handleSetCI>:
void handleSetCI(uint8_t uartNr, const char* value){
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	6039      	str	r1, [r7, #0]
 8002946:	71fb      	strb	r3, [r7, #7]
	float ki = extractFloatValue(3, value);
 8002948:	6839      	ldr	r1, [r7, #0]
 800294a:	2003      	movs	r0, #3
 800294c:	f000 f8d8 	bl	8002b00 <extractFloatValue>
 8002950:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.pidController->set_ki(gPcHandler.pidController,ki);
 8002954:	4b06      	ldr	r3, [pc, #24]	; (8002970 <handleSetCI+0x34>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295a:	4a05      	ldr	r2, [pc, #20]	; (8002970 <handleSetCI+0x34>)
 800295c:	6852      	ldr	r2, [r2, #4]
 800295e:	ed97 0a03 	vldr	s0, [r7, #12]
 8002962:	4610      	mov	r0, r2
 8002964:	4798      	blx	r3
}
 8002966:	bf00      	nop
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000350 	.word	0x20000350

08002974 <handleSetCD>:
void handleSetCD(uint8_t uartNr, const char* value){
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	6039      	str	r1, [r7, #0]
 800297e:	71fb      	strb	r3, [r7, #7]
	float kd = extractFloatValue(3, value);
 8002980:	6839      	ldr	r1, [r7, #0]
 8002982:	2003      	movs	r0, #3
 8002984:	f000 f8bc 	bl	8002b00 <extractFloatValue>
 8002988:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.pidController->set_kd(gPcHandler.pidController,kd);
 800298c:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <handleSetCD+0x34>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	4a05      	ldr	r2, [pc, #20]	; (80029a8 <handleSetCD+0x34>)
 8002994:	6852      	ldr	r2, [r2, #4]
 8002996:	ed97 0a03 	vldr	s0, [r7, #12]
 800299a:	4610      	mov	r0, r2
 800299c:	4798      	blx	r3
}
 800299e:	bf00      	nop
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000350 	.word	0x20000350

080029ac <handleGetState>:

void handleGetState(uint8_t uartNr, const char* value){
 80029ac:	b5b0      	push	{r4, r5, r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	6039      	str	r1, [r7, #0]
 80029b6:	71fb      	strb	r3, [r7, #7]
	gPcHandler.sender->interface.sendState(gPcHandler.uart3,gPcHandler.stateMachine->getState(gPcHandler.stateMachine));
 80029b8:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <handleGetState+0x34>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	689c      	ldr	r4, [r3, #8]
 80029be:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <handleGetState+0x34>)
 80029c0:	691d      	ldr	r5, [r3, #16]
 80029c2:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <handleGetState+0x34>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	4a05      	ldr	r2, [pc, #20]	; (80029e0 <handleGetState+0x34>)
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	4610      	mov	r0, r2
 80029ce:	4798      	blx	r3
 80029d0:	4603      	mov	r3, r0
 80029d2:	4619      	mov	r1, r3
 80029d4:	4628      	mov	r0, r5
 80029d6:	47a0      	blx	r4
}
 80029d8:	bf00      	nop
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bdb0      	pop	{r4, r5, r7, pc}
 80029e0:	20000350 	.word	0x20000350

080029e4 <handleGetSpeed>:
void handleGetSpeed(uint8_t uartNr, const char* value){
 80029e4:	b5b0      	push	{r4, r5, r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	6039      	str	r1, [r7, #0]
 80029ee:	71fb      	strb	r3, [r7, #7]
	gPcHandler.sender->interface.sendSpeed(gPcHandler.uart3,gPcHandler.motor->getSpeed(gPcHandler.motor));
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <handleGetSpeed+0x3c>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	68dc      	ldr	r4, [r3, #12]
 80029f6:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <handleGetSpeed+0x3c>)
 80029f8:	691d      	ldr	r5, [r3, #16]
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <handleGetSpeed+0x3c>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	4a07      	ldr	r2, [pc, #28]	; (8002a20 <handleGetSpeed+0x3c>)
 8002a02:	6892      	ldr	r2, [r2, #8]
 8002a04:	4610      	mov	r0, r2
 8002a06:	4798      	blx	r3
 8002a08:	ee07 0a90 	vmov	s15, r0
 8002a0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a10:	eeb0 0a67 	vmov.f32	s0, s15
 8002a14:	4628      	mov	r0, r5
 8002a16:	47a0      	blx	r4
}
 8002a18:	bf00      	nop
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a20:	20000350 	.word	0x20000350

08002a24 <handleGetCP>:
void handleGetCP(uint8_t uartNr, const char* value){
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	6039      	str	r1, [r7, #0]
 8002a2e:	71fb      	strb	r3, [r7, #7]
	float kp = gPcHandler.pidController->get_kp(gPcHandler.pidController);
 8002a30:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <handleGetCP+0x38>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	4a09      	ldr	r2, [pc, #36]	; (8002a5c <handleGetCP+0x38>)
 8002a38:	6852      	ldr	r2, [r2, #4]
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	4798      	blx	r3
 8002a3e:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.sender->interface.sendCPvalue(gPcHandler.uart3,kp);
 8002a42:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <handleGetCP+0x38>)
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	4a04      	ldr	r2, [pc, #16]	; (8002a5c <handleGetCP+0x38>)
 8002a4a:	6912      	ldr	r2, [r2, #16]
 8002a4c:	ed97 0a03 	vldr	s0, [r7, #12]
 8002a50:	4610      	mov	r0, r2
 8002a52:	4798      	blx	r3
}
 8002a54:	bf00      	nop
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	20000350 	.word	0x20000350

08002a60 <handleGetCI>:
void handleGetCI(uint8_t uartNr, const char* value){
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	6039      	str	r1, [r7, #0]
 8002a6a:	71fb      	strb	r3, [r7, #7]
	float ki = gPcHandler.pidController->get_ki(gPcHandler.pidController);
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <handleGetCI+0x38>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	4a09      	ldr	r2, [pc, #36]	; (8002a98 <handleGetCI+0x38>)
 8002a74:	6852      	ldr	r2, [r2, #4]
 8002a76:	4610      	mov	r0, r2
 8002a78:	4798      	blx	r3
 8002a7a:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.sender->interface.sendCIvalue(gPcHandler.uart3,ki);
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <handleGetCI+0x38>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	4a04      	ldr	r2, [pc, #16]	; (8002a98 <handleGetCI+0x38>)
 8002a86:	6912      	ldr	r2, [r2, #16]
 8002a88:	ed97 0a03 	vldr	s0, [r7, #12]
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	4798      	blx	r3
}
 8002a90:	bf00      	nop
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	20000350 	.word	0x20000350

08002a9c <handleGetCD>:
void handleGetCD(uint8_t uartNr, const char* value){
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	6039      	str	r1, [r7, #0]
 8002aa6:	71fb      	strb	r3, [r7, #7]
	float kd = gPcHandler.pidController->get_kd(gPcHandler.pidController);
 8002aa8:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <handleGetCD+0x38>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	4a09      	ldr	r2, [pc, #36]	; (8002ad4 <handleGetCD+0x38>)
 8002ab0:	6852      	ldr	r2, [r2, #4]
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	4798      	blx	r3
 8002ab6:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.sender->interface.sendCDvalue(gPcHandler.uart3,kd);
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <handleGetCD+0x38>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	4a04      	ldr	r2, [pc, #16]	; (8002ad4 <handleGetCD+0x38>)
 8002ac2:	6912      	ldr	r2, [r2, #16]
 8002ac4:	ed97 0a03 	vldr	s0, [r7, #12]
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4798      	blx	r3
}
 8002acc:	bf00      	nop
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	20000350 	.word	0x20000350

08002ad8 <processPcInterfaceMessage>:

void processPcInterfaceMessage(PcReceiveHandler* handler,uint8_t* receivedData, uint8_t receivedDataIndex){
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	71fb      	strb	r3, [r7, #7]
	processCommand(3, &(handler->uartProcessor), receivedData, receivedDataIndex);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f103 0114 	add.w	r1, r3, #20
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	2003      	movs	r0, #3
 8002af2:	f000 fd6f 	bl	80035d4 <processCommand>
}
 8002af6:	bf00      	nop
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <extractFloatValue>:

float extractFloatValue(uint8_t uartNr, const char* value) {
 8002b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b04:	b089      	sub	sp, #36	; 0x24
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	4603      	mov	r3, r0
 8002b0a:	6039      	str	r1, [r7, #0]
 8002b0c:	71fb      	strb	r3, [r7, #7]
    int length = strlen(value);
 8002b0e:	6838      	ldr	r0, [r7, #0]
 8002b10:	f7fd fbb6 	bl	8000280 <strlen>
 8002b14:	4603      	mov	r3, r0
 8002b16:	613b      	str	r3, [r7, #16]
    int startIndex = -1;  // Index des ersten Leerzeichens
 8002b18:	f04f 33ff 	mov.w	r3, #4294967295
 8002b1c:	61fb      	str	r3, [r7, #28]
    int endIndex = -1;    // Index des zweiten Leerzeichens
 8002b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b22:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < length; i++) {
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	e019      	b.n	8002b5e <extractFloatValue+0x5e>
        if (value[i] == ' ' || value[i] == '\r') {
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	4413      	add	r3, r2
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	d005      	beq.n	8002b42 <extractFloatValue+0x42>
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b0d      	cmp	r3, #13
 8002b40:	d10a      	bne.n	8002b58 <extractFloatValue+0x58>
            if (startIndex == -1) {
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b48:	d103      	bne.n	8002b52 <extractFloatValue+0x52>
                startIndex = i + 1;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	61fb      	str	r3, [r7, #28]
 8002b50:	e002      	b.n	8002b58 <extractFloatValue+0x58>
            } else {
                endIndex = i;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	61bb      	str	r3, [r7, #24]
                break;
 8002b56:	e006      	b.n	8002b66 <extractFloatValue+0x66>
    for (int i = 0; i < length; i++) {
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	617b      	str	r3, [r7, #20]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	dbe1      	blt.n	8002b2a <extractFloatValue+0x2a>
            }
        }
    }
    if (startIndex != -1 && endIndex != -1 && startIndex < endIndex) {
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6c:	d04a      	beq.n	8002c04 <extractFloatValue+0x104>
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b74:	d046      	beq.n	8002c04 <extractFloatValue+0x104>
 8002b76:	69fa      	ldr	r2, [r7, #28]
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	da42      	bge.n	8002c04 <extractFloatValue+0x104>
 8002b7e:	466b      	mov	r3, sp
 8002b80:	461e      	mov	r6, r3
        char floatStr[endIndex - startIndex + 1];
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	1c59      	adds	r1, r3, #1
 8002b8a:	1e4b      	subs	r3, r1, #1
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	460a      	mov	r2, r1
 8002b90:	2300      	movs	r3, #0
 8002b92:	4690      	mov	r8, r2
 8002b94:	4699      	mov	r9, r3
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ba2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ba6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002baa:	460a      	mov	r2, r1
 8002bac:	2300      	movs	r3, #0
 8002bae:	4614      	mov	r4, r2
 8002bb0:	461d      	mov	r5, r3
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	00eb      	lsls	r3, r5, #3
 8002bbc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bc0:	00e2      	lsls	r2, r4, #3
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	3307      	adds	r3, #7
 8002bc6:	08db      	lsrs	r3, r3, #3
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	ebad 0d03 	sub.w	sp, sp, r3
 8002bce:	466b      	mov	r3, sp
 8002bd0:	3300      	adds	r3, #0
 8002bd2:	60bb      	str	r3, [r7, #8]
        strncpy(floatStr, value + startIndex, endIndex - startIndex);
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	18d1      	adds	r1, r2, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	461a      	mov	r2, r3
 8002be2:	68b8      	ldr	r0, [r7, #8]
 8002be4:	f007 fbbd 	bl	800a362 <strncpy>
        floatStr[endIndex - startIndex] = '\0';
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	54d1      	strb	r1, [r2, r3]
        return strtof(floatStr, NULL);
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	68b8      	ldr	r0, [r7, #8]
 8002bf8:	f006 fb00 	bl	80091fc <strtof>
 8002bfc:	eef0 7a40 	vmov.f32	s15, s0
 8002c00:	46b5      	mov	sp, r6
 8002c02:	e001      	b.n	8002c08 <extractFloatValue+0x108>
    }
    return 0.00;
 8002c04:	eddf 7a03 	vldr	s15, [pc, #12]	; 8002c14 <extractFloatValue+0x114>
}
 8002c08:	eeb0 0a67 	vmov.f32	s0, s15
 8002c0c:	3724      	adds	r7, #36	; 0x24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c14:	00000000 	.word	0x00000000

08002c18 <extractIntValue>:
int extractIntValue(uint8_t uartNr, const char* value) {
 8002c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c1c:	b089      	sub	sp, #36	; 0x24
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	4603      	mov	r3, r0
 8002c22:	6039      	str	r1, [r7, #0]
 8002c24:	71fb      	strb	r3, [r7, #7]
    int length = strlen(value);
 8002c26:	6838      	ldr	r0, [r7, #0]
 8002c28:	f7fd fb2a 	bl	8000280 <strlen>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	613b      	str	r3, [r7, #16]
    int startIndex = -1;  // Index des ersten Leerzeichens
 8002c30:	f04f 33ff 	mov.w	r3, #4294967295
 8002c34:	61fb      	str	r3, [r7, #28]
    int endIndex = -1;    // Index des zweiten Leerzeichens
 8002c36:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3a:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < length; i++) {
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	e019      	b.n	8002c76 <extractIntValue+0x5e>
        if (value[i] == ' ' || value[i] == '\r') {
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	4413      	add	r3, r2
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	d005      	beq.n	8002c5a <extractIntValue+0x42>
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	4413      	add	r3, r2
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b0d      	cmp	r3, #13
 8002c58:	d10a      	bne.n	8002c70 <extractIntValue+0x58>
            if (startIndex == -1) {
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c60:	d103      	bne.n	8002c6a <extractIntValue+0x52>
                startIndex = i + 1;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	3301      	adds	r3, #1
 8002c66:	61fb      	str	r3, [r7, #28]
 8002c68:	e002      	b.n	8002c70 <extractIntValue+0x58>
            } else {
                endIndex = i;
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	61bb      	str	r3, [r7, #24]
                break;
 8002c6e:	e006      	b.n	8002c7e <extractIntValue+0x66>
    for (int i = 0; i < length; i++) {
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	3301      	adds	r3, #1
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	dbe1      	blt.n	8002c42 <extractIntValue+0x2a>
            }
        }
    }
    if (startIndex != -1 && endIndex != -1 && startIndex < endIndex) {
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c84:	d048      	beq.n	8002d18 <extractIntValue+0x100>
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8c:	d044      	beq.n	8002d18 <extractIntValue+0x100>
 8002c8e:	69fa      	ldr	r2, [r7, #28]
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	da40      	bge.n	8002d18 <extractIntValue+0x100>
 8002c96:	466b      	mov	r3, sp
 8002c98:	461e      	mov	r6, r3
        char intStr[endIndex - startIndex + 1];
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	1c59      	adds	r1, r3, #1
 8002ca2:	1e4b      	subs	r3, r1, #1
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	460a      	mov	r2, r1
 8002ca8:	2300      	movs	r3, #0
 8002caa:	4690      	mov	r8, r2
 8002cac:	4699      	mov	r9, r3
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	f04f 0300 	mov.w	r3, #0
 8002cb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cc2:	460a      	mov	r2, r1
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	4614      	mov	r4, r2
 8002cc8:	461d      	mov	r5, r3
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	00eb      	lsls	r3, r5, #3
 8002cd4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cd8:	00e2      	lsls	r2, r4, #3
 8002cda:	460b      	mov	r3, r1
 8002cdc:	3307      	adds	r3, #7
 8002cde:	08db      	lsrs	r3, r3, #3
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	ebad 0d03 	sub.w	sp, sp, r3
 8002ce6:	466b      	mov	r3, sp
 8002ce8:	3300      	adds	r3, #0
 8002cea:	60bb      	str	r3, [r7, #8]
        strncpy(intStr, value + startIndex, endIndex - startIndex);
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	18d1      	adds	r1, r2, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	68b8      	ldr	r0, [r7, #8]
 8002cfc:	f007 fb31 	bl	800a362 <strncpy>
        intStr[endIndex - startIndex] = '\0';
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	2100      	movs	r1, #0
 8002d0a:	54d1      	strb	r1, [r2, r3]
        return atoi(intStr);
 8002d0c:	68b8      	ldr	r0, [r7, #8]
 8002d0e:	f005 fc5f 	bl	80085d0 <atoi>
 8002d12:	4603      	mov	r3, r0
 8002d14:	46b5      	mov	sp, r6
 8002d16:	e000      	b.n	8002d1a <extractIntValue+0x102>
    }
    return 0;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3724      	adds	r7, #36	; 0x24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002d24 <sendDiamExt_impl>:
#include <stdio.h>
#include <string.h>


// Implementierung der Interface methoden
void sendDiamExt_impl(UART_HandleTypeDef *huart,float value) {
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08a      	sub	sp, #40	; 0x28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	ed87 0a00 	vstr	s0, [r7]
	uint8_t tag[] = "DIAMEXT ";
 8002d30:	4a21      	ldr	r2, [pc, #132]	; (8002db8 <sendDiamExt_impl+0x94>)
 8002d32:	f107 031c 	add.w	r3, r7, #28
 8002d36:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d38:	c303      	stmia	r3!, {r0, r1}
 8002d3a:	701a      	strb	r2, [r3, #0]
	uint8_t diameter[10];
	uint8_t endTag[] = " /r/n";
 8002d3c:	4a1f      	ldr	r2, [pc, #124]	; (8002dbc <sendDiamExt_impl+0x98>)
 8002d3e:	f107 0308 	add.w	r3, r7, #8
 8002d42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d46:	6018      	str	r0, [r3, #0]
 8002d48:	3304      	adds	r3, #4
 8002d4a:	8019      	strh	r1, [r3, #0]

	sprintf((char *)diameter, "%.2f", value);
 8002d4c:	6838      	ldr	r0, [r7, #0]
 8002d4e:	f7fd fc03 	bl	8000558 <__aeabi_f2d>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	f107 0010 	add.w	r0, r7, #16
 8002d5a:	4919      	ldr	r1, [pc, #100]	; (8002dc0 <sendDiamExt_impl+0x9c>)
 8002d5c:	f007 fa84 	bl	800a268 <siprintf>

	HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 8002d60:	f107 031c 	add.w	r3, r7, #28
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fd fa8b 	bl	8000280 <strlen>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	f107 011c 	add.w	r1, r7, #28
 8002d72:	230a      	movs	r3, #10
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f004 fc00 	bl	800757a <HAL_UART_Transmit>
   	HAL_UART_Transmit(huart, diameter, strlen((char*)diameter), 10);
 8002d7a:	f107 0310 	add.w	r3, r7, #16
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fd fa7e 	bl	8000280 <strlen>
 8002d84:	4603      	mov	r3, r0
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	f107 0110 	add.w	r1, r7, #16
 8002d8c:	230a      	movs	r3, #10
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f004 fbf3 	bl	800757a <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 8002d94:	f107 0308 	add.w	r3, r7, #8
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fd fa71 	bl	8000280 <strlen>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	f107 0108 	add.w	r1, r7, #8
 8002da6:	230a      	movs	r3, #10
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f004 fbe6 	bl	800757a <HAL_UART_Transmit>
}
 8002dae:	bf00      	nop
 8002db0:	3728      	adds	r7, #40	; 0x28
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	0800cfbc 	.word	0x0800cfbc
 8002dbc:	0800cfc8 	.word	0x0800cfc8
 8002dc0:	0800cfb4 	.word	0x0800cfb4

08002dc4 <sendDiamBack_impl>:
void sendDiamBack_impl(UART_HandleTypeDef *huart,float value) {
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08a      	sub	sp, #40	; 0x28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	ed87 0a00 	vstr	s0, [r7]
	uint8_t tag[] = "DIAMBACK ";
 8002dd0:	4a21      	ldr	r2, [pc, #132]	; (8002e58 <sendDiamBack_impl+0x94>)
 8002dd2:	f107 031c 	add.w	r3, r7, #28
 8002dd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002dd8:	c303      	stmia	r3!, {r0, r1}
 8002dda:	801a      	strh	r2, [r3, #0]
	uint8_t diameter[10];
	uint8_t endTag[] = " /r/n";
 8002ddc:	4a1f      	ldr	r2, [pc, #124]	; (8002e5c <sendDiamBack_impl+0x98>)
 8002dde:	f107 0308 	add.w	r3, r7, #8
 8002de2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002de6:	6018      	str	r0, [r3, #0]
 8002de8:	3304      	adds	r3, #4
 8002dea:	8019      	strh	r1, [r3, #0]

	sprintf((char *)diameter, "%.2f", value);
 8002dec:	6838      	ldr	r0, [r7, #0]
 8002dee:	f7fd fbb3 	bl	8000558 <__aeabi_f2d>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	f107 0010 	add.w	r0, r7, #16
 8002dfa:	4919      	ldr	r1, [pc, #100]	; (8002e60 <sendDiamBack_impl+0x9c>)
 8002dfc:	f007 fa34 	bl	800a268 <siprintf>

	HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 8002e00:	f107 031c 	add.w	r3, r7, #28
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fd fa3b 	bl	8000280 <strlen>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	f107 011c 	add.w	r1, r7, #28
 8002e12:	230a      	movs	r3, #10
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f004 fbb0 	bl	800757a <HAL_UART_Transmit>
   	HAL_UART_Transmit(huart, diameter, strlen((char*)diameter), 10);
 8002e1a:	f107 0310 	add.w	r3, r7, #16
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fd fa2e 	bl	8000280 <strlen>
 8002e24:	4603      	mov	r3, r0
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	f107 0110 	add.w	r1, r7, #16
 8002e2c:	230a      	movs	r3, #10
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f004 fba3 	bl	800757a <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 8002e34:	f107 0308 	add.w	r3, r7, #8
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fd fa21 	bl	8000280 <strlen>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	f107 0108 	add.w	r1, r7, #8
 8002e46:	230a      	movs	r3, #10
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f004 fb96 	bl	800757a <HAL_UART_Transmit>
}
 8002e4e:	bf00      	nop
 8002e50:	3728      	adds	r7, #40	; 0x28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	0800cfd0 	.word	0x0800cfd0
 8002e5c:	0800cfc8 	.word	0x0800cfc8
 8002e60:	0800cfb4 	.word	0x0800cfb4

08002e64 <sendState_impl>:

void sendState_impl(UART_HandleTypeDef *huart, State state) {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b088      	sub	sp, #32
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	70fb      	strb	r3, [r7, #3]
    uint8_t tag[] = "STATE ";
 8002e70:	4a22      	ldr	r2, [pc, #136]	; (8002efc <sendState_impl+0x98>)
 8002e72:	f107 0318 	add.w	r3, r7, #24
 8002e76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e7a:	6018      	str	r0, [r3, #0]
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	8019      	strh	r1, [r3, #0]
 8002e80:	3302      	adds	r3, #2
 8002e82:	0c0a      	lsrs	r2, r1, #16
 8002e84:	701a      	strb	r2, [r3, #0]
    uint8_t stateStr[10];
    uint8_t endTag[] = "\r\n";
 8002e86:	4a1e      	ldr	r2, [pc, #120]	; (8002f00 <sendState_impl+0x9c>)
 8002e88:	f107 0308 	add.w	r3, r7, #8
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	4611      	mov	r1, r2
 8002e90:	8019      	strh	r1, [r3, #0]
 8002e92:	3302      	adds	r3, #2
 8002e94:	0c12      	lsrs	r2, r2, #16
 8002e96:	701a      	strb	r2, [r3, #0]

    sprintf((char *)stateStr, "%d", state);
 8002e98:	78fa      	ldrb	r2, [r7, #3]
 8002e9a:	f107 030c 	add.w	r3, r7, #12
 8002e9e:	4919      	ldr	r1, [pc, #100]	; (8002f04 <sendState_impl+0xa0>)
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f007 f9e1 	bl	800a268 <siprintf>

    HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 8002ea6:	f107 0318 	add.w	r3, r7, #24
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fd f9e8 	bl	8000280 <strlen>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	f107 0118 	add.w	r1, r7, #24
 8002eb8:	230a      	movs	r3, #10
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f004 fb5d 	bl	800757a <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, stateStr, strlen((char*)stateStr), 10);
 8002ec0:	f107 030c 	add.w	r3, r7, #12
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fd f9db 	bl	8000280 <strlen>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	f107 010c 	add.w	r1, r7, #12
 8002ed2:	230a      	movs	r3, #10
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f004 fb50 	bl	800757a <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 8002eda:	f107 0308 	add.w	r3, r7, #8
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fd f9ce 	bl	8000280 <strlen>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	f107 0108 	add.w	r1, r7, #8
 8002eec:	230a      	movs	r3, #10
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f004 fb43 	bl	800757a <HAL_UART_Transmit>
}
 8002ef4:	bf00      	nop
 8002ef6:	3720      	adds	r7, #32
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	0800cfe0 	.word	0x0800cfe0
 8002f00:	0800cfe8 	.word	0x0800cfe8
 8002f04:	0800cfdc 	.word	0x0800cfdc

08002f08 <sendSpeed_impl>:
void sendSpeed_impl(UART_HandleTypeDef *huart, float speed){
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	ed87 0a00 	vstr	s0, [r7]
    uint8_t tag[] = "SPEED ";
 8002f14:	4a24      	ldr	r2, [pc, #144]	; (8002fa8 <sendSpeed_impl+0xa0>)
 8002f16:	f107 0318 	add.w	r3, r7, #24
 8002f1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f1e:	6018      	str	r0, [r3, #0]
 8002f20:	3304      	adds	r3, #4
 8002f22:	8019      	strh	r1, [r3, #0]
 8002f24:	3302      	adds	r3, #2
 8002f26:	0c0a      	lsrs	r2, r1, #16
 8002f28:	701a      	strb	r2, [r3, #0]
    uint8_t value[10];
    uint8_t endTag[] = "\r\n";
 8002f2a:	4a20      	ldr	r2, [pc, #128]	; (8002fac <sendSpeed_impl+0xa4>)
 8002f2c:	f107 0308 	add.w	r3, r7, #8
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	4611      	mov	r1, r2
 8002f34:	8019      	strh	r1, [r3, #0]
 8002f36:	3302      	adds	r3, #2
 8002f38:	0c12      	lsrs	r2, r2, #16
 8002f3a:	701a      	strb	r2, [r3, #0]

    sprintf((char *)value, "%.2f", speed);
 8002f3c:	6838      	ldr	r0, [r7, #0]
 8002f3e:	f7fd fb0b 	bl	8000558 <__aeabi_f2d>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	f107 000c 	add.w	r0, r7, #12
 8002f4a:	4919      	ldr	r1, [pc, #100]	; (8002fb0 <sendSpeed_impl+0xa8>)
 8002f4c:	f007 f98c 	bl	800a268 <siprintf>

    HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 8002f50:	f107 0318 	add.w	r3, r7, #24
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fd f993 	bl	8000280 <strlen>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	f107 0118 	add.w	r1, r7, #24
 8002f62:	230a      	movs	r3, #10
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f004 fb08 	bl	800757a <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, value, strlen((char*)value), 10);
 8002f6a:	f107 030c 	add.w	r3, r7, #12
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fd f986 	bl	8000280 <strlen>
 8002f74:	4603      	mov	r3, r0
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	f107 010c 	add.w	r1, r7, #12
 8002f7c:	230a      	movs	r3, #10
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f004 fafb 	bl	800757a <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 8002f84:	f107 0308 	add.w	r3, r7, #8
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fd f979 	bl	8000280 <strlen>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	f107 0108 	add.w	r1, r7, #8
 8002f96:	230a      	movs	r3, #10
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f004 faee 	bl	800757a <HAL_UART_Transmit>

}
 8002f9e:	bf00      	nop
 8002fa0:	3720      	adds	r7, #32
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	0800cfec 	.word	0x0800cfec
 8002fac:	0800cfe8 	.word	0x0800cfe8
 8002fb0:	0800cfb4 	.word	0x0800cfb4

08002fb4 <sendCPvalue_impl>:
void sendCPvalue_impl(UART_HandleTypeDef *huart, float cp){
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	ed87 0a00 	vstr	s0, [r7]
    uint8_t tag[] = "CP ";
 8002fc0:	4b1f      	ldr	r3, [pc, #124]	; (8003040 <sendCPvalue_impl+0x8c>)
 8002fc2:	61fb      	str	r3, [r7, #28]
    uint8_t value[10];
    uint8_t endTag[] = "\r\n";
 8002fc4:	4a1f      	ldr	r2, [pc, #124]	; (8003044 <sendCPvalue_impl+0x90>)
 8002fc6:	f107 030c 	add.w	r3, r7, #12
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	4611      	mov	r1, r2
 8002fce:	8019      	strh	r1, [r3, #0]
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	0c12      	lsrs	r2, r2, #16
 8002fd4:	701a      	strb	r2, [r3, #0]

    sprintf((char *)value, "%.2f", cp);
 8002fd6:	6838      	ldr	r0, [r7, #0]
 8002fd8:	f7fd fabe 	bl	8000558 <__aeabi_f2d>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	f107 0010 	add.w	r0, r7, #16
 8002fe4:	4918      	ldr	r1, [pc, #96]	; (8003048 <sendCPvalue_impl+0x94>)
 8002fe6:	f007 f93f 	bl	800a268 <siprintf>

    HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 8002fea:	f107 031c 	add.w	r3, r7, #28
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fd f946 	bl	8000280 <strlen>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	f107 011c 	add.w	r1, r7, #28
 8002ffc:	230a      	movs	r3, #10
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f004 fabb 	bl	800757a <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, value, strlen((char*)value), 10);
 8003004:	f107 0310 	add.w	r3, r7, #16
 8003008:	4618      	mov	r0, r3
 800300a:	f7fd f939 	bl	8000280 <strlen>
 800300e:	4603      	mov	r3, r0
 8003010:	b29a      	uxth	r2, r3
 8003012:	f107 0110 	add.w	r1, r7, #16
 8003016:	230a      	movs	r3, #10
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f004 faae 	bl	800757a <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 800301e:	f107 030c 	add.w	r3, r7, #12
 8003022:	4618      	mov	r0, r3
 8003024:	f7fd f92c 	bl	8000280 <strlen>
 8003028:	4603      	mov	r3, r0
 800302a:	b29a      	uxth	r2, r3
 800302c:	f107 010c 	add.w	r1, r7, #12
 8003030:	230a      	movs	r3, #10
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f004 faa1 	bl	800757a <HAL_UART_Transmit>
}
 8003038:	bf00      	nop
 800303a:	3720      	adds	r7, #32
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	00205043 	.word	0x00205043
 8003044:	0800cfe8 	.word	0x0800cfe8
 8003048:	0800cfb4 	.word	0x0800cfb4

0800304c <sendCIvalue_impl>:
void sendCIvalue_impl(UART_HandleTypeDef *huart, float ci){
 800304c:	b580      	push	{r7, lr}
 800304e:	b088      	sub	sp, #32
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	ed87 0a00 	vstr	s0, [r7]
    uint8_t tag[] = "CI ";
 8003058:	4b1f      	ldr	r3, [pc, #124]	; (80030d8 <sendCIvalue_impl+0x8c>)
 800305a:	61fb      	str	r3, [r7, #28]
    uint8_t value[10];
    uint8_t endTag[] = "\r\n";
 800305c:	4a1f      	ldr	r2, [pc, #124]	; (80030dc <sendCIvalue_impl+0x90>)
 800305e:	f107 030c 	add.w	r3, r7, #12
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	4611      	mov	r1, r2
 8003066:	8019      	strh	r1, [r3, #0]
 8003068:	3302      	adds	r3, #2
 800306a:	0c12      	lsrs	r2, r2, #16
 800306c:	701a      	strb	r2, [r3, #0]

    sprintf((char *)value, "%.2f", ci);
 800306e:	6838      	ldr	r0, [r7, #0]
 8003070:	f7fd fa72 	bl	8000558 <__aeabi_f2d>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	f107 0010 	add.w	r0, r7, #16
 800307c:	4918      	ldr	r1, [pc, #96]	; (80030e0 <sendCIvalue_impl+0x94>)
 800307e:	f007 f8f3 	bl	800a268 <siprintf>

    HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 8003082:	f107 031c 	add.w	r3, r7, #28
 8003086:	4618      	mov	r0, r3
 8003088:	f7fd f8fa 	bl	8000280 <strlen>
 800308c:	4603      	mov	r3, r0
 800308e:	b29a      	uxth	r2, r3
 8003090:	f107 011c 	add.w	r1, r7, #28
 8003094:	230a      	movs	r3, #10
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f004 fa6f 	bl	800757a <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, value, strlen((char*)value), 10);
 800309c:	f107 0310 	add.w	r3, r7, #16
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fd f8ed 	bl	8000280 <strlen>
 80030a6:	4603      	mov	r3, r0
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	f107 0110 	add.w	r1, r7, #16
 80030ae:	230a      	movs	r3, #10
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f004 fa62 	bl	800757a <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 80030b6:	f107 030c 	add.w	r3, r7, #12
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd f8e0 	bl	8000280 <strlen>
 80030c0:	4603      	mov	r3, r0
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	f107 010c 	add.w	r1, r7, #12
 80030c8:	230a      	movs	r3, #10
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f004 fa55 	bl	800757a <HAL_UART_Transmit>
}
 80030d0:	bf00      	nop
 80030d2:	3720      	adds	r7, #32
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	00204943 	.word	0x00204943
 80030dc:	0800cfe8 	.word	0x0800cfe8
 80030e0:	0800cfb4 	.word	0x0800cfb4

080030e4 <sendCDvalue_impl>:
void sendCDvalue_impl(UART_HandleTypeDef *huart, float cd){
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b088      	sub	sp, #32
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	ed87 0a00 	vstr	s0, [r7]
    uint8_t tag[] = "CD ";
 80030f0:	4b1f      	ldr	r3, [pc, #124]	; (8003170 <sendCDvalue_impl+0x8c>)
 80030f2:	61fb      	str	r3, [r7, #28]
    uint8_t value[10];
    uint8_t endTag[] = "\r\n";
 80030f4:	4a1f      	ldr	r2, [pc, #124]	; (8003174 <sendCDvalue_impl+0x90>)
 80030f6:	f107 030c 	add.w	r3, r7, #12
 80030fa:	6812      	ldr	r2, [r2, #0]
 80030fc:	4611      	mov	r1, r2
 80030fe:	8019      	strh	r1, [r3, #0]
 8003100:	3302      	adds	r3, #2
 8003102:	0c12      	lsrs	r2, r2, #16
 8003104:	701a      	strb	r2, [r3, #0]

    sprintf((char *)value, "%.2f", cd);
 8003106:	6838      	ldr	r0, [r7, #0]
 8003108:	f7fd fa26 	bl	8000558 <__aeabi_f2d>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	f107 0010 	add.w	r0, r7, #16
 8003114:	4918      	ldr	r1, [pc, #96]	; (8003178 <sendCDvalue_impl+0x94>)
 8003116:	f007 f8a7 	bl	800a268 <siprintf>

    HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 800311a:	f107 031c 	add.w	r3, r7, #28
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd f8ae 	bl	8000280 <strlen>
 8003124:	4603      	mov	r3, r0
 8003126:	b29a      	uxth	r2, r3
 8003128:	f107 011c 	add.w	r1, r7, #28
 800312c:	230a      	movs	r3, #10
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f004 fa23 	bl	800757a <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, value, strlen((char*)value), 10);
 8003134:	f107 0310 	add.w	r3, r7, #16
 8003138:	4618      	mov	r0, r3
 800313a:	f7fd f8a1 	bl	8000280 <strlen>
 800313e:	4603      	mov	r3, r0
 8003140:	b29a      	uxth	r2, r3
 8003142:	f107 0110 	add.w	r1, r7, #16
 8003146:	230a      	movs	r3, #10
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f004 fa16 	bl	800757a <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 800314e:	f107 030c 	add.w	r3, r7, #12
 8003152:	4618      	mov	r0, r3
 8003154:	f7fd f894 	bl	8000280 <strlen>
 8003158:	4603      	mov	r3, r0
 800315a:	b29a      	uxth	r2, r3
 800315c:	f107 010c 	add.w	r1, r7, #12
 8003160:	230a      	movs	r3, #10
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f004 fa09 	bl	800757a <HAL_UART_Transmit>
}
 8003168:	bf00      	nop
 800316a:	3720      	adds	r7, #32
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	00204443 	.word	0x00204443
 8003174:	0800cfe8 	.word	0x0800cfe8
 8003178:	0800cfb4 	.word	0x0800cfb4

0800317c <createPcSendHandler>:
PcSendHandler createPcSendHandler(uint32_t timeout) {
 800317c:	b4b0      	push	{r4, r5, r7}
 800317e:	b08b      	sub	sp, #44	; 0x2c
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
	PcSendHandler handler;
    handler.interface.sendDiamExt	= sendDiamExt_impl;
 8003186:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <createPcSendHandler+0x48>)
 8003188:	60bb      	str	r3, [r7, #8]
    handler.interface.sendDiamBack	= sendDiamBack_impl;
 800318a:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <createPcSendHandler+0x4c>)
 800318c:	60fb      	str	r3, [r7, #12]
    handler.interface.sendState		= sendState_impl;
 800318e:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <createPcSendHandler+0x50>)
 8003190:	613b      	str	r3, [r7, #16]
    handler.interface.sendSpeed		= sendSpeed_impl;
 8003192:	4b0f      	ldr	r3, [pc, #60]	; (80031d0 <createPcSendHandler+0x54>)
 8003194:	617b      	str	r3, [r7, #20]
    handler.interface.sendCPvalue	= sendCPvalue_impl;
 8003196:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <createPcSendHandler+0x58>)
 8003198:	61bb      	str	r3, [r7, #24]
    handler.interface.sendCIvalue	= sendCIvalue_impl;
 800319a:	4b0f      	ldr	r3, [pc, #60]	; (80031d8 <createPcSendHandler+0x5c>)
 800319c:	61fb      	str	r3, [r7, #28]
    handler.interface.sendCDvalue	= sendCDvalue_impl;
 800319e:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <createPcSendHandler+0x60>)
 80031a0:	623b      	str	r3, [r7, #32]

    handler.interface.timeout = timeout;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
    return handler;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	461d      	mov	r5, r3
 80031aa:	f107 0408 	add.w	r4, r7, #8
 80031ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80031b6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	372c      	adds	r7, #44	; 0x2c
 80031be:	46bd      	mov	sp, r7
 80031c0:	bcb0      	pop	{r4, r5, r7}
 80031c2:	4770      	bx	lr
 80031c4:	08002d25 	.word	0x08002d25
 80031c8:	08002dc5 	.word	0x08002dc5
 80031cc:	08002e65 	.word	0x08002e65
 80031d0:	08002f09 	.word	0x08002f09
 80031d4:	08002fb5 	.word	0x08002fb5
 80031d8:	0800304d 	.word	0x0800304d
 80031dc:	080030e5 	.word	0x080030e5

080031e0 <createSensorReceiveHandler>:


// Konstruktor
SensorReceiveHandler createSensorReceiveHandler(Sensor* sensorExtruder,
												Sensor* sensorBack)
{
 80031e0:	b590      	push	{r4, r7, lr}
 80031e2:	b089      	sub	sp, #36	; 0x24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
	SensorReceiveHandler handler;
    handler.sensorExtruder = sensorExtruder;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	617b      	str	r3, [r7, #20]
    handler.sensorBack = sensorBack;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	61bb      	str	r3, [r7, #24]

    // Zuweisung der globalen Variable
    gHandler = handler;
 80031f4:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <createSensorReceiveHandler+0x44>)
 80031f6:	461c      	mov	r4, r3
 80031f8:	f107 0314 	add.w	r3, r7, #20
 80031fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003200:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    handler.uartProcessor = createUartProcessor(sensor_interface_dictionary);
 8003204:	4808      	ldr	r0, [pc, #32]	; (8003228 <createSensorReceiveHandler+0x48>)
 8003206:	f000 f9a7 	bl	8003558 <createUartProcessor>
 800320a:	61f8      	str	r0, [r7, #28]
    return handler;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	461c      	mov	r4, r3
 8003210:	f107 0314 	add.w	r3, r7, #20
 8003214:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003218:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	3724      	adds	r7, #36	; 0x24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd90      	pop	{r4, r7, pc}
 8003224:	20000368 	.word	0x20000368
 8003228:	2000005c 	.word	0x2000005c

0800322c <handleDiamRecieved>:

// Methoden
void handleDiamRecieved(uint8_t uartNr, const char* value){
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	6039      	str	r1, [r7, #0]
 8003236:	71fb      	strb	r3, [r7, #7]
	uint8_t ext = gHandler.sensorExtruder->getUartPort(gHandler.sensorExtruder);
 8003238:	4b29      	ldr	r3, [pc, #164]	; (80032e0 <handleDiamRecieved+0xb4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	4a28      	ldr	r2, [pc, #160]	; (80032e0 <handleDiamRecieved+0xb4>)
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	4610      	mov	r0, r2
 8003244:	4798      	blx	r3
 8003246:	4603      	mov	r3, r0
 8003248:	77fb      	strb	r3, [r7, #31]
	uint8_t back = gHandler.sensorBack->getUartPort(gHandler.sensorBack);
 800324a:	4b25      	ldr	r3, [pc, #148]	; (80032e0 <handleDiamRecieved+0xb4>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	4a23      	ldr	r2, [pc, #140]	; (80032e0 <handleDiamRecieved+0xb4>)
 8003252:	6852      	ldr	r2, [r2, #4]
 8003254:	4610      	mov	r0, r2
 8003256:	4798      	blx	r3
 8003258:	4603      	mov	r3, r0
 800325a:	77bb      	strb	r3, [r7, #30]
	if(ext == uartNr){
 800325c:	7ffa      	ldrb	r2, [r7, #31]
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	429a      	cmp	r2, r3
 8003262:	d10e      	bne.n	8003282 <handleDiamRecieved+0x56>
		float diam = getFloatFromMessage(value);
 8003264:	6838      	ldr	r0, [r7, #0]
 8003266:	f000 f83d 	bl	80032e4 <getFloatFromMessage>
 800326a:	ed87 0a05 	vstr	s0, [r7, #20]
		gHandler.sensorExtruder->setDiameter(gHandler.sensorExtruder,diam);
 800326e:	4b1c      	ldr	r3, [pc, #112]	; (80032e0 <handleDiamRecieved+0xb4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	4a1a      	ldr	r2, [pc, #104]	; (80032e0 <handleDiamRecieved+0xb4>)
 8003276:	6812      	ldr	r2, [r2, #0]
 8003278:	ed97 0a05 	vldr	s0, [r7, #20]
 800327c:	4610      	mov	r0, r2
 800327e:	4798      	blx	r3
 8003280:	e011      	b.n	80032a6 <handleDiamRecieved+0x7a>
	}
	else if(back == uartNr){
 8003282:	7fba      	ldrb	r2, [r7, #30]
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	429a      	cmp	r2, r3
 8003288:	d10d      	bne.n	80032a6 <handleDiamRecieved+0x7a>
		float diam = getFloatFromMessage(value);
 800328a:	6838      	ldr	r0, [r7, #0]
 800328c:	f000 f82a 	bl	80032e4 <getFloatFromMessage>
 8003290:	ed87 0a06 	vstr	s0, [r7, #24]
		gHandler.sensorBack->setDiameter(gHandler.sensorBack,diam);
 8003294:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <handleDiamRecieved+0xb4>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	4a11      	ldr	r2, [pc, #68]	; (80032e0 <handleDiamRecieved+0xb4>)
 800329c:	6852      	ldr	r2, [r2, #4]
 800329e:	ed97 0a06 	vldr	s0, [r7, #24]
 80032a2:	4610      	mov	r0, r2
 80032a4:	4798      	blx	r3
	}
	float extruder  = gHandler.sensorExtruder->getDiameter(gHandler.sensorExtruder);
 80032a6:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <handleDiamRecieved+0xb4>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	4a0c      	ldr	r2, [pc, #48]	; (80032e0 <handleDiamRecieved+0xb4>)
 80032ae:	6812      	ldr	r2, [r2, #0]
 80032b0:	4610      	mov	r0, r2
 80032b2:	4798      	blx	r3
 80032b4:	ed87 0a04 	vstr	s0, [r7, #16]
	float backValue = gHandler.sensorBack->getDiameter(gHandler.sensorBack);
 80032b8:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <handleDiamRecieved+0xb4>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	4a08      	ldr	r2, [pc, #32]	; (80032e0 <handleDiamRecieved+0xb4>)
 80032c0:	6852      	ldr	r2, [r2, #4]
 80032c2:	4610      	mov	r0, r2
 80032c4:	4798      	blx	r3
 80032c6:	ed87 0a03 	vstr	s0, [r7, #12]
	//extruder = 2.0;
	//HMI_updateDisplaySensor(extruder,backValue);
	HMI_updateDisplaySensor(extruder,backValue);
 80032ca:	edd7 0a03 	vldr	s1, [r7, #12]
 80032ce:	ed97 0a04 	vldr	s0, [r7, #16]
 80032d2:	f7ff fa23 	bl	800271c <HMI_updateDisplaySensor>
}
 80032d6:	bf00      	nop
 80032d8:	3720      	adds	r7, #32
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20000368 	.word	0x20000368

080032e4 <getFloatFromMessage>:
float getFloatFromMessage(const char* value) {
 80032e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032e8:	b089      	sub	sp, #36	; 0x24
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
    int length = strlen(value);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7fc ffc6 	bl	8000280 <strlen>
 80032f4:	4603      	mov	r3, r0
 80032f6:	613b      	str	r3, [r7, #16]
    int startIndex = -1;  // Index des ersten Leerzeichens
 80032f8:	f04f 33ff 	mov.w	r3, #4294967295
 80032fc:	61fb      	str	r3, [r7, #28]
    int endIndex = -1;    // Index des zweiten Leerzeichens
 80032fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003302:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < length; i++) {
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	e019      	b.n	800333e <getFloatFromMessage+0x5a>
        if (value[i] == ' ' || value[i] == '\r') {
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	4413      	add	r3, r2
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b20      	cmp	r3, #32
 8003314:	d005      	beq.n	8003322 <getFloatFromMessage+0x3e>
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	4413      	add	r3, r2
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b0d      	cmp	r3, #13
 8003320:	d10a      	bne.n	8003338 <getFloatFromMessage+0x54>
            if (startIndex == -1) {
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003328:	d103      	bne.n	8003332 <getFloatFromMessage+0x4e>
                startIndex = i + 1;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	3301      	adds	r3, #1
 800332e:	61fb      	str	r3, [r7, #28]
 8003330:	e002      	b.n	8003338 <getFloatFromMessage+0x54>
            } else {
                endIndex = i;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	61bb      	str	r3, [r7, #24]
                break;
 8003336:	e006      	b.n	8003346 <getFloatFromMessage+0x62>
    for (int i = 0; i < length; i++) {
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	3301      	adds	r3, #1
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	429a      	cmp	r2, r3
 8003344:	dbe1      	blt.n	800330a <getFloatFromMessage+0x26>
            }
        }
    }
    if (startIndex != -1 && endIndex != -1 && startIndex < endIndex) {
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334c:	d04a      	beq.n	80033e4 <getFloatFromMessage+0x100>
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003354:	d046      	beq.n	80033e4 <getFloatFromMessage+0x100>
 8003356:	69fa      	ldr	r2, [r7, #28]
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	429a      	cmp	r2, r3
 800335c:	da42      	bge.n	80033e4 <getFloatFromMessage+0x100>
 800335e:	466b      	mov	r3, sp
 8003360:	461e      	mov	r6, r3
        char floatStr[endIndex - startIndex + 1];
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	1c59      	adds	r1, r3, #1
 800336a:	1e4b      	subs	r3, r1, #1
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	460a      	mov	r2, r1
 8003370:	2300      	movs	r3, #0
 8003372:	4690      	mov	r8, r2
 8003374:	4699      	mov	r9, r3
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003382:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003386:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800338a:	460a      	mov	r2, r1
 800338c:	2300      	movs	r3, #0
 800338e:	4614      	mov	r4, r2
 8003390:	461d      	mov	r5, r3
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	00eb      	lsls	r3, r5, #3
 800339c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033a0:	00e2      	lsls	r2, r4, #3
 80033a2:	460b      	mov	r3, r1
 80033a4:	3307      	adds	r3, #7
 80033a6:	08db      	lsrs	r3, r3, #3
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	ebad 0d03 	sub.w	sp, sp, r3
 80033ae:	466b      	mov	r3, sp
 80033b0:	3300      	adds	r3, #0
 80033b2:	60bb      	str	r3, [r7, #8]
        strncpy(floatStr, value + startIndex, endIndex - startIndex);
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	18d1      	adds	r1, r2, r3
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	461a      	mov	r2, r3
 80033c2:	68b8      	ldr	r0, [r7, #8]
 80033c4:	f006 ffcd 	bl	800a362 <strncpy>
        floatStr[endIndex - startIndex] = '\0';
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	2100      	movs	r1, #0
 80033d2:	54d1      	strb	r1, [r2, r3]
        return strtof(floatStr, NULL);
 80033d4:	2100      	movs	r1, #0
 80033d6:	68b8      	ldr	r0, [r7, #8]
 80033d8:	f005 ff10 	bl	80091fc <strtof>
 80033dc:	eef0 7a40 	vmov.f32	s15, s0
 80033e0:	46b5      	mov	sp, r6
 80033e2:	e001      	b.n	80033e8 <getFloatFromMessage+0x104>
    }
    return 0.00;
 80033e4:	eddf 7a03 	vldr	s15, [pc, #12]	; 80033f4 <getFloatFromMessage+0x110>
}
 80033e8:	eeb0 0a67 	vmov.f32	s0, s15
 80033ec:	3724      	adds	r7, #36	; 0x24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033f4:	00000000 	.word	0x00000000

080033f8 <processSensorInterfaceMessage>:


void processSensorInterfaceMessage(uint8_t uartNr,SensorReceiveHandler* handler,uint8_t* receivedData, uint8_t receivedDataIndex){
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
 8003402:	461a      	mov	r2, r3
 8003404:	4603      	mov	r3, r0
 8003406:	73fb      	strb	r3, [r7, #15]
 8003408:	4613      	mov	r3, r2
 800340a:	73bb      	strb	r3, [r7, #14]
	processCommand(uartNr, &(handler->uartProcessor), receivedData, receivedDataIndex);
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f103 0108 	add.w	r1, r3, #8
 8003412:	7bbb      	ldrb	r3, [r7, #14]
 8003414:	7bf8      	ldrb	r0, [r7, #15]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	f000 f8dc 	bl	80035d4 <processCommand>
}
 800341c:	bf00      	nop
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <getReceivedData>:


#include <Kommunikation/uart_data.h>

// Getter-Methoden
const uint8_t* getReceivedData(const UartData* uartData) {
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
    return uartData->receivedData;
 800342c:	687b      	ldr	r3, [r7, #4]
}
 800342e:	4618      	mov	r0, r3
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <getDataIndex>:

int getDataIndex(const UartData* uartData) {
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
    return uartData->dataIndex;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003446:	4618      	mov	r0, r3
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <getMessageComplete>:

int getMessageComplete(const UartData* uartData) {
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
    return uartData->messageComplete;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800345e:	4618      	mov	r0, r3
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <setReceivedData>:

// Setter-Methoden
void setReceivedData(UartData* uartData, const uint8_t* receivedData) {
 800346a:	b480      	push	{r7}
 800346c:	b085      	sub	sp, #20
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	6039      	str	r1, [r7, #0]
    // Kopiere die Daten
    for (int i = 0; i < 64; i++) {
 8003474:	2300      	movs	r3, #0
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	e00b      	b.n	8003492 <setReceivedData+0x28>
        uartData->receivedData[i] = receivedData[i];
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	4413      	add	r3, r2
 8003480:	7819      	ldrb	r1, [r3, #0]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4413      	add	r3, r2
 8003488:	460a      	mov	r2, r1
 800348a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 64; i++) {
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	3301      	adds	r3, #1
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2b3f      	cmp	r3, #63	; 0x3f
 8003496:	ddf0      	ble.n	800347a <setReceivedData+0x10>
    }
}
 8003498:	bf00      	nop
 800349a:	bf00      	nop
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <setDataIndex>:

void setDataIndex(UartData* uartData, int dataIndex) {
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	6039      	str	r1, [r7, #0]
    uartData->dataIndex = dataIndex;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <setMessageComplete>:

void setMessageComplete(UartData* uartData, int messageComplete) {
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	6039      	str	r1, [r7, #0]
    uartData->messageComplete = messageComplete;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	645a      	str	r2, [r3, #68]	; 0x44
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
	...

080034e0 <createUartDataObject>:

// Konstruktor
UartDataObject createUartDataObject() {
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b09c      	sub	sp, #112	; 0x70
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
    UartDataObject uartDataObject;
    uartDataObject.getReceivedData = &getReceivedData;
 80034e8:	4b15      	ldr	r3, [pc, #84]	; (8003540 <createUartDataObject+0x60>)
 80034ea:	657b      	str	r3, [r7, #84]	; 0x54
    uartDataObject.getDataIndex = &getDataIndex;
 80034ec:	4b15      	ldr	r3, [pc, #84]	; (8003544 <createUartDataObject+0x64>)
 80034ee:	65bb      	str	r3, [r7, #88]	; 0x58
    uartDataObject.getMessageComplete = &getMessageComplete;
 80034f0:	4b15      	ldr	r3, [pc, #84]	; (8003548 <createUartDataObject+0x68>)
 80034f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    uartDataObject.setReceivedData = &setReceivedData;
 80034f4:	4b15      	ldr	r3, [pc, #84]	; (800354c <createUartDataObject+0x6c>)
 80034f6:	663b      	str	r3, [r7, #96]	; 0x60
    uartDataObject.setDataIndex = &setDataIndex;
 80034f8:	4b15      	ldr	r3, [pc, #84]	; (8003550 <createUartDataObject+0x70>)
 80034fa:	667b      	str	r3, [r7, #100]	; 0x64
    uartDataObject.setMessageComplete = &setMessageComplete;
 80034fc:	4b15      	ldr	r3, [pc, #84]	; (8003554 <createUartDataObject+0x74>)
 80034fe:	66bb      	str	r3, [r7, #104]	; 0x68

    // Initialisiere die Daten
    for (int i = 0; i < 64; i++) {
 8003500:	2300      	movs	r3, #0
 8003502:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003504:	e008      	b.n	8003518 <createUartDataObject+0x38>
        uartDataObject.data.receivedData[i] = 0;
 8003506:	f107 020c 	add.w	r2, r7, #12
 800350a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800350c:	4413      	add	r3, r2
 800350e:	2200      	movs	r2, #0
 8003510:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 64; i++) {
 8003512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003514:	3301      	adds	r3, #1
 8003516:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800351a:	2b3f      	cmp	r3, #63	; 0x3f
 800351c:	ddf3      	ble.n	8003506 <createUartDataObject+0x26>
    }
    uartDataObject.data.dataIndex = 0;
 800351e:	2300      	movs	r3, #0
 8003520:	64fb      	str	r3, [r7, #76]	; 0x4c
    uartDataObject.data.messageComplete = 0;
 8003522:	2300      	movs	r3, #0
 8003524:	653b      	str	r3, [r7, #80]	; 0x50

    return uartDataObject;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4618      	mov	r0, r3
 800352a:	f107 030c 	add.w	r3, r7, #12
 800352e:	2260      	movs	r2, #96	; 0x60
 8003530:	4619      	mov	r1, r3
 8003532:	f006 ffa0 	bl	800a476 <memcpy>
}
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	3770      	adds	r7, #112	; 0x70
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	08003425 	.word	0x08003425
 8003544:	0800343b 	.word	0x0800343b
 8003548:	08003453 	.word	0x08003453
 800354c:	0800346b 	.word	0x0800346b
 8003550:	080034a7 	.word	0x080034a7
 8003554:	080034c3 	.word	0x080034c3

08003558 <createUartProcessor>:
#include <string.h>



// Funktion zur Initialisierung des UART-Prozessors
UartProcessor createUartProcessor(CommandEntry* dictionary) {
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
    UartProcessor uartProcessor;
    uartProcessor.commandDictionary = dictionary;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	60fb      	str	r3, [r7, #12]
    return uartProcessor;
 8003564:	68fb      	ldr	r3, [r7, #12]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <strncasecmp>:

// Case-insensitive String-Vergleich
int strnicmp(const char *s1, const char *s2, size_t n) {
 8003572:	b590      	push	{r4, r7, lr}
 8003574:	b085      	sub	sp, #20
 8003576:	af00      	add	r7, sp, #0
 8003578:	60f8      	str	r0, [r7, #12]
 800357a:	60b9      	str	r1, [r7, #8]
 800357c:	607a      	str	r2, [r7, #4]
    while (*s1 && *s2 && n > 0) {
 800357e:	e019      	b.n	80035b4 <strncasecmp+0x42>
        if (tolower(*s1) != tolower(*s2))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f005 ff2d 	bl	80093e4 <tolower>
 800358a:	4604      	mov	r4, r0
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f005 ff27 	bl	80093e4 <tolower>
 8003596:	4603      	mov	r3, r0
 8003598:	429c      	cmp	r4, r3
 800359a:	d002      	beq.n	80035a2 <strncasecmp+0x30>
            return -1;
 800359c:	f04f 33ff 	mov.w	r3, #4294967295
 80035a0:	e014      	b.n	80035cc <strncasecmp+0x5a>
        s1++;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	3301      	adds	r3, #1
 80035a6:	60fb      	str	r3, [r7, #12]
        s2++;
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	3301      	adds	r3, #1
 80035ac:	60bb      	str	r3, [r7, #8]
        n--;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	607b      	str	r3, [r7, #4]
    while (*s1 && *s2 && n > 0) {
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d006      	beq.n	80035ca <strncasecmp+0x58>
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <strncasecmp+0x58>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1da      	bne.n	8003580 <strncasecmp+0xe>
    }
    return 0;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd90      	pop	{r4, r7, pc}

080035d4 <processCommand>:

void processCommand(uint8_t uartNr, UartProcessor* uartProcessor,uint8_t* receivedData,uint8_t receivedDataIndex) {
 80035d4:	b590      	push	{r4, r7, lr}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
 80035de:	461a      	mov	r2, r3
 80035e0:	4603      	mov	r3, r0
 80035e2:	73fb      	strb	r3, [r7, #15]
 80035e4:	4613      	mov	r3, r2
 80035e6:	73bb      	strb	r3, [r7, #14]
    for (int i = 0; uartProcessor->commandDictionary[i].command != NULL; ++i) {
 80035e8:	2300      	movs	r3, #0
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	e025      	b.n	800363a <processCommand+0x66>
    	if (strnicmp((char*)receivedData, uartProcessor->commandDictionary[i].command, strlen(uartProcessor->commandDictionary[i].command)) == 0) {
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	4413      	add	r3, r2
 80035f8:	681c      	ldr	r4, [r3, #0]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	4413      	add	r3, r2
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7fc fe3a 	bl	8000280 <strlen>
 800360c:	4603      	mov	r3, r0
 800360e:	461a      	mov	r2, r3
 8003610:	4621      	mov	r1, r4
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff ffad 	bl	8003572 <strncasecmp>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10a      	bne.n	8003634 <processCommand+0x60>
            // Rufe den entsprechenden Handler auf
    		uartProcessor->commandDictionary[i].functionPointer(uartNr, (char*)receivedData);
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	4413      	add	r3, r2
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	7bfa      	ldrb	r2, [r7, #15]
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	4610      	mov	r0, r2
 8003630:	4798      	blx	r3
            return;
 8003632:	e00a      	b.n	800364a <processCommand+0x76>
    for (int i = 0; uartProcessor->commandDictionary[i].command != NULL; ++i) {
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	3301      	adds	r3, #1
 8003638:	617b      	str	r3, [r7, #20]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4413      	add	r3, r2
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1d1      	bne.n	80035ee <processCommand+0x1a>
        }
    }
}
 800364a:	371c      	adds	r7, #28
 800364c:	46bd      	mov	sp, r7
 800364e:	bd90      	pop	{r4, r7, pc}

08003650 <changeState>:
 */

#include <Management/global_state_machine.h>

// Change the state of the State Machine
static void changeState(StateMachine *machine, State newState) {
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	70fb      	strb	r3, [r7, #3]
    switch (newState) {
 800365c:	78fb      	ldrb	r3, [r7, #3]
 800365e:	2b02      	cmp	r3, #2
 8003660:	d00f      	beq.n	8003682 <changeState+0x32>
 8003662:	2b02      	cmp	r3, #2
 8003664:	dc0f      	bgt.n	8003686 <changeState+0x36>
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <changeState+0x20>
 800366a:	2b01      	cmp	r3, #1
 800366c:	d00d      	beq.n	800368a <changeState+0x3a>
        case STATE_AUTOMATIC_MODE:
            // TODO: Logik für Regelung implementieren
            break;
        default:
            // Handle unknown state
            break;
 800366e:	e00a      	b.n	8003686 <changeState+0x36>
            machine->info.motor->setSpeed(machine->info.motor, 0);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6852      	ldr	r2, [r2, #4]
 800367a:	2100      	movs	r1, #0
 800367c:	4610      	mov	r0, r2
 800367e:	4798      	blx	r3
            break;
 8003680:	e004      	b.n	800368c <changeState+0x3c>
            break;
 8003682:	bf00      	nop
 8003684:	e002      	b.n	800368c <changeState+0x3c>
            break;
 8003686:	bf00      	nop
 8003688:	e000      	b.n	800368c <changeState+0x3c>
            break;
 800368a:	bf00      	nop
    }
    machine->info.currentState = newState;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	78fa      	ldrb	r2, [r7, #3]
 8003690:	701a      	strb	r2, [r3, #0]
}
 8003692:	bf00      	nop
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <getState>:
// Get the current state of the State Machine
static State getState(const StateMachine *machine) {
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
    return machine->info.currentState;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	781b      	ldrb	r3, [r3, #0]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <setBlobDetected>:
void setBlobDetected(struct StateMachine *machine, int blobDetected){
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	6039      	str	r1, [r7, #0]
	machine->info.blobDetected = blobDetected;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	609a      	str	r2, [r3, #8]
	if(blobDetected == 1){
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d102      	bne.n	80036ce <setBlobDetected+0x1c>
		machine->info.currentState = STATE_IDLE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	701a      	strb	r2, [r3, #0]
	}
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <getBlobDetected>:
static int getBlobDetected(const struct StateMachine *machine){
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
	return machine->info.blobDetected;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
	...

080036f4 <initStateMachine>:



// Initialization function for the State Machine
StateMachine initStateMachine(Motor* motor) {
 80036f4:	b4b0      	push	{r4, r5, r7}
 80036f6:	b08b      	sub	sp, #44	; 0x2c
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
    StateMachine machine;

    machine.info.motor = motor;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	60fb      	str	r3, [r7, #12]

    machine.changeState = changeState;
 8003702:	4b0d      	ldr	r3, [pc, #52]	; (8003738 <initStateMachine+0x44>)
 8003704:	61bb      	str	r3, [r7, #24]
    machine.getState = getState;
 8003706:	4b0d      	ldr	r3, [pc, #52]	; (800373c <initStateMachine+0x48>)
 8003708:	61fb      	str	r3, [r7, #28]
    machine.setBlobDetected = setBlobDetected;
 800370a:	4b0d      	ldr	r3, [pc, #52]	; (8003740 <initStateMachine+0x4c>)
 800370c:	627b      	str	r3, [r7, #36]	; 0x24
    machine.getBlobDetected = getBlobDetected;
 800370e:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <initStateMachine+0x50>)
 8003710:	623b      	str	r3, [r7, #32]

    // Set initial state and initialize motor
    machine.info.currentState = STATE_IDLE;
 8003712:	2300      	movs	r3, #0
 8003714:	723b      	strb	r3, [r7, #8]
    machine.info.blobDetected = 0;
 8003716:	2300      	movs	r3, #0
 8003718:	613b      	str	r3, [r7, #16]


    return machine;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	461d      	mov	r5, r3
 800371e:	f107 0408 	add.w	r4, r7, #8
 8003722:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003724:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003726:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800372a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	372c      	adds	r7, #44	; 0x2c
 8003732:	46bd      	mov	sp, r7
 8003734:	bcb0      	pop	{r4, r5, r7}
 8003736:	4770      	bx	lr
 8003738:	08003651 	.word	0x08003651
 800373c:	0800369b 	.word	0x0800369b
 8003740:	080036b3 	.word	0x080036b3
 8003744:	080036db 	.word	0x080036db

08003748 <set_kp>:
 *  Created on: Jan 3, 2024
 *      Author: Daniel Alf
 */
#include "Regelung/pid_controller.h"

void set_kp(PIDController *pid, float kp) {
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	ed87 0a00 	vstr	s0, [r7]
    pid->data.kp = kp;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	601a      	str	r2, [r3, #0]
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <get_kp>:

float get_kp(const PIDController *pid) {
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
    return pid->data.kp;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	ee07 3a90 	vmov	s15, r3
}
 8003776:	eeb0 0a67 	vmov.f32	s0, s15
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <set_ki>:

void set_ki(PIDController *pid, float ki) {
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	ed87 0a00 	vstr	s0, [r7]
	pid->data.ki = ki;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	605a      	str	r2, [r3, #4]
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <get_ki>:

float get_ki(const PIDController *pid) {
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
    return pid->data.ki;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	ee07 3a90 	vmov	s15, r3
}
 80037b2:	eeb0 0a67 	vmov.f32	s0, s15
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <set_kd>:

void set_kd(PIDController *pid, float kd) {
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	ed87 0a00 	vstr	s0, [r7]
	pid->data.kd = kd;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	609a      	str	r2, [r3, #8]
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <get_kd>:

float get_kd(const PIDController *pid) {
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
    return pid->data.kd;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	ee07 3a90 	vmov	s15, r3
}
 80037ee:	eeb0 0a67 	vmov.f32	s0, s15
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <set_setPoint>:
void set_setPoint(PIDController *pid, float setPoint) {
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	ed87 0a00 	vstr	s0, [r7]
	pid->data.setpoint = setPoint;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	60da      	str	r2, [r3, #12]
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <get_setPoint>:

float get_setPoint(const PIDController *pid) {
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
    return pid->data.setpoint;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	ee07 3a90 	vmov	s15, r3
}
 800382a:	eeb0 0a67 	vmov.f32	s0, s15
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <pid_init>:

PIDController pid_init(float kp, float ki, float kd, float setpoint) {
 8003838:	b4b0      	push	{r4, r5, r7}
 800383a:	b097      	sub	sp, #92	; 0x5c
 800383c:	af00      	add	r7, sp, #0
 800383e:	6178      	str	r0, [r7, #20]
 8003840:	ed87 0a04 	vstr	s0, [r7, #16]
 8003844:	edc7 0a03 	vstr	s1, [r7, #12]
 8003848:	ed87 1a02 	vstr	s2, [r7, #8]
 800384c:	edc7 1a01 	vstr	s3, [r7, #4]
    PIDController pidController;
    pidController.data.kp = kp;
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	61fb      	str	r3, [r7, #28]
    pidController.data.ki = ki;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	623b      	str	r3, [r7, #32]
    pidController.data.kd = kd;
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
    pidController.data.setpoint = 0.0;
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	62bb      	str	r3, [r7, #40]	; 0x28
    pidController.data.last_error = 0.0;
 8003862:	f04f 0300 	mov.w	r3, #0
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c
    pidController.data.integral = 0.0;
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	633b      	str	r3, [r7, #48]	; 0x30
    pidController.data.setpoint = setpoint;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	62bb      	str	r3, [r7, #40]	; 0x28

    //Initialisierung der getter FUnktionen
    pidController.get_kp = get_kp;
 8003872:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <pid_init+0x80>)
 8003874:	637b      	str	r3, [r7, #52]	; 0x34
    pidController.get_ki = get_ki;
 8003876:	4b11      	ldr	r3, [pc, #68]	; (80038bc <pid_init+0x84>)
 8003878:	63bb      	str	r3, [r7, #56]	; 0x38
    pidController.get_kd = get_kd;
 800387a:	4b11      	ldr	r3, [pc, #68]	; (80038c0 <pid_init+0x88>)
 800387c:	63fb      	str	r3, [r7, #60]	; 0x3c
    pidController.get_setPoint = get_setPoint;
 800387e:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <pid_init+0x8c>)
 8003880:	643b      	str	r3, [r7, #64]	; 0x40

    //Initialisierung der setter Funktionen
    pidController.set_kp = set_kp;
 8003882:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <pid_init+0x90>)
 8003884:	647b      	str	r3, [r7, #68]	; 0x44
    pidController.set_ki = set_ki;
 8003886:	4b11      	ldr	r3, [pc, #68]	; (80038cc <pid_init+0x94>)
 8003888:	64bb      	str	r3, [r7, #72]	; 0x48
    pidController.set_kd = set_kd;
 800388a:	4b11      	ldr	r3, [pc, #68]	; (80038d0 <pid_init+0x98>)
 800388c:	64fb      	str	r3, [r7, #76]	; 0x4c
    pidController.set_setPoint = set_setPoint;
 800388e:	4b11      	ldr	r3, [pc, #68]	; (80038d4 <pid_init+0x9c>)
 8003890:	653b      	str	r3, [r7, #80]	; 0x50

    return pidController;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	461d      	mov	r5, r3
 8003896:	f107 041c 	add.w	r4, r7, #28
 800389a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800389c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800389e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038a6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80038aa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80038ae:	6978      	ldr	r0, [r7, #20]
 80038b0:	375c      	adds	r7, #92	; 0x5c
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bcb0      	pop	{r4, r5, r7}
 80038b6:	4770      	bx	lr
 80038b8:	08003767 	.word	0x08003767
 80038bc:	080037a3 	.word	0x080037a3
 80038c0:	080037df 	.word	0x080037df
 80038c4:	0800381b 	.word	0x0800381b
 80038c8:	08003749 	.word	0x08003749
 80038cc:	08003785 	.word	0x08003785
 80038d0:	080037c1 	.word	0x080037c1
 80038d4:	080037fd 	.word	0x080037fd

080038d8 <getSpeed>:
 */

#include <SensorActuators/motor.h>
#include "stm32f4xx_hal.h"
// Implementierung der Getter-Methode für die Geschwindigkeit des Motors
int getSpeed(const Motor *motor) {
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
    return motor->info.speed;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <setSpeed>:

// Implementierung der Setter-Methode für die Geschwindigkeit des Motors
void setSpeed(Motor *motor, int speed) {
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
	if(speed <= 0){
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	dc09      	bgt.n	8003914 <setSpeed+0x24>
		HAL_TIM_PWM_Stop(motor->info.timer, 0);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2100      	movs	r1, #0
 8003906:	4618      	mov	r0, r3
 8003908:	f003 f870 	bl	80069ec <HAL_TIM_PWM_Stop>
	    motor->info.speed = 0;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
		return;
 8003912:	e01e      	b.n	8003952 <setSpeed+0x62>
	}

	if(speed > 100){
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	2b64      	cmp	r3, #100	; 0x64
 8003918:	dc1a      	bgt.n	8003950 <setSpeed+0x60>
		return;
	}
    motor->info.speed = speed;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	601a      	str	r2, [r3, #0]
	  // Geschwindigkeit in Frequenz umrechnen
	int frequency = (speed * 3200) / 60;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8003926:	fb02 f303 	mul.w	r3, r2, r3
 800392a:	4a0b      	ldr	r2, [pc, #44]	; (8003958 <setSpeed+0x68>)
 800392c:	fb82 1203 	smull	r1, r2, r2, r3
 8003930:	441a      	add	r2, r3
 8003932:	1152      	asrs	r2, r2, #5
 8003934:	17db      	asrs	r3, r3, #31
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	60fb      	str	r3, [r7, #12]

	      // PWM-Signal generieren
	generatePWM(motor,frequency);
 800393a:	68f9      	ldr	r1, [r7, #12]
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f80d 	bl	800395c <generatePWM>
	HAL_TIM_PWM_Start(motor->info.timer, 0);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2100      	movs	r1, #0
 8003948:	4618      	mov	r0, r3
 800394a:	f002 ff9f 	bl	800688c <HAL_TIM_PWM_Start>
 800394e:	e000      	b.n	8003952 <setSpeed+0x62>
		return;
 8003950:	bf00      	nop

}
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	88888889 	.word	0x88888889

0800395c <generatePWM>:

void generatePWM(Motor *motor, int frequency) {
 800395c:	b580      	push	{r7, lr}
 800395e:	b090      	sub	sp, #64	; 0x40
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
	  uint32_t period = (HAL_RCC_GetHCLKFreq() / ((motor->info.timer->Init.Prescaler + 1)* frequency)) - 1;
 8003966:	f002 f90d 	bl	8005b84 <HAL_RCC_GetHCLKFreq>
 800396a:	4601      	mov	r1, r0
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	3301      	adds	r3, #1
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	fb02 f303 	mul.w	r3, r2, r3
 800397a:	fbb1 f3f3 	udiv	r3, r1, r3
 800397e:	3b01      	subs	r3, #1
 8003980:	63fb      	str	r3, [r7, #60]	; 0x3c

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003982:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	605a      	str	r2, [r3, #4]
 800398c:	609a      	str	r2, [r3, #8]
 800398e:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 800399a:	f107 0308 	add.w	r3, r7, #8
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	605a      	str	r2, [r3, #4]
 80039a4:	609a      	str	r2, [r3, #8]
 80039a6:	60da      	str	r2, [r3, #12]
 80039a8:	611a      	str	r2, [r3, #16]
 80039aa:	615a      	str	r2, [r3, #20]
 80039ac:	619a      	str	r2, [r3, #24]

	  motor->info.timer->Init.Period = period; //26250-1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039b4:	60da      	str	r2, [r3, #12]
	  HAL_TIM_Base_Init(motor->info.timer);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f002 febe 	bl	800673c <HAL_TIM_Base_Init>
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  HAL_TIM_ConfigClockSource(motor->info.timer, &sClockSourceConfig);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80039ce:	4611      	mov	r1, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f003 f931 	bl	8006c38 <HAL_TIM_ConfigClockSource>
	  HAL_TIM_PWM_Init(motor->info.timer);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	4618      	mov	r0, r3
 80039dc:	f002 fefd 	bl	80067da <HAL_TIM_PWM_Init>
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039e0:	2300      	movs	r3, #0
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039e4:	2300      	movs	r3, #0
 80039e6:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_TIMEx_MasterConfigSynchronization(motor->info.timer, &sMasterConfig);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80039f0:	4611      	mov	r1, r2
 80039f2:	4618      	mov	r0, r3
 80039f4:	f003 fcb4 	bl	8007360 <HAL_TIMEx_MasterConfigSynchronization>
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039f8:	2360      	movs	r3, #96	; 0x60
 80039fa:	60bb      	str	r3, [r7, #8]
	  sConfigOC.Pulse = motor->info.timer->Init.Period / 2; //13125-1
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	085b      	lsrs	r3, r3, #1
 8003a04:	60fb      	str	r3, [r7, #12]
	  HAL_TIM_PWM_ConfigChannel(motor->info.timer, &sConfigOC, TIM_CHANNEL_1);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f107 0108 	add.w	r1, r7, #8
 8003a0e:	2200      	movs	r2, #0
 8003a10:	4618      	mov	r0, r3
 8003a12:	f003 f84f 	bl	8006ab4 <HAL_TIM_PWM_ConfigChannel>
	  HAL_TIM_MspPostInit(motor->info.timer);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fe08 	bl	8004630 <HAL_TIM_MspPostInit>


}
 8003a20:	bf00      	nop
 8003a22:	3740      	adds	r7, #64	; 0x40
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <initMotor>:

// Implementierung des Konstruktors für den Motor
Motor initMotor(TIM_HandleTypeDef *timer) {
 8003a28:	b490      	push	{r4, r7}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
    Motor newMotor;
    newMotor.info.speed = 0;
 8003a32:	2300      	movs	r3, #0
 8003a34:	60bb      	str	r3, [r7, #8]
    newMotor.info.timer = timer;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	60fb      	str	r3, [r7, #12]
    newMotor.getSpeed = &getSpeed;
 8003a3a:	4b08      	ldr	r3, [pc, #32]	; (8003a5c <initMotor+0x34>)
 8003a3c:	613b      	str	r3, [r7, #16]
    newMotor.setSpeed = &setSpeed;
 8003a3e:	4b08      	ldr	r3, [pc, #32]	; (8003a60 <initMotor+0x38>)
 8003a40:	617b      	str	r3, [r7, #20]
    return newMotor;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	461c      	mov	r4, r3
 8003a46:	f107 0308 	add.w	r3, r7, #8
 8003a4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc90      	pop	{r4, r7}
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	080038d9 	.word	0x080038d9
 8003a60:	080038f1 	.word	0x080038f1

08003a64 <getDiameter>:
#include <stdlib.h>
#include <stdint.h>
#include <SensorActuators/sensor.h>

// Getter-Methoden
float getDiameter(const Sensor* sensor) {
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
    return sensor->info.diameter;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	ee07 3a90 	vmov	s15, r3
}
 8003a74:	eeb0 0a67 	vmov.f32	s0, s15
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <getUartPort>:
char getPosition(const Sensor* sensor) {
	return sensor->info.position;
}
uint8_t getUartPort(const Sensor* sensor) {
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
	return sensor->info.uartPort;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	795b      	ldrb	r3, [r3, #5]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <setDiameter>:

// Setter-Methoden
void setDiameter(Sensor* sensor, float diameter) {
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	ed87 0a00 	vstr	s0, [r7]
    sensor->info.diameter = diameter;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	601a      	str	r2, [r3, #0]
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <initSensor>:
}
void setUartPort(Sensor* sensor, uint8_t port){
	sensor->info.uartPort = port;
}
// Konstruktor
Sensor initSensor(float diameter, uint8_t port) {
 8003ab8:	b4b0      	push	{r4, r5, r7}
 8003aba:	b08d      	sub	sp, #52	; 0x34
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	71fb      	strb	r3, [r7, #7]
    Sensor sensor;
    sensor.info.diameter = diameter;
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	613b      	str	r3, [r7, #16]
    sensor.info.uartPort = port;
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	757b      	strb	r3, [r7, #21]

    // Initialisiere die Getter-Funktionen
    sensor.getDiameter = getDiameter;
 8003ad0:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <initSensor+0x44>)
 8003ad2:	61bb      	str	r3, [r7, #24]
    sensor.getUartPort = getUartPort;
 8003ad4:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <initSensor+0x48>)
 8003ad6:	623b      	str	r3, [r7, #32]

    // Initialisiere die Setter-Funktionen
    sensor.setDiameter = setDiameter;
 8003ad8:	4b0a      	ldr	r3, [pc, #40]	; (8003b04 <initSensor+0x4c>)
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24

    return sensor;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	461d      	mov	r5, r3
 8003ae0:	f107 0410 	add.w	r4, r7, #16
 8003ae4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ae6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ae8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003aec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	3734      	adds	r7, #52	; 0x34
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bcb0      	pop	{r4, r5, r7}
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	08003a65 	.word	0x08003a65
 8003b00:	08003a83 	.word	0x08003a83
 8003b04:	08003a9b 	.word	0x08003a9b

08003b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b08:	b5b0      	push	{r4, r5, r7, lr}
 8003b0a:	b09c      	sub	sp, #112	; 0x70
 8003b0c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b0e:	f000 fffd 	bl	8004b0c <HAL_Init>

  /* USER CODE BEGIN Init */
  sensorExtruder = initSensor(1.57, 1);
 8003b12:	4ca4      	ldr	r4, [pc, #656]	; (8003da4 <main+0x29c>)
 8003b14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b18:	2101      	movs	r1, #1
 8003b1a:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 8003da8 <main+0x2a0>
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff ffca 	bl	8003ab8 <initSensor>
 8003b24:	4625      	mov	r5, r4
 8003b26:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b2e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003b32:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  sensorBack 	 = initSensor(2.56, 6);
 8003b36:	4c9d      	ldr	r4, [pc, #628]	; (8003dac <main+0x2a4>)
 8003b38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b3c:	2106      	movs	r1, #6
 8003b3e:	ed9f 0a9c 	vldr	s0, [pc, #624]	; 8003db0 <main+0x2a8>
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff ffb8 	bl	8003ab8 <initSensor>
 8003b48:	4625      	mov	r5, r4
 8003b4a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003b4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b52:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003b56:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  motor 		 = initMotor(&htim1);
 8003b5a:	4c96      	ldr	r4, [pc, #600]	; (8003db4 <main+0x2ac>)
 8003b5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b60:	4995      	ldr	r1, [pc, #596]	; (8003db8 <main+0x2b0>)
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff ff60 	bl	8003a28 <initMotor>
 8003b68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b72:	f000 f949 	bl	8003e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b76:	f000 fb3d 	bl	80041f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003b7a:	f000 fae7 	bl	800414c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8003b7e:	f000 fabb 	bl	80040f8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8003b82:	f000 fb0d 	bl	80041a0 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8003b86:	f000 fa15 	bl	8003fb4 <MX_TIM1_Init>
  MX_SPI1_Init();
 8003b8a:	f000 f9a7 	bl	8003edc <MX_SPI1_Init>
  MX_SPI2_Init();
 8003b8e:	f000 f9db 	bl	8003f48 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init(&hspi1, LCD_CS_GPIO_Port, LCD_CS_Pin, LCD_DC_GPIO_Port, LCD_DC_Pin, LCD_RST_GPIO_Port, LCD_RST_Pin);
 8003b92:	2380      	movs	r3, #128	; 0x80
 8003b94:	9302      	str	r3, [sp, #8]
 8003b96:	4b89      	ldr	r3, [pc, #548]	; (8003dbc <main+0x2b4>)
 8003b98:	9301      	str	r3, [sp, #4]
 8003b9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	4b87      	ldr	r3, [pc, #540]	; (8003dc0 <main+0x2b8>)
 8003ba2:	2240      	movs	r2, #64	; 0x40
 8003ba4:	4987      	ldr	r1, [pc, #540]	; (8003dc4 <main+0x2bc>)
 8003ba6:	4888      	ldr	r0, [pc, #544]	; (8003dc8 <main+0x2c0>)
 8003ba8:	f7fd fade 	bl	8001168 <ILI9341_Init>
  ILI9341_setRotation(2);
 8003bac:	2002      	movs	r0, #2
 8003bae:	f7fd ff67 	bl	8001a80 <ILI9341_setRotation>
  ILI9341_Fill(COLOR_NAVY);
 8003bb2:	200f      	movs	r0, #15
 8003bb4:	f7fd fbb8 	bl	8001328 <ILI9341_Fill>
  TSC2046_Begin(&hspi2, TS_CS_GPIO_Port, TS_CS_Pin);
 8003bb8:	2220      	movs	r2, #32
 8003bba:	4982      	ldr	r1, [pc, #520]	; (8003dc4 <main+0x2bc>)
 8003bbc:	4883      	ldr	r0, [pc, #524]	; (8003dcc <main+0x2c4>)
 8003bbe:	f7fe f9ab 	bl	8001f18 <TSC2046_Begin>



  HAL_TIM_PWM_Start(&htim1, 0);
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	487c      	ldr	r0, [pc, #496]	; (8003db8 <main+0x2b0>)
 8003bc6:	f002 fe61 	bl	800688c <HAL_TIM_PWM_Start>
  stateMachine = initStateMachine(&motor);
 8003bca:	4c81      	ldr	r4, [pc, #516]	; (8003dd0 <main+0x2c8>)
 8003bcc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003bd0:	4978      	ldr	r1, [pc, #480]	; (8003db4 <main+0x2ac>)
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff fd8e 	bl	80036f4 <initStateMachine>
 8003bd8:	4625      	mov	r5, r4
 8003bda:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003be0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003be2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003be6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  pidController = pid_init(1.0, 0.0,0.0, 1.75);
 8003bea:	4c7a      	ldr	r4, [pc, #488]	; (8003dd4 <main+0x2cc>)
 8003bec:	463b      	mov	r3, r7
 8003bee:	eef7 1a0c 	vmov.f32	s3, #124	; 0x3fe00000  1.750
 8003bf2:	ed9f 1a79 	vldr	s2, [pc, #484]	; 8003dd8 <main+0x2d0>
 8003bf6:	eddf 0a78 	vldr	s1, [pc, #480]	; 8003dd8 <main+0x2d0>
 8003bfa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fe1a 	bl	8003838 <pid_init>
 8003c04:	4625      	mov	r5, r4
 8003c06:	463c      	mov	r4, r7
 8003c08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c14:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003c18:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  uartDataPc 		     = createUartDataObject();
 8003c1c:	4c6f      	ldr	r4, [pc, #444]	; (8003ddc <main+0x2d4>)
 8003c1e:	463b      	mov	r3, r7
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff fc5d 	bl	80034e0 <createUartDataObject>
 8003c26:	4620      	mov	r0, r4
 8003c28:	463b      	mov	r3, r7
 8003c2a:	2260      	movs	r2, #96	; 0x60
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	f006 fc22 	bl	800a476 <memcpy>
  uartDataSensorExtruder = createUartDataObject();
 8003c32:	4c6b      	ldr	r4, [pc, #428]	; (8003de0 <main+0x2d8>)
 8003c34:	463b      	mov	r3, r7
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff fc52 	bl	80034e0 <createUartDataObject>
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	463b      	mov	r3, r7
 8003c40:	2260      	movs	r2, #96	; 0x60
 8003c42:	4619      	mov	r1, r3
 8003c44:	f006 fc17 	bl	800a476 <memcpy>
  uartDataSensorBack	 = createUartDataObject();
 8003c48:	4c66      	ldr	r4, [pc, #408]	; (8003de4 <main+0x2dc>)
 8003c4a:	463b      	mov	r3, r7
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff fc47 	bl	80034e0 <createUartDataObject>
 8003c52:	4620      	mov	r0, r4
 8003c54:	463b      	mov	r3, r7
 8003c56:	2260      	movs	r2, #96	; 0x60
 8003c58:	4619      	mov	r1, r3
 8003c5a:	f006 fc0c 	bl	800a476 <memcpy>
  pcSender 		= createPcSendHandler(10);
 8003c5e:	4c62      	ldr	r4, [pc, #392]	; (8003de8 <main+0x2e0>)
 8003c60:	463b      	mov	r3, r7
 8003c62:	210a      	movs	r1, #10
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff fa89 	bl	800317c <createPcSendHandler>
 8003c6a:	4625      	mov	r5, r4
 8003c6c:	463c      	mov	r4, r7
 8003c6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c72:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003c76:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  pcReciever 	= createPcReceiveHandler(&stateMachine,&pidController, &motor, &pcSender, &huart2);
 8003c7a:	4c5c      	ldr	r4, [pc, #368]	; (8003dec <main+0x2e4>)
 8003c7c:	4638      	mov	r0, r7
 8003c7e:	4b5c      	ldr	r3, [pc, #368]	; (8003df0 <main+0x2e8>)
 8003c80:	9301      	str	r3, [sp, #4]
 8003c82:	4b59      	ldr	r3, [pc, #356]	; (8003de8 <main+0x2e0>)
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	4b4b      	ldr	r3, [pc, #300]	; (8003db4 <main+0x2ac>)
 8003c88:	4a52      	ldr	r2, [pc, #328]	; (8003dd4 <main+0x2cc>)
 8003c8a:	4951      	ldr	r1, [pc, #324]	; (8003dd0 <main+0x2c8>)
 8003c8c:	f7fe fdba 	bl	8002804 <createPcReceiveHandler>
 8003c90:	4625      	mov	r5, r4
 8003c92:	463c      	mov	r4, r7
 8003c94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c9c:	e885 0003 	stmia.w	r5, {r0, r1}
  sensorReciever = createSensorReceiveHandler(&sensorExtruder, &sensorBack);
 8003ca0:	4c54      	ldr	r4, [pc, #336]	; (8003df4 <main+0x2ec>)
 8003ca2:	463b      	mov	r3, r7
 8003ca4:	4a41      	ldr	r2, [pc, #260]	; (8003dac <main+0x2a4>)
 8003ca6:	493f      	ldr	r1, [pc, #252]	; (8003da4 <main+0x29c>)
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff fa99 	bl	80031e0 <createSensorReceiveHandler>
 8003cae:	463b      	mov	r3, r7
 8003cb0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003cb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HAL_UART_Receive_IT(&huart1, (uint8_t *)uartDataSensorExtruder.data.receivedData, 1);
 8003cb8:	2201      	movs	r2, #1
 8003cba:	4949      	ldr	r1, [pc, #292]	; (8003de0 <main+0x2d8>)
 8003cbc:	484e      	ldr	r0, [pc, #312]	; (8003df8 <main+0x2f0>)
 8003cbe:	f003 fcee 	bl	800769e <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, (uint8_t *)uartDataSensorBack.data.receivedData, 1);
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	4947      	ldr	r1, [pc, #284]	; (8003de4 <main+0x2dc>)
 8003cc6:	484d      	ldr	r0, [pc, #308]	; (8003dfc <main+0x2f4>)
 8003cc8:	f003 fce9 	bl	800769e <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *)uartDataPc.data.receivedData, 1);
 8003ccc:	2201      	movs	r2, #1
 8003cce:	4943      	ldr	r1, [pc, #268]	; (8003ddc <main+0x2d4>)
 8003cd0:	4847      	ldr	r0, [pc, #284]	; (8003df0 <main+0x2e8>)
 8003cd2:	f003 fce4 	bl	800769e <HAL_UART_Receive_IT>

  hmi = HMI_init(&stateMachine, &sensorExtruder, &sensorBack, &pidController);
 8003cd6:	4c4a      	ldr	r4, [pc, #296]	; (8003e00 <main+0x2f8>)
 8003cd8:	4638      	mov	r0, r7
 8003cda:	4b3e      	ldr	r3, [pc, #248]	; (8003dd4 <main+0x2cc>)
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	4b33      	ldr	r3, [pc, #204]	; (8003dac <main+0x2a4>)
 8003ce0:	4a30      	ldr	r2, [pc, #192]	; (8003da4 <main+0x29c>)
 8003ce2:	493b      	ldr	r1, [pc, #236]	; (8003dd0 <main+0x2c8>)
 8003ce4:	f7fe fa2c 	bl	8002140 <HMI_init>
 8003ce8:	463b      	mov	r3, r7
 8003cea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003cee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  myTS_Handle = TSC2046_GetTouchData();
 8003cf2:	4c44      	ldr	r4, [pc, #272]	; (8003e04 <main+0x2fc>)
 8003cf4:	463b      	mov	r3, r7
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fe f9b6 	bl	8002068 <TSC2046_GetTouchData>
 8003cfc:	4622      	mov	r2, r4
 8003cfe:	463b      	mov	r3, r7
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	6010      	str	r0, [r2, #0]
 8003d04:	889b      	ldrh	r3, [r3, #4]
 8003d06:	8093      	strh	r3, [r2, #4]
	  HMI_getTouch(&hmi, myTS_Handle, &stateMachine, &pidController);
 8003d08:	4a3e      	ldr	r2, [pc, #248]	; (8003e04 <main+0x2fc>)
 8003d0a:	4b32      	ldr	r3, [pc, #200]	; (8003dd4 <main+0x2cc>)
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	4b30      	ldr	r3, [pc, #192]	; (8003dd0 <main+0x2c8>)
 8003d10:	ca06      	ldmia	r2, {r1, r2}
 8003d12:	483b      	ldr	r0, [pc, #236]	; (8003e00 <main+0x2f8>)
 8003d14:	f7fe fadc 	bl	80022d0 <HMI_getTouch>


	  if(uartDataPc.data.messageComplete){
 8003d18:	4b30      	ldr	r3, [pc, #192]	; (8003ddc <main+0x2d4>)
 8003d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d012      	beq.n	8003d46 <main+0x23e>
		processPcInterfaceMessage(&pcReciever, uartDataPc.data.receivedData, uartDataPc.data.dataIndex);
 8003d20:	4b2e      	ldr	r3, [pc, #184]	; (8003ddc <main+0x2d4>)
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	461a      	mov	r2, r3
 8003d28:	492c      	ldr	r1, [pc, #176]	; (8003ddc <main+0x2d4>)
 8003d2a:	4830      	ldr	r0, [pc, #192]	; (8003dec <main+0x2e4>)
 8003d2c:	f7fe fed4 	bl	8002ad8 <processPcInterfaceMessage>
		// Zurücksetzen für die nächste Nachricht
		uartDataPc.data.messageComplete = 0;
 8003d30:	4b2a      	ldr	r3, [pc, #168]	; (8003ddc <main+0x2d4>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	645a      	str	r2, [r3, #68]	; 0x44
		uartDataPc.data.dataIndex = 0;
 8003d36:	4b29      	ldr	r3, [pc, #164]	; (8003ddc <main+0x2d4>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_UART_Receive_IT(&huart2, (uint8_t *)uartDataPc.data.receivedData, 1);
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	4927      	ldr	r1, [pc, #156]	; (8003ddc <main+0x2d4>)
 8003d40:	482b      	ldr	r0, [pc, #172]	; (8003df0 <main+0x2e8>)
 8003d42:	f003 fcac 	bl	800769e <HAL_UART_Receive_IT>

	  }
	  if(uartDataSensorExtruder.data.messageComplete){
 8003d46:	4b26      	ldr	r3, [pc, #152]	; (8003de0 <main+0x2d8>)
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d012      	beq.n	8003d74 <main+0x26c>
		processSensorInterfaceMessage(1,&sensorReciever, uartDataSensorExtruder.data.receivedData, uartDataSensorExtruder.data.dataIndex);
 8003d4e:	4b24      	ldr	r3, [pc, #144]	; (8003de0 <main+0x2d8>)
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	4a22      	ldr	r2, [pc, #136]	; (8003de0 <main+0x2d8>)
 8003d56:	4927      	ldr	r1, [pc, #156]	; (8003df4 <main+0x2ec>)
 8003d58:	2001      	movs	r0, #1
 8003d5a:	f7ff fb4d 	bl	80033f8 <processSensorInterfaceMessage>
		// Zurücksetzen für die nächste Nachricht
		uartDataSensorExtruder.data.messageComplete = 0;
 8003d5e:	4b20      	ldr	r3, [pc, #128]	; (8003de0 <main+0x2d8>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	645a      	str	r2, [r3, #68]	; 0x44
		uartDataSensorExtruder.data.dataIndex = 0;
 8003d64:	4b1e      	ldr	r3, [pc, #120]	; (8003de0 <main+0x2d8>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_UART_Receive_IT(&huart1, (uint8_t *)uartDataSensorExtruder.data.receivedData, 1);
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	491c      	ldr	r1, [pc, #112]	; (8003de0 <main+0x2d8>)
 8003d6e:	4822      	ldr	r0, [pc, #136]	; (8003df8 <main+0x2f0>)
 8003d70:	f003 fc95 	bl	800769e <HAL_UART_Receive_IT>
	  }
	  if(uartDataSensorBack.data.messageComplete){
 8003d74:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <main+0x2dc>)
 8003d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0ba      	beq.n	8003cf2 <main+0x1ea>
		processSensorInterfaceMessage(6,&sensorReciever, uartDataSensorBack.data.receivedData, uartDataSensorBack.data.dataIndex);
 8003d7c:	4b19      	ldr	r3, [pc, #100]	; (8003de4 <main+0x2dc>)
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	4a18      	ldr	r2, [pc, #96]	; (8003de4 <main+0x2dc>)
 8003d84:	491b      	ldr	r1, [pc, #108]	; (8003df4 <main+0x2ec>)
 8003d86:	2006      	movs	r0, #6
 8003d88:	f7ff fb36 	bl	80033f8 <processSensorInterfaceMessage>
		// Zurücksetzen für die nächste Nachricht
		uartDataSensorBack.data.messageComplete = 0;
 8003d8c:	4b15      	ldr	r3, [pc, #84]	; (8003de4 <main+0x2dc>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	645a      	str	r2, [r3, #68]	; 0x44
		uartDataSensorBack.data.dataIndex = 0;
 8003d92:	4b14      	ldr	r3, [pc, #80]	; (8003de4 <main+0x2dc>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_UART_Receive_IT(&huart6, (uint8_t *)uartDataSensorBack.data.receivedData, 1);
 8003d98:	2201      	movs	r2, #1
 8003d9a:	4912      	ldr	r1, [pc, #72]	; (8003de4 <main+0x2dc>)
 8003d9c:	4817      	ldr	r0, [pc, #92]	; (8003dfc <main+0x2f4>)
 8003d9e:	f003 fc7e 	bl	800769e <HAL_UART_Receive_IT>
	  myTS_Handle = TSC2046_GetTouchData();
 8003da2:	e7a6      	b.n	8003cf2 <main+0x1ea>
 8003da4:	20000538 	.word	0x20000538
 8003da8:	3fc8f5c3 	.word	0x3fc8f5c3
 8003dac:	20000558 	.word	0x20000558
 8003db0:	4023d70a 	.word	0x4023d70a
 8003db4:	20000578 	.word	0x20000578
 8003db8:	20000424 	.word	0x20000424
 8003dbc:	40020800 	.word	0x40020800
 8003dc0:	40020000 	.word	0x40020000
 8003dc4:	40020400 	.word	0x40020400
 8003dc8:	20000374 	.word	0x20000374
 8003dcc:	200003cc 	.word	0x200003cc
 8003dd0:	20000588 	.word	0x20000588
 8003dd4:	200005a8 	.word	0x200005a8
 8003dd8:	00000000 	.word	0x00000000
 8003ddc:	20000628 	.word	0x20000628
 8003de0:	20000688 	.word	0x20000688
 8003de4:	200006e8 	.word	0x200006e8
 8003de8:	20000608 	.word	0x20000608
 8003dec:	200005f0 	.word	0x200005f0
 8003df0:	200004b0 	.word	0x200004b0
 8003df4:	200005e4 	.word	0x200005e4
 8003df8:	2000046c 	.word	0x2000046c
 8003dfc:	200004f4 	.word	0x200004f4
 8003e00:	20000748 	.word	0x20000748
 8003e04:	20000754 	.word	0x20000754

08003e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b094      	sub	sp, #80	; 0x50
 8003e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e0e:	f107 0320 	add.w	r3, r7, #32
 8003e12:	2230      	movs	r2, #48	; 0x30
 8003e14:	2100      	movs	r1, #0
 8003e16:	4618      	mov	r0, r3
 8003e18:	f006 fa89 	bl	800a32e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e1c:	f107 030c 	add.w	r3, r7, #12
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	605a      	str	r2, [r3, #4]
 8003e26:	609a      	str	r2, [r3, #8]
 8003e28:	60da      	str	r2, [r3, #12]
 8003e2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60bb      	str	r3, [r7, #8]
 8003e30:	4b28      	ldr	r3, [pc, #160]	; (8003ed4 <SystemClock_Config+0xcc>)
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	4a27      	ldr	r2, [pc, #156]	; (8003ed4 <SystemClock_Config+0xcc>)
 8003e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8003e3c:	4b25      	ldr	r3, [pc, #148]	; (8003ed4 <SystemClock_Config+0xcc>)
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e44:	60bb      	str	r3, [r7, #8]
 8003e46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e48:	2300      	movs	r3, #0
 8003e4a:	607b      	str	r3, [r7, #4]
 8003e4c:	4b22      	ldr	r3, [pc, #136]	; (8003ed8 <SystemClock_Config+0xd0>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a21      	ldr	r2, [pc, #132]	; (8003ed8 <SystemClock_Config+0xd0>)
 8003e52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e56:	6013      	str	r3, [r2, #0]
 8003e58:	4b1f      	ldr	r3, [pc, #124]	; (8003ed8 <SystemClock_Config+0xd0>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e60:	607b      	str	r3, [r7, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003e64:	2302      	movs	r3, #2
 8003e66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e6c:	2310      	movs	r3, #16
 8003e6e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e70:	2302      	movs	r3, #2
 8003e72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e74:	2300      	movs	r3, #0
 8003e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003e78:	2310      	movs	r3, #16
 8003e7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003e7c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003e80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003e82:	2304      	movs	r3, #4
 8003e84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003e86:	2304      	movs	r3, #4
 8003e88:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e8a:	f107 0320 	add.w	r3, r7, #32
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f001 fa14 	bl	80052bc <HAL_RCC_OscConfig>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003e9a:	f000 fabd 	bl	8004418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e9e:	230f      	movs	r3, #15
 8003ea0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003eaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003eb4:	f107 030c 	add.w	r3, r7, #12
 8003eb8:	2102      	movs	r1, #2
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f001 fc76 	bl	80057ac <HAL_RCC_ClockConfig>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003ec6:	f000 faa7 	bl	8004418 <Error_Handler>
  }
}
 8003eca:	bf00      	nop
 8003ecc:	3750      	adds	r7, #80	; 0x50
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	40007000 	.word	0x40007000

08003edc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003ee0:	4b17      	ldr	r3, [pc, #92]	; (8003f40 <MX_SPI1_Init+0x64>)
 8003ee2:	4a18      	ldr	r2, [pc, #96]	; (8003f44 <MX_SPI1_Init+0x68>)
 8003ee4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003ee6:	4b16      	ldr	r3, [pc, #88]	; (8003f40 <MX_SPI1_Init+0x64>)
 8003ee8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003eec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003eee:	4b14      	ldr	r3, [pc, #80]	; (8003f40 <MX_SPI1_Init+0x64>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ef4:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <MX_SPI1_Init+0x64>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003efa:	4b11      	ldr	r3, [pc, #68]	; (8003f40 <MX_SPI1_Init+0x64>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f00:	4b0f      	ldr	r3, [pc, #60]	; (8003f40 <MX_SPI1_Init+0x64>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003f06:	4b0e      	ldr	r3, [pc, #56]	; (8003f40 <MX_SPI1_Init+0x64>)
 8003f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f0e:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <MX_SPI1_Init+0x64>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f14:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <MX_SPI1_Init+0x64>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f1a:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <MX_SPI1_Init+0x64>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f20:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <MX_SPI1_Init+0x64>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003f26:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <MX_SPI1_Init+0x64>)
 8003f28:	220a      	movs	r2, #10
 8003f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003f2c:	4804      	ldr	r0, [pc, #16]	; (8003f40 <MX_SPI1_Init+0x64>)
 8003f2e:	f001 fe5d 	bl	8005bec <HAL_SPI_Init>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003f38:	f000 fa6e 	bl	8004418 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003f3c:	bf00      	nop
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	20000374 	.word	0x20000374
 8003f44:	40013000 	.word	0x40013000

08003f48 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003f4c:	4b17      	ldr	r3, [pc, #92]	; (8003fac <MX_SPI2_Init+0x64>)
 8003f4e:	4a18      	ldr	r2, [pc, #96]	; (8003fb0 <MX_SPI2_Init+0x68>)
 8003f50:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003f52:	4b16      	ldr	r3, [pc, #88]	; (8003fac <MX_SPI2_Init+0x64>)
 8003f54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f58:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003f5a:	4b14      	ldr	r3, [pc, #80]	; (8003fac <MX_SPI2_Init+0x64>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f60:	4b12      	ldr	r3, [pc, #72]	; (8003fac <MX_SPI2_Init+0x64>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f66:	4b11      	ldr	r3, [pc, #68]	; (8003fac <MX_SPI2_Init+0x64>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f6c:	4b0f      	ldr	r3, [pc, #60]	; (8003fac <MX_SPI2_Init+0x64>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003f72:	4b0e      	ldr	r3, [pc, #56]	; (8003fac <MX_SPI2_Init+0x64>)
 8003f74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f78:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003f7a:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <MX_SPI2_Init+0x64>)
 8003f7c:	2210      	movs	r2, #16
 8003f7e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f80:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <MX_SPI2_Init+0x64>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f86:	4b09      	ldr	r3, [pc, #36]	; (8003fac <MX_SPI2_Init+0x64>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f8c:	4b07      	ldr	r3, [pc, #28]	; (8003fac <MX_SPI2_Init+0x64>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003f92:	4b06      	ldr	r3, [pc, #24]	; (8003fac <MX_SPI2_Init+0x64>)
 8003f94:	220a      	movs	r2, #10
 8003f96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003f98:	4804      	ldr	r0, [pc, #16]	; (8003fac <MX_SPI2_Init+0x64>)
 8003f9a:	f001 fe27 	bl	8005bec <HAL_SPI_Init>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003fa4:	f000 fa38 	bl	8004418 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003fa8:	bf00      	nop
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	200003cc 	.word	0x200003cc
 8003fb0:	40003800 	.word	0x40003800

08003fb4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b096      	sub	sp, #88	; 0x58
 8003fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	605a      	str	r2, [r3, #4]
 8003fc4:	609a      	str	r2, [r3, #8]
 8003fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	605a      	str	r2, [r3, #4]
 8003fdc:	609a      	str	r2, [r3, #8]
 8003fde:	60da      	str	r2, [r3, #12]
 8003fe0:	611a      	str	r2, [r3, #16]
 8003fe2:	615a      	str	r2, [r3, #20]
 8003fe4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003fe6:	1d3b      	adds	r3, r7, #4
 8003fe8:	2220      	movs	r2, #32
 8003fea:	2100      	movs	r1, #0
 8003fec:	4618      	mov	r0, r3
 8003fee:	f006 f99e 	bl	800a32e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003ff2:	4b3f      	ldr	r3, [pc, #252]	; (80040f0 <MX_TIM1_Init+0x13c>)
 8003ff4:	4a3f      	ldr	r2, [pc, #252]	; (80040f4 <MX_TIM1_Init+0x140>)
 8003ff6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 8003ff8:	4b3d      	ldr	r3, [pc, #244]	; (80040f0 <MX_TIM1_Init+0x13c>)
 8003ffa:	2204      	movs	r2, #4
 8003ffc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ffe:	4b3c      	ldr	r3, [pc, #240]	; (80040f0 <MX_TIM1_Init+0x13c>)
 8004000:	2200      	movs	r2, #0
 8004002:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004004:	4b3a      	ldr	r3, [pc, #232]	; (80040f0 <MX_TIM1_Init+0x13c>)
 8004006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800400a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800400c:	4b38      	ldr	r3, [pc, #224]	; (80040f0 <MX_TIM1_Init+0x13c>)
 800400e:	2200      	movs	r2, #0
 8004010:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004012:	4b37      	ldr	r3, [pc, #220]	; (80040f0 <MX_TIM1_Init+0x13c>)
 8004014:	2200      	movs	r2, #0
 8004016:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004018:	4b35      	ldr	r3, [pc, #212]	; (80040f0 <MX_TIM1_Init+0x13c>)
 800401a:	2200      	movs	r2, #0
 800401c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800401e:	4834      	ldr	r0, [pc, #208]	; (80040f0 <MX_TIM1_Init+0x13c>)
 8004020:	f002 fb8c 	bl	800673c <HAL_TIM_Base_Init>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800402a:	f000 f9f5 	bl	8004418 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800402e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004032:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004034:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004038:	4619      	mov	r1, r3
 800403a:	482d      	ldr	r0, [pc, #180]	; (80040f0 <MX_TIM1_Init+0x13c>)
 800403c:	f002 fdfc 	bl	8006c38 <HAL_TIM_ConfigClockSource>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004046:	f000 f9e7 	bl	8004418 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800404a:	4829      	ldr	r0, [pc, #164]	; (80040f0 <MX_TIM1_Init+0x13c>)
 800404c:	f002 fbc5 	bl	80067da <HAL_TIM_PWM_Init>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004056:	f000 f9df 	bl	8004418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800405a:	2300      	movs	r3, #0
 800405c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800405e:	2300      	movs	r3, #0
 8004060:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004062:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004066:	4619      	mov	r1, r3
 8004068:	4821      	ldr	r0, [pc, #132]	; (80040f0 <MX_TIM1_Init+0x13c>)
 800406a:	f003 f979 	bl	8007360 <HAL_TIMEx_MasterConfigSynchronization>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004074:	f000 f9d0 	bl	8004418 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004078:	2360      	movs	r3, #96	; 0x60
 800407a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 13125-1;
 800407c:	f243 3344 	movw	r3, #13124	; 0x3344
 8004080:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004082:	2300      	movs	r3, #0
 8004084:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004086:	2300      	movs	r3, #0
 8004088:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800408a:	2300      	movs	r3, #0
 800408c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800408e:	2300      	movs	r3, #0
 8004090:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004092:	2300      	movs	r3, #0
 8004094:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800409a:	2200      	movs	r2, #0
 800409c:	4619      	mov	r1, r3
 800409e:	4814      	ldr	r0, [pc, #80]	; (80040f0 <MX_TIM1_Init+0x13c>)
 80040a0:	f002 fd08 	bl	8006ab4 <HAL_TIM_PWM_ConfigChannel>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80040aa:	f000 f9b5 	bl	8004418 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80040ae:	2300      	movs	r3, #0
 80040b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80040b2:	2300      	movs	r3, #0
 80040b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80040be:	2300      	movs	r3, #0
 80040c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80040c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80040c8:	2300      	movs	r3, #0
 80040ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80040cc:	1d3b      	adds	r3, r7, #4
 80040ce:	4619      	mov	r1, r3
 80040d0:	4807      	ldr	r0, [pc, #28]	; (80040f0 <MX_TIM1_Init+0x13c>)
 80040d2:	f003 f9b3 	bl	800743c <HAL_TIMEx_ConfigBreakDeadTime>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80040dc:	f000 f99c 	bl	8004418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80040e0:	4803      	ldr	r0, [pc, #12]	; (80040f0 <MX_TIM1_Init+0x13c>)
 80040e2:	f000 faa5 	bl	8004630 <HAL_TIM_MspPostInit>

}
 80040e6:	bf00      	nop
 80040e8:	3758      	adds	r7, #88	; 0x58
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20000424 	.word	0x20000424
 80040f4:	40010000 	.word	0x40010000

080040f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80040fc:	4b11      	ldr	r3, [pc, #68]	; (8004144 <MX_USART1_UART_Init+0x4c>)
 80040fe:	4a12      	ldr	r2, [pc, #72]	; (8004148 <MX_USART1_UART_Init+0x50>)
 8004100:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004102:	4b10      	ldr	r3, [pc, #64]	; (8004144 <MX_USART1_UART_Init+0x4c>)
 8004104:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004108:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800410a:	4b0e      	ldr	r3, [pc, #56]	; (8004144 <MX_USART1_UART_Init+0x4c>)
 800410c:	2200      	movs	r2, #0
 800410e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004110:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <MX_USART1_UART_Init+0x4c>)
 8004112:	2200      	movs	r2, #0
 8004114:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004116:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <MX_USART1_UART_Init+0x4c>)
 8004118:	2200      	movs	r2, #0
 800411a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800411c:	4b09      	ldr	r3, [pc, #36]	; (8004144 <MX_USART1_UART_Init+0x4c>)
 800411e:	220c      	movs	r2, #12
 8004120:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004122:	4b08      	ldr	r3, [pc, #32]	; (8004144 <MX_USART1_UART_Init+0x4c>)
 8004124:	2200      	movs	r2, #0
 8004126:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004128:	4b06      	ldr	r3, [pc, #24]	; (8004144 <MX_USART1_UART_Init+0x4c>)
 800412a:	2200      	movs	r2, #0
 800412c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800412e:	4805      	ldr	r0, [pc, #20]	; (8004144 <MX_USART1_UART_Init+0x4c>)
 8004130:	f003 f9d6 	bl	80074e0 <HAL_UART_Init>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800413a:	f000 f96d 	bl	8004418 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800413e:	bf00      	nop
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	2000046c 	.word	0x2000046c
 8004148:	40011000 	.word	0x40011000

0800414c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004150:	4b11      	ldr	r3, [pc, #68]	; (8004198 <MX_USART2_UART_Init+0x4c>)
 8004152:	4a12      	ldr	r2, [pc, #72]	; (800419c <MX_USART2_UART_Init+0x50>)
 8004154:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004156:	4b10      	ldr	r3, [pc, #64]	; (8004198 <MX_USART2_UART_Init+0x4c>)
 8004158:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800415c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800415e:	4b0e      	ldr	r3, [pc, #56]	; (8004198 <MX_USART2_UART_Init+0x4c>)
 8004160:	2200      	movs	r2, #0
 8004162:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004164:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <MX_USART2_UART_Init+0x4c>)
 8004166:	2200      	movs	r2, #0
 8004168:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800416a:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <MX_USART2_UART_Init+0x4c>)
 800416c:	2200      	movs	r2, #0
 800416e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004170:	4b09      	ldr	r3, [pc, #36]	; (8004198 <MX_USART2_UART_Init+0x4c>)
 8004172:	220c      	movs	r2, #12
 8004174:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004176:	4b08      	ldr	r3, [pc, #32]	; (8004198 <MX_USART2_UART_Init+0x4c>)
 8004178:	2200      	movs	r2, #0
 800417a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800417c:	4b06      	ldr	r3, [pc, #24]	; (8004198 <MX_USART2_UART_Init+0x4c>)
 800417e:	2200      	movs	r2, #0
 8004180:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004182:	4805      	ldr	r0, [pc, #20]	; (8004198 <MX_USART2_UART_Init+0x4c>)
 8004184:	f003 f9ac 	bl	80074e0 <HAL_UART_Init>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800418e:	f000 f943 	bl	8004418 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004192:	bf00      	nop
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	200004b0 	.word	0x200004b0
 800419c:	40004400 	.word	0x40004400

080041a0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80041a4:	4b11      	ldr	r3, [pc, #68]	; (80041ec <MX_USART6_UART_Init+0x4c>)
 80041a6:	4a12      	ldr	r2, [pc, #72]	; (80041f0 <MX_USART6_UART_Init+0x50>)
 80041a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80041aa:	4b10      	ldr	r3, [pc, #64]	; (80041ec <MX_USART6_UART_Init+0x4c>)
 80041ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80041b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80041b2:	4b0e      	ldr	r3, [pc, #56]	; (80041ec <MX_USART6_UART_Init+0x4c>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80041b8:	4b0c      	ldr	r3, [pc, #48]	; (80041ec <MX_USART6_UART_Init+0x4c>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80041be:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <MX_USART6_UART_Init+0x4c>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80041c4:	4b09      	ldr	r3, [pc, #36]	; (80041ec <MX_USART6_UART_Init+0x4c>)
 80041c6:	220c      	movs	r2, #12
 80041c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041ca:	4b08      	ldr	r3, [pc, #32]	; (80041ec <MX_USART6_UART_Init+0x4c>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80041d0:	4b06      	ldr	r3, [pc, #24]	; (80041ec <MX_USART6_UART_Init+0x4c>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80041d6:	4805      	ldr	r0, [pc, #20]	; (80041ec <MX_USART6_UART_Init+0x4c>)
 80041d8:	f003 f982 	bl	80074e0 <HAL_UART_Init>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80041e2:	f000 f919 	bl	8004418 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80041e6:	bf00      	nop
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	200004f4 	.word	0x200004f4
 80041f0:	40011400 	.word	0x40011400

080041f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08a      	sub	sp, #40	; 0x28
 80041f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041fa:	f107 0314 	add.w	r3, r7, #20
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	605a      	str	r2, [r3, #4]
 8004204:	609a      	str	r2, [r3, #8]
 8004206:	60da      	str	r2, [r3, #12]
 8004208:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800420a:	2300      	movs	r3, #0
 800420c:	613b      	str	r3, [r7, #16]
 800420e:	4b41      	ldr	r3, [pc, #260]	; (8004314 <MX_GPIO_Init+0x120>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004212:	4a40      	ldr	r2, [pc, #256]	; (8004314 <MX_GPIO_Init+0x120>)
 8004214:	f043 0304 	orr.w	r3, r3, #4
 8004218:	6313      	str	r3, [r2, #48]	; 0x30
 800421a:	4b3e      	ldr	r3, [pc, #248]	; (8004314 <MX_GPIO_Init+0x120>)
 800421c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421e:	f003 0304 	and.w	r3, r3, #4
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004226:	2300      	movs	r3, #0
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	4b3a      	ldr	r3, [pc, #232]	; (8004314 <MX_GPIO_Init+0x120>)
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	4a39      	ldr	r2, [pc, #228]	; (8004314 <MX_GPIO_Init+0x120>)
 8004230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004234:	6313      	str	r3, [r2, #48]	; 0x30
 8004236:	4b37      	ldr	r3, [pc, #220]	; (8004314 <MX_GPIO_Init+0x120>)
 8004238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004242:	2300      	movs	r3, #0
 8004244:	60bb      	str	r3, [r7, #8]
 8004246:	4b33      	ldr	r3, [pc, #204]	; (8004314 <MX_GPIO_Init+0x120>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	4a32      	ldr	r2, [pc, #200]	; (8004314 <MX_GPIO_Init+0x120>)
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	6313      	str	r3, [r2, #48]	; 0x30
 8004252:	4b30      	ldr	r3, [pc, #192]	; (8004314 <MX_GPIO_Init+0x120>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	60bb      	str	r3, [r7, #8]
 800425c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800425e:	2300      	movs	r3, #0
 8004260:	607b      	str	r3, [r7, #4]
 8004262:	4b2c      	ldr	r3, [pc, #176]	; (8004314 <MX_GPIO_Init+0x120>)
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	4a2b      	ldr	r2, [pc, #172]	; (8004314 <MX_GPIO_Init+0x120>)
 8004268:	f043 0302 	orr.w	r3, r3, #2
 800426c:	6313      	str	r3, [r2, #48]	; 0x30
 800426e:	4b29      	ldr	r3, [pc, #164]	; (8004314 <MX_GPIO_Init+0x120>)
 8004270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	607b      	str	r3, [r7, #4]
 8004278:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 800427a:	2200      	movs	r2, #0
 800427c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8004280:	4825      	ldr	r0, [pc, #148]	; (8004318 <MX_GPIO_Init+0x124>)
 8004282:	f001 f801 	bl	8005288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8004286:	2200      	movs	r2, #0
 8004288:	2180      	movs	r1, #128	; 0x80
 800428a:	4824      	ldr	r0, [pc, #144]	; (800431c <MX_GPIO_Init+0x128>)
 800428c:	f000 fffc 	bl	8005288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TS_CS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8004290:	2200      	movs	r2, #0
 8004292:	2160      	movs	r1, #96	; 0x60
 8004294:	4822      	ldr	r0, [pc, #136]	; (8004320 <MX_GPIO_Init+0x12c>)
 8004296:	f000 fff7 	bl	8005288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800429a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800429e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80042a0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80042a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80042aa:	f107 0314 	add.w	r3, r7, #20
 80042ae:	4619      	mov	r1, r3
 80042b0:	481a      	ldr	r0, [pc, #104]	; (800431c <MX_GPIO_Init+0x128>)
 80042b2:	f000 fe65 	bl	8004f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LCD_DC_Pin;
 80042b6:	f44f 7308 	mov.w	r3, #544	; 0x220
 80042ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042bc:	2301      	movs	r3, #1
 80042be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c0:	2300      	movs	r3, #0
 80042c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042c4:	2300      	movs	r3, #0
 80042c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042c8:	f107 0314 	add.w	r3, r7, #20
 80042cc:	4619      	mov	r1, r3
 80042ce:	4812      	ldr	r0, [pc, #72]	; (8004318 <MX_GPIO_Init+0x124>)
 80042d0:	f000 fe56 	bl	8004f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 80042d4:	2380      	movs	r3, #128	; 0x80
 80042d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042d8:	2301      	movs	r3, #1
 80042da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042dc:	2300      	movs	r3, #0
 80042de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042e0:	2300      	movs	r3, #0
 80042e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80042e4:	f107 0314 	add.w	r3, r7, #20
 80042e8:	4619      	mov	r1, r3
 80042ea:	480c      	ldr	r0, [pc, #48]	; (800431c <MX_GPIO_Init+0x128>)
 80042ec:	f000 fe48 	bl	8004f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : TS_CS_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = TS_CS_Pin|LCD_CS_Pin;
 80042f0:	2360      	movs	r3, #96	; 0x60
 80042f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042f4:	2301      	movs	r3, #1
 80042f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f8:	2300      	movs	r3, #0
 80042fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042fc:	2300      	movs	r3, #0
 80042fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004300:	f107 0314 	add.w	r3, r7, #20
 8004304:	4619      	mov	r1, r3
 8004306:	4806      	ldr	r0, [pc, #24]	; (8004320 <MX_GPIO_Init+0x12c>)
 8004308:	f000 fe3a 	bl	8004f80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800430c:	bf00      	nop
 800430e:	3728      	adds	r7, #40	; 0x28
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40023800 	.word	0x40023800
 8004318:	40020000 	.word	0x40020000
 800431c:	40020800 	.word	0x40020800
 8004320:	40020400 	.word	0x40020400

08004324 <processUartData>:

/* USER CODE BEGIN 4 */
void processUartData(UART_HandleTypeDef *huart, UartDataObject *uartData) {
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  if (uartData->data.dataIndex == 0 && uartData->data.receivedData[0] != '?' && uartData->data.receivedData[0] != '!') {
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	2b00      	cmp	r3, #0
 8004334:	d111      	bne.n	800435a <processUartData+0x36>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	2b3f      	cmp	r3, #63	; 0x3f
 800433c:	d00d      	beq.n	800435a <processUartData+0x36>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b21      	cmp	r3, #33	; 0x21
 8004344:	d009      	beq.n	800435a <processUartData+0x36>
    // Fehlerhafte Startbyte, Nachricht ignorieren
    uartData->data.dataIndex = 0;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2200      	movs	r2, #0
 800434a:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_UART_Receive_IT(huart, &uartData->data.receivedData[0], 1);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	2201      	movs	r2, #1
 8004350:	4619      	mov	r1, r3
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f003 f9a3 	bl	800769e <HAL_UART_Receive_IT>
    HAL_UART_Receive_IT(huart, &uartData->data.receivedData[0], 1);
  } else {
    uartData->data.dataIndex++;
    HAL_UART_Receive_IT(huart, (uint8_t *)&uartData->data.receivedData[uartData->data.dataIndex], 1);
  }
}
 8004358:	e02b      	b.n	80043b2 <processUartData+0x8e>
  } else if (uartData->data.receivedData[uartData->data.dataIndex] == '\r' ) {
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	5cd3      	ldrb	r3, [r2, r3]
 8004362:	2b0d      	cmp	r3, #13
 8004364:	d109      	bne.n	800437a <processUartData+0x56>
    uartData->data.receivedData[uartData->data.dataIndex + 1] = '\0';  // Null-Terminierung hinzufügen
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	3301      	adds	r3, #1
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	2100      	movs	r1, #0
 8004370:	54d1      	strb	r1, [r2, r3]
    uartData->data.messageComplete = 1;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2201      	movs	r2, #1
 8004376:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004378:	e01b      	b.n	80043b2 <processUartData+0x8e>
  } else if (uartData->data.dataIndex >= sizeof(uartData->data.receivedData) - 1) {
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	2b3e      	cmp	r3, #62	; 0x3e
 8004380:	d909      	bls.n	8004396 <processUartData+0x72>
    uartData->data.dataIndex = 0;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2200      	movs	r2, #0
 8004386:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_UART_Receive_IT(huart, &uartData->data.receivedData[0], 1);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	2201      	movs	r2, #1
 800438c:	4619      	mov	r1, r3
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f003 f985 	bl	800769e <HAL_UART_Receive_IT>
}
 8004394:	e00d      	b.n	80043b2 <processUartData+0x8e>
    uartData->data.dataIndex++;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_UART_Receive_IT(huart, (uint8_t *)&uartData->data.receivedData[uartData->data.dataIndex], 1);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	4413      	add	r3, r2
 80043a8:	2201      	movs	r2, #1
 80043aa:	4619      	mov	r1, r3
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f003 f976 	bl	800769e <HAL_UART_Receive_IT>
}
 80043b2:	bf00      	nop
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  if (huart == &huart2) {
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a0e      	ldr	r2, [pc, #56]	; (8004400 <HAL_UART_RxCpltCallback+0x44>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d104      	bne.n	80043d6 <HAL_UART_RxCpltCallback+0x1a>
    processUartData(&huart2, &uartDataPc);
 80043cc:	490d      	ldr	r1, [pc, #52]	; (8004404 <HAL_UART_RxCpltCallback+0x48>)
 80043ce:	480c      	ldr	r0, [pc, #48]	; (8004400 <HAL_UART_RxCpltCallback+0x44>)
 80043d0:	f7ff ffa8 	bl	8004324 <processUartData>
  }else if (huart == &huart1){
	processUartData(&huart1, &uartDataSensorExtruder);
  }else if (huart == &huart6){
	  processUartData(&huart6, &uartDataSensorBack);
  }
}
 80043d4:	e010      	b.n	80043f8 <HAL_UART_RxCpltCallback+0x3c>
  }else if (huart == &huart1){
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a0b      	ldr	r2, [pc, #44]	; (8004408 <HAL_UART_RxCpltCallback+0x4c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d104      	bne.n	80043e8 <HAL_UART_RxCpltCallback+0x2c>
	processUartData(&huart1, &uartDataSensorExtruder);
 80043de:	490b      	ldr	r1, [pc, #44]	; (800440c <HAL_UART_RxCpltCallback+0x50>)
 80043e0:	4809      	ldr	r0, [pc, #36]	; (8004408 <HAL_UART_RxCpltCallback+0x4c>)
 80043e2:	f7ff ff9f 	bl	8004324 <processUartData>
}
 80043e6:	e007      	b.n	80043f8 <HAL_UART_RxCpltCallback+0x3c>
  }else if (huart == &huart6){
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a09      	ldr	r2, [pc, #36]	; (8004410 <HAL_UART_RxCpltCallback+0x54>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d103      	bne.n	80043f8 <HAL_UART_RxCpltCallback+0x3c>
	  processUartData(&huart6, &uartDataSensorBack);
 80043f0:	4908      	ldr	r1, [pc, #32]	; (8004414 <HAL_UART_RxCpltCallback+0x58>)
 80043f2:	4807      	ldr	r0, [pc, #28]	; (8004410 <HAL_UART_RxCpltCallback+0x54>)
 80043f4:	f7ff ff96 	bl	8004324 <processUartData>
}
 80043f8:	bf00      	nop
 80043fa:	3708      	adds	r7, #8
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	200004b0 	.word	0x200004b0
 8004404:	20000628 	.word	0x20000628
 8004408:	2000046c 	.word	0x2000046c
 800440c:	20000688 	.word	0x20000688
 8004410:	200004f4 	.word	0x200004f4
 8004414:	200006e8 	.word	0x200006e8

08004418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800441c:	b672      	cpsid	i
}
 800441e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004420:	e7fe      	b.n	8004420 <Error_Handler+0x8>
	...

08004424 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800442a:	2300      	movs	r3, #0
 800442c:	607b      	str	r3, [r7, #4]
 800442e:	4b10      	ldr	r3, [pc, #64]	; (8004470 <HAL_MspInit+0x4c>)
 8004430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004432:	4a0f      	ldr	r2, [pc, #60]	; (8004470 <HAL_MspInit+0x4c>)
 8004434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004438:	6453      	str	r3, [r2, #68]	; 0x44
 800443a:	4b0d      	ldr	r3, [pc, #52]	; (8004470 <HAL_MspInit+0x4c>)
 800443c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004442:	607b      	str	r3, [r7, #4]
 8004444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004446:	2300      	movs	r3, #0
 8004448:	603b      	str	r3, [r7, #0]
 800444a:	4b09      	ldr	r3, [pc, #36]	; (8004470 <HAL_MspInit+0x4c>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	4a08      	ldr	r2, [pc, #32]	; (8004470 <HAL_MspInit+0x4c>)
 8004450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004454:	6413      	str	r3, [r2, #64]	; 0x40
 8004456:	4b06      	ldr	r3, [pc, #24]	; (8004470 <HAL_MspInit+0x4c>)
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445e:	603b      	str	r3, [r7, #0]
 8004460:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004462:	2007      	movs	r0, #7
 8004464:	f000 fcb8 	bl	8004dd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004468:	bf00      	nop
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40023800 	.word	0x40023800

08004474 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08e      	sub	sp, #56	; 0x38
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800447c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	605a      	str	r2, [r3, #4]
 8004486:	609a      	str	r2, [r3, #8]
 8004488:	60da      	str	r2, [r3, #12]
 800448a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a50      	ldr	r2, [pc, #320]	; (80045d4 <HAL_SPI_MspInit+0x160>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d14a      	bne.n	800452c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004496:	2300      	movs	r3, #0
 8004498:	623b      	str	r3, [r7, #32]
 800449a:	4b4f      	ldr	r3, [pc, #316]	; (80045d8 <HAL_SPI_MspInit+0x164>)
 800449c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449e:	4a4e      	ldr	r2, [pc, #312]	; (80045d8 <HAL_SPI_MspInit+0x164>)
 80044a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044a4:	6453      	str	r3, [r2, #68]	; 0x44
 80044a6:	4b4c      	ldr	r3, [pc, #304]	; (80045d8 <HAL_SPI_MspInit+0x164>)
 80044a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044ae:	623b      	str	r3, [r7, #32]
 80044b0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044b2:	2300      	movs	r3, #0
 80044b4:	61fb      	str	r3, [r7, #28]
 80044b6:	4b48      	ldr	r3, [pc, #288]	; (80045d8 <HAL_SPI_MspInit+0x164>)
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	4a47      	ldr	r2, [pc, #284]	; (80045d8 <HAL_SPI_MspInit+0x164>)
 80044bc:	f043 0301 	orr.w	r3, r3, #1
 80044c0:	6313      	str	r3, [r2, #48]	; 0x30
 80044c2:	4b45      	ldr	r3, [pc, #276]	; (80045d8 <HAL_SPI_MspInit+0x164>)
 80044c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	61fb      	str	r3, [r7, #28]
 80044cc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ce:	2300      	movs	r3, #0
 80044d0:	61bb      	str	r3, [r7, #24]
 80044d2:	4b41      	ldr	r3, [pc, #260]	; (80045d8 <HAL_SPI_MspInit+0x164>)
 80044d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d6:	4a40      	ldr	r2, [pc, #256]	; (80045d8 <HAL_SPI_MspInit+0x164>)
 80044d8:	f043 0302 	orr.w	r3, r3, #2
 80044dc:	6313      	str	r3, [r2, #48]	; 0x30
 80044de:	4b3e      	ldr	r3, [pc, #248]	; (80045d8 <HAL_SPI_MspInit+0x164>)
 80044e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	61bb      	str	r3, [r7, #24]
 80044e8:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044ea:	23c0      	movs	r3, #192	; 0xc0
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ee:	2302      	movs	r3, #2
 80044f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f2:	2300      	movs	r3, #0
 80044f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044f6:	2303      	movs	r3, #3
 80044f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80044fa:	2305      	movs	r3, #5
 80044fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004502:	4619      	mov	r1, r3
 8004504:	4835      	ldr	r0, [pc, #212]	; (80045dc <HAL_SPI_MspInit+0x168>)
 8004506:	f000 fd3b 	bl	8004f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800450a:	2308      	movs	r3, #8
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800450e:	2302      	movs	r3, #2
 8004510:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004512:	2300      	movs	r3, #0
 8004514:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004516:	2303      	movs	r3, #3
 8004518:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800451a:	2305      	movs	r3, #5
 800451c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800451e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004522:	4619      	mov	r1, r3
 8004524:	482e      	ldr	r0, [pc, #184]	; (80045e0 <HAL_SPI_MspInit+0x16c>)
 8004526:	f000 fd2b 	bl	8004f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800452a:	e04f      	b.n	80045cc <HAL_SPI_MspInit+0x158>
  else if(hspi->Instance==SPI2)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a2c      	ldr	r2, [pc, #176]	; (80045e4 <HAL_SPI_MspInit+0x170>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d14a      	bne.n	80045cc <HAL_SPI_MspInit+0x158>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004536:	2300      	movs	r3, #0
 8004538:	617b      	str	r3, [r7, #20]
 800453a:	4b27      	ldr	r3, [pc, #156]	; (80045d8 <HAL_SPI_MspInit+0x164>)
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	4a26      	ldr	r2, [pc, #152]	; (80045d8 <HAL_SPI_MspInit+0x164>)
 8004540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004544:	6413      	str	r3, [r2, #64]	; 0x40
 8004546:	4b24      	ldr	r3, [pc, #144]	; (80045d8 <HAL_SPI_MspInit+0x164>)
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800454e:	617b      	str	r3, [r7, #20]
 8004550:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004552:	2300      	movs	r3, #0
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	4b20      	ldr	r3, [pc, #128]	; (80045d8 <HAL_SPI_MspInit+0x164>)
 8004558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455a:	4a1f      	ldr	r2, [pc, #124]	; (80045d8 <HAL_SPI_MspInit+0x164>)
 800455c:	f043 0304 	orr.w	r3, r3, #4
 8004560:	6313      	str	r3, [r2, #48]	; 0x30
 8004562:	4b1d      	ldr	r3, [pc, #116]	; (80045d8 <HAL_SPI_MspInit+0x164>)
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	f003 0304 	and.w	r3, r3, #4
 800456a:	613b      	str	r3, [r7, #16]
 800456c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800456e:	2300      	movs	r3, #0
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	4b19      	ldr	r3, [pc, #100]	; (80045d8 <HAL_SPI_MspInit+0x164>)
 8004574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004576:	4a18      	ldr	r2, [pc, #96]	; (80045d8 <HAL_SPI_MspInit+0x164>)
 8004578:	f043 0302 	orr.w	r3, r3, #2
 800457c:	6313      	str	r3, [r2, #48]	; 0x30
 800457e:	4b16      	ldr	r3, [pc, #88]	; (80045d8 <HAL_SPI_MspInit+0x164>)
 8004580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TS_DO_Pin|T_DIN_Pin;
 800458a:	230c      	movs	r3, #12
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800458e:	2302      	movs	r3, #2
 8004590:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004592:	2300      	movs	r3, #0
 8004594:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004596:	2303      	movs	r3, #3
 8004598:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800459a:	2305      	movs	r3, #5
 800459c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800459e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045a2:	4619      	mov	r1, r3
 80045a4:	4810      	ldr	r0, [pc, #64]	; (80045e8 <HAL_SPI_MspInit+0x174>)
 80045a6:	f000 fceb 	bl	8004f80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80045aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045b0:	2302      	movs	r3, #2
 80045b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b4:	2300      	movs	r3, #0
 80045b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045b8:	2303      	movs	r3, #3
 80045ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80045bc:	2305      	movs	r3, #5
 80045be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045c4:	4619      	mov	r1, r3
 80045c6:	4806      	ldr	r0, [pc, #24]	; (80045e0 <HAL_SPI_MspInit+0x16c>)
 80045c8:	f000 fcda 	bl	8004f80 <HAL_GPIO_Init>
}
 80045cc:	bf00      	nop
 80045ce:	3738      	adds	r7, #56	; 0x38
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40013000 	.word	0x40013000
 80045d8:	40023800 	.word	0x40023800
 80045dc:	40020000 	.word	0x40020000
 80045e0:	40020400 	.word	0x40020400
 80045e4:	40003800 	.word	0x40003800
 80045e8:	40020800 	.word	0x40020800

080045ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a0b      	ldr	r2, [pc, #44]	; (8004628 <HAL_TIM_Base_MspInit+0x3c>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d10d      	bne.n	800461a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	4b0a      	ldr	r3, [pc, #40]	; (800462c <HAL_TIM_Base_MspInit+0x40>)
 8004604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004606:	4a09      	ldr	r2, [pc, #36]	; (800462c <HAL_TIM_Base_MspInit+0x40>)
 8004608:	f043 0301 	orr.w	r3, r3, #1
 800460c:	6453      	str	r3, [r2, #68]	; 0x44
 800460e:	4b07      	ldr	r3, [pc, #28]	; (800462c <HAL_TIM_Base_MspInit+0x40>)
 8004610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800461a:	bf00      	nop
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	40010000 	.word	0x40010000
 800462c:	40023800 	.word	0x40023800

08004630 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b088      	sub	sp, #32
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004638:	f107 030c 	add.w	r3, r7, #12
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	605a      	str	r2, [r3, #4]
 8004642:	609a      	str	r2, [r3, #8]
 8004644:	60da      	str	r2, [r3, #12]
 8004646:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a12      	ldr	r2, [pc, #72]	; (8004698 <HAL_TIM_MspPostInit+0x68>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d11e      	bne.n	8004690 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004652:	2300      	movs	r3, #0
 8004654:	60bb      	str	r3, [r7, #8]
 8004656:	4b11      	ldr	r3, [pc, #68]	; (800469c <HAL_TIM_MspPostInit+0x6c>)
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	4a10      	ldr	r2, [pc, #64]	; (800469c <HAL_TIM_MspPostInit+0x6c>)
 800465c:	f043 0301 	orr.w	r3, r3, #1
 8004660:	6313      	str	r3, [r2, #48]	; 0x30
 8004662:	4b0e      	ldr	r3, [pc, #56]	; (800469c <HAL_TIM_MspPostInit+0x6c>)
 8004664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	60bb      	str	r3, [r7, #8]
 800466c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800466e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004672:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004674:	2302      	movs	r3, #2
 8004676:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004678:	2300      	movs	r3, #0
 800467a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800467c:	2300      	movs	r3, #0
 800467e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004680:	2301      	movs	r3, #1
 8004682:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004684:	f107 030c 	add.w	r3, r7, #12
 8004688:	4619      	mov	r1, r3
 800468a:	4805      	ldr	r0, [pc, #20]	; (80046a0 <HAL_TIM_MspPostInit+0x70>)
 800468c:	f000 fc78 	bl	8004f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004690:	bf00      	nop
 8004692:	3720      	adds	r7, #32
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40010000 	.word	0x40010000
 800469c:	40023800 	.word	0x40023800
 80046a0:	40020000 	.word	0x40020000

080046a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08e      	sub	sp, #56	; 0x38
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	605a      	str	r2, [r3, #4]
 80046b6:	609a      	str	r2, [r3, #8]
 80046b8:	60da      	str	r2, [r3, #12]
 80046ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a67      	ldr	r2, [pc, #412]	; (8004860 <HAL_UART_MspInit+0x1bc>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d135      	bne.n	8004732 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80046c6:	2300      	movs	r3, #0
 80046c8:	623b      	str	r3, [r7, #32]
 80046ca:	4b66      	ldr	r3, [pc, #408]	; (8004864 <HAL_UART_MspInit+0x1c0>)
 80046cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ce:	4a65      	ldr	r2, [pc, #404]	; (8004864 <HAL_UART_MspInit+0x1c0>)
 80046d0:	f043 0310 	orr.w	r3, r3, #16
 80046d4:	6453      	str	r3, [r2, #68]	; 0x44
 80046d6:	4b63      	ldr	r3, [pc, #396]	; (8004864 <HAL_UART_MspInit+0x1c0>)
 80046d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046da:	f003 0310 	and.w	r3, r3, #16
 80046de:	623b      	str	r3, [r7, #32]
 80046e0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046e2:	2300      	movs	r3, #0
 80046e4:	61fb      	str	r3, [r7, #28]
 80046e6:	4b5f      	ldr	r3, [pc, #380]	; (8004864 <HAL_UART_MspInit+0x1c0>)
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	4a5e      	ldr	r2, [pc, #376]	; (8004864 <HAL_UART_MspInit+0x1c0>)
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	6313      	str	r3, [r2, #48]	; 0x30
 80046f2:	4b5c      	ldr	r3, [pc, #368]	; (8004864 <HAL_UART_MspInit+0x1c0>)
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	61fb      	str	r3, [r7, #28]
 80046fc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80046fe:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8004702:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004704:	2302      	movs	r3, #2
 8004706:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004708:	2300      	movs	r3, #0
 800470a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800470c:	2303      	movs	r3, #3
 800470e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004710:	2307      	movs	r3, #7
 8004712:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004718:	4619      	mov	r1, r3
 800471a:	4853      	ldr	r0, [pc, #332]	; (8004868 <HAL_UART_MspInit+0x1c4>)
 800471c:	f000 fc30 	bl	8004f80 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004720:	2200      	movs	r2, #0
 8004722:	2100      	movs	r1, #0
 8004724:	2025      	movs	r0, #37	; 0x25
 8004726:	f000 fb62 	bl	8004dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800472a:	2025      	movs	r0, #37	; 0x25
 800472c:	f000 fb7b 	bl	8004e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004730:	e091      	b.n	8004856 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a4d      	ldr	r2, [pc, #308]	; (800486c <HAL_UART_MspInit+0x1c8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d134      	bne.n	80047a6 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 800473c:	2300      	movs	r3, #0
 800473e:	61bb      	str	r3, [r7, #24]
 8004740:	4b48      	ldr	r3, [pc, #288]	; (8004864 <HAL_UART_MspInit+0x1c0>)
 8004742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004744:	4a47      	ldr	r2, [pc, #284]	; (8004864 <HAL_UART_MspInit+0x1c0>)
 8004746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800474a:	6413      	str	r3, [r2, #64]	; 0x40
 800474c:	4b45      	ldr	r3, [pc, #276]	; (8004864 <HAL_UART_MspInit+0x1c0>)
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004754:	61bb      	str	r3, [r7, #24]
 8004756:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004758:	2300      	movs	r3, #0
 800475a:	617b      	str	r3, [r7, #20]
 800475c:	4b41      	ldr	r3, [pc, #260]	; (8004864 <HAL_UART_MspInit+0x1c0>)
 800475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004760:	4a40      	ldr	r2, [pc, #256]	; (8004864 <HAL_UART_MspInit+0x1c0>)
 8004762:	f043 0301 	orr.w	r3, r3, #1
 8004766:	6313      	str	r3, [r2, #48]	; 0x30
 8004768:	4b3e      	ldr	r3, [pc, #248]	; (8004864 <HAL_UART_MspInit+0x1c0>)
 800476a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	617b      	str	r3, [r7, #20]
 8004772:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004774:	230c      	movs	r3, #12
 8004776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004778:	2302      	movs	r3, #2
 800477a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800477c:	2300      	movs	r3, #0
 800477e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004780:	2303      	movs	r3, #3
 8004782:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004784:	2307      	movs	r3, #7
 8004786:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800478c:	4619      	mov	r1, r3
 800478e:	4836      	ldr	r0, [pc, #216]	; (8004868 <HAL_UART_MspInit+0x1c4>)
 8004790:	f000 fbf6 	bl	8004f80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004794:	2200      	movs	r2, #0
 8004796:	2100      	movs	r1, #0
 8004798:	2026      	movs	r0, #38	; 0x26
 800479a:	f000 fb28 	bl	8004dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800479e:	2026      	movs	r0, #38	; 0x26
 80047a0:	f000 fb41 	bl	8004e26 <HAL_NVIC_EnableIRQ>
}
 80047a4:	e057      	b.n	8004856 <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART6)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a31      	ldr	r2, [pc, #196]	; (8004870 <HAL_UART_MspInit+0x1cc>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d152      	bne.n	8004856 <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80047b0:	2300      	movs	r3, #0
 80047b2:	613b      	str	r3, [r7, #16]
 80047b4:	4b2b      	ldr	r3, [pc, #172]	; (8004864 <HAL_UART_MspInit+0x1c0>)
 80047b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b8:	4a2a      	ldr	r2, [pc, #168]	; (8004864 <HAL_UART_MspInit+0x1c0>)
 80047ba:	f043 0320 	orr.w	r3, r3, #32
 80047be:	6453      	str	r3, [r2, #68]	; 0x44
 80047c0:	4b28      	ldr	r3, [pc, #160]	; (8004864 <HAL_UART_MspInit+0x1c0>)
 80047c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047cc:	2300      	movs	r3, #0
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	4b24      	ldr	r3, [pc, #144]	; (8004864 <HAL_UART_MspInit+0x1c0>)
 80047d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d4:	4a23      	ldr	r2, [pc, #140]	; (8004864 <HAL_UART_MspInit+0x1c0>)
 80047d6:	f043 0304 	orr.w	r3, r3, #4
 80047da:	6313      	str	r3, [r2, #48]	; 0x30
 80047dc:	4b21      	ldr	r3, [pc, #132]	; (8004864 <HAL_UART_MspInit+0x1c0>)
 80047de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047e8:	2300      	movs	r3, #0
 80047ea:	60bb      	str	r3, [r7, #8]
 80047ec:	4b1d      	ldr	r3, [pc, #116]	; (8004864 <HAL_UART_MspInit+0x1c0>)
 80047ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f0:	4a1c      	ldr	r2, [pc, #112]	; (8004864 <HAL_UART_MspInit+0x1c0>)
 80047f2:	f043 0301 	orr.w	r3, r3, #1
 80047f6:	6313      	str	r3, [r2, #48]	; 0x30
 80047f8:	4b1a      	ldr	r3, [pc, #104]	; (8004864 <HAL_UART_MspInit+0x1c0>)
 80047fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	60bb      	str	r3, [r7, #8]
 8004802:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004804:	2340      	movs	r3, #64	; 0x40
 8004806:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004808:	2302      	movs	r3, #2
 800480a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480c:	2300      	movs	r3, #0
 800480e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004810:	2303      	movs	r3, #3
 8004812:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004814:	2308      	movs	r3, #8
 8004816:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800481c:	4619      	mov	r1, r3
 800481e:	4815      	ldr	r0, [pc, #84]	; (8004874 <HAL_UART_MspInit+0x1d0>)
 8004820:	f000 fbae 	bl	8004f80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004828:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800482a:	2302      	movs	r3, #2
 800482c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800482e:	2300      	movs	r3, #0
 8004830:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004832:	2303      	movs	r3, #3
 8004834:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004836:	2308      	movs	r3, #8
 8004838:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800483a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800483e:	4619      	mov	r1, r3
 8004840:	4809      	ldr	r0, [pc, #36]	; (8004868 <HAL_UART_MspInit+0x1c4>)
 8004842:	f000 fb9d 	bl	8004f80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004846:	2200      	movs	r2, #0
 8004848:	2100      	movs	r1, #0
 800484a:	2047      	movs	r0, #71	; 0x47
 800484c:	f000 facf 	bl	8004dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004850:	2047      	movs	r0, #71	; 0x47
 8004852:	f000 fae8 	bl	8004e26 <HAL_NVIC_EnableIRQ>
}
 8004856:	bf00      	nop
 8004858:	3738      	adds	r7, #56	; 0x38
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40011000 	.word	0x40011000
 8004864:	40023800 	.word	0x40023800
 8004868:	40020000 	.word	0x40020000
 800486c:	40004400 	.word	0x40004400
 8004870:	40011400 	.word	0x40011400
 8004874:	40020800 	.word	0x40020800

08004878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800487c:	e7fe      	b.n	800487c <NMI_Handler+0x4>

0800487e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800487e:	b480      	push	{r7}
 8004880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004882:	e7fe      	b.n	8004882 <HardFault_Handler+0x4>

08004884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004888:	e7fe      	b.n	8004888 <MemManage_Handler+0x4>

0800488a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800488a:	b480      	push	{r7}
 800488c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800488e:	e7fe      	b.n	800488e <BusFault_Handler+0x4>

08004890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004894:	e7fe      	b.n	8004894 <UsageFault_Handler+0x4>

08004896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004896:	b480      	push	{r7}
 8004898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800489a:	bf00      	nop
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048a8:	bf00      	nop
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048b2:	b480      	push	{r7}
 80048b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048b6:	bf00      	nop
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048c4:	f000 f974 	bl	8004bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048c8:	bf00      	nop
 80048ca:	bd80      	pop	{r7, pc}

080048cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80048d0:	4802      	ldr	r0, [pc, #8]	; (80048dc <USART1_IRQHandler+0x10>)
 80048d2:	f002 ff15 	bl	8007700 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80048d6:	bf00      	nop
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	2000046c 	.word	0x2000046c

080048e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80048e4:	4802      	ldr	r0, [pc, #8]	; (80048f0 <USART2_IRQHandler+0x10>)
 80048e6:	f002 ff0b 	bl	8007700 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80048ea:	bf00      	nop
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	200004b0 	.word	0x200004b0

080048f4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80048f8:	4802      	ldr	r0, [pc, #8]	; (8004904 <USART6_IRQHandler+0x10>)
 80048fa:	f002 ff01 	bl	8007700 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80048fe:	bf00      	nop
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	200004f4 	.word	0x200004f4

08004908 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
  return 1;
 800490c:	2301      	movs	r3, #1
}
 800490e:	4618      	mov	r0, r3
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <_kill>:

int _kill(int pid, int sig)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004922:	f005 fd7b 	bl	800a41c <__errno>
 8004926:	4603      	mov	r3, r0
 8004928:	2216      	movs	r2, #22
 800492a:	601a      	str	r2, [r3, #0]
  return -1;
 800492c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <_exit>:

void _exit (int status)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004940:	f04f 31ff 	mov.w	r1, #4294967295
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7ff ffe7 	bl	8004918 <_kill>
  while (1) {}    /* Make sure we hang here */
 800494a:	e7fe      	b.n	800494a <_exit+0x12>

0800494c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004958:	2300      	movs	r3, #0
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	e00a      	b.n	8004974 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800495e:	f3af 8000 	nop.w
 8004962:	4601      	mov	r1, r0
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	60ba      	str	r2, [r7, #8]
 800496a:	b2ca      	uxtb	r2, r1
 800496c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	3301      	adds	r3, #1
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	429a      	cmp	r2, r3
 800497a:	dbf0      	blt.n	800495e <_read+0x12>
  }

  return len;
 800497c:	687b      	ldr	r3, [r7, #4]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3718      	adds	r7, #24
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b086      	sub	sp, #24
 800498a:	af00      	add	r7, sp, #0
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004992:	2300      	movs	r3, #0
 8004994:	617b      	str	r3, [r7, #20]
 8004996:	e009      	b.n	80049ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	1c5a      	adds	r2, r3, #1
 800499c:	60ba      	str	r2, [r7, #8]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	3301      	adds	r3, #1
 80049aa:	617b      	str	r3, [r7, #20]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	dbf1      	blt.n	8004998 <_write+0x12>
  }
  return len;
 80049b4:	687b      	ldr	r3, [r7, #4]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <_close>:

int _close(int file)
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80049c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80049e6:	605a      	str	r2, [r3, #4]
  return 0;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <_isatty>:

int _isatty(int file)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80049fe:	2301      	movs	r3, #1
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
	...

08004a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a30:	4a14      	ldr	r2, [pc, #80]	; (8004a84 <_sbrk+0x5c>)
 8004a32:	4b15      	ldr	r3, [pc, #84]	; (8004a88 <_sbrk+0x60>)
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a3c:	4b13      	ldr	r3, [pc, #76]	; (8004a8c <_sbrk+0x64>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d102      	bne.n	8004a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a44:	4b11      	ldr	r3, [pc, #68]	; (8004a8c <_sbrk+0x64>)
 8004a46:	4a12      	ldr	r2, [pc, #72]	; (8004a90 <_sbrk+0x68>)
 8004a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a4a:	4b10      	ldr	r3, [pc, #64]	; (8004a8c <_sbrk+0x64>)
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4413      	add	r3, r2
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d207      	bcs.n	8004a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a58:	f005 fce0 	bl	800a41c <__errno>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	220c      	movs	r2, #12
 8004a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a62:	f04f 33ff 	mov.w	r3, #4294967295
 8004a66:	e009      	b.n	8004a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a68:	4b08      	ldr	r3, [pc, #32]	; (8004a8c <_sbrk+0x64>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a6e:	4b07      	ldr	r3, [pc, #28]	; (8004a8c <_sbrk+0x64>)
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4413      	add	r3, r2
 8004a76:	4a05      	ldr	r2, [pc, #20]	; (8004a8c <_sbrk+0x64>)
 8004a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3718      	adds	r7, #24
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	20020000 	.word	0x20020000
 8004a88:	00000400 	.word	0x00000400
 8004a8c:	2000075c 	.word	0x2000075c
 8004a90:	200008b0 	.word	0x200008b0

08004a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a98:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <SystemInit+0x20>)
 8004a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9e:	4a05      	ldr	r2, [pc, #20]	; (8004ab4 <SystemInit+0x20>)
 8004aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004aa8:	bf00      	nop
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	e000ed00 	.word	0xe000ed00

08004ab8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004af0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004abc:	480d      	ldr	r0, [pc, #52]	; (8004af4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004abe:	490e      	ldr	r1, [pc, #56]	; (8004af8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004ac0:	4a0e      	ldr	r2, [pc, #56]	; (8004afc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ac4:	e002      	b.n	8004acc <LoopCopyDataInit>

08004ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004aca:	3304      	adds	r3, #4

08004acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ad0:	d3f9      	bcc.n	8004ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ad2:	4a0b      	ldr	r2, [pc, #44]	; (8004b00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004ad4:	4c0b      	ldr	r4, [pc, #44]	; (8004b04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ad8:	e001      	b.n	8004ade <LoopFillZerobss>

08004ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004adc:	3204      	adds	r2, #4

08004ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ae0:	d3fb      	bcc.n	8004ada <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004ae2:	f7ff ffd7 	bl	8004a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ae6:	f005 fc9f 	bl	800a428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004aea:	f7ff f80d 	bl	8003b08 <main>
  bx  lr    
 8004aee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004af0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004af8:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8004afc:	0800d94c 	.word	0x0800d94c
  ldr r2, =_sbss
 8004b00:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8004b04:	200008b0 	.word	0x200008b0

08004b08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b08:	e7fe      	b.n	8004b08 <ADC_IRQHandler>
	...

08004b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b10:	4b0e      	ldr	r3, [pc, #56]	; (8004b4c <HAL_Init+0x40>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a0d      	ldr	r2, [pc, #52]	; (8004b4c <HAL_Init+0x40>)
 8004b16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b1c:	4b0b      	ldr	r3, [pc, #44]	; (8004b4c <HAL_Init+0x40>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a0a      	ldr	r2, [pc, #40]	; (8004b4c <HAL_Init+0x40>)
 8004b22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b28:	4b08      	ldr	r3, [pc, #32]	; (8004b4c <HAL_Init+0x40>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a07      	ldr	r2, [pc, #28]	; (8004b4c <HAL_Init+0x40>)
 8004b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b34:	2003      	movs	r0, #3
 8004b36:	f000 f94f 	bl	8004dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	f000 f808 	bl	8004b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b40:	f7ff fc70 	bl	8004424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40023c00 	.word	0x40023c00

08004b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b58:	4b12      	ldr	r3, [pc, #72]	; (8004ba4 <HAL_InitTick+0x54>)
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	4b12      	ldr	r3, [pc, #72]	; (8004ba8 <HAL_InitTick+0x58>)
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	4619      	mov	r1, r3
 8004b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 f967 	bl	8004e42 <HAL_SYSTICK_Config>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e00e      	b.n	8004b9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b0f      	cmp	r3, #15
 8004b82:	d80a      	bhi.n	8004b9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b84:	2200      	movs	r2, #0
 8004b86:	6879      	ldr	r1, [r7, #4]
 8004b88:	f04f 30ff 	mov.w	r0, #4294967295
 8004b8c:	f000 f92f 	bl	8004dee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b90:	4a06      	ldr	r2, [pc, #24]	; (8004bac <HAL_InitTick+0x5c>)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	e000      	b.n	8004b9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3708      	adds	r7, #8
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	2000006c 	.word	0x2000006c
 8004ba8:	20000074 	.word	0x20000074
 8004bac:	20000070 	.word	0x20000070

08004bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004bb4:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <HAL_IncTick+0x20>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	461a      	mov	r2, r3
 8004bba:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <HAL_IncTick+0x24>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	4a04      	ldr	r2, [pc, #16]	; (8004bd4 <HAL_IncTick+0x24>)
 8004bc2:	6013      	str	r3, [r2, #0]
}
 8004bc4:	bf00      	nop
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	20000074 	.word	0x20000074
 8004bd4:	20000760 	.word	0x20000760

08004bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
  return uwTick;
 8004bdc:	4b03      	ldr	r3, [pc, #12]	; (8004bec <HAL_GetTick+0x14>)
 8004bde:	681b      	ldr	r3, [r3, #0]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	20000760 	.word	0x20000760

08004bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004bf8:	f7ff ffee 	bl	8004bd8 <HAL_GetTick>
 8004bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c08:	d005      	beq.n	8004c16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c0a:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <HAL_Delay+0x44>)
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4413      	add	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c16:	bf00      	nop
 8004c18:	f7ff ffde 	bl	8004bd8 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d8f7      	bhi.n	8004c18 <HAL_Delay+0x28>
  {
  }
}
 8004c28:	bf00      	nop
 8004c2a:	bf00      	nop
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	20000074 	.word	0x20000074

08004c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f003 0307 	and.w	r3, r3, #7
 8004c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c48:	4b0c      	ldr	r3, [pc, #48]	; (8004c7c <__NVIC_SetPriorityGrouping+0x44>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c54:	4013      	ands	r3, r2
 8004c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c6a:	4a04      	ldr	r2, [pc, #16]	; (8004c7c <__NVIC_SetPriorityGrouping+0x44>)
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	60d3      	str	r3, [r2, #12]
}
 8004c70:	bf00      	nop
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	e000ed00 	.word	0xe000ed00

08004c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c80:	b480      	push	{r7}
 8004c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c84:	4b04      	ldr	r3, [pc, #16]	; (8004c98 <__NVIC_GetPriorityGrouping+0x18>)
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	0a1b      	lsrs	r3, r3, #8
 8004c8a:	f003 0307 	and.w	r3, r3, #7
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	e000ed00 	.word	0xe000ed00

08004c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	db0b      	blt.n	8004cc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cae:	79fb      	ldrb	r3, [r7, #7]
 8004cb0:	f003 021f 	and.w	r2, r3, #31
 8004cb4:	4907      	ldr	r1, [pc, #28]	; (8004cd4 <__NVIC_EnableIRQ+0x38>)
 8004cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cba:	095b      	lsrs	r3, r3, #5
 8004cbc:	2001      	movs	r0, #1
 8004cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8004cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	e000e100 	.word	0xe000e100

08004cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	4603      	mov	r3, r0
 8004ce0:	6039      	str	r1, [r7, #0]
 8004ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	db0a      	blt.n	8004d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	490c      	ldr	r1, [pc, #48]	; (8004d24 <__NVIC_SetPriority+0x4c>)
 8004cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf6:	0112      	lsls	r2, r2, #4
 8004cf8:	b2d2      	uxtb	r2, r2
 8004cfa:	440b      	add	r3, r1
 8004cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d00:	e00a      	b.n	8004d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	4908      	ldr	r1, [pc, #32]	; (8004d28 <__NVIC_SetPriority+0x50>)
 8004d08:	79fb      	ldrb	r3, [r7, #7]
 8004d0a:	f003 030f 	and.w	r3, r3, #15
 8004d0e:	3b04      	subs	r3, #4
 8004d10:	0112      	lsls	r2, r2, #4
 8004d12:	b2d2      	uxtb	r2, r2
 8004d14:	440b      	add	r3, r1
 8004d16:	761a      	strb	r2, [r3, #24]
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	e000e100 	.word	0xe000e100
 8004d28:	e000ed00 	.word	0xe000ed00

08004d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b089      	sub	sp, #36	; 0x24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	f1c3 0307 	rsb	r3, r3, #7
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	bf28      	it	cs
 8004d4a:	2304      	movcs	r3, #4
 8004d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	3304      	adds	r3, #4
 8004d52:	2b06      	cmp	r3, #6
 8004d54:	d902      	bls.n	8004d5c <NVIC_EncodePriority+0x30>
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	3b03      	subs	r3, #3
 8004d5a:	e000      	b.n	8004d5e <NVIC_EncodePriority+0x32>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d60:	f04f 32ff 	mov.w	r2, #4294967295
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	43da      	mvns	r2, r3
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	401a      	ands	r2, r3
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d74:	f04f 31ff 	mov.w	r1, #4294967295
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d7e:	43d9      	mvns	r1, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d84:	4313      	orrs	r3, r2
         );
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3724      	adds	r7, #36	; 0x24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
	...

08004d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004da4:	d301      	bcc.n	8004daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004da6:	2301      	movs	r3, #1
 8004da8:	e00f      	b.n	8004dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004daa:	4a0a      	ldr	r2, [pc, #40]	; (8004dd4 <SysTick_Config+0x40>)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3b01      	subs	r3, #1
 8004db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004db2:	210f      	movs	r1, #15
 8004db4:	f04f 30ff 	mov.w	r0, #4294967295
 8004db8:	f7ff ff8e 	bl	8004cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004dbc:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <SysTick_Config+0x40>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004dc2:	4b04      	ldr	r3, [pc, #16]	; (8004dd4 <SysTick_Config+0x40>)
 8004dc4:	2207      	movs	r2, #7
 8004dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	e000e010 	.word	0xe000e010

08004dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7ff ff29 	bl	8004c38 <__NVIC_SetPriorityGrouping>
}
 8004de6:	bf00      	nop
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b086      	sub	sp, #24
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	4603      	mov	r3, r0
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	607a      	str	r2, [r7, #4]
 8004dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e00:	f7ff ff3e 	bl	8004c80 <__NVIC_GetPriorityGrouping>
 8004e04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	68b9      	ldr	r1, [r7, #8]
 8004e0a:	6978      	ldr	r0, [r7, #20]
 8004e0c:	f7ff ff8e 	bl	8004d2c <NVIC_EncodePriority>
 8004e10:	4602      	mov	r2, r0
 8004e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e16:	4611      	mov	r1, r2
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff ff5d 	bl	8004cd8 <__NVIC_SetPriority>
}
 8004e1e:	bf00      	nop
 8004e20:	3718      	adds	r7, #24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b082      	sub	sp, #8
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff ff31 	bl	8004c9c <__NVIC_EnableIRQ>
}
 8004e3a:	bf00      	nop
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b082      	sub	sp, #8
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7ff ffa2 	bl	8004d94 <SysTick_Config>
 8004e50:	4603      	mov	r3, r0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b084      	sub	sp, #16
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e66:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004e68:	f7ff feb6 	bl	8004bd8 <HAL_GetTick>
 8004e6c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d008      	beq.n	8004e8c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2280      	movs	r2, #128	; 0x80
 8004e7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e052      	b.n	8004f32 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0216 	bic.w	r2, r2, #22
 8004e9a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	695a      	ldr	r2, [r3, #20]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004eaa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d103      	bne.n	8004ebc <HAL_DMA_Abort+0x62>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d007      	beq.n	8004ecc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0208 	bic.w	r2, r2, #8
 8004eca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 0201 	bic.w	r2, r2, #1
 8004eda:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004edc:	e013      	b.n	8004f06 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ede:	f7ff fe7b 	bl	8004bd8 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b05      	cmp	r3, #5
 8004eea:	d90c      	bls.n	8004f06 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2203      	movs	r2, #3
 8004ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e015      	b.n	8004f32 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1e4      	bne.n	8004ede <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f18:	223f      	movs	r2, #63	; 0x3f
 8004f1a:	409a      	lsls	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d004      	beq.n	8004f58 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2280      	movs	r2, #128	; 0x80
 8004f52:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e00c      	b.n	8004f72 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2205      	movs	r2, #5
 8004f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0201 	bic.w	r2, r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
	...

08004f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b089      	sub	sp, #36	; 0x24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f96:	2300      	movs	r3, #0
 8004f98:	61fb      	str	r3, [r7, #28]
 8004f9a:	e159      	b.n	8005250 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	4013      	ands	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	f040 8148 	bne.w	800524a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d005      	beq.n	8004fd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d130      	bne.n	8005034 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	2203      	movs	r2, #3
 8004fde:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe2:	43db      	mvns	r3, r3
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	68da      	ldr	r2, [r3, #12]
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005008:	2201      	movs	r2, #1
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	fa02 f303 	lsl.w	r3, r2, r3
 8005010:	43db      	mvns	r3, r3
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	4013      	ands	r3, r2
 8005016:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	091b      	lsrs	r3, r3, #4
 800501e:	f003 0201 	and.w	r2, r3, #1
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	fa02 f303 	lsl.w	r3, r2, r3
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	4313      	orrs	r3, r2
 800502c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f003 0303 	and.w	r3, r3, #3
 800503c:	2b03      	cmp	r3, #3
 800503e:	d017      	beq.n	8005070 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	2203      	movs	r2, #3
 800504c:	fa02 f303 	lsl.w	r3, r2, r3
 8005050:	43db      	mvns	r3, r3
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	4013      	ands	r3, r2
 8005056:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	fa02 f303 	lsl.w	r3, r2, r3
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	4313      	orrs	r3, r2
 8005068:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f003 0303 	and.w	r3, r3, #3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d123      	bne.n	80050c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	08da      	lsrs	r2, r3, #3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3208      	adds	r2, #8
 8005084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005088:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	220f      	movs	r2, #15
 8005094:	fa02 f303 	lsl.w	r3, r2, r3
 8005098:	43db      	mvns	r3, r3
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	4013      	ands	r3, r2
 800509e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	691a      	ldr	r2, [r3, #16]
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	fa02 f303 	lsl.w	r3, r2, r3
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	08da      	lsrs	r2, r3, #3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	3208      	adds	r2, #8
 80050be:	69b9      	ldr	r1, [r7, #24]
 80050c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	2203      	movs	r2, #3
 80050d0:	fa02 f303 	lsl.w	r3, r2, r3
 80050d4:	43db      	mvns	r3, r3
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	4013      	ands	r3, r2
 80050da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f003 0203 	and.w	r2, r3, #3
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 80a2 	beq.w	800524a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005106:	2300      	movs	r3, #0
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	4b57      	ldr	r3, [pc, #348]	; (8005268 <HAL_GPIO_Init+0x2e8>)
 800510c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510e:	4a56      	ldr	r2, [pc, #344]	; (8005268 <HAL_GPIO_Init+0x2e8>)
 8005110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005114:	6453      	str	r3, [r2, #68]	; 0x44
 8005116:	4b54      	ldr	r3, [pc, #336]	; (8005268 <HAL_GPIO_Init+0x2e8>)
 8005118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005122:	4a52      	ldr	r2, [pc, #328]	; (800526c <HAL_GPIO_Init+0x2ec>)
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	089b      	lsrs	r3, r3, #2
 8005128:	3302      	adds	r3, #2
 800512a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800512e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	f003 0303 	and.w	r3, r3, #3
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	220f      	movs	r2, #15
 800513a:	fa02 f303 	lsl.w	r3, r2, r3
 800513e:	43db      	mvns	r3, r3
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	4013      	ands	r3, r2
 8005144:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a49      	ldr	r2, [pc, #292]	; (8005270 <HAL_GPIO_Init+0x2f0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d019      	beq.n	8005182 <HAL_GPIO_Init+0x202>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a48      	ldr	r2, [pc, #288]	; (8005274 <HAL_GPIO_Init+0x2f4>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d013      	beq.n	800517e <HAL_GPIO_Init+0x1fe>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a47      	ldr	r2, [pc, #284]	; (8005278 <HAL_GPIO_Init+0x2f8>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00d      	beq.n	800517a <HAL_GPIO_Init+0x1fa>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a46      	ldr	r2, [pc, #280]	; (800527c <HAL_GPIO_Init+0x2fc>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d007      	beq.n	8005176 <HAL_GPIO_Init+0x1f6>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a45      	ldr	r2, [pc, #276]	; (8005280 <HAL_GPIO_Init+0x300>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d101      	bne.n	8005172 <HAL_GPIO_Init+0x1f2>
 800516e:	2304      	movs	r3, #4
 8005170:	e008      	b.n	8005184 <HAL_GPIO_Init+0x204>
 8005172:	2307      	movs	r3, #7
 8005174:	e006      	b.n	8005184 <HAL_GPIO_Init+0x204>
 8005176:	2303      	movs	r3, #3
 8005178:	e004      	b.n	8005184 <HAL_GPIO_Init+0x204>
 800517a:	2302      	movs	r3, #2
 800517c:	e002      	b.n	8005184 <HAL_GPIO_Init+0x204>
 800517e:	2301      	movs	r3, #1
 8005180:	e000      	b.n	8005184 <HAL_GPIO_Init+0x204>
 8005182:	2300      	movs	r3, #0
 8005184:	69fa      	ldr	r2, [r7, #28]
 8005186:	f002 0203 	and.w	r2, r2, #3
 800518a:	0092      	lsls	r2, r2, #2
 800518c:	4093      	lsls	r3, r2
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	4313      	orrs	r3, r2
 8005192:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005194:	4935      	ldr	r1, [pc, #212]	; (800526c <HAL_GPIO_Init+0x2ec>)
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	089b      	lsrs	r3, r3, #2
 800519a:	3302      	adds	r3, #2
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051a2:	4b38      	ldr	r3, [pc, #224]	; (8005284 <HAL_GPIO_Init+0x304>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	43db      	mvns	r3, r3
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	4013      	ands	r3, r2
 80051b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051c6:	4a2f      	ldr	r2, [pc, #188]	; (8005284 <HAL_GPIO_Init+0x304>)
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051cc:	4b2d      	ldr	r3, [pc, #180]	; (8005284 <HAL_GPIO_Init+0x304>)
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	43db      	mvns	r3, r3
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	4013      	ands	r3, r2
 80051da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051f0:	4a24      	ldr	r2, [pc, #144]	; (8005284 <HAL_GPIO_Init+0x304>)
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80051f6:	4b23      	ldr	r3, [pc, #140]	; (8005284 <HAL_GPIO_Init+0x304>)
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	43db      	mvns	r3, r3
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	4013      	ands	r3, r2
 8005204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	4313      	orrs	r3, r2
 8005218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800521a:	4a1a      	ldr	r2, [pc, #104]	; (8005284 <HAL_GPIO_Init+0x304>)
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005220:	4b18      	ldr	r3, [pc, #96]	; (8005284 <HAL_GPIO_Init+0x304>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	43db      	mvns	r3, r3
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	4013      	ands	r3, r2
 800522e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d003      	beq.n	8005244 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	4313      	orrs	r3, r2
 8005242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005244:	4a0f      	ldr	r2, [pc, #60]	; (8005284 <HAL_GPIO_Init+0x304>)
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	3301      	adds	r3, #1
 800524e:	61fb      	str	r3, [r7, #28]
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	2b0f      	cmp	r3, #15
 8005254:	f67f aea2 	bls.w	8004f9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005258:	bf00      	nop
 800525a:	bf00      	nop
 800525c:	3724      	adds	r7, #36	; 0x24
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40023800 	.word	0x40023800
 800526c:	40013800 	.word	0x40013800
 8005270:	40020000 	.word	0x40020000
 8005274:	40020400 	.word	0x40020400
 8005278:	40020800 	.word	0x40020800
 800527c:	40020c00 	.word	0x40020c00
 8005280:	40021000 	.word	0x40021000
 8005284:	40013c00 	.word	0x40013c00

08005288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	460b      	mov	r3, r1
 8005292:	807b      	strh	r3, [r7, #2]
 8005294:	4613      	mov	r3, r2
 8005296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005298:	787b      	ldrb	r3, [r7, #1]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800529e:	887a      	ldrh	r2, [r7, #2]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80052a4:	e003      	b.n	80052ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80052a6:	887b      	ldrh	r3, [r7, #2]
 80052a8:	041a      	lsls	r2, r3, #16
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	619a      	str	r2, [r3, #24]
}
 80052ae:	bf00      	nop
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
	...

080052bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e267      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d075      	beq.n	80053c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052da:	4b88      	ldr	r3, [pc, #544]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f003 030c 	and.w	r3, r3, #12
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	d00c      	beq.n	8005300 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052e6:	4b85      	ldr	r3, [pc, #532]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052ee:	2b08      	cmp	r3, #8
 80052f0:	d112      	bne.n	8005318 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052f2:	4b82      	ldr	r3, [pc, #520]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052fe:	d10b      	bne.n	8005318 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005300:	4b7e      	ldr	r3, [pc, #504]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d05b      	beq.n	80053c4 <HAL_RCC_OscConfig+0x108>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d157      	bne.n	80053c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e242      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005320:	d106      	bne.n	8005330 <HAL_RCC_OscConfig+0x74>
 8005322:	4b76      	ldr	r3, [pc, #472]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a75      	ldr	r2, [pc, #468]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	e01d      	b.n	800536c <HAL_RCC_OscConfig+0xb0>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005338:	d10c      	bne.n	8005354 <HAL_RCC_OscConfig+0x98>
 800533a:	4b70      	ldr	r3, [pc, #448]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a6f      	ldr	r2, [pc, #444]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005344:	6013      	str	r3, [r2, #0]
 8005346:	4b6d      	ldr	r3, [pc, #436]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a6c      	ldr	r2, [pc, #432]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 800534c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	e00b      	b.n	800536c <HAL_RCC_OscConfig+0xb0>
 8005354:	4b69      	ldr	r3, [pc, #420]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a68      	ldr	r2, [pc, #416]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 800535a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800535e:	6013      	str	r3, [r2, #0]
 8005360:	4b66      	ldr	r3, [pc, #408]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a65      	ldr	r2, [pc, #404]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800536a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d013      	beq.n	800539c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005374:	f7ff fc30 	bl	8004bd8 <HAL_GetTick>
 8005378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800537a:	e008      	b.n	800538e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800537c:	f7ff fc2c 	bl	8004bd8 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b64      	cmp	r3, #100	; 0x64
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e207      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800538e:	4b5b      	ldr	r3, [pc, #364]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d0f0      	beq.n	800537c <HAL_RCC_OscConfig+0xc0>
 800539a:	e014      	b.n	80053c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800539c:	f7ff fc1c 	bl	8004bd8 <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053a4:	f7ff fc18 	bl	8004bd8 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b64      	cmp	r3, #100	; 0x64
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e1f3      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053b6:	4b51      	ldr	r3, [pc, #324]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1f0      	bne.n	80053a4 <HAL_RCC_OscConfig+0xe8>
 80053c2:	e000      	b.n	80053c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d063      	beq.n	800549a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053d2:	4b4a      	ldr	r3, [pc, #296]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 030c 	and.w	r3, r3, #12
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00b      	beq.n	80053f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053de:	4b47      	ldr	r3, [pc, #284]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d11c      	bne.n	8005424 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053ea:	4b44      	ldr	r3, [pc, #272]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d116      	bne.n	8005424 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053f6:	4b41      	ldr	r3, [pc, #260]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d005      	beq.n	800540e <HAL_RCC_OscConfig+0x152>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d001      	beq.n	800540e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e1c7      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800540e:	4b3b      	ldr	r3, [pc, #236]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	4937      	ldr	r1, [pc, #220]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 800541e:	4313      	orrs	r3, r2
 8005420:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005422:	e03a      	b.n	800549a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d020      	beq.n	800546e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800542c:	4b34      	ldr	r3, [pc, #208]	; (8005500 <HAL_RCC_OscConfig+0x244>)
 800542e:	2201      	movs	r2, #1
 8005430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005432:	f7ff fbd1 	bl	8004bd8 <HAL_GetTick>
 8005436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005438:	e008      	b.n	800544c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800543a:	f7ff fbcd 	bl	8004bd8 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d901      	bls.n	800544c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e1a8      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800544c:	4b2b      	ldr	r3, [pc, #172]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0f0      	beq.n	800543a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005458:	4b28      	ldr	r3, [pc, #160]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	4925      	ldr	r1, [pc, #148]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005468:	4313      	orrs	r3, r2
 800546a:	600b      	str	r3, [r1, #0]
 800546c:	e015      	b.n	800549a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800546e:	4b24      	ldr	r3, [pc, #144]	; (8005500 <HAL_RCC_OscConfig+0x244>)
 8005470:	2200      	movs	r2, #0
 8005472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005474:	f7ff fbb0 	bl	8004bd8 <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800547c:	f7ff fbac 	bl	8004bd8 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e187      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800548e:	4b1b      	ldr	r3, [pc, #108]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1f0      	bne.n	800547c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0308 	and.w	r3, r3, #8
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d036      	beq.n	8005514 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d016      	beq.n	80054dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054ae:	4b15      	ldr	r3, [pc, #84]	; (8005504 <HAL_RCC_OscConfig+0x248>)
 80054b0:	2201      	movs	r2, #1
 80054b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b4:	f7ff fb90 	bl	8004bd8 <HAL_GetTick>
 80054b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ba:	e008      	b.n	80054ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054bc:	f7ff fb8c 	bl	8004bd8 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e167      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ce:	4b0b      	ldr	r3, [pc, #44]	; (80054fc <HAL_RCC_OscConfig+0x240>)
 80054d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0f0      	beq.n	80054bc <HAL_RCC_OscConfig+0x200>
 80054da:	e01b      	b.n	8005514 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054dc:	4b09      	ldr	r3, [pc, #36]	; (8005504 <HAL_RCC_OscConfig+0x248>)
 80054de:	2200      	movs	r2, #0
 80054e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054e2:	f7ff fb79 	bl	8004bd8 <HAL_GetTick>
 80054e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054e8:	e00e      	b.n	8005508 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054ea:	f7ff fb75 	bl	8004bd8 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d907      	bls.n	8005508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e150      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
 80054fc:	40023800 	.word	0x40023800
 8005500:	42470000 	.word	0x42470000
 8005504:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005508:	4b88      	ldr	r3, [pc, #544]	; (800572c <HAL_RCC_OscConfig+0x470>)
 800550a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800550c:	f003 0302 	and.w	r3, r3, #2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1ea      	bne.n	80054ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 8097 	beq.w	8005650 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005522:	2300      	movs	r3, #0
 8005524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005526:	4b81      	ldr	r3, [pc, #516]	; (800572c <HAL_RCC_OscConfig+0x470>)
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10f      	bne.n	8005552 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005532:	2300      	movs	r3, #0
 8005534:	60bb      	str	r3, [r7, #8]
 8005536:	4b7d      	ldr	r3, [pc, #500]	; (800572c <HAL_RCC_OscConfig+0x470>)
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	4a7c      	ldr	r2, [pc, #496]	; (800572c <HAL_RCC_OscConfig+0x470>)
 800553c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005540:	6413      	str	r3, [r2, #64]	; 0x40
 8005542:	4b7a      	ldr	r3, [pc, #488]	; (800572c <HAL_RCC_OscConfig+0x470>)
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800554a:	60bb      	str	r3, [r7, #8]
 800554c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800554e:	2301      	movs	r3, #1
 8005550:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005552:	4b77      	ldr	r3, [pc, #476]	; (8005730 <HAL_RCC_OscConfig+0x474>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555a:	2b00      	cmp	r3, #0
 800555c:	d118      	bne.n	8005590 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800555e:	4b74      	ldr	r3, [pc, #464]	; (8005730 <HAL_RCC_OscConfig+0x474>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a73      	ldr	r2, [pc, #460]	; (8005730 <HAL_RCC_OscConfig+0x474>)
 8005564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800556a:	f7ff fb35 	bl	8004bd8 <HAL_GetTick>
 800556e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005570:	e008      	b.n	8005584 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005572:	f7ff fb31 	bl	8004bd8 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d901      	bls.n	8005584 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e10c      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005584:	4b6a      	ldr	r3, [pc, #424]	; (8005730 <HAL_RCC_OscConfig+0x474>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558c:	2b00      	cmp	r3, #0
 800558e:	d0f0      	beq.n	8005572 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d106      	bne.n	80055a6 <HAL_RCC_OscConfig+0x2ea>
 8005598:	4b64      	ldr	r3, [pc, #400]	; (800572c <HAL_RCC_OscConfig+0x470>)
 800559a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559c:	4a63      	ldr	r2, [pc, #396]	; (800572c <HAL_RCC_OscConfig+0x470>)
 800559e:	f043 0301 	orr.w	r3, r3, #1
 80055a2:	6713      	str	r3, [r2, #112]	; 0x70
 80055a4:	e01c      	b.n	80055e0 <HAL_RCC_OscConfig+0x324>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	2b05      	cmp	r3, #5
 80055ac:	d10c      	bne.n	80055c8 <HAL_RCC_OscConfig+0x30c>
 80055ae:	4b5f      	ldr	r3, [pc, #380]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80055b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b2:	4a5e      	ldr	r2, [pc, #376]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80055b4:	f043 0304 	orr.w	r3, r3, #4
 80055b8:	6713      	str	r3, [r2, #112]	; 0x70
 80055ba:	4b5c      	ldr	r3, [pc, #368]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80055bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055be:	4a5b      	ldr	r2, [pc, #364]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80055c0:	f043 0301 	orr.w	r3, r3, #1
 80055c4:	6713      	str	r3, [r2, #112]	; 0x70
 80055c6:	e00b      	b.n	80055e0 <HAL_RCC_OscConfig+0x324>
 80055c8:	4b58      	ldr	r3, [pc, #352]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80055ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055cc:	4a57      	ldr	r2, [pc, #348]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80055ce:	f023 0301 	bic.w	r3, r3, #1
 80055d2:	6713      	str	r3, [r2, #112]	; 0x70
 80055d4:	4b55      	ldr	r3, [pc, #340]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80055d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d8:	4a54      	ldr	r2, [pc, #336]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80055da:	f023 0304 	bic.w	r3, r3, #4
 80055de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d015      	beq.n	8005614 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e8:	f7ff faf6 	bl	8004bd8 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ee:	e00a      	b.n	8005606 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055f0:	f7ff faf2 	bl	8004bd8 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80055fe:	4293      	cmp	r3, r2
 8005600:	d901      	bls.n	8005606 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e0cb      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005606:	4b49      	ldr	r3, [pc, #292]	; (800572c <HAL_RCC_OscConfig+0x470>)
 8005608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0ee      	beq.n	80055f0 <HAL_RCC_OscConfig+0x334>
 8005612:	e014      	b.n	800563e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005614:	f7ff fae0 	bl	8004bd8 <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800561a:	e00a      	b.n	8005632 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800561c:	f7ff fadc 	bl	8004bd8 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	f241 3288 	movw	r2, #5000	; 0x1388
 800562a:	4293      	cmp	r3, r2
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e0b5      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005632:	4b3e      	ldr	r3, [pc, #248]	; (800572c <HAL_RCC_OscConfig+0x470>)
 8005634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1ee      	bne.n	800561c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800563e:	7dfb      	ldrb	r3, [r7, #23]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d105      	bne.n	8005650 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005644:	4b39      	ldr	r3, [pc, #228]	; (800572c <HAL_RCC_OscConfig+0x470>)
 8005646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005648:	4a38      	ldr	r2, [pc, #224]	; (800572c <HAL_RCC_OscConfig+0x470>)
 800564a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800564e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 80a1 	beq.w	800579c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800565a:	4b34      	ldr	r3, [pc, #208]	; (800572c <HAL_RCC_OscConfig+0x470>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f003 030c 	and.w	r3, r3, #12
 8005662:	2b08      	cmp	r3, #8
 8005664:	d05c      	beq.n	8005720 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	2b02      	cmp	r3, #2
 800566c:	d141      	bne.n	80056f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800566e:	4b31      	ldr	r3, [pc, #196]	; (8005734 <HAL_RCC_OscConfig+0x478>)
 8005670:	2200      	movs	r2, #0
 8005672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005674:	f7ff fab0 	bl	8004bd8 <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800567c:	f7ff faac 	bl	8004bd8 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e087      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800568e:	4b27      	ldr	r3, [pc, #156]	; (800572c <HAL_RCC_OscConfig+0x470>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1f0      	bne.n	800567c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	69da      	ldr	r2, [r3, #28]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	431a      	orrs	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	019b      	lsls	r3, r3, #6
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b0:	085b      	lsrs	r3, r3, #1
 80056b2:	3b01      	subs	r3, #1
 80056b4:	041b      	lsls	r3, r3, #16
 80056b6:	431a      	orrs	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056bc:	061b      	lsls	r3, r3, #24
 80056be:	491b      	ldr	r1, [pc, #108]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056c4:	4b1b      	ldr	r3, [pc, #108]	; (8005734 <HAL_RCC_OscConfig+0x478>)
 80056c6:	2201      	movs	r2, #1
 80056c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ca:	f7ff fa85 	bl	8004bd8 <HAL_GetTick>
 80056ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056d0:	e008      	b.n	80056e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056d2:	f7ff fa81 	bl	8004bd8 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d901      	bls.n	80056e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e05c      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056e4:	4b11      	ldr	r3, [pc, #68]	; (800572c <HAL_RCC_OscConfig+0x470>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0f0      	beq.n	80056d2 <HAL_RCC_OscConfig+0x416>
 80056f0:	e054      	b.n	800579c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056f2:	4b10      	ldr	r3, [pc, #64]	; (8005734 <HAL_RCC_OscConfig+0x478>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f8:	f7ff fa6e 	bl	8004bd8 <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005700:	f7ff fa6a 	bl	8004bd8 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e045      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005712:	4b06      	ldr	r3, [pc, #24]	; (800572c <HAL_RCC_OscConfig+0x470>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1f0      	bne.n	8005700 <HAL_RCC_OscConfig+0x444>
 800571e:	e03d      	b.n	800579c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d107      	bne.n	8005738 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e038      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
 800572c:	40023800 	.word	0x40023800
 8005730:	40007000 	.word	0x40007000
 8005734:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005738:	4b1b      	ldr	r3, [pc, #108]	; (80057a8 <HAL_RCC_OscConfig+0x4ec>)
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d028      	beq.n	8005798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005750:	429a      	cmp	r2, r3
 8005752:	d121      	bne.n	8005798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800575e:	429a      	cmp	r2, r3
 8005760:	d11a      	bne.n	8005798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005768:	4013      	ands	r3, r2
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800576e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005770:	4293      	cmp	r3, r2
 8005772:	d111      	bne.n	8005798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577e:	085b      	lsrs	r3, r3, #1
 8005780:	3b01      	subs	r3, #1
 8005782:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005784:	429a      	cmp	r2, r3
 8005786:	d107      	bne.n	8005798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005792:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005794:	429a      	cmp	r2, r3
 8005796:	d001      	beq.n	800579c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e000      	b.n	800579e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	40023800 	.word	0x40023800

080057ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e0cc      	b.n	800595a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057c0:	4b68      	ldr	r3, [pc, #416]	; (8005964 <HAL_RCC_ClockConfig+0x1b8>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d90c      	bls.n	80057e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ce:	4b65      	ldr	r3, [pc, #404]	; (8005964 <HAL_RCC_ClockConfig+0x1b8>)
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	b2d2      	uxtb	r2, r2
 80057d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057d6:	4b63      	ldr	r3, [pc, #396]	; (8005964 <HAL_RCC_ClockConfig+0x1b8>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0307 	and.w	r3, r3, #7
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d001      	beq.n	80057e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e0b8      	b.n	800595a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d020      	beq.n	8005836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d005      	beq.n	800580c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005800:	4b59      	ldr	r3, [pc, #356]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	4a58      	ldr	r2, [pc, #352]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 8005806:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800580a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0308 	and.w	r3, r3, #8
 8005814:	2b00      	cmp	r3, #0
 8005816:	d005      	beq.n	8005824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005818:	4b53      	ldr	r3, [pc, #332]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	4a52      	ldr	r2, [pc, #328]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 800581e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005824:	4b50      	ldr	r3, [pc, #320]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	494d      	ldr	r1, [pc, #308]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 8005832:	4313      	orrs	r3, r2
 8005834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	2b00      	cmp	r3, #0
 8005840:	d044      	beq.n	80058cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d107      	bne.n	800585a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800584a:	4b47      	ldr	r3, [pc, #284]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d119      	bne.n	800588a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e07f      	b.n	800595a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	2b02      	cmp	r3, #2
 8005860:	d003      	beq.n	800586a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005866:	2b03      	cmp	r3, #3
 8005868:	d107      	bne.n	800587a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800586a:	4b3f      	ldr	r3, [pc, #252]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d109      	bne.n	800588a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e06f      	b.n	800595a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800587a:	4b3b      	ldr	r3, [pc, #236]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e067      	b.n	800595a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800588a:	4b37      	ldr	r3, [pc, #220]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f023 0203 	bic.w	r2, r3, #3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	4934      	ldr	r1, [pc, #208]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 8005898:	4313      	orrs	r3, r2
 800589a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800589c:	f7ff f99c 	bl	8004bd8 <HAL_GetTick>
 80058a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058a2:	e00a      	b.n	80058ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058a4:	f7ff f998 	bl	8004bd8 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e04f      	b.n	800595a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ba:	4b2b      	ldr	r3, [pc, #172]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f003 020c 	and.w	r2, r3, #12
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d1eb      	bne.n	80058a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058cc:	4b25      	ldr	r3, [pc, #148]	; (8005964 <HAL_RCC_ClockConfig+0x1b8>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d20c      	bcs.n	80058f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058da:	4b22      	ldr	r3, [pc, #136]	; (8005964 <HAL_RCC_ClockConfig+0x1b8>)
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	b2d2      	uxtb	r2, r2
 80058e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058e2:	4b20      	ldr	r3, [pc, #128]	; (8005964 <HAL_RCC_ClockConfig+0x1b8>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d001      	beq.n	80058f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e032      	b.n	800595a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0304 	and.w	r3, r3, #4
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d008      	beq.n	8005912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005900:	4b19      	ldr	r3, [pc, #100]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	4916      	ldr	r1, [pc, #88]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 800590e:	4313      	orrs	r3, r2
 8005910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0308 	and.w	r3, r3, #8
 800591a:	2b00      	cmp	r3, #0
 800591c:	d009      	beq.n	8005932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800591e:	4b12      	ldr	r3, [pc, #72]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	490e      	ldr	r1, [pc, #56]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 800592e:	4313      	orrs	r3, r2
 8005930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005932:	f000 f821 	bl	8005978 <HAL_RCC_GetSysClockFreq>
 8005936:	4602      	mov	r2, r0
 8005938:	4b0b      	ldr	r3, [pc, #44]	; (8005968 <HAL_RCC_ClockConfig+0x1bc>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	091b      	lsrs	r3, r3, #4
 800593e:	f003 030f 	and.w	r3, r3, #15
 8005942:	490a      	ldr	r1, [pc, #40]	; (800596c <HAL_RCC_ClockConfig+0x1c0>)
 8005944:	5ccb      	ldrb	r3, [r1, r3]
 8005946:	fa22 f303 	lsr.w	r3, r2, r3
 800594a:	4a09      	ldr	r2, [pc, #36]	; (8005970 <HAL_RCC_ClockConfig+0x1c4>)
 800594c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800594e:	4b09      	ldr	r3, [pc, #36]	; (8005974 <HAL_RCC_ClockConfig+0x1c8>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4618      	mov	r0, r3
 8005954:	f7ff f8fc 	bl	8004b50 <HAL_InitTick>

  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	40023c00 	.word	0x40023c00
 8005968:	40023800 	.word	0x40023800
 800596c:	0800d4fc 	.word	0x0800d4fc
 8005970:	2000006c 	.word	0x2000006c
 8005974:	20000070 	.word	0x20000070

08005978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800597c:	b094      	sub	sp, #80	; 0x50
 800597e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	647b      	str	r3, [r7, #68]	; 0x44
 8005984:	2300      	movs	r3, #0
 8005986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005988:	2300      	movs	r3, #0
 800598a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800598c:	2300      	movs	r3, #0
 800598e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005990:	4b79      	ldr	r3, [pc, #484]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f003 030c 	and.w	r3, r3, #12
 8005998:	2b08      	cmp	r3, #8
 800599a:	d00d      	beq.n	80059b8 <HAL_RCC_GetSysClockFreq+0x40>
 800599c:	2b08      	cmp	r3, #8
 800599e:	f200 80e1 	bhi.w	8005b64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <HAL_RCC_GetSysClockFreq+0x34>
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d003      	beq.n	80059b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80059aa:	e0db      	b.n	8005b64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059ac:	4b73      	ldr	r3, [pc, #460]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x204>)
 80059ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80059b0:	e0db      	b.n	8005b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059b2:	4b73      	ldr	r3, [pc, #460]	; (8005b80 <HAL_RCC_GetSysClockFreq+0x208>)
 80059b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80059b6:	e0d8      	b.n	8005b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059b8:	4b6f      	ldr	r3, [pc, #444]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059c2:	4b6d      	ldr	r3, [pc, #436]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d063      	beq.n	8005a96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059ce:	4b6a      	ldr	r3, [pc, #424]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	099b      	lsrs	r3, r3, #6
 80059d4:	2200      	movs	r2, #0
 80059d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80059d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80059da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e0:	633b      	str	r3, [r7, #48]	; 0x30
 80059e2:	2300      	movs	r3, #0
 80059e4:	637b      	str	r3, [r7, #52]	; 0x34
 80059e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80059ea:	4622      	mov	r2, r4
 80059ec:	462b      	mov	r3, r5
 80059ee:	f04f 0000 	mov.w	r0, #0
 80059f2:	f04f 0100 	mov.w	r1, #0
 80059f6:	0159      	lsls	r1, r3, #5
 80059f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059fc:	0150      	lsls	r0, r2, #5
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	4621      	mov	r1, r4
 8005a04:	1a51      	subs	r1, r2, r1
 8005a06:	6139      	str	r1, [r7, #16]
 8005a08:	4629      	mov	r1, r5
 8005a0a:	eb63 0301 	sbc.w	r3, r3, r1
 8005a0e:	617b      	str	r3, [r7, #20]
 8005a10:	f04f 0200 	mov.w	r2, #0
 8005a14:	f04f 0300 	mov.w	r3, #0
 8005a18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a1c:	4659      	mov	r1, fp
 8005a1e:	018b      	lsls	r3, r1, #6
 8005a20:	4651      	mov	r1, sl
 8005a22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a26:	4651      	mov	r1, sl
 8005a28:	018a      	lsls	r2, r1, #6
 8005a2a:	4651      	mov	r1, sl
 8005a2c:	ebb2 0801 	subs.w	r8, r2, r1
 8005a30:	4659      	mov	r1, fp
 8005a32:	eb63 0901 	sbc.w	r9, r3, r1
 8005a36:	f04f 0200 	mov.w	r2, #0
 8005a3a:	f04f 0300 	mov.w	r3, #0
 8005a3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a4a:	4690      	mov	r8, r2
 8005a4c:	4699      	mov	r9, r3
 8005a4e:	4623      	mov	r3, r4
 8005a50:	eb18 0303 	adds.w	r3, r8, r3
 8005a54:	60bb      	str	r3, [r7, #8]
 8005a56:	462b      	mov	r3, r5
 8005a58:	eb49 0303 	adc.w	r3, r9, r3
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	f04f 0200 	mov.w	r2, #0
 8005a62:	f04f 0300 	mov.w	r3, #0
 8005a66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a6a:	4629      	mov	r1, r5
 8005a6c:	024b      	lsls	r3, r1, #9
 8005a6e:	4621      	mov	r1, r4
 8005a70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a74:	4621      	mov	r1, r4
 8005a76:	024a      	lsls	r2, r1, #9
 8005a78:	4610      	mov	r0, r2
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a7e:	2200      	movs	r2, #0
 8005a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a88:	f7fb f906 	bl	8000c98 <__aeabi_uldivmod>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4613      	mov	r3, r2
 8005a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a94:	e058      	b.n	8005b48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a96:	4b38      	ldr	r3, [pc, #224]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	099b      	lsrs	r3, r3, #6
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005aa6:	623b      	str	r3, [r7, #32]
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8005aac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ab0:	4642      	mov	r2, r8
 8005ab2:	464b      	mov	r3, r9
 8005ab4:	f04f 0000 	mov.w	r0, #0
 8005ab8:	f04f 0100 	mov.w	r1, #0
 8005abc:	0159      	lsls	r1, r3, #5
 8005abe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ac2:	0150      	lsls	r0, r2, #5
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4641      	mov	r1, r8
 8005aca:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ace:	4649      	mov	r1, r9
 8005ad0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ad4:	f04f 0200 	mov.w	r2, #0
 8005ad8:	f04f 0300 	mov.w	r3, #0
 8005adc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ae0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ae4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ae8:	ebb2 040a 	subs.w	r4, r2, sl
 8005aec:	eb63 050b 	sbc.w	r5, r3, fp
 8005af0:	f04f 0200 	mov.w	r2, #0
 8005af4:	f04f 0300 	mov.w	r3, #0
 8005af8:	00eb      	lsls	r3, r5, #3
 8005afa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005afe:	00e2      	lsls	r2, r4, #3
 8005b00:	4614      	mov	r4, r2
 8005b02:	461d      	mov	r5, r3
 8005b04:	4643      	mov	r3, r8
 8005b06:	18e3      	adds	r3, r4, r3
 8005b08:	603b      	str	r3, [r7, #0]
 8005b0a:	464b      	mov	r3, r9
 8005b0c:	eb45 0303 	adc.w	r3, r5, r3
 8005b10:	607b      	str	r3, [r7, #4]
 8005b12:	f04f 0200 	mov.w	r2, #0
 8005b16:	f04f 0300 	mov.w	r3, #0
 8005b1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b1e:	4629      	mov	r1, r5
 8005b20:	028b      	lsls	r3, r1, #10
 8005b22:	4621      	mov	r1, r4
 8005b24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b28:	4621      	mov	r1, r4
 8005b2a:	028a      	lsls	r2, r1, #10
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	4619      	mov	r1, r3
 8005b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b32:	2200      	movs	r2, #0
 8005b34:	61bb      	str	r3, [r7, #24]
 8005b36:	61fa      	str	r2, [r7, #28]
 8005b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b3c:	f7fb f8ac 	bl	8000c98 <__aeabi_uldivmod>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4613      	mov	r3, r2
 8005b46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b48:	4b0b      	ldr	r3, [pc, #44]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	0c1b      	lsrs	r3, r3, #16
 8005b4e:	f003 0303 	and.w	r3, r3, #3
 8005b52:	3301      	adds	r3, #1
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005b58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b62:	e002      	b.n	8005b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b64:	4b05      	ldr	r3, [pc, #20]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x204>)
 8005b66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3750      	adds	r7, #80	; 0x50
 8005b70:	46bd      	mov	sp, r7
 8005b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b76:	bf00      	nop
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	00f42400 	.word	0x00f42400
 8005b80:	007a1200 	.word	0x007a1200

08005b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b84:	b480      	push	{r7}
 8005b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b88:	4b03      	ldr	r3, [pc, #12]	; (8005b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	2000006c 	.word	0x2000006c

08005b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ba0:	f7ff fff0 	bl	8005b84 <HAL_RCC_GetHCLKFreq>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	4b05      	ldr	r3, [pc, #20]	; (8005bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	0a9b      	lsrs	r3, r3, #10
 8005bac:	f003 0307 	and.w	r3, r3, #7
 8005bb0:	4903      	ldr	r1, [pc, #12]	; (8005bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bb2:	5ccb      	ldrb	r3, [r1, r3]
 8005bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	40023800 	.word	0x40023800
 8005bc0:	0800d50c 	.word	0x0800d50c

08005bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005bc8:	f7ff ffdc 	bl	8005b84 <HAL_RCC_GetHCLKFreq>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	4b05      	ldr	r3, [pc, #20]	; (8005be4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	0b5b      	lsrs	r3, r3, #13
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	4903      	ldr	r1, [pc, #12]	; (8005be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bda:	5ccb      	ldrb	r3, [r1, r3]
 8005bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	40023800 	.word	0x40023800
 8005be8:	0800d50c 	.word	0x0800d50c

08005bec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e07b      	b.n	8005cf6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d108      	bne.n	8005c18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c0e:	d009      	beq.n	8005c24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	61da      	str	r2, [r3, #28]
 8005c16:	e005      	b.n	8005c24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7fe fc18 	bl	8004474 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c6c:	431a      	orrs	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c76:	431a      	orrs	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	431a      	orrs	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c94:	431a      	orrs	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca8:	ea42 0103 	orr.w	r1, r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	0c1b      	lsrs	r3, r3, #16
 8005cc2:	f003 0104 	and.w	r1, r3, #4
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cca:	f003 0210 	and.w	r2, r3, #16
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	69da      	ldr	r2, [r3, #28]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ce4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b088      	sub	sp, #32
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	60f8      	str	r0, [r7, #12]
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	603b      	str	r3, [r7, #0]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d101      	bne.n	8005d20 <HAL_SPI_Transmit+0x22>
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	e126      	b.n	8005f6e <HAL_SPI_Transmit+0x270>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d28:	f7fe ff56 	bl	8004bd8 <HAL_GetTick>
 8005d2c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005d2e:	88fb      	ldrh	r3, [r7, #6]
 8005d30:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d002      	beq.n	8005d44 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005d3e:	2302      	movs	r3, #2
 8005d40:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d42:	e10b      	b.n	8005f5c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <HAL_SPI_Transmit+0x52>
 8005d4a:	88fb      	ldrh	r3, [r7, #6]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d102      	bne.n	8005d56 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d54:	e102      	b.n	8005f5c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2203      	movs	r2, #3
 8005d5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	88fa      	ldrh	r2, [r7, #6]
 8005d6e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	88fa      	ldrh	r2, [r7, #6]
 8005d74:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d9c:	d10f      	bne.n	8005dbe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dbc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc8:	2b40      	cmp	r3, #64	; 0x40
 8005dca:	d007      	beq.n	8005ddc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005de4:	d14b      	bne.n	8005e7e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d002      	beq.n	8005df4 <HAL_SPI_Transmit+0xf6>
 8005dee:	8afb      	ldrh	r3, [r7, #22]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d13e      	bne.n	8005e72 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df8:	881a      	ldrh	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e04:	1c9a      	adds	r2, r3, #2
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	3b01      	subs	r3, #1
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e18:	e02b      	b.n	8005e72 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f003 0302 	and.w	r3, r3, #2
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d112      	bne.n	8005e4e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2c:	881a      	ldrh	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e38:	1c9a      	adds	r2, r3, #2
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	3b01      	subs	r3, #1
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e4c:	e011      	b.n	8005e72 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e4e:	f7fe fec3 	bl	8004bd8 <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d803      	bhi.n	8005e66 <HAL_SPI_Transmit+0x168>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e64:	d102      	bne.n	8005e6c <HAL_SPI_Transmit+0x16e>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d102      	bne.n	8005e72 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e70:	e074      	b.n	8005f5c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1ce      	bne.n	8005e1a <HAL_SPI_Transmit+0x11c>
 8005e7c:	e04c      	b.n	8005f18 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <HAL_SPI_Transmit+0x18e>
 8005e86:	8afb      	ldrh	r3, [r7, #22]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d140      	bne.n	8005f0e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	330c      	adds	r3, #12
 8005e96:	7812      	ldrb	r2, [r2, #0]
 8005e98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9e:	1c5a      	adds	r2, r3, #1
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005eb2:	e02c      	b.n	8005f0e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d113      	bne.n	8005eea <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	330c      	adds	r3, #12
 8005ecc:	7812      	ldrb	r2, [r2, #0]
 8005ece:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed4:	1c5a      	adds	r2, r3, #1
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ee8:	e011      	b.n	8005f0e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005eea:	f7fe fe75 	bl	8004bd8 <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d803      	bhi.n	8005f02 <HAL_SPI_Transmit+0x204>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f00:	d102      	bne.n	8005f08 <HAL_SPI_Transmit+0x20a>
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d102      	bne.n	8005f0e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f0c:	e026      	b.n	8005f5c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1cd      	bne.n	8005eb4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	6839      	ldr	r1, [r7, #0]
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 fbcb 	bl	80066b8 <SPI_EndRxTxTransaction>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d002      	beq.n	8005f2e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10a      	bne.n	8005f4c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f36:	2300      	movs	r3, #0
 8005f38:	613b      	str	r3, [r7, #16]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	613b      	str	r3, [r7, #16]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	613b      	str	r3, [r7, #16]
 8005f4a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	77fb      	strb	r3, [r7, #31]
 8005f58:	e000      	b.n	8005f5c <HAL_SPI_Transmit+0x25e>
  }

error:
 8005f5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3720      	adds	r7, #32
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b088      	sub	sp, #32
 8005f7a:	af02      	add	r7, sp, #8
 8005f7c:	60f8      	str	r0, [r7, #12]
 8005f7e:	60b9      	str	r1, [r7, #8]
 8005f80:	603b      	str	r3, [r7, #0]
 8005f82:	4613      	mov	r3, r2
 8005f84:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f92:	d112      	bne.n	8005fba <HAL_SPI_Receive+0x44>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10e      	bne.n	8005fba <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2204      	movs	r2, #4
 8005fa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005fa4:	88fa      	ldrh	r2, [r7, #6]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	4613      	mov	r3, r2
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	68b9      	ldr	r1, [r7, #8]
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 f8f1 	bl	8006198 <HAL_SPI_TransmitReceive>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	e0ea      	b.n	8006190 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d101      	bne.n	8005fc8 <HAL_SPI_Receive+0x52>
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	e0e3      	b.n	8006190 <HAL_SPI_Receive+0x21a>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fd0:	f7fe fe02 	bl	8004bd8 <HAL_GetTick>
 8005fd4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d002      	beq.n	8005fe8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005fe6:	e0ca      	b.n	800617e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d002      	beq.n	8005ff4 <HAL_SPI_Receive+0x7e>
 8005fee:	88fb      	ldrh	r3, [r7, #6]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d102      	bne.n	8005ffa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ff8:	e0c1      	b.n	800617e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2204      	movs	r2, #4
 8005ffe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	88fa      	ldrh	r2, [r7, #6]
 8006012:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	88fa      	ldrh	r2, [r7, #6]
 8006018:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006040:	d10f      	bne.n	8006062 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006050:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006060:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606c:	2b40      	cmp	r3, #64	; 0x40
 800606e:	d007      	beq.n	8006080 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800607e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d162      	bne.n	800614e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006088:	e02e      	b.n	80060e8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b01      	cmp	r3, #1
 8006096:	d115      	bne.n	80060c4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f103 020c 	add.w	r2, r3, #12
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a4:	7812      	ldrb	r2, [r2, #0]
 80060a6:	b2d2      	uxtb	r2, r2
 80060a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ae:	1c5a      	adds	r2, r3, #1
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	3b01      	subs	r3, #1
 80060bc:	b29a      	uxth	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060c2:	e011      	b.n	80060e8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060c4:	f7fe fd88 	bl	8004bd8 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d803      	bhi.n	80060dc <HAL_SPI_Receive+0x166>
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060da:	d102      	bne.n	80060e2 <HAL_SPI_Receive+0x16c>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d102      	bne.n	80060e8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80060e6:	e04a      	b.n	800617e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1cb      	bne.n	800608a <HAL_SPI_Receive+0x114>
 80060f2:	e031      	b.n	8006158 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d113      	bne.n	800612a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610c:	b292      	uxth	r2, r2
 800610e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006114:	1c9a      	adds	r2, r3, #2
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800611e:	b29b      	uxth	r3, r3
 8006120:	3b01      	subs	r3, #1
 8006122:	b29a      	uxth	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006128:	e011      	b.n	800614e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800612a:	f7fe fd55 	bl	8004bd8 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	429a      	cmp	r2, r3
 8006138:	d803      	bhi.n	8006142 <HAL_SPI_Receive+0x1cc>
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006140:	d102      	bne.n	8006148 <HAL_SPI_Receive+0x1d2>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d102      	bne.n	800614e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800614c:	e017      	b.n	800617e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006152:	b29b      	uxth	r3, r3
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1cd      	bne.n	80060f4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	6839      	ldr	r1, [r7, #0]
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f000 fa45 	bl	80065ec <SPI_EndRxTransaction>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2220      	movs	r2, #32
 800616c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006172:	2b00      	cmp	r3, #0
 8006174:	d002      	beq.n	800617c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	75fb      	strb	r3, [r7, #23]
 800617a:	e000      	b.n	800617e <HAL_SPI_Receive+0x208>
  }

error :
 800617c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800618e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3718      	adds	r7, #24
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b08c      	sub	sp, #48	; 0x30
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
 80061a4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80061a6:	2301      	movs	r3, #1
 80061a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80061aa:	2300      	movs	r3, #0
 80061ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d101      	bne.n	80061be <HAL_SPI_TransmitReceive+0x26>
 80061ba:	2302      	movs	r3, #2
 80061bc:	e18a      	b.n	80064d4 <HAL_SPI_TransmitReceive+0x33c>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061c6:	f7fe fd07 	bl	8004bd8 <HAL_GetTick>
 80061ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80061dc:	887b      	ldrh	r3, [r7, #2]
 80061de:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80061e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d00f      	beq.n	8006208 <HAL_SPI_TransmitReceive+0x70>
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061ee:	d107      	bne.n	8006200 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d103      	bne.n	8006200 <HAL_SPI_TransmitReceive+0x68>
 80061f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061fc:	2b04      	cmp	r3, #4
 80061fe:	d003      	beq.n	8006208 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006200:	2302      	movs	r3, #2
 8006202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006206:	e15b      	b.n	80064c0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d005      	beq.n	800621a <HAL_SPI_TransmitReceive+0x82>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <HAL_SPI_TransmitReceive+0x82>
 8006214:	887b      	ldrh	r3, [r7, #2]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d103      	bne.n	8006222 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006220:	e14e      	b.n	80064c0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b04      	cmp	r3, #4
 800622c:	d003      	beq.n	8006236 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2205      	movs	r2, #5
 8006232:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	887a      	ldrh	r2, [r7, #2]
 8006246:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	887a      	ldrh	r2, [r7, #2]
 800624c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	887a      	ldrh	r2, [r7, #2]
 8006258:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	887a      	ldrh	r2, [r7, #2]
 800625e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006276:	2b40      	cmp	r3, #64	; 0x40
 8006278:	d007      	beq.n	800628a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006288:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006292:	d178      	bne.n	8006386 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <HAL_SPI_TransmitReceive+0x10a>
 800629c:	8b7b      	ldrh	r3, [r7, #26]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d166      	bne.n	8006370 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a6:	881a      	ldrh	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b2:	1c9a      	adds	r2, r3, #2
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062bc:	b29b      	uxth	r3, r3
 80062be:	3b01      	subs	r3, #1
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062c6:	e053      	b.n	8006370 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d11b      	bne.n	800630e <HAL_SPI_TransmitReceive+0x176>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062da:	b29b      	uxth	r3, r3
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d016      	beq.n	800630e <HAL_SPI_TransmitReceive+0x176>
 80062e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d113      	bne.n	800630e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ea:	881a      	ldrh	r2, [r3, #0]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f6:	1c9a      	adds	r2, r3, #2
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006300:	b29b      	uxth	r3, r3
 8006302:	3b01      	subs	r3, #1
 8006304:	b29a      	uxth	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	2b01      	cmp	r3, #1
 800631a:	d119      	bne.n	8006350 <HAL_SPI_TransmitReceive+0x1b8>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006320:	b29b      	uxth	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d014      	beq.n	8006350 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68da      	ldr	r2, [r3, #12]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006330:	b292      	uxth	r2, r2
 8006332:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006338:	1c9a      	adds	r2, r3, #2
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006342:	b29b      	uxth	r3, r3
 8006344:	3b01      	subs	r3, #1
 8006346:	b29a      	uxth	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800634c:	2301      	movs	r3, #1
 800634e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006350:	f7fe fc42 	bl	8004bd8 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800635c:	429a      	cmp	r2, r3
 800635e:	d807      	bhi.n	8006370 <HAL_SPI_TransmitReceive+0x1d8>
 8006360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006366:	d003      	beq.n	8006370 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800636e:	e0a7      	b.n	80064c0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006374:	b29b      	uxth	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1a6      	bne.n	80062c8 <HAL_SPI_TransmitReceive+0x130>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800637e:	b29b      	uxth	r3, r3
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1a1      	bne.n	80062c8 <HAL_SPI_TransmitReceive+0x130>
 8006384:	e07c      	b.n	8006480 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d002      	beq.n	8006394 <HAL_SPI_TransmitReceive+0x1fc>
 800638e:	8b7b      	ldrh	r3, [r7, #26]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d16b      	bne.n	800646c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	330c      	adds	r3, #12
 800639e:	7812      	ldrb	r2, [r2, #0]
 80063a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	3b01      	subs	r3, #1
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063ba:	e057      	b.n	800646c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d11c      	bne.n	8006404 <HAL_SPI_TransmitReceive+0x26c>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d017      	beq.n	8006404 <HAL_SPI_TransmitReceive+0x26c>
 80063d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d114      	bne.n	8006404 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	330c      	adds	r3, #12
 80063e4:	7812      	ldrb	r2, [r2, #0]
 80063e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ec:	1c5a      	adds	r2, r3, #1
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	3b01      	subs	r3, #1
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006400:	2300      	movs	r3, #0
 8006402:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b01      	cmp	r3, #1
 8006410:	d119      	bne.n	8006446 <HAL_SPI_TransmitReceive+0x2ae>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006416:	b29b      	uxth	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	d014      	beq.n	8006446 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68da      	ldr	r2, [r3, #12]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006426:	b2d2      	uxtb	r2, r2
 8006428:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006438:	b29b      	uxth	r3, r3
 800643a:	3b01      	subs	r3, #1
 800643c:	b29a      	uxth	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006442:	2301      	movs	r3, #1
 8006444:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006446:	f7fe fbc7 	bl	8004bd8 <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006452:	429a      	cmp	r2, r3
 8006454:	d803      	bhi.n	800645e <HAL_SPI_TransmitReceive+0x2c6>
 8006456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645c:	d102      	bne.n	8006464 <HAL_SPI_TransmitReceive+0x2cc>
 800645e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006460:	2b00      	cmp	r3, #0
 8006462:	d103      	bne.n	800646c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800646a:	e029      	b.n	80064c0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006470:	b29b      	uxth	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1a2      	bne.n	80063bc <HAL_SPI_TransmitReceive+0x224>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800647a:	b29b      	uxth	r3, r3
 800647c:	2b00      	cmp	r3, #0
 800647e:	d19d      	bne.n	80063bc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006482:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 f917 	bl	80066b8 <SPI_EndRxTxTransaction>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d006      	beq.n	800649e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2220      	movs	r2, #32
 800649a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800649c:	e010      	b.n	80064c0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10b      	bne.n	80064be <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064a6:	2300      	movs	r3, #0
 80064a8:	617b      	str	r3, [r7, #20]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	617b      	str	r3, [r7, #20]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	617b      	str	r3, [r7, #20]
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	e000      	b.n	80064c0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80064be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3730      	adds	r7, #48	; 0x30
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b088      	sub	sp, #32
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	603b      	str	r3, [r7, #0]
 80064e8:	4613      	mov	r3, r2
 80064ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80064ec:	f7fe fb74 	bl	8004bd8 <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f4:	1a9b      	subs	r3, r3, r2
 80064f6:	683a      	ldr	r2, [r7, #0]
 80064f8:	4413      	add	r3, r2
 80064fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80064fc:	f7fe fb6c 	bl	8004bd8 <HAL_GetTick>
 8006500:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006502:	4b39      	ldr	r3, [pc, #228]	; (80065e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	015b      	lsls	r3, r3, #5
 8006508:	0d1b      	lsrs	r3, r3, #20
 800650a:	69fa      	ldr	r2, [r7, #28]
 800650c:	fb02 f303 	mul.w	r3, r2, r3
 8006510:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006512:	e054      	b.n	80065be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651a:	d050      	beq.n	80065be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800651c:	f7fe fb5c 	bl	8004bd8 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	69fa      	ldr	r2, [r7, #28]
 8006528:	429a      	cmp	r2, r3
 800652a:	d902      	bls.n	8006532 <SPI_WaitFlagStateUntilTimeout+0x56>
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d13d      	bne.n	80065ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006540:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800654a:	d111      	bne.n	8006570 <SPI_WaitFlagStateUntilTimeout+0x94>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006554:	d004      	beq.n	8006560 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800655e:	d107      	bne.n	8006570 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800656e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006574:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006578:	d10f      	bne.n	800659a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006588:	601a      	str	r2, [r3, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006598:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e017      	b.n	80065de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80065b4:	2300      	movs	r3, #0
 80065b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	3b01      	subs	r3, #1
 80065bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689a      	ldr	r2, [r3, #8]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	4013      	ands	r3, r2
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	bf0c      	ite	eq
 80065ce:	2301      	moveq	r3, #1
 80065d0:	2300      	movne	r3, #0
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	461a      	mov	r2, r3
 80065d6:	79fb      	ldrb	r3, [r7, #7]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d19b      	bne.n	8006514 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3720      	adds	r7, #32
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	2000006c 	.word	0x2000006c

080065ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af02      	add	r7, sp, #8
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006600:	d111      	bne.n	8006626 <SPI_EndRxTransaction+0x3a>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800660a:	d004      	beq.n	8006616 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006614:	d107      	bne.n	8006626 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006624:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800662e:	d12a      	bne.n	8006686 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006638:	d012      	beq.n	8006660 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2200      	movs	r2, #0
 8006642:	2180      	movs	r1, #128	; 0x80
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f7ff ff49 	bl	80064dc <SPI_WaitFlagStateUntilTimeout>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d02d      	beq.n	80066ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006654:	f043 0220 	orr.w	r2, r3, #32
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e026      	b.n	80066ae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2200      	movs	r2, #0
 8006668:	2101      	movs	r1, #1
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f7ff ff36 	bl	80064dc <SPI_WaitFlagStateUntilTimeout>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d01a      	beq.n	80066ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667a:	f043 0220 	orr.w	r2, r3, #32
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e013      	b.n	80066ae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	2200      	movs	r2, #0
 800668e:	2101      	movs	r1, #1
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f7ff ff23 	bl	80064dc <SPI_WaitFlagStateUntilTimeout>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d007      	beq.n	80066ac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a0:	f043 0220 	orr.w	r2, r3, #32
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e000      	b.n	80066ae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
	...

080066b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b088      	sub	sp, #32
 80066bc:	af02      	add	r7, sp, #8
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80066c4:	4b1b      	ldr	r3, [pc, #108]	; (8006734 <SPI_EndRxTxTransaction+0x7c>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a1b      	ldr	r2, [pc, #108]	; (8006738 <SPI_EndRxTxTransaction+0x80>)
 80066ca:	fba2 2303 	umull	r2, r3, r2, r3
 80066ce:	0d5b      	lsrs	r3, r3, #21
 80066d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80066d4:	fb02 f303 	mul.w	r3, r2, r3
 80066d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066e2:	d112      	bne.n	800670a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2200      	movs	r2, #0
 80066ec:	2180      	movs	r1, #128	; 0x80
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f7ff fef4 	bl	80064dc <SPI_WaitFlagStateUntilTimeout>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d016      	beq.n	8006728 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fe:	f043 0220 	orr.w	r2, r3, #32
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e00f      	b.n	800672a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00a      	beq.n	8006726 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	3b01      	subs	r3, #1
 8006714:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006720:	2b80      	cmp	r3, #128	; 0x80
 8006722:	d0f2      	beq.n	800670a <SPI_EndRxTxTransaction+0x52>
 8006724:	e000      	b.n	8006728 <SPI_EndRxTxTransaction+0x70>
        break;
 8006726:	bf00      	nop
  }

  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3718      	adds	r7, #24
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	2000006c 	.word	0x2000006c
 8006738:	165e9f81 	.word	0x165e9f81

0800673c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e041      	b.n	80067d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d106      	bne.n	8006768 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f7fd ff42 	bl	80045ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	3304      	adds	r3, #4
 8006778:	4619      	mov	r1, r3
 800677a:	4610      	mov	r0, r2
 800677c:	f000 fb24 	bl	8006dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b082      	sub	sp, #8
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d101      	bne.n	80067ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e041      	b.n	8006870 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d106      	bne.n	8006806 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 f839 	bl	8006878 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2202      	movs	r2, #2
 800680a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	3304      	adds	r3, #4
 8006816:	4619      	mov	r1, r3
 8006818:	4610      	mov	r0, r2
 800681a:	f000 fad5 	bl	8006dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3708      	adds	r7, #8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d109      	bne.n	80068b0 <HAL_TIM_PWM_Start+0x24>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	bf14      	ite	ne
 80068a8:	2301      	movne	r3, #1
 80068aa:	2300      	moveq	r3, #0
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	e022      	b.n	80068f6 <HAL_TIM_PWM_Start+0x6a>
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	2b04      	cmp	r3, #4
 80068b4:	d109      	bne.n	80068ca <HAL_TIM_PWM_Start+0x3e>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b01      	cmp	r3, #1
 80068c0:	bf14      	ite	ne
 80068c2:	2301      	movne	r3, #1
 80068c4:	2300      	moveq	r3, #0
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	e015      	b.n	80068f6 <HAL_TIM_PWM_Start+0x6a>
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	2b08      	cmp	r3, #8
 80068ce:	d109      	bne.n	80068e4 <HAL_TIM_PWM_Start+0x58>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b01      	cmp	r3, #1
 80068da:	bf14      	ite	ne
 80068dc:	2301      	movne	r3, #1
 80068de:	2300      	moveq	r3, #0
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	e008      	b.n	80068f6 <HAL_TIM_PWM_Start+0x6a>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	bf14      	ite	ne
 80068f0:	2301      	movne	r3, #1
 80068f2:	2300      	moveq	r3, #0
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e068      	b.n	80069d0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d104      	bne.n	800690e <HAL_TIM_PWM_Start+0x82>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2202      	movs	r2, #2
 8006908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800690c:	e013      	b.n	8006936 <HAL_TIM_PWM_Start+0xaa>
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2b04      	cmp	r3, #4
 8006912:	d104      	bne.n	800691e <HAL_TIM_PWM_Start+0x92>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2202      	movs	r2, #2
 8006918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800691c:	e00b      	b.n	8006936 <HAL_TIM_PWM_Start+0xaa>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	2b08      	cmp	r3, #8
 8006922:	d104      	bne.n	800692e <HAL_TIM_PWM_Start+0xa2>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2202      	movs	r2, #2
 8006928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800692c:	e003      	b.n	8006936 <HAL_TIM_PWM_Start+0xaa>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2202      	movs	r2, #2
 8006932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2201      	movs	r2, #1
 800693c:	6839      	ldr	r1, [r7, #0]
 800693e:	4618      	mov	r0, r3
 8006940:	f000 fce8 	bl	8007314 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a23      	ldr	r2, [pc, #140]	; (80069d8 <HAL_TIM_PWM_Start+0x14c>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d107      	bne.n	800695e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800695c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a1d      	ldr	r2, [pc, #116]	; (80069d8 <HAL_TIM_PWM_Start+0x14c>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d018      	beq.n	800699a <HAL_TIM_PWM_Start+0x10e>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006970:	d013      	beq.n	800699a <HAL_TIM_PWM_Start+0x10e>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a19      	ldr	r2, [pc, #100]	; (80069dc <HAL_TIM_PWM_Start+0x150>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d00e      	beq.n	800699a <HAL_TIM_PWM_Start+0x10e>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a17      	ldr	r2, [pc, #92]	; (80069e0 <HAL_TIM_PWM_Start+0x154>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d009      	beq.n	800699a <HAL_TIM_PWM_Start+0x10e>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a16      	ldr	r2, [pc, #88]	; (80069e4 <HAL_TIM_PWM_Start+0x158>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d004      	beq.n	800699a <HAL_TIM_PWM_Start+0x10e>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a14      	ldr	r2, [pc, #80]	; (80069e8 <HAL_TIM_PWM_Start+0x15c>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d111      	bne.n	80069be <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f003 0307 	and.w	r3, r3, #7
 80069a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2b06      	cmp	r3, #6
 80069aa:	d010      	beq.n	80069ce <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f042 0201 	orr.w	r2, r2, #1
 80069ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069bc:	e007      	b.n	80069ce <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f042 0201 	orr.w	r2, r2, #1
 80069cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	40010000 	.word	0x40010000
 80069dc:	40000400 	.word	0x40000400
 80069e0:	40000800 	.word	0x40000800
 80069e4:	40000c00 	.word	0x40000c00
 80069e8:	40014000 	.word	0x40014000

080069ec <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2200      	movs	r2, #0
 80069fc:	6839      	ldr	r1, [r7, #0]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 fc88 	bl	8007314 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a29      	ldr	r2, [pc, #164]	; (8006ab0 <HAL_TIM_PWM_Stop+0xc4>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d117      	bne.n	8006a3e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	6a1a      	ldr	r2, [r3, #32]
 8006a14:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a18:	4013      	ands	r3, r2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10f      	bne.n	8006a3e <HAL_TIM_PWM_Stop+0x52>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6a1a      	ldr	r2, [r3, #32]
 8006a24:	f240 4344 	movw	r3, #1092	; 0x444
 8006a28:	4013      	ands	r3, r2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d107      	bne.n	8006a3e <HAL_TIM_PWM_Stop+0x52>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6a1a      	ldr	r2, [r3, #32]
 8006a44:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a48:	4013      	ands	r3, r2
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10f      	bne.n	8006a6e <HAL_TIM_PWM_Stop+0x82>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6a1a      	ldr	r2, [r3, #32]
 8006a54:	f240 4344 	movw	r3, #1092	; 0x444
 8006a58:	4013      	ands	r3, r2
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d107      	bne.n	8006a6e <HAL_TIM_PWM_Stop+0x82>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f022 0201 	bic.w	r2, r2, #1
 8006a6c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d104      	bne.n	8006a7e <HAL_TIM_PWM_Stop+0x92>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a7c:	e013      	b.n	8006aa6 <HAL_TIM_PWM_Stop+0xba>
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2b04      	cmp	r3, #4
 8006a82:	d104      	bne.n	8006a8e <HAL_TIM_PWM_Stop+0xa2>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a8c:	e00b      	b.n	8006aa6 <HAL_TIM_PWM_Stop+0xba>
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	2b08      	cmp	r3, #8
 8006a92:	d104      	bne.n	8006a9e <HAL_TIM_PWM_Stop+0xb2>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a9c:	e003      	b.n	8006aa6 <HAL_TIM_PWM_Stop+0xba>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3708      	adds	r7, #8
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	40010000 	.word	0x40010000

08006ab4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d101      	bne.n	8006ad2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ace:	2302      	movs	r3, #2
 8006ad0:	e0ae      	b.n	8006c30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b0c      	cmp	r3, #12
 8006ade:	f200 809f 	bhi.w	8006c20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006ae2:	a201      	add	r2, pc, #4	; (adr r2, 8006ae8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae8:	08006b1d 	.word	0x08006b1d
 8006aec:	08006c21 	.word	0x08006c21
 8006af0:	08006c21 	.word	0x08006c21
 8006af4:	08006c21 	.word	0x08006c21
 8006af8:	08006b5d 	.word	0x08006b5d
 8006afc:	08006c21 	.word	0x08006c21
 8006b00:	08006c21 	.word	0x08006c21
 8006b04:	08006c21 	.word	0x08006c21
 8006b08:	08006b9f 	.word	0x08006b9f
 8006b0c:	08006c21 	.word	0x08006c21
 8006b10:	08006c21 	.word	0x08006c21
 8006b14:	08006c21 	.word	0x08006c21
 8006b18:	08006bdf 	.word	0x08006bdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68b9      	ldr	r1, [r7, #8]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 f9d0 	bl	8006ec8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	699a      	ldr	r2, [r3, #24]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f042 0208 	orr.w	r2, r2, #8
 8006b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699a      	ldr	r2, [r3, #24]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f022 0204 	bic.w	r2, r2, #4
 8006b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6999      	ldr	r1, [r3, #24]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	691a      	ldr	r2, [r3, #16]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	430a      	orrs	r2, r1
 8006b58:	619a      	str	r2, [r3, #24]
      break;
 8006b5a:	e064      	b.n	8006c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68b9      	ldr	r1, [r7, #8]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 fa16 	bl	8006f94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	699a      	ldr	r2, [r3, #24]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	699a      	ldr	r2, [r3, #24]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6999      	ldr	r1, [r3, #24]
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	021a      	lsls	r2, r3, #8
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	619a      	str	r2, [r3, #24]
      break;
 8006b9c:	e043      	b.n	8006c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68b9      	ldr	r1, [r7, #8]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 fa61 	bl	800706c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	69da      	ldr	r2, [r3, #28]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f042 0208 	orr.w	r2, r2, #8
 8006bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	69da      	ldr	r2, [r3, #28]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 0204 	bic.w	r2, r2, #4
 8006bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69d9      	ldr	r1, [r3, #28]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	691a      	ldr	r2, [r3, #16]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	61da      	str	r2, [r3, #28]
      break;
 8006bdc:	e023      	b.n	8006c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68b9      	ldr	r1, [r7, #8]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f000 faab 	bl	8007140 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	69da      	ldr	r2, [r3, #28]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	69da      	ldr	r2, [r3, #28]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	69d9      	ldr	r1, [r3, #28]
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	021a      	lsls	r2, r3, #8
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	61da      	str	r2, [r3, #28]
      break;
 8006c1e:	e002      	b.n	8006c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	75fb      	strb	r3, [r7, #23]
      break;
 8006c24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d101      	bne.n	8006c54 <HAL_TIM_ConfigClockSource+0x1c>
 8006c50:	2302      	movs	r3, #2
 8006c52:	e0b4      	b.n	8006dbe <HAL_TIM_ConfigClockSource+0x186>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c8c:	d03e      	beq.n	8006d0c <HAL_TIM_ConfigClockSource+0xd4>
 8006c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c92:	f200 8087 	bhi.w	8006da4 <HAL_TIM_ConfigClockSource+0x16c>
 8006c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c9a:	f000 8086 	beq.w	8006daa <HAL_TIM_ConfigClockSource+0x172>
 8006c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ca2:	d87f      	bhi.n	8006da4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ca4:	2b70      	cmp	r3, #112	; 0x70
 8006ca6:	d01a      	beq.n	8006cde <HAL_TIM_ConfigClockSource+0xa6>
 8006ca8:	2b70      	cmp	r3, #112	; 0x70
 8006caa:	d87b      	bhi.n	8006da4 <HAL_TIM_ConfigClockSource+0x16c>
 8006cac:	2b60      	cmp	r3, #96	; 0x60
 8006cae:	d050      	beq.n	8006d52 <HAL_TIM_ConfigClockSource+0x11a>
 8006cb0:	2b60      	cmp	r3, #96	; 0x60
 8006cb2:	d877      	bhi.n	8006da4 <HAL_TIM_ConfigClockSource+0x16c>
 8006cb4:	2b50      	cmp	r3, #80	; 0x50
 8006cb6:	d03c      	beq.n	8006d32 <HAL_TIM_ConfigClockSource+0xfa>
 8006cb8:	2b50      	cmp	r3, #80	; 0x50
 8006cba:	d873      	bhi.n	8006da4 <HAL_TIM_ConfigClockSource+0x16c>
 8006cbc:	2b40      	cmp	r3, #64	; 0x40
 8006cbe:	d058      	beq.n	8006d72 <HAL_TIM_ConfigClockSource+0x13a>
 8006cc0:	2b40      	cmp	r3, #64	; 0x40
 8006cc2:	d86f      	bhi.n	8006da4 <HAL_TIM_ConfigClockSource+0x16c>
 8006cc4:	2b30      	cmp	r3, #48	; 0x30
 8006cc6:	d064      	beq.n	8006d92 <HAL_TIM_ConfigClockSource+0x15a>
 8006cc8:	2b30      	cmp	r3, #48	; 0x30
 8006cca:	d86b      	bhi.n	8006da4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ccc:	2b20      	cmp	r3, #32
 8006cce:	d060      	beq.n	8006d92 <HAL_TIM_ConfigClockSource+0x15a>
 8006cd0:	2b20      	cmp	r3, #32
 8006cd2:	d867      	bhi.n	8006da4 <HAL_TIM_ConfigClockSource+0x16c>
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d05c      	beq.n	8006d92 <HAL_TIM_ConfigClockSource+0x15a>
 8006cd8:	2b10      	cmp	r3, #16
 8006cda:	d05a      	beq.n	8006d92 <HAL_TIM_ConfigClockSource+0x15a>
 8006cdc:	e062      	b.n	8006da4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6818      	ldr	r0, [r3, #0]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	6899      	ldr	r1, [r3, #8]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	f000 faf1 	bl	80072d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	609a      	str	r2, [r3, #8]
      break;
 8006d0a:	e04f      	b.n	8006dac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6818      	ldr	r0, [r3, #0]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	6899      	ldr	r1, [r3, #8]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	f000 fada 	bl	80072d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689a      	ldr	r2, [r3, #8]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d2e:	609a      	str	r2, [r3, #8]
      break;
 8006d30:	e03c      	b.n	8006dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6818      	ldr	r0, [r3, #0]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	6859      	ldr	r1, [r3, #4]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	f000 fa4e 	bl	80071e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2150      	movs	r1, #80	; 0x50
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 faa7 	bl	800729e <TIM_ITRx_SetConfig>
      break;
 8006d50:	e02c      	b.n	8006dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6818      	ldr	r0, [r3, #0]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	6859      	ldr	r1, [r3, #4]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	f000 fa6d 	bl	800723e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2160      	movs	r1, #96	; 0x60
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f000 fa97 	bl	800729e <TIM_ITRx_SetConfig>
      break;
 8006d70:	e01c      	b.n	8006dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6818      	ldr	r0, [r3, #0]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	6859      	ldr	r1, [r3, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	f000 fa2e 	bl	80071e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2140      	movs	r1, #64	; 0x40
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 fa87 	bl	800729e <TIM_ITRx_SetConfig>
      break;
 8006d90:	e00c      	b.n	8006dac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	f000 fa7e 	bl	800729e <TIM_ITRx_SetConfig>
      break;
 8006da2:	e003      	b.n	8006dac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	73fb      	strb	r3, [r7, #15]
      break;
 8006da8:	e000      	b.n	8006dac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006daa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
	...

08006dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a34      	ldr	r2, [pc, #208]	; (8006eac <TIM_Base_SetConfig+0xe4>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d00f      	beq.n	8006e00 <TIM_Base_SetConfig+0x38>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006de6:	d00b      	beq.n	8006e00 <TIM_Base_SetConfig+0x38>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a31      	ldr	r2, [pc, #196]	; (8006eb0 <TIM_Base_SetConfig+0xe8>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d007      	beq.n	8006e00 <TIM_Base_SetConfig+0x38>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a30      	ldr	r2, [pc, #192]	; (8006eb4 <TIM_Base_SetConfig+0xec>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d003      	beq.n	8006e00 <TIM_Base_SetConfig+0x38>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a2f      	ldr	r2, [pc, #188]	; (8006eb8 <TIM_Base_SetConfig+0xf0>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d108      	bne.n	8006e12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a25      	ldr	r2, [pc, #148]	; (8006eac <TIM_Base_SetConfig+0xe4>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d01b      	beq.n	8006e52 <TIM_Base_SetConfig+0x8a>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e20:	d017      	beq.n	8006e52 <TIM_Base_SetConfig+0x8a>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a22      	ldr	r2, [pc, #136]	; (8006eb0 <TIM_Base_SetConfig+0xe8>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d013      	beq.n	8006e52 <TIM_Base_SetConfig+0x8a>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a21      	ldr	r2, [pc, #132]	; (8006eb4 <TIM_Base_SetConfig+0xec>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d00f      	beq.n	8006e52 <TIM_Base_SetConfig+0x8a>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a20      	ldr	r2, [pc, #128]	; (8006eb8 <TIM_Base_SetConfig+0xf0>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d00b      	beq.n	8006e52 <TIM_Base_SetConfig+0x8a>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a1f      	ldr	r2, [pc, #124]	; (8006ebc <TIM_Base_SetConfig+0xf4>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d007      	beq.n	8006e52 <TIM_Base_SetConfig+0x8a>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a1e      	ldr	r2, [pc, #120]	; (8006ec0 <TIM_Base_SetConfig+0xf8>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d003      	beq.n	8006e52 <TIM_Base_SetConfig+0x8a>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a1d      	ldr	r2, [pc, #116]	; (8006ec4 <TIM_Base_SetConfig+0xfc>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d108      	bne.n	8006e64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	689a      	ldr	r2, [r3, #8]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a08      	ldr	r2, [pc, #32]	; (8006eac <TIM_Base_SetConfig+0xe4>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d103      	bne.n	8006e98 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	691a      	ldr	r2, [r3, #16]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	615a      	str	r2, [r3, #20]
}
 8006e9e:	bf00      	nop
 8006ea0:	3714      	adds	r7, #20
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	40010000 	.word	0x40010000
 8006eb0:	40000400 	.word	0x40000400
 8006eb4:	40000800 	.word	0x40000800
 8006eb8:	40000c00 	.word	0x40000c00
 8006ebc:	40014000 	.word	0x40014000
 8006ec0:	40014400 	.word	0x40014400
 8006ec4:	40014800 	.word	0x40014800

08006ec8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b087      	sub	sp, #28
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	f023 0201 	bic.w	r2, r3, #1
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f023 0303 	bic.w	r3, r3, #3
 8006efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f023 0302 	bic.w	r3, r3, #2
 8006f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a1c      	ldr	r2, [pc, #112]	; (8006f90 <TIM_OC1_SetConfig+0xc8>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d10c      	bne.n	8006f3e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	f023 0308 	bic.w	r3, r3, #8
 8006f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f023 0304 	bic.w	r3, r3, #4
 8006f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a13      	ldr	r2, [pc, #76]	; (8006f90 <TIM_OC1_SetConfig+0xc8>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d111      	bne.n	8006f6a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	685a      	ldr	r2, [r3, #4]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	621a      	str	r2, [r3, #32]
}
 8006f84:	bf00      	nop
 8006f86:	371c      	adds	r7, #28
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	40010000 	.word	0x40010000

08006f94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b087      	sub	sp, #28
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	f023 0210 	bic.w	r2, r3, #16
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	021b      	lsls	r3, r3, #8
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	f023 0320 	bic.w	r3, r3, #32
 8006fde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	011b      	lsls	r3, r3, #4
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a1e      	ldr	r2, [pc, #120]	; (8007068 <TIM_OC2_SetConfig+0xd4>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d10d      	bne.n	8007010 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	011b      	lsls	r3, r3, #4
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	4313      	orrs	r3, r2
 8007006:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800700e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a15      	ldr	r2, [pc, #84]	; (8007068 <TIM_OC2_SetConfig+0xd4>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d113      	bne.n	8007040 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800701e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007026:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	4313      	orrs	r3, r2
 8007032:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	4313      	orrs	r3, r2
 800703e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	621a      	str	r2, [r3, #32]
}
 800705a:	bf00      	nop
 800705c:	371c      	adds	r7, #28
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	40010000 	.word	0x40010000

0800706c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800709a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f023 0303 	bic.w	r3, r3, #3
 80070a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	021b      	lsls	r3, r3, #8
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	4313      	orrs	r3, r2
 80070c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a1d      	ldr	r2, [pc, #116]	; (800713c <TIM_OC3_SetConfig+0xd0>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d10d      	bne.n	80070e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	021b      	lsls	r3, r3, #8
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	4313      	orrs	r3, r2
 80070dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a14      	ldr	r2, [pc, #80]	; (800713c <TIM_OC3_SetConfig+0xd0>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d113      	bne.n	8007116 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	011b      	lsls	r3, r3, #4
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	4313      	orrs	r3, r2
 8007108:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	011b      	lsls	r3, r3, #4
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	4313      	orrs	r3, r2
 8007114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	621a      	str	r2, [r3, #32]
}
 8007130:	bf00      	nop
 8007132:	371c      	adds	r7, #28
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	40010000 	.word	0x40010000

08007140 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007140:	b480      	push	{r7}
 8007142:	b087      	sub	sp, #28
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800716e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	021b      	lsls	r3, r3, #8
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	4313      	orrs	r3, r2
 8007182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800718a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	031b      	lsls	r3, r3, #12
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	4313      	orrs	r3, r2
 8007196:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a10      	ldr	r2, [pc, #64]	; (80071dc <TIM_OC4_SetConfig+0x9c>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d109      	bne.n	80071b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	695b      	ldr	r3, [r3, #20]
 80071ac:	019b      	lsls	r3, r3, #6
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	621a      	str	r2, [r3, #32]
}
 80071ce:	bf00      	nop
 80071d0:	371c      	adds	r7, #28
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	40010000 	.word	0x40010000

080071e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b087      	sub	sp, #28
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6a1b      	ldr	r3, [r3, #32]
 80071f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	f023 0201 	bic.w	r2, r3, #1
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800720a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	011b      	lsls	r3, r3, #4
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	4313      	orrs	r3, r2
 8007214:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f023 030a 	bic.w	r3, r3, #10
 800721c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	4313      	orrs	r3, r2
 8007224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	621a      	str	r2, [r3, #32]
}
 8007232:	bf00      	nop
 8007234:	371c      	adds	r7, #28
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr

0800723e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800723e:	b480      	push	{r7}
 8007240:	b087      	sub	sp, #28
 8007242:	af00      	add	r7, sp, #0
 8007244:	60f8      	str	r0, [r7, #12]
 8007246:	60b9      	str	r1, [r7, #8]
 8007248:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	f023 0210 	bic.w	r2, r3, #16
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6a1b      	ldr	r3, [r3, #32]
 8007260:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007268:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	031b      	lsls	r3, r3, #12
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	4313      	orrs	r3, r2
 8007272:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800727a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	011b      	lsls	r3, r3, #4
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	4313      	orrs	r3, r2
 8007284:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	621a      	str	r2, [r3, #32]
}
 8007292:	bf00      	nop
 8007294:	371c      	adds	r7, #28
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800729e:	b480      	push	{r7}
 80072a0:	b085      	sub	sp, #20
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
 80072a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072b6:	683a      	ldr	r2, [r7, #0]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	f043 0307 	orr.w	r3, r3, #7
 80072c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	609a      	str	r2, [r3, #8]
}
 80072c8:	bf00      	nop
 80072ca:	3714      	adds	r7, #20
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b087      	sub	sp, #28
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
 80072e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	021a      	lsls	r2, r3, #8
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	431a      	orrs	r2, r3
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	697a      	ldr	r2, [r7, #20]
 80072fe:	4313      	orrs	r3, r2
 8007300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	609a      	str	r2, [r3, #8]
}
 8007308:	bf00      	nop
 800730a:	371c      	adds	r7, #28
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007314:	b480      	push	{r7}
 8007316:	b087      	sub	sp, #28
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	f003 031f 	and.w	r3, r3, #31
 8007326:	2201      	movs	r2, #1
 8007328:	fa02 f303 	lsl.w	r3, r2, r3
 800732c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6a1a      	ldr	r2, [r3, #32]
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	43db      	mvns	r3, r3
 8007336:	401a      	ands	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6a1a      	ldr	r2, [r3, #32]
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f003 031f 	and.w	r3, r3, #31
 8007346:	6879      	ldr	r1, [r7, #4]
 8007348:	fa01 f303 	lsl.w	r3, r1, r3
 800734c:	431a      	orrs	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	621a      	str	r2, [r3, #32]
}
 8007352:	bf00      	nop
 8007354:	371c      	adds	r7, #28
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
	...

08007360 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007370:	2b01      	cmp	r3, #1
 8007372:	d101      	bne.n	8007378 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007374:	2302      	movs	r3, #2
 8007376:	e050      	b.n	800741a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2202      	movs	r2, #2
 8007384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800739e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a1c      	ldr	r2, [pc, #112]	; (8007428 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d018      	beq.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c4:	d013      	beq.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a18      	ldr	r2, [pc, #96]	; (800742c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d00e      	beq.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a16      	ldr	r2, [pc, #88]	; (8007430 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d009      	beq.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a15      	ldr	r2, [pc, #84]	; (8007434 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d004      	beq.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a13      	ldr	r2, [pc, #76]	; (8007438 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d10c      	bne.n	8007408 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68ba      	ldr	r2, [r7, #8]
 8007406:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	40010000 	.word	0x40010000
 800742c:	40000400 	.word	0x40000400
 8007430:	40000800 	.word	0x40000800
 8007434:	40000c00 	.word	0x40000c00
 8007438:	40014000 	.word	0x40014000

0800743c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007450:	2b01      	cmp	r3, #1
 8007452:	d101      	bne.n	8007458 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007454:	2302      	movs	r3, #2
 8007456:	e03d      	b.n	80074d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	4313      	orrs	r3, r2
 800746c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	4313      	orrs	r3, r2
 800747a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	4313      	orrs	r3, r2
 8007488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4313      	orrs	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	695b      	ldr	r3, [r3, #20]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	69db      	ldr	r3, [r3, #28]
 80074be:	4313      	orrs	r3, r2
 80074c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e03f      	b.n	8007572 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d106      	bne.n	800750c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7fd f8cc 	bl	80046a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2224      	movs	r2, #36	; 0x24
 8007510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68da      	ldr	r2, [r3, #12]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007522:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fddf 	bl	80080e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	691a      	ldr	r2, [r3, #16]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007538:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	695a      	ldr	r2, [r3, #20]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007548:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68da      	ldr	r2, [r3, #12]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007558:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2220      	movs	r2, #32
 8007564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2220      	movs	r2, #32
 800756c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b08a      	sub	sp, #40	; 0x28
 800757e:	af02      	add	r7, sp, #8
 8007580:	60f8      	str	r0, [r7, #12]
 8007582:	60b9      	str	r1, [r7, #8]
 8007584:	603b      	str	r3, [r7, #0]
 8007586:	4613      	mov	r3, r2
 8007588:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800758a:	2300      	movs	r3, #0
 800758c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007594:	b2db      	uxtb	r3, r3
 8007596:	2b20      	cmp	r3, #32
 8007598:	d17c      	bne.n	8007694 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d002      	beq.n	80075a6 <HAL_UART_Transmit+0x2c>
 80075a0:	88fb      	ldrh	r3, [r7, #6]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d101      	bne.n	80075aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e075      	b.n	8007696 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d101      	bne.n	80075b8 <HAL_UART_Transmit+0x3e>
 80075b4:	2302      	movs	r3, #2
 80075b6:	e06e      	b.n	8007696 <HAL_UART_Transmit+0x11c>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2221      	movs	r2, #33	; 0x21
 80075ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075ce:	f7fd fb03 	bl	8004bd8 <HAL_GetTick>
 80075d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	88fa      	ldrh	r2, [r7, #6]
 80075d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	88fa      	ldrh	r2, [r7, #6]
 80075de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075e8:	d108      	bne.n	80075fc <HAL_UART_Transmit+0x82>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d104      	bne.n	80075fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80075f2:	2300      	movs	r3, #0
 80075f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	61bb      	str	r3, [r7, #24]
 80075fa:	e003      	b.n	8007604 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007600:	2300      	movs	r3, #0
 8007602:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800760c:	e02a      	b.n	8007664 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	9300      	str	r3, [sp, #0]
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2200      	movs	r2, #0
 8007616:	2180      	movs	r1, #128	; 0x80
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 fb1f 	bl	8007c5c <UART_WaitOnFlagUntilTimeout>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d001      	beq.n	8007628 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	e036      	b.n	8007696 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d10b      	bne.n	8007646 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	881b      	ldrh	r3, [r3, #0]
 8007632:	461a      	mov	r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800763c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	3302      	adds	r3, #2
 8007642:	61bb      	str	r3, [r7, #24]
 8007644:	e007      	b.n	8007656 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	781a      	ldrb	r2, [r3, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	3301      	adds	r3, #1
 8007654:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800765a:	b29b      	uxth	r3, r3
 800765c:	3b01      	subs	r3, #1
 800765e:	b29a      	uxth	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007668:	b29b      	uxth	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1cf      	bne.n	800760e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	2200      	movs	r2, #0
 8007676:	2140      	movs	r1, #64	; 0x40
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f000 faef 	bl	8007c5c <UART_WaitOnFlagUntilTimeout>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d001      	beq.n	8007688 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	e006      	b.n	8007696 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2220      	movs	r2, #32
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007690:	2300      	movs	r3, #0
 8007692:	e000      	b.n	8007696 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007694:	2302      	movs	r3, #2
  }
}
 8007696:	4618      	mov	r0, r3
 8007698:	3720      	adds	r7, #32
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b084      	sub	sp, #16
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	60f8      	str	r0, [r7, #12]
 80076a6:	60b9      	str	r1, [r7, #8]
 80076a8:	4613      	mov	r3, r2
 80076aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	2b20      	cmp	r3, #32
 80076b6:	d11d      	bne.n	80076f4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d002      	beq.n	80076c4 <HAL_UART_Receive_IT+0x26>
 80076be:	88fb      	ldrh	r3, [r7, #6]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d101      	bne.n	80076c8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e016      	b.n	80076f6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d101      	bne.n	80076d6 <HAL_UART_Receive_IT+0x38>
 80076d2:	2302      	movs	r3, #2
 80076d4:	e00f      	b.n	80076f6 <HAL_UART_Receive_IT+0x58>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80076e4:	88fb      	ldrh	r3, [r7, #6]
 80076e6:	461a      	mov	r2, r3
 80076e8:	68b9      	ldr	r1, [r7, #8]
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f000 fb24 	bl	8007d38 <UART_Start_Receive_IT>
 80076f0:	4603      	mov	r3, r0
 80076f2:	e000      	b.n	80076f6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80076f4:	2302      	movs	r3, #2
  }
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
	...

08007700 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b0ba      	sub	sp, #232	; 0xe8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007726:	2300      	movs	r3, #0
 8007728:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800772c:	2300      	movs	r3, #0
 800772e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007736:	f003 030f 	and.w	r3, r3, #15
 800773a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800773e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10f      	bne.n	8007766 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800774a:	f003 0320 	and.w	r3, r3, #32
 800774e:	2b00      	cmp	r3, #0
 8007750:	d009      	beq.n	8007766 <HAL_UART_IRQHandler+0x66>
 8007752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007756:	f003 0320 	and.w	r3, r3, #32
 800775a:	2b00      	cmp	r3, #0
 800775c:	d003      	beq.n	8007766 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fc07 	bl	8007f72 <UART_Receive_IT>
      return;
 8007764:	e256      	b.n	8007c14 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007766:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800776a:	2b00      	cmp	r3, #0
 800776c:	f000 80de 	beq.w	800792c <HAL_UART_IRQHandler+0x22c>
 8007770:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007774:	f003 0301 	and.w	r3, r3, #1
 8007778:	2b00      	cmp	r3, #0
 800777a:	d106      	bne.n	800778a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800777c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007780:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 80d1 	beq.w	800792c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800778a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800778e:	f003 0301 	and.w	r3, r3, #1
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00b      	beq.n	80077ae <HAL_UART_IRQHandler+0xae>
 8007796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800779a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d005      	beq.n	80077ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a6:	f043 0201 	orr.w	r2, r3, #1
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077b2:	f003 0304 	and.w	r3, r3, #4
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00b      	beq.n	80077d2 <HAL_UART_IRQHandler+0xd2>
 80077ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d005      	beq.n	80077d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ca:	f043 0202 	orr.w	r2, r3, #2
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00b      	beq.n	80077f6 <HAL_UART_IRQHandler+0xf6>
 80077de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077e2:	f003 0301 	and.w	r3, r3, #1
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d005      	beq.n	80077f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ee:	f043 0204 	orr.w	r2, r3, #4
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80077f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077fa:	f003 0308 	and.w	r3, r3, #8
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d011      	beq.n	8007826 <HAL_UART_IRQHandler+0x126>
 8007802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007806:	f003 0320 	and.w	r3, r3, #32
 800780a:	2b00      	cmp	r3, #0
 800780c:	d105      	bne.n	800781a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800780e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	d005      	beq.n	8007826 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781e:	f043 0208 	orr.w	r2, r3, #8
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782a:	2b00      	cmp	r3, #0
 800782c:	f000 81ed 	beq.w	8007c0a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007834:	f003 0320 	and.w	r3, r3, #32
 8007838:	2b00      	cmp	r3, #0
 800783a:	d008      	beq.n	800784e <HAL_UART_IRQHandler+0x14e>
 800783c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007840:	f003 0320 	and.w	r3, r3, #32
 8007844:	2b00      	cmp	r3, #0
 8007846:	d002      	beq.n	800784e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fb92 	bl	8007f72 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	695b      	ldr	r3, [r3, #20]
 8007854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007858:	2b40      	cmp	r3, #64	; 0x40
 800785a:	bf0c      	ite	eq
 800785c:	2301      	moveq	r3, #1
 800785e:	2300      	movne	r3, #0
 8007860:	b2db      	uxtb	r3, r3
 8007862:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786a:	f003 0308 	and.w	r3, r3, #8
 800786e:	2b00      	cmp	r3, #0
 8007870:	d103      	bne.n	800787a <HAL_UART_IRQHandler+0x17a>
 8007872:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007876:	2b00      	cmp	r3, #0
 8007878:	d04f      	beq.n	800791a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fa9a 	bl	8007db4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800788a:	2b40      	cmp	r3, #64	; 0x40
 800788c:	d141      	bne.n	8007912 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3314      	adds	r3, #20
 8007894:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007898:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800789c:	e853 3f00 	ldrex	r3, [r3]
 80078a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80078a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3314      	adds	r3, #20
 80078b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80078ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80078be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80078c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80078ca:	e841 2300 	strex	r3, r2, [r1]
 80078ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80078d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1d9      	bne.n	800788e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d013      	beq.n	800790a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e6:	4a7d      	ldr	r2, [pc, #500]	; (8007adc <HAL_UART_IRQHandler+0x3dc>)
 80078e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7fd fb23 	bl	8004f3a <HAL_DMA_Abort_IT>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d016      	beq.n	8007928 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007904:	4610      	mov	r0, r2
 8007906:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007908:	e00e      	b.n	8007928 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f990 	bl	8007c30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007910:	e00a      	b.n	8007928 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f98c 	bl	8007c30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007918:	e006      	b.n	8007928 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f988 	bl	8007c30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007926:	e170      	b.n	8007c0a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007928:	bf00      	nop
    return;
 800792a:	e16e      	b.n	8007c0a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007930:	2b01      	cmp	r3, #1
 8007932:	f040 814a 	bne.w	8007bca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800793a:	f003 0310 	and.w	r3, r3, #16
 800793e:	2b00      	cmp	r3, #0
 8007940:	f000 8143 	beq.w	8007bca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007948:	f003 0310 	and.w	r3, r3, #16
 800794c:	2b00      	cmp	r3, #0
 800794e:	f000 813c 	beq.w	8007bca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007952:	2300      	movs	r3, #0
 8007954:	60bb      	str	r3, [r7, #8]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	60bb      	str	r3, [r7, #8]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	60bb      	str	r3, [r7, #8]
 8007966:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007972:	2b40      	cmp	r3, #64	; 0x40
 8007974:	f040 80b4 	bne.w	8007ae0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007984:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007988:	2b00      	cmp	r3, #0
 800798a:	f000 8140 	beq.w	8007c0e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007992:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007996:	429a      	cmp	r2, r3
 8007998:	f080 8139 	bcs.w	8007c0e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a8:	69db      	ldr	r3, [r3, #28]
 80079aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079ae:	f000 8088 	beq.w	8007ac2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	330c      	adds	r3, #12
 80079b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079c0:	e853 3f00 	ldrex	r3, [r3]
 80079c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80079c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	330c      	adds	r3, #12
 80079da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80079de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80079e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80079ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80079ee:	e841 2300 	strex	r3, r2, [r1]
 80079f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80079f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1d9      	bne.n	80079b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3314      	adds	r3, #20
 8007a04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a08:	e853 3f00 	ldrex	r3, [r3]
 8007a0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a10:	f023 0301 	bic.w	r3, r3, #1
 8007a14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	3314      	adds	r3, #20
 8007a1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a2e:	e841 2300 	strex	r3, r2, [r1]
 8007a32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1e1      	bne.n	80079fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	3314      	adds	r3, #20
 8007a40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a44:	e853 3f00 	ldrex	r3, [r3]
 8007a48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	3314      	adds	r3, #20
 8007a5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a66:	e841 2300 	strex	r3, r2, [r1]
 8007a6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1e3      	bne.n	8007a3a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2220      	movs	r2, #32
 8007a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	330c      	adds	r3, #12
 8007a86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a8a:	e853 3f00 	ldrex	r3, [r3]
 8007a8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a92:	f023 0310 	bic.w	r3, r3, #16
 8007a96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	330c      	adds	r3, #12
 8007aa0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007aa4:	65ba      	str	r2, [r7, #88]	; 0x58
 8007aa6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007aaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007aac:	e841 2300 	strex	r3, r2, [r1]
 8007ab0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1e3      	bne.n	8007a80 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7fd f9cc 	bl	8004e5a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f8b6 	bl	8007c44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ad8:	e099      	b.n	8007c0e <HAL_UART_IRQHandler+0x50e>
 8007ada:	bf00      	nop
 8007adc:	08007e7b 	.word	0x08007e7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f000 808b 	beq.w	8007c12 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007afc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f000 8086 	beq.w	8007c12 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	330c      	adds	r3, #12
 8007b0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	330c      	adds	r3, #12
 8007b26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007b2a:	647a      	str	r2, [r7, #68]	; 0x44
 8007b2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b32:	e841 2300 	strex	r3, r2, [r1]
 8007b36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1e3      	bne.n	8007b06 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	3314      	adds	r3, #20
 8007b44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b48:	e853 3f00 	ldrex	r3, [r3]
 8007b4c:	623b      	str	r3, [r7, #32]
   return(result);
 8007b4e:	6a3b      	ldr	r3, [r7, #32]
 8007b50:	f023 0301 	bic.w	r3, r3, #1
 8007b54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	3314      	adds	r3, #20
 8007b5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b62:	633a      	str	r2, [r7, #48]	; 0x30
 8007b64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b6a:	e841 2300 	strex	r3, r2, [r1]
 8007b6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1e3      	bne.n	8007b3e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2220      	movs	r2, #32
 8007b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	330c      	adds	r3, #12
 8007b8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	e853 3f00 	ldrex	r3, [r3]
 8007b92:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f023 0310 	bic.w	r3, r3, #16
 8007b9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	330c      	adds	r3, #12
 8007ba4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007ba8:	61fa      	str	r2, [r7, #28]
 8007baa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bac:	69b9      	ldr	r1, [r7, #24]
 8007bae:	69fa      	ldr	r2, [r7, #28]
 8007bb0:	e841 2300 	strex	r3, r2, [r1]
 8007bb4:	617b      	str	r3, [r7, #20]
   return(result);
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1e3      	bne.n	8007b84 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007bbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f83e 	bl	8007c44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007bc8:	e023      	b.n	8007c12 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d009      	beq.n	8007bea <HAL_UART_IRQHandler+0x4ea>
 8007bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d003      	beq.n	8007bea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f95d 	bl	8007ea2 <UART_Transmit_IT>
    return;
 8007be8:	e014      	b.n	8007c14 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00e      	beq.n	8007c14 <HAL_UART_IRQHandler+0x514>
 8007bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d008      	beq.n	8007c14 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f99d 	bl	8007f42 <UART_EndTransmit_IT>
    return;
 8007c08:	e004      	b.n	8007c14 <HAL_UART_IRQHandler+0x514>
    return;
 8007c0a:	bf00      	nop
 8007c0c:	e002      	b.n	8007c14 <HAL_UART_IRQHandler+0x514>
      return;
 8007c0e:	bf00      	nop
 8007c10:	e000      	b.n	8007c14 <HAL_UART_IRQHandler+0x514>
      return;
 8007c12:	bf00      	nop
  }
}
 8007c14:	37e8      	adds	r7, #232	; 0xe8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop

08007c1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b090      	sub	sp, #64	; 0x40
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	603b      	str	r3, [r7, #0]
 8007c68:	4613      	mov	r3, r2
 8007c6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c6c:	e050      	b.n	8007d10 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c74:	d04c      	beq.n	8007d10 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007c76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d007      	beq.n	8007c8c <UART_WaitOnFlagUntilTimeout+0x30>
 8007c7c:	f7fc ffac 	bl	8004bd8 <HAL_GetTick>
 8007c80:	4602      	mov	r2, r0
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d241      	bcs.n	8007d10 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	330c      	adds	r3, #12
 8007c92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c96:	e853 3f00 	ldrex	r3, [r3]
 8007c9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	330c      	adds	r3, #12
 8007caa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007cac:	637a      	str	r2, [r7, #52]	; 0x34
 8007cae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cb4:	e841 2300 	strex	r3, r2, [r1]
 8007cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1e5      	bne.n	8007c8c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	3314      	adds	r3, #20
 8007cc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	e853 3f00 	ldrex	r3, [r3]
 8007cce:	613b      	str	r3, [r7, #16]
   return(result);
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	f023 0301 	bic.w	r3, r3, #1
 8007cd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	3314      	adds	r3, #20
 8007cde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ce0:	623a      	str	r2, [r7, #32]
 8007ce2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce4:	69f9      	ldr	r1, [r7, #28]
 8007ce6:	6a3a      	ldr	r2, [r7, #32]
 8007ce8:	e841 2300 	strex	r3, r2, [r1]
 8007cec:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1e5      	bne.n	8007cc0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2220      	movs	r2, #32
 8007cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2220      	movs	r2, #32
 8007d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e00f      	b.n	8007d30 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	4013      	ands	r3, r2
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	bf0c      	ite	eq
 8007d20:	2301      	moveq	r3, #1
 8007d22:	2300      	movne	r3, #0
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	461a      	mov	r2, r3
 8007d28:	79fb      	ldrb	r3, [r7, #7]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d09f      	beq.n	8007c6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3740      	adds	r7, #64	; 0x40
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	4613      	mov	r3, r2
 8007d44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	88fa      	ldrh	r2, [r7, #6]
 8007d50:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	88fa      	ldrh	r2, [r7, #6]
 8007d56:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2222      	movs	r2, #34	; 0x22
 8007d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d007      	beq.n	8007d86 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68da      	ldr	r2, [r3, #12]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d84:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	695a      	ldr	r2, [r3, #20]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f042 0201 	orr.w	r2, r2, #1
 8007d94:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68da      	ldr	r2, [r3, #12]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f042 0220 	orr.w	r2, r2, #32
 8007da4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3714      	adds	r7, #20
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b095      	sub	sp, #84	; 0x54
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	330c      	adds	r3, #12
 8007dc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc6:	e853 3f00 	ldrex	r3, [r3]
 8007dca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	330c      	adds	r3, #12
 8007dda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ddc:	643a      	str	r2, [r7, #64]	; 0x40
 8007dde:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007de2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007de4:	e841 2300 	strex	r3, r2, [r1]
 8007de8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1e5      	bne.n	8007dbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3314      	adds	r3, #20
 8007df6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df8:	6a3b      	ldr	r3, [r7, #32]
 8007dfa:	e853 3f00 	ldrex	r3, [r3]
 8007dfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	f023 0301 	bic.w	r3, r3, #1
 8007e06:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	3314      	adds	r3, #20
 8007e0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e18:	e841 2300 	strex	r3, r2, [r1]
 8007e1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1e5      	bne.n	8007df0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d119      	bne.n	8007e60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	330c      	adds	r3, #12
 8007e32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	e853 3f00 	ldrex	r3, [r3]
 8007e3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	f023 0310 	bic.w	r3, r3, #16
 8007e42:	647b      	str	r3, [r7, #68]	; 0x44
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	330c      	adds	r3, #12
 8007e4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e4c:	61ba      	str	r2, [r7, #24]
 8007e4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e50:	6979      	ldr	r1, [r7, #20]
 8007e52:	69ba      	ldr	r2, [r7, #24]
 8007e54:	e841 2300 	strex	r3, r2, [r1]
 8007e58:	613b      	str	r3, [r7, #16]
   return(result);
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d1e5      	bne.n	8007e2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2220      	movs	r2, #32
 8007e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e6e:	bf00      	nop
 8007e70:	3754      	adds	r7, #84	; 0x54
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b084      	sub	sp, #16
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f7ff fecb 	bl	8007c30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e9a:	bf00      	nop
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b085      	sub	sp, #20
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b21      	cmp	r3, #33	; 0x21
 8007eb4:	d13e      	bne.n	8007f34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ebe:	d114      	bne.n	8007eea <UART_Transmit_IT+0x48>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d110      	bne.n	8007eea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6a1b      	ldr	r3, [r3, #32]
 8007ecc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	881b      	ldrh	r3, [r3, #0]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007edc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	1c9a      	adds	r2, r3, #2
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	621a      	str	r2, [r3, #32]
 8007ee8:	e008      	b.n	8007efc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	1c59      	adds	r1, r3, #1
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	6211      	str	r1, [r2, #32]
 8007ef4:	781a      	ldrb	r2, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	3b01      	subs	r3, #1
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	4619      	mov	r1, r3
 8007f0a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10f      	bne.n	8007f30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68da      	ldr	r2, [r3, #12]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68da      	ldr	r2, [r3, #12]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f30:	2300      	movs	r3, #0
 8007f32:	e000      	b.n	8007f36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f34:	2302      	movs	r3, #2
  }
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b082      	sub	sp, #8
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68da      	ldr	r2, [r3, #12]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f58:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2220      	movs	r2, #32
 8007f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7ff fe5a 	bl	8007c1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3708      	adds	r7, #8
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b08c      	sub	sp, #48	; 0x30
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b22      	cmp	r3, #34	; 0x22
 8007f84:	f040 80ab 	bne.w	80080de <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f90:	d117      	bne.n	8007fc2 <UART_Receive_IT+0x50>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d113      	bne.n	8007fc2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fba:	1c9a      	adds	r2, r3, #2
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	629a      	str	r2, [r3, #40]	; 0x28
 8007fc0:	e026      	b.n	8008010 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fd4:	d007      	beq.n	8007fe6 <UART_Receive_IT+0x74>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d10a      	bne.n	8007ff4 <UART_Receive_IT+0x82>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d106      	bne.n	8007ff4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	b2da      	uxtb	r2, r3
 8007fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff0:	701a      	strb	r2, [r3, #0]
 8007ff2:	e008      	b.n	8008006 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008000:	b2da      	uxtb	r2, r3
 8008002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008004:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800a:	1c5a      	adds	r2, r3, #1
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008014:	b29b      	uxth	r3, r3
 8008016:	3b01      	subs	r3, #1
 8008018:	b29b      	uxth	r3, r3
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	4619      	mov	r1, r3
 800801e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008020:	2b00      	cmp	r3, #0
 8008022:	d15a      	bne.n	80080da <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68da      	ldr	r2, [r3, #12]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f022 0220 	bic.w	r2, r2, #32
 8008032:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68da      	ldr	r2, [r3, #12]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008042:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	695a      	ldr	r2, [r3, #20]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f022 0201 	bic.w	r2, r2, #1
 8008052:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2220      	movs	r2, #32
 8008058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008060:	2b01      	cmp	r3, #1
 8008062:	d135      	bne.n	80080d0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	330c      	adds	r3, #12
 8008070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	e853 3f00 	ldrex	r3, [r3]
 8008078:	613b      	str	r3, [r7, #16]
   return(result);
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	f023 0310 	bic.w	r3, r3, #16
 8008080:	627b      	str	r3, [r7, #36]	; 0x24
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	330c      	adds	r3, #12
 8008088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800808a:	623a      	str	r2, [r7, #32]
 800808c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808e:	69f9      	ldr	r1, [r7, #28]
 8008090:	6a3a      	ldr	r2, [r7, #32]
 8008092:	e841 2300 	strex	r3, r2, [r1]
 8008096:	61bb      	str	r3, [r7, #24]
   return(result);
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1e5      	bne.n	800806a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 0310 	and.w	r3, r3, #16
 80080a8:	2b10      	cmp	r3, #16
 80080aa:	d10a      	bne.n	80080c2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080ac:	2300      	movs	r3, #0
 80080ae:	60fb      	str	r3, [r7, #12]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	60fb      	str	r3, [r7, #12]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	60fb      	str	r3, [r7, #12]
 80080c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080c6:	4619      	mov	r1, r3
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f7ff fdbb 	bl	8007c44 <HAL_UARTEx_RxEventCallback>
 80080ce:	e002      	b.n	80080d6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f7fc f973 	bl	80043bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80080d6:	2300      	movs	r3, #0
 80080d8:	e002      	b.n	80080e0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	e000      	b.n	80080e0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80080de:	2302      	movs	r3, #2
  }
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3730      	adds	r7, #48	; 0x30
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080ec:	b0c0      	sub	sp, #256	; 0x100
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008104:	68d9      	ldr	r1, [r3, #12]
 8008106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	ea40 0301 	orr.w	r3, r0, r1
 8008110:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008116:	689a      	ldr	r2, [r3, #8]
 8008118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	431a      	orrs	r2, r3
 8008120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	431a      	orrs	r2, r3
 8008128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800812c:	69db      	ldr	r3, [r3, #28]
 800812e:	4313      	orrs	r3, r2
 8008130:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008140:	f021 010c 	bic.w	r1, r1, #12
 8008144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800814e:	430b      	orrs	r3, r1
 8008150:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	695b      	ldr	r3, [r3, #20]
 800815a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800815e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008162:	6999      	ldr	r1, [r3, #24]
 8008164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	ea40 0301 	orr.w	r3, r0, r1
 800816e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	4b8f      	ldr	r3, [pc, #572]	; (80083b4 <UART_SetConfig+0x2cc>)
 8008178:	429a      	cmp	r2, r3
 800817a:	d005      	beq.n	8008188 <UART_SetConfig+0xa0>
 800817c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	4b8d      	ldr	r3, [pc, #564]	; (80083b8 <UART_SetConfig+0x2d0>)
 8008184:	429a      	cmp	r2, r3
 8008186:	d104      	bne.n	8008192 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008188:	f7fd fd1c 	bl	8005bc4 <HAL_RCC_GetPCLK2Freq>
 800818c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008190:	e003      	b.n	800819a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008192:	f7fd fd03 	bl	8005b9c <HAL_RCC_GetPCLK1Freq>
 8008196:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800819a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800819e:	69db      	ldr	r3, [r3, #28]
 80081a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081a4:	f040 810c 	bne.w	80083c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80081a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081ac:	2200      	movs	r2, #0
 80081ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80081b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80081b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80081ba:	4622      	mov	r2, r4
 80081bc:	462b      	mov	r3, r5
 80081be:	1891      	adds	r1, r2, r2
 80081c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80081c2:	415b      	adcs	r3, r3
 80081c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80081ca:	4621      	mov	r1, r4
 80081cc:	eb12 0801 	adds.w	r8, r2, r1
 80081d0:	4629      	mov	r1, r5
 80081d2:	eb43 0901 	adc.w	r9, r3, r1
 80081d6:	f04f 0200 	mov.w	r2, #0
 80081da:	f04f 0300 	mov.w	r3, #0
 80081de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081ea:	4690      	mov	r8, r2
 80081ec:	4699      	mov	r9, r3
 80081ee:	4623      	mov	r3, r4
 80081f0:	eb18 0303 	adds.w	r3, r8, r3
 80081f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081f8:	462b      	mov	r3, r5
 80081fa:	eb49 0303 	adc.w	r3, r9, r3
 80081fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800820e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008212:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008216:	460b      	mov	r3, r1
 8008218:	18db      	adds	r3, r3, r3
 800821a:	653b      	str	r3, [r7, #80]	; 0x50
 800821c:	4613      	mov	r3, r2
 800821e:	eb42 0303 	adc.w	r3, r2, r3
 8008222:	657b      	str	r3, [r7, #84]	; 0x54
 8008224:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008228:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800822c:	f7f8 fd34 	bl	8000c98 <__aeabi_uldivmod>
 8008230:	4602      	mov	r2, r0
 8008232:	460b      	mov	r3, r1
 8008234:	4b61      	ldr	r3, [pc, #388]	; (80083bc <UART_SetConfig+0x2d4>)
 8008236:	fba3 2302 	umull	r2, r3, r3, r2
 800823a:	095b      	lsrs	r3, r3, #5
 800823c:	011c      	lsls	r4, r3, #4
 800823e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008242:	2200      	movs	r2, #0
 8008244:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008248:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800824c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008250:	4642      	mov	r2, r8
 8008252:	464b      	mov	r3, r9
 8008254:	1891      	adds	r1, r2, r2
 8008256:	64b9      	str	r1, [r7, #72]	; 0x48
 8008258:	415b      	adcs	r3, r3
 800825a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800825c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008260:	4641      	mov	r1, r8
 8008262:	eb12 0a01 	adds.w	sl, r2, r1
 8008266:	4649      	mov	r1, r9
 8008268:	eb43 0b01 	adc.w	fp, r3, r1
 800826c:	f04f 0200 	mov.w	r2, #0
 8008270:	f04f 0300 	mov.w	r3, #0
 8008274:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008278:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800827c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008280:	4692      	mov	sl, r2
 8008282:	469b      	mov	fp, r3
 8008284:	4643      	mov	r3, r8
 8008286:	eb1a 0303 	adds.w	r3, sl, r3
 800828a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800828e:	464b      	mov	r3, r9
 8008290:	eb4b 0303 	adc.w	r3, fp, r3
 8008294:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80082a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80082ac:	460b      	mov	r3, r1
 80082ae:	18db      	adds	r3, r3, r3
 80082b0:	643b      	str	r3, [r7, #64]	; 0x40
 80082b2:	4613      	mov	r3, r2
 80082b4:	eb42 0303 	adc.w	r3, r2, r3
 80082b8:	647b      	str	r3, [r7, #68]	; 0x44
 80082ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80082be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80082c2:	f7f8 fce9 	bl	8000c98 <__aeabi_uldivmod>
 80082c6:	4602      	mov	r2, r0
 80082c8:	460b      	mov	r3, r1
 80082ca:	4611      	mov	r1, r2
 80082cc:	4b3b      	ldr	r3, [pc, #236]	; (80083bc <UART_SetConfig+0x2d4>)
 80082ce:	fba3 2301 	umull	r2, r3, r3, r1
 80082d2:	095b      	lsrs	r3, r3, #5
 80082d4:	2264      	movs	r2, #100	; 0x64
 80082d6:	fb02 f303 	mul.w	r3, r2, r3
 80082da:	1acb      	subs	r3, r1, r3
 80082dc:	00db      	lsls	r3, r3, #3
 80082de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80082e2:	4b36      	ldr	r3, [pc, #216]	; (80083bc <UART_SetConfig+0x2d4>)
 80082e4:	fba3 2302 	umull	r2, r3, r3, r2
 80082e8:	095b      	lsrs	r3, r3, #5
 80082ea:	005b      	lsls	r3, r3, #1
 80082ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082f0:	441c      	add	r4, r3
 80082f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082f6:	2200      	movs	r2, #0
 80082f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008300:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008304:	4642      	mov	r2, r8
 8008306:	464b      	mov	r3, r9
 8008308:	1891      	adds	r1, r2, r2
 800830a:	63b9      	str	r1, [r7, #56]	; 0x38
 800830c:	415b      	adcs	r3, r3
 800830e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008310:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008314:	4641      	mov	r1, r8
 8008316:	1851      	adds	r1, r2, r1
 8008318:	6339      	str	r1, [r7, #48]	; 0x30
 800831a:	4649      	mov	r1, r9
 800831c:	414b      	adcs	r3, r1
 800831e:	637b      	str	r3, [r7, #52]	; 0x34
 8008320:	f04f 0200 	mov.w	r2, #0
 8008324:	f04f 0300 	mov.w	r3, #0
 8008328:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800832c:	4659      	mov	r1, fp
 800832e:	00cb      	lsls	r3, r1, #3
 8008330:	4651      	mov	r1, sl
 8008332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008336:	4651      	mov	r1, sl
 8008338:	00ca      	lsls	r2, r1, #3
 800833a:	4610      	mov	r0, r2
 800833c:	4619      	mov	r1, r3
 800833e:	4603      	mov	r3, r0
 8008340:	4642      	mov	r2, r8
 8008342:	189b      	adds	r3, r3, r2
 8008344:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008348:	464b      	mov	r3, r9
 800834a:	460a      	mov	r2, r1
 800834c:	eb42 0303 	adc.w	r3, r2, r3
 8008350:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008360:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008364:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008368:	460b      	mov	r3, r1
 800836a:	18db      	adds	r3, r3, r3
 800836c:	62bb      	str	r3, [r7, #40]	; 0x28
 800836e:	4613      	mov	r3, r2
 8008370:	eb42 0303 	adc.w	r3, r2, r3
 8008374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008376:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800837a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800837e:	f7f8 fc8b 	bl	8000c98 <__aeabi_uldivmod>
 8008382:	4602      	mov	r2, r0
 8008384:	460b      	mov	r3, r1
 8008386:	4b0d      	ldr	r3, [pc, #52]	; (80083bc <UART_SetConfig+0x2d4>)
 8008388:	fba3 1302 	umull	r1, r3, r3, r2
 800838c:	095b      	lsrs	r3, r3, #5
 800838e:	2164      	movs	r1, #100	; 0x64
 8008390:	fb01 f303 	mul.w	r3, r1, r3
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	00db      	lsls	r3, r3, #3
 8008398:	3332      	adds	r3, #50	; 0x32
 800839a:	4a08      	ldr	r2, [pc, #32]	; (80083bc <UART_SetConfig+0x2d4>)
 800839c:	fba2 2303 	umull	r2, r3, r2, r3
 80083a0:	095b      	lsrs	r3, r3, #5
 80083a2:	f003 0207 	and.w	r2, r3, #7
 80083a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4422      	add	r2, r4
 80083ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80083b0:	e106      	b.n	80085c0 <UART_SetConfig+0x4d8>
 80083b2:	bf00      	nop
 80083b4:	40011000 	.word	0x40011000
 80083b8:	40011400 	.word	0x40011400
 80083bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083c4:	2200      	movs	r2, #0
 80083c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80083ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80083ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80083d2:	4642      	mov	r2, r8
 80083d4:	464b      	mov	r3, r9
 80083d6:	1891      	adds	r1, r2, r2
 80083d8:	6239      	str	r1, [r7, #32]
 80083da:	415b      	adcs	r3, r3
 80083dc:	627b      	str	r3, [r7, #36]	; 0x24
 80083de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083e2:	4641      	mov	r1, r8
 80083e4:	1854      	adds	r4, r2, r1
 80083e6:	4649      	mov	r1, r9
 80083e8:	eb43 0501 	adc.w	r5, r3, r1
 80083ec:	f04f 0200 	mov.w	r2, #0
 80083f0:	f04f 0300 	mov.w	r3, #0
 80083f4:	00eb      	lsls	r3, r5, #3
 80083f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083fa:	00e2      	lsls	r2, r4, #3
 80083fc:	4614      	mov	r4, r2
 80083fe:	461d      	mov	r5, r3
 8008400:	4643      	mov	r3, r8
 8008402:	18e3      	adds	r3, r4, r3
 8008404:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008408:	464b      	mov	r3, r9
 800840a:	eb45 0303 	adc.w	r3, r5, r3
 800840e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800841e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008422:	f04f 0200 	mov.w	r2, #0
 8008426:	f04f 0300 	mov.w	r3, #0
 800842a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800842e:	4629      	mov	r1, r5
 8008430:	008b      	lsls	r3, r1, #2
 8008432:	4621      	mov	r1, r4
 8008434:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008438:	4621      	mov	r1, r4
 800843a:	008a      	lsls	r2, r1, #2
 800843c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008440:	f7f8 fc2a 	bl	8000c98 <__aeabi_uldivmod>
 8008444:	4602      	mov	r2, r0
 8008446:	460b      	mov	r3, r1
 8008448:	4b60      	ldr	r3, [pc, #384]	; (80085cc <UART_SetConfig+0x4e4>)
 800844a:	fba3 2302 	umull	r2, r3, r3, r2
 800844e:	095b      	lsrs	r3, r3, #5
 8008450:	011c      	lsls	r4, r3, #4
 8008452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008456:	2200      	movs	r2, #0
 8008458:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800845c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008460:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008464:	4642      	mov	r2, r8
 8008466:	464b      	mov	r3, r9
 8008468:	1891      	adds	r1, r2, r2
 800846a:	61b9      	str	r1, [r7, #24]
 800846c:	415b      	adcs	r3, r3
 800846e:	61fb      	str	r3, [r7, #28]
 8008470:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008474:	4641      	mov	r1, r8
 8008476:	1851      	adds	r1, r2, r1
 8008478:	6139      	str	r1, [r7, #16]
 800847a:	4649      	mov	r1, r9
 800847c:	414b      	adcs	r3, r1
 800847e:	617b      	str	r3, [r7, #20]
 8008480:	f04f 0200 	mov.w	r2, #0
 8008484:	f04f 0300 	mov.w	r3, #0
 8008488:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800848c:	4659      	mov	r1, fp
 800848e:	00cb      	lsls	r3, r1, #3
 8008490:	4651      	mov	r1, sl
 8008492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008496:	4651      	mov	r1, sl
 8008498:	00ca      	lsls	r2, r1, #3
 800849a:	4610      	mov	r0, r2
 800849c:	4619      	mov	r1, r3
 800849e:	4603      	mov	r3, r0
 80084a0:	4642      	mov	r2, r8
 80084a2:	189b      	adds	r3, r3, r2
 80084a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80084a8:	464b      	mov	r3, r9
 80084aa:	460a      	mov	r2, r1
 80084ac:	eb42 0303 	adc.w	r3, r2, r3
 80084b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80084b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80084be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80084c0:	f04f 0200 	mov.w	r2, #0
 80084c4:	f04f 0300 	mov.w	r3, #0
 80084c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80084cc:	4649      	mov	r1, r9
 80084ce:	008b      	lsls	r3, r1, #2
 80084d0:	4641      	mov	r1, r8
 80084d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084d6:	4641      	mov	r1, r8
 80084d8:	008a      	lsls	r2, r1, #2
 80084da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80084de:	f7f8 fbdb 	bl	8000c98 <__aeabi_uldivmod>
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
 80084e6:	4611      	mov	r1, r2
 80084e8:	4b38      	ldr	r3, [pc, #224]	; (80085cc <UART_SetConfig+0x4e4>)
 80084ea:	fba3 2301 	umull	r2, r3, r3, r1
 80084ee:	095b      	lsrs	r3, r3, #5
 80084f0:	2264      	movs	r2, #100	; 0x64
 80084f2:	fb02 f303 	mul.w	r3, r2, r3
 80084f6:	1acb      	subs	r3, r1, r3
 80084f8:	011b      	lsls	r3, r3, #4
 80084fa:	3332      	adds	r3, #50	; 0x32
 80084fc:	4a33      	ldr	r2, [pc, #204]	; (80085cc <UART_SetConfig+0x4e4>)
 80084fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008502:	095b      	lsrs	r3, r3, #5
 8008504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008508:	441c      	add	r4, r3
 800850a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800850e:	2200      	movs	r2, #0
 8008510:	673b      	str	r3, [r7, #112]	; 0x70
 8008512:	677a      	str	r2, [r7, #116]	; 0x74
 8008514:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008518:	4642      	mov	r2, r8
 800851a:	464b      	mov	r3, r9
 800851c:	1891      	adds	r1, r2, r2
 800851e:	60b9      	str	r1, [r7, #8]
 8008520:	415b      	adcs	r3, r3
 8008522:	60fb      	str	r3, [r7, #12]
 8008524:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008528:	4641      	mov	r1, r8
 800852a:	1851      	adds	r1, r2, r1
 800852c:	6039      	str	r1, [r7, #0]
 800852e:	4649      	mov	r1, r9
 8008530:	414b      	adcs	r3, r1
 8008532:	607b      	str	r3, [r7, #4]
 8008534:	f04f 0200 	mov.w	r2, #0
 8008538:	f04f 0300 	mov.w	r3, #0
 800853c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008540:	4659      	mov	r1, fp
 8008542:	00cb      	lsls	r3, r1, #3
 8008544:	4651      	mov	r1, sl
 8008546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800854a:	4651      	mov	r1, sl
 800854c:	00ca      	lsls	r2, r1, #3
 800854e:	4610      	mov	r0, r2
 8008550:	4619      	mov	r1, r3
 8008552:	4603      	mov	r3, r0
 8008554:	4642      	mov	r2, r8
 8008556:	189b      	adds	r3, r3, r2
 8008558:	66bb      	str	r3, [r7, #104]	; 0x68
 800855a:	464b      	mov	r3, r9
 800855c:	460a      	mov	r2, r1
 800855e:	eb42 0303 	adc.w	r3, r2, r3
 8008562:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	663b      	str	r3, [r7, #96]	; 0x60
 800856e:	667a      	str	r2, [r7, #100]	; 0x64
 8008570:	f04f 0200 	mov.w	r2, #0
 8008574:	f04f 0300 	mov.w	r3, #0
 8008578:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800857c:	4649      	mov	r1, r9
 800857e:	008b      	lsls	r3, r1, #2
 8008580:	4641      	mov	r1, r8
 8008582:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008586:	4641      	mov	r1, r8
 8008588:	008a      	lsls	r2, r1, #2
 800858a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800858e:	f7f8 fb83 	bl	8000c98 <__aeabi_uldivmod>
 8008592:	4602      	mov	r2, r0
 8008594:	460b      	mov	r3, r1
 8008596:	4b0d      	ldr	r3, [pc, #52]	; (80085cc <UART_SetConfig+0x4e4>)
 8008598:	fba3 1302 	umull	r1, r3, r3, r2
 800859c:	095b      	lsrs	r3, r3, #5
 800859e:	2164      	movs	r1, #100	; 0x64
 80085a0:	fb01 f303 	mul.w	r3, r1, r3
 80085a4:	1ad3      	subs	r3, r2, r3
 80085a6:	011b      	lsls	r3, r3, #4
 80085a8:	3332      	adds	r3, #50	; 0x32
 80085aa:	4a08      	ldr	r2, [pc, #32]	; (80085cc <UART_SetConfig+0x4e4>)
 80085ac:	fba2 2303 	umull	r2, r3, r2, r3
 80085b0:	095b      	lsrs	r3, r3, #5
 80085b2:	f003 020f 	and.w	r2, r3, #15
 80085b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4422      	add	r2, r4
 80085be:	609a      	str	r2, [r3, #8]
}
 80085c0:	bf00      	nop
 80085c2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80085c6:	46bd      	mov	sp, r7
 80085c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085cc:	51eb851f 	.word	0x51eb851f

080085d0 <atoi>:
 80085d0:	220a      	movs	r2, #10
 80085d2:	2100      	movs	r1, #0
 80085d4:	f000 befc 	b.w	80093d0 <strtol>

080085d8 <sulp>:
 80085d8:	b570      	push	{r4, r5, r6, lr}
 80085da:	4604      	mov	r4, r0
 80085dc:	460d      	mov	r5, r1
 80085de:	ec45 4b10 	vmov	d0, r4, r5
 80085e2:	4616      	mov	r6, r2
 80085e4:	f003 fdb8 	bl	800c158 <__ulp>
 80085e8:	ec51 0b10 	vmov	r0, r1, d0
 80085ec:	b17e      	cbz	r6, 800860e <sulp+0x36>
 80085ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80085f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	dd09      	ble.n	800860e <sulp+0x36>
 80085fa:	051b      	lsls	r3, r3, #20
 80085fc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008600:	2400      	movs	r4, #0
 8008602:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008606:	4622      	mov	r2, r4
 8008608:	462b      	mov	r3, r5
 800860a:	f7f7 fffd 	bl	8000608 <__aeabi_dmul>
 800860e:	bd70      	pop	{r4, r5, r6, pc}

08008610 <_strtod_l>:
 8008610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008614:	ed2d 8b02 	vpush	{d8}
 8008618:	b09b      	sub	sp, #108	; 0x6c
 800861a:	4604      	mov	r4, r0
 800861c:	9213      	str	r2, [sp, #76]	; 0x4c
 800861e:	2200      	movs	r2, #0
 8008620:	9216      	str	r2, [sp, #88]	; 0x58
 8008622:	460d      	mov	r5, r1
 8008624:	f04f 0800 	mov.w	r8, #0
 8008628:	f04f 0900 	mov.w	r9, #0
 800862c:	460a      	mov	r2, r1
 800862e:	9215      	str	r2, [sp, #84]	; 0x54
 8008630:	7811      	ldrb	r1, [r2, #0]
 8008632:	292b      	cmp	r1, #43	; 0x2b
 8008634:	d04c      	beq.n	80086d0 <_strtod_l+0xc0>
 8008636:	d83a      	bhi.n	80086ae <_strtod_l+0x9e>
 8008638:	290d      	cmp	r1, #13
 800863a:	d834      	bhi.n	80086a6 <_strtod_l+0x96>
 800863c:	2908      	cmp	r1, #8
 800863e:	d834      	bhi.n	80086aa <_strtod_l+0x9a>
 8008640:	2900      	cmp	r1, #0
 8008642:	d03d      	beq.n	80086c0 <_strtod_l+0xb0>
 8008644:	2200      	movs	r2, #0
 8008646:	920a      	str	r2, [sp, #40]	; 0x28
 8008648:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800864a:	7832      	ldrb	r2, [r6, #0]
 800864c:	2a30      	cmp	r2, #48	; 0x30
 800864e:	f040 80b4 	bne.w	80087ba <_strtod_l+0x1aa>
 8008652:	7872      	ldrb	r2, [r6, #1]
 8008654:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008658:	2a58      	cmp	r2, #88	; 0x58
 800865a:	d170      	bne.n	800873e <_strtod_l+0x12e>
 800865c:	9302      	str	r3, [sp, #8]
 800865e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008660:	9301      	str	r3, [sp, #4]
 8008662:	ab16      	add	r3, sp, #88	; 0x58
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	4a8e      	ldr	r2, [pc, #568]	; (80088a0 <_strtod_l+0x290>)
 8008668:	ab17      	add	r3, sp, #92	; 0x5c
 800866a:	a915      	add	r1, sp, #84	; 0x54
 800866c:	4620      	mov	r0, r4
 800866e:	f002 fe51 	bl	800b314 <__gethex>
 8008672:	f010 070f 	ands.w	r7, r0, #15
 8008676:	4605      	mov	r5, r0
 8008678:	d005      	beq.n	8008686 <_strtod_l+0x76>
 800867a:	2f06      	cmp	r7, #6
 800867c:	d12a      	bne.n	80086d4 <_strtod_l+0xc4>
 800867e:	3601      	adds	r6, #1
 8008680:	2300      	movs	r3, #0
 8008682:	9615      	str	r6, [sp, #84]	; 0x54
 8008684:	930a      	str	r3, [sp, #40]	; 0x28
 8008686:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008688:	2b00      	cmp	r3, #0
 800868a:	f040 857f 	bne.w	800918c <_strtod_l+0xb7c>
 800868e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008690:	b1db      	cbz	r3, 80086ca <_strtod_l+0xba>
 8008692:	4642      	mov	r2, r8
 8008694:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008698:	ec43 2b10 	vmov	d0, r2, r3
 800869c:	b01b      	add	sp, #108	; 0x6c
 800869e:	ecbd 8b02 	vpop	{d8}
 80086a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a6:	2920      	cmp	r1, #32
 80086a8:	d1cc      	bne.n	8008644 <_strtod_l+0x34>
 80086aa:	3201      	adds	r2, #1
 80086ac:	e7bf      	b.n	800862e <_strtod_l+0x1e>
 80086ae:	292d      	cmp	r1, #45	; 0x2d
 80086b0:	d1c8      	bne.n	8008644 <_strtod_l+0x34>
 80086b2:	2101      	movs	r1, #1
 80086b4:	910a      	str	r1, [sp, #40]	; 0x28
 80086b6:	1c51      	adds	r1, r2, #1
 80086b8:	9115      	str	r1, [sp, #84]	; 0x54
 80086ba:	7852      	ldrb	r2, [r2, #1]
 80086bc:	2a00      	cmp	r2, #0
 80086be:	d1c3      	bne.n	8008648 <_strtod_l+0x38>
 80086c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80086c2:	9515      	str	r5, [sp, #84]	; 0x54
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f040 855f 	bne.w	8009188 <_strtod_l+0xb78>
 80086ca:	4642      	mov	r2, r8
 80086cc:	464b      	mov	r3, r9
 80086ce:	e7e3      	b.n	8008698 <_strtod_l+0x88>
 80086d0:	2100      	movs	r1, #0
 80086d2:	e7ef      	b.n	80086b4 <_strtod_l+0xa4>
 80086d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80086d6:	b13a      	cbz	r2, 80086e8 <_strtod_l+0xd8>
 80086d8:	2135      	movs	r1, #53	; 0x35
 80086da:	a818      	add	r0, sp, #96	; 0x60
 80086dc:	f003 fe39 	bl	800c352 <__copybits>
 80086e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80086e2:	4620      	mov	r0, r4
 80086e4:	f003 fa0c 	bl	800bb00 <_Bfree>
 80086e8:	3f01      	subs	r7, #1
 80086ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80086ec:	2f04      	cmp	r7, #4
 80086ee:	d806      	bhi.n	80086fe <_strtod_l+0xee>
 80086f0:	e8df f007 	tbb	[pc, r7]
 80086f4:	201d0314 	.word	0x201d0314
 80086f8:	14          	.byte	0x14
 80086f9:	00          	.byte	0x00
 80086fa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80086fe:	05e9      	lsls	r1, r5, #23
 8008700:	bf48      	it	mi
 8008702:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008706:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800870a:	0d1b      	lsrs	r3, r3, #20
 800870c:	051b      	lsls	r3, r3, #20
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1b9      	bne.n	8008686 <_strtod_l+0x76>
 8008712:	f001 fe83 	bl	800a41c <__errno>
 8008716:	2322      	movs	r3, #34	; 0x22
 8008718:	6003      	str	r3, [r0, #0]
 800871a:	e7b4      	b.n	8008686 <_strtod_l+0x76>
 800871c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008720:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008724:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008728:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800872c:	e7e7      	b.n	80086fe <_strtod_l+0xee>
 800872e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80088a8 <_strtod_l+0x298>
 8008732:	e7e4      	b.n	80086fe <_strtod_l+0xee>
 8008734:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008738:	f04f 38ff 	mov.w	r8, #4294967295
 800873c:	e7df      	b.n	80086fe <_strtod_l+0xee>
 800873e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008740:	1c5a      	adds	r2, r3, #1
 8008742:	9215      	str	r2, [sp, #84]	; 0x54
 8008744:	785b      	ldrb	r3, [r3, #1]
 8008746:	2b30      	cmp	r3, #48	; 0x30
 8008748:	d0f9      	beq.n	800873e <_strtod_l+0x12e>
 800874a:	2b00      	cmp	r3, #0
 800874c:	d09b      	beq.n	8008686 <_strtod_l+0x76>
 800874e:	2301      	movs	r3, #1
 8008750:	f04f 0a00 	mov.w	sl, #0
 8008754:	9304      	str	r3, [sp, #16]
 8008756:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008758:	930b      	str	r3, [sp, #44]	; 0x2c
 800875a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800875e:	46d3      	mov	fp, sl
 8008760:	220a      	movs	r2, #10
 8008762:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008764:	7806      	ldrb	r6, [r0, #0]
 8008766:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800876a:	b2d9      	uxtb	r1, r3
 800876c:	2909      	cmp	r1, #9
 800876e:	d926      	bls.n	80087be <_strtod_l+0x1ae>
 8008770:	494c      	ldr	r1, [pc, #304]	; (80088a4 <_strtod_l+0x294>)
 8008772:	2201      	movs	r2, #1
 8008774:	f001 fde3 	bl	800a33e <strncmp>
 8008778:	2800      	cmp	r0, #0
 800877a:	d030      	beq.n	80087de <_strtod_l+0x1ce>
 800877c:	2000      	movs	r0, #0
 800877e:	4632      	mov	r2, r6
 8008780:	9005      	str	r0, [sp, #20]
 8008782:	465e      	mov	r6, fp
 8008784:	4603      	mov	r3, r0
 8008786:	2a65      	cmp	r2, #101	; 0x65
 8008788:	d001      	beq.n	800878e <_strtod_l+0x17e>
 800878a:	2a45      	cmp	r2, #69	; 0x45
 800878c:	d113      	bne.n	80087b6 <_strtod_l+0x1a6>
 800878e:	b91e      	cbnz	r6, 8008798 <_strtod_l+0x188>
 8008790:	9a04      	ldr	r2, [sp, #16]
 8008792:	4302      	orrs	r2, r0
 8008794:	d094      	beq.n	80086c0 <_strtod_l+0xb0>
 8008796:	2600      	movs	r6, #0
 8008798:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800879a:	1c6a      	adds	r2, r5, #1
 800879c:	9215      	str	r2, [sp, #84]	; 0x54
 800879e:	786a      	ldrb	r2, [r5, #1]
 80087a0:	2a2b      	cmp	r2, #43	; 0x2b
 80087a2:	d074      	beq.n	800888e <_strtod_l+0x27e>
 80087a4:	2a2d      	cmp	r2, #45	; 0x2d
 80087a6:	d078      	beq.n	800889a <_strtod_l+0x28a>
 80087a8:	f04f 0c00 	mov.w	ip, #0
 80087ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80087b0:	2909      	cmp	r1, #9
 80087b2:	d97f      	bls.n	80088b4 <_strtod_l+0x2a4>
 80087b4:	9515      	str	r5, [sp, #84]	; 0x54
 80087b6:	2700      	movs	r7, #0
 80087b8:	e09e      	b.n	80088f8 <_strtod_l+0x2e8>
 80087ba:	2300      	movs	r3, #0
 80087bc:	e7c8      	b.n	8008750 <_strtod_l+0x140>
 80087be:	f1bb 0f08 	cmp.w	fp, #8
 80087c2:	bfd8      	it	le
 80087c4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80087c6:	f100 0001 	add.w	r0, r0, #1
 80087ca:	bfda      	itte	le
 80087cc:	fb02 3301 	mlale	r3, r2, r1, r3
 80087d0:	9309      	strle	r3, [sp, #36]	; 0x24
 80087d2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80087d6:	f10b 0b01 	add.w	fp, fp, #1
 80087da:	9015      	str	r0, [sp, #84]	; 0x54
 80087dc:	e7c1      	b.n	8008762 <_strtod_l+0x152>
 80087de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087e0:	1c5a      	adds	r2, r3, #1
 80087e2:	9215      	str	r2, [sp, #84]	; 0x54
 80087e4:	785a      	ldrb	r2, [r3, #1]
 80087e6:	f1bb 0f00 	cmp.w	fp, #0
 80087ea:	d037      	beq.n	800885c <_strtod_l+0x24c>
 80087ec:	9005      	str	r0, [sp, #20]
 80087ee:	465e      	mov	r6, fp
 80087f0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80087f4:	2b09      	cmp	r3, #9
 80087f6:	d912      	bls.n	800881e <_strtod_l+0x20e>
 80087f8:	2301      	movs	r3, #1
 80087fa:	e7c4      	b.n	8008786 <_strtod_l+0x176>
 80087fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087fe:	1c5a      	adds	r2, r3, #1
 8008800:	9215      	str	r2, [sp, #84]	; 0x54
 8008802:	785a      	ldrb	r2, [r3, #1]
 8008804:	3001      	adds	r0, #1
 8008806:	2a30      	cmp	r2, #48	; 0x30
 8008808:	d0f8      	beq.n	80087fc <_strtod_l+0x1ec>
 800880a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800880e:	2b08      	cmp	r3, #8
 8008810:	f200 84c1 	bhi.w	8009196 <_strtod_l+0xb86>
 8008814:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008816:	9005      	str	r0, [sp, #20]
 8008818:	2000      	movs	r0, #0
 800881a:	930b      	str	r3, [sp, #44]	; 0x2c
 800881c:	4606      	mov	r6, r0
 800881e:	3a30      	subs	r2, #48	; 0x30
 8008820:	f100 0301 	add.w	r3, r0, #1
 8008824:	d014      	beq.n	8008850 <_strtod_l+0x240>
 8008826:	9905      	ldr	r1, [sp, #20]
 8008828:	4419      	add	r1, r3
 800882a:	9105      	str	r1, [sp, #20]
 800882c:	4633      	mov	r3, r6
 800882e:	eb00 0c06 	add.w	ip, r0, r6
 8008832:	210a      	movs	r1, #10
 8008834:	4563      	cmp	r3, ip
 8008836:	d113      	bne.n	8008860 <_strtod_l+0x250>
 8008838:	1833      	adds	r3, r6, r0
 800883a:	2b08      	cmp	r3, #8
 800883c:	f106 0601 	add.w	r6, r6, #1
 8008840:	4406      	add	r6, r0
 8008842:	dc1a      	bgt.n	800887a <_strtod_l+0x26a>
 8008844:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008846:	230a      	movs	r3, #10
 8008848:	fb03 2301 	mla	r3, r3, r1, r2
 800884c:	9309      	str	r3, [sp, #36]	; 0x24
 800884e:	2300      	movs	r3, #0
 8008850:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008852:	1c51      	adds	r1, r2, #1
 8008854:	9115      	str	r1, [sp, #84]	; 0x54
 8008856:	7852      	ldrb	r2, [r2, #1]
 8008858:	4618      	mov	r0, r3
 800885a:	e7c9      	b.n	80087f0 <_strtod_l+0x1e0>
 800885c:	4658      	mov	r0, fp
 800885e:	e7d2      	b.n	8008806 <_strtod_l+0x1f6>
 8008860:	2b08      	cmp	r3, #8
 8008862:	f103 0301 	add.w	r3, r3, #1
 8008866:	dc03      	bgt.n	8008870 <_strtod_l+0x260>
 8008868:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800886a:	434f      	muls	r7, r1
 800886c:	9709      	str	r7, [sp, #36]	; 0x24
 800886e:	e7e1      	b.n	8008834 <_strtod_l+0x224>
 8008870:	2b10      	cmp	r3, #16
 8008872:	bfd8      	it	le
 8008874:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008878:	e7dc      	b.n	8008834 <_strtod_l+0x224>
 800887a:	2e10      	cmp	r6, #16
 800887c:	bfdc      	itt	le
 800887e:	230a      	movle	r3, #10
 8008880:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008884:	e7e3      	b.n	800884e <_strtod_l+0x23e>
 8008886:	2300      	movs	r3, #0
 8008888:	9305      	str	r3, [sp, #20]
 800888a:	2301      	movs	r3, #1
 800888c:	e780      	b.n	8008790 <_strtod_l+0x180>
 800888e:	f04f 0c00 	mov.w	ip, #0
 8008892:	1caa      	adds	r2, r5, #2
 8008894:	9215      	str	r2, [sp, #84]	; 0x54
 8008896:	78aa      	ldrb	r2, [r5, #2]
 8008898:	e788      	b.n	80087ac <_strtod_l+0x19c>
 800889a:	f04f 0c01 	mov.w	ip, #1
 800889e:	e7f8      	b.n	8008892 <_strtod_l+0x282>
 80088a0:	0800d518 	.word	0x0800d518
 80088a4:	0800d514 	.word	0x0800d514
 80088a8:	7ff00000 	.word	0x7ff00000
 80088ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80088ae:	1c51      	adds	r1, r2, #1
 80088b0:	9115      	str	r1, [sp, #84]	; 0x54
 80088b2:	7852      	ldrb	r2, [r2, #1]
 80088b4:	2a30      	cmp	r2, #48	; 0x30
 80088b6:	d0f9      	beq.n	80088ac <_strtod_l+0x29c>
 80088b8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80088bc:	2908      	cmp	r1, #8
 80088be:	f63f af7a 	bhi.w	80087b6 <_strtod_l+0x1a6>
 80088c2:	3a30      	subs	r2, #48	; 0x30
 80088c4:	9208      	str	r2, [sp, #32]
 80088c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80088c8:	920c      	str	r2, [sp, #48]	; 0x30
 80088ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80088cc:	1c57      	adds	r7, r2, #1
 80088ce:	9715      	str	r7, [sp, #84]	; 0x54
 80088d0:	7852      	ldrb	r2, [r2, #1]
 80088d2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80088d6:	f1be 0f09 	cmp.w	lr, #9
 80088da:	d938      	bls.n	800894e <_strtod_l+0x33e>
 80088dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80088de:	1a7f      	subs	r7, r7, r1
 80088e0:	2f08      	cmp	r7, #8
 80088e2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80088e6:	dc03      	bgt.n	80088f0 <_strtod_l+0x2e0>
 80088e8:	9908      	ldr	r1, [sp, #32]
 80088ea:	428f      	cmp	r7, r1
 80088ec:	bfa8      	it	ge
 80088ee:	460f      	movge	r7, r1
 80088f0:	f1bc 0f00 	cmp.w	ip, #0
 80088f4:	d000      	beq.n	80088f8 <_strtod_l+0x2e8>
 80088f6:	427f      	negs	r7, r7
 80088f8:	2e00      	cmp	r6, #0
 80088fa:	d14f      	bne.n	800899c <_strtod_l+0x38c>
 80088fc:	9904      	ldr	r1, [sp, #16]
 80088fe:	4301      	orrs	r1, r0
 8008900:	f47f aec1 	bne.w	8008686 <_strtod_l+0x76>
 8008904:	2b00      	cmp	r3, #0
 8008906:	f47f aedb 	bne.w	80086c0 <_strtod_l+0xb0>
 800890a:	2a69      	cmp	r2, #105	; 0x69
 800890c:	d029      	beq.n	8008962 <_strtod_l+0x352>
 800890e:	dc26      	bgt.n	800895e <_strtod_l+0x34e>
 8008910:	2a49      	cmp	r2, #73	; 0x49
 8008912:	d026      	beq.n	8008962 <_strtod_l+0x352>
 8008914:	2a4e      	cmp	r2, #78	; 0x4e
 8008916:	f47f aed3 	bne.w	80086c0 <_strtod_l+0xb0>
 800891a:	499b      	ldr	r1, [pc, #620]	; (8008b88 <_strtod_l+0x578>)
 800891c:	a815      	add	r0, sp, #84	; 0x54
 800891e:	f002 ff39 	bl	800b794 <__match>
 8008922:	2800      	cmp	r0, #0
 8008924:	f43f aecc 	beq.w	80086c0 <_strtod_l+0xb0>
 8008928:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	2b28      	cmp	r3, #40	; 0x28
 800892e:	d12f      	bne.n	8008990 <_strtod_l+0x380>
 8008930:	4996      	ldr	r1, [pc, #600]	; (8008b8c <_strtod_l+0x57c>)
 8008932:	aa18      	add	r2, sp, #96	; 0x60
 8008934:	a815      	add	r0, sp, #84	; 0x54
 8008936:	f002 ff41 	bl	800b7bc <__hexnan>
 800893a:	2805      	cmp	r0, #5
 800893c:	d128      	bne.n	8008990 <_strtod_l+0x380>
 800893e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008940:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008944:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008948:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800894c:	e69b      	b.n	8008686 <_strtod_l+0x76>
 800894e:	9f08      	ldr	r7, [sp, #32]
 8008950:	210a      	movs	r1, #10
 8008952:	fb01 2107 	mla	r1, r1, r7, r2
 8008956:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800895a:	9208      	str	r2, [sp, #32]
 800895c:	e7b5      	b.n	80088ca <_strtod_l+0x2ba>
 800895e:	2a6e      	cmp	r2, #110	; 0x6e
 8008960:	e7d9      	b.n	8008916 <_strtod_l+0x306>
 8008962:	498b      	ldr	r1, [pc, #556]	; (8008b90 <_strtod_l+0x580>)
 8008964:	a815      	add	r0, sp, #84	; 0x54
 8008966:	f002 ff15 	bl	800b794 <__match>
 800896a:	2800      	cmp	r0, #0
 800896c:	f43f aea8 	beq.w	80086c0 <_strtod_l+0xb0>
 8008970:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008972:	4988      	ldr	r1, [pc, #544]	; (8008b94 <_strtod_l+0x584>)
 8008974:	3b01      	subs	r3, #1
 8008976:	a815      	add	r0, sp, #84	; 0x54
 8008978:	9315      	str	r3, [sp, #84]	; 0x54
 800897a:	f002 ff0b 	bl	800b794 <__match>
 800897e:	b910      	cbnz	r0, 8008986 <_strtod_l+0x376>
 8008980:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008982:	3301      	adds	r3, #1
 8008984:	9315      	str	r3, [sp, #84]	; 0x54
 8008986:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8008ba4 <_strtod_l+0x594>
 800898a:	f04f 0800 	mov.w	r8, #0
 800898e:	e67a      	b.n	8008686 <_strtod_l+0x76>
 8008990:	4881      	ldr	r0, [pc, #516]	; (8008b98 <_strtod_l+0x588>)
 8008992:	f001 fd81 	bl	800a498 <nan>
 8008996:	ec59 8b10 	vmov	r8, r9, d0
 800899a:	e674      	b.n	8008686 <_strtod_l+0x76>
 800899c:	9b05      	ldr	r3, [sp, #20]
 800899e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089a0:	1afb      	subs	r3, r7, r3
 80089a2:	f1bb 0f00 	cmp.w	fp, #0
 80089a6:	bf08      	it	eq
 80089a8:	46b3      	moveq	fp, r6
 80089aa:	2e10      	cmp	r6, #16
 80089ac:	9308      	str	r3, [sp, #32]
 80089ae:	4635      	mov	r5, r6
 80089b0:	bfa8      	it	ge
 80089b2:	2510      	movge	r5, #16
 80089b4:	f7f7 fdae 	bl	8000514 <__aeabi_ui2d>
 80089b8:	2e09      	cmp	r6, #9
 80089ba:	4680      	mov	r8, r0
 80089bc:	4689      	mov	r9, r1
 80089be:	dd13      	ble.n	80089e8 <_strtod_l+0x3d8>
 80089c0:	4b76      	ldr	r3, [pc, #472]	; (8008b9c <_strtod_l+0x58c>)
 80089c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80089c6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80089ca:	f7f7 fe1d 	bl	8000608 <__aeabi_dmul>
 80089ce:	4680      	mov	r8, r0
 80089d0:	4650      	mov	r0, sl
 80089d2:	4689      	mov	r9, r1
 80089d4:	f7f7 fd9e 	bl	8000514 <__aeabi_ui2d>
 80089d8:	4602      	mov	r2, r0
 80089da:	460b      	mov	r3, r1
 80089dc:	4640      	mov	r0, r8
 80089de:	4649      	mov	r1, r9
 80089e0:	f7f7 fc5c 	bl	800029c <__adddf3>
 80089e4:	4680      	mov	r8, r0
 80089e6:	4689      	mov	r9, r1
 80089e8:	2e0f      	cmp	r6, #15
 80089ea:	dc38      	bgt.n	8008a5e <_strtod_l+0x44e>
 80089ec:	9b08      	ldr	r3, [sp, #32]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f43f ae49 	beq.w	8008686 <_strtod_l+0x76>
 80089f4:	dd24      	ble.n	8008a40 <_strtod_l+0x430>
 80089f6:	2b16      	cmp	r3, #22
 80089f8:	dc0b      	bgt.n	8008a12 <_strtod_l+0x402>
 80089fa:	4968      	ldr	r1, [pc, #416]	; (8008b9c <_strtod_l+0x58c>)
 80089fc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008a00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a04:	4642      	mov	r2, r8
 8008a06:	464b      	mov	r3, r9
 8008a08:	f7f7 fdfe 	bl	8000608 <__aeabi_dmul>
 8008a0c:	4680      	mov	r8, r0
 8008a0e:	4689      	mov	r9, r1
 8008a10:	e639      	b.n	8008686 <_strtod_l+0x76>
 8008a12:	9a08      	ldr	r2, [sp, #32]
 8008a14:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	db20      	blt.n	8008a5e <_strtod_l+0x44e>
 8008a1c:	4c5f      	ldr	r4, [pc, #380]	; (8008b9c <_strtod_l+0x58c>)
 8008a1e:	f1c6 060f 	rsb	r6, r6, #15
 8008a22:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008a26:	4642      	mov	r2, r8
 8008a28:	464b      	mov	r3, r9
 8008a2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a2e:	f7f7 fdeb 	bl	8000608 <__aeabi_dmul>
 8008a32:	9b08      	ldr	r3, [sp, #32]
 8008a34:	1b9e      	subs	r6, r3, r6
 8008a36:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008a3a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008a3e:	e7e3      	b.n	8008a08 <_strtod_l+0x3f8>
 8008a40:	9b08      	ldr	r3, [sp, #32]
 8008a42:	3316      	adds	r3, #22
 8008a44:	db0b      	blt.n	8008a5e <_strtod_l+0x44e>
 8008a46:	9b05      	ldr	r3, [sp, #20]
 8008a48:	1bdf      	subs	r7, r3, r7
 8008a4a:	4b54      	ldr	r3, [pc, #336]	; (8008b9c <_strtod_l+0x58c>)
 8008a4c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a54:	4640      	mov	r0, r8
 8008a56:	4649      	mov	r1, r9
 8008a58:	f7f7 ff00 	bl	800085c <__aeabi_ddiv>
 8008a5c:	e7d6      	b.n	8008a0c <_strtod_l+0x3fc>
 8008a5e:	9b08      	ldr	r3, [sp, #32]
 8008a60:	1b75      	subs	r5, r6, r5
 8008a62:	441d      	add	r5, r3
 8008a64:	2d00      	cmp	r5, #0
 8008a66:	dd70      	ble.n	8008b4a <_strtod_l+0x53a>
 8008a68:	f015 030f 	ands.w	r3, r5, #15
 8008a6c:	d00a      	beq.n	8008a84 <_strtod_l+0x474>
 8008a6e:	494b      	ldr	r1, [pc, #300]	; (8008b9c <_strtod_l+0x58c>)
 8008a70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008a74:	4642      	mov	r2, r8
 8008a76:	464b      	mov	r3, r9
 8008a78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a7c:	f7f7 fdc4 	bl	8000608 <__aeabi_dmul>
 8008a80:	4680      	mov	r8, r0
 8008a82:	4689      	mov	r9, r1
 8008a84:	f035 050f 	bics.w	r5, r5, #15
 8008a88:	d04d      	beq.n	8008b26 <_strtod_l+0x516>
 8008a8a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008a8e:	dd22      	ble.n	8008ad6 <_strtod_l+0x4c6>
 8008a90:	2500      	movs	r5, #0
 8008a92:	46ab      	mov	fp, r5
 8008a94:	9509      	str	r5, [sp, #36]	; 0x24
 8008a96:	9505      	str	r5, [sp, #20]
 8008a98:	2322      	movs	r3, #34	; 0x22
 8008a9a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008ba4 <_strtod_l+0x594>
 8008a9e:	6023      	str	r3, [r4, #0]
 8008aa0:	f04f 0800 	mov.w	r8, #0
 8008aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	f43f aded 	beq.w	8008686 <_strtod_l+0x76>
 8008aac:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008aae:	4620      	mov	r0, r4
 8008ab0:	f003 f826 	bl	800bb00 <_Bfree>
 8008ab4:	9905      	ldr	r1, [sp, #20]
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f003 f822 	bl	800bb00 <_Bfree>
 8008abc:	4659      	mov	r1, fp
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f003 f81e 	bl	800bb00 <_Bfree>
 8008ac4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f003 f81a 	bl	800bb00 <_Bfree>
 8008acc:	4629      	mov	r1, r5
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f003 f816 	bl	800bb00 <_Bfree>
 8008ad4:	e5d7      	b.n	8008686 <_strtod_l+0x76>
 8008ad6:	4b32      	ldr	r3, [pc, #200]	; (8008ba0 <_strtod_l+0x590>)
 8008ad8:	9304      	str	r3, [sp, #16]
 8008ada:	2300      	movs	r3, #0
 8008adc:	112d      	asrs	r5, r5, #4
 8008ade:	4640      	mov	r0, r8
 8008ae0:	4649      	mov	r1, r9
 8008ae2:	469a      	mov	sl, r3
 8008ae4:	2d01      	cmp	r5, #1
 8008ae6:	dc21      	bgt.n	8008b2c <_strtod_l+0x51c>
 8008ae8:	b10b      	cbz	r3, 8008aee <_strtod_l+0x4de>
 8008aea:	4680      	mov	r8, r0
 8008aec:	4689      	mov	r9, r1
 8008aee:	492c      	ldr	r1, [pc, #176]	; (8008ba0 <_strtod_l+0x590>)
 8008af0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008af4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008af8:	4642      	mov	r2, r8
 8008afa:	464b      	mov	r3, r9
 8008afc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b00:	f7f7 fd82 	bl	8000608 <__aeabi_dmul>
 8008b04:	4b27      	ldr	r3, [pc, #156]	; (8008ba4 <_strtod_l+0x594>)
 8008b06:	460a      	mov	r2, r1
 8008b08:	400b      	ands	r3, r1
 8008b0a:	4927      	ldr	r1, [pc, #156]	; (8008ba8 <_strtod_l+0x598>)
 8008b0c:	428b      	cmp	r3, r1
 8008b0e:	4680      	mov	r8, r0
 8008b10:	d8be      	bhi.n	8008a90 <_strtod_l+0x480>
 8008b12:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008b16:	428b      	cmp	r3, r1
 8008b18:	bf86      	itte	hi
 8008b1a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008bac <_strtod_l+0x59c>
 8008b1e:	f04f 38ff 	movhi.w	r8, #4294967295
 8008b22:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008b26:	2300      	movs	r3, #0
 8008b28:	9304      	str	r3, [sp, #16]
 8008b2a:	e07b      	b.n	8008c24 <_strtod_l+0x614>
 8008b2c:	07ea      	lsls	r2, r5, #31
 8008b2e:	d505      	bpl.n	8008b3c <_strtod_l+0x52c>
 8008b30:	9b04      	ldr	r3, [sp, #16]
 8008b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b36:	f7f7 fd67 	bl	8000608 <__aeabi_dmul>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	9a04      	ldr	r2, [sp, #16]
 8008b3e:	3208      	adds	r2, #8
 8008b40:	f10a 0a01 	add.w	sl, sl, #1
 8008b44:	106d      	asrs	r5, r5, #1
 8008b46:	9204      	str	r2, [sp, #16]
 8008b48:	e7cc      	b.n	8008ae4 <_strtod_l+0x4d4>
 8008b4a:	d0ec      	beq.n	8008b26 <_strtod_l+0x516>
 8008b4c:	426d      	negs	r5, r5
 8008b4e:	f015 020f 	ands.w	r2, r5, #15
 8008b52:	d00a      	beq.n	8008b6a <_strtod_l+0x55a>
 8008b54:	4b11      	ldr	r3, [pc, #68]	; (8008b9c <_strtod_l+0x58c>)
 8008b56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b5a:	4640      	mov	r0, r8
 8008b5c:	4649      	mov	r1, r9
 8008b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b62:	f7f7 fe7b 	bl	800085c <__aeabi_ddiv>
 8008b66:	4680      	mov	r8, r0
 8008b68:	4689      	mov	r9, r1
 8008b6a:	112d      	asrs	r5, r5, #4
 8008b6c:	d0db      	beq.n	8008b26 <_strtod_l+0x516>
 8008b6e:	2d1f      	cmp	r5, #31
 8008b70:	dd1e      	ble.n	8008bb0 <_strtod_l+0x5a0>
 8008b72:	2500      	movs	r5, #0
 8008b74:	46ab      	mov	fp, r5
 8008b76:	9509      	str	r5, [sp, #36]	; 0x24
 8008b78:	9505      	str	r5, [sp, #20]
 8008b7a:	2322      	movs	r3, #34	; 0x22
 8008b7c:	f04f 0800 	mov.w	r8, #0
 8008b80:	f04f 0900 	mov.w	r9, #0
 8008b84:	6023      	str	r3, [r4, #0]
 8008b86:	e78d      	b.n	8008aa4 <_strtod_l+0x494>
 8008b88:	0800d676 	.word	0x0800d676
 8008b8c:	0800d52c 	.word	0x0800d52c
 8008b90:	0800d66e 	.word	0x0800d66e
 8008b94:	0800d6ad 	.word	0x0800d6ad
 8008b98:	0800d938 	.word	0x0800d938
 8008b9c:	0800d818 	.word	0x0800d818
 8008ba0:	0800d7f0 	.word	0x0800d7f0
 8008ba4:	7ff00000 	.word	0x7ff00000
 8008ba8:	7ca00000 	.word	0x7ca00000
 8008bac:	7fefffff 	.word	0x7fefffff
 8008bb0:	f015 0310 	ands.w	r3, r5, #16
 8008bb4:	bf18      	it	ne
 8008bb6:	236a      	movne	r3, #106	; 0x6a
 8008bb8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008f5c <_strtod_l+0x94c>
 8008bbc:	9304      	str	r3, [sp, #16]
 8008bbe:	4640      	mov	r0, r8
 8008bc0:	4649      	mov	r1, r9
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	07ea      	lsls	r2, r5, #31
 8008bc6:	d504      	bpl.n	8008bd2 <_strtod_l+0x5c2>
 8008bc8:	e9da 2300 	ldrd	r2, r3, [sl]
 8008bcc:	f7f7 fd1c 	bl	8000608 <__aeabi_dmul>
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	106d      	asrs	r5, r5, #1
 8008bd4:	f10a 0a08 	add.w	sl, sl, #8
 8008bd8:	d1f4      	bne.n	8008bc4 <_strtod_l+0x5b4>
 8008bda:	b10b      	cbz	r3, 8008be0 <_strtod_l+0x5d0>
 8008bdc:	4680      	mov	r8, r0
 8008bde:	4689      	mov	r9, r1
 8008be0:	9b04      	ldr	r3, [sp, #16]
 8008be2:	b1bb      	cbz	r3, 8008c14 <_strtod_l+0x604>
 8008be4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008be8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	4649      	mov	r1, r9
 8008bf0:	dd10      	ble.n	8008c14 <_strtod_l+0x604>
 8008bf2:	2b1f      	cmp	r3, #31
 8008bf4:	f340 811e 	ble.w	8008e34 <_strtod_l+0x824>
 8008bf8:	2b34      	cmp	r3, #52	; 0x34
 8008bfa:	bfde      	ittt	le
 8008bfc:	f04f 33ff 	movle.w	r3, #4294967295
 8008c00:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008c04:	4093      	lslle	r3, r2
 8008c06:	f04f 0800 	mov.w	r8, #0
 8008c0a:	bfcc      	ite	gt
 8008c0c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008c10:	ea03 0901 	andle.w	r9, r3, r1
 8008c14:	2200      	movs	r2, #0
 8008c16:	2300      	movs	r3, #0
 8008c18:	4640      	mov	r0, r8
 8008c1a:	4649      	mov	r1, r9
 8008c1c:	f7f7 ff5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c20:	2800      	cmp	r0, #0
 8008c22:	d1a6      	bne.n	8008b72 <_strtod_l+0x562>
 8008c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c26:	9300      	str	r3, [sp, #0]
 8008c28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c2a:	4633      	mov	r3, r6
 8008c2c:	465a      	mov	r2, fp
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f002 ffce 	bl	800bbd0 <__s2b>
 8008c34:	9009      	str	r0, [sp, #36]	; 0x24
 8008c36:	2800      	cmp	r0, #0
 8008c38:	f43f af2a 	beq.w	8008a90 <_strtod_l+0x480>
 8008c3c:	9a08      	ldr	r2, [sp, #32]
 8008c3e:	9b05      	ldr	r3, [sp, #20]
 8008c40:	2a00      	cmp	r2, #0
 8008c42:	eba3 0307 	sub.w	r3, r3, r7
 8008c46:	bfa8      	it	ge
 8008c48:	2300      	movge	r3, #0
 8008c4a:	930c      	str	r3, [sp, #48]	; 0x30
 8008c4c:	2500      	movs	r5, #0
 8008c4e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008c52:	9312      	str	r3, [sp, #72]	; 0x48
 8008c54:	46ab      	mov	fp, r5
 8008c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c58:	4620      	mov	r0, r4
 8008c5a:	6859      	ldr	r1, [r3, #4]
 8008c5c:	f002 ff10 	bl	800ba80 <_Balloc>
 8008c60:	9005      	str	r0, [sp, #20]
 8008c62:	2800      	cmp	r0, #0
 8008c64:	f43f af18 	beq.w	8008a98 <_strtod_l+0x488>
 8008c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c6a:	691a      	ldr	r2, [r3, #16]
 8008c6c:	3202      	adds	r2, #2
 8008c6e:	f103 010c 	add.w	r1, r3, #12
 8008c72:	0092      	lsls	r2, r2, #2
 8008c74:	300c      	adds	r0, #12
 8008c76:	f001 fbfe 	bl	800a476 <memcpy>
 8008c7a:	ec49 8b10 	vmov	d0, r8, r9
 8008c7e:	aa18      	add	r2, sp, #96	; 0x60
 8008c80:	a917      	add	r1, sp, #92	; 0x5c
 8008c82:	4620      	mov	r0, r4
 8008c84:	f003 fad8 	bl	800c238 <__d2b>
 8008c88:	ec49 8b18 	vmov	d8, r8, r9
 8008c8c:	9016      	str	r0, [sp, #88]	; 0x58
 8008c8e:	2800      	cmp	r0, #0
 8008c90:	f43f af02 	beq.w	8008a98 <_strtod_l+0x488>
 8008c94:	2101      	movs	r1, #1
 8008c96:	4620      	mov	r0, r4
 8008c98:	f003 f832 	bl	800bd00 <__i2b>
 8008c9c:	4683      	mov	fp, r0
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	f43f aefa 	beq.w	8008a98 <_strtod_l+0x488>
 8008ca4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008ca6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008ca8:	2e00      	cmp	r6, #0
 8008caa:	bfab      	itete	ge
 8008cac:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008cae:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008cb0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008cb2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8008cb6:	bfac      	ite	ge
 8008cb8:	eb06 0a03 	addge.w	sl, r6, r3
 8008cbc:	1b9f      	sublt	r7, r3, r6
 8008cbe:	9b04      	ldr	r3, [sp, #16]
 8008cc0:	1af6      	subs	r6, r6, r3
 8008cc2:	4416      	add	r6, r2
 8008cc4:	4ba0      	ldr	r3, [pc, #640]	; (8008f48 <_strtod_l+0x938>)
 8008cc6:	3e01      	subs	r6, #1
 8008cc8:	429e      	cmp	r6, r3
 8008cca:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008cce:	f280 80c4 	bge.w	8008e5a <_strtod_l+0x84a>
 8008cd2:	1b9b      	subs	r3, r3, r6
 8008cd4:	2b1f      	cmp	r3, #31
 8008cd6:	eba2 0203 	sub.w	r2, r2, r3
 8008cda:	f04f 0101 	mov.w	r1, #1
 8008cde:	f300 80b0 	bgt.w	8008e42 <_strtod_l+0x832>
 8008ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ce6:	930e      	str	r3, [sp, #56]	; 0x38
 8008ce8:	2300      	movs	r3, #0
 8008cea:	930d      	str	r3, [sp, #52]	; 0x34
 8008cec:	eb0a 0602 	add.w	r6, sl, r2
 8008cf0:	9b04      	ldr	r3, [sp, #16]
 8008cf2:	45b2      	cmp	sl, r6
 8008cf4:	4417      	add	r7, r2
 8008cf6:	441f      	add	r7, r3
 8008cf8:	4653      	mov	r3, sl
 8008cfa:	bfa8      	it	ge
 8008cfc:	4633      	movge	r3, r6
 8008cfe:	42bb      	cmp	r3, r7
 8008d00:	bfa8      	it	ge
 8008d02:	463b      	movge	r3, r7
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	bfc2      	ittt	gt
 8008d08:	1af6      	subgt	r6, r6, r3
 8008d0a:	1aff      	subgt	r7, r7, r3
 8008d0c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008d10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	dd17      	ble.n	8008d46 <_strtod_l+0x736>
 8008d16:	4659      	mov	r1, fp
 8008d18:	461a      	mov	r2, r3
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f003 f8b0 	bl	800be80 <__pow5mult>
 8008d20:	4683      	mov	fp, r0
 8008d22:	2800      	cmp	r0, #0
 8008d24:	f43f aeb8 	beq.w	8008a98 <_strtod_l+0x488>
 8008d28:	4601      	mov	r1, r0
 8008d2a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	f002 fffd 	bl	800bd2c <__multiply>
 8008d32:	900b      	str	r0, [sp, #44]	; 0x2c
 8008d34:	2800      	cmp	r0, #0
 8008d36:	f43f aeaf 	beq.w	8008a98 <_strtod_l+0x488>
 8008d3a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	f002 fedf 	bl	800bb00 <_Bfree>
 8008d42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d44:	9316      	str	r3, [sp, #88]	; 0x58
 8008d46:	2e00      	cmp	r6, #0
 8008d48:	f300 808c 	bgt.w	8008e64 <_strtod_l+0x854>
 8008d4c:	9b08      	ldr	r3, [sp, #32]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	dd08      	ble.n	8008d64 <_strtod_l+0x754>
 8008d52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d54:	9905      	ldr	r1, [sp, #20]
 8008d56:	4620      	mov	r0, r4
 8008d58:	f003 f892 	bl	800be80 <__pow5mult>
 8008d5c:	9005      	str	r0, [sp, #20]
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	f43f ae9a 	beq.w	8008a98 <_strtod_l+0x488>
 8008d64:	2f00      	cmp	r7, #0
 8008d66:	dd08      	ble.n	8008d7a <_strtod_l+0x76a>
 8008d68:	9905      	ldr	r1, [sp, #20]
 8008d6a:	463a      	mov	r2, r7
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	f003 f8e1 	bl	800bf34 <__lshift>
 8008d72:	9005      	str	r0, [sp, #20]
 8008d74:	2800      	cmp	r0, #0
 8008d76:	f43f ae8f 	beq.w	8008a98 <_strtod_l+0x488>
 8008d7a:	f1ba 0f00 	cmp.w	sl, #0
 8008d7e:	dd08      	ble.n	8008d92 <_strtod_l+0x782>
 8008d80:	4659      	mov	r1, fp
 8008d82:	4652      	mov	r2, sl
 8008d84:	4620      	mov	r0, r4
 8008d86:	f003 f8d5 	bl	800bf34 <__lshift>
 8008d8a:	4683      	mov	fp, r0
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	f43f ae83 	beq.w	8008a98 <_strtod_l+0x488>
 8008d92:	9a05      	ldr	r2, [sp, #20]
 8008d94:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008d96:	4620      	mov	r0, r4
 8008d98:	f003 f954 	bl	800c044 <__mdiff>
 8008d9c:	4605      	mov	r5, r0
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	f43f ae7a 	beq.w	8008a98 <_strtod_l+0x488>
 8008da4:	68c3      	ldr	r3, [r0, #12]
 8008da6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008da8:	2300      	movs	r3, #0
 8008daa:	60c3      	str	r3, [r0, #12]
 8008dac:	4659      	mov	r1, fp
 8008dae:	f003 f92d 	bl	800c00c <__mcmp>
 8008db2:	2800      	cmp	r0, #0
 8008db4:	da60      	bge.n	8008e78 <_strtod_l+0x868>
 8008db6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008db8:	ea53 0308 	orrs.w	r3, r3, r8
 8008dbc:	f040 8084 	bne.w	8008ec8 <_strtod_l+0x8b8>
 8008dc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d17f      	bne.n	8008ec8 <_strtod_l+0x8b8>
 8008dc8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008dcc:	0d1b      	lsrs	r3, r3, #20
 8008dce:	051b      	lsls	r3, r3, #20
 8008dd0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008dd4:	d978      	bls.n	8008ec8 <_strtod_l+0x8b8>
 8008dd6:	696b      	ldr	r3, [r5, #20]
 8008dd8:	b913      	cbnz	r3, 8008de0 <_strtod_l+0x7d0>
 8008dda:	692b      	ldr	r3, [r5, #16]
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	dd73      	ble.n	8008ec8 <_strtod_l+0x8b8>
 8008de0:	4629      	mov	r1, r5
 8008de2:	2201      	movs	r2, #1
 8008de4:	4620      	mov	r0, r4
 8008de6:	f003 f8a5 	bl	800bf34 <__lshift>
 8008dea:	4659      	mov	r1, fp
 8008dec:	4605      	mov	r5, r0
 8008dee:	f003 f90d 	bl	800c00c <__mcmp>
 8008df2:	2800      	cmp	r0, #0
 8008df4:	dd68      	ble.n	8008ec8 <_strtod_l+0x8b8>
 8008df6:	9904      	ldr	r1, [sp, #16]
 8008df8:	4a54      	ldr	r2, [pc, #336]	; (8008f4c <_strtod_l+0x93c>)
 8008dfa:	464b      	mov	r3, r9
 8008dfc:	2900      	cmp	r1, #0
 8008dfe:	f000 8084 	beq.w	8008f0a <_strtod_l+0x8fa>
 8008e02:	ea02 0109 	and.w	r1, r2, r9
 8008e06:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008e0a:	dc7e      	bgt.n	8008f0a <_strtod_l+0x8fa>
 8008e0c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008e10:	f77f aeb3 	ble.w	8008b7a <_strtod_l+0x56a>
 8008e14:	4b4e      	ldr	r3, [pc, #312]	; (8008f50 <_strtod_l+0x940>)
 8008e16:	4640      	mov	r0, r8
 8008e18:	4649      	mov	r1, r9
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f7f7 fbf4 	bl	8000608 <__aeabi_dmul>
 8008e20:	4b4a      	ldr	r3, [pc, #296]	; (8008f4c <_strtod_l+0x93c>)
 8008e22:	400b      	ands	r3, r1
 8008e24:	4680      	mov	r8, r0
 8008e26:	4689      	mov	r9, r1
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f47f ae3f 	bne.w	8008aac <_strtod_l+0x49c>
 8008e2e:	2322      	movs	r3, #34	; 0x22
 8008e30:	6023      	str	r3, [r4, #0]
 8008e32:	e63b      	b.n	8008aac <_strtod_l+0x49c>
 8008e34:	f04f 32ff 	mov.w	r2, #4294967295
 8008e38:	fa02 f303 	lsl.w	r3, r2, r3
 8008e3c:	ea03 0808 	and.w	r8, r3, r8
 8008e40:	e6e8      	b.n	8008c14 <_strtod_l+0x604>
 8008e42:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008e46:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008e4a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008e4e:	36e2      	adds	r6, #226	; 0xe2
 8008e50:	fa01 f306 	lsl.w	r3, r1, r6
 8008e54:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008e58:	e748      	b.n	8008cec <_strtod_l+0x6dc>
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8008e62:	e743      	b.n	8008cec <_strtod_l+0x6dc>
 8008e64:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008e66:	4632      	mov	r2, r6
 8008e68:	4620      	mov	r0, r4
 8008e6a:	f003 f863 	bl	800bf34 <__lshift>
 8008e6e:	9016      	str	r0, [sp, #88]	; 0x58
 8008e70:	2800      	cmp	r0, #0
 8008e72:	f47f af6b 	bne.w	8008d4c <_strtod_l+0x73c>
 8008e76:	e60f      	b.n	8008a98 <_strtod_l+0x488>
 8008e78:	46ca      	mov	sl, r9
 8008e7a:	d171      	bne.n	8008f60 <_strtod_l+0x950>
 8008e7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e7e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e82:	b352      	cbz	r2, 8008eda <_strtod_l+0x8ca>
 8008e84:	4a33      	ldr	r2, [pc, #204]	; (8008f54 <_strtod_l+0x944>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d12a      	bne.n	8008ee0 <_strtod_l+0x8d0>
 8008e8a:	9b04      	ldr	r3, [sp, #16]
 8008e8c:	4641      	mov	r1, r8
 8008e8e:	b1fb      	cbz	r3, 8008ed0 <_strtod_l+0x8c0>
 8008e90:	4b2e      	ldr	r3, [pc, #184]	; (8008f4c <_strtod_l+0x93c>)
 8008e92:	ea09 0303 	and.w	r3, r9, r3
 8008e96:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e9e:	d81a      	bhi.n	8008ed6 <_strtod_l+0x8c6>
 8008ea0:	0d1b      	lsrs	r3, r3, #20
 8008ea2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eaa:	4299      	cmp	r1, r3
 8008eac:	d118      	bne.n	8008ee0 <_strtod_l+0x8d0>
 8008eae:	4b2a      	ldr	r3, [pc, #168]	; (8008f58 <_strtod_l+0x948>)
 8008eb0:	459a      	cmp	sl, r3
 8008eb2:	d102      	bne.n	8008eba <_strtod_l+0x8aa>
 8008eb4:	3101      	adds	r1, #1
 8008eb6:	f43f adef 	beq.w	8008a98 <_strtod_l+0x488>
 8008eba:	4b24      	ldr	r3, [pc, #144]	; (8008f4c <_strtod_l+0x93c>)
 8008ebc:	ea0a 0303 	and.w	r3, sl, r3
 8008ec0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008ec4:	f04f 0800 	mov.w	r8, #0
 8008ec8:	9b04      	ldr	r3, [sp, #16]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d1a2      	bne.n	8008e14 <_strtod_l+0x804>
 8008ece:	e5ed      	b.n	8008aac <_strtod_l+0x49c>
 8008ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ed4:	e7e9      	b.n	8008eaa <_strtod_l+0x89a>
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	e7e7      	b.n	8008eaa <_strtod_l+0x89a>
 8008eda:	ea53 0308 	orrs.w	r3, r3, r8
 8008ede:	d08a      	beq.n	8008df6 <_strtod_l+0x7e6>
 8008ee0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ee2:	b1e3      	cbz	r3, 8008f1e <_strtod_l+0x90e>
 8008ee4:	ea13 0f0a 	tst.w	r3, sl
 8008ee8:	d0ee      	beq.n	8008ec8 <_strtod_l+0x8b8>
 8008eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eec:	9a04      	ldr	r2, [sp, #16]
 8008eee:	4640      	mov	r0, r8
 8008ef0:	4649      	mov	r1, r9
 8008ef2:	b1c3      	cbz	r3, 8008f26 <_strtod_l+0x916>
 8008ef4:	f7ff fb70 	bl	80085d8 <sulp>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	460b      	mov	r3, r1
 8008efc:	ec51 0b18 	vmov	r0, r1, d8
 8008f00:	f7f7 f9cc 	bl	800029c <__adddf3>
 8008f04:	4680      	mov	r8, r0
 8008f06:	4689      	mov	r9, r1
 8008f08:	e7de      	b.n	8008ec8 <_strtod_l+0x8b8>
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008f10:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008f14:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008f18:	f04f 38ff 	mov.w	r8, #4294967295
 8008f1c:	e7d4      	b.n	8008ec8 <_strtod_l+0x8b8>
 8008f1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f20:	ea13 0f08 	tst.w	r3, r8
 8008f24:	e7e0      	b.n	8008ee8 <_strtod_l+0x8d8>
 8008f26:	f7ff fb57 	bl	80085d8 <sulp>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	ec51 0b18 	vmov	r0, r1, d8
 8008f32:	f7f7 f9b1 	bl	8000298 <__aeabi_dsub>
 8008f36:	2200      	movs	r2, #0
 8008f38:	2300      	movs	r3, #0
 8008f3a:	4680      	mov	r8, r0
 8008f3c:	4689      	mov	r9, r1
 8008f3e:	f7f7 fdcb 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f42:	2800      	cmp	r0, #0
 8008f44:	d0c0      	beq.n	8008ec8 <_strtod_l+0x8b8>
 8008f46:	e618      	b.n	8008b7a <_strtod_l+0x56a>
 8008f48:	fffffc02 	.word	0xfffffc02
 8008f4c:	7ff00000 	.word	0x7ff00000
 8008f50:	39500000 	.word	0x39500000
 8008f54:	000fffff 	.word	0x000fffff
 8008f58:	7fefffff 	.word	0x7fefffff
 8008f5c:	0800d540 	.word	0x0800d540
 8008f60:	4659      	mov	r1, fp
 8008f62:	4628      	mov	r0, r5
 8008f64:	f003 f9c2 	bl	800c2ec <__ratio>
 8008f68:	ec57 6b10 	vmov	r6, r7, d0
 8008f6c:	ee10 0a10 	vmov	r0, s0
 8008f70:	2200      	movs	r2, #0
 8008f72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008f76:	4639      	mov	r1, r7
 8008f78:	f7f7 fdc2 	bl	8000b00 <__aeabi_dcmple>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	d071      	beq.n	8009064 <_strtod_l+0xa54>
 8008f80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d17c      	bne.n	8009080 <_strtod_l+0xa70>
 8008f86:	f1b8 0f00 	cmp.w	r8, #0
 8008f8a:	d15a      	bne.n	8009042 <_strtod_l+0xa32>
 8008f8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d15d      	bne.n	8009050 <_strtod_l+0xa40>
 8008f94:	4b90      	ldr	r3, [pc, #576]	; (80091d8 <_strtod_l+0xbc8>)
 8008f96:	2200      	movs	r2, #0
 8008f98:	4630      	mov	r0, r6
 8008f9a:	4639      	mov	r1, r7
 8008f9c:	f7f7 fda6 	bl	8000aec <__aeabi_dcmplt>
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	d15c      	bne.n	800905e <_strtod_l+0xa4e>
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	4639      	mov	r1, r7
 8008fa8:	4b8c      	ldr	r3, [pc, #560]	; (80091dc <_strtod_l+0xbcc>)
 8008faa:	2200      	movs	r2, #0
 8008fac:	f7f7 fb2c 	bl	8000608 <__aeabi_dmul>
 8008fb0:	4606      	mov	r6, r0
 8008fb2:	460f      	mov	r7, r1
 8008fb4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008fb8:	9606      	str	r6, [sp, #24]
 8008fba:	9307      	str	r3, [sp, #28]
 8008fbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008fc0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008fc4:	4b86      	ldr	r3, [pc, #536]	; (80091e0 <_strtod_l+0xbd0>)
 8008fc6:	ea0a 0303 	and.w	r3, sl, r3
 8008fca:	930d      	str	r3, [sp, #52]	; 0x34
 8008fcc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fce:	4b85      	ldr	r3, [pc, #532]	; (80091e4 <_strtod_l+0xbd4>)
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	f040 8090 	bne.w	80090f6 <_strtod_l+0xae6>
 8008fd6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008fda:	ec49 8b10 	vmov	d0, r8, r9
 8008fde:	f003 f8bb 	bl	800c158 <__ulp>
 8008fe2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008fe6:	ec51 0b10 	vmov	r0, r1, d0
 8008fea:	f7f7 fb0d 	bl	8000608 <__aeabi_dmul>
 8008fee:	4642      	mov	r2, r8
 8008ff0:	464b      	mov	r3, r9
 8008ff2:	f7f7 f953 	bl	800029c <__adddf3>
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	4979      	ldr	r1, [pc, #484]	; (80091e0 <_strtod_l+0xbd0>)
 8008ffa:	4a7b      	ldr	r2, [pc, #492]	; (80091e8 <_strtod_l+0xbd8>)
 8008ffc:	4019      	ands	r1, r3
 8008ffe:	4291      	cmp	r1, r2
 8009000:	4680      	mov	r8, r0
 8009002:	d944      	bls.n	800908e <_strtod_l+0xa7e>
 8009004:	ee18 2a90 	vmov	r2, s17
 8009008:	4b78      	ldr	r3, [pc, #480]	; (80091ec <_strtod_l+0xbdc>)
 800900a:	429a      	cmp	r2, r3
 800900c:	d104      	bne.n	8009018 <_strtod_l+0xa08>
 800900e:	ee18 3a10 	vmov	r3, s16
 8009012:	3301      	adds	r3, #1
 8009014:	f43f ad40 	beq.w	8008a98 <_strtod_l+0x488>
 8009018:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80091ec <_strtod_l+0xbdc>
 800901c:	f04f 38ff 	mov.w	r8, #4294967295
 8009020:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009022:	4620      	mov	r0, r4
 8009024:	f002 fd6c 	bl	800bb00 <_Bfree>
 8009028:	9905      	ldr	r1, [sp, #20]
 800902a:	4620      	mov	r0, r4
 800902c:	f002 fd68 	bl	800bb00 <_Bfree>
 8009030:	4659      	mov	r1, fp
 8009032:	4620      	mov	r0, r4
 8009034:	f002 fd64 	bl	800bb00 <_Bfree>
 8009038:	4629      	mov	r1, r5
 800903a:	4620      	mov	r0, r4
 800903c:	f002 fd60 	bl	800bb00 <_Bfree>
 8009040:	e609      	b.n	8008c56 <_strtod_l+0x646>
 8009042:	f1b8 0f01 	cmp.w	r8, #1
 8009046:	d103      	bne.n	8009050 <_strtod_l+0xa40>
 8009048:	f1b9 0f00 	cmp.w	r9, #0
 800904c:	f43f ad95 	beq.w	8008b7a <_strtod_l+0x56a>
 8009050:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80091a8 <_strtod_l+0xb98>
 8009054:	4f60      	ldr	r7, [pc, #384]	; (80091d8 <_strtod_l+0xbc8>)
 8009056:	ed8d 7b06 	vstr	d7, [sp, #24]
 800905a:	2600      	movs	r6, #0
 800905c:	e7ae      	b.n	8008fbc <_strtod_l+0x9ac>
 800905e:	4f5f      	ldr	r7, [pc, #380]	; (80091dc <_strtod_l+0xbcc>)
 8009060:	2600      	movs	r6, #0
 8009062:	e7a7      	b.n	8008fb4 <_strtod_l+0x9a4>
 8009064:	4b5d      	ldr	r3, [pc, #372]	; (80091dc <_strtod_l+0xbcc>)
 8009066:	4630      	mov	r0, r6
 8009068:	4639      	mov	r1, r7
 800906a:	2200      	movs	r2, #0
 800906c:	f7f7 facc 	bl	8000608 <__aeabi_dmul>
 8009070:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009072:	4606      	mov	r6, r0
 8009074:	460f      	mov	r7, r1
 8009076:	2b00      	cmp	r3, #0
 8009078:	d09c      	beq.n	8008fb4 <_strtod_l+0x9a4>
 800907a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800907e:	e79d      	b.n	8008fbc <_strtod_l+0x9ac>
 8009080:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80091b0 <_strtod_l+0xba0>
 8009084:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009088:	ec57 6b17 	vmov	r6, r7, d7
 800908c:	e796      	b.n	8008fbc <_strtod_l+0x9ac>
 800908e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009092:	9b04      	ldr	r3, [sp, #16]
 8009094:	46ca      	mov	sl, r9
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1c2      	bne.n	8009020 <_strtod_l+0xa10>
 800909a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800909e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80090a0:	0d1b      	lsrs	r3, r3, #20
 80090a2:	051b      	lsls	r3, r3, #20
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d1bb      	bne.n	8009020 <_strtod_l+0xa10>
 80090a8:	4630      	mov	r0, r6
 80090aa:	4639      	mov	r1, r7
 80090ac:	f7f7 fe0c 	bl	8000cc8 <__aeabi_d2lz>
 80090b0:	f7f7 fa7c 	bl	80005ac <__aeabi_l2d>
 80090b4:	4602      	mov	r2, r0
 80090b6:	460b      	mov	r3, r1
 80090b8:	4630      	mov	r0, r6
 80090ba:	4639      	mov	r1, r7
 80090bc:	f7f7 f8ec 	bl	8000298 <__aeabi_dsub>
 80090c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090c6:	ea43 0308 	orr.w	r3, r3, r8
 80090ca:	4313      	orrs	r3, r2
 80090cc:	4606      	mov	r6, r0
 80090ce:	460f      	mov	r7, r1
 80090d0:	d054      	beq.n	800917c <_strtod_l+0xb6c>
 80090d2:	a339      	add	r3, pc, #228	; (adr r3, 80091b8 <_strtod_l+0xba8>)
 80090d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d8:	f7f7 fd08 	bl	8000aec <__aeabi_dcmplt>
 80090dc:	2800      	cmp	r0, #0
 80090de:	f47f ace5 	bne.w	8008aac <_strtod_l+0x49c>
 80090e2:	a337      	add	r3, pc, #220	; (adr r3, 80091c0 <_strtod_l+0xbb0>)
 80090e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e8:	4630      	mov	r0, r6
 80090ea:	4639      	mov	r1, r7
 80090ec:	f7f7 fd1c 	bl	8000b28 <__aeabi_dcmpgt>
 80090f0:	2800      	cmp	r0, #0
 80090f2:	d095      	beq.n	8009020 <_strtod_l+0xa10>
 80090f4:	e4da      	b.n	8008aac <_strtod_l+0x49c>
 80090f6:	9b04      	ldr	r3, [sp, #16]
 80090f8:	b333      	cbz	r3, 8009148 <_strtod_l+0xb38>
 80090fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009100:	d822      	bhi.n	8009148 <_strtod_l+0xb38>
 8009102:	a331      	add	r3, pc, #196	; (adr r3, 80091c8 <_strtod_l+0xbb8>)
 8009104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009108:	4630      	mov	r0, r6
 800910a:	4639      	mov	r1, r7
 800910c:	f7f7 fcf8 	bl	8000b00 <__aeabi_dcmple>
 8009110:	b1a0      	cbz	r0, 800913c <_strtod_l+0xb2c>
 8009112:	4639      	mov	r1, r7
 8009114:	4630      	mov	r0, r6
 8009116:	f7f7 fd4f 	bl	8000bb8 <__aeabi_d2uiz>
 800911a:	2801      	cmp	r0, #1
 800911c:	bf38      	it	cc
 800911e:	2001      	movcc	r0, #1
 8009120:	f7f7 f9f8 	bl	8000514 <__aeabi_ui2d>
 8009124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009126:	4606      	mov	r6, r0
 8009128:	460f      	mov	r7, r1
 800912a:	bb23      	cbnz	r3, 8009176 <_strtod_l+0xb66>
 800912c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009130:	9010      	str	r0, [sp, #64]	; 0x40
 8009132:	9311      	str	r3, [sp, #68]	; 0x44
 8009134:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009138:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800913c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800913e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009140:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009144:	1a9b      	subs	r3, r3, r2
 8009146:	930f      	str	r3, [sp, #60]	; 0x3c
 8009148:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800914c:	eeb0 0a48 	vmov.f32	s0, s16
 8009150:	eef0 0a68 	vmov.f32	s1, s17
 8009154:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009158:	f002 fffe 	bl	800c158 <__ulp>
 800915c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009160:	ec53 2b10 	vmov	r2, r3, d0
 8009164:	f7f7 fa50 	bl	8000608 <__aeabi_dmul>
 8009168:	ec53 2b18 	vmov	r2, r3, d8
 800916c:	f7f7 f896 	bl	800029c <__adddf3>
 8009170:	4680      	mov	r8, r0
 8009172:	4689      	mov	r9, r1
 8009174:	e78d      	b.n	8009092 <_strtod_l+0xa82>
 8009176:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800917a:	e7db      	b.n	8009134 <_strtod_l+0xb24>
 800917c:	a314      	add	r3, pc, #80	; (adr r3, 80091d0 <_strtod_l+0xbc0>)
 800917e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009182:	f7f7 fcb3 	bl	8000aec <__aeabi_dcmplt>
 8009186:	e7b3      	b.n	80090f0 <_strtod_l+0xae0>
 8009188:	2300      	movs	r3, #0
 800918a:	930a      	str	r3, [sp, #40]	; 0x28
 800918c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800918e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009190:	6013      	str	r3, [r2, #0]
 8009192:	f7ff ba7c 	b.w	800868e <_strtod_l+0x7e>
 8009196:	2a65      	cmp	r2, #101	; 0x65
 8009198:	f43f ab75 	beq.w	8008886 <_strtod_l+0x276>
 800919c:	2a45      	cmp	r2, #69	; 0x45
 800919e:	f43f ab72 	beq.w	8008886 <_strtod_l+0x276>
 80091a2:	2301      	movs	r3, #1
 80091a4:	f7ff bbaa 	b.w	80088fc <_strtod_l+0x2ec>
 80091a8:	00000000 	.word	0x00000000
 80091ac:	bff00000 	.word	0xbff00000
 80091b0:	00000000 	.word	0x00000000
 80091b4:	3ff00000 	.word	0x3ff00000
 80091b8:	94a03595 	.word	0x94a03595
 80091bc:	3fdfffff 	.word	0x3fdfffff
 80091c0:	35afe535 	.word	0x35afe535
 80091c4:	3fe00000 	.word	0x3fe00000
 80091c8:	ffc00000 	.word	0xffc00000
 80091cc:	41dfffff 	.word	0x41dfffff
 80091d0:	94a03595 	.word	0x94a03595
 80091d4:	3fcfffff 	.word	0x3fcfffff
 80091d8:	3ff00000 	.word	0x3ff00000
 80091dc:	3fe00000 	.word	0x3fe00000
 80091e0:	7ff00000 	.word	0x7ff00000
 80091e4:	7fe00000 	.word	0x7fe00000
 80091e8:	7c9fffff 	.word	0x7c9fffff
 80091ec:	7fefffff 	.word	0x7fefffff

080091f0 <_strtod_r>:
 80091f0:	4b01      	ldr	r3, [pc, #4]	; (80091f8 <_strtod_r+0x8>)
 80091f2:	f7ff ba0d 	b.w	8008610 <_strtod_l>
 80091f6:	bf00      	nop
 80091f8:	20000084 	.word	0x20000084

080091fc <strtof>:
 80091fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009200:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80092c4 <strtof+0xc8>
 8009204:	4b2a      	ldr	r3, [pc, #168]	; (80092b0 <strtof+0xb4>)
 8009206:	460a      	mov	r2, r1
 8009208:	ed2d 8b02 	vpush	{d8}
 800920c:	4601      	mov	r1, r0
 800920e:	f8d8 0000 	ldr.w	r0, [r8]
 8009212:	f7ff f9fd 	bl	8008610 <_strtod_l>
 8009216:	ec55 4b10 	vmov	r4, r5, d0
 800921a:	ee10 2a10 	vmov	r2, s0
 800921e:	ee10 0a10 	vmov	r0, s0
 8009222:	462b      	mov	r3, r5
 8009224:	4629      	mov	r1, r5
 8009226:	f7f7 fc89 	bl	8000b3c <__aeabi_dcmpun>
 800922a:	b190      	cbz	r0, 8009252 <strtof+0x56>
 800922c:	2d00      	cmp	r5, #0
 800922e:	4821      	ldr	r0, [pc, #132]	; (80092b4 <strtof+0xb8>)
 8009230:	da09      	bge.n	8009246 <strtof+0x4a>
 8009232:	f001 f939 	bl	800a4a8 <nanf>
 8009236:	eeb1 8a40 	vneg.f32	s16, s0
 800923a:	eeb0 0a48 	vmov.f32	s0, s16
 800923e:	ecbd 8b02 	vpop	{d8}
 8009242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009246:	ecbd 8b02 	vpop	{d8}
 800924a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800924e:	f001 b92b 	b.w	800a4a8 <nanf>
 8009252:	4620      	mov	r0, r4
 8009254:	4629      	mov	r1, r5
 8009256:	f7f7 fccf 	bl	8000bf8 <__aeabi_d2f>
 800925a:	ee08 0a10 	vmov	s16, r0
 800925e:	eddf 7a16 	vldr	s15, [pc, #88]	; 80092b8 <strtof+0xbc>
 8009262:	eeb0 7ac8 	vabs.f32	s14, s16
 8009266:	eeb4 7a67 	vcmp.f32	s14, s15
 800926a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800926e:	dd11      	ble.n	8009294 <strtof+0x98>
 8009270:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8009274:	4b11      	ldr	r3, [pc, #68]	; (80092bc <strtof+0xc0>)
 8009276:	f04f 32ff 	mov.w	r2, #4294967295
 800927a:	4620      	mov	r0, r4
 800927c:	4639      	mov	r1, r7
 800927e:	f7f7 fc5d 	bl	8000b3c <__aeabi_dcmpun>
 8009282:	b980      	cbnz	r0, 80092a6 <strtof+0xaa>
 8009284:	4b0d      	ldr	r3, [pc, #52]	; (80092bc <strtof+0xc0>)
 8009286:	f04f 32ff 	mov.w	r2, #4294967295
 800928a:	4620      	mov	r0, r4
 800928c:	4639      	mov	r1, r7
 800928e:	f7f7 fc37 	bl	8000b00 <__aeabi_dcmple>
 8009292:	b940      	cbnz	r0, 80092a6 <strtof+0xaa>
 8009294:	ee18 3a10 	vmov	r3, s16
 8009298:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800929c:	d1cd      	bne.n	800923a <strtof+0x3e>
 800929e:	4b08      	ldr	r3, [pc, #32]	; (80092c0 <strtof+0xc4>)
 80092a0:	402b      	ands	r3, r5
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d0c9      	beq.n	800923a <strtof+0x3e>
 80092a6:	f8d8 3000 	ldr.w	r3, [r8]
 80092aa:	2222      	movs	r2, #34	; 0x22
 80092ac:	601a      	str	r2, [r3, #0]
 80092ae:	e7c4      	b.n	800923a <strtof+0x3e>
 80092b0:	20000084 	.word	0x20000084
 80092b4:	0800d938 	.word	0x0800d938
 80092b8:	7f7fffff 	.word	0x7f7fffff
 80092bc:	7fefffff 	.word	0x7fefffff
 80092c0:	7ff00000 	.word	0x7ff00000
 80092c4:	2000023c 	.word	0x2000023c

080092c8 <_strtol_l.constprop.0>:
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092ce:	d001      	beq.n	80092d4 <_strtol_l.constprop.0+0xc>
 80092d0:	2b24      	cmp	r3, #36	; 0x24
 80092d2:	d906      	bls.n	80092e2 <_strtol_l.constprop.0+0x1a>
 80092d4:	f001 f8a2 	bl	800a41c <__errno>
 80092d8:	2316      	movs	r3, #22
 80092da:	6003      	str	r3, [r0, #0]
 80092dc:	2000      	movs	r0, #0
 80092de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80093c8 <_strtol_l.constprop.0+0x100>
 80092e6:	460d      	mov	r5, r1
 80092e8:	462e      	mov	r6, r5
 80092ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80092ee:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80092f2:	f017 0708 	ands.w	r7, r7, #8
 80092f6:	d1f7      	bne.n	80092e8 <_strtol_l.constprop.0+0x20>
 80092f8:	2c2d      	cmp	r4, #45	; 0x2d
 80092fa:	d132      	bne.n	8009362 <_strtol_l.constprop.0+0x9a>
 80092fc:	782c      	ldrb	r4, [r5, #0]
 80092fe:	2701      	movs	r7, #1
 8009300:	1cb5      	adds	r5, r6, #2
 8009302:	2b00      	cmp	r3, #0
 8009304:	d05b      	beq.n	80093be <_strtol_l.constprop.0+0xf6>
 8009306:	2b10      	cmp	r3, #16
 8009308:	d109      	bne.n	800931e <_strtol_l.constprop.0+0x56>
 800930a:	2c30      	cmp	r4, #48	; 0x30
 800930c:	d107      	bne.n	800931e <_strtol_l.constprop.0+0x56>
 800930e:	782c      	ldrb	r4, [r5, #0]
 8009310:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009314:	2c58      	cmp	r4, #88	; 0x58
 8009316:	d14d      	bne.n	80093b4 <_strtol_l.constprop.0+0xec>
 8009318:	786c      	ldrb	r4, [r5, #1]
 800931a:	2310      	movs	r3, #16
 800931c:	3502      	adds	r5, #2
 800931e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009322:	f108 38ff 	add.w	r8, r8, #4294967295
 8009326:	f04f 0e00 	mov.w	lr, #0
 800932a:	fbb8 f9f3 	udiv	r9, r8, r3
 800932e:	4676      	mov	r6, lr
 8009330:	fb03 8a19 	mls	sl, r3, r9, r8
 8009334:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009338:	f1bc 0f09 	cmp.w	ip, #9
 800933c:	d816      	bhi.n	800936c <_strtol_l.constprop.0+0xa4>
 800933e:	4664      	mov	r4, ip
 8009340:	42a3      	cmp	r3, r4
 8009342:	dd24      	ble.n	800938e <_strtol_l.constprop.0+0xc6>
 8009344:	f1be 3fff 	cmp.w	lr, #4294967295
 8009348:	d008      	beq.n	800935c <_strtol_l.constprop.0+0x94>
 800934a:	45b1      	cmp	r9, r6
 800934c:	d31c      	bcc.n	8009388 <_strtol_l.constprop.0+0xc0>
 800934e:	d101      	bne.n	8009354 <_strtol_l.constprop.0+0x8c>
 8009350:	45a2      	cmp	sl, r4
 8009352:	db19      	blt.n	8009388 <_strtol_l.constprop.0+0xc0>
 8009354:	fb06 4603 	mla	r6, r6, r3, r4
 8009358:	f04f 0e01 	mov.w	lr, #1
 800935c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009360:	e7e8      	b.n	8009334 <_strtol_l.constprop.0+0x6c>
 8009362:	2c2b      	cmp	r4, #43	; 0x2b
 8009364:	bf04      	itt	eq
 8009366:	782c      	ldrbeq	r4, [r5, #0]
 8009368:	1cb5      	addeq	r5, r6, #2
 800936a:	e7ca      	b.n	8009302 <_strtol_l.constprop.0+0x3a>
 800936c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009370:	f1bc 0f19 	cmp.w	ip, #25
 8009374:	d801      	bhi.n	800937a <_strtol_l.constprop.0+0xb2>
 8009376:	3c37      	subs	r4, #55	; 0x37
 8009378:	e7e2      	b.n	8009340 <_strtol_l.constprop.0+0x78>
 800937a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800937e:	f1bc 0f19 	cmp.w	ip, #25
 8009382:	d804      	bhi.n	800938e <_strtol_l.constprop.0+0xc6>
 8009384:	3c57      	subs	r4, #87	; 0x57
 8009386:	e7db      	b.n	8009340 <_strtol_l.constprop.0+0x78>
 8009388:	f04f 3eff 	mov.w	lr, #4294967295
 800938c:	e7e6      	b.n	800935c <_strtol_l.constprop.0+0x94>
 800938e:	f1be 3fff 	cmp.w	lr, #4294967295
 8009392:	d105      	bne.n	80093a0 <_strtol_l.constprop.0+0xd8>
 8009394:	2322      	movs	r3, #34	; 0x22
 8009396:	6003      	str	r3, [r0, #0]
 8009398:	4646      	mov	r6, r8
 800939a:	b942      	cbnz	r2, 80093ae <_strtol_l.constprop.0+0xe6>
 800939c:	4630      	mov	r0, r6
 800939e:	e79e      	b.n	80092de <_strtol_l.constprop.0+0x16>
 80093a0:	b107      	cbz	r7, 80093a4 <_strtol_l.constprop.0+0xdc>
 80093a2:	4276      	negs	r6, r6
 80093a4:	2a00      	cmp	r2, #0
 80093a6:	d0f9      	beq.n	800939c <_strtol_l.constprop.0+0xd4>
 80093a8:	f1be 0f00 	cmp.w	lr, #0
 80093ac:	d000      	beq.n	80093b0 <_strtol_l.constprop.0+0xe8>
 80093ae:	1e69      	subs	r1, r5, #1
 80093b0:	6011      	str	r1, [r2, #0]
 80093b2:	e7f3      	b.n	800939c <_strtol_l.constprop.0+0xd4>
 80093b4:	2430      	movs	r4, #48	; 0x30
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d1b1      	bne.n	800931e <_strtol_l.constprop.0+0x56>
 80093ba:	2308      	movs	r3, #8
 80093bc:	e7af      	b.n	800931e <_strtol_l.constprop.0+0x56>
 80093be:	2c30      	cmp	r4, #48	; 0x30
 80093c0:	d0a5      	beq.n	800930e <_strtol_l.constprop.0+0x46>
 80093c2:	230a      	movs	r3, #10
 80093c4:	e7ab      	b.n	800931e <_strtol_l.constprop.0+0x56>
 80093c6:	bf00      	nop
 80093c8:	0800d569 	.word	0x0800d569

080093cc <_strtol_r>:
 80093cc:	f7ff bf7c 	b.w	80092c8 <_strtol_l.constprop.0>

080093d0 <strtol>:
 80093d0:	4613      	mov	r3, r2
 80093d2:	460a      	mov	r2, r1
 80093d4:	4601      	mov	r1, r0
 80093d6:	4802      	ldr	r0, [pc, #8]	; (80093e0 <strtol+0x10>)
 80093d8:	6800      	ldr	r0, [r0, #0]
 80093da:	f7ff bf75 	b.w	80092c8 <_strtol_l.constprop.0>
 80093de:	bf00      	nop
 80093e0:	2000023c 	.word	0x2000023c

080093e4 <tolower>:
 80093e4:	4b03      	ldr	r3, [pc, #12]	; (80093f4 <tolower+0x10>)
 80093e6:	5c1b      	ldrb	r3, [r3, r0]
 80093e8:	f003 0303 	and.w	r3, r3, #3
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	bf08      	it	eq
 80093f0:	3020      	addeq	r0, #32
 80093f2:	4770      	bx	lr
 80093f4:	0800d569 	.word	0x0800d569

080093f8 <__cvt>:
 80093f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093fc:	ec55 4b10 	vmov	r4, r5, d0
 8009400:	2d00      	cmp	r5, #0
 8009402:	460e      	mov	r6, r1
 8009404:	4619      	mov	r1, r3
 8009406:	462b      	mov	r3, r5
 8009408:	bfbb      	ittet	lt
 800940a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800940e:	461d      	movlt	r5, r3
 8009410:	2300      	movge	r3, #0
 8009412:	232d      	movlt	r3, #45	; 0x2d
 8009414:	700b      	strb	r3, [r1, #0]
 8009416:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009418:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800941c:	4691      	mov	r9, r2
 800941e:	f023 0820 	bic.w	r8, r3, #32
 8009422:	bfbc      	itt	lt
 8009424:	4622      	movlt	r2, r4
 8009426:	4614      	movlt	r4, r2
 8009428:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800942c:	d005      	beq.n	800943a <__cvt+0x42>
 800942e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009432:	d100      	bne.n	8009436 <__cvt+0x3e>
 8009434:	3601      	adds	r6, #1
 8009436:	2102      	movs	r1, #2
 8009438:	e000      	b.n	800943c <__cvt+0x44>
 800943a:	2103      	movs	r1, #3
 800943c:	ab03      	add	r3, sp, #12
 800943e:	9301      	str	r3, [sp, #4]
 8009440:	ab02      	add	r3, sp, #8
 8009442:	9300      	str	r3, [sp, #0]
 8009444:	ec45 4b10 	vmov	d0, r4, r5
 8009448:	4653      	mov	r3, sl
 800944a:	4632      	mov	r2, r6
 800944c:	f001 f8bc 	bl	800a5c8 <_dtoa_r>
 8009450:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009454:	4607      	mov	r7, r0
 8009456:	d102      	bne.n	800945e <__cvt+0x66>
 8009458:	f019 0f01 	tst.w	r9, #1
 800945c:	d022      	beq.n	80094a4 <__cvt+0xac>
 800945e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009462:	eb07 0906 	add.w	r9, r7, r6
 8009466:	d110      	bne.n	800948a <__cvt+0x92>
 8009468:	783b      	ldrb	r3, [r7, #0]
 800946a:	2b30      	cmp	r3, #48	; 0x30
 800946c:	d10a      	bne.n	8009484 <__cvt+0x8c>
 800946e:	2200      	movs	r2, #0
 8009470:	2300      	movs	r3, #0
 8009472:	4620      	mov	r0, r4
 8009474:	4629      	mov	r1, r5
 8009476:	f7f7 fb2f 	bl	8000ad8 <__aeabi_dcmpeq>
 800947a:	b918      	cbnz	r0, 8009484 <__cvt+0x8c>
 800947c:	f1c6 0601 	rsb	r6, r6, #1
 8009480:	f8ca 6000 	str.w	r6, [sl]
 8009484:	f8da 3000 	ldr.w	r3, [sl]
 8009488:	4499      	add	r9, r3
 800948a:	2200      	movs	r2, #0
 800948c:	2300      	movs	r3, #0
 800948e:	4620      	mov	r0, r4
 8009490:	4629      	mov	r1, r5
 8009492:	f7f7 fb21 	bl	8000ad8 <__aeabi_dcmpeq>
 8009496:	b108      	cbz	r0, 800949c <__cvt+0xa4>
 8009498:	f8cd 900c 	str.w	r9, [sp, #12]
 800949c:	2230      	movs	r2, #48	; 0x30
 800949e:	9b03      	ldr	r3, [sp, #12]
 80094a0:	454b      	cmp	r3, r9
 80094a2:	d307      	bcc.n	80094b4 <__cvt+0xbc>
 80094a4:	9b03      	ldr	r3, [sp, #12]
 80094a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094a8:	1bdb      	subs	r3, r3, r7
 80094aa:	4638      	mov	r0, r7
 80094ac:	6013      	str	r3, [r2, #0]
 80094ae:	b004      	add	sp, #16
 80094b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094b4:	1c59      	adds	r1, r3, #1
 80094b6:	9103      	str	r1, [sp, #12]
 80094b8:	701a      	strb	r2, [r3, #0]
 80094ba:	e7f0      	b.n	800949e <__cvt+0xa6>

080094bc <__exponent>:
 80094bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094be:	4603      	mov	r3, r0
 80094c0:	2900      	cmp	r1, #0
 80094c2:	bfb8      	it	lt
 80094c4:	4249      	neglt	r1, r1
 80094c6:	f803 2b02 	strb.w	r2, [r3], #2
 80094ca:	bfb4      	ite	lt
 80094cc:	222d      	movlt	r2, #45	; 0x2d
 80094ce:	222b      	movge	r2, #43	; 0x2b
 80094d0:	2909      	cmp	r1, #9
 80094d2:	7042      	strb	r2, [r0, #1]
 80094d4:	dd2a      	ble.n	800952c <__exponent+0x70>
 80094d6:	f10d 0207 	add.w	r2, sp, #7
 80094da:	4617      	mov	r7, r2
 80094dc:	260a      	movs	r6, #10
 80094de:	4694      	mov	ip, r2
 80094e0:	fb91 f5f6 	sdiv	r5, r1, r6
 80094e4:	fb06 1415 	mls	r4, r6, r5, r1
 80094e8:	3430      	adds	r4, #48	; 0x30
 80094ea:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80094ee:	460c      	mov	r4, r1
 80094f0:	2c63      	cmp	r4, #99	; 0x63
 80094f2:	f102 32ff 	add.w	r2, r2, #4294967295
 80094f6:	4629      	mov	r1, r5
 80094f8:	dcf1      	bgt.n	80094de <__exponent+0x22>
 80094fa:	3130      	adds	r1, #48	; 0x30
 80094fc:	f1ac 0402 	sub.w	r4, ip, #2
 8009500:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009504:	1c41      	adds	r1, r0, #1
 8009506:	4622      	mov	r2, r4
 8009508:	42ba      	cmp	r2, r7
 800950a:	d30a      	bcc.n	8009522 <__exponent+0x66>
 800950c:	f10d 0209 	add.w	r2, sp, #9
 8009510:	eba2 020c 	sub.w	r2, r2, ip
 8009514:	42bc      	cmp	r4, r7
 8009516:	bf88      	it	hi
 8009518:	2200      	movhi	r2, #0
 800951a:	4413      	add	r3, r2
 800951c:	1a18      	subs	r0, r3, r0
 800951e:	b003      	add	sp, #12
 8009520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009522:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009526:	f801 5f01 	strb.w	r5, [r1, #1]!
 800952a:	e7ed      	b.n	8009508 <__exponent+0x4c>
 800952c:	2330      	movs	r3, #48	; 0x30
 800952e:	3130      	adds	r1, #48	; 0x30
 8009530:	7083      	strb	r3, [r0, #2]
 8009532:	70c1      	strb	r1, [r0, #3]
 8009534:	1d03      	adds	r3, r0, #4
 8009536:	e7f1      	b.n	800951c <__exponent+0x60>

08009538 <_printf_float>:
 8009538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800953c:	ed2d 8b02 	vpush	{d8}
 8009540:	b08d      	sub	sp, #52	; 0x34
 8009542:	460c      	mov	r4, r1
 8009544:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009548:	4616      	mov	r6, r2
 800954a:	461f      	mov	r7, r3
 800954c:	4605      	mov	r5, r0
 800954e:	f000 ff1b 	bl	800a388 <_localeconv_r>
 8009552:	f8d0 a000 	ldr.w	sl, [r0]
 8009556:	4650      	mov	r0, sl
 8009558:	f7f6 fe92 	bl	8000280 <strlen>
 800955c:	2300      	movs	r3, #0
 800955e:	930a      	str	r3, [sp, #40]	; 0x28
 8009560:	6823      	ldr	r3, [r4, #0]
 8009562:	9305      	str	r3, [sp, #20]
 8009564:	f8d8 3000 	ldr.w	r3, [r8]
 8009568:	f894 b018 	ldrb.w	fp, [r4, #24]
 800956c:	3307      	adds	r3, #7
 800956e:	f023 0307 	bic.w	r3, r3, #7
 8009572:	f103 0208 	add.w	r2, r3, #8
 8009576:	f8c8 2000 	str.w	r2, [r8]
 800957a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800957e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009582:	9307      	str	r3, [sp, #28]
 8009584:	f8cd 8018 	str.w	r8, [sp, #24]
 8009588:	ee08 0a10 	vmov	s16, r0
 800958c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009590:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009594:	4b9e      	ldr	r3, [pc, #632]	; (8009810 <_printf_float+0x2d8>)
 8009596:	f04f 32ff 	mov.w	r2, #4294967295
 800959a:	f7f7 facf 	bl	8000b3c <__aeabi_dcmpun>
 800959e:	bb88      	cbnz	r0, 8009604 <_printf_float+0xcc>
 80095a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095a4:	4b9a      	ldr	r3, [pc, #616]	; (8009810 <_printf_float+0x2d8>)
 80095a6:	f04f 32ff 	mov.w	r2, #4294967295
 80095aa:	f7f7 faa9 	bl	8000b00 <__aeabi_dcmple>
 80095ae:	bb48      	cbnz	r0, 8009604 <_printf_float+0xcc>
 80095b0:	2200      	movs	r2, #0
 80095b2:	2300      	movs	r3, #0
 80095b4:	4640      	mov	r0, r8
 80095b6:	4649      	mov	r1, r9
 80095b8:	f7f7 fa98 	bl	8000aec <__aeabi_dcmplt>
 80095bc:	b110      	cbz	r0, 80095c4 <_printf_float+0x8c>
 80095be:	232d      	movs	r3, #45	; 0x2d
 80095c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095c4:	4a93      	ldr	r2, [pc, #588]	; (8009814 <_printf_float+0x2dc>)
 80095c6:	4b94      	ldr	r3, [pc, #592]	; (8009818 <_printf_float+0x2e0>)
 80095c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80095cc:	bf94      	ite	ls
 80095ce:	4690      	movls	r8, r2
 80095d0:	4698      	movhi	r8, r3
 80095d2:	2303      	movs	r3, #3
 80095d4:	6123      	str	r3, [r4, #16]
 80095d6:	9b05      	ldr	r3, [sp, #20]
 80095d8:	f023 0304 	bic.w	r3, r3, #4
 80095dc:	6023      	str	r3, [r4, #0]
 80095de:	f04f 0900 	mov.w	r9, #0
 80095e2:	9700      	str	r7, [sp, #0]
 80095e4:	4633      	mov	r3, r6
 80095e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80095e8:	4621      	mov	r1, r4
 80095ea:	4628      	mov	r0, r5
 80095ec:	f000 f9da 	bl	80099a4 <_printf_common>
 80095f0:	3001      	adds	r0, #1
 80095f2:	f040 8090 	bne.w	8009716 <_printf_float+0x1de>
 80095f6:	f04f 30ff 	mov.w	r0, #4294967295
 80095fa:	b00d      	add	sp, #52	; 0x34
 80095fc:	ecbd 8b02 	vpop	{d8}
 8009600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009604:	4642      	mov	r2, r8
 8009606:	464b      	mov	r3, r9
 8009608:	4640      	mov	r0, r8
 800960a:	4649      	mov	r1, r9
 800960c:	f7f7 fa96 	bl	8000b3c <__aeabi_dcmpun>
 8009610:	b140      	cbz	r0, 8009624 <_printf_float+0xec>
 8009612:	464b      	mov	r3, r9
 8009614:	2b00      	cmp	r3, #0
 8009616:	bfbc      	itt	lt
 8009618:	232d      	movlt	r3, #45	; 0x2d
 800961a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800961e:	4a7f      	ldr	r2, [pc, #508]	; (800981c <_printf_float+0x2e4>)
 8009620:	4b7f      	ldr	r3, [pc, #508]	; (8009820 <_printf_float+0x2e8>)
 8009622:	e7d1      	b.n	80095c8 <_printf_float+0x90>
 8009624:	6863      	ldr	r3, [r4, #4]
 8009626:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800962a:	9206      	str	r2, [sp, #24]
 800962c:	1c5a      	adds	r2, r3, #1
 800962e:	d13f      	bne.n	80096b0 <_printf_float+0x178>
 8009630:	2306      	movs	r3, #6
 8009632:	6063      	str	r3, [r4, #4]
 8009634:	9b05      	ldr	r3, [sp, #20]
 8009636:	6861      	ldr	r1, [r4, #4]
 8009638:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800963c:	2300      	movs	r3, #0
 800963e:	9303      	str	r3, [sp, #12]
 8009640:	ab0a      	add	r3, sp, #40	; 0x28
 8009642:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009646:	ab09      	add	r3, sp, #36	; 0x24
 8009648:	ec49 8b10 	vmov	d0, r8, r9
 800964c:	9300      	str	r3, [sp, #0]
 800964e:	6022      	str	r2, [r4, #0]
 8009650:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009654:	4628      	mov	r0, r5
 8009656:	f7ff fecf 	bl	80093f8 <__cvt>
 800965a:	9b06      	ldr	r3, [sp, #24]
 800965c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800965e:	2b47      	cmp	r3, #71	; 0x47
 8009660:	4680      	mov	r8, r0
 8009662:	d108      	bne.n	8009676 <_printf_float+0x13e>
 8009664:	1cc8      	adds	r0, r1, #3
 8009666:	db02      	blt.n	800966e <_printf_float+0x136>
 8009668:	6863      	ldr	r3, [r4, #4]
 800966a:	4299      	cmp	r1, r3
 800966c:	dd41      	ble.n	80096f2 <_printf_float+0x1ba>
 800966e:	f1ab 0302 	sub.w	r3, fp, #2
 8009672:	fa5f fb83 	uxtb.w	fp, r3
 8009676:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800967a:	d820      	bhi.n	80096be <_printf_float+0x186>
 800967c:	3901      	subs	r1, #1
 800967e:	465a      	mov	r2, fp
 8009680:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009684:	9109      	str	r1, [sp, #36]	; 0x24
 8009686:	f7ff ff19 	bl	80094bc <__exponent>
 800968a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800968c:	1813      	adds	r3, r2, r0
 800968e:	2a01      	cmp	r2, #1
 8009690:	4681      	mov	r9, r0
 8009692:	6123      	str	r3, [r4, #16]
 8009694:	dc02      	bgt.n	800969c <_printf_float+0x164>
 8009696:	6822      	ldr	r2, [r4, #0]
 8009698:	07d2      	lsls	r2, r2, #31
 800969a:	d501      	bpl.n	80096a0 <_printf_float+0x168>
 800969c:	3301      	adds	r3, #1
 800969e:	6123      	str	r3, [r4, #16]
 80096a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d09c      	beq.n	80095e2 <_printf_float+0xaa>
 80096a8:	232d      	movs	r3, #45	; 0x2d
 80096aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096ae:	e798      	b.n	80095e2 <_printf_float+0xaa>
 80096b0:	9a06      	ldr	r2, [sp, #24]
 80096b2:	2a47      	cmp	r2, #71	; 0x47
 80096b4:	d1be      	bne.n	8009634 <_printf_float+0xfc>
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d1bc      	bne.n	8009634 <_printf_float+0xfc>
 80096ba:	2301      	movs	r3, #1
 80096bc:	e7b9      	b.n	8009632 <_printf_float+0xfa>
 80096be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80096c2:	d118      	bne.n	80096f6 <_printf_float+0x1be>
 80096c4:	2900      	cmp	r1, #0
 80096c6:	6863      	ldr	r3, [r4, #4]
 80096c8:	dd0b      	ble.n	80096e2 <_printf_float+0x1aa>
 80096ca:	6121      	str	r1, [r4, #16]
 80096cc:	b913      	cbnz	r3, 80096d4 <_printf_float+0x19c>
 80096ce:	6822      	ldr	r2, [r4, #0]
 80096d0:	07d0      	lsls	r0, r2, #31
 80096d2:	d502      	bpl.n	80096da <_printf_float+0x1a2>
 80096d4:	3301      	adds	r3, #1
 80096d6:	440b      	add	r3, r1
 80096d8:	6123      	str	r3, [r4, #16]
 80096da:	65a1      	str	r1, [r4, #88]	; 0x58
 80096dc:	f04f 0900 	mov.w	r9, #0
 80096e0:	e7de      	b.n	80096a0 <_printf_float+0x168>
 80096e2:	b913      	cbnz	r3, 80096ea <_printf_float+0x1b2>
 80096e4:	6822      	ldr	r2, [r4, #0]
 80096e6:	07d2      	lsls	r2, r2, #31
 80096e8:	d501      	bpl.n	80096ee <_printf_float+0x1b6>
 80096ea:	3302      	adds	r3, #2
 80096ec:	e7f4      	b.n	80096d8 <_printf_float+0x1a0>
 80096ee:	2301      	movs	r3, #1
 80096f0:	e7f2      	b.n	80096d8 <_printf_float+0x1a0>
 80096f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80096f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096f8:	4299      	cmp	r1, r3
 80096fa:	db05      	blt.n	8009708 <_printf_float+0x1d0>
 80096fc:	6823      	ldr	r3, [r4, #0]
 80096fe:	6121      	str	r1, [r4, #16]
 8009700:	07d8      	lsls	r0, r3, #31
 8009702:	d5ea      	bpl.n	80096da <_printf_float+0x1a2>
 8009704:	1c4b      	adds	r3, r1, #1
 8009706:	e7e7      	b.n	80096d8 <_printf_float+0x1a0>
 8009708:	2900      	cmp	r1, #0
 800970a:	bfd4      	ite	le
 800970c:	f1c1 0202 	rsble	r2, r1, #2
 8009710:	2201      	movgt	r2, #1
 8009712:	4413      	add	r3, r2
 8009714:	e7e0      	b.n	80096d8 <_printf_float+0x1a0>
 8009716:	6823      	ldr	r3, [r4, #0]
 8009718:	055a      	lsls	r2, r3, #21
 800971a:	d407      	bmi.n	800972c <_printf_float+0x1f4>
 800971c:	6923      	ldr	r3, [r4, #16]
 800971e:	4642      	mov	r2, r8
 8009720:	4631      	mov	r1, r6
 8009722:	4628      	mov	r0, r5
 8009724:	47b8      	blx	r7
 8009726:	3001      	adds	r0, #1
 8009728:	d12c      	bne.n	8009784 <_printf_float+0x24c>
 800972a:	e764      	b.n	80095f6 <_printf_float+0xbe>
 800972c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009730:	f240 80e0 	bls.w	80098f4 <_printf_float+0x3bc>
 8009734:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009738:	2200      	movs	r2, #0
 800973a:	2300      	movs	r3, #0
 800973c:	f7f7 f9cc 	bl	8000ad8 <__aeabi_dcmpeq>
 8009740:	2800      	cmp	r0, #0
 8009742:	d034      	beq.n	80097ae <_printf_float+0x276>
 8009744:	4a37      	ldr	r2, [pc, #220]	; (8009824 <_printf_float+0x2ec>)
 8009746:	2301      	movs	r3, #1
 8009748:	4631      	mov	r1, r6
 800974a:	4628      	mov	r0, r5
 800974c:	47b8      	blx	r7
 800974e:	3001      	adds	r0, #1
 8009750:	f43f af51 	beq.w	80095f6 <_printf_float+0xbe>
 8009754:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009758:	429a      	cmp	r2, r3
 800975a:	db02      	blt.n	8009762 <_printf_float+0x22a>
 800975c:	6823      	ldr	r3, [r4, #0]
 800975e:	07d8      	lsls	r0, r3, #31
 8009760:	d510      	bpl.n	8009784 <_printf_float+0x24c>
 8009762:	ee18 3a10 	vmov	r3, s16
 8009766:	4652      	mov	r2, sl
 8009768:	4631      	mov	r1, r6
 800976a:	4628      	mov	r0, r5
 800976c:	47b8      	blx	r7
 800976e:	3001      	adds	r0, #1
 8009770:	f43f af41 	beq.w	80095f6 <_printf_float+0xbe>
 8009774:	f04f 0800 	mov.w	r8, #0
 8009778:	f104 091a 	add.w	r9, r4, #26
 800977c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800977e:	3b01      	subs	r3, #1
 8009780:	4543      	cmp	r3, r8
 8009782:	dc09      	bgt.n	8009798 <_printf_float+0x260>
 8009784:	6823      	ldr	r3, [r4, #0]
 8009786:	079b      	lsls	r3, r3, #30
 8009788:	f100 8107 	bmi.w	800999a <_printf_float+0x462>
 800978c:	68e0      	ldr	r0, [r4, #12]
 800978e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009790:	4298      	cmp	r0, r3
 8009792:	bfb8      	it	lt
 8009794:	4618      	movlt	r0, r3
 8009796:	e730      	b.n	80095fa <_printf_float+0xc2>
 8009798:	2301      	movs	r3, #1
 800979a:	464a      	mov	r2, r9
 800979c:	4631      	mov	r1, r6
 800979e:	4628      	mov	r0, r5
 80097a0:	47b8      	blx	r7
 80097a2:	3001      	adds	r0, #1
 80097a4:	f43f af27 	beq.w	80095f6 <_printf_float+0xbe>
 80097a8:	f108 0801 	add.w	r8, r8, #1
 80097ac:	e7e6      	b.n	800977c <_printf_float+0x244>
 80097ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	dc39      	bgt.n	8009828 <_printf_float+0x2f0>
 80097b4:	4a1b      	ldr	r2, [pc, #108]	; (8009824 <_printf_float+0x2ec>)
 80097b6:	2301      	movs	r3, #1
 80097b8:	4631      	mov	r1, r6
 80097ba:	4628      	mov	r0, r5
 80097bc:	47b8      	blx	r7
 80097be:	3001      	adds	r0, #1
 80097c0:	f43f af19 	beq.w	80095f6 <_printf_float+0xbe>
 80097c4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80097c8:	4313      	orrs	r3, r2
 80097ca:	d102      	bne.n	80097d2 <_printf_float+0x29a>
 80097cc:	6823      	ldr	r3, [r4, #0]
 80097ce:	07d9      	lsls	r1, r3, #31
 80097d0:	d5d8      	bpl.n	8009784 <_printf_float+0x24c>
 80097d2:	ee18 3a10 	vmov	r3, s16
 80097d6:	4652      	mov	r2, sl
 80097d8:	4631      	mov	r1, r6
 80097da:	4628      	mov	r0, r5
 80097dc:	47b8      	blx	r7
 80097de:	3001      	adds	r0, #1
 80097e0:	f43f af09 	beq.w	80095f6 <_printf_float+0xbe>
 80097e4:	f04f 0900 	mov.w	r9, #0
 80097e8:	f104 0a1a 	add.w	sl, r4, #26
 80097ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097ee:	425b      	negs	r3, r3
 80097f0:	454b      	cmp	r3, r9
 80097f2:	dc01      	bgt.n	80097f8 <_printf_float+0x2c0>
 80097f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097f6:	e792      	b.n	800971e <_printf_float+0x1e6>
 80097f8:	2301      	movs	r3, #1
 80097fa:	4652      	mov	r2, sl
 80097fc:	4631      	mov	r1, r6
 80097fe:	4628      	mov	r0, r5
 8009800:	47b8      	blx	r7
 8009802:	3001      	adds	r0, #1
 8009804:	f43f aef7 	beq.w	80095f6 <_printf_float+0xbe>
 8009808:	f109 0901 	add.w	r9, r9, #1
 800980c:	e7ee      	b.n	80097ec <_printf_float+0x2b4>
 800980e:	bf00      	nop
 8009810:	7fefffff 	.word	0x7fefffff
 8009814:	0800d669 	.word	0x0800d669
 8009818:	0800d66d 	.word	0x0800d66d
 800981c:	0800d671 	.word	0x0800d671
 8009820:	0800d675 	.word	0x0800d675
 8009824:	0800d679 	.word	0x0800d679
 8009828:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800982a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800982c:	429a      	cmp	r2, r3
 800982e:	bfa8      	it	ge
 8009830:	461a      	movge	r2, r3
 8009832:	2a00      	cmp	r2, #0
 8009834:	4691      	mov	r9, r2
 8009836:	dc37      	bgt.n	80098a8 <_printf_float+0x370>
 8009838:	f04f 0b00 	mov.w	fp, #0
 800983c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009840:	f104 021a 	add.w	r2, r4, #26
 8009844:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009846:	9305      	str	r3, [sp, #20]
 8009848:	eba3 0309 	sub.w	r3, r3, r9
 800984c:	455b      	cmp	r3, fp
 800984e:	dc33      	bgt.n	80098b8 <_printf_float+0x380>
 8009850:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009854:	429a      	cmp	r2, r3
 8009856:	db3b      	blt.n	80098d0 <_printf_float+0x398>
 8009858:	6823      	ldr	r3, [r4, #0]
 800985a:	07da      	lsls	r2, r3, #31
 800985c:	d438      	bmi.n	80098d0 <_printf_float+0x398>
 800985e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009862:	eba2 0903 	sub.w	r9, r2, r3
 8009866:	9b05      	ldr	r3, [sp, #20]
 8009868:	1ad2      	subs	r2, r2, r3
 800986a:	4591      	cmp	r9, r2
 800986c:	bfa8      	it	ge
 800986e:	4691      	movge	r9, r2
 8009870:	f1b9 0f00 	cmp.w	r9, #0
 8009874:	dc35      	bgt.n	80098e2 <_printf_float+0x3aa>
 8009876:	f04f 0800 	mov.w	r8, #0
 800987a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800987e:	f104 0a1a 	add.w	sl, r4, #26
 8009882:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009886:	1a9b      	subs	r3, r3, r2
 8009888:	eba3 0309 	sub.w	r3, r3, r9
 800988c:	4543      	cmp	r3, r8
 800988e:	f77f af79 	ble.w	8009784 <_printf_float+0x24c>
 8009892:	2301      	movs	r3, #1
 8009894:	4652      	mov	r2, sl
 8009896:	4631      	mov	r1, r6
 8009898:	4628      	mov	r0, r5
 800989a:	47b8      	blx	r7
 800989c:	3001      	adds	r0, #1
 800989e:	f43f aeaa 	beq.w	80095f6 <_printf_float+0xbe>
 80098a2:	f108 0801 	add.w	r8, r8, #1
 80098a6:	e7ec      	b.n	8009882 <_printf_float+0x34a>
 80098a8:	4613      	mov	r3, r2
 80098aa:	4631      	mov	r1, r6
 80098ac:	4642      	mov	r2, r8
 80098ae:	4628      	mov	r0, r5
 80098b0:	47b8      	blx	r7
 80098b2:	3001      	adds	r0, #1
 80098b4:	d1c0      	bne.n	8009838 <_printf_float+0x300>
 80098b6:	e69e      	b.n	80095f6 <_printf_float+0xbe>
 80098b8:	2301      	movs	r3, #1
 80098ba:	4631      	mov	r1, r6
 80098bc:	4628      	mov	r0, r5
 80098be:	9205      	str	r2, [sp, #20]
 80098c0:	47b8      	blx	r7
 80098c2:	3001      	adds	r0, #1
 80098c4:	f43f ae97 	beq.w	80095f6 <_printf_float+0xbe>
 80098c8:	9a05      	ldr	r2, [sp, #20]
 80098ca:	f10b 0b01 	add.w	fp, fp, #1
 80098ce:	e7b9      	b.n	8009844 <_printf_float+0x30c>
 80098d0:	ee18 3a10 	vmov	r3, s16
 80098d4:	4652      	mov	r2, sl
 80098d6:	4631      	mov	r1, r6
 80098d8:	4628      	mov	r0, r5
 80098da:	47b8      	blx	r7
 80098dc:	3001      	adds	r0, #1
 80098de:	d1be      	bne.n	800985e <_printf_float+0x326>
 80098e0:	e689      	b.n	80095f6 <_printf_float+0xbe>
 80098e2:	9a05      	ldr	r2, [sp, #20]
 80098e4:	464b      	mov	r3, r9
 80098e6:	4442      	add	r2, r8
 80098e8:	4631      	mov	r1, r6
 80098ea:	4628      	mov	r0, r5
 80098ec:	47b8      	blx	r7
 80098ee:	3001      	adds	r0, #1
 80098f0:	d1c1      	bne.n	8009876 <_printf_float+0x33e>
 80098f2:	e680      	b.n	80095f6 <_printf_float+0xbe>
 80098f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098f6:	2a01      	cmp	r2, #1
 80098f8:	dc01      	bgt.n	80098fe <_printf_float+0x3c6>
 80098fa:	07db      	lsls	r3, r3, #31
 80098fc:	d53a      	bpl.n	8009974 <_printf_float+0x43c>
 80098fe:	2301      	movs	r3, #1
 8009900:	4642      	mov	r2, r8
 8009902:	4631      	mov	r1, r6
 8009904:	4628      	mov	r0, r5
 8009906:	47b8      	blx	r7
 8009908:	3001      	adds	r0, #1
 800990a:	f43f ae74 	beq.w	80095f6 <_printf_float+0xbe>
 800990e:	ee18 3a10 	vmov	r3, s16
 8009912:	4652      	mov	r2, sl
 8009914:	4631      	mov	r1, r6
 8009916:	4628      	mov	r0, r5
 8009918:	47b8      	blx	r7
 800991a:	3001      	adds	r0, #1
 800991c:	f43f ae6b 	beq.w	80095f6 <_printf_float+0xbe>
 8009920:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009924:	2200      	movs	r2, #0
 8009926:	2300      	movs	r3, #0
 8009928:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800992c:	f7f7 f8d4 	bl	8000ad8 <__aeabi_dcmpeq>
 8009930:	b9d8      	cbnz	r0, 800996a <_printf_float+0x432>
 8009932:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009936:	f108 0201 	add.w	r2, r8, #1
 800993a:	4631      	mov	r1, r6
 800993c:	4628      	mov	r0, r5
 800993e:	47b8      	blx	r7
 8009940:	3001      	adds	r0, #1
 8009942:	d10e      	bne.n	8009962 <_printf_float+0x42a>
 8009944:	e657      	b.n	80095f6 <_printf_float+0xbe>
 8009946:	2301      	movs	r3, #1
 8009948:	4652      	mov	r2, sl
 800994a:	4631      	mov	r1, r6
 800994c:	4628      	mov	r0, r5
 800994e:	47b8      	blx	r7
 8009950:	3001      	adds	r0, #1
 8009952:	f43f ae50 	beq.w	80095f6 <_printf_float+0xbe>
 8009956:	f108 0801 	add.w	r8, r8, #1
 800995a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800995c:	3b01      	subs	r3, #1
 800995e:	4543      	cmp	r3, r8
 8009960:	dcf1      	bgt.n	8009946 <_printf_float+0x40e>
 8009962:	464b      	mov	r3, r9
 8009964:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009968:	e6da      	b.n	8009720 <_printf_float+0x1e8>
 800996a:	f04f 0800 	mov.w	r8, #0
 800996e:	f104 0a1a 	add.w	sl, r4, #26
 8009972:	e7f2      	b.n	800995a <_printf_float+0x422>
 8009974:	2301      	movs	r3, #1
 8009976:	4642      	mov	r2, r8
 8009978:	e7df      	b.n	800993a <_printf_float+0x402>
 800997a:	2301      	movs	r3, #1
 800997c:	464a      	mov	r2, r9
 800997e:	4631      	mov	r1, r6
 8009980:	4628      	mov	r0, r5
 8009982:	47b8      	blx	r7
 8009984:	3001      	adds	r0, #1
 8009986:	f43f ae36 	beq.w	80095f6 <_printf_float+0xbe>
 800998a:	f108 0801 	add.w	r8, r8, #1
 800998e:	68e3      	ldr	r3, [r4, #12]
 8009990:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009992:	1a5b      	subs	r3, r3, r1
 8009994:	4543      	cmp	r3, r8
 8009996:	dcf0      	bgt.n	800997a <_printf_float+0x442>
 8009998:	e6f8      	b.n	800978c <_printf_float+0x254>
 800999a:	f04f 0800 	mov.w	r8, #0
 800999e:	f104 0919 	add.w	r9, r4, #25
 80099a2:	e7f4      	b.n	800998e <_printf_float+0x456>

080099a4 <_printf_common>:
 80099a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099a8:	4616      	mov	r6, r2
 80099aa:	4699      	mov	r9, r3
 80099ac:	688a      	ldr	r2, [r1, #8]
 80099ae:	690b      	ldr	r3, [r1, #16]
 80099b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099b4:	4293      	cmp	r3, r2
 80099b6:	bfb8      	it	lt
 80099b8:	4613      	movlt	r3, r2
 80099ba:	6033      	str	r3, [r6, #0]
 80099bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099c0:	4607      	mov	r7, r0
 80099c2:	460c      	mov	r4, r1
 80099c4:	b10a      	cbz	r2, 80099ca <_printf_common+0x26>
 80099c6:	3301      	adds	r3, #1
 80099c8:	6033      	str	r3, [r6, #0]
 80099ca:	6823      	ldr	r3, [r4, #0]
 80099cc:	0699      	lsls	r1, r3, #26
 80099ce:	bf42      	ittt	mi
 80099d0:	6833      	ldrmi	r3, [r6, #0]
 80099d2:	3302      	addmi	r3, #2
 80099d4:	6033      	strmi	r3, [r6, #0]
 80099d6:	6825      	ldr	r5, [r4, #0]
 80099d8:	f015 0506 	ands.w	r5, r5, #6
 80099dc:	d106      	bne.n	80099ec <_printf_common+0x48>
 80099de:	f104 0a19 	add.w	sl, r4, #25
 80099e2:	68e3      	ldr	r3, [r4, #12]
 80099e4:	6832      	ldr	r2, [r6, #0]
 80099e6:	1a9b      	subs	r3, r3, r2
 80099e8:	42ab      	cmp	r3, r5
 80099ea:	dc26      	bgt.n	8009a3a <_printf_common+0x96>
 80099ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80099f0:	1e13      	subs	r3, r2, #0
 80099f2:	6822      	ldr	r2, [r4, #0]
 80099f4:	bf18      	it	ne
 80099f6:	2301      	movne	r3, #1
 80099f8:	0692      	lsls	r2, r2, #26
 80099fa:	d42b      	bmi.n	8009a54 <_printf_common+0xb0>
 80099fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a00:	4649      	mov	r1, r9
 8009a02:	4638      	mov	r0, r7
 8009a04:	47c0      	blx	r8
 8009a06:	3001      	adds	r0, #1
 8009a08:	d01e      	beq.n	8009a48 <_printf_common+0xa4>
 8009a0a:	6823      	ldr	r3, [r4, #0]
 8009a0c:	6922      	ldr	r2, [r4, #16]
 8009a0e:	f003 0306 	and.w	r3, r3, #6
 8009a12:	2b04      	cmp	r3, #4
 8009a14:	bf02      	ittt	eq
 8009a16:	68e5      	ldreq	r5, [r4, #12]
 8009a18:	6833      	ldreq	r3, [r6, #0]
 8009a1a:	1aed      	subeq	r5, r5, r3
 8009a1c:	68a3      	ldr	r3, [r4, #8]
 8009a1e:	bf0c      	ite	eq
 8009a20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a24:	2500      	movne	r5, #0
 8009a26:	4293      	cmp	r3, r2
 8009a28:	bfc4      	itt	gt
 8009a2a:	1a9b      	subgt	r3, r3, r2
 8009a2c:	18ed      	addgt	r5, r5, r3
 8009a2e:	2600      	movs	r6, #0
 8009a30:	341a      	adds	r4, #26
 8009a32:	42b5      	cmp	r5, r6
 8009a34:	d11a      	bne.n	8009a6c <_printf_common+0xc8>
 8009a36:	2000      	movs	r0, #0
 8009a38:	e008      	b.n	8009a4c <_printf_common+0xa8>
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	4652      	mov	r2, sl
 8009a3e:	4649      	mov	r1, r9
 8009a40:	4638      	mov	r0, r7
 8009a42:	47c0      	blx	r8
 8009a44:	3001      	adds	r0, #1
 8009a46:	d103      	bne.n	8009a50 <_printf_common+0xac>
 8009a48:	f04f 30ff 	mov.w	r0, #4294967295
 8009a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a50:	3501      	adds	r5, #1
 8009a52:	e7c6      	b.n	80099e2 <_printf_common+0x3e>
 8009a54:	18e1      	adds	r1, r4, r3
 8009a56:	1c5a      	adds	r2, r3, #1
 8009a58:	2030      	movs	r0, #48	; 0x30
 8009a5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a5e:	4422      	add	r2, r4
 8009a60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a68:	3302      	adds	r3, #2
 8009a6a:	e7c7      	b.n	80099fc <_printf_common+0x58>
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	4622      	mov	r2, r4
 8009a70:	4649      	mov	r1, r9
 8009a72:	4638      	mov	r0, r7
 8009a74:	47c0      	blx	r8
 8009a76:	3001      	adds	r0, #1
 8009a78:	d0e6      	beq.n	8009a48 <_printf_common+0xa4>
 8009a7a:	3601      	adds	r6, #1
 8009a7c:	e7d9      	b.n	8009a32 <_printf_common+0x8e>
	...

08009a80 <_printf_i>:
 8009a80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a84:	7e0f      	ldrb	r7, [r1, #24]
 8009a86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a88:	2f78      	cmp	r7, #120	; 0x78
 8009a8a:	4691      	mov	r9, r2
 8009a8c:	4680      	mov	r8, r0
 8009a8e:	460c      	mov	r4, r1
 8009a90:	469a      	mov	sl, r3
 8009a92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a96:	d807      	bhi.n	8009aa8 <_printf_i+0x28>
 8009a98:	2f62      	cmp	r7, #98	; 0x62
 8009a9a:	d80a      	bhi.n	8009ab2 <_printf_i+0x32>
 8009a9c:	2f00      	cmp	r7, #0
 8009a9e:	f000 80d4 	beq.w	8009c4a <_printf_i+0x1ca>
 8009aa2:	2f58      	cmp	r7, #88	; 0x58
 8009aa4:	f000 80c0 	beq.w	8009c28 <_printf_i+0x1a8>
 8009aa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009aac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ab0:	e03a      	b.n	8009b28 <_printf_i+0xa8>
 8009ab2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ab6:	2b15      	cmp	r3, #21
 8009ab8:	d8f6      	bhi.n	8009aa8 <_printf_i+0x28>
 8009aba:	a101      	add	r1, pc, #4	; (adr r1, 8009ac0 <_printf_i+0x40>)
 8009abc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ac0:	08009b19 	.word	0x08009b19
 8009ac4:	08009b2d 	.word	0x08009b2d
 8009ac8:	08009aa9 	.word	0x08009aa9
 8009acc:	08009aa9 	.word	0x08009aa9
 8009ad0:	08009aa9 	.word	0x08009aa9
 8009ad4:	08009aa9 	.word	0x08009aa9
 8009ad8:	08009b2d 	.word	0x08009b2d
 8009adc:	08009aa9 	.word	0x08009aa9
 8009ae0:	08009aa9 	.word	0x08009aa9
 8009ae4:	08009aa9 	.word	0x08009aa9
 8009ae8:	08009aa9 	.word	0x08009aa9
 8009aec:	08009c31 	.word	0x08009c31
 8009af0:	08009b59 	.word	0x08009b59
 8009af4:	08009beb 	.word	0x08009beb
 8009af8:	08009aa9 	.word	0x08009aa9
 8009afc:	08009aa9 	.word	0x08009aa9
 8009b00:	08009c53 	.word	0x08009c53
 8009b04:	08009aa9 	.word	0x08009aa9
 8009b08:	08009b59 	.word	0x08009b59
 8009b0c:	08009aa9 	.word	0x08009aa9
 8009b10:	08009aa9 	.word	0x08009aa9
 8009b14:	08009bf3 	.word	0x08009bf3
 8009b18:	682b      	ldr	r3, [r5, #0]
 8009b1a:	1d1a      	adds	r2, r3, #4
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	602a      	str	r2, [r5, #0]
 8009b20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b28:	2301      	movs	r3, #1
 8009b2a:	e09f      	b.n	8009c6c <_printf_i+0x1ec>
 8009b2c:	6820      	ldr	r0, [r4, #0]
 8009b2e:	682b      	ldr	r3, [r5, #0]
 8009b30:	0607      	lsls	r7, r0, #24
 8009b32:	f103 0104 	add.w	r1, r3, #4
 8009b36:	6029      	str	r1, [r5, #0]
 8009b38:	d501      	bpl.n	8009b3e <_printf_i+0xbe>
 8009b3a:	681e      	ldr	r6, [r3, #0]
 8009b3c:	e003      	b.n	8009b46 <_printf_i+0xc6>
 8009b3e:	0646      	lsls	r6, r0, #25
 8009b40:	d5fb      	bpl.n	8009b3a <_printf_i+0xba>
 8009b42:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009b46:	2e00      	cmp	r6, #0
 8009b48:	da03      	bge.n	8009b52 <_printf_i+0xd2>
 8009b4a:	232d      	movs	r3, #45	; 0x2d
 8009b4c:	4276      	negs	r6, r6
 8009b4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b52:	485a      	ldr	r0, [pc, #360]	; (8009cbc <_printf_i+0x23c>)
 8009b54:	230a      	movs	r3, #10
 8009b56:	e012      	b.n	8009b7e <_printf_i+0xfe>
 8009b58:	682b      	ldr	r3, [r5, #0]
 8009b5a:	6820      	ldr	r0, [r4, #0]
 8009b5c:	1d19      	adds	r1, r3, #4
 8009b5e:	6029      	str	r1, [r5, #0]
 8009b60:	0605      	lsls	r5, r0, #24
 8009b62:	d501      	bpl.n	8009b68 <_printf_i+0xe8>
 8009b64:	681e      	ldr	r6, [r3, #0]
 8009b66:	e002      	b.n	8009b6e <_printf_i+0xee>
 8009b68:	0641      	lsls	r1, r0, #25
 8009b6a:	d5fb      	bpl.n	8009b64 <_printf_i+0xe4>
 8009b6c:	881e      	ldrh	r6, [r3, #0]
 8009b6e:	4853      	ldr	r0, [pc, #332]	; (8009cbc <_printf_i+0x23c>)
 8009b70:	2f6f      	cmp	r7, #111	; 0x6f
 8009b72:	bf0c      	ite	eq
 8009b74:	2308      	moveq	r3, #8
 8009b76:	230a      	movne	r3, #10
 8009b78:	2100      	movs	r1, #0
 8009b7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b7e:	6865      	ldr	r5, [r4, #4]
 8009b80:	60a5      	str	r5, [r4, #8]
 8009b82:	2d00      	cmp	r5, #0
 8009b84:	bfa2      	ittt	ge
 8009b86:	6821      	ldrge	r1, [r4, #0]
 8009b88:	f021 0104 	bicge.w	r1, r1, #4
 8009b8c:	6021      	strge	r1, [r4, #0]
 8009b8e:	b90e      	cbnz	r6, 8009b94 <_printf_i+0x114>
 8009b90:	2d00      	cmp	r5, #0
 8009b92:	d04b      	beq.n	8009c2c <_printf_i+0x1ac>
 8009b94:	4615      	mov	r5, r2
 8009b96:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b9a:	fb03 6711 	mls	r7, r3, r1, r6
 8009b9e:	5dc7      	ldrb	r7, [r0, r7]
 8009ba0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ba4:	4637      	mov	r7, r6
 8009ba6:	42bb      	cmp	r3, r7
 8009ba8:	460e      	mov	r6, r1
 8009baa:	d9f4      	bls.n	8009b96 <_printf_i+0x116>
 8009bac:	2b08      	cmp	r3, #8
 8009bae:	d10b      	bne.n	8009bc8 <_printf_i+0x148>
 8009bb0:	6823      	ldr	r3, [r4, #0]
 8009bb2:	07de      	lsls	r6, r3, #31
 8009bb4:	d508      	bpl.n	8009bc8 <_printf_i+0x148>
 8009bb6:	6923      	ldr	r3, [r4, #16]
 8009bb8:	6861      	ldr	r1, [r4, #4]
 8009bba:	4299      	cmp	r1, r3
 8009bbc:	bfde      	ittt	le
 8009bbe:	2330      	movle	r3, #48	; 0x30
 8009bc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009bc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009bc8:	1b52      	subs	r2, r2, r5
 8009bca:	6122      	str	r2, [r4, #16]
 8009bcc:	f8cd a000 	str.w	sl, [sp]
 8009bd0:	464b      	mov	r3, r9
 8009bd2:	aa03      	add	r2, sp, #12
 8009bd4:	4621      	mov	r1, r4
 8009bd6:	4640      	mov	r0, r8
 8009bd8:	f7ff fee4 	bl	80099a4 <_printf_common>
 8009bdc:	3001      	adds	r0, #1
 8009bde:	d14a      	bne.n	8009c76 <_printf_i+0x1f6>
 8009be0:	f04f 30ff 	mov.w	r0, #4294967295
 8009be4:	b004      	add	sp, #16
 8009be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bea:	6823      	ldr	r3, [r4, #0]
 8009bec:	f043 0320 	orr.w	r3, r3, #32
 8009bf0:	6023      	str	r3, [r4, #0]
 8009bf2:	4833      	ldr	r0, [pc, #204]	; (8009cc0 <_printf_i+0x240>)
 8009bf4:	2778      	movs	r7, #120	; 0x78
 8009bf6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009bfa:	6823      	ldr	r3, [r4, #0]
 8009bfc:	6829      	ldr	r1, [r5, #0]
 8009bfe:	061f      	lsls	r7, r3, #24
 8009c00:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c04:	d402      	bmi.n	8009c0c <_printf_i+0x18c>
 8009c06:	065f      	lsls	r7, r3, #25
 8009c08:	bf48      	it	mi
 8009c0a:	b2b6      	uxthmi	r6, r6
 8009c0c:	07df      	lsls	r7, r3, #31
 8009c0e:	bf48      	it	mi
 8009c10:	f043 0320 	orrmi.w	r3, r3, #32
 8009c14:	6029      	str	r1, [r5, #0]
 8009c16:	bf48      	it	mi
 8009c18:	6023      	strmi	r3, [r4, #0]
 8009c1a:	b91e      	cbnz	r6, 8009c24 <_printf_i+0x1a4>
 8009c1c:	6823      	ldr	r3, [r4, #0]
 8009c1e:	f023 0320 	bic.w	r3, r3, #32
 8009c22:	6023      	str	r3, [r4, #0]
 8009c24:	2310      	movs	r3, #16
 8009c26:	e7a7      	b.n	8009b78 <_printf_i+0xf8>
 8009c28:	4824      	ldr	r0, [pc, #144]	; (8009cbc <_printf_i+0x23c>)
 8009c2a:	e7e4      	b.n	8009bf6 <_printf_i+0x176>
 8009c2c:	4615      	mov	r5, r2
 8009c2e:	e7bd      	b.n	8009bac <_printf_i+0x12c>
 8009c30:	682b      	ldr	r3, [r5, #0]
 8009c32:	6826      	ldr	r6, [r4, #0]
 8009c34:	6961      	ldr	r1, [r4, #20]
 8009c36:	1d18      	adds	r0, r3, #4
 8009c38:	6028      	str	r0, [r5, #0]
 8009c3a:	0635      	lsls	r5, r6, #24
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	d501      	bpl.n	8009c44 <_printf_i+0x1c4>
 8009c40:	6019      	str	r1, [r3, #0]
 8009c42:	e002      	b.n	8009c4a <_printf_i+0x1ca>
 8009c44:	0670      	lsls	r0, r6, #25
 8009c46:	d5fb      	bpl.n	8009c40 <_printf_i+0x1c0>
 8009c48:	8019      	strh	r1, [r3, #0]
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	6123      	str	r3, [r4, #16]
 8009c4e:	4615      	mov	r5, r2
 8009c50:	e7bc      	b.n	8009bcc <_printf_i+0x14c>
 8009c52:	682b      	ldr	r3, [r5, #0]
 8009c54:	1d1a      	adds	r2, r3, #4
 8009c56:	602a      	str	r2, [r5, #0]
 8009c58:	681d      	ldr	r5, [r3, #0]
 8009c5a:	6862      	ldr	r2, [r4, #4]
 8009c5c:	2100      	movs	r1, #0
 8009c5e:	4628      	mov	r0, r5
 8009c60:	f7f6 fabe 	bl	80001e0 <memchr>
 8009c64:	b108      	cbz	r0, 8009c6a <_printf_i+0x1ea>
 8009c66:	1b40      	subs	r0, r0, r5
 8009c68:	6060      	str	r0, [r4, #4]
 8009c6a:	6863      	ldr	r3, [r4, #4]
 8009c6c:	6123      	str	r3, [r4, #16]
 8009c6e:	2300      	movs	r3, #0
 8009c70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c74:	e7aa      	b.n	8009bcc <_printf_i+0x14c>
 8009c76:	6923      	ldr	r3, [r4, #16]
 8009c78:	462a      	mov	r2, r5
 8009c7a:	4649      	mov	r1, r9
 8009c7c:	4640      	mov	r0, r8
 8009c7e:	47d0      	blx	sl
 8009c80:	3001      	adds	r0, #1
 8009c82:	d0ad      	beq.n	8009be0 <_printf_i+0x160>
 8009c84:	6823      	ldr	r3, [r4, #0]
 8009c86:	079b      	lsls	r3, r3, #30
 8009c88:	d413      	bmi.n	8009cb2 <_printf_i+0x232>
 8009c8a:	68e0      	ldr	r0, [r4, #12]
 8009c8c:	9b03      	ldr	r3, [sp, #12]
 8009c8e:	4298      	cmp	r0, r3
 8009c90:	bfb8      	it	lt
 8009c92:	4618      	movlt	r0, r3
 8009c94:	e7a6      	b.n	8009be4 <_printf_i+0x164>
 8009c96:	2301      	movs	r3, #1
 8009c98:	4632      	mov	r2, r6
 8009c9a:	4649      	mov	r1, r9
 8009c9c:	4640      	mov	r0, r8
 8009c9e:	47d0      	blx	sl
 8009ca0:	3001      	adds	r0, #1
 8009ca2:	d09d      	beq.n	8009be0 <_printf_i+0x160>
 8009ca4:	3501      	adds	r5, #1
 8009ca6:	68e3      	ldr	r3, [r4, #12]
 8009ca8:	9903      	ldr	r1, [sp, #12]
 8009caa:	1a5b      	subs	r3, r3, r1
 8009cac:	42ab      	cmp	r3, r5
 8009cae:	dcf2      	bgt.n	8009c96 <_printf_i+0x216>
 8009cb0:	e7eb      	b.n	8009c8a <_printf_i+0x20a>
 8009cb2:	2500      	movs	r5, #0
 8009cb4:	f104 0619 	add.w	r6, r4, #25
 8009cb8:	e7f5      	b.n	8009ca6 <_printf_i+0x226>
 8009cba:	bf00      	nop
 8009cbc:	0800d67b 	.word	0x0800d67b
 8009cc0:	0800d68c 	.word	0x0800d68c

08009cc4 <_scanf_float>:
 8009cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc8:	b087      	sub	sp, #28
 8009cca:	4617      	mov	r7, r2
 8009ccc:	9303      	str	r3, [sp, #12]
 8009cce:	688b      	ldr	r3, [r1, #8]
 8009cd0:	1e5a      	subs	r2, r3, #1
 8009cd2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009cd6:	bf83      	ittte	hi
 8009cd8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009cdc:	195b      	addhi	r3, r3, r5
 8009cde:	9302      	strhi	r3, [sp, #8]
 8009ce0:	2300      	movls	r3, #0
 8009ce2:	bf86      	itte	hi
 8009ce4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009ce8:	608b      	strhi	r3, [r1, #8]
 8009cea:	9302      	strls	r3, [sp, #8]
 8009cec:	680b      	ldr	r3, [r1, #0]
 8009cee:	468b      	mov	fp, r1
 8009cf0:	2500      	movs	r5, #0
 8009cf2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009cf6:	f84b 3b1c 	str.w	r3, [fp], #28
 8009cfa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009cfe:	4680      	mov	r8, r0
 8009d00:	460c      	mov	r4, r1
 8009d02:	465e      	mov	r6, fp
 8009d04:	46aa      	mov	sl, r5
 8009d06:	46a9      	mov	r9, r5
 8009d08:	9501      	str	r5, [sp, #4]
 8009d0a:	68a2      	ldr	r2, [r4, #8]
 8009d0c:	b152      	cbz	r2, 8009d24 <_scanf_float+0x60>
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	2b4e      	cmp	r3, #78	; 0x4e
 8009d14:	d864      	bhi.n	8009de0 <_scanf_float+0x11c>
 8009d16:	2b40      	cmp	r3, #64	; 0x40
 8009d18:	d83c      	bhi.n	8009d94 <_scanf_float+0xd0>
 8009d1a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009d1e:	b2c8      	uxtb	r0, r1
 8009d20:	280e      	cmp	r0, #14
 8009d22:	d93a      	bls.n	8009d9a <_scanf_float+0xd6>
 8009d24:	f1b9 0f00 	cmp.w	r9, #0
 8009d28:	d003      	beq.n	8009d32 <_scanf_float+0x6e>
 8009d2a:	6823      	ldr	r3, [r4, #0]
 8009d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d30:	6023      	str	r3, [r4, #0]
 8009d32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d36:	f1ba 0f01 	cmp.w	sl, #1
 8009d3a:	f200 8113 	bhi.w	8009f64 <_scanf_float+0x2a0>
 8009d3e:	455e      	cmp	r6, fp
 8009d40:	f200 8105 	bhi.w	8009f4e <_scanf_float+0x28a>
 8009d44:	2501      	movs	r5, #1
 8009d46:	4628      	mov	r0, r5
 8009d48:	b007      	add	sp, #28
 8009d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d4e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009d52:	2a0d      	cmp	r2, #13
 8009d54:	d8e6      	bhi.n	8009d24 <_scanf_float+0x60>
 8009d56:	a101      	add	r1, pc, #4	; (adr r1, 8009d5c <_scanf_float+0x98>)
 8009d58:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009d5c:	08009e9b 	.word	0x08009e9b
 8009d60:	08009d25 	.word	0x08009d25
 8009d64:	08009d25 	.word	0x08009d25
 8009d68:	08009d25 	.word	0x08009d25
 8009d6c:	08009efb 	.word	0x08009efb
 8009d70:	08009ed3 	.word	0x08009ed3
 8009d74:	08009d25 	.word	0x08009d25
 8009d78:	08009d25 	.word	0x08009d25
 8009d7c:	08009ea9 	.word	0x08009ea9
 8009d80:	08009d25 	.word	0x08009d25
 8009d84:	08009d25 	.word	0x08009d25
 8009d88:	08009d25 	.word	0x08009d25
 8009d8c:	08009d25 	.word	0x08009d25
 8009d90:	08009e61 	.word	0x08009e61
 8009d94:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009d98:	e7db      	b.n	8009d52 <_scanf_float+0x8e>
 8009d9a:	290e      	cmp	r1, #14
 8009d9c:	d8c2      	bhi.n	8009d24 <_scanf_float+0x60>
 8009d9e:	a001      	add	r0, pc, #4	; (adr r0, 8009da4 <_scanf_float+0xe0>)
 8009da0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009da4:	08009e53 	.word	0x08009e53
 8009da8:	08009d25 	.word	0x08009d25
 8009dac:	08009e53 	.word	0x08009e53
 8009db0:	08009ee7 	.word	0x08009ee7
 8009db4:	08009d25 	.word	0x08009d25
 8009db8:	08009e01 	.word	0x08009e01
 8009dbc:	08009e3d 	.word	0x08009e3d
 8009dc0:	08009e3d 	.word	0x08009e3d
 8009dc4:	08009e3d 	.word	0x08009e3d
 8009dc8:	08009e3d 	.word	0x08009e3d
 8009dcc:	08009e3d 	.word	0x08009e3d
 8009dd0:	08009e3d 	.word	0x08009e3d
 8009dd4:	08009e3d 	.word	0x08009e3d
 8009dd8:	08009e3d 	.word	0x08009e3d
 8009ddc:	08009e3d 	.word	0x08009e3d
 8009de0:	2b6e      	cmp	r3, #110	; 0x6e
 8009de2:	d809      	bhi.n	8009df8 <_scanf_float+0x134>
 8009de4:	2b60      	cmp	r3, #96	; 0x60
 8009de6:	d8b2      	bhi.n	8009d4e <_scanf_float+0x8a>
 8009de8:	2b54      	cmp	r3, #84	; 0x54
 8009dea:	d077      	beq.n	8009edc <_scanf_float+0x218>
 8009dec:	2b59      	cmp	r3, #89	; 0x59
 8009dee:	d199      	bne.n	8009d24 <_scanf_float+0x60>
 8009df0:	2d07      	cmp	r5, #7
 8009df2:	d197      	bne.n	8009d24 <_scanf_float+0x60>
 8009df4:	2508      	movs	r5, #8
 8009df6:	e029      	b.n	8009e4c <_scanf_float+0x188>
 8009df8:	2b74      	cmp	r3, #116	; 0x74
 8009dfa:	d06f      	beq.n	8009edc <_scanf_float+0x218>
 8009dfc:	2b79      	cmp	r3, #121	; 0x79
 8009dfe:	e7f6      	b.n	8009dee <_scanf_float+0x12a>
 8009e00:	6821      	ldr	r1, [r4, #0]
 8009e02:	05c8      	lsls	r0, r1, #23
 8009e04:	d51a      	bpl.n	8009e3c <_scanf_float+0x178>
 8009e06:	9b02      	ldr	r3, [sp, #8]
 8009e08:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009e0c:	6021      	str	r1, [r4, #0]
 8009e0e:	f109 0901 	add.w	r9, r9, #1
 8009e12:	b11b      	cbz	r3, 8009e1c <_scanf_float+0x158>
 8009e14:	3b01      	subs	r3, #1
 8009e16:	3201      	adds	r2, #1
 8009e18:	9302      	str	r3, [sp, #8]
 8009e1a:	60a2      	str	r2, [r4, #8]
 8009e1c:	68a3      	ldr	r3, [r4, #8]
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	60a3      	str	r3, [r4, #8]
 8009e22:	6923      	ldr	r3, [r4, #16]
 8009e24:	3301      	adds	r3, #1
 8009e26:	6123      	str	r3, [r4, #16]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	607b      	str	r3, [r7, #4]
 8009e30:	f340 8084 	ble.w	8009f3c <_scanf_float+0x278>
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	3301      	adds	r3, #1
 8009e38:	603b      	str	r3, [r7, #0]
 8009e3a:	e766      	b.n	8009d0a <_scanf_float+0x46>
 8009e3c:	eb1a 0f05 	cmn.w	sl, r5
 8009e40:	f47f af70 	bne.w	8009d24 <_scanf_float+0x60>
 8009e44:	6822      	ldr	r2, [r4, #0]
 8009e46:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009e4a:	6022      	str	r2, [r4, #0]
 8009e4c:	f806 3b01 	strb.w	r3, [r6], #1
 8009e50:	e7e4      	b.n	8009e1c <_scanf_float+0x158>
 8009e52:	6822      	ldr	r2, [r4, #0]
 8009e54:	0610      	lsls	r0, r2, #24
 8009e56:	f57f af65 	bpl.w	8009d24 <_scanf_float+0x60>
 8009e5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e5e:	e7f4      	b.n	8009e4a <_scanf_float+0x186>
 8009e60:	f1ba 0f00 	cmp.w	sl, #0
 8009e64:	d10e      	bne.n	8009e84 <_scanf_float+0x1c0>
 8009e66:	f1b9 0f00 	cmp.w	r9, #0
 8009e6a:	d10e      	bne.n	8009e8a <_scanf_float+0x1c6>
 8009e6c:	6822      	ldr	r2, [r4, #0]
 8009e6e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009e72:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009e76:	d108      	bne.n	8009e8a <_scanf_float+0x1c6>
 8009e78:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009e7c:	6022      	str	r2, [r4, #0]
 8009e7e:	f04f 0a01 	mov.w	sl, #1
 8009e82:	e7e3      	b.n	8009e4c <_scanf_float+0x188>
 8009e84:	f1ba 0f02 	cmp.w	sl, #2
 8009e88:	d055      	beq.n	8009f36 <_scanf_float+0x272>
 8009e8a:	2d01      	cmp	r5, #1
 8009e8c:	d002      	beq.n	8009e94 <_scanf_float+0x1d0>
 8009e8e:	2d04      	cmp	r5, #4
 8009e90:	f47f af48 	bne.w	8009d24 <_scanf_float+0x60>
 8009e94:	3501      	adds	r5, #1
 8009e96:	b2ed      	uxtb	r5, r5
 8009e98:	e7d8      	b.n	8009e4c <_scanf_float+0x188>
 8009e9a:	f1ba 0f01 	cmp.w	sl, #1
 8009e9e:	f47f af41 	bne.w	8009d24 <_scanf_float+0x60>
 8009ea2:	f04f 0a02 	mov.w	sl, #2
 8009ea6:	e7d1      	b.n	8009e4c <_scanf_float+0x188>
 8009ea8:	b97d      	cbnz	r5, 8009eca <_scanf_float+0x206>
 8009eaa:	f1b9 0f00 	cmp.w	r9, #0
 8009eae:	f47f af3c 	bne.w	8009d2a <_scanf_float+0x66>
 8009eb2:	6822      	ldr	r2, [r4, #0]
 8009eb4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009eb8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009ebc:	f47f af39 	bne.w	8009d32 <_scanf_float+0x6e>
 8009ec0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009ec4:	6022      	str	r2, [r4, #0]
 8009ec6:	2501      	movs	r5, #1
 8009ec8:	e7c0      	b.n	8009e4c <_scanf_float+0x188>
 8009eca:	2d03      	cmp	r5, #3
 8009ecc:	d0e2      	beq.n	8009e94 <_scanf_float+0x1d0>
 8009ece:	2d05      	cmp	r5, #5
 8009ed0:	e7de      	b.n	8009e90 <_scanf_float+0x1cc>
 8009ed2:	2d02      	cmp	r5, #2
 8009ed4:	f47f af26 	bne.w	8009d24 <_scanf_float+0x60>
 8009ed8:	2503      	movs	r5, #3
 8009eda:	e7b7      	b.n	8009e4c <_scanf_float+0x188>
 8009edc:	2d06      	cmp	r5, #6
 8009ede:	f47f af21 	bne.w	8009d24 <_scanf_float+0x60>
 8009ee2:	2507      	movs	r5, #7
 8009ee4:	e7b2      	b.n	8009e4c <_scanf_float+0x188>
 8009ee6:	6822      	ldr	r2, [r4, #0]
 8009ee8:	0591      	lsls	r1, r2, #22
 8009eea:	f57f af1b 	bpl.w	8009d24 <_scanf_float+0x60>
 8009eee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009ef2:	6022      	str	r2, [r4, #0]
 8009ef4:	f8cd 9004 	str.w	r9, [sp, #4]
 8009ef8:	e7a8      	b.n	8009e4c <_scanf_float+0x188>
 8009efa:	6822      	ldr	r2, [r4, #0]
 8009efc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009f00:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009f04:	d006      	beq.n	8009f14 <_scanf_float+0x250>
 8009f06:	0550      	lsls	r0, r2, #21
 8009f08:	f57f af0c 	bpl.w	8009d24 <_scanf_float+0x60>
 8009f0c:	f1b9 0f00 	cmp.w	r9, #0
 8009f10:	f43f af0f 	beq.w	8009d32 <_scanf_float+0x6e>
 8009f14:	0591      	lsls	r1, r2, #22
 8009f16:	bf58      	it	pl
 8009f18:	9901      	ldrpl	r1, [sp, #4]
 8009f1a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009f1e:	bf58      	it	pl
 8009f20:	eba9 0101 	subpl.w	r1, r9, r1
 8009f24:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009f28:	bf58      	it	pl
 8009f2a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009f2e:	6022      	str	r2, [r4, #0]
 8009f30:	f04f 0900 	mov.w	r9, #0
 8009f34:	e78a      	b.n	8009e4c <_scanf_float+0x188>
 8009f36:	f04f 0a03 	mov.w	sl, #3
 8009f3a:	e787      	b.n	8009e4c <_scanf_float+0x188>
 8009f3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009f40:	4639      	mov	r1, r7
 8009f42:	4640      	mov	r0, r8
 8009f44:	4798      	blx	r3
 8009f46:	2800      	cmp	r0, #0
 8009f48:	f43f aedf 	beq.w	8009d0a <_scanf_float+0x46>
 8009f4c:	e6ea      	b.n	8009d24 <_scanf_float+0x60>
 8009f4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009f56:	463a      	mov	r2, r7
 8009f58:	4640      	mov	r0, r8
 8009f5a:	4798      	blx	r3
 8009f5c:	6923      	ldr	r3, [r4, #16]
 8009f5e:	3b01      	subs	r3, #1
 8009f60:	6123      	str	r3, [r4, #16]
 8009f62:	e6ec      	b.n	8009d3e <_scanf_float+0x7a>
 8009f64:	1e6b      	subs	r3, r5, #1
 8009f66:	2b06      	cmp	r3, #6
 8009f68:	d825      	bhi.n	8009fb6 <_scanf_float+0x2f2>
 8009f6a:	2d02      	cmp	r5, #2
 8009f6c:	d836      	bhi.n	8009fdc <_scanf_float+0x318>
 8009f6e:	455e      	cmp	r6, fp
 8009f70:	f67f aee8 	bls.w	8009d44 <_scanf_float+0x80>
 8009f74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f78:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009f7c:	463a      	mov	r2, r7
 8009f7e:	4640      	mov	r0, r8
 8009f80:	4798      	blx	r3
 8009f82:	6923      	ldr	r3, [r4, #16]
 8009f84:	3b01      	subs	r3, #1
 8009f86:	6123      	str	r3, [r4, #16]
 8009f88:	e7f1      	b.n	8009f6e <_scanf_float+0x2aa>
 8009f8a:	9802      	ldr	r0, [sp, #8]
 8009f8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f90:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009f94:	9002      	str	r0, [sp, #8]
 8009f96:	463a      	mov	r2, r7
 8009f98:	4640      	mov	r0, r8
 8009f9a:	4798      	blx	r3
 8009f9c:	6923      	ldr	r3, [r4, #16]
 8009f9e:	3b01      	subs	r3, #1
 8009fa0:	6123      	str	r3, [r4, #16]
 8009fa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009fa6:	fa5f fa8a 	uxtb.w	sl, sl
 8009faa:	f1ba 0f02 	cmp.w	sl, #2
 8009fae:	d1ec      	bne.n	8009f8a <_scanf_float+0x2c6>
 8009fb0:	3d03      	subs	r5, #3
 8009fb2:	b2ed      	uxtb	r5, r5
 8009fb4:	1b76      	subs	r6, r6, r5
 8009fb6:	6823      	ldr	r3, [r4, #0]
 8009fb8:	05da      	lsls	r2, r3, #23
 8009fba:	d52f      	bpl.n	800a01c <_scanf_float+0x358>
 8009fbc:	055b      	lsls	r3, r3, #21
 8009fbe:	d510      	bpl.n	8009fe2 <_scanf_float+0x31e>
 8009fc0:	455e      	cmp	r6, fp
 8009fc2:	f67f aebf 	bls.w	8009d44 <_scanf_float+0x80>
 8009fc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009fca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009fce:	463a      	mov	r2, r7
 8009fd0:	4640      	mov	r0, r8
 8009fd2:	4798      	blx	r3
 8009fd4:	6923      	ldr	r3, [r4, #16]
 8009fd6:	3b01      	subs	r3, #1
 8009fd8:	6123      	str	r3, [r4, #16]
 8009fda:	e7f1      	b.n	8009fc0 <_scanf_float+0x2fc>
 8009fdc:	46aa      	mov	sl, r5
 8009fde:	9602      	str	r6, [sp, #8]
 8009fe0:	e7df      	b.n	8009fa2 <_scanf_float+0x2de>
 8009fe2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009fe6:	6923      	ldr	r3, [r4, #16]
 8009fe8:	2965      	cmp	r1, #101	; 0x65
 8009fea:	f103 33ff 	add.w	r3, r3, #4294967295
 8009fee:	f106 35ff 	add.w	r5, r6, #4294967295
 8009ff2:	6123      	str	r3, [r4, #16]
 8009ff4:	d00c      	beq.n	800a010 <_scanf_float+0x34c>
 8009ff6:	2945      	cmp	r1, #69	; 0x45
 8009ff8:	d00a      	beq.n	800a010 <_scanf_float+0x34c>
 8009ffa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ffe:	463a      	mov	r2, r7
 800a000:	4640      	mov	r0, r8
 800a002:	4798      	blx	r3
 800a004:	6923      	ldr	r3, [r4, #16]
 800a006:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a00a:	3b01      	subs	r3, #1
 800a00c:	1eb5      	subs	r5, r6, #2
 800a00e:	6123      	str	r3, [r4, #16]
 800a010:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a014:	463a      	mov	r2, r7
 800a016:	4640      	mov	r0, r8
 800a018:	4798      	blx	r3
 800a01a:	462e      	mov	r6, r5
 800a01c:	6825      	ldr	r5, [r4, #0]
 800a01e:	f015 0510 	ands.w	r5, r5, #16
 800a022:	d158      	bne.n	800a0d6 <_scanf_float+0x412>
 800a024:	7035      	strb	r5, [r6, #0]
 800a026:	6823      	ldr	r3, [r4, #0]
 800a028:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a02c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a030:	d11c      	bne.n	800a06c <_scanf_float+0x3a8>
 800a032:	9b01      	ldr	r3, [sp, #4]
 800a034:	454b      	cmp	r3, r9
 800a036:	eba3 0209 	sub.w	r2, r3, r9
 800a03a:	d124      	bne.n	800a086 <_scanf_float+0x3c2>
 800a03c:	2200      	movs	r2, #0
 800a03e:	4659      	mov	r1, fp
 800a040:	4640      	mov	r0, r8
 800a042:	f7ff f8d5 	bl	80091f0 <_strtod_r>
 800a046:	9b03      	ldr	r3, [sp, #12]
 800a048:	6821      	ldr	r1, [r4, #0]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f011 0f02 	tst.w	r1, #2
 800a050:	ec57 6b10 	vmov	r6, r7, d0
 800a054:	f103 0204 	add.w	r2, r3, #4
 800a058:	d020      	beq.n	800a09c <_scanf_float+0x3d8>
 800a05a:	9903      	ldr	r1, [sp, #12]
 800a05c:	600a      	str	r2, [r1, #0]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	e9c3 6700 	strd	r6, r7, [r3]
 800a064:	68e3      	ldr	r3, [r4, #12]
 800a066:	3301      	adds	r3, #1
 800a068:	60e3      	str	r3, [r4, #12]
 800a06a:	e66c      	b.n	8009d46 <_scanf_float+0x82>
 800a06c:	9b04      	ldr	r3, [sp, #16]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d0e4      	beq.n	800a03c <_scanf_float+0x378>
 800a072:	9905      	ldr	r1, [sp, #20]
 800a074:	230a      	movs	r3, #10
 800a076:	462a      	mov	r2, r5
 800a078:	3101      	adds	r1, #1
 800a07a:	4640      	mov	r0, r8
 800a07c:	f7ff f9a6 	bl	80093cc <_strtol_r>
 800a080:	9b04      	ldr	r3, [sp, #16]
 800a082:	9e05      	ldr	r6, [sp, #20]
 800a084:	1ac2      	subs	r2, r0, r3
 800a086:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a08a:	429e      	cmp	r6, r3
 800a08c:	bf28      	it	cs
 800a08e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a092:	4912      	ldr	r1, [pc, #72]	; (800a0dc <_scanf_float+0x418>)
 800a094:	4630      	mov	r0, r6
 800a096:	f000 f8e7 	bl	800a268 <siprintf>
 800a09a:	e7cf      	b.n	800a03c <_scanf_float+0x378>
 800a09c:	f011 0f04 	tst.w	r1, #4
 800a0a0:	9903      	ldr	r1, [sp, #12]
 800a0a2:	600a      	str	r2, [r1, #0]
 800a0a4:	d1db      	bne.n	800a05e <_scanf_float+0x39a>
 800a0a6:	f8d3 8000 	ldr.w	r8, [r3]
 800a0aa:	ee10 2a10 	vmov	r2, s0
 800a0ae:	ee10 0a10 	vmov	r0, s0
 800a0b2:	463b      	mov	r3, r7
 800a0b4:	4639      	mov	r1, r7
 800a0b6:	f7f6 fd41 	bl	8000b3c <__aeabi_dcmpun>
 800a0ba:	b128      	cbz	r0, 800a0c8 <_scanf_float+0x404>
 800a0bc:	4808      	ldr	r0, [pc, #32]	; (800a0e0 <_scanf_float+0x41c>)
 800a0be:	f000 f9f3 	bl	800a4a8 <nanf>
 800a0c2:	ed88 0a00 	vstr	s0, [r8]
 800a0c6:	e7cd      	b.n	800a064 <_scanf_float+0x3a0>
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	4639      	mov	r1, r7
 800a0cc:	f7f6 fd94 	bl	8000bf8 <__aeabi_d2f>
 800a0d0:	f8c8 0000 	str.w	r0, [r8]
 800a0d4:	e7c6      	b.n	800a064 <_scanf_float+0x3a0>
 800a0d6:	2500      	movs	r5, #0
 800a0d8:	e635      	b.n	8009d46 <_scanf_float+0x82>
 800a0da:	bf00      	nop
 800a0dc:	0800d69d 	.word	0x0800d69d
 800a0e0:	0800d938 	.word	0x0800d938

0800a0e4 <std>:
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	b510      	push	{r4, lr}
 800a0e8:	4604      	mov	r4, r0
 800a0ea:	e9c0 3300 	strd	r3, r3, [r0]
 800a0ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a0f2:	6083      	str	r3, [r0, #8]
 800a0f4:	8181      	strh	r1, [r0, #12]
 800a0f6:	6643      	str	r3, [r0, #100]	; 0x64
 800a0f8:	81c2      	strh	r2, [r0, #14]
 800a0fa:	6183      	str	r3, [r0, #24]
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	2208      	movs	r2, #8
 800a100:	305c      	adds	r0, #92	; 0x5c
 800a102:	f000 f914 	bl	800a32e <memset>
 800a106:	4b0d      	ldr	r3, [pc, #52]	; (800a13c <std+0x58>)
 800a108:	6263      	str	r3, [r4, #36]	; 0x24
 800a10a:	4b0d      	ldr	r3, [pc, #52]	; (800a140 <std+0x5c>)
 800a10c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a10e:	4b0d      	ldr	r3, [pc, #52]	; (800a144 <std+0x60>)
 800a110:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a112:	4b0d      	ldr	r3, [pc, #52]	; (800a148 <std+0x64>)
 800a114:	6323      	str	r3, [r4, #48]	; 0x30
 800a116:	4b0d      	ldr	r3, [pc, #52]	; (800a14c <std+0x68>)
 800a118:	6224      	str	r4, [r4, #32]
 800a11a:	429c      	cmp	r4, r3
 800a11c:	d006      	beq.n	800a12c <std+0x48>
 800a11e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a122:	4294      	cmp	r4, r2
 800a124:	d002      	beq.n	800a12c <std+0x48>
 800a126:	33d0      	adds	r3, #208	; 0xd0
 800a128:	429c      	cmp	r4, r3
 800a12a:	d105      	bne.n	800a138 <std+0x54>
 800a12c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a134:	f000 b99c 	b.w	800a470 <__retarget_lock_init_recursive>
 800a138:	bd10      	pop	{r4, pc}
 800a13a:	bf00      	nop
 800a13c:	0800a2a9 	.word	0x0800a2a9
 800a140:	0800a2cb 	.word	0x0800a2cb
 800a144:	0800a303 	.word	0x0800a303
 800a148:	0800a327 	.word	0x0800a327
 800a14c:	20000764 	.word	0x20000764

0800a150 <stdio_exit_handler>:
 800a150:	4a02      	ldr	r2, [pc, #8]	; (800a15c <stdio_exit_handler+0xc>)
 800a152:	4903      	ldr	r1, [pc, #12]	; (800a160 <stdio_exit_handler+0x10>)
 800a154:	4803      	ldr	r0, [pc, #12]	; (800a164 <stdio_exit_handler+0x14>)
 800a156:	f000 b869 	b.w	800a22c <_fwalk_sglue>
 800a15a:	bf00      	nop
 800a15c:	20000078 	.word	0x20000078
 800a160:	0800c7b1 	.word	0x0800c7b1
 800a164:	200001f0 	.word	0x200001f0

0800a168 <cleanup_stdio>:
 800a168:	6841      	ldr	r1, [r0, #4]
 800a16a:	4b0c      	ldr	r3, [pc, #48]	; (800a19c <cleanup_stdio+0x34>)
 800a16c:	4299      	cmp	r1, r3
 800a16e:	b510      	push	{r4, lr}
 800a170:	4604      	mov	r4, r0
 800a172:	d001      	beq.n	800a178 <cleanup_stdio+0x10>
 800a174:	f002 fb1c 	bl	800c7b0 <_fflush_r>
 800a178:	68a1      	ldr	r1, [r4, #8]
 800a17a:	4b09      	ldr	r3, [pc, #36]	; (800a1a0 <cleanup_stdio+0x38>)
 800a17c:	4299      	cmp	r1, r3
 800a17e:	d002      	beq.n	800a186 <cleanup_stdio+0x1e>
 800a180:	4620      	mov	r0, r4
 800a182:	f002 fb15 	bl	800c7b0 <_fflush_r>
 800a186:	68e1      	ldr	r1, [r4, #12]
 800a188:	4b06      	ldr	r3, [pc, #24]	; (800a1a4 <cleanup_stdio+0x3c>)
 800a18a:	4299      	cmp	r1, r3
 800a18c:	d004      	beq.n	800a198 <cleanup_stdio+0x30>
 800a18e:	4620      	mov	r0, r4
 800a190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a194:	f002 bb0c 	b.w	800c7b0 <_fflush_r>
 800a198:	bd10      	pop	{r4, pc}
 800a19a:	bf00      	nop
 800a19c:	20000764 	.word	0x20000764
 800a1a0:	200007cc 	.word	0x200007cc
 800a1a4:	20000834 	.word	0x20000834

0800a1a8 <global_stdio_init.part.0>:
 800a1a8:	b510      	push	{r4, lr}
 800a1aa:	4b0b      	ldr	r3, [pc, #44]	; (800a1d8 <global_stdio_init.part.0+0x30>)
 800a1ac:	4c0b      	ldr	r4, [pc, #44]	; (800a1dc <global_stdio_init.part.0+0x34>)
 800a1ae:	4a0c      	ldr	r2, [pc, #48]	; (800a1e0 <global_stdio_init.part.0+0x38>)
 800a1b0:	601a      	str	r2, [r3, #0]
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	2104      	movs	r1, #4
 800a1b8:	f7ff ff94 	bl	800a0e4 <std>
 800a1bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	2109      	movs	r1, #9
 800a1c4:	f7ff ff8e 	bl	800a0e4 <std>
 800a1c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a1cc:	2202      	movs	r2, #2
 800a1ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1d2:	2112      	movs	r1, #18
 800a1d4:	f7ff bf86 	b.w	800a0e4 <std>
 800a1d8:	2000089c 	.word	0x2000089c
 800a1dc:	20000764 	.word	0x20000764
 800a1e0:	0800a151 	.word	0x0800a151

0800a1e4 <__sfp_lock_acquire>:
 800a1e4:	4801      	ldr	r0, [pc, #4]	; (800a1ec <__sfp_lock_acquire+0x8>)
 800a1e6:	f000 b944 	b.w	800a472 <__retarget_lock_acquire_recursive>
 800a1ea:	bf00      	nop
 800a1ec:	200008a5 	.word	0x200008a5

0800a1f0 <__sfp_lock_release>:
 800a1f0:	4801      	ldr	r0, [pc, #4]	; (800a1f8 <__sfp_lock_release+0x8>)
 800a1f2:	f000 b93f 	b.w	800a474 <__retarget_lock_release_recursive>
 800a1f6:	bf00      	nop
 800a1f8:	200008a5 	.word	0x200008a5

0800a1fc <__sinit>:
 800a1fc:	b510      	push	{r4, lr}
 800a1fe:	4604      	mov	r4, r0
 800a200:	f7ff fff0 	bl	800a1e4 <__sfp_lock_acquire>
 800a204:	6a23      	ldr	r3, [r4, #32]
 800a206:	b11b      	cbz	r3, 800a210 <__sinit+0x14>
 800a208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a20c:	f7ff bff0 	b.w	800a1f0 <__sfp_lock_release>
 800a210:	4b04      	ldr	r3, [pc, #16]	; (800a224 <__sinit+0x28>)
 800a212:	6223      	str	r3, [r4, #32]
 800a214:	4b04      	ldr	r3, [pc, #16]	; (800a228 <__sinit+0x2c>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1f5      	bne.n	800a208 <__sinit+0xc>
 800a21c:	f7ff ffc4 	bl	800a1a8 <global_stdio_init.part.0>
 800a220:	e7f2      	b.n	800a208 <__sinit+0xc>
 800a222:	bf00      	nop
 800a224:	0800a169 	.word	0x0800a169
 800a228:	2000089c 	.word	0x2000089c

0800a22c <_fwalk_sglue>:
 800a22c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a230:	4607      	mov	r7, r0
 800a232:	4688      	mov	r8, r1
 800a234:	4614      	mov	r4, r2
 800a236:	2600      	movs	r6, #0
 800a238:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a23c:	f1b9 0901 	subs.w	r9, r9, #1
 800a240:	d505      	bpl.n	800a24e <_fwalk_sglue+0x22>
 800a242:	6824      	ldr	r4, [r4, #0]
 800a244:	2c00      	cmp	r4, #0
 800a246:	d1f7      	bne.n	800a238 <_fwalk_sglue+0xc>
 800a248:	4630      	mov	r0, r6
 800a24a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a24e:	89ab      	ldrh	r3, [r5, #12]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d907      	bls.n	800a264 <_fwalk_sglue+0x38>
 800a254:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a258:	3301      	adds	r3, #1
 800a25a:	d003      	beq.n	800a264 <_fwalk_sglue+0x38>
 800a25c:	4629      	mov	r1, r5
 800a25e:	4638      	mov	r0, r7
 800a260:	47c0      	blx	r8
 800a262:	4306      	orrs	r6, r0
 800a264:	3568      	adds	r5, #104	; 0x68
 800a266:	e7e9      	b.n	800a23c <_fwalk_sglue+0x10>

0800a268 <siprintf>:
 800a268:	b40e      	push	{r1, r2, r3}
 800a26a:	b500      	push	{lr}
 800a26c:	b09c      	sub	sp, #112	; 0x70
 800a26e:	ab1d      	add	r3, sp, #116	; 0x74
 800a270:	9002      	str	r0, [sp, #8]
 800a272:	9006      	str	r0, [sp, #24]
 800a274:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a278:	4809      	ldr	r0, [pc, #36]	; (800a2a0 <siprintf+0x38>)
 800a27a:	9107      	str	r1, [sp, #28]
 800a27c:	9104      	str	r1, [sp, #16]
 800a27e:	4909      	ldr	r1, [pc, #36]	; (800a2a4 <siprintf+0x3c>)
 800a280:	f853 2b04 	ldr.w	r2, [r3], #4
 800a284:	9105      	str	r1, [sp, #20]
 800a286:	6800      	ldr	r0, [r0, #0]
 800a288:	9301      	str	r3, [sp, #4]
 800a28a:	a902      	add	r1, sp, #8
 800a28c:	f002 f90c 	bl	800c4a8 <_svfiprintf_r>
 800a290:	9b02      	ldr	r3, [sp, #8]
 800a292:	2200      	movs	r2, #0
 800a294:	701a      	strb	r2, [r3, #0]
 800a296:	b01c      	add	sp, #112	; 0x70
 800a298:	f85d eb04 	ldr.w	lr, [sp], #4
 800a29c:	b003      	add	sp, #12
 800a29e:	4770      	bx	lr
 800a2a0:	2000023c 	.word	0x2000023c
 800a2a4:	ffff0208 	.word	0xffff0208

0800a2a8 <__sread>:
 800a2a8:	b510      	push	{r4, lr}
 800a2aa:	460c      	mov	r4, r1
 800a2ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2b0:	f000 f890 	bl	800a3d4 <_read_r>
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	bfab      	itete	ge
 800a2b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a2ba:	89a3      	ldrhlt	r3, [r4, #12]
 800a2bc:	181b      	addge	r3, r3, r0
 800a2be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a2c2:	bfac      	ite	ge
 800a2c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a2c6:	81a3      	strhlt	r3, [r4, #12]
 800a2c8:	bd10      	pop	{r4, pc}

0800a2ca <__swrite>:
 800a2ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ce:	461f      	mov	r7, r3
 800a2d0:	898b      	ldrh	r3, [r1, #12]
 800a2d2:	05db      	lsls	r3, r3, #23
 800a2d4:	4605      	mov	r5, r0
 800a2d6:	460c      	mov	r4, r1
 800a2d8:	4616      	mov	r6, r2
 800a2da:	d505      	bpl.n	800a2e8 <__swrite+0x1e>
 800a2dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2e0:	2302      	movs	r3, #2
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f000 f864 	bl	800a3b0 <_lseek_r>
 800a2e8:	89a3      	ldrh	r3, [r4, #12]
 800a2ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2f2:	81a3      	strh	r3, [r4, #12]
 800a2f4:	4632      	mov	r2, r6
 800a2f6:	463b      	mov	r3, r7
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2fe:	f000 b87b 	b.w	800a3f8 <_write_r>

0800a302 <__sseek>:
 800a302:	b510      	push	{r4, lr}
 800a304:	460c      	mov	r4, r1
 800a306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a30a:	f000 f851 	bl	800a3b0 <_lseek_r>
 800a30e:	1c43      	adds	r3, r0, #1
 800a310:	89a3      	ldrh	r3, [r4, #12]
 800a312:	bf15      	itete	ne
 800a314:	6560      	strne	r0, [r4, #84]	; 0x54
 800a316:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a31a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a31e:	81a3      	strheq	r3, [r4, #12]
 800a320:	bf18      	it	ne
 800a322:	81a3      	strhne	r3, [r4, #12]
 800a324:	bd10      	pop	{r4, pc}

0800a326 <__sclose>:
 800a326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a32a:	f000 b831 	b.w	800a390 <_close_r>

0800a32e <memset>:
 800a32e:	4402      	add	r2, r0
 800a330:	4603      	mov	r3, r0
 800a332:	4293      	cmp	r3, r2
 800a334:	d100      	bne.n	800a338 <memset+0xa>
 800a336:	4770      	bx	lr
 800a338:	f803 1b01 	strb.w	r1, [r3], #1
 800a33c:	e7f9      	b.n	800a332 <memset+0x4>

0800a33e <strncmp>:
 800a33e:	b510      	push	{r4, lr}
 800a340:	b16a      	cbz	r2, 800a35e <strncmp+0x20>
 800a342:	3901      	subs	r1, #1
 800a344:	1884      	adds	r4, r0, r2
 800a346:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a34a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a34e:	429a      	cmp	r2, r3
 800a350:	d103      	bne.n	800a35a <strncmp+0x1c>
 800a352:	42a0      	cmp	r0, r4
 800a354:	d001      	beq.n	800a35a <strncmp+0x1c>
 800a356:	2a00      	cmp	r2, #0
 800a358:	d1f5      	bne.n	800a346 <strncmp+0x8>
 800a35a:	1ad0      	subs	r0, r2, r3
 800a35c:	bd10      	pop	{r4, pc}
 800a35e:	4610      	mov	r0, r2
 800a360:	e7fc      	b.n	800a35c <strncmp+0x1e>

0800a362 <strncpy>:
 800a362:	b510      	push	{r4, lr}
 800a364:	3901      	subs	r1, #1
 800a366:	4603      	mov	r3, r0
 800a368:	b132      	cbz	r2, 800a378 <strncpy+0x16>
 800a36a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a36e:	f803 4b01 	strb.w	r4, [r3], #1
 800a372:	3a01      	subs	r2, #1
 800a374:	2c00      	cmp	r4, #0
 800a376:	d1f7      	bne.n	800a368 <strncpy+0x6>
 800a378:	441a      	add	r2, r3
 800a37a:	2100      	movs	r1, #0
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d100      	bne.n	800a382 <strncpy+0x20>
 800a380:	bd10      	pop	{r4, pc}
 800a382:	f803 1b01 	strb.w	r1, [r3], #1
 800a386:	e7f9      	b.n	800a37c <strncpy+0x1a>

0800a388 <_localeconv_r>:
 800a388:	4800      	ldr	r0, [pc, #0]	; (800a38c <_localeconv_r+0x4>)
 800a38a:	4770      	bx	lr
 800a38c:	20000174 	.word	0x20000174

0800a390 <_close_r>:
 800a390:	b538      	push	{r3, r4, r5, lr}
 800a392:	4d06      	ldr	r5, [pc, #24]	; (800a3ac <_close_r+0x1c>)
 800a394:	2300      	movs	r3, #0
 800a396:	4604      	mov	r4, r0
 800a398:	4608      	mov	r0, r1
 800a39a:	602b      	str	r3, [r5, #0]
 800a39c:	f7fa fb0f 	bl	80049be <_close>
 800a3a0:	1c43      	adds	r3, r0, #1
 800a3a2:	d102      	bne.n	800a3aa <_close_r+0x1a>
 800a3a4:	682b      	ldr	r3, [r5, #0]
 800a3a6:	b103      	cbz	r3, 800a3aa <_close_r+0x1a>
 800a3a8:	6023      	str	r3, [r4, #0]
 800a3aa:	bd38      	pop	{r3, r4, r5, pc}
 800a3ac:	200008a0 	.word	0x200008a0

0800a3b0 <_lseek_r>:
 800a3b0:	b538      	push	{r3, r4, r5, lr}
 800a3b2:	4d07      	ldr	r5, [pc, #28]	; (800a3d0 <_lseek_r+0x20>)
 800a3b4:	4604      	mov	r4, r0
 800a3b6:	4608      	mov	r0, r1
 800a3b8:	4611      	mov	r1, r2
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	602a      	str	r2, [r5, #0]
 800a3be:	461a      	mov	r2, r3
 800a3c0:	f7fa fb24 	bl	8004a0c <_lseek>
 800a3c4:	1c43      	adds	r3, r0, #1
 800a3c6:	d102      	bne.n	800a3ce <_lseek_r+0x1e>
 800a3c8:	682b      	ldr	r3, [r5, #0]
 800a3ca:	b103      	cbz	r3, 800a3ce <_lseek_r+0x1e>
 800a3cc:	6023      	str	r3, [r4, #0]
 800a3ce:	bd38      	pop	{r3, r4, r5, pc}
 800a3d0:	200008a0 	.word	0x200008a0

0800a3d4 <_read_r>:
 800a3d4:	b538      	push	{r3, r4, r5, lr}
 800a3d6:	4d07      	ldr	r5, [pc, #28]	; (800a3f4 <_read_r+0x20>)
 800a3d8:	4604      	mov	r4, r0
 800a3da:	4608      	mov	r0, r1
 800a3dc:	4611      	mov	r1, r2
 800a3de:	2200      	movs	r2, #0
 800a3e0:	602a      	str	r2, [r5, #0]
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	f7fa fab2 	bl	800494c <_read>
 800a3e8:	1c43      	adds	r3, r0, #1
 800a3ea:	d102      	bne.n	800a3f2 <_read_r+0x1e>
 800a3ec:	682b      	ldr	r3, [r5, #0]
 800a3ee:	b103      	cbz	r3, 800a3f2 <_read_r+0x1e>
 800a3f0:	6023      	str	r3, [r4, #0]
 800a3f2:	bd38      	pop	{r3, r4, r5, pc}
 800a3f4:	200008a0 	.word	0x200008a0

0800a3f8 <_write_r>:
 800a3f8:	b538      	push	{r3, r4, r5, lr}
 800a3fa:	4d07      	ldr	r5, [pc, #28]	; (800a418 <_write_r+0x20>)
 800a3fc:	4604      	mov	r4, r0
 800a3fe:	4608      	mov	r0, r1
 800a400:	4611      	mov	r1, r2
 800a402:	2200      	movs	r2, #0
 800a404:	602a      	str	r2, [r5, #0]
 800a406:	461a      	mov	r2, r3
 800a408:	f7fa fabd 	bl	8004986 <_write>
 800a40c:	1c43      	adds	r3, r0, #1
 800a40e:	d102      	bne.n	800a416 <_write_r+0x1e>
 800a410:	682b      	ldr	r3, [r5, #0]
 800a412:	b103      	cbz	r3, 800a416 <_write_r+0x1e>
 800a414:	6023      	str	r3, [r4, #0]
 800a416:	bd38      	pop	{r3, r4, r5, pc}
 800a418:	200008a0 	.word	0x200008a0

0800a41c <__errno>:
 800a41c:	4b01      	ldr	r3, [pc, #4]	; (800a424 <__errno+0x8>)
 800a41e:	6818      	ldr	r0, [r3, #0]
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	2000023c 	.word	0x2000023c

0800a428 <__libc_init_array>:
 800a428:	b570      	push	{r4, r5, r6, lr}
 800a42a:	4d0d      	ldr	r5, [pc, #52]	; (800a460 <__libc_init_array+0x38>)
 800a42c:	4c0d      	ldr	r4, [pc, #52]	; (800a464 <__libc_init_array+0x3c>)
 800a42e:	1b64      	subs	r4, r4, r5
 800a430:	10a4      	asrs	r4, r4, #2
 800a432:	2600      	movs	r6, #0
 800a434:	42a6      	cmp	r6, r4
 800a436:	d109      	bne.n	800a44c <__libc_init_array+0x24>
 800a438:	4d0b      	ldr	r5, [pc, #44]	; (800a468 <__libc_init_array+0x40>)
 800a43a:	4c0c      	ldr	r4, [pc, #48]	; (800a46c <__libc_init_array+0x44>)
 800a43c:	f002 fd30 	bl	800cea0 <_init>
 800a440:	1b64      	subs	r4, r4, r5
 800a442:	10a4      	asrs	r4, r4, #2
 800a444:	2600      	movs	r6, #0
 800a446:	42a6      	cmp	r6, r4
 800a448:	d105      	bne.n	800a456 <__libc_init_array+0x2e>
 800a44a:	bd70      	pop	{r4, r5, r6, pc}
 800a44c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a450:	4798      	blx	r3
 800a452:	3601      	adds	r6, #1
 800a454:	e7ee      	b.n	800a434 <__libc_init_array+0xc>
 800a456:	f855 3b04 	ldr.w	r3, [r5], #4
 800a45a:	4798      	blx	r3
 800a45c:	3601      	adds	r6, #1
 800a45e:	e7f2      	b.n	800a446 <__libc_init_array+0x1e>
 800a460:	0800d944 	.word	0x0800d944
 800a464:	0800d944 	.word	0x0800d944
 800a468:	0800d944 	.word	0x0800d944
 800a46c:	0800d948 	.word	0x0800d948

0800a470 <__retarget_lock_init_recursive>:
 800a470:	4770      	bx	lr

0800a472 <__retarget_lock_acquire_recursive>:
 800a472:	4770      	bx	lr

0800a474 <__retarget_lock_release_recursive>:
 800a474:	4770      	bx	lr

0800a476 <memcpy>:
 800a476:	440a      	add	r2, r1
 800a478:	4291      	cmp	r1, r2
 800a47a:	f100 33ff 	add.w	r3, r0, #4294967295
 800a47e:	d100      	bne.n	800a482 <memcpy+0xc>
 800a480:	4770      	bx	lr
 800a482:	b510      	push	{r4, lr}
 800a484:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a488:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a48c:	4291      	cmp	r1, r2
 800a48e:	d1f9      	bne.n	800a484 <memcpy+0xe>
 800a490:	bd10      	pop	{r4, pc}
 800a492:	0000      	movs	r0, r0
 800a494:	0000      	movs	r0, r0
	...

0800a498 <nan>:
 800a498:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a4a0 <nan+0x8>
 800a49c:	4770      	bx	lr
 800a49e:	bf00      	nop
 800a4a0:	00000000 	.word	0x00000000
 800a4a4:	7ff80000 	.word	0x7ff80000

0800a4a8 <nanf>:
 800a4a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a4b0 <nanf+0x8>
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	7fc00000 	.word	0x7fc00000

0800a4b4 <quorem>:
 800a4b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b8:	6903      	ldr	r3, [r0, #16]
 800a4ba:	690c      	ldr	r4, [r1, #16]
 800a4bc:	42a3      	cmp	r3, r4
 800a4be:	4607      	mov	r7, r0
 800a4c0:	db7e      	blt.n	800a5c0 <quorem+0x10c>
 800a4c2:	3c01      	subs	r4, #1
 800a4c4:	f101 0814 	add.w	r8, r1, #20
 800a4c8:	f100 0514 	add.w	r5, r0, #20
 800a4cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4d0:	9301      	str	r3, [sp, #4]
 800a4d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a4d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4da:	3301      	adds	r3, #1
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a4e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a4e6:	fbb2 f6f3 	udiv	r6, r2, r3
 800a4ea:	d331      	bcc.n	800a550 <quorem+0x9c>
 800a4ec:	f04f 0e00 	mov.w	lr, #0
 800a4f0:	4640      	mov	r0, r8
 800a4f2:	46ac      	mov	ip, r5
 800a4f4:	46f2      	mov	sl, lr
 800a4f6:	f850 2b04 	ldr.w	r2, [r0], #4
 800a4fa:	b293      	uxth	r3, r2
 800a4fc:	fb06 e303 	mla	r3, r6, r3, lr
 800a500:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a504:	0c1a      	lsrs	r2, r3, #16
 800a506:	b29b      	uxth	r3, r3
 800a508:	ebaa 0303 	sub.w	r3, sl, r3
 800a50c:	f8dc a000 	ldr.w	sl, [ip]
 800a510:	fa13 f38a 	uxtah	r3, r3, sl
 800a514:	fb06 220e 	mla	r2, r6, lr, r2
 800a518:	9300      	str	r3, [sp, #0]
 800a51a:	9b00      	ldr	r3, [sp, #0]
 800a51c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a520:	b292      	uxth	r2, r2
 800a522:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a526:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a52a:	f8bd 3000 	ldrh.w	r3, [sp]
 800a52e:	4581      	cmp	r9, r0
 800a530:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a534:	f84c 3b04 	str.w	r3, [ip], #4
 800a538:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a53c:	d2db      	bcs.n	800a4f6 <quorem+0x42>
 800a53e:	f855 300b 	ldr.w	r3, [r5, fp]
 800a542:	b92b      	cbnz	r3, 800a550 <quorem+0x9c>
 800a544:	9b01      	ldr	r3, [sp, #4]
 800a546:	3b04      	subs	r3, #4
 800a548:	429d      	cmp	r5, r3
 800a54a:	461a      	mov	r2, r3
 800a54c:	d32c      	bcc.n	800a5a8 <quorem+0xf4>
 800a54e:	613c      	str	r4, [r7, #16]
 800a550:	4638      	mov	r0, r7
 800a552:	f001 fd5b 	bl	800c00c <__mcmp>
 800a556:	2800      	cmp	r0, #0
 800a558:	db22      	blt.n	800a5a0 <quorem+0xec>
 800a55a:	3601      	adds	r6, #1
 800a55c:	4629      	mov	r1, r5
 800a55e:	2000      	movs	r0, #0
 800a560:	f858 2b04 	ldr.w	r2, [r8], #4
 800a564:	f8d1 c000 	ldr.w	ip, [r1]
 800a568:	b293      	uxth	r3, r2
 800a56a:	1ac3      	subs	r3, r0, r3
 800a56c:	0c12      	lsrs	r2, r2, #16
 800a56e:	fa13 f38c 	uxtah	r3, r3, ip
 800a572:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a576:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a580:	45c1      	cmp	r9, r8
 800a582:	f841 3b04 	str.w	r3, [r1], #4
 800a586:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a58a:	d2e9      	bcs.n	800a560 <quorem+0xac>
 800a58c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a590:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a594:	b922      	cbnz	r2, 800a5a0 <quorem+0xec>
 800a596:	3b04      	subs	r3, #4
 800a598:	429d      	cmp	r5, r3
 800a59a:	461a      	mov	r2, r3
 800a59c:	d30a      	bcc.n	800a5b4 <quorem+0x100>
 800a59e:	613c      	str	r4, [r7, #16]
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	b003      	add	sp, #12
 800a5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5a8:	6812      	ldr	r2, [r2, #0]
 800a5aa:	3b04      	subs	r3, #4
 800a5ac:	2a00      	cmp	r2, #0
 800a5ae:	d1ce      	bne.n	800a54e <quorem+0x9a>
 800a5b0:	3c01      	subs	r4, #1
 800a5b2:	e7c9      	b.n	800a548 <quorem+0x94>
 800a5b4:	6812      	ldr	r2, [r2, #0]
 800a5b6:	3b04      	subs	r3, #4
 800a5b8:	2a00      	cmp	r2, #0
 800a5ba:	d1f0      	bne.n	800a59e <quorem+0xea>
 800a5bc:	3c01      	subs	r4, #1
 800a5be:	e7eb      	b.n	800a598 <quorem+0xe4>
 800a5c0:	2000      	movs	r0, #0
 800a5c2:	e7ee      	b.n	800a5a2 <quorem+0xee>
 800a5c4:	0000      	movs	r0, r0
	...

0800a5c8 <_dtoa_r>:
 800a5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5cc:	ed2d 8b04 	vpush	{d8-d9}
 800a5d0:	69c5      	ldr	r5, [r0, #28]
 800a5d2:	b093      	sub	sp, #76	; 0x4c
 800a5d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a5d8:	ec57 6b10 	vmov	r6, r7, d0
 800a5dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a5e0:	9107      	str	r1, [sp, #28]
 800a5e2:	4604      	mov	r4, r0
 800a5e4:	920a      	str	r2, [sp, #40]	; 0x28
 800a5e6:	930d      	str	r3, [sp, #52]	; 0x34
 800a5e8:	b975      	cbnz	r5, 800a608 <_dtoa_r+0x40>
 800a5ea:	2010      	movs	r0, #16
 800a5ec:	f001 f982 	bl	800b8f4 <malloc>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	61e0      	str	r0, [r4, #28]
 800a5f4:	b920      	cbnz	r0, 800a600 <_dtoa_r+0x38>
 800a5f6:	4bae      	ldr	r3, [pc, #696]	; (800a8b0 <_dtoa_r+0x2e8>)
 800a5f8:	21ef      	movs	r1, #239	; 0xef
 800a5fa:	48ae      	ldr	r0, [pc, #696]	; (800a8b4 <_dtoa_r+0x2ec>)
 800a5fc:	f002 f92a 	bl	800c854 <__assert_func>
 800a600:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a604:	6005      	str	r5, [r0, #0]
 800a606:	60c5      	str	r5, [r0, #12]
 800a608:	69e3      	ldr	r3, [r4, #28]
 800a60a:	6819      	ldr	r1, [r3, #0]
 800a60c:	b151      	cbz	r1, 800a624 <_dtoa_r+0x5c>
 800a60e:	685a      	ldr	r2, [r3, #4]
 800a610:	604a      	str	r2, [r1, #4]
 800a612:	2301      	movs	r3, #1
 800a614:	4093      	lsls	r3, r2
 800a616:	608b      	str	r3, [r1, #8]
 800a618:	4620      	mov	r0, r4
 800a61a:	f001 fa71 	bl	800bb00 <_Bfree>
 800a61e:	69e3      	ldr	r3, [r4, #28]
 800a620:	2200      	movs	r2, #0
 800a622:	601a      	str	r2, [r3, #0]
 800a624:	1e3b      	subs	r3, r7, #0
 800a626:	bfbb      	ittet	lt
 800a628:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a62c:	9303      	strlt	r3, [sp, #12]
 800a62e:	2300      	movge	r3, #0
 800a630:	2201      	movlt	r2, #1
 800a632:	bfac      	ite	ge
 800a634:	f8c8 3000 	strge.w	r3, [r8]
 800a638:	f8c8 2000 	strlt.w	r2, [r8]
 800a63c:	4b9e      	ldr	r3, [pc, #632]	; (800a8b8 <_dtoa_r+0x2f0>)
 800a63e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a642:	ea33 0308 	bics.w	r3, r3, r8
 800a646:	d11b      	bne.n	800a680 <_dtoa_r+0xb8>
 800a648:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a64a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a64e:	6013      	str	r3, [r2, #0]
 800a650:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a654:	4333      	orrs	r3, r6
 800a656:	f000 8593 	beq.w	800b180 <_dtoa_r+0xbb8>
 800a65a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a65c:	b963      	cbnz	r3, 800a678 <_dtoa_r+0xb0>
 800a65e:	4b97      	ldr	r3, [pc, #604]	; (800a8bc <_dtoa_r+0x2f4>)
 800a660:	e027      	b.n	800a6b2 <_dtoa_r+0xea>
 800a662:	4b97      	ldr	r3, [pc, #604]	; (800a8c0 <_dtoa_r+0x2f8>)
 800a664:	9300      	str	r3, [sp, #0]
 800a666:	3308      	adds	r3, #8
 800a668:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a66a:	6013      	str	r3, [r2, #0]
 800a66c:	9800      	ldr	r0, [sp, #0]
 800a66e:	b013      	add	sp, #76	; 0x4c
 800a670:	ecbd 8b04 	vpop	{d8-d9}
 800a674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a678:	4b90      	ldr	r3, [pc, #576]	; (800a8bc <_dtoa_r+0x2f4>)
 800a67a:	9300      	str	r3, [sp, #0]
 800a67c:	3303      	adds	r3, #3
 800a67e:	e7f3      	b.n	800a668 <_dtoa_r+0xa0>
 800a680:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a684:	2200      	movs	r2, #0
 800a686:	ec51 0b17 	vmov	r0, r1, d7
 800a68a:	eeb0 8a47 	vmov.f32	s16, s14
 800a68e:	eef0 8a67 	vmov.f32	s17, s15
 800a692:	2300      	movs	r3, #0
 800a694:	f7f6 fa20 	bl	8000ad8 <__aeabi_dcmpeq>
 800a698:	4681      	mov	r9, r0
 800a69a:	b160      	cbz	r0, 800a6b6 <_dtoa_r+0xee>
 800a69c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a69e:	2301      	movs	r3, #1
 800a6a0:	6013      	str	r3, [r2, #0]
 800a6a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	f000 8568 	beq.w	800b17a <_dtoa_r+0xbb2>
 800a6aa:	4b86      	ldr	r3, [pc, #536]	; (800a8c4 <_dtoa_r+0x2fc>)
 800a6ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a6ae:	6013      	str	r3, [r2, #0]
 800a6b0:	3b01      	subs	r3, #1
 800a6b2:	9300      	str	r3, [sp, #0]
 800a6b4:	e7da      	b.n	800a66c <_dtoa_r+0xa4>
 800a6b6:	aa10      	add	r2, sp, #64	; 0x40
 800a6b8:	a911      	add	r1, sp, #68	; 0x44
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	eeb0 0a48 	vmov.f32	s0, s16
 800a6c0:	eef0 0a68 	vmov.f32	s1, s17
 800a6c4:	f001 fdb8 	bl	800c238 <__d2b>
 800a6c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a6cc:	4682      	mov	sl, r0
 800a6ce:	2d00      	cmp	r5, #0
 800a6d0:	d07f      	beq.n	800a7d2 <_dtoa_r+0x20a>
 800a6d2:	ee18 3a90 	vmov	r3, s17
 800a6d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a6de:	ec51 0b18 	vmov	r0, r1, d8
 800a6e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a6e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a6ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	4b75      	ldr	r3, [pc, #468]	; (800a8c8 <_dtoa_r+0x300>)
 800a6f4:	f7f5 fdd0 	bl	8000298 <__aeabi_dsub>
 800a6f8:	a367      	add	r3, pc, #412	; (adr r3, 800a898 <_dtoa_r+0x2d0>)
 800a6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fe:	f7f5 ff83 	bl	8000608 <__aeabi_dmul>
 800a702:	a367      	add	r3, pc, #412	; (adr r3, 800a8a0 <_dtoa_r+0x2d8>)
 800a704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a708:	f7f5 fdc8 	bl	800029c <__adddf3>
 800a70c:	4606      	mov	r6, r0
 800a70e:	4628      	mov	r0, r5
 800a710:	460f      	mov	r7, r1
 800a712:	f7f5 ff0f 	bl	8000534 <__aeabi_i2d>
 800a716:	a364      	add	r3, pc, #400	; (adr r3, 800a8a8 <_dtoa_r+0x2e0>)
 800a718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a71c:	f7f5 ff74 	bl	8000608 <__aeabi_dmul>
 800a720:	4602      	mov	r2, r0
 800a722:	460b      	mov	r3, r1
 800a724:	4630      	mov	r0, r6
 800a726:	4639      	mov	r1, r7
 800a728:	f7f5 fdb8 	bl	800029c <__adddf3>
 800a72c:	4606      	mov	r6, r0
 800a72e:	460f      	mov	r7, r1
 800a730:	f7f6 fa1a 	bl	8000b68 <__aeabi_d2iz>
 800a734:	2200      	movs	r2, #0
 800a736:	4683      	mov	fp, r0
 800a738:	2300      	movs	r3, #0
 800a73a:	4630      	mov	r0, r6
 800a73c:	4639      	mov	r1, r7
 800a73e:	f7f6 f9d5 	bl	8000aec <__aeabi_dcmplt>
 800a742:	b148      	cbz	r0, 800a758 <_dtoa_r+0x190>
 800a744:	4658      	mov	r0, fp
 800a746:	f7f5 fef5 	bl	8000534 <__aeabi_i2d>
 800a74a:	4632      	mov	r2, r6
 800a74c:	463b      	mov	r3, r7
 800a74e:	f7f6 f9c3 	bl	8000ad8 <__aeabi_dcmpeq>
 800a752:	b908      	cbnz	r0, 800a758 <_dtoa_r+0x190>
 800a754:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a758:	f1bb 0f16 	cmp.w	fp, #22
 800a75c:	d857      	bhi.n	800a80e <_dtoa_r+0x246>
 800a75e:	4b5b      	ldr	r3, [pc, #364]	; (800a8cc <_dtoa_r+0x304>)
 800a760:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a768:	ec51 0b18 	vmov	r0, r1, d8
 800a76c:	f7f6 f9be 	bl	8000aec <__aeabi_dcmplt>
 800a770:	2800      	cmp	r0, #0
 800a772:	d04e      	beq.n	800a812 <_dtoa_r+0x24a>
 800a774:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a778:	2300      	movs	r3, #0
 800a77a:	930c      	str	r3, [sp, #48]	; 0x30
 800a77c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a77e:	1b5b      	subs	r3, r3, r5
 800a780:	1e5a      	subs	r2, r3, #1
 800a782:	bf45      	ittet	mi
 800a784:	f1c3 0301 	rsbmi	r3, r3, #1
 800a788:	9305      	strmi	r3, [sp, #20]
 800a78a:	2300      	movpl	r3, #0
 800a78c:	2300      	movmi	r3, #0
 800a78e:	9206      	str	r2, [sp, #24]
 800a790:	bf54      	ite	pl
 800a792:	9305      	strpl	r3, [sp, #20]
 800a794:	9306      	strmi	r3, [sp, #24]
 800a796:	f1bb 0f00 	cmp.w	fp, #0
 800a79a:	db3c      	blt.n	800a816 <_dtoa_r+0x24e>
 800a79c:	9b06      	ldr	r3, [sp, #24]
 800a79e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a7a2:	445b      	add	r3, fp
 800a7a4:	9306      	str	r3, [sp, #24]
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	9308      	str	r3, [sp, #32]
 800a7aa:	9b07      	ldr	r3, [sp, #28]
 800a7ac:	2b09      	cmp	r3, #9
 800a7ae:	d868      	bhi.n	800a882 <_dtoa_r+0x2ba>
 800a7b0:	2b05      	cmp	r3, #5
 800a7b2:	bfc4      	itt	gt
 800a7b4:	3b04      	subgt	r3, #4
 800a7b6:	9307      	strgt	r3, [sp, #28]
 800a7b8:	9b07      	ldr	r3, [sp, #28]
 800a7ba:	f1a3 0302 	sub.w	r3, r3, #2
 800a7be:	bfcc      	ite	gt
 800a7c0:	2500      	movgt	r5, #0
 800a7c2:	2501      	movle	r5, #1
 800a7c4:	2b03      	cmp	r3, #3
 800a7c6:	f200 8085 	bhi.w	800a8d4 <_dtoa_r+0x30c>
 800a7ca:	e8df f003 	tbb	[pc, r3]
 800a7ce:	3b2e      	.short	0x3b2e
 800a7d0:	5839      	.short	0x5839
 800a7d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a7d6:	441d      	add	r5, r3
 800a7d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a7dc:	2b20      	cmp	r3, #32
 800a7de:	bfc1      	itttt	gt
 800a7e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a7e4:	fa08 f803 	lslgt.w	r8, r8, r3
 800a7e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a7ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a7f0:	bfd6      	itet	le
 800a7f2:	f1c3 0320 	rsble	r3, r3, #32
 800a7f6:	ea48 0003 	orrgt.w	r0, r8, r3
 800a7fa:	fa06 f003 	lslle.w	r0, r6, r3
 800a7fe:	f7f5 fe89 	bl	8000514 <__aeabi_ui2d>
 800a802:	2201      	movs	r2, #1
 800a804:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a808:	3d01      	subs	r5, #1
 800a80a:	920e      	str	r2, [sp, #56]	; 0x38
 800a80c:	e76f      	b.n	800a6ee <_dtoa_r+0x126>
 800a80e:	2301      	movs	r3, #1
 800a810:	e7b3      	b.n	800a77a <_dtoa_r+0x1b2>
 800a812:	900c      	str	r0, [sp, #48]	; 0x30
 800a814:	e7b2      	b.n	800a77c <_dtoa_r+0x1b4>
 800a816:	9b05      	ldr	r3, [sp, #20]
 800a818:	eba3 030b 	sub.w	r3, r3, fp
 800a81c:	9305      	str	r3, [sp, #20]
 800a81e:	f1cb 0300 	rsb	r3, fp, #0
 800a822:	9308      	str	r3, [sp, #32]
 800a824:	2300      	movs	r3, #0
 800a826:	930b      	str	r3, [sp, #44]	; 0x2c
 800a828:	e7bf      	b.n	800a7aa <_dtoa_r+0x1e2>
 800a82a:	2300      	movs	r3, #0
 800a82c:	9309      	str	r3, [sp, #36]	; 0x24
 800a82e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a830:	2b00      	cmp	r3, #0
 800a832:	dc52      	bgt.n	800a8da <_dtoa_r+0x312>
 800a834:	2301      	movs	r3, #1
 800a836:	9301      	str	r3, [sp, #4]
 800a838:	9304      	str	r3, [sp, #16]
 800a83a:	461a      	mov	r2, r3
 800a83c:	920a      	str	r2, [sp, #40]	; 0x28
 800a83e:	e00b      	b.n	800a858 <_dtoa_r+0x290>
 800a840:	2301      	movs	r3, #1
 800a842:	e7f3      	b.n	800a82c <_dtoa_r+0x264>
 800a844:	2300      	movs	r3, #0
 800a846:	9309      	str	r3, [sp, #36]	; 0x24
 800a848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a84a:	445b      	add	r3, fp
 800a84c:	9301      	str	r3, [sp, #4]
 800a84e:	3301      	adds	r3, #1
 800a850:	2b01      	cmp	r3, #1
 800a852:	9304      	str	r3, [sp, #16]
 800a854:	bfb8      	it	lt
 800a856:	2301      	movlt	r3, #1
 800a858:	69e0      	ldr	r0, [r4, #28]
 800a85a:	2100      	movs	r1, #0
 800a85c:	2204      	movs	r2, #4
 800a85e:	f102 0614 	add.w	r6, r2, #20
 800a862:	429e      	cmp	r6, r3
 800a864:	d93d      	bls.n	800a8e2 <_dtoa_r+0x31a>
 800a866:	6041      	str	r1, [r0, #4]
 800a868:	4620      	mov	r0, r4
 800a86a:	f001 f909 	bl	800ba80 <_Balloc>
 800a86e:	9000      	str	r0, [sp, #0]
 800a870:	2800      	cmp	r0, #0
 800a872:	d139      	bne.n	800a8e8 <_dtoa_r+0x320>
 800a874:	4b16      	ldr	r3, [pc, #88]	; (800a8d0 <_dtoa_r+0x308>)
 800a876:	4602      	mov	r2, r0
 800a878:	f240 11af 	movw	r1, #431	; 0x1af
 800a87c:	e6bd      	b.n	800a5fa <_dtoa_r+0x32>
 800a87e:	2301      	movs	r3, #1
 800a880:	e7e1      	b.n	800a846 <_dtoa_r+0x27e>
 800a882:	2501      	movs	r5, #1
 800a884:	2300      	movs	r3, #0
 800a886:	9307      	str	r3, [sp, #28]
 800a888:	9509      	str	r5, [sp, #36]	; 0x24
 800a88a:	f04f 33ff 	mov.w	r3, #4294967295
 800a88e:	9301      	str	r3, [sp, #4]
 800a890:	9304      	str	r3, [sp, #16]
 800a892:	2200      	movs	r2, #0
 800a894:	2312      	movs	r3, #18
 800a896:	e7d1      	b.n	800a83c <_dtoa_r+0x274>
 800a898:	636f4361 	.word	0x636f4361
 800a89c:	3fd287a7 	.word	0x3fd287a7
 800a8a0:	8b60c8b3 	.word	0x8b60c8b3
 800a8a4:	3fc68a28 	.word	0x3fc68a28
 800a8a8:	509f79fb 	.word	0x509f79fb
 800a8ac:	3fd34413 	.word	0x3fd34413
 800a8b0:	0800d6b7 	.word	0x0800d6b7
 800a8b4:	0800d6ce 	.word	0x0800d6ce
 800a8b8:	7ff00000 	.word	0x7ff00000
 800a8bc:	0800d6b3 	.word	0x0800d6b3
 800a8c0:	0800d6aa 	.word	0x0800d6aa
 800a8c4:	0800d67a 	.word	0x0800d67a
 800a8c8:	3ff80000 	.word	0x3ff80000
 800a8cc:	0800d818 	.word	0x0800d818
 800a8d0:	0800d726 	.word	0x0800d726
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a8d8:	e7d7      	b.n	800a88a <_dtoa_r+0x2c2>
 800a8da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8dc:	9301      	str	r3, [sp, #4]
 800a8de:	9304      	str	r3, [sp, #16]
 800a8e0:	e7ba      	b.n	800a858 <_dtoa_r+0x290>
 800a8e2:	3101      	adds	r1, #1
 800a8e4:	0052      	lsls	r2, r2, #1
 800a8e6:	e7ba      	b.n	800a85e <_dtoa_r+0x296>
 800a8e8:	69e3      	ldr	r3, [r4, #28]
 800a8ea:	9a00      	ldr	r2, [sp, #0]
 800a8ec:	601a      	str	r2, [r3, #0]
 800a8ee:	9b04      	ldr	r3, [sp, #16]
 800a8f0:	2b0e      	cmp	r3, #14
 800a8f2:	f200 80a8 	bhi.w	800aa46 <_dtoa_r+0x47e>
 800a8f6:	2d00      	cmp	r5, #0
 800a8f8:	f000 80a5 	beq.w	800aa46 <_dtoa_r+0x47e>
 800a8fc:	f1bb 0f00 	cmp.w	fp, #0
 800a900:	dd38      	ble.n	800a974 <_dtoa_r+0x3ac>
 800a902:	4bc0      	ldr	r3, [pc, #768]	; (800ac04 <_dtoa_r+0x63c>)
 800a904:	f00b 020f 	and.w	r2, fp, #15
 800a908:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a90c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a910:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a914:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a918:	d019      	beq.n	800a94e <_dtoa_r+0x386>
 800a91a:	4bbb      	ldr	r3, [pc, #748]	; (800ac08 <_dtoa_r+0x640>)
 800a91c:	ec51 0b18 	vmov	r0, r1, d8
 800a920:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a924:	f7f5 ff9a 	bl	800085c <__aeabi_ddiv>
 800a928:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a92c:	f008 080f 	and.w	r8, r8, #15
 800a930:	2503      	movs	r5, #3
 800a932:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ac08 <_dtoa_r+0x640>
 800a936:	f1b8 0f00 	cmp.w	r8, #0
 800a93a:	d10a      	bne.n	800a952 <_dtoa_r+0x38a>
 800a93c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a940:	4632      	mov	r2, r6
 800a942:	463b      	mov	r3, r7
 800a944:	f7f5 ff8a 	bl	800085c <__aeabi_ddiv>
 800a948:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a94c:	e02b      	b.n	800a9a6 <_dtoa_r+0x3de>
 800a94e:	2502      	movs	r5, #2
 800a950:	e7ef      	b.n	800a932 <_dtoa_r+0x36a>
 800a952:	f018 0f01 	tst.w	r8, #1
 800a956:	d008      	beq.n	800a96a <_dtoa_r+0x3a2>
 800a958:	4630      	mov	r0, r6
 800a95a:	4639      	mov	r1, r7
 800a95c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a960:	f7f5 fe52 	bl	8000608 <__aeabi_dmul>
 800a964:	3501      	adds	r5, #1
 800a966:	4606      	mov	r6, r0
 800a968:	460f      	mov	r7, r1
 800a96a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a96e:	f109 0908 	add.w	r9, r9, #8
 800a972:	e7e0      	b.n	800a936 <_dtoa_r+0x36e>
 800a974:	f000 809f 	beq.w	800aab6 <_dtoa_r+0x4ee>
 800a978:	f1cb 0600 	rsb	r6, fp, #0
 800a97c:	4ba1      	ldr	r3, [pc, #644]	; (800ac04 <_dtoa_r+0x63c>)
 800a97e:	4fa2      	ldr	r7, [pc, #648]	; (800ac08 <_dtoa_r+0x640>)
 800a980:	f006 020f 	and.w	r2, r6, #15
 800a984:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98c:	ec51 0b18 	vmov	r0, r1, d8
 800a990:	f7f5 fe3a 	bl	8000608 <__aeabi_dmul>
 800a994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a998:	1136      	asrs	r6, r6, #4
 800a99a:	2300      	movs	r3, #0
 800a99c:	2502      	movs	r5, #2
 800a99e:	2e00      	cmp	r6, #0
 800a9a0:	d17e      	bne.n	800aaa0 <_dtoa_r+0x4d8>
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d1d0      	bne.n	800a948 <_dtoa_r+0x380>
 800a9a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f000 8084 	beq.w	800aaba <_dtoa_r+0x4f2>
 800a9b2:	4b96      	ldr	r3, [pc, #600]	; (800ac0c <_dtoa_r+0x644>)
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	4640      	mov	r0, r8
 800a9b8:	4649      	mov	r1, r9
 800a9ba:	f7f6 f897 	bl	8000aec <__aeabi_dcmplt>
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	d07b      	beq.n	800aaba <_dtoa_r+0x4f2>
 800a9c2:	9b04      	ldr	r3, [sp, #16]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d078      	beq.n	800aaba <_dtoa_r+0x4f2>
 800a9c8:	9b01      	ldr	r3, [sp, #4]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	dd39      	ble.n	800aa42 <_dtoa_r+0x47a>
 800a9ce:	4b90      	ldr	r3, [pc, #576]	; (800ac10 <_dtoa_r+0x648>)
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	4640      	mov	r0, r8
 800a9d4:	4649      	mov	r1, r9
 800a9d6:	f7f5 fe17 	bl	8000608 <__aeabi_dmul>
 800a9da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9de:	9e01      	ldr	r6, [sp, #4]
 800a9e0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a9e4:	3501      	adds	r5, #1
 800a9e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	f7f5 fda2 	bl	8000534 <__aeabi_i2d>
 800a9f0:	4642      	mov	r2, r8
 800a9f2:	464b      	mov	r3, r9
 800a9f4:	f7f5 fe08 	bl	8000608 <__aeabi_dmul>
 800a9f8:	4b86      	ldr	r3, [pc, #536]	; (800ac14 <_dtoa_r+0x64c>)
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f7f5 fc4e 	bl	800029c <__adddf3>
 800aa00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800aa04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa08:	9303      	str	r3, [sp, #12]
 800aa0a:	2e00      	cmp	r6, #0
 800aa0c:	d158      	bne.n	800aac0 <_dtoa_r+0x4f8>
 800aa0e:	4b82      	ldr	r3, [pc, #520]	; (800ac18 <_dtoa_r+0x650>)
 800aa10:	2200      	movs	r2, #0
 800aa12:	4640      	mov	r0, r8
 800aa14:	4649      	mov	r1, r9
 800aa16:	f7f5 fc3f 	bl	8000298 <__aeabi_dsub>
 800aa1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa1e:	4680      	mov	r8, r0
 800aa20:	4689      	mov	r9, r1
 800aa22:	f7f6 f881 	bl	8000b28 <__aeabi_dcmpgt>
 800aa26:	2800      	cmp	r0, #0
 800aa28:	f040 8296 	bne.w	800af58 <_dtoa_r+0x990>
 800aa2c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800aa30:	4640      	mov	r0, r8
 800aa32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa36:	4649      	mov	r1, r9
 800aa38:	f7f6 f858 	bl	8000aec <__aeabi_dcmplt>
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	f040 8289 	bne.w	800af54 <_dtoa_r+0x98c>
 800aa42:	ed8d 8b02 	vstr	d8, [sp, #8]
 800aa46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	f2c0 814e 	blt.w	800acea <_dtoa_r+0x722>
 800aa4e:	f1bb 0f0e 	cmp.w	fp, #14
 800aa52:	f300 814a 	bgt.w	800acea <_dtoa_r+0x722>
 800aa56:	4b6b      	ldr	r3, [pc, #428]	; (800ac04 <_dtoa_r+0x63c>)
 800aa58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aa5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	f280 80dc 	bge.w	800ac20 <_dtoa_r+0x658>
 800aa68:	9b04      	ldr	r3, [sp, #16]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	f300 80d8 	bgt.w	800ac20 <_dtoa_r+0x658>
 800aa70:	f040 826f 	bne.w	800af52 <_dtoa_r+0x98a>
 800aa74:	4b68      	ldr	r3, [pc, #416]	; (800ac18 <_dtoa_r+0x650>)
 800aa76:	2200      	movs	r2, #0
 800aa78:	4640      	mov	r0, r8
 800aa7a:	4649      	mov	r1, r9
 800aa7c:	f7f5 fdc4 	bl	8000608 <__aeabi_dmul>
 800aa80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa84:	f7f6 f846 	bl	8000b14 <__aeabi_dcmpge>
 800aa88:	9e04      	ldr	r6, [sp, #16]
 800aa8a:	4637      	mov	r7, r6
 800aa8c:	2800      	cmp	r0, #0
 800aa8e:	f040 8245 	bne.w	800af1c <_dtoa_r+0x954>
 800aa92:	9d00      	ldr	r5, [sp, #0]
 800aa94:	2331      	movs	r3, #49	; 0x31
 800aa96:	f805 3b01 	strb.w	r3, [r5], #1
 800aa9a:	f10b 0b01 	add.w	fp, fp, #1
 800aa9e:	e241      	b.n	800af24 <_dtoa_r+0x95c>
 800aaa0:	07f2      	lsls	r2, r6, #31
 800aaa2:	d505      	bpl.n	800aab0 <_dtoa_r+0x4e8>
 800aaa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aaa8:	f7f5 fdae 	bl	8000608 <__aeabi_dmul>
 800aaac:	3501      	adds	r5, #1
 800aaae:	2301      	movs	r3, #1
 800aab0:	1076      	asrs	r6, r6, #1
 800aab2:	3708      	adds	r7, #8
 800aab4:	e773      	b.n	800a99e <_dtoa_r+0x3d6>
 800aab6:	2502      	movs	r5, #2
 800aab8:	e775      	b.n	800a9a6 <_dtoa_r+0x3de>
 800aaba:	9e04      	ldr	r6, [sp, #16]
 800aabc:	465f      	mov	r7, fp
 800aabe:	e792      	b.n	800a9e6 <_dtoa_r+0x41e>
 800aac0:	9900      	ldr	r1, [sp, #0]
 800aac2:	4b50      	ldr	r3, [pc, #320]	; (800ac04 <_dtoa_r+0x63c>)
 800aac4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aac8:	4431      	add	r1, r6
 800aaca:	9102      	str	r1, [sp, #8]
 800aacc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aace:	eeb0 9a47 	vmov.f32	s18, s14
 800aad2:	eef0 9a67 	vmov.f32	s19, s15
 800aad6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aada:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aade:	2900      	cmp	r1, #0
 800aae0:	d044      	beq.n	800ab6c <_dtoa_r+0x5a4>
 800aae2:	494e      	ldr	r1, [pc, #312]	; (800ac1c <_dtoa_r+0x654>)
 800aae4:	2000      	movs	r0, #0
 800aae6:	f7f5 feb9 	bl	800085c <__aeabi_ddiv>
 800aaea:	ec53 2b19 	vmov	r2, r3, d9
 800aaee:	f7f5 fbd3 	bl	8000298 <__aeabi_dsub>
 800aaf2:	9d00      	ldr	r5, [sp, #0]
 800aaf4:	ec41 0b19 	vmov	d9, r0, r1
 800aaf8:	4649      	mov	r1, r9
 800aafa:	4640      	mov	r0, r8
 800aafc:	f7f6 f834 	bl	8000b68 <__aeabi_d2iz>
 800ab00:	4606      	mov	r6, r0
 800ab02:	f7f5 fd17 	bl	8000534 <__aeabi_i2d>
 800ab06:	4602      	mov	r2, r0
 800ab08:	460b      	mov	r3, r1
 800ab0a:	4640      	mov	r0, r8
 800ab0c:	4649      	mov	r1, r9
 800ab0e:	f7f5 fbc3 	bl	8000298 <__aeabi_dsub>
 800ab12:	3630      	adds	r6, #48	; 0x30
 800ab14:	f805 6b01 	strb.w	r6, [r5], #1
 800ab18:	ec53 2b19 	vmov	r2, r3, d9
 800ab1c:	4680      	mov	r8, r0
 800ab1e:	4689      	mov	r9, r1
 800ab20:	f7f5 ffe4 	bl	8000aec <__aeabi_dcmplt>
 800ab24:	2800      	cmp	r0, #0
 800ab26:	d164      	bne.n	800abf2 <_dtoa_r+0x62a>
 800ab28:	4642      	mov	r2, r8
 800ab2a:	464b      	mov	r3, r9
 800ab2c:	4937      	ldr	r1, [pc, #220]	; (800ac0c <_dtoa_r+0x644>)
 800ab2e:	2000      	movs	r0, #0
 800ab30:	f7f5 fbb2 	bl	8000298 <__aeabi_dsub>
 800ab34:	ec53 2b19 	vmov	r2, r3, d9
 800ab38:	f7f5 ffd8 	bl	8000aec <__aeabi_dcmplt>
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	f040 80b6 	bne.w	800acae <_dtoa_r+0x6e6>
 800ab42:	9b02      	ldr	r3, [sp, #8]
 800ab44:	429d      	cmp	r5, r3
 800ab46:	f43f af7c 	beq.w	800aa42 <_dtoa_r+0x47a>
 800ab4a:	4b31      	ldr	r3, [pc, #196]	; (800ac10 <_dtoa_r+0x648>)
 800ab4c:	ec51 0b19 	vmov	r0, r1, d9
 800ab50:	2200      	movs	r2, #0
 800ab52:	f7f5 fd59 	bl	8000608 <__aeabi_dmul>
 800ab56:	4b2e      	ldr	r3, [pc, #184]	; (800ac10 <_dtoa_r+0x648>)
 800ab58:	ec41 0b19 	vmov	d9, r0, r1
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	4640      	mov	r0, r8
 800ab60:	4649      	mov	r1, r9
 800ab62:	f7f5 fd51 	bl	8000608 <__aeabi_dmul>
 800ab66:	4680      	mov	r8, r0
 800ab68:	4689      	mov	r9, r1
 800ab6a:	e7c5      	b.n	800aaf8 <_dtoa_r+0x530>
 800ab6c:	ec51 0b17 	vmov	r0, r1, d7
 800ab70:	f7f5 fd4a 	bl	8000608 <__aeabi_dmul>
 800ab74:	9b02      	ldr	r3, [sp, #8]
 800ab76:	9d00      	ldr	r5, [sp, #0]
 800ab78:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab7a:	ec41 0b19 	vmov	d9, r0, r1
 800ab7e:	4649      	mov	r1, r9
 800ab80:	4640      	mov	r0, r8
 800ab82:	f7f5 fff1 	bl	8000b68 <__aeabi_d2iz>
 800ab86:	4606      	mov	r6, r0
 800ab88:	f7f5 fcd4 	bl	8000534 <__aeabi_i2d>
 800ab8c:	3630      	adds	r6, #48	; 0x30
 800ab8e:	4602      	mov	r2, r0
 800ab90:	460b      	mov	r3, r1
 800ab92:	4640      	mov	r0, r8
 800ab94:	4649      	mov	r1, r9
 800ab96:	f7f5 fb7f 	bl	8000298 <__aeabi_dsub>
 800ab9a:	f805 6b01 	strb.w	r6, [r5], #1
 800ab9e:	9b02      	ldr	r3, [sp, #8]
 800aba0:	429d      	cmp	r5, r3
 800aba2:	4680      	mov	r8, r0
 800aba4:	4689      	mov	r9, r1
 800aba6:	f04f 0200 	mov.w	r2, #0
 800abaa:	d124      	bne.n	800abf6 <_dtoa_r+0x62e>
 800abac:	4b1b      	ldr	r3, [pc, #108]	; (800ac1c <_dtoa_r+0x654>)
 800abae:	ec51 0b19 	vmov	r0, r1, d9
 800abb2:	f7f5 fb73 	bl	800029c <__adddf3>
 800abb6:	4602      	mov	r2, r0
 800abb8:	460b      	mov	r3, r1
 800abba:	4640      	mov	r0, r8
 800abbc:	4649      	mov	r1, r9
 800abbe:	f7f5 ffb3 	bl	8000b28 <__aeabi_dcmpgt>
 800abc2:	2800      	cmp	r0, #0
 800abc4:	d173      	bne.n	800acae <_dtoa_r+0x6e6>
 800abc6:	ec53 2b19 	vmov	r2, r3, d9
 800abca:	4914      	ldr	r1, [pc, #80]	; (800ac1c <_dtoa_r+0x654>)
 800abcc:	2000      	movs	r0, #0
 800abce:	f7f5 fb63 	bl	8000298 <__aeabi_dsub>
 800abd2:	4602      	mov	r2, r0
 800abd4:	460b      	mov	r3, r1
 800abd6:	4640      	mov	r0, r8
 800abd8:	4649      	mov	r1, r9
 800abda:	f7f5 ff87 	bl	8000aec <__aeabi_dcmplt>
 800abde:	2800      	cmp	r0, #0
 800abe0:	f43f af2f 	beq.w	800aa42 <_dtoa_r+0x47a>
 800abe4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800abe6:	1e6b      	subs	r3, r5, #1
 800abe8:	930f      	str	r3, [sp, #60]	; 0x3c
 800abea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800abee:	2b30      	cmp	r3, #48	; 0x30
 800abf0:	d0f8      	beq.n	800abe4 <_dtoa_r+0x61c>
 800abf2:	46bb      	mov	fp, r7
 800abf4:	e04a      	b.n	800ac8c <_dtoa_r+0x6c4>
 800abf6:	4b06      	ldr	r3, [pc, #24]	; (800ac10 <_dtoa_r+0x648>)
 800abf8:	f7f5 fd06 	bl	8000608 <__aeabi_dmul>
 800abfc:	4680      	mov	r8, r0
 800abfe:	4689      	mov	r9, r1
 800ac00:	e7bd      	b.n	800ab7e <_dtoa_r+0x5b6>
 800ac02:	bf00      	nop
 800ac04:	0800d818 	.word	0x0800d818
 800ac08:	0800d7f0 	.word	0x0800d7f0
 800ac0c:	3ff00000 	.word	0x3ff00000
 800ac10:	40240000 	.word	0x40240000
 800ac14:	401c0000 	.word	0x401c0000
 800ac18:	40140000 	.word	0x40140000
 800ac1c:	3fe00000 	.word	0x3fe00000
 800ac20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ac24:	9d00      	ldr	r5, [sp, #0]
 800ac26:	4642      	mov	r2, r8
 800ac28:	464b      	mov	r3, r9
 800ac2a:	4630      	mov	r0, r6
 800ac2c:	4639      	mov	r1, r7
 800ac2e:	f7f5 fe15 	bl	800085c <__aeabi_ddiv>
 800ac32:	f7f5 ff99 	bl	8000b68 <__aeabi_d2iz>
 800ac36:	9001      	str	r0, [sp, #4]
 800ac38:	f7f5 fc7c 	bl	8000534 <__aeabi_i2d>
 800ac3c:	4642      	mov	r2, r8
 800ac3e:	464b      	mov	r3, r9
 800ac40:	f7f5 fce2 	bl	8000608 <__aeabi_dmul>
 800ac44:	4602      	mov	r2, r0
 800ac46:	460b      	mov	r3, r1
 800ac48:	4630      	mov	r0, r6
 800ac4a:	4639      	mov	r1, r7
 800ac4c:	f7f5 fb24 	bl	8000298 <__aeabi_dsub>
 800ac50:	9e01      	ldr	r6, [sp, #4]
 800ac52:	9f04      	ldr	r7, [sp, #16]
 800ac54:	3630      	adds	r6, #48	; 0x30
 800ac56:	f805 6b01 	strb.w	r6, [r5], #1
 800ac5a:	9e00      	ldr	r6, [sp, #0]
 800ac5c:	1bae      	subs	r6, r5, r6
 800ac5e:	42b7      	cmp	r7, r6
 800ac60:	4602      	mov	r2, r0
 800ac62:	460b      	mov	r3, r1
 800ac64:	d134      	bne.n	800acd0 <_dtoa_r+0x708>
 800ac66:	f7f5 fb19 	bl	800029c <__adddf3>
 800ac6a:	4642      	mov	r2, r8
 800ac6c:	464b      	mov	r3, r9
 800ac6e:	4606      	mov	r6, r0
 800ac70:	460f      	mov	r7, r1
 800ac72:	f7f5 ff59 	bl	8000b28 <__aeabi_dcmpgt>
 800ac76:	b9c8      	cbnz	r0, 800acac <_dtoa_r+0x6e4>
 800ac78:	4642      	mov	r2, r8
 800ac7a:	464b      	mov	r3, r9
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	4639      	mov	r1, r7
 800ac80:	f7f5 ff2a 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac84:	b110      	cbz	r0, 800ac8c <_dtoa_r+0x6c4>
 800ac86:	9b01      	ldr	r3, [sp, #4]
 800ac88:	07db      	lsls	r3, r3, #31
 800ac8a:	d40f      	bmi.n	800acac <_dtoa_r+0x6e4>
 800ac8c:	4651      	mov	r1, sl
 800ac8e:	4620      	mov	r0, r4
 800ac90:	f000 ff36 	bl	800bb00 <_Bfree>
 800ac94:	2300      	movs	r3, #0
 800ac96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac98:	702b      	strb	r3, [r5, #0]
 800ac9a:	f10b 0301 	add.w	r3, fp, #1
 800ac9e:	6013      	str	r3, [r2, #0]
 800aca0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	f43f ace2 	beq.w	800a66c <_dtoa_r+0xa4>
 800aca8:	601d      	str	r5, [r3, #0]
 800acaa:	e4df      	b.n	800a66c <_dtoa_r+0xa4>
 800acac:	465f      	mov	r7, fp
 800acae:	462b      	mov	r3, r5
 800acb0:	461d      	mov	r5, r3
 800acb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acb6:	2a39      	cmp	r2, #57	; 0x39
 800acb8:	d106      	bne.n	800acc8 <_dtoa_r+0x700>
 800acba:	9a00      	ldr	r2, [sp, #0]
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d1f7      	bne.n	800acb0 <_dtoa_r+0x6e8>
 800acc0:	9900      	ldr	r1, [sp, #0]
 800acc2:	2230      	movs	r2, #48	; 0x30
 800acc4:	3701      	adds	r7, #1
 800acc6:	700a      	strb	r2, [r1, #0]
 800acc8:	781a      	ldrb	r2, [r3, #0]
 800acca:	3201      	adds	r2, #1
 800accc:	701a      	strb	r2, [r3, #0]
 800acce:	e790      	b.n	800abf2 <_dtoa_r+0x62a>
 800acd0:	4ba3      	ldr	r3, [pc, #652]	; (800af60 <_dtoa_r+0x998>)
 800acd2:	2200      	movs	r2, #0
 800acd4:	f7f5 fc98 	bl	8000608 <__aeabi_dmul>
 800acd8:	2200      	movs	r2, #0
 800acda:	2300      	movs	r3, #0
 800acdc:	4606      	mov	r6, r0
 800acde:	460f      	mov	r7, r1
 800ace0:	f7f5 fefa 	bl	8000ad8 <__aeabi_dcmpeq>
 800ace4:	2800      	cmp	r0, #0
 800ace6:	d09e      	beq.n	800ac26 <_dtoa_r+0x65e>
 800ace8:	e7d0      	b.n	800ac8c <_dtoa_r+0x6c4>
 800acea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acec:	2a00      	cmp	r2, #0
 800acee:	f000 80ca 	beq.w	800ae86 <_dtoa_r+0x8be>
 800acf2:	9a07      	ldr	r2, [sp, #28]
 800acf4:	2a01      	cmp	r2, #1
 800acf6:	f300 80ad 	bgt.w	800ae54 <_dtoa_r+0x88c>
 800acfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acfc:	2a00      	cmp	r2, #0
 800acfe:	f000 80a5 	beq.w	800ae4c <_dtoa_r+0x884>
 800ad02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ad06:	9e08      	ldr	r6, [sp, #32]
 800ad08:	9d05      	ldr	r5, [sp, #20]
 800ad0a:	9a05      	ldr	r2, [sp, #20]
 800ad0c:	441a      	add	r2, r3
 800ad0e:	9205      	str	r2, [sp, #20]
 800ad10:	9a06      	ldr	r2, [sp, #24]
 800ad12:	2101      	movs	r1, #1
 800ad14:	441a      	add	r2, r3
 800ad16:	4620      	mov	r0, r4
 800ad18:	9206      	str	r2, [sp, #24]
 800ad1a:	f000 fff1 	bl	800bd00 <__i2b>
 800ad1e:	4607      	mov	r7, r0
 800ad20:	b165      	cbz	r5, 800ad3c <_dtoa_r+0x774>
 800ad22:	9b06      	ldr	r3, [sp, #24]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	dd09      	ble.n	800ad3c <_dtoa_r+0x774>
 800ad28:	42ab      	cmp	r3, r5
 800ad2a:	9a05      	ldr	r2, [sp, #20]
 800ad2c:	bfa8      	it	ge
 800ad2e:	462b      	movge	r3, r5
 800ad30:	1ad2      	subs	r2, r2, r3
 800ad32:	9205      	str	r2, [sp, #20]
 800ad34:	9a06      	ldr	r2, [sp, #24]
 800ad36:	1aed      	subs	r5, r5, r3
 800ad38:	1ad3      	subs	r3, r2, r3
 800ad3a:	9306      	str	r3, [sp, #24]
 800ad3c:	9b08      	ldr	r3, [sp, #32]
 800ad3e:	b1f3      	cbz	r3, 800ad7e <_dtoa_r+0x7b6>
 800ad40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	f000 80a3 	beq.w	800ae8e <_dtoa_r+0x8c6>
 800ad48:	2e00      	cmp	r6, #0
 800ad4a:	dd10      	ble.n	800ad6e <_dtoa_r+0x7a6>
 800ad4c:	4639      	mov	r1, r7
 800ad4e:	4632      	mov	r2, r6
 800ad50:	4620      	mov	r0, r4
 800ad52:	f001 f895 	bl	800be80 <__pow5mult>
 800ad56:	4652      	mov	r2, sl
 800ad58:	4601      	mov	r1, r0
 800ad5a:	4607      	mov	r7, r0
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	f000 ffe5 	bl	800bd2c <__multiply>
 800ad62:	4651      	mov	r1, sl
 800ad64:	4680      	mov	r8, r0
 800ad66:	4620      	mov	r0, r4
 800ad68:	f000 feca 	bl	800bb00 <_Bfree>
 800ad6c:	46c2      	mov	sl, r8
 800ad6e:	9b08      	ldr	r3, [sp, #32]
 800ad70:	1b9a      	subs	r2, r3, r6
 800ad72:	d004      	beq.n	800ad7e <_dtoa_r+0x7b6>
 800ad74:	4651      	mov	r1, sl
 800ad76:	4620      	mov	r0, r4
 800ad78:	f001 f882 	bl	800be80 <__pow5mult>
 800ad7c:	4682      	mov	sl, r0
 800ad7e:	2101      	movs	r1, #1
 800ad80:	4620      	mov	r0, r4
 800ad82:	f000 ffbd 	bl	800bd00 <__i2b>
 800ad86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	4606      	mov	r6, r0
 800ad8c:	f340 8081 	ble.w	800ae92 <_dtoa_r+0x8ca>
 800ad90:	461a      	mov	r2, r3
 800ad92:	4601      	mov	r1, r0
 800ad94:	4620      	mov	r0, r4
 800ad96:	f001 f873 	bl	800be80 <__pow5mult>
 800ad9a:	9b07      	ldr	r3, [sp, #28]
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	4606      	mov	r6, r0
 800ada0:	dd7a      	ble.n	800ae98 <_dtoa_r+0x8d0>
 800ada2:	f04f 0800 	mov.w	r8, #0
 800ada6:	6933      	ldr	r3, [r6, #16]
 800ada8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800adac:	6918      	ldr	r0, [r3, #16]
 800adae:	f000 ff59 	bl	800bc64 <__hi0bits>
 800adb2:	f1c0 0020 	rsb	r0, r0, #32
 800adb6:	9b06      	ldr	r3, [sp, #24]
 800adb8:	4418      	add	r0, r3
 800adba:	f010 001f 	ands.w	r0, r0, #31
 800adbe:	f000 8094 	beq.w	800aeea <_dtoa_r+0x922>
 800adc2:	f1c0 0320 	rsb	r3, r0, #32
 800adc6:	2b04      	cmp	r3, #4
 800adc8:	f340 8085 	ble.w	800aed6 <_dtoa_r+0x90e>
 800adcc:	9b05      	ldr	r3, [sp, #20]
 800adce:	f1c0 001c 	rsb	r0, r0, #28
 800add2:	4403      	add	r3, r0
 800add4:	9305      	str	r3, [sp, #20]
 800add6:	9b06      	ldr	r3, [sp, #24]
 800add8:	4403      	add	r3, r0
 800adda:	4405      	add	r5, r0
 800addc:	9306      	str	r3, [sp, #24]
 800adde:	9b05      	ldr	r3, [sp, #20]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	dd05      	ble.n	800adf0 <_dtoa_r+0x828>
 800ade4:	4651      	mov	r1, sl
 800ade6:	461a      	mov	r2, r3
 800ade8:	4620      	mov	r0, r4
 800adea:	f001 f8a3 	bl	800bf34 <__lshift>
 800adee:	4682      	mov	sl, r0
 800adf0:	9b06      	ldr	r3, [sp, #24]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	dd05      	ble.n	800ae02 <_dtoa_r+0x83a>
 800adf6:	4631      	mov	r1, r6
 800adf8:	461a      	mov	r2, r3
 800adfa:	4620      	mov	r0, r4
 800adfc:	f001 f89a 	bl	800bf34 <__lshift>
 800ae00:	4606      	mov	r6, r0
 800ae02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d072      	beq.n	800aeee <_dtoa_r+0x926>
 800ae08:	4631      	mov	r1, r6
 800ae0a:	4650      	mov	r0, sl
 800ae0c:	f001 f8fe 	bl	800c00c <__mcmp>
 800ae10:	2800      	cmp	r0, #0
 800ae12:	da6c      	bge.n	800aeee <_dtoa_r+0x926>
 800ae14:	2300      	movs	r3, #0
 800ae16:	4651      	mov	r1, sl
 800ae18:	220a      	movs	r2, #10
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	f000 fe92 	bl	800bb44 <__multadd>
 800ae20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae22:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ae26:	4682      	mov	sl, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	f000 81b0 	beq.w	800b18e <_dtoa_r+0xbc6>
 800ae2e:	2300      	movs	r3, #0
 800ae30:	4639      	mov	r1, r7
 800ae32:	220a      	movs	r2, #10
 800ae34:	4620      	mov	r0, r4
 800ae36:	f000 fe85 	bl	800bb44 <__multadd>
 800ae3a:	9b01      	ldr	r3, [sp, #4]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	4607      	mov	r7, r0
 800ae40:	f300 8096 	bgt.w	800af70 <_dtoa_r+0x9a8>
 800ae44:	9b07      	ldr	r3, [sp, #28]
 800ae46:	2b02      	cmp	r3, #2
 800ae48:	dc59      	bgt.n	800aefe <_dtoa_r+0x936>
 800ae4a:	e091      	b.n	800af70 <_dtoa_r+0x9a8>
 800ae4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ae52:	e758      	b.n	800ad06 <_dtoa_r+0x73e>
 800ae54:	9b04      	ldr	r3, [sp, #16]
 800ae56:	1e5e      	subs	r6, r3, #1
 800ae58:	9b08      	ldr	r3, [sp, #32]
 800ae5a:	42b3      	cmp	r3, r6
 800ae5c:	bfbf      	itttt	lt
 800ae5e:	9b08      	ldrlt	r3, [sp, #32]
 800ae60:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ae62:	9608      	strlt	r6, [sp, #32]
 800ae64:	1af3      	sublt	r3, r6, r3
 800ae66:	bfb4      	ite	lt
 800ae68:	18d2      	addlt	r2, r2, r3
 800ae6a:	1b9e      	subge	r6, r3, r6
 800ae6c:	9b04      	ldr	r3, [sp, #16]
 800ae6e:	bfbc      	itt	lt
 800ae70:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ae72:	2600      	movlt	r6, #0
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	bfb7      	itett	lt
 800ae78:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ae7c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ae80:	1a9d      	sublt	r5, r3, r2
 800ae82:	2300      	movlt	r3, #0
 800ae84:	e741      	b.n	800ad0a <_dtoa_r+0x742>
 800ae86:	9e08      	ldr	r6, [sp, #32]
 800ae88:	9d05      	ldr	r5, [sp, #20]
 800ae8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ae8c:	e748      	b.n	800ad20 <_dtoa_r+0x758>
 800ae8e:	9a08      	ldr	r2, [sp, #32]
 800ae90:	e770      	b.n	800ad74 <_dtoa_r+0x7ac>
 800ae92:	9b07      	ldr	r3, [sp, #28]
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	dc19      	bgt.n	800aecc <_dtoa_r+0x904>
 800ae98:	9b02      	ldr	r3, [sp, #8]
 800ae9a:	b9bb      	cbnz	r3, 800aecc <_dtoa_r+0x904>
 800ae9c:	9b03      	ldr	r3, [sp, #12]
 800ae9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aea2:	b99b      	cbnz	r3, 800aecc <_dtoa_r+0x904>
 800aea4:	9b03      	ldr	r3, [sp, #12]
 800aea6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aeaa:	0d1b      	lsrs	r3, r3, #20
 800aeac:	051b      	lsls	r3, r3, #20
 800aeae:	b183      	cbz	r3, 800aed2 <_dtoa_r+0x90a>
 800aeb0:	9b05      	ldr	r3, [sp, #20]
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	9305      	str	r3, [sp, #20]
 800aeb6:	9b06      	ldr	r3, [sp, #24]
 800aeb8:	3301      	adds	r3, #1
 800aeba:	9306      	str	r3, [sp, #24]
 800aebc:	f04f 0801 	mov.w	r8, #1
 800aec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f47f af6f 	bne.w	800ada6 <_dtoa_r+0x7de>
 800aec8:	2001      	movs	r0, #1
 800aeca:	e774      	b.n	800adb6 <_dtoa_r+0x7ee>
 800aecc:	f04f 0800 	mov.w	r8, #0
 800aed0:	e7f6      	b.n	800aec0 <_dtoa_r+0x8f8>
 800aed2:	4698      	mov	r8, r3
 800aed4:	e7f4      	b.n	800aec0 <_dtoa_r+0x8f8>
 800aed6:	d082      	beq.n	800adde <_dtoa_r+0x816>
 800aed8:	9a05      	ldr	r2, [sp, #20]
 800aeda:	331c      	adds	r3, #28
 800aedc:	441a      	add	r2, r3
 800aede:	9205      	str	r2, [sp, #20]
 800aee0:	9a06      	ldr	r2, [sp, #24]
 800aee2:	441a      	add	r2, r3
 800aee4:	441d      	add	r5, r3
 800aee6:	9206      	str	r2, [sp, #24]
 800aee8:	e779      	b.n	800adde <_dtoa_r+0x816>
 800aeea:	4603      	mov	r3, r0
 800aeec:	e7f4      	b.n	800aed8 <_dtoa_r+0x910>
 800aeee:	9b04      	ldr	r3, [sp, #16]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	dc37      	bgt.n	800af64 <_dtoa_r+0x99c>
 800aef4:	9b07      	ldr	r3, [sp, #28]
 800aef6:	2b02      	cmp	r3, #2
 800aef8:	dd34      	ble.n	800af64 <_dtoa_r+0x99c>
 800aefa:	9b04      	ldr	r3, [sp, #16]
 800aefc:	9301      	str	r3, [sp, #4]
 800aefe:	9b01      	ldr	r3, [sp, #4]
 800af00:	b963      	cbnz	r3, 800af1c <_dtoa_r+0x954>
 800af02:	4631      	mov	r1, r6
 800af04:	2205      	movs	r2, #5
 800af06:	4620      	mov	r0, r4
 800af08:	f000 fe1c 	bl	800bb44 <__multadd>
 800af0c:	4601      	mov	r1, r0
 800af0e:	4606      	mov	r6, r0
 800af10:	4650      	mov	r0, sl
 800af12:	f001 f87b 	bl	800c00c <__mcmp>
 800af16:	2800      	cmp	r0, #0
 800af18:	f73f adbb 	bgt.w	800aa92 <_dtoa_r+0x4ca>
 800af1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af1e:	9d00      	ldr	r5, [sp, #0]
 800af20:	ea6f 0b03 	mvn.w	fp, r3
 800af24:	f04f 0800 	mov.w	r8, #0
 800af28:	4631      	mov	r1, r6
 800af2a:	4620      	mov	r0, r4
 800af2c:	f000 fde8 	bl	800bb00 <_Bfree>
 800af30:	2f00      	cmp	r7, #0
 800af32:	f43f aeab 	beq.w	800ac8c <_dtoa_r+0x6c4>
 800af36:	f1b8 0f00 	cmp.w	r8, #0
 800af3a:	d005      	beq.n	800af48 <_dtoa_r+0x980>
 800af3c:	45b8      	cmp	r8, r7
 800af3e:	d003      	beq.n	800af48 <_dtoa_r+0x980>
 800af40:	4641      	mov	r1, r8
 800af42:	4620      	mov	r0, r4
 800af44:	f000 fddc 	bl	800bb00 <_Bfree>
 800af48:	4639      	mov	r1, r7
 800af4a:	4620      	mov	r0, r4
 800af4c:	f000 fdd8 	bl	800bb00 <_Bfree>
 800af50:	e69c      	b.n	800ac8c <_dtoa_r+0x6c4>
 800af52:	2600      	movs	r6, #0
 800af54:	4637      	mov	r7, r6
 800af56:	e7e1      	b.n	800af1c <_dtoa_r+0x954>
 800af58:	46bb      	mov	fp, r7
 800af5a:	4637      	mov	r7, r6
 800af5c:	e599      	b.n	800aa92 <_dtoa_r+0x4ca>
 800af5e:	bf00      	nop
 800af60:	40240000 	.word	0x40240000
 800af64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af66:	2b00      	cmp	r3, #0
 800af68:	f000 80c8 	beq.w	800b0fc <_dtoa_r+0xb34>
 800af6c:	9b04      	ldr	r3, [sp, #16]
 800af6e:	9301      	str	r3, [sp, #4]
 800af70:	2d00      	cmp	r5, #0
 800af72:	dd05      	ble.n	800af80 <_dtoa_r+0x9b8>
 800af74:	4639      	mov	r1, r7
 800af76:	462a      	mov	r2, r5
 800af78:	4620      	mov	r0, r4
 800af7a:	f000 ffdb 	bl	800bf34 <__lshift>
 800af7e:	4607      	mov	r7, r0
 800af80:	f1b8 0f00 	cmp.w	r8, #0
 800af84:	d05b      	beq.n	800b03e <_dtoa_r+0xa76>
 800af86:	6879      	ldr	r1, [r7, #4]
 800af88:	4620      	mov	r0, r4
 800af8a:	f000 fd79 	bl	800ba80 <_Balloc>
 800af8e:	4605      	mov	r5, r0
 800af90:	b928      	cbnz	r0, 800af9e <_dtoa_r+0x9d6>
 800af92:	4b83      	ldr	r3, [pc, #524]	; (800b1a0 <_dtoa_r+0xbd8>)
 800af94:	4602      	mov	r2, r0
 800af96:	f240 21ef 	movw	r1, #751	; 0x2ef
 800af9a:	f7ff bb2e 	b.w	800a5fa <_dtoa_r+0x32>
 800af9e:	693a      	ldr	r2, [r7, #16]
 800afa0:	3202      	adds	r2, #2
 800afa2:	0092      	lsls	r2, r2, #2
 800afa4:	f107 010c 	add.w	r1, r7, #12
 800afa8:	300c      	adds	r0, #12
 800afaa:	f7ff fa64 	bl	800a476 <memcpy>
 800afae:	2201      	movs	r2, #1
 800afb0:	4629      	mov	r1, r5
 800afb2:	4620      	mov	r0, r4
 800afb4:	f000 ffbe 	bl	800bf34 <__lshift>
 800afb8:	9b00      	ldr	r3, [sp, #0]
 800afba:	3301      	adds	r3, #1
 800afbc:	9304      	str	r3, [sp, #16]
 800afbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800afc2:	4413      	add	r3, r2
 800afc4:	9308      	str	r3, [sp, #32]
 800afc6:	9b02      	ldr	r3, [sp, #8]
 800afc8:	f003 0301 	and.w	r3, r3, #1
 800afcc:	46b8      	mov	r8, r7
 800afce:	9306      	str	r3, [sp, #24]
 800afd0:	4607      	mov	r7, r0
 800afd2:	9b04      	ldr	r3, [sp, #16]
 800afd4:	4631      	mov	r1, r6
 800afd6:	3b01      	subs	r3, #1
 800afd8:	4650      	mov	r0, sl
 800afda:	9301      	str	r3, [sp, #4]
 800afdc:	f7ff fa6a 	bl	800a4b4 <quorem>
 800afe0:	4641      	mov	r1, r8
 800afe2:	9002      	str	r0, [sp, #8]
 800afe4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800afe8:	4650      	mov	r0, sl
 800afea:	f001 f80f 	bl	800c00c <__mcmp>
 800afee:	463a      	mov	r2, r7
 800aff0:	9005      	str	r0, [sp, #20]
 800aff2:	4631      	mov	r1, r6
 800aff4:	4620      	mov	r0, r4
 800aff6:	f001 f825 	bl	800c044 <__mdiff>
 800affa:	68c2      	ldr	r2, [r0, #12]
 800affc:	4605      	mov	r5, r0
 800affe:	bb02      	cbnz	r2, 800b042 <_dtoa_r+0xa7a>
 800b000:	4601      	mov	r1, r0
 800b002:	4650      	mov	r0, sl
 800b004:	f001 f802 	bl	800c00c <__mcmp>
 800b008:	4602      	mov	r2, r0
 800b00a:	4629      	mov	r1, r5
 800b00c:	4620      	mov	r0, r4
 800b00e:	9209      	str	r2, [sp, #36]	; 0x24
 800b010:	f000 fd76 	bl	800bb00 <_Bfree>
 800b014:	9b07      	ldr	r3, [sp, #28]
 800b016:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b018:	9d04      	ldr	r5, [sp, #16]
 800b01a:	ea43 0102 	orr.w	r1, r3, r2
 800b01e:	9b06      	ldr	r3, [sp, #24]
 800b020:	4319      	orrs	r1, r3
 800b022:	d110      	bne.n	800b046 <_dtoa_r+0xa7e>
 800b024:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b028:	d029      	beq.n	800b07e <_dtoa_r+0xab6>
 800b02a:	9b05      	ldr	r3, [sp, #20]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	dd02      	ble.n	800b036 <_dtoa_r+0xa6e>
 800b030:	9b02      	ldr	r3, [sp, #8]
 800b032:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b036:	9b01      	ldr	r3, [sp, #4]
 800b038:	f883 9000 	strb.w	r9, [r3]
 800b03c:	e774      	b.n	800af28 <_dtoa_r+0x960>
 800b03e:	4638      	mov	r0, r7
 800b040:	e7ba      	b.n	800afb8 <_dtoa_r+0x9f0>
 800b042:	2201      	movs	r2, #1
 800b044:	e7e1      	b.n	800b00a <_dtoa_r+0xa42>
 800b046:	9b05      	ldr	r3, [sp, #20]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	db04      	blt.n	800b056 <_dtoa_r+0xa8e>
 800b04c:	9907      	ldr	r1, [sp, #28]
 800b04e:	430b      	orrs	r3, r1
 800b050:	9906      	ldr	r1, [sp, #24]
 800b052:	430b      	orrs	r3, r1
 800b054:	d120      	bne.n	800b098 <_dtoa_r+0xad0>
 800b056:	2a00      	cmp	r2, #0
 800b058:	dded      	ble.n	800b036 <_dtoa_r+0xa6e>
 800b05a:	4651      	mov	r1, sl
 800b05c:	2201      	movs	r2, #1
 800b05e:	4620      	mov	r0, r4
 800b060:	f000 ff68 	bl	800bf34 <__lshift>
 800b064:	4631      	mov	r1, r6
 800b066:	4682      	mov	sl, r0
 800b068:	f000 ffd0 	bl	800c00c <__mcmp>
 800b06c:	2800      	cmp	r0, #0
 800b06e:	dc03      	bgt.n	800b078 <_dtoa_r+0xab0>
 800b070:	d1e1      	bne.n	800b036 <_dtoa_r+0xa6e>
 800b072:	f019 0f01 	tst.w	r9, #1
 800b076:	d0de      	beq.n	800b036 <_dtoa_r+0xa6e>
 800b078:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b07c:	d1d8      	bne.n	800b030 <_dtoa_r+0xa68>
 800b07e:	9a01      	ldr	r2, [sp, #4]
 800b080:	2339      	movs	r3, #57	; 0x39
 800b082:	7013      	strb	r3, [r2, #0]
 800b084:	462b      	mov	r3, r5
 800b086:	461d      	mov	r5, r3
 800b088:	3b01      	subs	r3, #1
 800b08a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b08e:	2a39      	cmp	r2, #57	; 0x39
 800b090:	d06c      	beq.n	800b16c <_dtoa_r+0xba4>
 800b092:	3201      	adds	r2, #1
 800b094:	701a      	strb	r2, [r3, #0]
 800b096:	e747      	b.n	800af28 <_dtoa_r+0x960>
 800b098:	2a00      	cmp	r2, #0
 800b09a:	dd07      	ble.n	800b0ac <_dtoa_r+0xae4>
 800b09c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b0a0:	d0ed      	beq.n	800b07e <_dtoa_r+0xab6>
 800b0a2:	9a01      	ldr	r2, [sp, #4]
 800b0a4:	f109 0301 	add.w	r3, r9, #1
 800b0a8:	7013      	strb	r3, [r2, #0]
 800b0aa:	e73d      	b.n	800af28 <_dtoa_r+0x960>
 800b0ac:	9b04      	ldr	r3, [sp, #16]
 800b0ae:	9a08      	ldr	r2, [sp, #32]
 800b0b0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d043      	beq.n	800b140 <_dtoa_r+0xb78>
 800b0b8:	4651      	mov	r1, sl
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	220a      	movs	r2, #10
 800b0be:	4620      	mov	r0, r4
 800b0c0:	f000 fd40 	bl	800bb44 <__multadd>
 800b0c4:	45b8      	cmp	r8, r7
 800b0c6:	4682      	mov	sl, r0
 800b0c8:	f04f 0300 	mov.w	r3, #0
 800b0cc:	f04f 020a 	mov.w	r2, #10
 800b0d0:	4641      	mov	r1, r8
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	d107      	bne.n	800b0e6 <_dtoa_r+0xb1e>
 800b0d6:	f000 fd35 	bl	800bb44 <__multadd>
 800b0da:	4680      	mov	r8, r0
 800b0dc:	4607      	mov	r7, r0
 800b0de:	9b04      	ldr	r3, [sp, #16]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	9304      	str	r3, [sp, #16]
 800b0e4:	e775      	b.n	800afd2 <_dtoa_r+0xa0a>
 800b0e6:	f000 fd2d 	bl	800bb44 <__multadd>
 800b0ea:	4639      	mov	r1, r7
 800b0ec:	4680      	mov	r8, r0
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	220a      	movs	r2, #10
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	f000 fd26 	bl	800bb44 <__multadd>
 800b0f8:	4607      	mov	r7, r0
 800b0fa:	e7f0      	b.n	800b0de <_dtoa_r+0xb16>
 800b0fc:	9b04      	ldr	r3, [sp, #16]
 800b0fe:	9301      	str	r3, [sp, #4]
 800b100:	9d00      	ldr	r5, [sp, #0]
 800b102:	4631      	mov	r1, r6
 800b104:	4650      	mov	r0, sl
 800b106:	f7ff f9d5 	bl	800a4b4 <quorem>
 800b10a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b10e:	9b00      	ldr	r3, [sp, #0]
 800b110:	f805 9b01 	strb.w	r9, [r5], #1
 800b114:	1aea      	subs	r2, r5, r3
 800b116:	9b01      	ldr	r3, [sp, #4]
 800b118:	4293      	cmp	r3, r2
 800b11a:	dd07      	ble.n	800b12c <_dtoa_r+0xb64>
 800b11c:	4651      	mov	r1, sl
 800b11e:	2300      	movs	r3, #0
 800b120:	220a      	movs	r2, #10
 800b122:	4620      	mov	r0, r4
 800b124:	f000 fd0e 	bl	800bb44 <__multadd>
 800b128:	4682      	mov	sl, r0
 800b12a:	e7ea      	b.n	800b102 <_dtoa_r+0xb3a>
 800b12c:	9b01      	ldr	r3, [sp, #4]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	bfc8      	it	gt
 800b132:	461d      	movgt	r5, r3
 800b134:	9b00      	ldr	r3, [sp, #0]
 800b136:	bfd8      	it	le
 800b138:	2501      	movle	r5, #1
 800b13a:	441d      	add	r5, r3
 800b13c:	f04f 0800 	mov.w	r8, #0
 800b140:	4651      	mov	r1, sl
 800b142:	2201      	movs	r2, #1
 800b144:	4620      	mov	r0, r4
 800b146:	f000 fef5 	bl	800bf34 <__lshift>
 800b14a:	4631      	mov	r1, r6
 800b14c:	4682      	mov	sl, r0
 800b14e:	f000 ff5d 	bl	800c00c <__mcmp>
 800b152:	2800      	cmp	r0, #0
 800b154:	dc96      	bgt.n	800b084 <_dtoa_r+0xabc>
 800b156:	d102      	bne.n	800b15e <_dtoa_r+0xb96>
 800b158:	f019 0f01 	tst.w	r9, #1
 800b15c:	d192      	bne.n	800b084 <_dtoa_r+0xabc>
 800b15e:	462b      	mov	r3, r5
 800b160:	461d      	mov	r5, r3
 800b162:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b166:	2a30      	cmp	r2, #48	; 0x30
 800b168:	d0fa      	beq.n	800b160 <_dtoa_r+0xb98>
 800b16a:	e6dd      	b.n	800af28 <_dtoa_r+0x960>
 800b16c:	9a00      	ldr	r2, [sp, #0]
 800b16e:	429a      	cmp	r2, r3
 800b170:	d189      	bne.n	800b086 <_dtoa_r+0xabe>
 800b172:	f10b 0b01 	add.w	fp, fp, #1
 800b176:	2331      	movs	r3, #49	; 0x31
 800b178:	e796      	b.n	800b0a8 <_dtoa_r+0xae0>
 800b17a:	4b0a      	ldr	r3, [pc, #40]	; (800b1a4 <_dtoa_r+0xbdc>)
 800b17c:	f7ff ba99 	b.w	800a6b2 <_dtoa_r+0xea>
 800b180:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b182:	2b00      	cmp	r3, #0
 800b184:	f47f aa6d 	bne.w	800a662 <_dtoa_r+0x9a>
 800b188:	4b07      	ldr	r3, [pc, #28]	; (800b1a8 <_dtoa_r+0xbe0>)
 800b18a:	f7ff ba92 	b.w	800a6b2 <_dtoa_r+0xea>
 800b18e:	9b01      	ldr	r3, [sp, #4]
 800b190:	2b00      	cmp	r3, #0
 800b192:	dcb5      	bgt.n	800b100 <_dtoa_r+0xb38>
 800b194:	9b07      	ldr	r3, [sp, #28]
 800b196:	2b02      	cmp	r3, #2
 800b198:	f73f aeb1 	bgt.w	800aefe <_dtoa_r+0x936>
 800b19c:	e7b0      	b.n	800b100 <_dtoa_r+0xb38>
 800b19e:	bf00      	nop
 800b1a0:	0800d726 	.word	0x0800d726
 800b1a4:	0800d679 	.word	0x0800d679
 800b1a8:	0800d6aa 	.word	0x0800d6aa

0800b1ac <_free_r>:
 800b1ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1ae:	2900      	cmp	r1, #0
 800b1b0:	d044      	beq.n	800b23c <_free_r+0x90>
 800b1b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1b6:	9001      	str	r0, [sp, #4]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	f1a1 0404 	sub.w	r4, r1, #4
 800b1be:	bfb8      	it	lt
 800b1c0:	18e4      	addlt	r4, r4, r3
 800b1c2:	f000 fc51 	bl	800ba68 <__malloc_lock>
 800b1c6:	4a1e      	ldr	r2, [pc, #120]	; (800b240 <_free_r+0x94>)
 800b1c8:	9801      	ldr	r0, [sp, #4]
 800b1ca:	6813      	ldr	r3, [r2, #0]
 800b1cc:	b933      	cbnz	r3, 800b1dc <_free_r+0x30>
 800b1ce:	6063      	str	r3, [r4, #4]
 800b1d0:	6014      	str	r4, [r2, #0]
 800b1d2:	b003      	add	sp, #12
 800b1d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1d8:	f000 bc4c 	b.w	800ba74 <__malloc_unlock>
 800b1dc:	42a3      	cmp	r3, r4
 800b1de:	d908      	bls.n	800b1f2 <_free_r+0x46>
 800b1e0:	6825      	ldr	r5, [r4, #0]
 800b1e2:	1961      	adds	r1, r4, r5
 800b1e4:	428b      	cmp	r3, r1
 800b1e6:	bf01      	itttt	eq
 800b1e8:	6819      	ldreq	r1, [r3, #0]
 800b1ea:	685b      	ldreq	r3, [r3, #4]
 800b1ec:	1949      	addeq	r1, r1, r5
 800b1ee:	6021      	streq	r1, [r4, #0]
 800b1f0:	e7ed      	b.n	800b1ce <_free_r+0x22>
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	b10b      	cbz	r3, 800b1fc <_free_r+0x50>
 800b1f8:	42a3      	cmp	r3, r4
 800b1fa:	d9fa      	bls.n	800b1f2 <_free_r+0x46>
 800b1fc:	6811      	ldr	r1, [r2, #0]
 800b1fe:	1855      	adds	r5, r2, r1
 800b200:	42a5      	cmp	r5, r4
 800b202:	d10b      	bne.n	800b21c <_free_r+0x70>
 800b204:	6824      	ldr	r4, [r4, #0]
 800b206:	4421      	add	r1, r4
 800b208:	1854      	adds	r4, r2, r1
 800b20a:	42a3      	cmp	r3, r4
 800b20c:	6011      	str	r1, [r2, #0]
 800b20e:	d1e0      	bne.n	800b1d2 <_free_r+0x26>
 800b210:	681c      	ldr	r4, [r3, #0]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	6053      	str	r3, [r2, #4]
 800b216:	440c      	add	r4, r1
 800b218:	6014      	str	r4, [r2, #0]
 800b21a:	e7da      	b.n	800b1d2 <_free_r+0x26>
 800b21c:	d902      	bls.n	800b224 <_free_r+0x78>
 800b21e:	230c      	movs	r3, #12
 800b220:	6003      	str	r3, [r0, #0]
 800b222:	e7d6      	b.n	800b1d2 <_free_r+0x26>
 800b224:	6825      	ldr	r5, [r4, #0]
 800b226:	1961      	adds	r1, r4, r5
 800b228:	428b      	cmp	r3, r1
 800b22a:	bf04      	itt	eq
 800b22c:	6819      	ldreq	r1, [r3, #0]
 800b22e:	685b      	ldreq	r3, [r3, #4]
 800b230:	6063      	str	r3, [r4, #4]
 800b232:	bf04      	itt	eq
 800b234:	1949      	addeq	r1, r1, r5
 800b236:	6021      	streq	r1, [r4, #0]
 800b238:	6054      	str	r4, [r2, #4]
 800b23a:	e7ca      	b.n	800b1d2 <_free_r+0x26>
 800b23c:	b003      	add	sp, #12
 800b23e:	bd30      	pop	{r4, r5, pc}
 800b240:	200008a8 	.word	0x200008a8

0800b244 <rshift>:
 800b244:	6903      	ldr	r3, [r0, #16]
 800b246:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b24a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b24e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b252:	f100 0414 	add.w	r4, r0, #20
 800b256:	dd45      	ble.n	800b2e4 <rshift+0xa0>
 800b258:	f011 011f 	ands.w	r1, r1, #31
 800b25c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b260:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b264:	d10c      	bne.n	800b280 <rshift+0x3c>
 800b266:	f100 0710 	add.w	r7, r0, #16
 800b26a:	4629      	mov	r1, r5
 800b26c:	42b1      	cmp	r1, r6
 800b26e:	d334      	bcc.n	800b2da <rshift+0x96>
 800b270:	1a9b      	subs	r3, r3, r2
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	1eea      	subs	r2, r5, #3
 800b276:	4296      	cmp	r6, r2
 800b278:	bf38      	it	cc
 800b27a:	2300      	movcc	r3, #0
 800b27c:	4423      	add	r3, r4
 800b27e:	e015      	b.n	800b2ac <rshift+0x68>
 800b280:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b284:	f1c1 0820 	rsb	r8, r1, #32
 800b288:	40cf      	lsrs	r7, r1
 800b28a:	f105 0e04 	add.w	lr, r5, #4
 800b28e:	46a1      	mov	r9, r4
 800b290:	4576      	cmp	r6, lr
 800b292:	46f4      	mov	ip, lr
 800b294:	d815      	bhi.n	800b2c2 <rshift+0x7e>
 800b296:	1a9a      	subs	r2, r3, r2
 800b298:	0092      	lsls	r2, r2, #2
 800b29a:	3a04      	subs	r2, #4
 800b29c:	3501      	adds	r5, #1
 800b29e:	42ae      	cmp	r6, r5
 800b2a0:	bf38      	it	cc
 800b2a2:	2200      	movcc	r2, #0
 800b2a4:	18a3      	adds	r3, r4, r2
 800b2a6:	50a7      	str	r7, [r4, r2]
 800b2a8:	b107      	cbz	r7, 800b2ac <rshift+0x68>
 800b2aa:	3304      	adds	r3, #4
 800b2ac:	1b1a      	subs	r2, r3, r4
 800b2ae:	42a3      	cmp	r3, r4
 800b2b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b2b4:	bf08      	it	eq
 800b2b6:	2300      	moveq	r3, #0
 800b2b8:	6102      	str	r2, [r0, #16]
 800b2ba:	bf08      	it	eq
 800b2bc:	6143      	streq	r3, [r0, #20]
 800b2be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2c2:	f8dc c000 	ldr.w	ip, [ip]
 800b2c6:	fa0c fc08 	lsl.w	ip, ip, r8
 800b2ca:	ea4c 0707 	orr.w	r7, ip, r7
 800b2ce:	f849 7b04 	str.w	r7, [r9], #4
 800b2d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b2d6:	40cf      	lsrs	r7, r1
 800b2d8:	e7da      	b.n	800b290 <rshift+0x4c>
 800b2da:	f851 cb04 	ldr.w	ip, [r1], #4
 800b2de:	f847 cf04 	str.w	ip, [r7, #4]!
 800b2e2:	e7c3      	b.n	800b26c <rshift+0x28>
 800b2e4:	4623      	mov	r3, r4
 800b2e6:	e7e1      	b.n	800b2ac <rshift+0x68>

0800b2e8 <__hexdig_fun>:
 800b2e8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b2ec:	2b09      	cmp	r3, #9
 800b2ee:	d802      	bhi.n	800b2f6 <__hexdig_fun+0xe>
 800b2f0:	3820      	subs	r0, #32
 800b2f2:	b2c0      	uxtb	r0, r0
 800b2f4:	4770      	bx	lr
 800b2f6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b2fa:	2b05      	cmp	r3, #5
 800b2fc:	d801      	bhi.n	800b302 <__hexdig_fun+0x1a>
 800b2fe:	3847      	subs	r0, #71	; 0x47
 800b300:	e7f7      	b.n	800b2f2 <__hexdig_fun+0xa>
 800b302:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b306:	2b05      	cmp	r3, #5
 800b308:	d801      	bhi.n	800b30e <__hexdig_fun+0x26>
 800b30a:	3827      	subs	r0, #39	; 0x27
 800b30c:	e7f1      	b.n	800b2f2 <__hexdig_fun+0xa>
 800b30e:	2000      	movs	r0, #0
 800b310:	4770      	bx	lr
	...

0800b314 <__gethex>:
 800b314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b318:	4617      	mov	r7, r2
 800b31a:	680a      	ldr	r2, [r1, #0]
 800b31c:	b085      	sub	sp, #20
 800b31e:	f102 0b02 	add.w	fp, r2, #2
 800b322:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b326:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b32a:	4681      	mov	r9, r0
 800b32c:	468a      	mov	sl, r1
 800b32e:	9302      	str	r3, [sp, #8]
 800b330:	32fe      	adds	r2, #254	; 0xfe
 800b332:	eb02 030b 	add.w	r3, r2, fp
 800b336:	46d8      	mov	r8, fp
 800b338:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b33c:	9301      	str	r3, [sp, #4]
 800b33e:	2830      	cmp	r0, #48	; 0x30
 800b340:	d0f7      	beq.n	800b332 <__gethex+0x1e>
 800b342:	f7ff ffd1 	bl	800b2e8 <__hexdig_fun>
 800b346:	4604      	mov	r4, r0
 800b348:	2800      	cmp	r0, #0
 800b34a:	d138      	bne.n	800b3be <__gethex+0xaa>
 800b34c:	49a7      	ldr	r1, [pc, #668]	; (800b5ec <__gethex+0x2d8>)
 800b34e:	2201      	movs	r2, #1
 800b350:	4640      	mov	r0, r8
 800b352:	f7fe fff4 	bl	800a33e <strncmp>
 800b356:	4606      	mov	r6, r0
 800b358:	2800      	cmp	r0, #0
 800b35a:	d169      	bne.n	800b430 <__gethex+0x11c>
 800b35c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b360:	465d      	mov	r5, fp
 800b362:	f7ff ffc1 	bl	800b2e8 <__hexdig_fun>
 800b366:	2800      	cmp	r0, #0
 800b368:	d064      	beq.n	800b434 <__gethex+0x120>
 800b36a:	465a      	mov	r2, fp
 800b36c:	7810      	ldrb	r0, [r2, #0]
 800b36e:	2830      	cmp	r0, #48	; 0x30
 800b370:	4690      	mov	r8, r2
 800b372:	f102 0201 	add.w	r2, r2, #1
 800b376:	d0f9      	beq.n	800b36c <__gethex+0x58>
 800b378:	f7ff ffb6 	bl	800b2e8 <__hexdig_fun>
 800b37c:	2301      	movs	r3, #1
 800b37e:	fab0 f480 	clz	r4, r0
 800b382:	0964      	lsrs	r4, r4, #5
 800b384:	465e      	mov	r6, fp
 800b386:	9301      	str	r3, [sp, #4]
 800b388:	4642      	mov	r2, r8
 800b38a:	4615      	mov	r5, r2
 800b38c:	3201      	adds	r2, #1
 800b38e:	7828      	ldrb	r0, [r5, #0]
 800b390:	f7ff ffaa 	bl	800b2e8 <__hexdig_fun>
 800b394:	2800      	cmp	r0, #0
 800b396:	d1f8      	bne.n	800b38a <__gethex+0x76>
 800b398:	4994      	ldr	r1, [pc, #592]	; (800b5ec <__gethex+0x2d8>)
 800b39a:	2201      	movs	r2, #1
 800b39c:	4628      	mov	r0, r5
 800b39e:	f7fe ffce 	bl	800a33e <strncmp>
 800b3a2:	b978      	cbnz	r0, 800b3c4 <__gethex+0xb0>
 800b3a4:	b946      	cbnz	r6, 800b3b8 <__gethex+0xa4>
 800b3a6:	1c6e      	adds	r6, r5, #1
 800b3a8:	4632      	mov	r2, r6
 800b3aa:	4615      	mov	r5, r2
 800b3ac:	3201      	adds	r2, #1
 800b3ae:	7828      	ldrb	r0, [r5, #0]
 800b3b0:	f7ff ff9a 	bl	800b2e8 <__hexdig_fun>
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	d1f8      	bne.n	800b3aa <__gethex+0x96>
 800b3b8:	1b73      	subs	r3, r6, r5
 800b3ba:	009e      	lsls	r6, r3, #2
 800b3bc:	e004      	b.n	800b3c8 <__gethex+0xb4>
 800b3be:	2400      	movs	r4, #0
 800b3c0:	4626      	mov	r6, r4
 800b3c2:	e7e1      	b.n	800b388 <__gethex+0x74>
 800b3c4:	2e00      	cmp	r6, #0
 800b3c6:	d1f7      	bne.n	800b3b8 <__gethex+0xa4>
 800b3c8:	782b      	ldrb	r3, [r5, #0]
 800b3ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b3ce:	2b50      	cmp	r3, #80	; 0x50
 800b3d0:	d13d      	bne.n	800b44e <__gethex+0x13a>
 800b3d2:	786b      	ldrb	r3, [r5, #1]
 800b3d4:	2b2b      	cmp	r3, #43	; 0x2b
 800b3d6:	d02f      	beq.n	800b438 <__gethex+0x124>
 800b3d8:	2b2d      	cmp	r3, #45	; 0x2d
 800b3da:	d031      	beq.n	800b440 <__gethex+0x12c>
 800b3dc:	1c69      	adds	r1, r5, #1
 800b3de:	f04f 0b00 	mov.w	fp, #0
 800b3e2:	7808      	ldrb	r0, [r1, #0]
 800b3e4:	f7ff ff80 	bl	800b2e8 <__hexdig_fun>
 800b3e8:	1e42      	subs	r2, r0, #1
 800b3ea:	b2d2      	uxtb	r2, r2
 800b3ec:	2a18      	cmp	r2, #24
 800b3ee:	d82e      	bhi.n	800b44e <__gethex+0x13a>
 800b3f0:	f1a0 0210 	sub.w	r2, r0, #16
 800b3f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b3f8:	f7ff ff76 	bl	800b2e8 <__hexdig_fun>
 800b3fc:	f100 3cff 	add.w	ip, r0, #4294967295
 800b400:	fa5f fc8c 	uxtb.w	ip, ip
 800b404:	f1bc 0f18 	cmp.w	ip, #24
 800b408:	d91d      	bls.n	800b446 <__gethex+0x132>
 800b40a:	f1bb 0f00 	cmp.w	fp, #0
 800b40e:	d000      	beq.n	800b412 <__gethex+0xfe>
 800b410:	4252      	negs	r2, r2
 800b412:	4416      	add	r6, r2
 800b414:	f8ca 1000 	str.w	r1, [sl]
 800b418:	b1dc      	cbz	r4, 800b452 <__gethex+0x13e>
 800b41a:	9b01      	ldr	r3, [sp, #4]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	bf14      	ite	ne
 800b420:	f04f 0800 	movne.w	r8, #0
 800b424:	f04f 0806 	moveq.w	r8, #6
 800b428:	4640      	mov	r0, r8
 800b42a:	b005      	add	sp, #20
 800b42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b430:	4645      	mov	r5, r8
 800b432:	4626      	mov	r6, r4
 800b434:	2401      	movs	r4, #1
 800b436:	e7c7      	b.n	800b3c8 <__gethex+0xb4>
 800b438:	f04f 0b00 	mov.w	fp, #0
 800b43c:	1ca9      	adds	r1, r5, #2
 800b43e:	e7d0      	b.n	800b3e2 <__gethex+0xce>
 800b440:	f04f 0b01 	mov.w	fp, #1
 800b444:	e7fa      	b.n	800b43c <__gethex+0x128>
 800b446:	230a      	movs	r3, #10
 800b448:	fb03 0002 	mla	r0, r3, r2, r0
 800b44c:	e7d0      	b.n	800b3f0 <__gethex+0xdc>
 800b44e:	4629      	mov	r1, r5
 800b450:	e7e0      	b.n	800b414 <__gethex+0x100>
 800b452:	eba5 0308 	sub.w	r3, r5, r8
 800b456:	3b01      	subs	r3, #1
 800b458:	4621      	mov	r1, r4
 800b45a:	2b07      	cmp	r3, #7
 800b45c:	dc0a      	bgt.n	800b474 <__gethex+0x160>
 800b45e:	4648      	mov	r0, r9
 800b460:	f000 fb0e 	bl	800ba80 <_Balloc>
 800b464:	4604      	mov	r4, r0
 800b466:	b940      	cbnz	r0, 800b47a <__gethex+0x166>
 800b468:	4b61      	ldr	r3, [pc, #388]	; (800b5f0 <__gethex+0x2dc>)
 800b46a:	4602      	mov	r2, r0
 800b46c:	21e4      	movs	r1, #228	; 0xe4
 800b46e:	4861      	ldr	r0, [pc, #388]	; (800b5f4 <__gethex+0x2e0>)
 800b470:	f001 f9f0 	bl	800c854 <__assert_func>
 800b474:	3101      	adds	r1, #1
 800b476:	105b      	asrs	r3, r3, #1
 800b478:	e7ef      	b.n	800b45a <__gethex+0x146>
 800b47a:	f100 0a14 	add.w	sl, r0, #20
 800b47e:	2300      	movs	r3, #0
 800b480:	495a      	ldr	r1, [pc, #360]	; (800b5ec <__gethex+0x2d8>)
 800b482:	f8cd a004 	str.w	sl, [sp, #4]
 800b486:	469b      	mov	fp, r3
 800b488:	45a8      	cmp	r8, r5
 800b48a:	d342      	bcc.n	800b512 <__gethex+0x1fe>
 800b48c:	9801      	ldr	r0, [sp, #4]
 800b48e:	f840 bb04 	str.w	fp, [r0], #4
 800b492:	eba0 000a 	sub.w	r0, r0, sl
 800b496:	1080      	asrs	r0, r0, #2
 800b498:	6120      	str	r0, [r4, #16]
 800b49a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b49e:	4658      	mov	r0, fp
 800b4a0:	f000 fbe0 	bl	800bc64 <__hi0bits>
 800b4a4:	683d      	ldr	r5, [r7, #0]
 800b4a6:	eba8 0000 	sub.w	r0, r8, r0
 800b4aa:	42a8      	cmp	r0, r5
 800b4ac:	dd59      	ble.n	800b562 <__gethex+0x24e>
 800b4ae:	eba0 0805 	sub.w	r8, r0, r5
 800b4b2:	4641      	mov	r1, r8
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f000 ff6f 	bl	800c398 <__any_on>
 800b4ba:	4683      	mov	fp, r0
 800b4bc:	b1b8      	cbz	r0, 800b4ee <__gethex+0x1da>
 800b4be:	f108 33ff 	add.w	r3, r8, #4294967295
 800b4c2:	1159      	asrs	r1, r3, #5
 800b4c4:	f003 021f 	and.w	r2, r3, #31
 800b4c8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b4cc:	f04f 0b01 	mov.w	fp, #1
 800b4d0:	fa0b f202 	lsl.w	r2, fp, r2
 800b4d4:	420a      	tst	r2, r1
 800b4d6:	d00a      	beq.n	800b4ee <__gethex+0x1da>
 800b4d8:	455b      	cmp	r3, fp
 800b4da:	dd06      	ble.n	800b4ea <__gethex+0x1d6>
 800b4dc:	f1a8 0102 	sub.w	r1, r8, #2
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	f000 ff59 	bl	800c398 <__any_on>
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	d138      	bne.n	800b55c <__gethex+0x248>
 800b4ea:	f04f 0b02 	mov.w	fp, #2
 800b4ee:	4641      	mov	r1, r8
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	f7ff fea7 	bl	800b244 <rshift>
 800b4f6:	4446      	add	r6, r8
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	42b3      	cmp	r3, r6
 800b4fc:	da41      	bge.n	800b582 <__gethex+0x26e>
 800b4fe:	4621      	mov	r1, r4
 800b500:	4648      	mov	r0, r9
 800b502:	f000 fafd 	bl	800bb00 <_Bfree>
 800b506:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b508:	2300      	movs	r3, #0
 800b50a:	6013      	str	r3, [r2, #0]
 800b50c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b510:	e78a      	b.n	800b428 <__gethex+0x114>
 800b512:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b516:	2a2e      	cmp	r2, #46	; 0x2e
 800b518:	d014      	beq.n	800b544 <__gethex+0x230>
 800b51a:	2b20      	cmp	r3, #32
 800b51c:	d106      	bne.n	800b52c <__gethex+0x218>
 800b51e:	9b01      	ldr	r3, [sp, #4]
 800b520:	f843 bb04 	str.w	fp, [r3], #4
 800b524:	f04f 0b00 	mov.w	fp, #0
 800b528:	9301      	str	r3, [sp, #4]
 800b52a:	465b      	mov	r3, fp
 800b52c:	7828      	ldrb	r0, [r5, #0]
 800b52e:	9303      	str	r3, [sp, #12]
 800b530:	f7ff feda 	bl	800b2e8 <__hexdig_fun>
 800b534:	9b03      	ldr	r3, [sp, #12]
 800b536:	f000 000f 	and.w	r0, r0, #15
 800b53a:	4098      	lsls	r0, r3
 800b53c:	ea4b 0b00 	orr.w	fp, fp, r0
 800b540:	3304      	adds	r3, #4
 800b542:	e7a1      	b.n	800b488 <__gethex+0x174>
 800b544:	45a8      	cmp	r8, r5
 800b546:	d8e8      	bhi.n	800b51a <__gethex+0x206>
 800b548:	2201      	movs	r2, #1
 800b54a:	4628      	mov	r0, r5
 800b54c:	9303      	str	r3, [sp, #12]
 800b54e:	f7fe fef6 	bl	800a33e <strncmp>
 800b552:	4926      	ldr	r1, [pc, #152]	; (800b5ec <__gethex+0x2d8>)
 800b554:	9b03      	ldr	r3, [sp, #12]
 800b556:	2800      	cmp	r0, #0
 800b558:	d1df      	bne.n	800b51a <__gethex+0x206>
 800b55a:	e795      	b.n	800b488 <__gethex+0x174>
 800b55c:	f04f 0b03 	mov.w	fp, #3
 800b560:	e7c5      	b.n	800b4ee <__gethex+0x1da>
 800b562:	da0b      	bge.n	800b57c <__gethex+0x268>
 800b564:	eba5 0800 	sub.w	r8, r5, r0
 800b568:	4621      	mov	r1, r4
 800b56a:	4642      	mov	r2, r8
 800b56c:	4648      	mov	r0, r9
 800b56e:	f000 fce1 	bl	800bf34 <__lshift>
 800b572:	eba6 0608 	sub.w	r6, r6, r8
 800b576:	4604      	mov	r4, r0
 800b578:	f100 0a14 	add.w	sl, r0, #20
 800b57c:	f04f 0b00 	mov.w	fp, #0
 800b580:	e7ba      	b.n	800b4f8 <__gethex+0x1e4>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	42b3      	cmp	r3, r6
 800b586:	dd73      	ble.n	800b670 <__gethex+0x35c>
 800b588:	1b9e      	subs	r6, r3, r6
 800b58a:	42b5      	cmp	r5, r6
 800b58c:	dc34      	bgt.n	800b5f8 <__gethex+0x2e4>
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2b02      	cmp	r3, #2
 800b592:	d023      	beq.n	800b5dc <__gethex+0x2c8>
 800b594:	2b03      	cmp	r3, #3
 800b596:	d025      	beq.n	800b5e4 <__gethex+0x2d0>
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d115      	bne.n	800b5c8 <__gethex+0x2b4>
 800b59c:	42b5      	cmp	r5, r6
 800b59e:	d113      	bne.n	800b5c8 <__gethex+0x2b4>
 800b5a0:	2d01      	cmp	r5, #1
 800b5a2:	d10b      	bne.n	800b5bc <__gethex+0x2a8>
 800b5a4:	9a02      	ldr	r2, [sp, #8]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6013      	str	r3, [r2, #0]
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	6123      	str	r3, [r4, #16]
 800b5ae:	f8ca 3000 	str.w	r3, [sl]
 800b5b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5b4:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b5b8:	601c      	str	r4, [r3, #0]
 800b5ba:	e735      	b.n	800b428 <__gethex+0x114>
 800b5bc:	1e69      	subs	r1, r5, #1
 800b5be:	4620      	mov	r0, r4
 800b5c0:	f000 feea 	bl	800c398 <__any_on>
 800b5c4:	2800      	cmp	r0, #0
 800b5c6:	d1ed      	bne.n	800b5a4 <__gethex+0x290>
 800b5c8:	4621      	mov	r1, r4
 800b5ca:	4648      	mov	r0, r9
 800b5cc:	f000 fa98 	bl	800bb00 <_Bfree>
 800b5d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	6013      	str	r3, [r2, #0]
 800b5d6:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b5da:	e725      	b.n	800b428 <__gethex+0x114>
 800b5dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d1f2      	bne.n	800b5c8 <__gethex+0x2b4>
 800b5e2:	e7df      	b.n	800b5a4 <__gethex+0x290>
 800b5e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d1dc      	bne.n	800b5a4 <__gethex+0x290>
 800b5ea:	e7ed      	b.n	800b5c8 <__gethex+0x2b4>
 800b5ec:	0800d514 	.word	0x0800d514
 800b5f0:	0800d726 	.word	0x0800d726
 800b5f4:	0800d737 	.word	0x0800d737
 800b5f8:	f106 38ff 	add.w	r8, r6, #4294967295
 800b5fc:	f1bb 0f00 	cmp.w	fp, #0
 800b600:	d133      	bne.n	800b66a <__gethex+0x356>
 800b602:	f1b8 0f00 	cmp.w	r8, #0
 800b606:	d004      	beq.n	800b612 <__gethex+0x2fe>
 800b608:	4641      	mov	r1, r8
 800b60a:	4620      	mov	r0, r4
 800b60c:	f000 fec4 	bl	800c398 <__any_on>
 800b610:	4683      	mov	fp, r0
 800b612:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b616:	2301      	movs	r3, #1
 800b618:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b61c:	f008 081f 	and.w	r8, r8, #31
 800b620:	fa03 f308 	lsl.w	r3, r3, r8
 800b624:	4213      	tst	r3, r2
 800b626:	4631      	mov	r1, r6
 800b628:	4620      	mov	r0, r4
 800b62a:	bf18      	it	ne
 800b62c:	f04b 0b02 	orrne.w	fp, fp, #2
 800b630:	1bad      	subs	r5, r5, r6
 800b632:	f7ff fe07 	bl	800b244 <rshift>
 800b636:	687e      	ldr	r6, [r7, #4]
 800b638:	f04f 0802 	mov.w	r8, #2
 800b63c:	f1bb 0f00 	cmp.w	fp, #0
 800b640:	d04a      	beq.n	800b6d8 <__gethex+0x3c4>
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2b02      	cmp	r3, #2
 800b646:	d016      	beq.n	800b676 <__gethex+0x362>
 800b648:	2b03      	cmp	r3, #3
 800b64a:	d018      	beq.n	800b67e <__gethex+0x36a>
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d109      	bne.n	800b664 <__gethex+0x350>
 800b650:	f01b 0f02 	tst.w	fp, #2
 800b654:	d006      	beq.n	800b664 <__gethex+0x350>
 800b656:	f8da 3000 	ldr.w	r3, [sl]
 800b65a:	ea4b 0b03 	orr.w	fp, fp, r3
 800b65e:	f01b 0f01 	tst.w	fp, #1
 800b662:	d10f      	bne.n	800b684 <__gethex+0x370>
 800b664:	f048 0810 	orr.w	r8, r8, #16
 800b668:	e036      	b.n	800b6d8 <__gethex+0x3c4>
 800b66a:	f04f 0b01 	mov.w	fp, #1
 800b66e:	e7d0      	b.n	800b612 <__gethex+0x2fe>
 800b670:	f04f 0801 	mov.w	r8, #1
 800b674:	e7e2      	b.n	800b63c <__gethex+0x328>
 800b676:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b678:	f1c3 0301 	rsb	r3, r3, #1
 800b67c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b67e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b680:	2b00      	cmp	r3, #0
 800b682:	d0ef      	beq.n	800b664 <__gethex+0x350>
 800b684:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b688:	f104 0214 	add.w	r2, r4, #20
 800b68c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b690:	9301      	str	r3, [sp, #4]
 800b692:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b696:	2300      	movs	r3, #0
 800b698:	4694      	mov	ip, r2
 800b69a:	f852 1b04 	ldr.w	r1, [r2], #4
 800b69e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b6a2:	d01e      	beq.n	800b6e2 <__gethex+0x3ce>
 800b6a4:	3101      	adds	r1, #1
 800b6a6:	f8cc 1000 	str.w	r1, [ip]
 800b6aa:	f1b8 0f02 	cmp.w	r8, #2
 800b6ae:	f104 0214 	add.w	r2, r4, #20
 800b6b2:	d13d      	bne.n	800b730 <__gethex+0x41c>
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	3b01      	subs	r3, #1
 800b6b8:	42ab      	cmp	r3, r5
 800b6ba:	d10b      	bne.n	800b6d4 <__gethex+0x3c0>
 800b6bc:	1169      	asrs	r1, r5, #5
 800b6be:	2301      	movs	r3, #1
 800b6c0:	f005 051f 	and.w	r5, r5, #31
 800b6c4:	fa03 f505 	lsl.w	r5, r3, r5
 800b6c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b6cc:	421d      	tst	r5, r3
 800b6ce:	bf18      	it	ne
 800b6d0:	f04f 0801 	movne.w	r8, #1
 800b6d4:	f048 0820 	orr.w	r8, r8, #32
 800b6d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6da:	601c      	str	r4, [r3, #0]
 800b6dc:	9b02      	ldr	r3, [sp, #8]
 800b6de:	601e      	str	r6, [r3, #0]
 800b6e0:	e6a2      	b.n	800b428 <__gethex+0x114>
 800b6e2:	4290      	cmp	r0, r2
 800b6e4:	f842 3c04 	str.w	r3, [r2, #-4]
 800b6e8:	d8d6      	bhi.n	800b698 <__gethex+0x384>
 800b6ea:	68a2      	ldr	r2, [r4, #8]
 800b6ec:	4593      	cmp	fp, r2
 800b6ee:	db17      	blt.n	800b720 <__gethex+0x40c>
 800b6f0:	6861      	ldr	r1, [r4, #4]
 800b6f2:	4648      	mov	r0, r9
 800b6f4:	3101      	adds	r1, #1
 800b6f6:	f000 f9c3 	bl	800ba80 <_Balloc>
 800b6fa:	4682      	mov	sl, r0
 800b6fc:	b918      	cbnz	r0, 800b706 <__gethex+0x3f2>
 800b6fe:	4b1b      	ldr	r3, [pc, #108]	; (800b76c <__gethex+0x458>)
 800b700:	4602      	mov	r2, r0
 800b702:	2184      	movs	r1, #132	; 0x84
 800b704:	e6b3      	b.n	800b46e <__gethex+0x15a>
 800b706:	6922      	ldr	r2, [r4, #16]
 800b708:	3202      	adds	r2, #2
 800b70a:	f104 010c 	add.w	r1, r4, #12
 800b70e:	0092      	lsls	r2, r2, #2
 800b710:	300c      	adds	r0, #12
 800b712:	f7fe feb0 	bl	800a476 <memcpy>
 800b716:	4621      	mov	r1, r4
 800b718:	4648      	mov	r0, r9
 800b71a:	f000 f9f1 	bl	800bb00 <_Bfree>
 800b71e:	4654      	mov	r4, sl
 800b720:	6922      	ldr	r2, [r4, #16]
 800b722:	1c51      	adds	r1, r2, #1
 800b724:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b728:	6121      	str	r1, [r4, #16]
 800b72a:	2101      	movs	r1, #1
 800b72c:	6151      	str	r1, [r2, #20]
 800b72e:	e7bc      	b.n	800b6aa <__gethex+0x396>
 800b730:	6921      	ldr	r1, [r4, #16]
 800b732:	4559      	cmp	r1, fp
 800b734:	dd0b      	ble.n	800b74e <__gethex+0x43a>
 800b736:	2101      	movs	r1, #1
 800b738:	4620      	mov	r0, r4
 800b73a:	f7ff fd83 	bl	800b244 <rshift>
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	3601      	adds	r6, #1
 800b742:	42b3      	cmp	r3, r6
 800b744:	f6ff aedb 	blt.w	800b4fe <__gethex+0x1ea>
 800b748:	f04f 0801 	mov.w	r8, #1
 800b74c:	e7c2      	b.n	800b6d4 <__gethex+0x3c0>
 800b74e:	f015 051f 	ands.w	r5, r5, #31
 800b752:	d0f9      	beq.n	800b748 <__gethex+0x434>
 800b754:	9b01      	ldr	r3, [sp, #4]
 800b756:	441a      	add	r2, r3
 800b758:	f1c5 0520 	rsb	r5, r5, #32
 800b75c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b760:	f000 fa80 	bl	800bc64 <__hi0bits>
 800b764:	42a8      	cmp	r0, r5
 800b766:	dbe6      	blt.n	800b736 <__gethex+0x422>
 800b768:	e7ee      	b.n	800b748 <__gethex+0x434>
 800b76a:	bf00      	nop
 800b76c:	0800d726 	.word	0x0800d726

0800b770 <L_shift>:
 800b770:	f1c2 0208 	rsb	r2, r2, #8
 800b774:	0092      	lsls	r2, r2, #2
 800b776:	b570      	push	{r4, r5, r6, lr}
 800b778:	f1c2 0620 	rsb	r6, r2, #32
 800b77c:	6843      	ldr	r3, [r0, #4]
 800b77e:	6804      	ldr	r4, [r0, #0]
 800b780:	fa03 f506 	lsl.w	r5, r3, r6
 800b784:	432c      	orrs	r4, r5
 800b786:	40d3      	lsrs	r3, r2
 800b788:	6004      	str	r4, [r0, #0]
 800b78a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b78e:	4288      	cmp	r0, r1
 800b790:	d3f4      	bcc.n	800b77c <L_shift+0xc>
 800b792:	bd70      	pop	{r4, r5, r6, pc}

0800b794 <__match>:
 800b794:	b530      	push	{r4, r5, lr}
 800b796:	6803      	ldr	r3, [r0, #0]
 800b798:	3301      	adds	r3, #1
 800b79a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b79e:	b914      	cbnz	r4, 800b7a6 <__match+0x12>
 800b7a0:	6003      	str	r3, [r0, #0]
 800b7a2:	2001      	movs	r0, #1
 800b7a4:	bd30      	pop	{r4, r5, pc}
 800b7a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7aa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b7ae:	2d19      	cmp	r5, #25
 800b7b0:	bf98      	it	ls
 800b7b2:	3220      	addls	r2, #32
 800b7b4:	42a2      	cmp	r2, r4
 800b7b6:	d0f0      	beq.n	800b79a <__match+0x6>
 800b7b8:	2000      	movs	r0, #0
 800b7ba:	e7f3      	b.n	800b7a4 <__match+0x10>

0800b7bc <__hexnan>:
 800b7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c0:	680b      	ldr	r3, [r1, #0]
 800b7c2:	6801      	ldr	r1, [r0, #0]
 800b7c4:	115e      	asrs	r6, r3, #5
 800b7c6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b7ca:	f013 031f 	ands.w	r3, r3, #31
 800b7ce:	b087      	sub	sp, #28
 800b7d0:	bf18      	it	ne
 800b7d2:	3604      	addne	r6, #4
 800b7d4:	2500      	movs	r5, #0
 800b7d6:	1f37      	subs	r7, r6, #4
 800b7d8:	4682      	mov	sl, r0
 800b7da:	4690      	mov	r8, r2
 800b7dc:	9301      	str	r3, [sp, #4]
 800b7de:	f846 5c04 	str.w	r5, [r6, #-4]
 800b7e2:	46b9      	mov	r9, r7
 800b7e4:	463c      	mov	r4, r7
 800b7e6:	9502      	str	r5, [sp, #8]
 800b7e8:	46ab      	mov	fp, r5
 800b7ea:	784a      	ldrb	r2, [r1, #1]
 800b7ec:	1c4b      	adds	r3, r1, #1
 800b7ee:	9303      	str	r3, [sp, #12]
 800b7f0:	b342      	cbz	r2, 800b844 <__hexnan+0x88>
 800b7f2:	4610      	mov	r0, r2
 800b7f4:	9105      	str	r1, [sp, #20]
 800b7f6:	9204      	str	r2, [sp, #16]
 800b7f8:	f7ff fd76 	bl	800b2e8 <__hexdig_fun>
 800b7fc:	2800      	cmp	r0, #0
 800b7fe:	d14f      	bne.n	800b8a0 <__hexnan+0xe4>
 800b800:	9a04      	ldr	r2, [sp, #16]
 800b802:	9905      	ldr	r1, [sp, #20]
 800b804:	2a20      	cmp	r2, #32
 800b806:	d818      	bhi.n	800b83a <__hexnan+0x7e>
 800b808:	9b02      	ldr	r3, [sp, #8]
 800b80a:	459b      	cmp	fp, r3
 800b80c:	dd13      	ble.n	800b836 <__hexnan+0x7a>
 800b80e:	454c      	cmp	r4, r9
 800b810:	d206      	bcs.n	800b820 <__hexnan+0x64>
 800b812:	2d07      	cmp	r5, #7
 800b814:	dc04      	bgt.n	800b820 <__hexnan+0x64>
 800b816:	462a      	mov	r2, r5
 800b818:	4649      	mov	r1, r9
 800b81a:	4620      	mov	r0, r4
 800b81c:	f7ff ffa8 	bl	800b770 <L_shift>
 800b820:	4544      	cmp	r4, r8
 800b822:	d950      	bls.n	800b8c6 <__hexnan+0x10a>
 800b824:	2300      	movs	r3, #0
 800b826:	f1a4 0904 	sub.w	r9, r4, #4
 800b82a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b82e:	f8cd b008 	str.w	fp, [sp, #8]
 800b832:	464c      	mov	r4, r9
 800b834:	461d      	mov	r5, r3
 800b836:	9903      	ldr	r1, [sp, #12]
 800b838:	e7d7      	b.n	800b7ea <__hexnan+0x2e>
 800b83a:	2a29      	cmp	r2, #41	; 0x29
 800b83c:	d155      	bne.n	800b8ea <__hexnan+0x12e>
 800b83e:	3102      	adds	r1, #2
 800b840:	f8ca 1000 	str.w	r1, [sl]
 800b844:	f1bb 0f00 	cmp.w	fp, #0
 800b848:	d04f      	beq.n	800b8ea <__hexnan+0x12e>
 800b84a:	454c      	cmp	r4, r9
 800b84c:	d206      	bcs.n	800b85c <__hexnan+0xa0>
 800b84e:	2d07      	cmp	r5, #7
 800b850:	dc04      	bgt.n	800b85c <__hexnan+0xa0>
 800b852:	462a      	mov	r2, r5
 800b854:	4649      	mov	r1, r9
 800b856:	4620      	mov	r0, r4
 800b858:	f7ff ff8a 	bl	800b770 <L_shift>
 800b85c:	4544      	cmp	r4, r8
 800b85e:	d934      	bls.n	800b8ca <__hexnan+0x10e>
 800b860:	f1a8 0204 	sub.w	r2, r8, #4
 800b864:	4623      	mov	r3, r4
 800b866:	f853 1b04 	ldr.w	r1, [r3], #4
 800b86a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b86e:	429f      	cmp	r7, r3
 800b870:	d2f9      	bcs.n	800b866 <__hexnan+0xaa>
 800b872:	1b3b      	subs	r3, r7, r4
 800b874:	f023 0303 	bic.w	r3, r3, #3
 800b878:	3304      	adds	r3, #4
 800b87a:	3e03      	subs	r6, #3
 800b87c:	3401      	adds	r4, #1
 800b87e:	42a6      	cmp	r6, r4
 800b880:	bf38      	it	cc
 800b882:	2304      	movcc	r3, #4
 800b884:	4443      	add	r3, r8
 800b886:	2200      	movs	r2, #0
 800b888:	f843 2b04 	str.w	r2, [r3], #4
 800b88c:	429f      	cmp	r7, r3
 800b88e:	d2fb      	bcs.n	800b888 <__hexnan+0xcc>
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	b91b      	cbnz	r3, 800b89c <__hexnan+0xe0>
 800b894:	4547      	cmp	r7, r8
 800b896:	d126      	bne.n	800b8e6 <__hexnan+0x12a>
 800b898:	2301      	movs	r3, #1
 800b89a:	603b      	str	r3, [r7, #0]
 800b89c:	2005      	movs	r0, #5
 800b89e:	e025      	b.n	800b8ec <__hexnan+0x130>
 800b8a0:	3501      	adds	r5, #1
 800b8a2:	2d08      	cmp	r5, #8
 800b8a4:	f10b 0b01 	add.w	fp, fp, #1
 800b8a8:	dd06      	ble.n	800b8b8 <__hexnan+0xfc>
 800b8aa:	4544      	cmp	r4, r8
 800b8ac:	d9c3      	bls.n	800b836 <__hexnan+0x7a>
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b8b4:	2501      	movs	r5, #1
 800b8b6:	3c04      	subs	r4, #4
 800b8b8:	6822      	ldr	r2, [r4, #0]
 800b8ba:	f000 000f 	and.w	r0, r0, #15
 800b8be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b8c2:	6020      	str	r0, [r4, #0]
 800b8c4:	e7b7      	b.n	800b836 <__hexnan+0x7a>
 800b8c6:	2508      	movs	r5, #8
 800b8c8:	e7b5      	b.n	800b836 <__hexnan+0x7a>
 800b8ca:	9b01      	ldr	r3, [sp, #4]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d0df      	beq.n	800b890 <__hexnan+0xd4>
 800b8d0:	f1c3 0320 	rsb	r3, r3, #32
 800b8d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b8d8:	40da      	lsrs	r2, r3
 800b8da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b8de:	4013      	ands	r3, r2
 800b8e0:	f846 3c04 	str.w	r3, [r6, #-4]
 800b8e4:	e7d4      	b.n	800b890 <__hexnan+0xd4>
 800b8e6:	3f04      	subs	r7, #4
 800b8e8:	e7d2      	b.n	800b890 <__hexnan+0xd4>
 800b8ea:	2004      	movs	r0, #4
 800b8ec:	b007      	add	sp, #28
 800b8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800b8f4 <malloc>:
 800b8f4:	4b02      	ldr	r3, [pc, #8]	; (800b900 <malloc+0xc>)
 800b8f6:	4601      	mov	r1, r0
 800b8f8:	6818      	ldr	r0, [r3, #0]
 800b8fa:	f000 b823 	b.w	800b944 <_malloc_r>
 800b8fe:	bf00      	nop
 800b900:	2000023c 	.word	0x2000023c

0800b904 <sbrk_aligned>:
 800b904:	b570      	push	{r4, r5, r6, lr}
 800b906:	4e0e      	ldr	r6, [pc, #56]	; (800b940 <sbrk_aligned+0x3c>)
 800b908:	460c      	mov	r4, r1
 800b90a:	6831      	ldr	r1, [r6, #0]
 800b90c:	4605      	mov	r5, r0
 800b90e:	b911      	cbnz	r1, 800b916 <sbrk_aligned+0x12>
 800b910:	f000 ff90 	bl	800c834 <_sbrk_r>
 800b914:	6030      	str	r0, [r6, #0]
 800b916:	4621      	mov	r1, r4
 800b918:	4628      	mov	r0, r5
 800b91a:	f000 ff8b 	bl	800c834 <_sbrk_r>
 800b91e:	1c43      	adds	r3, r0, #1
 800b920:	d00a      	beq.n	800b938 <sbrk_aligned+0x34>
 800b922:	1cc4      	adds	r4, r0, #3
 800b924:	f024 0403 	bic.w	r4, r4, #3
 800b928:	42a0      	cmp	r0, r4
 800b92a:	d007      	beq.n	800b93c <sbrk_aligned+0x38>
 800b92c:	1a21      	subs	r1, r4, r0
 800b92e:	4628      	mov	r0, r5
 800b930:	f000 ff80 	bl	800c834 <_sbrk_r>
 800b934:	3001      	adds	r0, #1
 800b936:	d101      	bne.n	800b93c <sbrk_aligned+0x38>
 800b938:	f04f 34ff 	mov.w	r4, #4294967295
 800b93c:	4620      	mov	r0, r4
 800b93e:	bd70      	pop	{r4, r5, r6, pc}
 800b940:	200008ac 	.word	0x200008ac

0800b944 <_malloc_r>:
 800b944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b948:	1ccd      	adds	r5, r1, #3
 800b94a:	f025 0503 	bic.w	r5, r5, #3
 800b94e:	3508      	adds	r5, #8
 800b950:	2d0c      	cmp	r5, #12
 800b952:	bf38      	it	cc
 800b954:	250c      	movcc	r5, #12
 800b956:	2d00      	cmp	r5, #0
 800b958:	4607      	mov	r7, r0
 800b95a:	db01      	blt.n	800b960 <_malloc_r+0x1c>
 800b95c:	42a9      	cmp	r1, r5
 800b95e:	d905      	bls.n	800b96c <_malloc_r+0x28>
 800b960:	230c      	movs	r3, #12
 800b962:	603b      	str	r3, [r7, #0]
 800b964:	2600      	movs	r6, #0
 800b966:	4630      	mov	r0, r6
 800b968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b96c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ba40 <_malloc_r+0xfc>
 800b970:	f000 f87a 	bl	800ba68 <__malloc_lock>
 800b974:	f8d8 3000 	ldr.w	r3, [r8]
 800b978:	461c      	mov	r4, r3
 800b97a:	bb5c      	cbnz	r4, 800b9d4 <_malloc_r+0x90>
 800b97c:	4629      	mov	r1, r5
 800b97e:	4638      	mov	r0, r7
 800b980:	f7ff ffc0 	bl	800b904 <sbrk_aligned>
 800b984:	1c43      	adds	r3, r0, #1
 800b986:	4604      	mov	r4, r0
 800b988:	d155      	bne.n	800ba36 <_malloc_r+0xf2>
 800b98a:	f8d8 4000 	ldr.w	r4, [r8]
 800b98e:	4626      	mov	r6, r4
 800b990:	2e00      	cmp	r6, #0
 800b992:	d145      	bne.n	800ba20 <_malloc_r+0xdc>
 800b994:	2c00      	cmp	r4, #0
 800b996:	d048      	beq.n	800ba2a <_malloc_r+0xe6>
 800b998:	6823      	ldr	r3, [r4, #0]
 800b99a:	4631      	mov	r1, r6
 800b99c:	4638      	mov	r0, r7
 800b99e:	eb04 0903 	add.w	r9, r4, r3
 800b9a2:	f000 ff47 	bl	800c834 <_sbrk_r>
 800b9a6:	4581      	cmp	r9, r0
 800b9a8:	d13f      	bne.n	800ba2a <_malloc_r+0xe6>
 800b9aa:	6821      	ldr	r1, [r4, #0]
 800b9ac:	1a6d      	subs	r5, r5, r1
 800b9ae:	4629      	mov	r1, r5
 800b9b0:	4638      	mov	r0, r7
 800b9b2:	f7ff ffa7 	bl	800b904 <sbrk_aligned>
 800b9b6:	3001      	adds	r0, #1
 800b9b8:	d037      	beq.n	800ba2a <_malloc_r+0xe6>
 800b9ba:	6823      	ldr	r3, [r4, #0]
 800b9bc:	442b      	add	r3, r5
 800b9be:	6023      	str	r3, [r4, #0]
 800b9c0:	f8d8 3000 	ldr.w	r3, [r8]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d038      	beq.n	800ba3a <_malloc_r+0xf6>
 800b9c8:	685a      	ldr	r2, [r3, #4]
 800b9ca:	42a2      	cmp	r2, r4
 800b9cc:	d12b      	bne.n	800ba26 <_malloc_r+0xe2>
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	605a      	str	r2, [r3, #4]
 800b9d2:	e00f      	b.n	800b9f4 <_malloc_r+0xb0>
 800b9d4:	6822      	ldr	r2, [r4, #0]
 800b9d6:	1b52      	subs	r2, r2, r5
 800b9d8:	d41f      	bmi.n	800ba1a <_malloc_r+0xd6>
 800b9da:	2a0b      	cmp	r2, #11
 800b9dc:	d917      	bls.n	800ba0e <_malloc_r+0xca>
 800b9de:	1961      	adds	r1, r4, r5
 800b9e0:	42a3      	cmp	r3, r4
 800b9e2:	6025      	str	r5, [r4, #0]
 800b9e4:	bf18      	it	ne
 800b9e6:	6059      	strne	r1, [r3, #4]
 800b9e8:	6863      	ldr	r3, [r4, #4]
 800b9ea:	bf08      	it	eq
 800b9ec:	f8c8 1000 	streq.w	r1, [r8]
 800b9f0:	5162      	str	r2, [r4, r5]
 800b9f2:	604b      	str	r3, [r1, #4]
 800b9f4:	4638      	mov	r0, r7
 800b9f6:	f104 060b 	add.w	r6, r4, #11
 800b9fa:	f000 f83b 	bl	800ba74 <__malloc_unlock>
 800b9fe:	f026 0607 	bic.w	r6, r6, #7
 800ba02:	1d23      	adds	r3, r4, #4
 800ba04:	1af2      	subs	r2, r6, r3
 800ba06:	d0ae      	beq.n	800b966 <_malloc_r+0x22>
 800ba08:	1b9b      	subs	r3, r3, r6
 800ba0a:	50a3      	str	r3, [r4, r2]
 800ba0c:	e7ab      	b.n	800b966 <_malloc_r+0x22>
 800ba0e:	42a3      	cmp	r3, r4
 800ba10:	6862      	ldr	r2, [r4, #4]
 800ba12:	d1dd      	bne.n	800b9d0 <_malloc_r+0x8c>
 800ba14:	f8c8 2000 	str.w	r2, [r8]
 800ba18:	e7ec      	b.n	800b9f4 <_malloc_r+0xb0>
 800ba1a:	4623      	mov	r3, r4
 800ba1c:	6864      	ldr	r4, [r4, #4]
 800ba1e:	e7ac      	b.n	800b97a <_malloc_r+0x36>
 800ba20:	4634      	mov	r4, r6
 800ba22:	6876      	ldr	r6, [r6, #4]
 800ba24:	e7b4      	b.n	800b990 <_malloc_r+0x4c>
 800ba26:	4613      	mov	r3, r2
 800ba28:	e7cc      	b.n	800b9c4 <_malloc_r+0x80>
 800ba2a:	230c      	movs	r3, #12
 800ba2c:	603b      	str	r3, [r7, #0]
 800ba2e:	4638      	mov	r0, r7
 800ba30:	f000 f820 	bl	800ba74 <__malloc_unlock>
 800ba34:	e797      	b.n	800b966 <_malloc_r+0x22>
 800ba36:	6025      	str	r5, [r4, #0]
 800ba38:	e7dc      	b.n	800b9f4 <_malloc_r+0xb0>
 800ba3a:	605b      	str	r3, [r3, #4]
 800ba3c:	deff      	udf	#255	; 0xff
 800ba3e:	bf00      	nop
 800ba40:	200008a8 	.word	0x200008a8

0800ba44 <__ascii_mbtowc>:
 800ba44:	b082      	sub	sp, #8
 800ba46:	b901      	cbnz	r1, 800ba4a <__ascii_mbtowc+0x6>
 800ba48:	a901      	add	r1, sp, #4
 800ba4a:	b142      	cbz	r2, 800ba5e <__ascii_mbtowc+0x1a>
 800ba4c:	b14b      	cbz	r3, 800ba62 <__ascii_mbtowc+0x1e>
 800ba4e:	7813      	ldrb	r3, [r2, #0]
 800ba50:	600b      	str	r3, [r1, #0]
 800ba52:	7812      	ldrb	r2, [r2, #0]
 800ba54:	1e10      	subs	r0, r2, #0
 800ba56:	bf18      	it	ne
 800ba58:	2001      	movne	r0, #1
 800ba5a:	b002      	add	sp, #8
 800ba5c:	4770      	bx	lr
 800ba5e:	4610      	mov	r0, r2
 800ba60:	e7fb      	b.n	800ba5a <__ascii_mbtowc+0x16>
 800ba62:	f06f 0001 	mvn.w	r0, #1
 800ba66:	e7f8      	b.n	800ba5a <__ascii_mbtowc+0x16>

0800ba68 <__malloc_lock>:
 800ba68:	4801      	ldr	r0, [pc, #4]	; (800ba70 <__malloc_lock+0x8>)
 800ba6a:	f7fe bd02 	b.w	800a472 <__retarget_lock_acquire_recursive>
 800ba6e:	bf00      	nop
 800ba70:	200008a4 	.word	0x200008a4

0800ba74 <__malloc_unlock>:
 800ba74:	4801      	ldr	r0, [pc, #4]	; (800ba7c <__malloc_unlock+0x8>)
 800ba76:	f7fe bcfd 	b.w	800a474 <__retarget_lock_release_recursive>
 800ba7a:	bf00      	nop
 800ba7c:	200008a4 	.word	0x200008a4

0800ba80 <_Balloc>:
 800ba80:	b570      	push	{r4, r5, r6, lr}
 800ba82:	69c6      	ldr	r6, [r0, #28]
 800ba84:	4604      	mov	r4, r0
 800ba86:	460d      	mov	r5, r1
 800ba88:	b976      	cbnz	r6, 800baa8 <_Balloc+0x28>
 800ba8a:	2010      	movs	r0, #16
 800ba8c:	f7ff ff32 	bl	800b8f4 <malloc>
 800ba90:	4602      	mov	r2, r0
 800ba92:	61e0      	str	r0, [r4, #28]
 800ba94:	b920      	cbnz	r0, 800baa0 <_Balloc+0x20>
 800ba96:	4b18      	ldr	r3, [pc, #96]	; (800baf8 <_Balloc+0x78>)
 800ba98:	4818      	ldr	r0, [pc, #96]	; (800bafc <_Balloc+0x7c>)
 800ba9a:	216b      	movs	r1, #107	; 0x6b
 800ba9c:	f000 feda 	bl	800c854 <__assert_func>
 800baa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800baa4:	6006      	str	r6, [r0, #0]
 800baa6:	60c6      	str	r6, [r0, #12]
 800baa8:	69e6      	ldr	r6, [r4, #28]
 800baaa:	68f3      	ldr	r3, [r6, #12]
 800baac:	b183      	cbz	r3, 800bad0 <_Balloc+0x50>
 800baae:	69e3      	ldr	r3, [r4, #28]
 800bab0:	68db      	ldr	r3, [r3, #12]
 800bab2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bab6:	b9b8      	cbnz	r0, 800bae8 <_Balloc+0x68>
 800bab8:	2101      	movs	r1, #1
 800baba:	fa01 f605 	lsl.w	r6, r1, r5
 800babe:	1d72      	adds	r2, r6, #5
 800bac0:	0092      	lsls	r2, r2, #2
 800bac2:	4620      	mov	r0, r4
 800bac4:	f000 fee4 	bl	800c890 <_calloc_r>
 800bac8:	b160      	cbz	r0, 800bae4 <_Balloc+0x64>
 800baca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bace:	e00e      	b.n	800baee <_Balloc+0x6e>
 800bad0:	2221      	movs	r2, #33	; 0x21
 800bad2:	2104      	movs	r1, #4
 800bad4:	4620      	mov	r0, r4
 800bad6:	f000 fedb 	bl	800c890 <_calloc_r>
 800bada:	69e3      	ldr	r3, [r4, #28]
 800badc:	60f0      	str	r0, [r6, #12]
 800bade:	68db      	ldr	r3, [r3, #12]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d1e4      	bne.n	800baae <_Balloc+0x2e>
 800bae4:	2000      	movs	r0, #0
 800bae6:	bd70      	pop	{r4, r5, r6, pc}
 800bae8:	6802      	ldr	r2, [r0, #0]
 800baea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800baee:	2300      	movs	r3, #0
 800baf0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800baf4:	e7f7      	b.n	800bae6 <_Balloc+0x66>
 800baf6:	bf00      	nop
 800baf8:	0800d6b7 	.word	0x0800d6b7
 800bafc:	0800d797 	.word	0x0800d797

0800bb00 <_Bfree>:
 800bb00:	b570      	push	{r4, r5, r6, lr}
 800bb02:	69c6      	ldr	r6, [r0, #28]
 800bb04:	4605      	mov	r5, r0
 800bb06:	460c      	mov	r4, r1
 800bb08:	b976      	cbnz	r6, 800bb28 <_Bfree+0x28>
 800bb0a:	2010      	movs	r0, #16
 800bb0c:	f7ff fef2 	bl	800b8f4 <malloc>
 800bb10:	4602      	mov	r2, r0
 800bb12:	61e8      	str	r0, [r5, #28]
 800bb14:	b920      	cbnz	r0, 800bb20 <_Bfree+0x20>
 800bb16:	4b09      	ldr	r3, [pc, #36]	; (800bb3c <_Bfree+0x3c>)
 800bb18:	4809      	ldr	r0, [pc, #36]	; (800bb40 <_Bfree+0x40>)
 800bb1a:	218f      	movs	r1, #143	; 0x8f
 800bb1c:	f000 fe9a 	bl	800c854 <__assert_func>
 800bb20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb24:	6006      	str	r6, [r0, #0]
 800bb26:	60c6      	str	r6, [r0, #12]
 800bb28:	b13c      	cbz	r4, 800bb3a <_Bfree+0x3a>
 800bb2a:	69eb      	ldr	r3, [r5, #28]
 800bb2c:	6862      	ldr	r2, [r4, #4]
 800bb2e:	68db      	ldr	r3, [r3, #12]
 800bb30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb34:	6021      	str	r1, [r4, #0]
 800bb36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb3a:	bd70      	pop	{r4, r5, r6, pc}
 800bb3c:	0800d6b7 	.word	0x0800d6b7
 800bb40:	0800d797 	.word	0x0800d797

0800bb44 <__multadd>:
 800bb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb48:	690d      	ldr	r5, [r1, #16]
 800bb4a:	4607      	mov	r7, r0
 800bb4c:	460c      	mov	r4, r1
 800bb4e:	461e      	mov	r6, r3
 800bb50:	f101 0c14 	add.w	ip, r1, #20
 800bb54:	2000      	movs	r0, #0
 800bb56:	f8dc 3000 	ldr.w	r3, [ip]
 800bb5a:	b299      	uxth	r1, r3
 800bb5c:	fb02 6101 	mla	r1, r2, r1, r6
 800bb60:	0c1e      	lsrs	r6, r3, #16
 800bb62:	0c0b      	lsrs	r3, r1, #16
 800bb64:	fb02 3306 	mla	r3, r2, r6, r3
 800bb68:	b289      	uxth	r1, r1
 800bb6a:	3001      	adds	r0, #1
 800bb6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb70:	4285      	cmp	r5, r0
 800bb72:	f84c 1b04 	str.w	r1, [ip], #4
 800bb76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb7a:	dcec      	bgt.n	800bb56 <__multadd+0x12>
 800bb7c:	b30e      	cbz	r6, 800bbc2 <__multadd+0x7e>
 800bb7e:	68a3      	ldr	r3, [r4, #8]
 800bb80:	42ab      	cmp	r3, r5
 800bb82:	dc19      	bgt.n	800bbb8 <__multadd+0x74>
 800bb84:	6861      	ldr	r1, [r4, #4]
 800bb86:	4638      	mov	r0, r7
 800bb88:	3101      	adds	r1, #1
 800bb8a:	f7ff ff79 	bl	800ba80 <_Balloc>
 800bb8e:	4680      	mov	r8, r0
 800bb90:	b928      	cbnz	r0, 800bb9e <__multadd+0x5a>
 800bb92:	4602      	mov	r2, r0
 800bb94:	4b0c      	ldr	r3, [pc, #48]	; (800bbc8 <__multadd+0x84>)
 800bb96:	480d      	ldr	r0, [pc, #52]	; (800bbcc <__multadd+0x88>)
 800bb98:	21ba      	movs	r1, #186	; 0xba
 800bb9a:	f000 fe5b 	bl	800c854 <__assert_func>
 800bb9e:	6922      	ldr	r2, [r4, #16]
 800bba0:	3202      	adds	r2, #2
 800bba2:	f104 010c 	add.w	r1, r4, #12
 800bba6:	0092      	lsls	r2, r2, #2
 800bba8:	300c      	adds	r0, #12
 800bbaa:	f7fe fc64 	bl	800a476 <memcpy>
 800bbae:	4621      	mov	r1, r4
 800bbb0:	4638      	mov	r0, r7
 800bbb2:	f7ff ffa5 	bl	800bb00 <_Bfree>
 800bbb6:	4644      	mov	r4, r8
 800bbb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bbbc:	3501      	adds	r5, #1
 800bbbe:	615e      	str	r6, [r3, #20]
 800bbc0:	6125      	str	r5, [r4, #16]
 800bbc2:	4620      	mov	r0, r4
 800bbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbc8:	0800d726 	.word	0x0800d726
 800bbcc:	0800d797 	.word	0x0800d797

0800bbd0 <__s2b>:
 800bbd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbd4:	460c      	mov	r4, r1
 800bbd6:	4615      	mov	r5, r2
 800bbd8:	461f      	mov	r7, r3
 800bbda:	2209      	movs	r2, #9
 800bbdc:	3308      	adds	r3, #8
 800bbde:	4606      	mov	r6, r0
 800bbe0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	db09      	blt.n	800bc00 <__s2b+0x30>
 800bbec:	4630      	mov	r0, r6
 800bbee:	f7ff ff47 	bl	800ba80 <_Balloc>
 800bbf2:	b940      	cbnz	r0, 800bc06 <__s2b+0x36>
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	4b19      	ldr	r3, [pc, #100]	; (800bc5c <__s2b+0x8c>)
 800bbf8:	4819      	ldr	r0, [pc, #100]	; (800bc60 <__s2b+0x90>)
 800bbfa:	21d3      	movs	r1, #211	; 0xd3
 800bbfc:	f000 fe2a 	bl	800c854 <__assert_func>
 800bc00:	0052      	lsls	r2, r2, #1
 800bc02:	3101      	adds	r1, #1
 800bc04:	e7f0      	b.n	800bbe8 <__s2b+0x18>
 800bc06:	9b08      	ldr	r3, [sp, #32]
 800bc08:	6143      	str	r3, [r0, #20]
 800bc0a:	2d09      	cmp	r5, #9
 800bc0c:	f04f 0301 	mov.w	r3, #1
 800bc10:	6103      	str	r3, [r0, #16]
 800bc12:	dd16      	ble.n	800bc42 <__s2b+0x72>
 800bc14:	f104 0909 	add.w	r9, r4, #9
 800bc18:	46c8      	mov	r8, r9
 800bc1a:	442c      	add	r4, r5
 800bc1c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bc20:	4601      	mov	r1, r0
 800bc22:	3b30      	subs	r3, #48	; 0x30
 800bc24:	220a      	movs	r2, #10
 800bc26:	4630      	mov	r0, r6
 800bc28:	f7ff ff8c 	bl	800bb44 <__multadd>
 800bc2c:	45a0      	cmp	r8, r4
 800bc2e:	d1f5      	bne.n	800bc1c <__s2b+0x4c>
 800bc30:	f1a5 0408 	sub.w	r4, r5, #8
 800bc34:	444c      	add	r4, r9
 800bc36:	1b2d      	subs	r5, r5, r4
 800bc38:	1963      	adds	r3, r4, r5
 800bc3a:	42bb      	cmp	r3, r7
 800bc3c:	db04      	blt.n	800bc48 <__s2b+0x78>
 800bc3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc42:	340a      	adds	r4, #10
 800bc44:	2509      	movs	r5, #9
 800bc46:	e7f6      	b.n	800bc36 <__s2b+0x66>
 800bc48:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bc4c:	4601      	mov	r1, r0
 800bc4e:	3b30      	subs	r3, #48	; 0x30
 800bc50:	220a      	movs	r2, #10
 800bc52:	4630      	mov	r0, r6
 800bc54:	f7ff ff76 	bl	800bb44 <__multadd>
 800bc58:	e7ee      	b.n	800bc38 <__s2b+0x68>
 800bc5a:	bf00      	nop
 800bc5c:	0800d726 	.word	0x0800d726
 800bc60:	0800d797 	.word	0x0800d797

0800bc64 <__hi0bits>:
 800bc64:	0c03      	lsrs	r3, r0, #16
 800bc66:	041b      	lsls	r3, r3, #16
 800bc68:	b9d3      	cbnz	r3, 800bca0 <__hi0bits+0x3c>
 800bc6a:	0400      	lsls	r0, r0, #16
 800bc6c:	2310      	movs	r3, #16
 800bc6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bc72:	bf04      	itt	eq
 800bc74:	0200      	lsleq	r0, r0, #8
 800bc76:	3308      	addeq	r3, #8
 800bc78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bc7c:	bf04      	itt	eq
 800bc7e:	0100      	lsleq	r0, r0, #4
 800bc80:	3304      	addeq	r3, #4
 800bc82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bc86:	bf04      	itt	eq
 800bc88:	0080      	lsleq	r0, r0, #2
 800bc8a:	3302      	addeq	r3, #2
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	db05      	blt.n	800bc9c <__hi0bits+0x38>
 800bc90:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bc94:	f103 0301 	add.w	r3, r3, #1
 800bc98:	bf08      	it	eq
 800bc9a:	2320      	moveq	r3, #32
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	4770      	bx	lr
 800bca0:	2300      	movs	r3, #0
 800bca2:	e7e4      	b.n	800bc6e <__hi0bits+0xa>

0800bca4 <__lo0bits>:
 800bca4:	6803      	ldr	r3, [r0, #0]
 800bca6:	f013 0207 	ands.w	r2, r3, #7
 800bcaa:	d00c      	beq.n	800bcc6 <__lo0bits+0x22>
 800bcac:	07d9      	lsls	r1, r3, #31
 800bcae:	d422      	bmi.n	800bcf6 <__lo0bits+0x52>
 800bcb0:	079a      	lsls	r2, r3, #30
 800bcb2:	bf49      	itett	mi
 800bcb4:	085b      	lsrmi	r3, r3, #1
 800bcb6:	089b      	lsrpl	r3, r3, #2
 800bcb8:	6003      	strmi	r3, [r0, #0]
 800bcba:	2201      	movmi	r2, #1
 800bcbc:	bf5c      	itt	pl
 800bcbe:	6003      	strpl	r3, [r0, #0]
 800bcc0:	2202      	movpl	r2, #2
 800bcc2:	4610      	mov	r0, r2
 800bcc4:	4770      	bx	lr
 800bcc6:	b299      	uxth	r1, r3
 800bcc8:	b909      	cbnz	r1, 800bcce <__lo0bits+0x2a>
 800bcca:	0c1b      	lsrs	r3, r3, #16
 800bccc:	2210      	movs	r2, #16
 800bcce:	b2d9      	uxtb	r1, r3
 800bcd0:	b909      	cbnz	r1, 800bcd6 <__lo0bits+0x32>
 800bcd2:	3208      	adds	r2, #8
 800bcd4:	0a1b      	lsrs	r3, r3, #8
 800bcd6:	0719      	lsls	r1, r3, #28
 800bcd8:	bf04      	itt	eq
 800bcda:	091b      	lsreq	r3, r3, #4
 800bcdc:	3204      	addeq	r2, #4
 800bcde:	0799      	lsls	r1, r3, #30
 800bce0:	bf04      	itt	eq
 800bce2:	089b      	lsreq	r3, r3, #2
 800bce4:	3202      	addeq	r2, #2
 800bce6:	07d9      	lsls	r1, r3, #31
 800bce8:	d403      	bmi.n	800bcf2 <__lo0bits+0x4e>
 800bcea:	085b      	lsrs	r3, r3, #1
 800bcec:	f102 0201 	add.w	r2, r2, #1
 800bcf0:	d003      	beq.n	800bcfa <__lo0bits+0x56>
 800bcf2:	6003      	str	r3, [r0, #0]
 800bcf4:	e7e5      	b.n	800bcc2 <__lo0bits+0x1e>
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	e7e3      	b.n	800bcc2 <__lo0bits+0x1e>
 800bcfa:	2220      	movs	r2, #32
 800bcfc:	e7e1      	b.n	800bcc2 <__lo0bits+0x1e>
	...

0800bd00 <__i2b>:
 800bd00:	b510      	push	{r4, lr}
 800bd02:	460c      	mov	r4, r1
 800bd04:	2101      	movs	r1, #1
 800bd06:	f7ff febb 	bl	800ba80 <_Balloc>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	b928      	cbnz	r0, 800bd1a <__i2b+0x1a>
 800bd0e:	4b05      	ldr	r3, [pc, #20]	; (800bd24 <__i2b+0x24>)
 800bd10:	4805      	ldr	r0, [pc, #20]	; (800bd28 <__i2b+0x28>)
 800bd12:	f240 1145 	movw	r1, #325	; 0x145
 800bd16:	f000 fd9d 	bl	800c854 <__assert_func>
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	6144      	str	r4, [r0, #20]
 800bd1e:	6103      	str	r3, [r0, #16]
 800bd20:	bd10      	pop	{r4, pc}
 800bd22:	bf00      	nop
 800bd24:	0800d726 	.word	0x0800d726
 800bd28:	0800d797 	.word	0x0800d797

0800bd2c <__multiply>:
 800bd2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd30:	4691      	mov	r9, r2
 800bd32:	690a      	ldr	r2, [r1, #16]
 800bd34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	bfb8      	it	lt
 800bd3c:	460b      	movlt	r3, r1
 800bd3e:	460c      	mov	r4, r1
 800bd40:	bfbc      	itt	lt
 800bd42:	464c      	movlt	r4, r9
 800bd44:	4699      	movlt	r9, r3
 800bd46:	6927      	ldr	r7, [r4, #16]
 800bd48:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bd4c:	68a3      	ldr	r3, [r4, #8]
 800bd4e:	6861      	ldr	r1, [r4, #4]
 800bd50:	eb07 060a 	add.w	r6, r7, sl
 800bd54:	42b3      	cmp	r3, r6
 800bd56:	b085      	sub	sp, #20
 800bd58:	bfb8      	it	lt
 800bd5a:	3101      	addlt	r1, #1
 800bd5c:	f7ff fe90 	bl	800ba80 <_Balloc>
 800bd60:	b930      	cbnz	r0, 800bd70 <__multiply+0x44>
 800bd62:	4602      	mov	r2, r0
 800bd64:	4b44      	ldr	r3, [pc, #272]	; (800be78 <__multiply+0x14c>)
 800bd66:	4845      	ldr	r0, [pc, #276]	; (800be7c <__multiply+0x150>)
 800bd68:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bd6c:	f000 fd72 	bl	800c854 <__assert_func>
 800bd70:	f100 0514 	add.w	r5, r0, #20
 800bd74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bd78:	462b      	mov	r3, r5
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	4543      	cmp	r3, r8
 800bd7e:	d321      	bcc.n	800bdc4 <__multiply+0x98>
 800bd80:	f104 0314 	add.w	r3, r4, #20
 800bd84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bd88:	f109 0314 	add.w	r3, r9, #20
 800bd8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bd90:	9202      	str	r2, [sp, #8]
 800bd92:	1b3a      	subs	r2, r7, r4
 800bd94:	3a15      	subs	r2, #21
 800bd96:	f022 0203 	bic.w	r2, r2, #3
 800bd9a:	3204      	adds	r2, #4
 800bd9c:	f104 0115 	add.w	r1, r4, #21
 800bda0:	428f      	cmp	r7, r1
 800bda2:	bf38      	it	cc
 800bda4:	2204      	movcc	r2, #4
 800bda6:	9201      	str	r2, [sp, #4]
 800bda8:	9a02      	ldr	r2, [sp, #8]
 800bdaa:	9303      	str	r3, [sp, #12]
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d80c      	bhi.n	800bdca <__multiply+0x9e>
 800bdb0:	2e00      	cmp	r6, #0
 800bdb2:	dd03      	ble.n	800bdbc <__multiply+0x90>
 800bdb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d05b      	beq.n	800be74 <__multiply+0x148>
 800bdbc:	6106      	str	r6, [r0, #16]
 800bdbe:	b005      	add	sp, #20
 800bdc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc4:	f843 2b04 	str.w	r2, [r3], #4
 800bdc8:	e7d8      	b.n	800bd7c <__multiply+0x50>
 800bdca:	f8b3 a000 	ldrh.w	sl, [r3]
 800bdce:	f1ba 0f00 	cmp.w	sl, #0
 800bdd2:	d024      	beq.n	800be1e <__multiply+0xf2>
 800bdd4:	f104 0e14 	add.w	lr, r4, #20
 800bdd8:	46a9      	mov	r9, r5
 800bdda:	f04f 0c00 	mov.w	ip, #0
 800bdde:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bde2:	f8d9 1000 	ldr.w	r1, [r9]
 800bde6:	fa1f fb82 	uxth.w	fp, r2
 800bdea:	b289      	uxth	r1, r1
 800bdec:	fb0a 110b 	mla	r1, sl, fp, r1
 800bdf0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bdf4:	f8d9 2000 	ldr.w	r2, [r9]
 800bdf8:	4461      	add	r1, ip
 800bdfa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bdfe:	fb0a c20b 	mla	r2, sl, fp, ip
 800be02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800be06:	b289      	uxth	r1, r1
 800be08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800be0c:	4577      	cmp	r7, lr
 800be0e:	f849 1b04 	str.w	r1, [r9], #4
 800be12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800be16:	d8e2      	bhi.n	800bdde <__multiply+0xb2>
 800be18:	9a01      	ldr	r2, [sp, #4]
 800be1a:	f845 c002 	str.w	ip, [r5, r2]
 800be1e:	9a03      	ldr	r2, [sp, #12]
 800be20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800be24:	3304      	adds	r3, #4
 800be26:	f1b9 0f00 	cmp.w	r9, #0
 800be2a:	d021      	beq.n	800be70 <__multiply+0x144>
 800be2c:	6829      	ldr	r1, [r5, #0]
 800be2e:	f104 0c14 	add.w	ip, r4, #20
 800be32:	46ae      	mov	lr, r5
 800be34:	f04f 0a00 	mov.w	sl, #0
 800be38:	f8bc b000 	ldrh.w	fp, [ip]
 800be3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800be40:	fb09 220b 	mla	r2, r9, fp, r2
 800be44:	4452      	add	r2, sl
 800be46:	b289      	uxth	r1, r1
 800be48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800be4c:	f84e 1b04 	str.w	r1, [lr], #4
 800be50:	f85c 1b04 	ldr.w	r1, [ip], #4
 800be54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800be58:	f8be 1000 	ldrh.w	r1, [lr]
 800be5c:	fb09 110a 	mla	r1, r9, sl, r1
 800be60:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800be64:	4567      	cmp	r7, ip
 800be66:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800be6a:	d8e5      	bhi.n	800be38 <__multiply+0x10c>
 800be6c:	9a01      	ldr	r2, [sp, #4]
 800be6e:	50a9      	str	r1, [r5, r2]
 800be70:	3504      	adds	r5, #4
 800be72:	e799      	b.n	800bda8 <__multiply+0x7c>
 800be74:	3e01      	subs	r6, #1
 800be76:	e79b      	b.n	800bdb0 <__multiply+0x84>
 800be78:	0800d726 	.word	0x0800d726
 800be7c:	0800d797 	.word	0x0800d797

0800be80 <__pow5mult>:
 800be80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be84:	4615      	mov	r5, r2
 800be86:	f012 0203 	ands.w	r2, r2, #3
 800be8a:	4606      	mov	r6, r0
 800be8c:	460f      	mov	r7, r1
 800be8e:	d007      	beq.n	800bea0 <__pow5mult+0x20>
 800be90:	4c25      	ldr	r4, [pc, #148]	; (800bf28 <__pow5mult+0xa8>)
 800be92:	3a01      	subs	r2, #1
 800be94:	2300      	movs	r3, #0
 800be96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be9a:	f7ff fe53 	bl	800bb44 <__multadd>
 800be9e:	4607      	mov	r7, r0
 800bea0:	10ad      	asrs	r5, r5, #2
 800bea2:	d03d      	beq.n	800bf20 <__pow5mult+0xa0>
 800bea4:	69f4      	ldr	r4, [r6, #28]
 800bea6:	b97c      	cbnz	r4, 800bec8 <__pow5mult+0x48>
 800bea8:	2010      	movs	r0, #16
 800beaa:	f7ff fd23 	bl	800b8f4 <malloc>
 800beae:	4602      	mov	r2, r0
 800beb0:	61f0      	str	r0, [r6, #28]
 800beb2:	b928      	cbnz	r0, 800bec0 <__pow5mult+0x40>
 800beb4:	4b1d      	ldr	r3, [pc, #116]	; (800bf2c <__pow5mult+0xac>)
 800beb6:	481e      	ldr	r0, [pc, #120]	; (800bf30 <__pow5mult+0xb0>)
 800beb8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bebc:	f000 fcca 	bl	800c854 <__assert_func>
 800bec0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bec4:	6004      	str	r4, [r0, #0]
 800bec6:	60c4      	str	r4, [r0, #12]
 800bec8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800becc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bed0:	b94c      	cbnz	r4, 800bee6 <__pow5mult+0x66>
 800bed2:	f240 2171 	movw	r1, #625	; 0x271
 800bed6:	4630      	mov	r0, r6
 800bed8:	f7ff ff12 	bl	800bd00 <__i2b>
 800bedc:	2300      	movs	r3, #0
 800bede:	f8c8 0008 	str.w	r0, [r8, #8]
 800bee2:	4604      	mov	r4, r0
 800bee4:	6003      	str	r3, [r0, #0]
 800bee6:	f04f 0900 	mov.w	r9, #0
 800beea:	07eb      	lsls	r3, r5, #31
 800beec:	d50a      	bpl.n	800bf04 <__pow5mult+0x84>
 800beee:	4639      	mov	r1, r7
 800bef0:	4622      	mov	r2, r4
 800bef2:	4630      	mov	r0, r6
 800bef4:	f7ff ff1a 	bl	800bd2c <__multiply>
 800bef8:	4639      	mov	r1, r7
 800befa:	4680      	mov	r8, r0
 800befc:	4630      	mov	r0, r6
 800befe:	f7ff fdff 	bl	800bb00 <_Bfree>
 800bf02:	4647      	mov	r7, r8
 800bf04:	106d      	asrs	r5, r5, #1
 800bf06:	d00b      	beq.n	800bf20 <__pow5mult+0xa0>
 800bf08:	6820      	ldr	r0, [r4, #0]
 800bf0a:	b938      	cbnz	r0, 800bf1c <__pow5mult+0x9c>
 800bf0c:	4622      	mov	r2, r4
 800bf0e:	4621      	mov	r1, r4
 800bf10:	4630      	mov	r0, r6
 800bf12:	f7ff ff0b 	bl	800bd2c <__multiply>
 800bf16:	6020      	str	r0, [r4, #0]
 800bf18:	f8c0 9000 	str.w	r9, [r0]
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	e7e4      	b.n	800beea <__pow5mult+0x6a>
 800bf20:	4638      	mov	r0, r7
 800bf22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf26:	bf00      	nop
 800bf28:	0800d8e0 	.word	0x0800d8e0
 800bf2c:	0800d6b7 	.word	0x0800d6b7
 800bf30:	0800d797 	.word	0x0800d797

0800bf34 <__lshift>:
 800bf34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf38:	460c      	mov	r4, r1
 800bf3a:	6849      	ldr	r1, [r1, #4]
 800bf3c:	6923      	ldr	r3, [r4, #16]
 800bf3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf42:	68a3      	ldr	r3, [r4, #8]
 800bf44:	4607      	mov	r7, r0
 800bf46:	4691      	mov	r9, r2
 800bf48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf4c:	f108 0601 	add.w	r6, r8, #1
 800bf50:	42b3      	cmp	r3, r6
 800bf52:	db0b      	blt.n	800bf6c <__lshift+0x38>
 800bf54:	4638      	mov	r0, r7
 800bf56:	f7ff fd93 	bl	800ba80 <_Balloc>
 800bf5a:	4605      	mov	r5, r0
 800bf5c:	b948      	cbnz	r0, 800bf72 <__lshift+0x3e>
 800bf5e:	4602      	mov	r2, r0
 800bf60:	4b28      	ldr	r3, [pc, #160]	; (800c004 <__lshift+0xd0>)
 800bf62:	4829      	ldr	r0, [pc, #164]	; (800c008 <__lshift+0xd4>)
 800bf64:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bf68:	f000 fc74 	bl	800c854 <__assert_func>
 800bf6c:	3101      	adds	r1, #1
 800bf6e:	005b      	lsls	r3, r3, #1
 800bf70:	e7ee      	b.n	800bf50 <__lshift+0x1c>
 800bf72:	2300      	movs	r3, #0
 800bf74:	f100 0114 	add.w	r1, r0, #20
 800bf78:	f100 0210 	add.w	r2, r0, #16
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	4553      	cmp	r3, sl
 800bf80:	db33      	blt.n	800bfea <__lshift+0xb6>
 800bf82:	6920      	ldr	r0, [r4, #16]
 800bf84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf88:	f104 0314 	add.w	r3, r4, #20
 800bf8c:	f019 091f 	ands.w	r9, r9, #31
 800bf90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf98:	d02b      	beq.n	800bff2 <__lshift+0xbe>
 800bf9a:	f1c9 0e20 	rsb	lr, r9, #32
 800bf9e:	468a      	mov	sl, r1
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	6818      	ldr	r0, [r3, #0]
 800bfa4:	fa00 f009 	lsl.w	r0, r0, r9
 800bfa8:	4310      	orrs	r0, r2
 800bfaa:	f84a 0b04 	str.w	r0, [sl], #4
 800bfae:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfb2:	459c      	cmp	ip, r3
 800bfb4:	fa22 f20e 	lsr.w	r2, r2, lr
 800bfb8:	d8f3      	bhi.n	800bfa2 <__lshift+0x6e>
 800bfba:	ebac 0304 	sub.w	r3, ip, r4
 800bfbe:	3b15      	subs	r3, #21
 800bfc0:	f023 0303 	bic.w	r3, r3, #3
 800bfc4:	3304      	adds	r3, #4
 800bfc6:	f104 0015 	add.w	r0, r4, #21
 800bfca:	4584      	cmp	ip, r0
 800bfcc:	bf38      	it	cc
 800bfce:	2304      	movcc	r3, #4
 800bfd0:	50ca      	str	r2, [r1, r3]
 800bfd2:	b10a      	cbz	r2, 800bfd8 <__lshift+0xa4>
 800bfd4:	f108 0602 	add.w	r6, r8, #2
 800bfd8:	3e01      	subs	r6, #1
 800bfda:	4638      	mov	r0, r7
 800bfdc:	612e      	str	r6, [r5, #16]
 800bfde:	4621      	mov	r1, r4
 800bfe0:	f7ff fd8e 	bl	800bb00 <_Bfree>
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfea:	f842 0f04 	str.w	r0, [r2, #4]!
 800bfee:	3301      	adds	r3, #1
 800bff0:	e7c5      	b.n	800bf7e <__lshift+0x4a>
 800bff2:	3904      	subs	r1, #4
 800bff4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bff8:	f841 2f04 	str.w	r2, [r1, #4]!
 800bffc:	459c      	cmp	ip, r3
 800bffe:	d8f9      	bhi.n	800bff4 <__lshift+0xc0>
 800c000:	e7ea      	b.n	800bfd8 <__lshift+0xa4>
 800c002:	bf00      	nop
 800c004:	0800d726 	.word	0x0800d726
 800c008:	0800d797 	.word	0x0800d797

0800c00c <__mcmp>:
 800c00c:	b530      	push	{r4, r5, lr}
 800c00e:	6902      	ldr	r2, [r0, #16]
 800c010:	690c      	ldr	r4, [r1, #16]
 800c012:	1b12      	subs	r2, r2, r4
 800c014:	d10e      	bne.n	800c034 <__mcmp+0x28>
 800c016:	f100 0314 	add.w	r3, r0, #20
 800c01a:	3114      	adds	r1, #20
 800c01c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c020:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c024:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c028:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c02c:	42a5      	cmp	r5, r4
 800c02e:	d003      	beq.n	800c038 <__mcmp+0x2c>
 800c030:	d305      	bcc.n	800c03e <__mcmp+0x32>
 800c032:	2201      	movs	r2, #1
 800c034:	4610      	mov	r0, r2
 800c036:	bd30      	pop	{r4, r5, pc}
 800c038:	4283      	cmp	r3, r0
 800c03a:	d3f3      	bcc.n	800c024 <__mcmp+0x18>
 800c03c:	e7fa      	b.n	800c034 <__mcmp+0x28>
 800c03e:	f04f 32ff 	mov.w	r2, #4294967295
 800c042:	e7f7      	b.n	800c034 <__mcmp+0x28>

0800c044 <__mdiff>:
 800c044:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c048:	460c      	mov	r4, r1
 800c04a:	4606      	mov	r6, r0
 800c04c:	4611      	mov	r1, r2
 800c04e:	4620      	mov	r0, r4
 800c050:	4690      	mov	r8, r2
 800c052:	f7ff ffdb 	bl	800c00c <__mcmp>
 800c056:	1e05      	subs	r5, r0, #0
 800c058:	d110      	bne.n	800c07c <__mdiff+0x38>
 800c05a:	4629      	mov	r1, r5
 800c05c:	4630      	mov	r0, r6
 800c05e:	f7ff fd0f 	bl	800ba80 <_Balloc>
 800c062:	b930      	cbnz	r0, 800c072 <__mdiff+0x2e>
 800c064:	4b3a      	ldr	r3, [pc, #232]	; (800c150 <__mdiff+0x10c>)
 800c066:	4602      	mov	r2, r0
 800c068:	f240 2137 	movw	r1, #567	; 0x237
 800c06c:	4839      	ldr	r0, [pc, #228]	; (800c154 <__mdiff+0x110>)
 800c06e:	f000 fbf1 	bl	800c854 <__assert_func>
 800c072:	2301      	movs	r3, #1
 800c074:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c078:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c07c:	bfa4      	itt	ge
 800c07e:	4643      	movge	r3, r8
 800c080:	46a0      	movge	r8, r4
 800c082:	4630      	mov	r0, r6
 800c084:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c088:	bfa6      	itte	ge
 800c08a:	461c      	movge	r4, r3
 800c08c:	2500      	movge	r5, #0
 800c08e:	2501      	movlt	r5, #1
 800c090:	f7ff fcf6 	bl	800ba80 <_Balloc>
 800c094:	b920      	cbnz	r0, 800c0a0 <__mdiff+0x5c>
 800c096:	4b2e      	ldr	r3, [pc, #184]	; (800c150 <__mdiff+0x10c>)
 800c098:	4602      	mov	r2, r0
 800c09a:	f240 2145 	movw	r1, #581	; 0x245
 800c09e:	e7e5      	b.n	800c06c <__mdiff+0x28>
 800c0a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c0a4:	6926      	ldr	r6, [r4, #16]
 800c0a6:	60c5      	str	r5, [r0, #12]
 800c0a8:	f104 0914 	add.w	r9, r4, #20
 800c0ac:	f108 0514 	add.w	r5, r8, #20
 800c0b0:	f100 0e14 	add.w	lr, r0, #20
 800c0b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c0b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c0bc:	f108 0210 	add.w	r2, r8, #16
 800c0c0:	46f2      	mov	sl, lr
 800c0c2:	2100      	movs	r1, #0
 800c0c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800c0c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c0cc:	fa11 f88b 	uxtah	r8, r1, fp
 800c0d0:	b299      	uxth	r1, r3
 800c0d2:	0c1b      	lsrs	r3, r3, #16
 800c0d4:	eba8 0801 	sub.w	r8, r8, r1
 800c0d8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c0dc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c0e0:	fa1f f888 	uxth.w	r8, r8
 800c0e4:	1419      	asrs	r1, r3, #16
 800c0e6:	454e      	cmp	r6, r9
 800c0e8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c0ec:	f84a 3b04 	str.w	r3, [sl], #4
 800c0f0:	d8e8      	bhi.n	800c0c4 <__mdiff+0x80>
 800c0f2:	1b33      	subs	r3, r6, r4
 800c0f4:	3b15      	subs	r3, #21
 800c0f6:	f023 0303 	bic.w	r3, r3, #3
 800c0fa:	3304      	adds	r3, #4
 800c0fc:	3415      	adds	r4, #21
 800c0fe:	42a6      	cmp	r6, r4
 800c100:	bf38      	it	cc
 800c102:	2304      	movcc	r3, #4
 800c104:	441d      	add	r5, r3
 800c106:	4473      	add	r3, lr
 800c108:	469e      	mov	lr, r3
 800c10a:	462e      	mov	r6, r5
 800c10c:	4566      	cmp	r6, ip
 800c10e:	d30e      	bcc.n	800c12e <__mdiff+0xea>
 800c110:	f10c 0203 	add.w	r2, ip, #3
 800c114:	1b52      	subs	r2, r2, r5
 800c116:	f022 0203 	bic.w	r2, r2, #3
 800c11a:	3d03      	subs	r5, #3
 800c11c:	45ac      	cmp	ip, r5
 800c11e:	bf38      	it	cc
 800c120:	2200      	movcc	r2, #0
 800c122:	4413      	add	r3, r2
 800c124:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c128:	b17a      	cbz	r2, 800c14a <__mdiff+0x106>
 800c12a:	6107      	str	r7, [r0, #16]
 800c12c:	e7a4      	b.n	800c078 <__mdiff+0x34>
 800c12e:	f856 8b04 	ldr.w	r8, [r6], #4
 800c132:	fa11 f288 	uxtah	r2, r1, r8
 800c136:	1414      	asrs	r4, r2, #16
 800c138:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c13c:	b292      	uxth	r2, r2
 800c13e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c142:	f84e 2b04 	str.w	r2, [lr], #4
 800c146:	1421      	asrs	r1, r4, #16
 800c148:	e7e0      	b.n	800c10c <__mdiff+0xc8>
 800c14a:	3f01      	subs	r7, #1
 800c14c:	e7ea      	b.n	800c124 <__mdiff+0xe0>
 800c14e:	bf00      	nop
 800c150:	0800d726 	.word	0x0800d726
 800c154:	0800d797 	.word	0x0800d797

0800c158 <__ulp>:
 800c158:	b082      	sub	sp, #8
 800c15a:	ed8d 0b00 	vstr	d0, [sp]
 800c15e:	9a01      	ldr	r2, [sp, #4]
 800c160:	4b0f      	ldr	r3, [pc, #60]	; (800c1a0 <__ulp+0x48>)
 800c162:	4013      	ands	r3, r2
 800c164:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c168:	2b00      	cmp	r3, #0
 800c16a:	dc08      	bgt.n	800c17e <__ulp+0x26>
 800c16c:	425b      	negs	r3, r3
 800c16e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c172:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c176:	da04      	bge.n	800c182 <__ulp+0x2a>
 800c178:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c17c:	4113      	asrs	r3, r2
 800c17e:	2200      	movs	r2, #0
 800c180:	e008      	b.n	800c194 <__ulp+0x3c>
 800c182:	f1a2 0314 	sub.w	r3, r2, #20
 800c186:	2b1e      	cmp	r3, #30
 800c188:	bfda      	itte	le
 800c18a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c18e:	40da      	lsrle	r2, r3
 800c190:	2201      	movgt	r2, #1
 800c192:	2300      	movs	r3, #0
 800c194:	4619      	mov	r1, r3
 800c196:	4610      	mov	r0, r2
 800c198:	ec41 0b10 	vmov	d0, r0, r1
 800c19c:	b002      	add	sp, #8
 800c19e:	4770      	bx	lr
 800c1a0:	7ff00000 	.word	0x7ff00000

0800c1a4 <__b2d>:
 800c1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1a8:	6906      	ldr	r6, [r0, #16]
 800c1aa:	f100 0814 	add.w	r8, r0, #20
 800c1ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c1b2:	1f37      	subs	r7, r6, #4
 800c1b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c1b8:	4610      	mov	r0, r2
 800c1ba:	f7ff fd53 	bl	800bc64 <__hi0bits>
 800c1be:	f1c0 0320 	rsb	r3, r0, #32
 800c1c2:	280a      	cmp	r0, #10
 800c1c4:	600b      	str	r3, [r1, #0]
 800c1c6:	491b      	ldr	r1, [pc, #108]	; (800c234 <__b2d+0x90>)
 800c1c8:	dc15      	bgt.n	800c1f6 <__b2d+0x52>
 800c1ca:	f1c0 0c0b 	rsb	ip, r0, #11
 800c1ce:	fa22 f30c 	lsr.w	r3, r2, ip
 800c1d2:	45b8      	cmp	r8, r7
 800c1d4:	ea43 0501 	orr.w	r5, r3, r1
 800c1d8:	bf34      	ite	cc
 800c1da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c1de:	2300      	movcs	r3, #0
 800c1e0:	3015      	adds	r0, #21
 800c1e2:	fa02 f000 	lsl.w	r0, r2, r0
 800c1e6:	fa23 f30c 	lsr.w	r3, r3, ip
 800c1ea:	4303      	orrs	r3, r0
 800c1ec:	461c      	mov	r4, r3
 800c1ee:	ec45 4b10 	vmov	d0, r4, r5
 800c1f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1f6:	45b8      	cmp	r8, r7
 800c1f8:	bf3a      	itte	cc
 800c1fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c1fe:	f1a6 0708 	subcc.w	r7, r6, #8
 800c202:	2300      	movcs	r3, #0
 800c204:	380b      	subs	r0, #11
 800c206:	d012      	beq.n	800c22e <__b2d+0x8a>
 800c208:	f1c0 0120 	rsb	r1, r0, #32
 800c20c:	fa23 f401 	lsr.w	r4, r3, r1
 800c210:	4082      	lsls	r2, r0
 800c212:	4322      	orrs	r2, r4
 800c214:	4547      	cmp	r7, r8
 800c216:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c21a:	bf8c      	ite	hi
 800c21c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c220:	2200      	movls	r2, #0
 800c222:	4083      	lsls	r3, r0
 800c224:	40ca      	lsrs	r2, r1
 800c226:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c22a:	4313      	orrs	r3, r2
 800c22c:	e7de      	b.n	800c1ec <__b2d+0x48>
 800c22e:	ea42 0501 	orr.w	r5, r2, r1
 800c232:	e7db      	b.n	800c1ec <__b2d+0x48>
 800c234:	3ff00000 	.word	0x3ff00000

0800c238 <__d2b>:
 800c238:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c23c:	460f      	mov	r7, r1
 800c23e:	2101      	movs	r1, #1
 800c240:	ec59 8b10 	vmov	r8, r9, d0
 800c244:	4616      	mov	r6, r2
 800c246:	f7ff fc1b 	bl	800ba80 <_Balloc>
 800c24a:	4604      	mov	r4, r0
 800c24c:	b930      	cbnz	r0, 800c25c <__d2b+0x24>
 800c24e:	4602      	mov	r2, r0
 800c250:	4b24      	ldr	r3, [pc, #144]	; (800c2e4 <__d2b+0xac>)
 800c252:	4825      	ldr	r0, [pc, #148]	; (800c2e8 <__d2b+0xb0>)
 800c254:	f240 310f 	movw	r1, #783	; 0x30f
 800c258:	f000 fafc 	bl	800c854 <__assert_func>
 800c25c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c260:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c264:	bb2d      	cbnz	r5, 800c2b2 <__d2b+0x7a>
 800c266:	9301      	str	r3, [sp, #4]
 800c268:	f1b8 0300 	subs.w	r3, r8, #0
 800c26c:	d026      	beq.n	800c2bc <__d2b+0x84>
 800c26e:	4668      	mov	r0, sp
 800c270:	9300      	str	r3, [sp, #0]
 800c272:	f7ff fd17 	bl	800bca4 <__lo0bits>
 800c276:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c27a:	b1e8      	cbz	r0, 800c2b8 <__d2b+0x80>
 800c27c:	f1c0 0320 	rsb	r3, r0, #32
 800c280:	fa02 f303 	lsl.w	r3, r2, r3
 800c284:	430b      	orrs	r3, r1
 800c286:	40c2      	lsrs	r2, r0
 800c288:	6163      	str	r3, [r4, #20]
 800c28a:	9201      	str	r2, [sp, #4]
 800c28c:	9b01      	ldr	r3, [sp, #4]
 800c28e:	61a3      	str	r3, [r4, #24]
 800c290:	2b00      	cmp	r3, #0
 800c292:	bf14      	ite	ne
 800c294:	2202      	movne	r2, #2
 800c296:	2201      	moveq	r2, #1
 800c298:	6122      	str	r2, [r4, #16]
 800c29a:	b1bd      	cbz	r5, 800c2cc <__d2b+0x94>
 800c29c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c2a0:	4405      	add	r5, r0
 800c2a2:	603d      	str	r5, [r7, #0]
 800c2a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c2a8:	6030      	str	r0, [r6, #0]
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	b003      	add	sp, #12
 800c2ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2b6:	e7d6      	b.n	800c266 <__d2b+0x2e>
 800c2b8:	6161      	str	r1, [r4, #20]
 800c2ba:	e7e7      	b.n	800c28c <__d2b+0x54>
 800c2bc:	a801      	add	r0, sp, #4
 800c2be:	f7ff fcf1 	bl	800bca4 <__lo0bits>
 800c2c2:	9b01      	ldr	r3, [sp, #4]
 800c2c4:	6163      	str	r3, [r4, #20]
 800c2c6:	3020      	adds	r0, #32
 800c2c8:	2201      	movs	r2, #1
 800c2ca:	e7e5      	b.n	800c298 <__d2b+0x60>
 800c2cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c2d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c2d4:	6038      	str	r0, [r7, #0]
 800c2d6:	6918      	ldr	r0, [r3, #16]
 800c2d8:	f7ff fcc4 	bl	800bc64 <__hi0bits>
 800c2dc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c2e0:	e7e2      	b.n	800c2a8 <__d2b+0x70>
 800c2e2:	bf00      	nop
 800c2e4:	0800d726 	.word	0x0800d726
 800c2e8:	0800d797 	.word	0x0800d797

0800c2ec <__ratio>:
 800c2ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f0:	4688      	mov	r8, r1
 800c2f2:	4669      	mov	r1, sp
 800c2f4:	4681      	mov	r9, r0
 800c2f6:	f7ff ff55 	bl	800c1a4 <__b2d>
 800c2fa:	a901      	add	r1, sp, #4
 800c2fc:	4640      	mov	r0, r8
 800c2fe:	ec55 4b10 	vmov	r4, r5, d0
 800c302:	f7ff ff4f 	bl	800c1a4 <__b2d>
 800c306:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c30a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c30e:	eba3 0c02 	sub.w	ip, r3, r2
 800c312:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c316:	1a9b      	subs	r3, r3, r2
 800c318:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c31c:	ec51 0b10 	vmov	r0, r1, d0
 800c320:	2b00      	cmp	r3, #0
 800c322:	bfd6      	itet	le
 800c324:	460a      	movle	r2, r1
 800c326:	462a      	movgt	r2, r5
 800c328:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c32c:	468b      	mov	fp, r1
 800c32e:	462f      	mov	r7, r5
 800c330:	bfd4      	ite	le
 800c332:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c336:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c33a:	4620      	mov	r0, r4
 800c33c:	ee10 2a10 	vmov	r2, s0
 800c340:	465b      	mov	r3, fp
 800c342:	4639      	mov	r1, r7
 800c344:	f7f4 fa8a 	bl	800085c <__aeabi_ddiv>
 800c348:	ec41 0b10 	vmov	d0, r0, r1
 800c34c:	b003      	add	sp, #12
 800c34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c352 <__copybits>:
 800c352:	3901      	subs	r1, #1
 800c354:	b570      	push	{r4, r5, r6, lr}
 800c356:	1149      	asrs	r1, r1, #5
 800c358:	6914      	ldr	r4, [r2, #16]
 800c35a:	3101      	adds	r1, #1
 800c35c:	f102 0314 	add.w	r3, r2, #20
 800c360:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c364:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c368:	1f05      	subs	r5, r0, #4
 800c36a:	42a3      	cmp	r3, r4
 800c36c:	d30c      	bcc.n	800c388 <__copybits+0x36>
 800c36e:	1aa3      	subs	r3, r4, r2
 800c370:	3b11      	subs	r3, #17
 800c372:	f023 0303 	bic.w	r3, r3, #3
 800c376:	3211      	adds	r2, #17
 800c378:	42a2      	cmp	r2, r4
 800c37a:	bf88      	it	hi
 800c37c:	2300      	movhi	r3, #0
 800c37e:	4418      	add	r0, r3
 800c380:	2300      	movs	r3, #0
 800c382:	4288      	cmp	r0, r1
 800c384:	d305      	bcc.n	800c392 <__copybits+0x40>
 800c386:	bd70      	pop	{r4, r5, r6, pc}
 800c388:	f853 6b04 	ldr.w	r6, [r3], #4
 800c38c:	f845 6f04 	str.w	r6, [r5, #4]!
 800c390:	e7eb      	b.n	800c36a <__copybits+0x18>
 800c392:	f840 3b04 	str.w	r3, [r0], #4
 800c396:	e7f4      	b.n	800c382 <__copybits+0x30>

0800c398 <__any_on>:
 800c398:	f100 0214 	add.w	r2, r0, #20
 800c39c:	6900      	ldr	r0, [r0, #16]
 800c39e:	114b      	asrs	r3, r1, #5
 800c3a0:	4298      	cmp	r0, r3
 800c3a2:	b510      	push	{r4, lr}
 800c3a4:	db11      	blt.n	800c3ca <__any_on+0x32>
 800c3a6:	dd0a      	ble.n	800c3be <__any_on+0x26>
 800c3a8:	f011 011f 	ands.w	r1, r1, #31
 800c3ac:	d007      	beq.n	800c3be <__any_on+0x26>
 800c3ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c3b2:	fa24 f001 	lsr.w	r0, r4, r1
 800c3b6:	fa00 f101 	lsl.w	r1, r0, r1
 800c3ba:	428c      	cmp	r4, r1
 800c3bc:	d10b      	bne.n	800c3d6 <__any_on+0x3e>
 800c3be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d803      	bhi.n	800c3ce <__any_on+0x36>
 800c3c6:	2000      	movs	r0, #0
 800c3c8:	bd10      	pop	{r4, pc}
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	e7f7      	b.n	800c3be <__any_on+0x26>
 800c3ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c3d2:	2900      	cmp	r1, #0
 800c3d4:	d0f5      	beq.n	800c3c2 <__any_on+0x2a>
 800c3d6:	2001      	movs	r0, #1
 800c3d8:	e7f6      	b.n	800c3c8 <__any_on+0x30>

0800c3da <__ascii_wctomb>:
 800c3da:	b149      	cbz	r1, 800c3f0 <__ascii_wctomb+0x16>
 800c3dc:	2aff      	cmp	r2, #255	; 0xff
 800c3de:	bf85      	ittet	hi
 800c3e0:	238a      	movhi	r3, #138	; 0x8a
 800c3e2:	6003      	strhi	r3, [r0, #0]
 800c3e4:	700a      	strbls	r2, [r1, #0]
 800c3e6:	f04f 30ff 	movhi.w	r0, #4294967295
 800c3ea:	bf98      	it	ls
 800c3ec:	2001      	movls	r0, #1
 800c3ee:	4770      	bx	lr
 800c3f0:	4608      	mov	r0, r1
 800c3f2:	4770      	bx	lr

0800c3f4 <__ssputs_r>:
 800c3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3f8:	688e      	ldr	r6, [r1, #8]
 800c3fa:	461f      	mov	r7, r3
 800c3fc:	42be      	cmp	r6, r7
 800c3fe:	680b      	ldr	r3, [r1, #0]
 800c400:	4682      	mov	sl, r0
 800c402:	460c      	mov	r4, r1
 800c404:	4690      	mov	r8, r2
 800c406:	d82c      	bhi.n	800c462 <__ssputs_r+0x6e>
 800c408:	898a      	ldrh	r2, [r1, #12]
 800c40a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c40e:	d026      	beq.n	800c45e <__ssputs_r+0x6a>
 800c410:	6965      	ldr	r5, [r4, #20]
 800c412:	6909      	ldr	r1, [r1, #16]
 800c414:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c418:	eba3 0901 	sub.w	r9, r3, r1
 800c41c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c420:	1c7b      	adds	r3, r7, #1
 800c422:	444b      	add	r3, r9
 800c424:	106d      	asrs	r5, r5, #1
 800c426:	429d      	cmp	r5, r3
 800c428:	bf38      	it	cc
 800c42a:	461d      	movcc	r5, r3
 800c42c:	0553      	lsls	r3, r2, #21
 800c42e:	d527      	bpl.n	800c480 <__ssputs_r+0x8c>
 800c430:	4629      	mov	r1, r5
 800c432:	f7ff fa87 	bl	800b944 <_malloc_r>
 800c436:	4606      	mov	r6, r0
 800c438:	b360      	cbz	r0, 800c494 <__ssputs_r+0xa0>
 800c43a:	6921      	ldr	r1, [r4, #16]
 800c43c:	464a      	mov	r2, r9
 800c43e:	f7fe f81a 	bl	800a476 <memcpy>
 800c442:	89a3      	ldrh	r3, [r4, #12]
 800c444:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c44c:	81a3      	strh	r3, [r4, #12]
 800c44e:	6126      	str	r6, [r4, #16]
 800c450:	6165      	str	r5, [r4, #20]
 800c452:	444e      	add	r6, r9
 800c454:	eba5 0509 	sub.w	r5, r5, r9
 800c458:	6026      	str	r6, [r4, #0]
 800c45a:	60a5      	str	r5, [r4, #8]
 800c45c:	463e      	mov	r6, r7
 800c45e:	42be      	cmp	r6, r7
 800c460:	d900      	bls.n	800c464 <__ssputs_r+0x70>
 800c462:	463e      	mov	r6, r7
 800c464:	6820      	ldr	r0, [r4, #0]
 800c466:	4632      	mov	r2, r6
 800c468:	4641      	mov	r1, r8
 800c46a:	f000 f9c9 	bl	800c800 <memmove>
 800c46e:	68a3      	ldr	r3, [r4, #8]
 800c470:	1b9b      	subs	r3, r3, r6
 800c472:	60a3      	str	r3, [r4, #8]
 800c474:	6823      	ldr	r3, [r4, #0]
 800c476:	4433      	add	r3, r6
 800c478:	6023      	str	r3, [r4, #0]
 800c47a:	2000      	movs	r0, #0
 800c47c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c480:	462a      	mov	r2, r5
 800c482:	f000 fa1b 	bl	800c8bc <_realloc_r>
 800c486:	4606      	mov	r6, r0
 800c488:	2800      	cmp	r0, #0
 800c48a:	d1e0      	bne.n	800c44e <__ssputs_r+0x5a>
 800c48c:	6921      	ldr	r1, [r4, #16]
 800c48e:	4650      	mov	r0, sl
 800c490:	f7fe fe8c 	bl	800b1ac <_free_r>
 800c494:	230c      	movs	r3, #12
 800c496:	f8ca 3000 	str.w	r3, [sl]
 800c49a:	89a3      	ldrh	r3, [r4, #12]
 800c49c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4a0:	81a3      	strh	r3, [r4, #12]
 800c4a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a6:	e7e9      	b.n	800c47c <__ssputs_r+0x88>

0800c4a8 <_svfiprintf_r>:
 800c4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ac:	4698      	mov	r8, r3
 800c4ae:	898b      	ldrh	r3, [r1, #12]
 800c4b0:	061b      	lsls	r3, r3, #24
 800c4b2:	b09d      	sub	sp, #116	; 0x74
 800c4b4:	4607      	mov	r7, r0
 800c4b6:	460d      	mov	r5, r1
 800c4b8:	4614      	mov	r4, r2
 800c4ba:	d50e      	bpl.n	800c4da <_svfiprintf_r+0x32>
 800c4bc:	690b      	ldr	r3, [r1, #16]
 800c4be:	b963      	cbnz	r3, 800c4da <_svfiprintf_r+0x32>
 800c4c0:	2140      	movs	r1, #64	; 0x40
 800c4c2:	f7ff fa3f 	bl	800b944 <_malloc_r>
 800c4c6:	6028      	str	r0, [r5, #0]
 800c4c8:	6128      	str	r0, [r5, #16]
 800c4ca:	b920      	cbnz	r0, 800c4d6 <_svfiprintf_r+0x2e>
 800c4cc:	230c      	movs	r3, #12
 800c4ce:	603b      	str	r3, [r7, #0]
 800c4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4d4:	e0d0      	b.n	800c678 <_svfiprintf_r+0x1d0>
 800c4d6:	2340      	movs	r3, #64	; 0x40
 800c4d8:	616b      	str	r3, [r5, #20]
 800c4da:	2300      	movs	r3, #0
 800c4dc:	9309      	str	r3, [sp, #36]	; 0x24
 800c4de:	2320      	movs	r3, #32
 800c4e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4e8:	2330      	movs	r3, #48	; 0x30
 800c4ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c690 <_svfiprintf_r+0x1e8>
 800c4ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4f2:	f04f 0901 	mov.w	r9, #1
 800c4f6:	4623      	mov	r3, r4
 800c4f8:	469a      	mov	sl, r3
 800c4fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4fe:	b10a      	cbz	r2, 800c504 <_svfiprintf_r+0x5c>
 800c500:	2a25      	cmp	r2, #37	; 0x25
 800c502:	d1f9      	bne.n	800c4f8 <_svfiprintf_r+0x50>
 800c504:	ebba 0b04 	subs.w	fp, sl, r4
 800c508:	d00b      	beq.n	800c522 <_svfiprintf_r+0x7a>
 800c50a:	465b      	mov	r3, fp
 800c50c:	4622      	mov	r2, r4
 800c50e:	4629      	mov	r1, r5
 800c510:	4638      	mov	r0, r7
 800c512:	f7ff ff6f 	bl	800c3f4 <__ssputs_r>
 800c516:	3001      	adds	r0, #1
 800c518:	f000 80a9 	beq.w	800c66e <_svfiprintf_r+0x1c6>
 800c51c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c51e:	445a      	add	r2, fp
 800c520:	9209      	str	r2, [sp, #36]	; 0x24
 800c522:	f89a 3000 	ldrb.w	r3, [sl]
 800c526:	2b00      	cmp	r3, #0
 800c528:	f000 80a1 	beq.w	800c66e <_svfiprintf_r+0x1c6>
 800c52c:	2300      	movs	r3, #0
 800c52e:	f04f 32ff 	mov.w	r2, #4294967295
 800c532:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c536:	f10a 0a01 	add.w	sl, sl, #1
 800c53a:	9304      	str	r3, [sp, #16]
 800c53c:	9307      	str	r3, [sp, #28]
 800c53e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c542:	931a      	str	r3, [sp, #104]	; 0x68
 800c544:	4654      	mov	r4, sl
 800c546:	2205      	movs	r2, #5
 800c548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c54c:	4850      	ldr	r0, [pc, #320]	; (800c690 <_svfiprintf_r+0x1e8>)
 800c54e:	f7f3 fe47 	bl	80001e0 <memchr>
 800c552:	9a04      	ldr	r2, [sp, #16]
 800c554:	b9d8      	cbnz	r0, 800c58e <_svfiprintf_r+0xe6>
 800c556:	06d0      	lsls	r0, r2, #27
 800c558:	bf44      	itt	mi
 800c55a:	2320      	movmi	r3, #32
 800c55c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c560:	0711      	lsls	r1, r2, #28
 800c562:	bf44      	itt	mi
 800c564:	232b      	movmi	r3, #43	; 0x2b
 800c566:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c56a:	f89a 3000 	ldrb.w	r3, [sl]
 800c56e:	2b2a      	cmp	r3, #42	; 0x2a
 800c570:	d015      	beq.n	800c59e <_svfiprintf_r+0xf6>
 800c572:	9a07      	ldr	r2, [sp, #28]
 800c574:	4654      	mov	r4, sl
 800c576:	2000      	movs	r0, #0
 800c578:	f04f 0c0a 	mov.w	ip, #10
 800c57c:	4621      	mov	r1, r4
 800c57e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c582:	3b30      	subs	r3, #48	; 0x30
 800c584:	2b09      	cmp	r3, #9
 800c586:	d94d      	bls.n	800c624 <_svfiprintf_r+0x17c>
 800c588:	b1b0      	cbz	r0, 800c5b8 <_svfiprintf_r+0x110>
 800c58a:	9207      	str	r2, [sp, #28]
 800c58c:	e014      	b.n	800c5b8 <_svfiprintf_r+0x110>
 800c58e:	eba0 0308 	sub.w	r3, r0, r8
 800c592:	fa09 f303 	lsl.w	r3, r9, r3
 800c596:	4313      	orrs	r3, r2
 800c598:	9304      	str	r3, [sp, #16]
 800c59a:	46a2      	mov	sl, r4
 800c59c:	e7d2      	b.n	800c544 <_svfiprintf_r+0x9c>
 800c59e:	9b03      	ldr	r3, [sp, #12]
 800c5a0:	1d19      	adds	r1, r3, #4
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	9103      	str	r1, [sp, #12]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	bfbb      	ittet	lt
 800c5aa:	425b      	neglt	r3, r3
 800c5ac:	f042 0202 	orrlt.w	r2, r2, #2
 800c5b0:	9307      	strge	r3, [sp, #28]
 800c5b2:	9307      	strlt	r3, [sp, #28]
 800c5b4:	bfb8      	it	lt
 800c5b6:	9204      	strlt	r2, [sp, #16]
 800c5b8:	7823      	ldrb	r3, [r4, #0]
 800c5ba:	2b2e      	cmp	r3, #46	; 0x2e
 800c5bc:	d10c      	bne.n	800c5d8 <_svfiprintf_r+0x130>
 800c5be:	7863      	ldrb	r3, [r4, #1]
 800c5c0:	2b2a      	cmp	r3, #42	; 0x2a
 800c5c2:	d134      	bne.n	800c62e <_svfiprintf_r+0x186>
 800c5c4:	9b03      	ldr	r3, [sp, #12]
 800c5c6:	1d1a      	adds	r2, r3, #4
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	9203      	str	r2, [sp, #12]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	bfb8      	it	lt
 800c5d0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5d4:	3402      	adds	r4, #2
 800c5d6:	9305      	str	r3, [sp, #20]
 800c5d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c6a0 <_svfiprintf_r+0x1f8>
 800c5dc:	7821      	ldrb	r1, [r4, #0]
 800c5de:	2203      	movs	r2, #3
 800c5e0:	4650      	mov	r0, sl
 800c5e2:	f7f3 fdfd 	bl	80001e0 <memchr>
 800c5e6:	b138      	cbz	r0, 800c5f8 <_svfiprintf_r+0x150>
 800c5e8:	9b04      	ldr	r3, [sp, #16]
 800c5ea:	eba0 000a 	sub.w	r0, r0, sl
 800c5ee:	2240      	movs	r2, #64	; 0x40
 800c5f0:	4082      	lsls	r2, r0
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	3401      	adds	r4, #1
 800c5f6:	9304      	str	r3, [sp, #16]
 800c5f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5fc:	4825      	ldr	r0, [pc, #148]	; (800c694 <_svfiprintf_r+0x1ec>)
 800c5fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c602:	2206      	movs	r2, #6
 800c604:	f7f3 fdec 	bl	80001e0 <memchr>
 800c608:	2800      	cmp	r0, #0
 800c60a:	d038      	beq.n	800c67e <_svfiprintf_r+0x1d6>
 800c60c:	4b22      	ldr	r3, [pc, #136]	; (800c698 <_svfiprintf_r+0x1f0>)
 800c60e:	bb1b      	cbnz	r3, 800c658 <_svfiprintf_r+0x1b0>
 800c610:	9b03      	ldr	r3, [sp, #12]
 800c612:	3307      	adds	r3, #7
 800c614:	f023 0307 	bic.w	r3, r3, #7
 800c618:	3308      	adds	r3, #8
 800c61a:	9303      	str	r3, [sp, #12]
 800c61c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c61e:	4433      	add	r3, r6
 800c620:	9309      	str	r3, [sp, #36]	; 0x24
 800c622:	e768      	b.n	800c4f6 <_svfiprintf_r+0x4e>
 800c624:	fb0c 3202 	mla	r2, ip, r2, r3
 800c628:	460c      	mov	r4, r1
 800c62a:	2001      	movs	r0, #1
 800c62c:	e7a6      	b.n	800c57c <_svfiprintf_r+0xd4>
 800c62e:	2300      	movs	r3, #0
 800c630:	3401      	adds	r4, #1
 800c632:	9305      	str	r3, [sp, #20]
 800c634:	4619      	mov	r1, r3
 800c636:	f04f 0c0a 	mov.w	ip, #10
 800c63a:	4620      	mov	r0, r4
 800c63c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c640:	3a30      	subs	r2, #48	; 0x30
 800c642:	2a09      	cmp	r2, #9
 800c644:	d903      	bls.n	800c64e <_svfiprintf_r+0x1a6>
 800c646:	2b00      	cmp	r3, #0
 800c648:	d0c6      	beq.n	800c5d8 <_svfiprintf_r+0x130>
 800c64a:	9105      	str	r1, [sp, #20]
 800c64c:	e7c4      	b.n	800c5d8 <_svfiprintf_r+0x130>
 800c64e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c652:	4604      	mov	r4, r0
 800c654:	2301      	movs	r3, #1
 800c656:	e7f0      	b.n	800c63a <_svfiprintf_r+0x192>
 800c658:	ab03      	add	r3, sp, #12
 800c65a:	9300      	str	r3, [sp, #0]
 800c65c:	462a      	mov	r2, r5
 800c65e:	4b0f      	ldr	r3, [pc, #60]	; (800c69c <_svfiprintf_r+0x1f4>)
 800c660:	a904      	add	r1, sp, #16
 800c662:	4638      	mov	r0, r7
 800c664:	f7fc ff68 	bl	8009538 <_printf_float>
 800c668:	1c42      	adds	r2, r0, #1
 800c66a:	4606      	mov	r6, r0
 800c66c:	d1d6      	bne.n	800c61c <_svfiprintf_r+0x174>
 800c66e:	89ab      	ldrh	r3, [r5, #12]
 800c670:	065b      	lsls	r3, r3, #25
 800c672:	f53f af2d 	bmi.w	800c4d0 <_svfiprintf_r+0x28>
 800c676:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c678:	b01d      	add	sp, #116	; 0x74
 800c67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c67e:	ab03      	add	r3, sp, #12
 800c680:	9300      	str	r3, [sp, #0]
 800c682:	462a      	mov	r2, r5
 800c684:	4b05      	ldr	r3, [pc, #20]	; (800c69c <_svfiprintf_r+0x1f4>)
 800c686:	a904      	add	r1, sp, #16
 800c688:	4638      	mov	r0, r7
 800c68a:	f7fd f9f9 	bl	8009a80 <_printf_i>
 800c68e:	e7eb      	b.n	800c668 <_svfiprintf_r+0x1c0>
 800c690:	0800d8ec 	.word	0x0800d8ec
 800c694:	0800d8f6 	.word	0x0800d8f6
 800c698:	08009539 	.word	0x08009539
 800c69c:	0800c3f5 	.word	0x0800c3f5
 800c6a0:	0800d8f2 	.word	0x0800d8f2

0800c6a4 <__sflush_r>:
 800c6a4:	898a      	ldrh	r2, [r1, #12]
 800c6a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6aa:	4605      	mov	r5, r0
 800c6ac:	0710      	lsls	r0, r2, #28
 800c6ae:	460c      	mov	r4, r1
 800c6b0:	d458      	bmi.n	800c764 <__sflush_r+0xc0>
 800c6b2:	684b      	ldr	r3, [r1, #4]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	dc05      	bgt.n	800c6c4 <__sflush_r+0x20>
 800c6b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	dc02      	bgt.n	800c6c4 <__sflush_r+0x20>
 800c6be:	2000      	movs	r0, #0
 800c6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c6c6:	2e00      	cmp	r6, #0
 800c6c8:	d0f9      	beq.n	800c6be <__sflush_r+0x1a>
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c6d0:	682f      	ldr	r7, [r5, #0]
 800c6d2:	6a21      	ldr	r1, [r4, #32]
 800c6d4:	602b      	str	r3, [r5, #0]
 800c6d6:	d032      	beq.n	800c73e <__sflush_r+0x9a>
 800c6d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c6da:	89a3      	ldrh	r3, [r4, #12]
 800c6dc:	075a      	lsls	r2, r3, #29
 800c6de:	d505      	bpl.n	800c6ec <__sflush_r+0x48>
 800c6e0:	6863      	ldr	r3, [r4, #4]
 800c6e2:	1ac0      	subs	r0, r0, r3
 800c6e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c6e6:	b10b      	cbz	r3, 800c6ec <__sflush_r+0x48>
 800c6e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c6ea:	1ac0      	subs	r0, r0, r3
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	4602      	mov	r2, r0
 800c6f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c6f2:	6a21      	ldr	r1, [r4, #32]
 800c6f4:	4628      	mov	r0, r5
 800c6f6:	47b0      	blx	r6
 800c6f8:	1c43      	adds	r3, r0, #1
 800c6fa:	89a3      	ldrh	r3, [r4, #12]
 800c6fc:	d106      	bne.n	800c70c <__sflush_r+0x68>
 800c6fe:	6829      	ldr	r1, [r5, #0]
 800c700:	291d      	cmp	r1, #29
 800c702:	d82b      	bhi.n	800c75c <__sflush_r+0xb8>
 800c704:	4a29      	ldr	r2, [pc, #164]	; (800c7ac <__sflush_r+0x108>)
 800c706:	410a      	asrs	r2, r1
 800c708:	07d6      	lsls	r6, r2, #31
 800c70a:	d427      	bmi.n	800c75c <__sflush_r+0xb8>
 800c70c:	2200      	movs	r2, #0
 800c70e:	6062      	str	r2, [r4, #4]
 800c710:	04d9      	lsls	r1, r3, #19
 800c712:	6922      	ldr	r2, [r4, #16]
 800c714:	6022      	str	r2, [r4, #0]
 800c716:	d504      	bpl.n	800c722 <__sflush_r+0x7e>
 800c718:	1c42      	adds	r2, r0, #1
 800c71a:	d101      	bne.n	800c720 <__sflush_r+0x7c>
 800c71c:	682b      	ldr	r3, [r5, #0]
 800c71e:	b903      	cbnz	r3, 800c722 <__sflush_r+0x7e>
 800c720:	6560      	str	r0, [r4, #84]	; 0x54
 800c722:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c724:	602f      	str	r7, [r5, #0]
 800c726:	2900      	cmp	r1, #0
 800c728:	d0c9      	beq.n	800c6be <__sflush_r+0x1a>
 800c72a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c72e:	4299      	cmp	r1, r3
 800c730:	d002      	beq.n	800c738 <__sflush_r+0x94>
 800c732:	4628      	mov	r0, r5
 800c734:	f7fe fd3a 	bl	800b1ac <_free_r>
 800c738:	2000      	movs	r0, #0
 800c73a:	6360      	str	r0, [r4, #52]	; 0x34
 800c73c:	e7c0      	b.n	800c6c0 <__sflush_r+0x1c>
 800c73e:	2301      	movs	r3, #1
 800c740:	4628      	mov	r0, r5
 800c742:	47b0      	blx	r6
 800c744:	1c41      	adds	r1, r0, #1
 800c746:	d1c8      	bne.n	800c6da <__sflush_r+0x36>
 800c748:	682b      	ldr	r3, [r5, #0]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d0c5      	beq.n	800c6da <__sflush_r+0x36>
 800c74e:	2b1d      	cmp	r3, #29
 800c750:	d001      	beq.n	800c756 <__sflush_r+0xb2>
 800c752:	2b16      	cmp	r3, #22
 800c754:	d101      	bne.n	800c75a <__sflush_r+0xb6>
 800c756:	602f      	str	r7, [r5, #0]
 800c758:	e7b1      	b.n	800c6be <__sflush_r+0x1a>
 800c75a:	89a3      	ldrh	r3, [r4, #12]
 800c75c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c760:	81a3      	strh	r3, [r4, #12]
 800c762:	e7ad      	b.n	800c6c0 <__sflush_r+0x1c>
 800c764:	690f      	ldr	r7, [r1, #16]
 800c766:	2f00      	cmp	r7, #0
 800c768:	d0a9      	beq.n	800c6be <__sflush_r+0x1a>
 800c76a:	0793      	lsls	r3, r2, #30
 800c76c:	680e      	ldr	r6, [r1, #0]
 800c76e:	bf08      	it	eq
 800c770:	694b      	ldreq	r3, [r1, #20]
 800c772:	600f      	str	r7, [r1, #0]
 800c774:	bf18      	it	ne
 800c776:	2300      	movne	r3, #0
 800c778:	eba6 0807 	sub.w	r8, r6, r7
 800c77c:	608b      	str	r3, [r1, #8]
 800c77e:	f1b8 0f00 	cmp.w	r8, #0
 800c782:	dd9c      	ble.n	800c6be <__sflush_r+0x1a>
 800c784:	6a21      	ldr	r1, [r4, #32]
 800c786:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c788:	4643      	mov	r3, r8
 800c78a:	463a      	mov	r2, r7
 800c78c:	4628      	mov	r0, r5
 800c78e:	47b0      	blx	r6
 800c790:	2800      	cmp	r0, #0
 800c792:	dc06      	bgt.n	800c7a2 <__sflush_r+0xfe>
 800c794:	89a3      	ldrh	r3, [r4, #12]
 800c796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c79a:	81a3      	strh	r3, [r4, #12]
 800c79c:	f04f 30ff 	mov.w	r0, #4294967295
 800c7a0:	e78e      	b.n	800c6c0 <__sflush_r+0x1c>
 800c7a2:	4407      	add	r7, r0
 800c7a4:	eba8 0800 	sub.w	r8, r8, r0
 800c7a8:	e7e9      	b.n	800c77e <__sflush_r+0xda>
 800c7aa:	bf00      	nop
 800c7ac:	dfbffffe 	.word	0xdfbffffe

0800c7b0 <_fflush_r>:
 800c7b0:	b538      	push	{r3, r4, r5, lr}
 800c7b2:	690b      	ldr	r3, [r1, #16]
 800c7b4:	4605      	mov	r5, r0
 800c7b6:	460c      	mov	r4, r1
 800c7b8:	b913      	cbnz	r3, 800c7c0 <_fflush_r+0x10>
 800c7ba:	2500      	movs	r5, #0
 800c7bc:	4628      	mov	r0, r5
 800c7be:	bd38      	pop	{r3, r4, r5, pc}
 800c7c0:	b118      	cbz	r0, 800c7ca <_fflush_r+0x1a>
 800c7c2:	6a03      	ldr	r3, [r0, #32]
 800c7c4:	b90b      	cbnz	r3, 800c7ca <_fflush_r+0x1a>
 800c7c6:	f7fd fd19 	bl	800a1fc <__sinit>
 800c7ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d0f3      	beq.n	800c7ba <_fflush_r+0xa>
 800c7d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c7d4:	07d0      	lsls	r0, r2, #31
 800c7d6:	d404      	bmi.n	800c7e2 <_fflush_r+0x32>
 800c7d8:	0599      	lsls	r1, r3, #22
 800c7da:	d402      	bmi.n	800c7e2 <_fflush_r+0x32>
 800c7dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7de:	f7fd fe48 	bl	800a472 <__retarget_lock_acquire_recursive>
 800c7e2:	4628      	mov	r0, r5
 800c7e4:	4621      	mov	r1, r4
 800c7e6:	f7ff ff5d 	bl	800c6a4 <__sflush_r>
 800c7ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c7ec:	07da      	lsls	r2, r3, #31
 800c7ee:	4605      	mov	r5, r0
 800c7f0:	d4e4      	bmi.n	800c7bc <_fflush_r+0xc>
 800c7f2:	89a3      	ldrh	r3, [r4, #12]
 800c7f4:	059b      	lsls	r3, r3, #22
 800c7f6:	d4e1      	bmi.n	800c7bc <_fflush_r+0xc>
 800c7f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7fa:	f7fd fe3b 	bl	800a474 <__retarget_lock_release_recursive>
 800c7fe:	e7dd      	b.n	800c7bc <_fflush_r+0xc>

0800c800 <memmove>:
 800c800:	4288      	cmp	r0, r1
 800c802:	b510      	push	{r4, lr}
 800c804:	eb01 0402 	add.w	r4, r1, r2
 800c808:	d902      	bls.n	800c810 <memmove+0x10>
 800c80a:	4284      	cmp	r4, r0
 800c80c:	4623      	mov	r3, r4
 800c80e:	d807      	bhi.n	800c820 <memmove+0x20>
 800c810:	1e43      	subs	r3, r0, #1
 800c812:	42a1      	cmp	r1, r4
 800c814:	d008      	beq.n	800c828 <memmove+0x28>
 800c816:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c81a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c81e:	e7f8      	b.n	800c812 <memmove+0x12>
 800c820:	4402      	add	r2, r0
 800c822:	4601      	mov	r1, r0
 800c824:	428a      	cmp	r2, r1
 800c826:	d100      	bne.n	800c82a <memmove+0x2a>
 800c828:	bd10      	pop	{r4, pc}
 800c82a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c82e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c832:	e7f7      	b.n	800c824 <memmove+0x24>

0800c834 <_sbrk_r>:
 800c834:	b538      	push	{r3, r4, r5, lr}
 800c836:	4d06      	ldr	r5, [pc, #24]	; (800c850 <_sbrk_r+0x1c>)
 800c838:	2300      	movs	r3, #0
 800c83a:	4604      	mov	r4, r0
 800c83c:	4608      	mov	r0, r1
 800c83e:	602b      	str	r3, [r5, #0]
 800c840:	f7f8 f8f2 	bl	8004a28 <_sbrk>
 800c844:	1c43      	adds	r3, r0, #1
 800c846:	d102      	bne.n	800c84e <_sbrk_r+0x1a>
 800c848:	682b      	ldr	r3, [r5, #0]
 800c84a:	b103      	cbz	r3, 800c84e <_sbrk_r+0x1a>
 800c84c:	6023      	str	r3, [r4, #0]
 800c84e:	bd38      	pop	{r3, r4, r5, pc}
 800c850:	200008a0 	.word	0x200008a0

0800c854 <__assert_func>:
 800c854:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c856:	4614      	mov	r4, r2
 800c858:	461a      	mov	r2, r3
 800c85a:	4b09      	ldr	r3, [pc, #36]	; (800c880 <__assert_func+0x2c>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	4605      	mov	r5, r0
 800c860:	68d8      	ldr	r0, [r3, #12]
 800c862:	b14c      	cbz	r4, 800c878 <__assert_func+0x24>
 800c864:	4b07      	ldr	r3, [pc, #28]	; (800c884 <__assert_func+0x30>)
 800c866:	9100      	str	r1, [sp, #0]
 800c868:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c86c:	4906      	ldr	r1, [pc, #24]	; (800c888 <__assert_func+0x34>)
 800c86e:	462b      	mov	r3, r5
 800c870:	f000 f854 	bl	800c91c <fiprintf>
 800c874:	f000 f864 	bl	800c940 <abort>
 800c878:	4b04      	ldr	r3, [pc, #16]	; (800c88c <__assert_func+0x38>)
 800c87a:	461c      	mov	r4, r3
 800c87c:	e7f3      	b.n	800c866 <__assert_func+0x12>
 800c87e:	bf00      	nop
 800c880:	2000023c 	.word	0x2000023c
 800c884:	0800d8fd 	.word	0x0800d8fd
 800c888:	0800d90a 	.word	0x0800d90a
 800c88c:	0800d938 	.word	0x0800d938

0800c890 <_calloc_r>:
 800c890:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c892:	fba1 2402 	umull	r2, r4, r1, r2
 800c896:	b94c      	cbnz	r4, 800c8ac <_calloc_r+0x1c>
 800c898:	4611      	mov	r1, r2
 800c89a:	9201      	str	r2, [sp, #4]
 800c89c:	f7ff f852 	bl	800b944 <_malloc_r>
 800c8a0:	9a01      	ldr	r2, [sp, #4]
 800c8a2:	4605      	mov	r5, r0
 800c8a4:	b930      	cbnz	r0, 800c8b4 <_calloc_r+0x24>
 800c8a6:	4628      	mov	r0, r5
 800c8a8:	b003      	add	sp, #12
 800c8aa:	bd30      	pop	{r4, r5, pc}
 800c8ac:	220c      	movs	r2, #12
 800c8ae:	6002      	str	r2, [r0, #0]
 800c8b0:	2500      	movs	r5, #0
 800c8b2:	e7f8      	b.n	800c8a6 <_calloc_r+0x16>
 800c8b4:	4621      	mov	r1, r4
 800c8b6:	f7fd fd3a 	bl	800a32e <memset>
 800c8ba:	e7f4      	b.n	800c8a6 <_calloc_r+0x16>

0800c8bc <_realloc_r>:
 800c8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8c0:	4680      	mov	r8, r0
 800c8c2:	4614      	mov	r4, r2
 800c8c4:	460e      	mov	r6, r1
 800c8c6:	b921      	cbnz	r1, 800c8d2 <_realloc_r+0x16>
 800c8c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8cc:	4611      	mov	r1, r2
 800c8ce:	f7ff b839 	b.w	800b944 <_malloc_r>
 800c8d2:	b92a      	cbnz	r2, 800c8e0 <_realloc_r+0x24>
 800c8d4:	f7fe fc6a 	bl	800b1ac <_free_r>
 800c8d8:	4625      	mov	r5, r4
 800c8da:	4628      	mov	r0, r5
 800c8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8e0:	f000 f835 	bl	800c94e <_malloc_usable_size_r>
 800c8e4:	4284      	cmp	r4, r0
 800c8e6:	4607      	mov	r7, r0
 800c8e8:	d802      	bhi.n	800c8f0 <_realloc_r+0x34>
 800c8ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c8ee:	d812      	bhi.n	800c916 <_realloc_r+0x5a>
 800c8f0:	4621      	mov	r1, r4
 800c8f2:	4640      	mov	r0, r8
 800c8f4:	f7ff f826 	bl	800b944 <_malloc_r>
 800c8f8:	4605      	mov	r5, r0
 800c8fa:	2800      	cmp	r0, #0
 800c8fc:	d0ed      	beq.n	800c8da <_realloc_r+0x1e>
 800c8fe:	42bc      	cmp	r4, r7
 800c900:	4622      	mov	r2, r4
 800c902:	4631      	mov	r1, r6
 800c904:	bf28      	it	cs
 800c906:	463a      	movcs	r2, r7
 800c908:	f7fd fdb5 	bl	800a476 <memcpy>
 800c90c:	4631      	mov	r1, r6
 800c90e:	4640      	mov	r0, r8
 800c910:	f7fe fc4c 	bl	800b1ac <_free_r>
 800c914:	e7e1      	b.n	800c8da <_realloc_r+0x1e>
 800c916:	4635      	mov	r5, r6
 800c918:	e7df      	b.n	800c8da <_realloc_r+0x1e>
	...

0800c91c <fiprintf>:
 800c91c:	b40e      	push	{r1, r2, r3}
 800c91e:	b503      	push	{r0, r1, lr}
 800c920:	4601      	mov	r1, r0
 800c922:	ab03      	add	r3, sp, #12
 800c924:	4805      	ldr	r0, [pc, #20]	; (800c93c <fiprintf+0x20>)
 800c926:	f853 2b04 	ldr.w	r2, [r3], #4
 800c92a:	6800      	ldr	r0, [r0, #0]
 800c92c:	9301      	str	r3, [sp, #4]
 800c92e:	f000 f83f 	bl	800c9b0 <_vfiprintf_r>
 800c932:	b002      	add	sp, #8
 800c934:	f85d eb04 	ldr.w	lr, [sp], #4
 800c938:	b003      	add	sp, #12
 800c93a:	4770      	bx	lr
 800c93c:	2000023c 	.word	0x2000023c

0800c940 <abort>:
 800c940:	b508      	push	{r3, lr}
 800c942:	2006      	movs	r0, #6
 800c944:	f000 fa0c 	bl	800cd60 <raise>
 800c948:	2001      	movs	r0, #1
 800c94a:	f7f7 fff5 	bl	8004938 <_exit>

0800c94e <_malloc_usable_size_r>:
 800c94e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c952:	1f18      	subs	r0, r3, #4
 800c954:	2b00      	cmp	r3, #0
 800c956:	bfbc      	itt	lt
 800c958:	580b      	ldrlt	r3, [r1, r0]
 800c95a:	18c0      	addlt	r0, r0, r3
 800c95c:	4770      	bx	lr

0800c95e <__sfputc_r>:
 800c95e:	6893      	ldr	r3, [r2, #8]
 800c960:	3b01      	subs	r3, #1
 800c962:	2b00      	cmp	r3, #0
 800c964:	b410      	push	{r4}
 800c966:	6093      	str	r3, [r2, #8]
 800c968:	da08      	bge.n	800c97c <__sfputc_r+0x1e>
 800c96a:	6994      	ldr	r4, [r2, #24]
 800c96c:	42a3      	cmp	r3, r4
 800c96e:	db01      	blt.n	800c974 <__sfputc_r+0x16>
 800c970:	290a      	cmp	r1, #10
 800c972:	d103      	bne.n	800c97c <__sfputc_r+0x1e>
 800c974:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c978:	f000 b934 	b.w	800cbe4 <__swbuf_r>
 800c97c:	6813      	ldr	r3, [r2, #0]
 800c97e:	1c58      	adds	r0, r3, #1
 800c980:	6010      	str	r0, [r2, #0]
 800c982:	7019      	strb	r1, [r3, #0]
 800c984:	4608      	mov	r0, r1
 800c986:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c98a:	4770      	bx	lr

0800c98c <__sfputs_r>:
 800c98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c98e:	4606      	mov	r6, r0
 800c990:	460f      	mov	r7, r1
 800c992:	4614      	mov	r4, r2
 800c994:	18d5      	adds	r5, r2, r3
 800c996:	42ac      	cmp	r4, r5
 800c998:	d101      	bne.n	800c99e <__sfputs_r+0x12>
 800c99a:	2000      	movs	r0, #0
 800c99c:	e007      	b.n	800c9ae <__sfputs_r+0x22>
 800c99e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9a2:	463a      	mov	r2, r7
 800c9a4:	4630      	mov	r0, r6
 800c9a6:	f7ff ffda 	bl	800c95e <__sfputc_r>
 800c9aa:	1c43      	adds	r3, r0, #1
 800c9ac:	d1f3      	bne.n	800c996 <__sfputs_r+0xa>
 800c9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c9b0 <_vfiprintf_r>:
 800c9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9b4:	460d      	mov	r5, r1
 800c9b6:	b09d      	sub	sp, #116	; 0x74
 800c9b8:	4614      	mov	r4, r2
 800c9ba:	4698      	mov	r8, r3
 800c9bc:	4606      	mov	r6, r0
 800c9be:	b118      	cbz	r0, 800c9c8 <_vfiprintf_r+0x18>
 800c9c0:	6a03      	ldr	r3, [r0, #32]
 800c9c2:	b90b      	cbnz	r3, 800c9c8 <_vfiprintf_r+0x18>
 800c9c4:	f7fd fc1a 	bl	800a1fc <__sinit>
 800c9c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9ca:	07d9      	lsls	r1, r3, #31
 800c9cc:	d405      	bmi.n	800c9da <_vfiprintf_r+0x2a>
 800c9ce:	89ab      	ldrh	r3, [r5, #12]
 800c9d0:	059a      	lsls	r2, r3, #22
 800c9d2:	d402      	bmi.n	800c9da <_vfiprintf_r+0x2a>
 800c9d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9d6:	f7fd fd4c 	bl	800a472 <__retarget_lock_acquire_recursive>
 800c9da:	89ab      	ldrh	r3, [r5, #12]
 800c9dc:	071b      	lsls	r3, r3, #28
 800c9de:	d501      	bpl.n	800c9e4 <_vfiprintf_r+0x34>
 800c9e0:	692b      	ldr	r3, [r5, #16]
 800c9e2:	b99b      	cbnz	r3, 800ca0c <_vfiprintf_r+0x5c>
 800c9e4:	4629      	mov	r1, r5
 800c9e6:	4630      	mov	r0, r6
 800c9e8:	f000 f93a 	bl	800cc60 <__swsetup_r>
 800c9ec:	b170      	cbz	r0, 800ca0c <_vfiprintf_r+0x5c>
 800c9ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9f0:	07dc      	lsls	r4, r3, #31
 800c9f2:	d504      	bpl.n	800c9fe <_vfiprintf_r+0x4e>
 800c9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f8:	b01d      	add	sp, #116	; 0x74
 800c9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9fe:	89ab      	ldrh	r3, [r5, #12]
 800ca00:	0598      	lsls	r0, r3, #22
 800ca02:	d4f7      	bmi.n	800c9f4 <_vfiprintf_r+0x44>
 800ca04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca06:	f7fd fd35 	bl	800a474 <__retarget_lock_release_recursive>
 800ca0a:	e7f3      	b.n	800c9f4 <_vfiprintf_r+0x44>
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	9309      	str	r3, [sp, #36]	; 0x24
 800ca10:	2320      	movs	r3, #32
 800ca12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca16:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca1a:	2330      	movs	r3, #48	; 0x30
 800ca1c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cbd0 <_vfiprintf_r+0x220>
 800ca20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca24:	f04f 0901 	mov.w	r9, #1
 800ca28:	4623      	mov	r3, r4
 800ca2a:	469a      	mov	sl, r3
 800ca2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca30:	b10a      	cbz	r2, 800ca36 <_vfiprintf_r+0x86>
 800ca32:	2a25      	cmp	r2, #37	; 0x25
 800ca34:	d1f9      	bne.n	800ca2a <_vfiprintf_r+0x7a>
 800ca36:	ebba 0b04 	subs.w	fp, sl, r4
 800ca3a:	d00b      	beq.n	800ca54 <_vfiprintf_r+0xa4>
 800ca3c:	465b      	mov	r3, fp
 800ca3e:	4622      	mov	r2, r4
 800ca40:	4629      	mov	r1, r5
 800ca42:	4630      	mov	r0, r6
 800ca44:	f7ff ffa2 	bl	800c98c <__sfputs_r>
 800ca48:	3001      	adds	r0, #1
 800ca4a:	f000 80a9 	beq.w	800cba0 <_vfiprintf_r+0x1f0>
 800ca4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca50:	445a      	add	r2, fp
 800ca52:	9209      	str	r2, [sp, #36]	; 0x24
 800ca54:	f89a 3000 	ldrb.w	r3, [sl]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	f000 80a1 	beq.w	800cba0 <_vfiprintf_r+0x1f0>
 800ca5e:	2300      	movs	r3, #0
 800ca60:	f04f 32ff 	mov.w	r2, #4294967295
 800ca64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca68:	f10a 0a01 	add.w	sl, sl, #1
 800ca6c:	9304      	str	r3, [sp, #16]
 800ca6e:	9307      	str	r3, [sp, #28]
 800ca70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca74:	931a      	str	r3, [sp, #104]	; 0x68
 800ca76:	4654      	mov	r4, sl
 800ca78:	2205      	movs	r2, #5
 800ca7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca7e:	4854      	ldr	r0, [pc, #336]	; (800cbd0 <_vfiprintf_r+0x220>)
 800ca80:	f7f3 fbae 	bl	80001e0 <memchr>
 800ca84:	9a04      	ldr	r2, [sp, #16]
 800ca86:	b9d8      	cbnz	r0, 800cac0 <_vfiprintf_r+0x110>
 800ca88:	06d1      	lsls	r1, r2, #27
 800ca8a:	bf44      	itt	mi
 800ca8c:	2320      	movmi	r3, #32
 800ca8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca92:	0713      	lsls	r3, r2, #28
 800ca94:	bf44      	itt	mi
 800ca96:	232b      	movmi	r3, #43	; 0x2b
 800ca98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca9c:	f89a 3000 	ldrb.w	r3, [sl]
 800caa0:	2b2a      	cmp	r3, #42	; 0x2a
 800caa2:	d015      	beq.n	800cad0 <_vfiprintf_r+0x120>
 800caa4:	9a07      	ldr	r2, [sp, #28]
 800caa6:	4654      	mov	r4, sl
 800caa8:	2000      	movs	r0, #0
 800caaa:	f04f 0c0a 	mov.w	ip, #10
 800caae:	4621      	mov	r1, r4
 800cab0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cab4:	3b30      	subs	r3, #48	; 0x30
 800cab6:	2b09      	cmp	r3, #9
 800cab8:	d94d      	bls.n	800cb56 <_vfiprintf_r+0x1a6>
 800caba:	b1b0      	cbz	r0, 800caea <_vfiprintf_r+0x13a>
 800cabc:	9207      	str	r2, [sp, #28]
 800cabe:	e014      	b.n	800caea <_vfiprintf_r+0x13a>
 800cac0:	eba0 0308 	sub.w	r3, r0, r8
 800cac4:	fa09 f303 	lsl.w	r3, r9, r3
 800cac8:	4313      	orrs	r3, r2
 800caca:	9304      	str	r3, [sp, #16]
 800cacc:	46a2      	mov	sl, r4
 800cace:	e7d2      	b.n	800ca76 <_vfiprintf_r+0xc6>
 800cad0:	9b03      	ldr	r3, [sp, #12]
 800cad2:	1d19      	adds	r1, r3, #4
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	9103      	str	r1, [sp, #12]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	bfbb      	ittet	lt
 800cadc:	425b      	neglt	r3, r3
 800cade:	f042 0202 	orrlt.w	r2, r2, #2
 800cae2:	9307      	strge	r3, [sp, #28]
 800cae4:	9307      	strlt	r3, [sp, #28]
 800cae6:	bfb8      	it	lt
 800cae8:	9204      	strlt	r2, [sp, #16]
 800caea:	7823      	ldrb	r3, [r4, #0]
 800caec:	2b2e      	cmp	r3, #46	; 0x2e
 800caee:	d10c      	bne.n	800cb0a <_vfiprintf_r+0x15a>
 800caf0:	7863      	ldrb	r3, [r4, #1]
 800caf2:	2b2a      	cmp	r3, #42	; 0x2a
 800caf4:	d134      	bne.n	800cb60 <_vfiprintf_r+0x1b0>
 800caf6:	9b03      	ldr	r3, [sp, #12]
 800caf8:	1d1a      	adds	r2, r3, #4
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	9203      	str	r2, [sp, #12]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	bfb8      	it	lt
 800cb02:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb06:	3402      	adds	r4, #2
 800cb08:	9305      	str	r3, [sp, #20]
 800cb0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cbe0 <_vfiprintf_r+0x230>
 800cb0e:	7821      	ldrb	r1, [r4, #0]
 800cb10:	2203      	movs	r2, #3
 800cb12:	4650      	mov	r0, sl
 800cb14:	f7f3 fb64 	bl	80001e0 <memchr>
 800cb18:	b138      	cbz	r0, 800cb2a <_vfiprintf_r+0x17a>
 800cb1a:	9b04      	ldr	r3, [sp, #16]
 800cb1c:	eba0 000a 	sub.w	r0, r0, sl
 800cb20:	2240      	movs	r2, #64	; 0x40
 800cb22:	4082      	lsls	r2, r0
 800cb24:	4313      	orrs	r3, r2
 800cb26:	3401      	adds	r4, #1
 800cb28:	9304      	str	r3, [sp, #16]
 800cb2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb2e:	4829      	ldr	r0, [pc, #164]	; (800cbd4 <_vfiprintf_r+0x224>)
 800cb30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb34:	2206      	movs	r2, #6
 800cb36:	f7f3 fb53 	bl	80001e0 <memchr>
 800cb3a:	2800      	cmp	r0, #0
 800cb3c:	d03f      	beq.n	800cbbe <_vfiprintf_r+0x20e>
 800cb3e:	4b26      	ldr	r3, [pc, #152]	; (800cbd8 <_vfiprintf_r+0x228>)
 800cb40:	bb1b      	cbnz	r3, 800cb8a <_vfiprintf_r+0x1da>
 800cb42:	9b03      	ldr	r3, [sp, #12]
 800cb44:	3307      	adds	r3, #7
 800cb46:	f023 0307 	bic.w	r3, r3, #7
 800cb4a:	3308      	adds	r3, #8
 800cb4c:	9303      	str	r3, [sp, #12]
 800cb4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb50:	443b      	add	r3, r7
 800cb52:	9309      	str	r3, [sp, #36]	; 0x24
 800cb54:	e768      	b.n	800ca28 <_vfiprintf_r+0x78>
 800cb56:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb5a:	460c      	mov	r4, r1
 800cb5c:	2001      	movs	r0, #1
 800cb5e:	e7a6      	b.n	800caae <_vfiprintf_r+0xfe>
 800cb60:	2300      	movs	r3, #0
 800cb62:	3401      	adds	r4, #1
 800cb64:	9305      	str	r3, [sp, #20]
 800cb66:	4619      	mov	r1, r3
 800cb68:	f04f 0c0a 	mov.w	ip, #10
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb72:	3a30      	subs	r2, #48	; 0x30
 800cb74:	2a09      	cmp	r2, #9
 800cb76:	d903      	bls.n	800cb80 <_vfiprintf_r+0x1d0>
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d0c6      	beq.n	800cb0a <_vfiprintf_r+0x15a>
 800cb7c:	9105      	str	r1, [sp, #20]
 800cb7e:	e7c4      	b.n	800cb0a <_vfiprintf_r+0x15a>
 800cb80:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb84:	4604      	mov	r4, r0
 800cb86:	2301      	movs	r3, #1
 800cb88:	e7f0      	b.n	800cb6c <_vfiprintf_r+0x1bc>
 800cb8a:	ab03      	add	r3, sp, #12
 800cb8c:	9300      	str	r3, [sp, #0]
 800cb8e:	462a      	mov	r2, r5
 800cb90:	4b12      	ldr	r3, [pc, #72]	; (800cbdc <_vfiprintf_r+0x22c>)
 800cb92:	a904      	add	r1, sp, #16
 800cb94:	4630      	mov	r0, r6
 800cb96:	f7fc fccf 	bl	8009538 <_printf_float>
 800cb9a:	4607      	mov	r7, r0
 800cb9c:	1c78      	adds	r0, r7, #1
 800cb9e:	d1d6      	bne.n	800cb4e <_vfiprintf_r+0x19e>
 800cba0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cba2:	07d9      	lsls	r1, r3, #31
 800cba4:	d405      	bmi.n	800cbb2 <_vfiprintf_r+0x202>
 800cba6:	89ab      	ldrh	r3, [r5, #12]
 800cba8:	059a      	lsls	r2, r3, #22
 800cbaa:	d402      	bmi.n	800cbb2 <_vfiprintf_r+0x202>
 800cbac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cbae:	f7fd fc61 	bl	800a474 <__retarget_lock_release_recursive>
 800cbb2:	89ab      	ldrh	r3, [r5, #12]
 800cbb4:	065b      	lsls	r3, r3, #25
 800cbb6:	f53f af1d 	bmi.w	800c9f4 <_vfiprintf_r+0x44>
 800cbba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbbc:	e71c      	b.n	800c9f8 <_vfiprintf_r+0x48>
 800cbbe:	ab03      	add	r3, sp, #12
 800cbc0:	9300      	str	r3, [sp, #0]
 800cbc2:	462a      	mov	r2, r5
 800cbc4:	4b05      	ldr	r3, [pc, #20]	; (800cbdc <_vfiprintf_r+0x22c>)
 800cbc6:	a904      	add	r1, sp, #16
 800cbc8:	4630      	mov	r0, r6
 800cbca:	f7fc ff59 	bl	8009a80 <_printf_i>
 800cbce:	e7e4      	b.n	800cb9a <_vfiprintf_r+0x1ea>
 800cbd0:	0800d8ec 	.word	0x0800d8ec
 800cbd4:	0800d8f6 	.word	0x0800d8f6
 800cbd8:	08009539 	.word	0x08009539
 800cbdc:	0800c98d 	.word	0x0800c98d
 800cbe0:	0800d8f2 	.word	0x0800d8f2

0800cbe4 <__swbuf_r>:
 800cbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbe6:	460e      	mov	r6, r1
 800cbe8:	4614      	mov	r4, r2
 800cbea:	4605      	mov	r5, r0
 800cbec:	b118      	cbz	r0, 800cbf6 <__swbuf_r+0x12>
 800cbee:	6a03      	ldr	r3, [r0, #32]
 800cbf0:	b90b      	cbnz	r3, 800cbf6 <__swbuf_r+0x12>
 800cbf2:	f7fd fb03 	bl	800a1fc <__sinit>
 800cbf6:	69a3      	ldr	r3, [r4, #24]
 800cbf8:	60a3      	str	r3, [r4, #8]
 800cbfa:	89a3      	ldrh	r3, [r4, #12]
 800cbfc:	071a      	lsls	r2, r3, #28
 800cbfe:	d525      	bpl.n	800cc4c <__swbuf_r+0x68>
 800cc00:	6923      	ldr	r3, [r4, #16]
 800cc02:	b31b      	cbz	r3, 800cc4c <__swbuf_r+0x68>
 800cc04:	6823      	ldr	r3, [r4, #0]
 800cc06:	6922      	ldr	r2, [r4, #16]
 800cc08:	1a98      	subs	r0, r3, r2
 800cc0a:	6963      	ldr	r3, [r4, #20]
 800cc0c:	b2f6      	uxtb	r6, r6
 800cc0e:	4283      	cmp	r3, r0
 800cc10:	4637      	mov	r7, r6
 800cc12:	dc04      	bgt.n	800cc1e <__swbuf_r+0x3a>
 800cc14:	4621      	mov	r1, r4
 800cc16:	4628      	mov	r0, r5
 800cc18:	f7ff fdca 	bl	800c7b0 <_fflush_r>
 800cc1c:	b9e0      	cbnz	r0, 800cc58 <__swbuf_r+0x74>
 800cc1e:	68a3      	ldr	r3, [r4, #8]
 800cc20:	3b01      	subs	r3, #1
 800cc22:	60a3      	str	r3, [r4, #8]
 800cc24:	6823      	ldr	r3, [r4, #0]
 800cc26:	1c5a      	adds	r2, r3, #1
 800cc28:	6022      	str	r2, [r4, #0]
 800cc2a:	701e      	strb	r6, [r3, #0]
 800cc2c:	6962      	ldr	r2, [r4, #20]
 800cc2e:	1c43      	adds	r3, r0, #1
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d004      	beq.n	800cc3e <__swbuf_r+0x5a>
 800cc34:	89a3      	ldrh	r3, [r4, #12]
 800cc36:	07db      	lsls	r3, r3, #31
 800cc38:	d506      	bpl.n	800cc48 <__swbuf_r+0x64>
 800cc3a:	2e0a      	cmp	r6, #10
 800cc3c:	d104      	bne.n	800cc48 <__swbuf_r+0x64>
 800cc3e:	4621      	mov	r1, r4
 800cc40:	4628      	mov	r0, r5
 800cc42:	f7ff fdb5 	bl	800c7b0 <_fflush_r>
 800cc46:	b938      	cbnz	r0, 800cc58 <__swbuf_r+0x74>
 800cc48:	4638      	mov	r0, r7
 800cc4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc4c:	4621      	mov	r1, r4
 800cc4e:	4628      	mov	r0, r5
 800cc50:	f000 f806 	bl	800cc60 <__swsetup_r>
 800cc54:	2800      	cmp	r0, #0
 800cc56:	d0d5      	beq.n	800cc04 <__swbuf_r+0x20>
 800cc58:	f04f 37ff 	mov.w	r7, #4294967295
 800cc5c:	e7f4      	b.n	800cc48 <__swbuf_r+0x64>
	...

0800cc60 <__swsetup_r>:
 800cc60:	b538      	push	{r3, r4, r5, lr}
 800cc62:	4b2a      	ldr	r3, [pc, #168]	; (800cd0c <__swsetup_r+0xac>)
 800cc64:	4605      	mov	r5, r0
 800cc66:	6818      	ldr	r0, [r3, #0]
 800cc68:	460c      	mov	r4, r1
 800cc6a:	b118      	cbz	r0, 800cc74 <__swsetup_r+0x14>
 800cc6c:	6a03      	ldr	r3, [r0, #32]
 800cc6e:	b90b      	cbnz	r3, 800cc74 <__swsetup_r+0x14>
 800cc70:	f7fd fac4 	bl	800a1fc <__sinit>
 800cc74:	89a3      	ldrh	r3, [r4, #12]
 800cc76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc7a:	0718      	lsls	r0, r3, #28
 800cc7c:	d422      	bmi.n	800ccc4 <__swsetup_r+0x64>
 800cc7e:	06d9      	lsls	r1, r3, #27
 800cc80:	d407      	bmi.n	800cc92 <__swsetup_r+0x32>
 800cc82:	2309      	movs	r3, #9
 800cc84:	602b      	str	r3, [r5, #0]
 800cc86:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cc8a:	81a3      	strh	r3, [r4, #12]
 800cc8c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc90:	e034      	b.n	800ccfc <__swsetup_r+0x9c>
 800cc92:	0758      	lsls	r0, r3, #29
 800cc94:	d512      	bpl.n	800ccbc <__swsetup_r+0x5c>
 800cc96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc98:	b141      	cbz	r1, 800ccac <__swsetup_r+0x4c>
 800cc9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc9e:	4299      	cmp	r1, r3
 800cca0:	d002      	beq.n	800cca8 <__swsetup_r+0x48>
 800cca2:	4628      	mov	r0, r5
 800cca4:	f7fe fa82 	bl	800b1ac <_free_r>
 800cca8:	2300      	movs	r3, #0
 800ccaa:	6363      	str	r3, [r4, #52]	; 0x34
 800ccac:	89a3      	ldrh	r3, [r4, #12]
 800ccae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ccb2:	81a3      	strh	r3, [r4, #12]
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	6063      	str	r3, [r4, #4]
 800ccb8:	6923      	ldr	r3, [r4, #16]
 800ccba:	6023      	str	r3, [r4, #0]
 800ccbc:	89a3      	ldrh	r3, [r4, #12]
 800ccbe:	f043 0308 	orr.w	r3, r3, #8
 800ccc2:	81a3      	strh	r3, [r4, #12]
 800ccc4:	6923      	ldr	r3, [r4, #16]
 800ccc6:	b94b      	cbnz	r3, 800ccdc <__swsetup_r+0x7c>
 800ccc8:	89a3      	ldrh	r3, [r4, #12]
 800ccca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ccce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ccd2:	d003      	beq.n	800ccdc <__swsetup_r+0x7c>
 800ccd4:	4621      	mov	r1, r4
 800ccd6:	4628      	mov	r0, r5
 800ccd8:	f000 f884 	bl	800cde4 <__smakebuf_r>
 800ccdc:	89a0      	ldrh	r0, [r4, #12]
 800ccde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cce2:	f010 0301 	ands.w	r3, r0, #1
 800cce6:	d00a      	beq.n	800ccfe <__swsetup_r+0x9e>
 800cce8:	2300      	movs	r3, #0
 800ccea:	60a3      	str	r3, [r4, #8]
 800ccec:	6963      	ldr	r3, [r4, #20]
 800ccee:	425b      	negs	r3, r3
 800ccf0:	61a3      	str	r3, [r4, #24]
 800ccf2:	6923      	ldr	r3, [r4, #16]
 800ccf4:	b943      	cbnz	r3, 800cd08 <__swsetup_r+0xa8>
 800ccf6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ccfa:	d1c4      	bne.n	800cc86 <__swsetup_r+0x26>
 800ccfc:	bd38      	pop	{r3, r4, r5, pc}
 800ccfe:	0781      	lsls	r1, r0, #30
 800cd00:	bf58      	it	pl
 800cd02:	6963      	ldrpl	r3, [r4, #20]
 800cd04:	60a3      	str	r3, [r4, #8]
 800cd06:	e7f4      	b.n	800ccf2 <__swsetup_r+0x92>
 800cd08:	2000      	movs	r0, #0
 800cd0a:	e7f7      	b.n	800ccfc <__swsetup_r+0x9c>
 800cd0c:	2000023c 	.word	0x2000023c

0800cd10 <_raise_r>:
 800cd10:	291f      	cmp	r1, #31
 800cd12:	b538      	push	{r3, r4, r5, lr}
 800cd14:	4604      	mov	r4, r0
 800cd16:	460d      	mov	r5, r1
 800cd18:	d904      	bls.n	800cd24 <_raise_r+0x14>
 800cd1a:	2316      	movs	r3, #22
 800cd1c:	6003      	str	r3, [r0, #0]
 800cd1e:	f04f 30ff 	mov.w	r0, #4294967295
 800cd22:	bd38      	pop	{r3, r4, r5, pc}
 800cd24:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cd26:	b112      	cbz	r2, 800cd2e <_raise_r+0x1e>
 800cd28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd2c:	b94b      	cbnz	r3, 800cd42 <_raise_r+0x32>
 800cd2e:	4620      	mov	r0, r4
 800cd30:	f000 f830 	bl	800cd94 <_getpid_r>
 800cd34:	462a      	mov	r2, r5
 800cd36:	4601      	mov	r1, r0
 800cd38:	4620      	mov	r0, r4
 800cd3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd3e:	f000 b817 	b.w	800cd70 <_kill_r>
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d00a      	beq.n	800cd5c <_raise_r+0x4c>
 800cd46:	1c59      	adds	r1, r3, #1
 800cd48:	d103      	bne.n	800cd52 <_raise_r+0x42>
 800cd4a:	2316      	movs	r3, #22
 800cd4c:	6003      	str	r3, [r0, #0]
 800cd4e:	2001      	movs	r0, #1
 800cd50:	e7e7      	b.n	800cd22 <_raise_r+0x12>
 800cd52:	2400      	movs	r4, #0
 800cd54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cd58:	4628      	mov	r0, r5
 800cd5a:	4798      	blx	r3
 800cd5c:	2000      	movs	r0, #0
 800cd5e:	e7e0      	b.n	800cd22 <_raise_r+0x12>

0800cd60 <raise>:
 800cd60:	4b02      	ldr	r3, [pc, #8]	; (800cd6c <raise+0xc>)
 800cd62:	4601      	mov	r1, r0
 800cd64:	6818      	ldr	r0, [r3, #0]
 800cd66:	f7ff bfd3 	b.w	800cd10 <_raise_r>
 800cd6a:	bf00      	nop
 800cd6c:	2000023c 	.word	0x2000023c

0800cd70 <_kill_r>:
 800cd70:	b538      	push	{r3, r4, r5, lr}
 800cd72:	4d07      	ldr	r5, [pc, #28]	; (800cd90 <_kill_r+0x20>)
 800cd74:	2300      	movs	r3, #0
 800cd76:	4604      	mov	r4, r0
 800cd78:	4608      	mov	r0, r1
 800cd7a:	4611      	mov	r1, r2
 800cd7c:	602b      	str	r3, [r5, #0]
 800cd7e:	f7f7 fdcb 	bl	8004918 <_kill>
 800cd82:	1c43      	adds	r3, r0, #1
 800cd84:	d102      	bne.n	800cd8c <_kill_r+0x1c>
 800cd86:	682b      	ldr	r3, [r5, #0]
 800cd88:	b103      	cbz	r3, 800cd8c <_kill_r+0x1c>
 800cd8a:	6023      	str	r3, [r4, #0]
 800cd8c:	bd38      	pop	{r3, r4, r5, pc}
 800cd8e:	bf00      	nop
 800cd90:	200008a0 	.word	0x200008a0

0800cd94 <_getpid_r>:
 800cd94:	f7f7 bdb8 	b.w	8004908 <_getpid>

0800cd98 <__swhatbuf_r>:
 800cd98:	b570      	push	{r4, r5, r6, lr}
 800cd9a:	460c      	mov	r4, r1
 800cd9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cda0:	2900      	cmp	r1, #0
 800cda2:	b096      	sub	sp, #88	; 0x58
 800cda4:	4615      	mov	r5, r2
 800cda6:	461e      	mov	r6, r3
 800cda8:	da0d      	bge.n	800cdc6 <__swhatbuf_r+0x2e>
 800cdaa:	89a3      	ldrh	r3, [r4, #12]
 800cdac:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cdb0:	f04f 0100 	mov.w	r1, #0
 800cdb4:	bf0c      	ite	eq
 800cdb6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cdba:	2340      	movne	r3, #64	; 0x40
 800cdbc:	2000      	movs	r0, #0
 800cdbe:	6031      	str	r1, [r6, #0]
 800cdc0:	602b      	str	r3, [r5, #0]
 800cdc2:	b016      	add	sp, #88	; 0x58
 800cdc4:	bd70      	pop	{r4, r5, r6, pc}
 800cdc6:	466a      	mov	r2, sp
 800cdc8:	f000 f848 	bl	800ce5c <_fstat_r>
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	dbec      	blt.n	800cdaa <__swhatbuf_r+0x12>
 800cdd0:	9901      	ldr	r1, [sp, #4]
 800cdd2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cdd6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cdda:	4259      	negs	r1, r3
 800cddc:	4159      	adcs	r1, r3
 800cdde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cde2:	e7eb      	b.n	800cdbc <__swhatbuf_r+0x24>

0800cde4 <__smakebuf_r>:
 800cde4:	898b      	ldrh	r3, [r1, #12]
 800cde6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cde8:	079d      	lsls	r5, r3, #30
 800cdea:	4606      	mov	r6, r0
 800cdec:	460c      	mov	r4, r1
 800cdee:	d507      	bpl.n	800ce00 <__smakebuf_r+0x1c>
 800cdf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cdf4:	6023      	str	r3, [r4, #0]
 800cdf6:	6123      	str	r3, [r4, #16]
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	6163      	str	r3, [r4, #20]
 800cdfc:	b002      	add	sp, #8
 800cdfe:	bd70      	pop	{r4, r5, r6, pc}
 800ce00:	ab01      	add	r3, sp, #4
 800ce02:	466a      	mov	r2, sp
 800ce04:	f7ff ffc8 	bl	800cd98 <__swhatbuf_r>
 800ce08:	9900      	ldr	r1, [sp, #0]
 800ce0a:	4605      	mov	r5, r0
 800ce0c:	4630      	mov	r0, r6
 800ce0e:	f7fe fd99 	bl	800b944 <_malloc_r>
 800ce12:	b948      	cbnz	r0, 800ce28 <__smakebuf_r+0x44>
 800ce14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce18:	059a      	lsls	r2, r3, #22
 800ce1a:	d4ef      	bmi.n	800cdfc <__smakebuf_r+0x18>
 800ce1c:	f023 0303 	bic.w	r3, r3, #3
 800ce20:	f043 0302 	orr.w	r3, r3, #2
 800ce24:	81a3      	strh	r3, [r4, #12]
 800ce26:	e7e3      	b.n	800cdf0 <__smakebuf_r+0xc>
 800ce28:	89a3      	ldrh	r3, [r4, #12]
 800ce2a:	6020      	str	r0, [r4, #0]
 800ce2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce30:	81a3      	strh	r3, [r4, #12]
 800ce32:	9b00      	ldr	r3, [sp, #0]
 800ce34:	6163      	str	r3, [r4, #20]
 800ce36:	9b01      	ldr	r3, [sp, #4]
 800ce38:	6120      	str	r0, [r4, #16]
 800ce3a:	b15b      	cbz	r3, 800ce54 <__smakebuf_r+0x70>
 800ce3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce40:	4630      	mov	r0, r6
 800ce42:	f000 f81d 	bl	800ce80 <_isatty_r>
 800ce46:	b128      	cbz	r0, 800ce54 <__smakebuf_r+0x70>
 800ce48:	89a3      	ldrh	r3, [r4, #12]
 800ce4a:	f023 0303 	bic.w	r3, r3, #3
 800ce4e:	f043 0301 	orr.w	r3, r3, #1
 800ce52:	81a3      	strh	r3, [r4, #12]
 800ce54:	89a3      	ldrh	r3, [r4, #12]
 800ce56:	431d      	orrs	r5, r3
 800ce58:	81a5      	strh	r5, [r4, #12]
 800ce5a:	e7cf      	b.n	800cdfc <__smakebuf_r+0x18>

0800ce5c <_fstat_r>:
 800ce5c:	b538      	push	{r3, r4, r5, lr}
 800ce5e:	4d07      	ldr	r5, [pc, #28]	; (800ce7c <_fstat_r+0x20>)
 800ce60:	2300      	movs	r3, #0
 800ce62:	4604      	mov	r4, r0
 800ce64:	4608      	mov	r0, r1
 800ce66:	4611      	mov	r1, r2
 800ce68:	602b      	str	r3, [r5, #0]
 800ce6a:	f7f7 fdb4 	bl	80049d6 <_fstat>
 800ce6e:	1c43      	adds	r3, r0, #1
 800ce70:	d102      	bne.n	800ce78 <_fstat_r+0x1c>
 800ce72:	682b      	ldr	r3, [r5, #0]
 800ce74:	b103      	cbz	r3, 800ce78 <_fstat_r+0x1c>
 800ce76:	6023      	str	r3, [r4, #0]
 800ce78:	bd38      	pop	{r3, r4, r5, pc}
 800ce7a:	bf00      	nop
 800ce7c:	200008a0 	.word	0x200008a0

0800ce80 <_isatty_r>:
 800ce80:	b538      	push	{r3, r4, r5, lr}
 800ce82:	4d06      	ldr	r5, [pc, #24]	; (800ce9c <_isatty_r+0x1c>)
 800ce84:	2300      	movs	r3, #0
 800ce86:	4604      	mov	r4, r0
 800ce88:	4608      	mov	r0, r1
 800ce8a:	602b      	str	r3, [r5, #0]
 800ce8c:	f7f7 fdb3 	bl	80049f6 <_isatty>
 800ce90:	1c43      	adds	r3, r0, #1
 800ce92:	d102      	bne.n	800ce9a <_isatty_r+0x1a>
 800ce94:	682b      	ldr	r3, [r5, #0]
 800ce96:	b103      	cbz	r3, 800ce9a <_isatty_r+0x1a>
 800ce98:	6023      	str	r3, [r4, #0]
 800ce9a:	bd38      	pop	{r3, r4, r5, pc}
 800ce9c:	200008a0 	.word	0x200008a0

0800cea0 <_init>:
 800cea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cea2:	bf00      	nop
 800cea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cea6:	bc08      	pop	{r3}
 800cea8:	469e      	mov	lr, r3
 800ceaa:	4770      	bx	lr

0800ceac <_fini>:
 800ceac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceae:	bf00      	nop
 800ceb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceb2:	bc08      	pop	{r3}
 800ceb4:	469e      	mov	lr, r3
 800ceb6:	4770      	bx	lr
