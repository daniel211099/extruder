
main-sw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d478  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aac  0800d618  0800d618  0001d618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0c4  0800e0c4  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800e0c4  0800e0c4  0001e0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0cc  0800e0cc  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0cc  0800e0cc  0001e0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e0d0  0800e0d0  0001e0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800e0d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c0  20000240  0800e314  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000900  0800e314  00020900  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001789b  00000000  00000000  000202b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003933  00000000  00000000  00037b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001350  00000000  00000000  0003b488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000edb  00000000  00000000  0003c7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019bdd  00000000  00000000  0003d6b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018681  00000000  00000000  00057290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000937b1  00000000  00000000  0006f911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000064e8  00000000  00000000  001030c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001095ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000240 	.word	0x20000240
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d600 	.word	0x0800d600

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000244 	.word	0x20000244
 80001dc:	0800d600 	.word	0x0800d600

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <ILI9341_SendCommand>:
};

//***** Functions prototypes *****//
//1. Write Command to LCD
void ILI9341_SendCommand(uint8_t com)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <ILI9341_SendCommand+0x54>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a11      	ldr	r2, [pc, #68]	; (8001058 <ILI9341_SendCommand+0x58>)
 8001014:	8811      	ldrh	r1, [r2, #0]
 8001016:	2200      	movs	r2, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f004 fb0d 	bl	8005638 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 800101e:	4b0f      	ldr	r3, [pc, #60]	; (800105c <ILI9341_SendCommand+0x5c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a0f      	ldr	r2, [pc, #60]	; (8001060 <ILI9341_SendCommand+0x60>)
 8001024:	8811      	ldrh	r1, [r2, #0]
 8001026:	2200      	movs	r2, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f004 fb05 	bl	8005638 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 800102e:	f107 010f 	add.w	r1, r7, #15
 8001032:	2305      	movs	r3, #5
 8001034:	2201      	movs	r2, #1
 8001036:	480b      	ldr	r0, [pc, #44]	; (8001064 <ILI9341_SendCommand+0x64>)
 8001038:	f005 f839 	bl	80060ae <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <ILI9341_SendCommand+0x5c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a07      	ldr	r2, [pc, #28]	; (8001060 <ILI9341_SendCommand+0x60>)
 8001042:	8811      	ldrh	r1, [r2, #0]
 8001044:	2201      	movs	r2, #1
 8001046:	4618      	mov	r0, r3
 8001048:	f004 faf6 	bl	8005638 <HAL_GPIO_WritePin>
}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200002c0 	.word	0x200002c0
 8001058:	200002c4 	.word	0x200002c4
 800105c:	200002b8 	.word	0x200002b8
 8001060:	200002bc 	.word	0x200002bc
 8001064:	20000260 	.word	0x20000260

08001068 <ILI9341_SendData>:

//2. Write data to LCD
void ILI9341_SendData(uint8_t data)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <ILI9341_SendData+0x54>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a11      	ldr	r2, [pc, #68]	; (80010c0 <ILI9341_SendData+0x58>)
 800107c:	8811      	ldrh	r1, [r2, #0]
 800107e:	2201      	movs	r2, #1
 8001080:	4618      	mov	r0, r3
 8001082:	f004 fad9 	bl	8005638 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8001086:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <ILI9341_SendData+0x5c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <ILI9341_SendData+0x60>)
 800108c:	8811      	ldrh	r1, [r2, #0]
 800108e:	2200      	movs	r2, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f004 fad1 	bl	8005638 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 8001096:	f107 010f 	add.w	r1, r7, #15
 800109a:	2305      	movs	r3, #5
 800109c:	2201      	movs	r2, #1
 800109e:	480b      	ldr	r0, [pc, #44]	; (80010cc <ILI9341_SendData+0x64>)
 80010a0:	f005 f805 	bl	80060ae <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 80010a4:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <ILI9341_SendData+0x5c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <ILI9341_SendData+0x60>)
 80010aa:	8811      	ldrh	r1, [r2, #0]
 80010ac:	2201      	movs	r2, #1
 80010ae:	4618      	mov	r0, r3
 80010b0:	f004 fac2 	bl	8005638 <HAL_GPIO_WritePin>
}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200002c0 	.word	0x200002c0
 80010c0:	200002c4 	.word	0x200002c4
 80010c4:	200002b8 	.word	0x200002b8
 80010c8:	200002bc 	.word	0x200002bc
 80010cc:	20000260 	.word	0x20000260

080010d0 <ILI9341_SetCursorPosition>:
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}

//3. Set cursor position
void ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4604      	mov	r4, r0
 80010d8:	4608      	mov	r0, r1
 80010da:	4611      	mov	r1, r2
 80010dc:	461a      	mov	r2, r3
 80010de:	4623      	mov	r3, r4
 80010e0:	80fb      	strh	r3, [r7, #6]
 80010e2:	4603      	mov	r3, r0
 80010e4:	80bb      	strh	r3, [r7, #4]
 80010e6:	460b      	mov	r3, r1
 80010e8:	807b      	strh	r3, [r7, #2]
 80010ea:	4613      	mov	r3, r2
 80010ec:	803b      	strh	r3, [r7, #0]

  ILI9341_SendCommand (ILI9341_COLUMN_ADDR);
 80010ee:	202a      	movs	r0, #42	; 0x2a
 80010f0:	f7ff ff86 	bl	8001000 <ILI9341_SendCommand>
  ILI9341_SendData(x1>>8);
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	0a1b      	lsrs	r3, r3, #8
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ffb3 	bl	8001068 <ILI9341_SendData>
  ILI9341_SendData(x1 & 0xFF);
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ffae 	bl	8001068 <ILI9341_SendData>
  ILI9341_SendData(x2>>8);
 800110c:	887b      	ldrh	r3, [r7, #2]
 800110e:	0a1b      	lsrs	r3, r3, #8
 8001110:	b29b      	uxth	r3, r3
 8001112:	b2db      	uxtb	r3, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ffa7 	bl	8001068 <ILI9341_SendData>
  ILI9341_SendData(x2 & 0xFF);
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ffa2 	bl	8001068 <ILI9341_SendData>

  ILI9341_SendCommand (ILI9341_PAGE_ADDR);
 8001124:	202b      	movs	r0, #43	; 0x2b
 8001126:	f7ff ff6b 	bl	8001000 <ILI9341_SendCommand>
  ILI9341_SendData(y1>>8);
 800112a:	88bb      	ldrh	r3, [r7, #4]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	b29b      	uxth	r3, r3
 8001130:	b2db      	uxtb	r3, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff98 	bl	8001068 <ILI9341_SendData>
  ILI9341_SendData(y1 & 0xFF);
 8001138:	88bb      	ldrh	r3, [r7, #4]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff93 	bl	8001068 <ILI9341_SendData>
  ILI9341_SendData(y2>>8);
 8001142:	883b      	ldrh	r3, [r7, #0]
 8001144:	0a1b      	lsrs	r3, r3, #8
 8001146:	b29b      	uxth	r3, r3
 8001148:	b2db      	uxtb	r3, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff8c 	bl	8001068 <ILI9341_SendData>
  ILI9341_SendData(y2 & 0xFF);
 8001150:	883b      	ldrh	r3, [r7, #0]
 8001152:	b2db      	uxtb	r3, r3
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff87 	bl	8001068 <ILI9341_SendData>
  ILI9341_SendCommand (ILI9341_GRAM);
 800115a:	202c      	movs	r0, #44	; 0x2c
 800115c:	f7ff ff50 	bl	8001000 <ILI9341_SendCommand>
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	bd90      	pop	{r4, r7, pc}

08001168 <ILI9341_Init>:
//4. Initialise function
void ILI9341_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
 {
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	4613      	mov	r3, r2
 8001176:	80fb      	strh	r3, [r7, #6]
	 //Copy SPI settings
	 memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 8001178:	2258      	movs	r2, #88	; 0x58
 800117a:	68f9      	ldr	r1, [r7, #12]
 800117c:	4853      	ldr	r0, [pc, #332]	; (80012cc <ILI9341_Init+0x164>)
 800117e:	f009 fd2a 	bl	800abd6 <memcpy>
	 //CS pin
	 tftCS_GPIO = csPORT;
 8001182:	4a53      	ldr	r2, [pc, #332]	; (80012d0 <ILI9341_Init+0x168>)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	6013      	str	r3, [r2, #0]
	 tftCS_PIN = csPIN;
 8001188:	4a52      	ldr	r2, [pc, #328]	; (80012d4 <ILI9341_Init+0x16c>)
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	8013      	strh	r3, [r2, #0]
	 //DC pin
	 tftDC_GPIO = dcPORT;
 800118e:	4a52      	ldr	r2, [pc, #328]	; (80012d8 <ILI9341_Init+0x170>)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	6013      	str	r3, [r2, #0]
	 tftDC_PIN = dcPIN;
 8001194:	4a51      	ldr	r2, [pc, #324]	; (80012dc <ILI9341_Init+0x174>)
 8001196:	8b3b      	ldrh	r3, [r7, #24]
 8001198:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 800119a:	4b4d      	ldr	r3, [pc, #308]	; (80012d0 <ILI9341_Init+0x168>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a4d      	ldr	r2, [pc, #308]	; (80012d4 <ILI9341_Init+0x16c>)
 80011a0:	8811      	ldrh	r1, [r2, #0]
 80011a2:	2201      	movs	r2, #1
 80011a4:	4618      	mov	r0, r3
 80011a6:	f004 fa47 	bl	8005638 <HAL_GPIO_WritePin>
	 //RESET pin
	 tftRESET_GPIO = resetPORT;
 80011aa:	4a4d      	ldr	r2, [pc, #308]	; (80012e0 <ILI9341_Init+0x178>)
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	6013      	str	r3, [r2, #0]
	 tftRESET_PIN = resetPIN;
 80011b0:	4a4c      	ldr	r2, [pc, #304]	; (80012e4 <ILI9341_Init+0x17c>)
 80011b2:	8c3b      	ldrh	r3, [r7, #32]
 80011b4:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);  //Turn LCD ON
 80011b6:	8c3b      	ldrh	r3, [r7, #32]
 80011b8:	2201      	movs	r2, #1
 80011ba:	4619      	mov	r1, r3
 80011bc:	69f8      	ldr	r0, [r7, #28]
 80011be:	f004 fa3b 	bl	8005638 <HAL_GPIO_WritePin>
	 
   ILI9341_SendCommand (ILI9341_RESET); // software reset comand
 80011c2:	2001      	movs	r0, #1
 80011c4:	f7ff ff1c 	bl	8001000 <ILI9341_SendCommand>
   HAL_Delay(100);
 80011c8:	2064      	movs	r0, #100	; 0x64
 80011ca:	f003 fee9 	bl	8004fa0 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_OFF); // display off
 80011ce:	2028      	movs	r0, #40	; 0x28
 80011d0:	f7ff ff16 	bl	8001000 <ILI9341_SendCommand>
   //------------power control------------------------------
   ILI9341_SendCommand (ILI9341_POWER1); // power control
 80011d4:	20c0      	movs	r0, #192	; 0xc0
 80011d6:	f7ff ff13 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData   (0x26); // GVDD = 4.75v
 80011da:	2026      	movs	r0, #38	; 0x26
 80011dc:	f7ff ff44 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_POWER2); // power control
 80011e0:	20c1      	movs	r0, #193	; 0xc1
 80011e2:	f7ff ff0d 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData   (0x11); // AVDD=VCIx2, VGH=VCIx7, VGL=-VCIx3
 80011e6:	2011      	movs	r0, #17
 80011e8:	f7ff ff3e 	bl	8001068 <ILI9341_SendData>
   //--------------VCOM-------------------------------------
   ILI9341_SendCommand (ILI9341_VCOM1); // vcom control
 80011ec:	20c5      	movs	r0, #197	; 0xc5
 80011ee:	f7ff ff07 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData   (0x35); // Set the VCOMH voltage (0x35 = 4.025v)
 80011f2:	2035      	movs	r0, #53	; 0x35
 80011f4:	f7ff ff38 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0x3e); // Set the VCOML voltage (0x3E = -0.950v)
 80011f8:	203e      	movs	r0, #62	; 0x3e
 80011fa:	f7ff ff35 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_VCOM2); // vcom control
 80011fe:	20c7      	movs	r0, #199	; 0xc7
 8001200:	f7ff fefe 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData   (0xbe);
 8001204:	20be      	movs	r0, #190	; 0xbe
 8001206:	f7ff ff2f 	bl	8001068 <ILI9341_SendData>

   //------------memory access control------------------------
   ILI9341_SendCommand (ILI9341_MAC); // memory access control
 800120a:	2036      	movs	r0, #54	; 0x36
 800120c:	f7ff fef8 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData(0x48);
 8001210:	2048      	movs	r0, #72	; 0x48
 8001212:	f7ff ff29 	bl	8001068 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_PIXEL_FORMAT); // pixel format set
 8001216:	203a      	movs	r0, #58	; 0x3a
 8001218:	f7ff fef2 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData   (0x55); // 16bit /pixel
 800121c:	2055      	movs	r0, #85	; 0x55
 800121e:	f7ff ff23 	bl	8001068 <ILI9341_SendData>

	 ILI9341_SendCommand(ILI9341_FRC);
 8001222:	20b1      	movs	r0, #177	; 0xb1
 8001224:	f7ff feec 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData(0);
 8001228:	2000      	movs	r0, #0
 800122a:	f7ff ff1d 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData(0x1F);
 800122e:	201f      	movs	r0, #31
 8001230:	f7ff ff1a 	bl	8001068 <ILI9341_SendData>
   //-------------ddram ----------------------------
   ILI9341_SendCommand (ILI9341_COLUMN_ADDR); // column set
 8001234:	202a      	movs	r0, #42	; 0x2a
 8001236:	f7ff fee3 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // x0_HIGH---0
 800123a:	2000      	movs	r0, #0
 800123c:	f7ff ff14 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x0_LOW----0
 8001240:	2000      	movs	r0, #0
 8001242:	f7ff ff11 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x1_HIGH---240
 8001246:	2000      	movs	r0, #0
 8001248:	f7ff ff0e 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0xEF); // x1_LOW----240
 800124c:	20ef      	movs	r0, #239	; 0xef
 800124e:	f7ff ff0b 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_PAGE_ADDR); // page address set
 8001252:	202b      	movs	r0, #43	; 0x2b
 8001254:	f7ff fed4 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // y0_HIGH---0
 8001258:	2000      	movs	r0, #0
 800125a:	f7ff ff05 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // y0_LOW----0
 800125e:	2000      	movs	r0, #0
 8001260:	f7ff ff02 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0x01); // y1_HIGH---320
 8001264:	2001      	movs	r0, #1
 8001266:	f7ff feff 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0x3F); // y1_LOW----320
 800126a:	203f      	movs	r0, #63	; 0x3f
 800126c:	f7ff fefc 	bl	8001068 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_TEARING_OFF); // tearing effect off
 8001270:	2034      	movs	r0, #52	; 0x34
 8001272:	f7ff fec5 	bl	8001000 <ILI9341_SendCommand>
   //LCD_write_cmd(ILI9341_TEARING_ON); // tearing effect on
   //LCD_write_cmd(ILI9341_DISPLAY_INVERSION); // display inversion
   ILI9341_SendCommand (ILI9341_Entry_Mode_Set); // entry mode set
 8001276:	20b7      	movs	r0, #183	; 0xb7
 8001278:	f7ff fec2 	bl	8001000 <ILI9341_SendCommand>
   // Deep Standby Mode: OFF
   // Set the output level of gate driver G1-G320: Normal display
   // Low voltage detection: Disable
   ILI9341_SendData   (0x07);
 800127c:	2007      	movs	r0, #7
 800127e:	f7ff fef3 	bl	8001068 <ILI9341_SendData>
   //-----------------display------------------------
   ILI9341_SendCommand (ILI9341_DFC); // display function control
 8001282:	20b6      	movs	r0, #182	; 0xb6
 8001284:	f7ff febc 	bl	8001000 <ILI9341_SendCommand>
   //Set the scan mode in non-display area
   //Determine source/VCOM output in a non-display area in the partial display mode
   ILI9341_SendData   (0x0a);
 8001288:	200a      	movs	r0, #10
 800128a:	f7ff feed 	bl	8001068 <ILI9341_SendData>
   //Select whether the liquid crystal type is normally white type or normally black type
   //Sets the direction of scan by the gate driver in the range determined by SCN and NL
   //Select the shift direction of outputs from the source driver
   //Sets the gate driver pin arrangement in combination with the GS bit to select the optimal scan mode for the module
   //Specify the scan cycle interval of gate driver in non-display area when PTG to select interval scan
   ILI9341_SendData   (0x82);
 800128e:	2082      	movs	r0, #130	; 0x82
 8001290:	f7ff feea 	bl	8001068 <ILI9341_SendData>
   // Sets the number of lines to drive the LCD at an interval of 8 lines
   ILI9341_SendData   (0x27);
 8001294:	2027      	movs	r0, #39	; 0x27
 8001296:	f7ff fee7 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // clock divisor
 800129a:	2000      	movs	r0, #0
 800129c:	f7ff fee4 	bl	8001068 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_SLEEP_OUT); // sleep out
 80012a0:	2011      	movs	r0, #17
 80012a2:	f7ff fead 	bl	8001000 <ILI9341_SendCommand>
   HAL_Delay(100);
 80012a6:	2064      	movs	r0, #100	; 0x64
 80012a8:	f003 fe7a 	bl	8004fa0 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_ON); // display on
 80012ac:	2029      	movs	r0, #41	; 0x29
 80012ae:	f7ff fea7 	bl	8001000 <ILI9341_SendCommand>
   HAL_Delay(100);
 80012b2:	2064      	movs	r0, #100	; 0x64
 80012b4:	f003 fe74 	bl	8004fa0 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_GRAM); // memory write
 80012b8:	202c      	movs	r0, #44	; 0x2c
 80012ba:	f7ff fea1 	bl	8001000 <ILI9341_SendCommand>
   HAL_Delay(5);
 80012be:	2005      	movs	r0, #5
 80012c0:	f003 fe6e 	bl	8004fa0 <HAL_Delay>
 }
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000260 	.word	0x20000260
 80012d0:	200002b8 	.word	0x200002b8
 80012d4:	200002bc 	.word	0x200002bc
 80012d8:	200002c0 	.word	0x200002c0
 80012dc:	200002c4 	.word	0x200002c4
 80012e0:	200002c8 	.word	0x200002c8
 80012e4:	200002cc 	.word	0x200002cc

080012e8 <ILI9341_DrawPixel>:

//5. Write data to a single pixel
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	80fb      	strh	r3, [r7, #6]
 80012f2:	460b      	mov	r3, r1
 80012f4:	80bb      	strh	r3, [r7, #4]
 80012f6:	4613      	mov	r3, r2
 80012f8:	807b      	strh	r3, [r7, #2]
  ILI9341_SetCursorPosition(x, y, x, y);
 80012fa:	88bb      	ldrh	r3, [r7, #4]
 80012fc:	88fa      	ldrh	r2, [r7, #6]
 80012fe:	88b9      	ldrh	r1, [r7, #4]
 8001300:	88f8      	ldrh	r0, [r7, #6]
 8001302:	f7ff fee5 	bl	80010d0 <ILI9341_SetCursorPosition>
	ILI9341_SendData(color>>8);
 8001306:	887b      	ldrh	r3, [r7, #2]
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	b29b      	uxth	r3, r3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff feaa 	bl	8001068 <ILI9341_SendData>
	ILI9341_SendData(color&0xFF);
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fea5 	bl	8001068 <ILI9341_SendData>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <ILI9341_Fill>:
//6. Fill the entire screen with a background color
void ILI9341_Fill(uint16_t color) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	80fb      	strh	r3, [r7, #6]
	uint32_t n = ILI9341_PIXEL_COUNT;
 8001332:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001336:	60fb      	str	r3, [r7, #12]
	uint16_t myColor = 0xFF;
 8001338:	23ff      	movs	r3, #255	; 0xff
 800133a:	817b      	strh	r3, [r7, #10]
	
	if(rotationNum==1 || rotationNum==3)
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <ILI9341_Fill+0x84>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d003      	beq.n	800134c <ILI9341_Fill+0x24>
 8001344:	4b19      	ldr	r3, [pc, #100]	; (80013ac <ILI9341_Fill+0x84>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b03      	cmp	r3, #3
 800134a:	d107      	bne.n	800135c <ILI9341_Fill+0x34>
	{
		ILI9341_SetCursorPosition(0, 0,   ILI9341_WIDTH -1, ILI9341_HEIGHT -1);
 800134c:	f240 133f 	movw	r3, #319	; 0x13f
 8001350:	22ef      	movs	r2, #239	; 0xef
 8001352:	2100      	movs	r1, #0
 8001354:	2000      	movs	r0, #0
 8001356:	f7ff febb 	bl	80010d0 <ILI9341_SetCursorPosition>
 800135a:	e00e      	b.n	800137a <ILI9341_Fill+0x52>
	}
	else if(rotationNum==2 || rotationNum==4)
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <ILI9341_Fill+0x84>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d003      	beq.n	800136c <ILI9341_Fill+0x44>
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <ILI9341_Fill+0x84>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b04      	cmp	r3, #4
 800136a:	d116      	bne.n	800139a <ILI9341_Fill+0x72>
	{
		ILI9341_SetCursorPosition(0, 0, ILI9341_HEIGHT -1, ILI9341_WIDTH -1);
 800136c:	23ef      	movs	r3, #239	; 0xef
 800136e:	f240 123f 	movw	r2, #319	; 0x13f
 8001372:	2100      	movs	r1, #0
 8001374:	2000      	movs	r0, #0
 8001376:	f7ff feab 	bl	80010d0 <ILI9341_SetCursorPosition>
	}
	
	
	while (n) {
 800137a:	e00e      	b.n	800139a <ILI9341_Fill+0x72>
			n--;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	3b01      	subs	r3, #1
 8001380:	60fb      	str	r3, [r7, #12]
       ILI9341_SendData(color>>8);
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	b29b      	uxth	r3, r3
 8001388:	b2db      	uxtb	r3, r3
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fe6c 	bl	8001068 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fe67 	bl	8001068 <ILI9341_SendData>
	while (n) {
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1ed      	bne.n	800137c <ILI9341_Fill+0x54>
	}
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000000 	.word	0x20000000

080013b0 <ILI9341_Fill_Rect>:
//7. Rectangle drawing functions
void ILI9341_Fill_Rect(unsigned int x0,unsigned int y0, unsigned int x1,unsigned int y1, uint16_t color) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
 80013bc:	603b      	str	r3, [r7, #0]
	uint32_t n = ((x1+1)-x0)*((y1+1)-y0);
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	3301      	adds	r3, #1
 80013c6:	6839      	ldr	r1, [r7, #0]
 80013c8:	68ba      	ldr	r2, [r7, #8]
 80013ca:	1a8a      	subs	r2, r1, r2
 80013cc:	3201      	adds	r2, #1
 80013ce:	fb02 f303 	mul.w	r3, r2, r3
 80013d2:	617b      	str	r3, [r7, #20]
	if (n>ILI9341_PIXEL_COUNT) n=ILI9341_PIXEL_COUNT;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 80013da:	d902      	bls.n	80013e2 <ILI9341_Fill_Rect+0x32>
 80013dc:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80013e0:	617b      	str	r3, [r7, #20]
	ILI9341_SetCursorPosition(x0, y0, x1, y1);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	b298      	uxth	r0, r3
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	b299      	uxth	r1, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	f7ff fe6d 	bl	80010d0 <ILI9341_SetCursorPosition>
	while (n) {
 80013f6:	e00e      	b.n	8001416 <ILI9341_Fill_Rect+0x66>
			n--;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
      ILI9341_SendData(color>>8);
 80013fe:	8c3b      	ldrh	r3, [r7, #32]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	b29b      	uxth	r3, r3
 8001404:	b2db      	uxtb	r3, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fe2e 	bl	8001068 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 800140c:	8c3b      	ldrh	r3, [r7, #32]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fe29 	bl	8001068 <ILI9341_SendData>
	while (n) {
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1ed      	bne.n	80013f8 <ILI9341_Fill_Rect+0x48>
	}
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <fillCircleHelper>:
      ILI9341_DrawPixel(x0 - x, y0 - y, color);
    }
  }
}
static void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 8001426:	b590      	push	{r4, r7, lr}
 8001428:	b087      	sub	sp, #28
 800142a:	af00      	add	r7, sp, #0
 800142c:	4604      	mov	r4, r0
 800142e:	4608      	mov	r0, r1
 8001430:	4611      	mov	r1, r2
 8001432:	461a      	mov	r2, r3
 8001434:	4623      	mov	r3, r4
 8001436:	80fb      	strh	r3, [r7, #6]
 8001438:	4603      	mov	r3, r0
 800143a:	80bb      	strh	r3, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
 8001440:	4613      	mov	r3, r2
 8001442:	707b      	strb	r3, [r7, #1]
	int16_t f     = 1 - r;
 8001444:	887b      	ldrh	r3, [r7, #2]
 8001446:	f1c3 0301 	rsb	r3, r3, #1
 800144a:	b29b      	uxth	r3, r3
 800144c:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 800144e:	2301      	movs	r3, #1
 8001450:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8001452:	887b      	ldrh	r3, [r7, #2]
 8001454:	461a      	mov	r2, r3
 8001456:	03d2      	lsls	r2, r2, #15
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	b29b      	uxth	r3, r3
 800145e:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 8001464:	887b      	ldrh	r3, [r7, #2]
 8001466:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 8001468:	e083      	b.n	8001572 <fillCircleHelper+0x14c>
    if (f >= 0) {
 800146a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800146e:	2b00      	cmp	r3, #0
 8001470:	db0e      	blt.n	8001490 <fillCircleHelper+0x6a>
      y--;
 8001472:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001476:	b29b      	uxth	r3, r3
 8001478:	3b01      	subs	r3, #1
 800147a:	b29b      	uxth	r3, r3
 800147c:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 800147e:	8a7b      	ldrh	r3, [r7, #18]
 8001480:	3302      	adds	r3, #2
 8001482:	b29b      	uxth	r3, r3
 8001484:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 8001486:	8afa      	ldrh	r2, [r7, #22]
 8001488:	8a7b      	ldrh	r3, [r7, #18]
 800148a:	4413      	add	r3, r2
 800148c:	b29b      	uxth	r3, r3
 800148e:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8001490:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001494:	b29b      	uxth	r3, r3
 8001496:	3301      	adds	r3, #1
 8001498:	b29b      	uxth	r3, r3
 800149a:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 800149c:	8abb      	ldrh	r3, [r7, #20]
 800149e:	3302      	adds	r3, #2
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 80014a4:	8afa      	ldrh	r2, [r7, #22]
 80014a6:	8abb      	ldrh	r3, [r7, #20]
 80014a8:	4413      	add	r3, r2
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 80014ae:	787b      	ldrb	r3, [r7, #1]
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d02b      	beq.n	8001510 <fillCircleHelper+0xea>
      ILI9341_drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 80014b8:	88fa      	ldrh	r2, [r7, #6]
 80014ba:	8a3b      	ldrh	r3, [r7, #16]
 80014bc:	4413      	add	r3, r2
 80014be:	b29b      	uxth	r3, r3
 80014c0:	b218      	sxth	r0, r3
 80014c2:	88ba      	ldrh	r2, [r7, #4]
 80014c4:	89fb      	ldrh	r3, [r7, #14]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	b219      	sxth	r1, r3
 80014cc:	89fb      	ldrh	r3, [r7, #14]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014d4:	4413      	add	r3, r2
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	3301      	adds	r3, #1
 80014da:	b29b      	uxth	r3, r3
 80014dc:	b21a      	sxth	r2, r3
 80014de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014e0:	f000 f921 	bl	8001726 <ILI9341_drawFastVLine>
      ILI9341_drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80014e4:	88fa      	ldrh	r2, [r7, #6]
 80014e6:	89fb      	ldrh	r3, [r7, #14]
 80014e8:	4413      	add	r3, r2
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	b218      	sxth	r0, r3
 80014ee:	88ba      	ldrh	r2, [r7, #4]
 80014f0:	8a3b      	ldrh	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	b219      	sxth	r1, r3
 80014f8:	8a3b      	ldrh	r3, [r7, #16]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001500:	4413      	add	r3, r2
 8001502:	b29b      	uxth	r3, r3
 8001504:	3301      	adds	r3, #1
 8001506:	b29b      	uxth	r3, r3
 8001508:	b21a      	sxth	r2, r3
 800150a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800150c:	f000 f90b 	bl	8001726 <ILI9341_drawFastVLine>
    }
    if (cornername & 0x2) {
 8001510:	787b      	ldrb	r3, [r7, #1]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d02b      	beq.n	8001572 <fillCircleHelper+0x14c>
      ILI9341_drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 800151a:	88fa      	ldrh	r2, [r7, #6]
 800151c:	8a3b      	ldrh	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	b29b      	uxth	r3, r3
 8001522:	b218      	sxth	r0, r3
 8001524:	88ba      	ldrh	r2, [r7, #4]
 8001526:	89fb      	ldrh	r3, [r7, #14]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	b29b      	uxth	r3, r3
 800152c:	b219      	sxth	r1, r3
 800152e:	89fb      	ldrh	r3, [r7, #14]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	b29a      	uxth	r2, r3
 8001534:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001536:	4413      	add	r3, r2
 8001538:	b29b      	uxth	r3, r3
 800153a:	3301      	adds	r3, #1
 800153c:	b29b      	uxth	r3, r3
 800153e:	b21a      	sxth	r2, r3
 8001540:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001542:	f000 f8f0 	bl	8001726 <ILI9341_drawFastVLine>
      ILI9341_drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 8001546:	88fa      	ldrh	r2, [r7, #6]
 8001548:	89fb      	ldrh	r3, [r7, #14]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	b29b      	uxth	r3, r3
 800154e:	b218      	sxth	r0, r3
 8001550:	88ba      	ldrh	r2, [r7, #4]
 8001552:	8a3b      	ldrh	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	b29b      	uxth	r3, r3
 8001558:	b219      	sxth	r1, r3
 800155a:	8a3b      	ldrh	r3, [r7, #16]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	b29a      	uxth	r2, r3
 8001560:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001562:	4413      	add	r3, r2
 8001564:	b29b      	uxth	r3, r3
 8001566:	3301      	adds	r3, #1
 8001568:	b29b      	uxth	r3, r3
 800156a:	b21a      	sxth	r2, r3
 800156c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800156e:	f000 f8da 	bl	8001726 <ILI9341_drawFastVLine>
  while (x<y) {
 8001572:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001576:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800157a:	429a      	cmp	r2, r3
 800157c:	f6ff af75 	blt.w	800146a <fillCircleHelper+0x44>
    }
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	371c      	adds	r7, #28
 8001586:	46bd      	mov	sp, r7
 8001588:	bd90      	pop	{r4, r7, pc}

0800158a <ILI9341_fillCircle>:
void ILI9341_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 800158a:	b590      	push	{r4, r7, lr}
 800158c:	b085      	sub	sp, #20
 800158e:	af02      	add	r7, sp, #8
 8001590:	4604      	mov	r4, r0
 8001592:	4608      	mov	r0, r1
 8001594:	4611      	mov	r1, r2
 8001596:	461a      	mov	r2, r3
 8001598:	4623      	mov	r3, r4
 800159a:	80fb      	strh	r3, [r7, #6]
 800159c:	4603      	mov	r3, r0
 800159e:	80bb      	strh	r3, [r7, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	807b      	strh	r3, [r7, #2]
 80015a4:	4613      	mov	r3, r2
 80015a6:	803b      	strh	r3, [r7, #0]
	ILI9341_drawFastVLine(x0, y0-r, 2*r+1, color);
 80015a8:	88ba      	ldrh	r2, [r7, #4]
 80015aa:	887b      	ldrh	r3, [r7, #2]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	b219      	sxth	r1, r3
 80015b2:	887b      	ldrh	r3, [r7, #2]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	3301      	adds	r3, #1
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	b21a      	sxth	r2, r3
 80015be:	883b      	ldrh	r3, [r7, #0]
 80015c0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80015c4:	f000 f8af 	bl	8001726 <ILI9341_drawFastVLine>
  fillCircleHelper(x0, y0, r, 3, 0, color);
 80015c8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80015cc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80015d0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80015d4:	883b      	ldrh	r3, [r7, #0]
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	2300      	movs	r3, #0
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2303      	movs	r3, #3
 80015de:	f7ff ff22 	bl	8001426 <fillCircleHelper>
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd90      	pop	{r4, r7, pc}

080015ea <ILI9341_drawLine>:

//9. Line drawing functions
void ILI9341_drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80015ea:	b590      	push	{r4, r7, lr}
 80015ec:	b089      	sub	sp, #36	; 0x24
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4604      	mov	r4, r0
 80015f2:	4608      	mov	r0, r1
 80015f4:	4611      	mov	r1, r2
 80015f6:	461a      	mov	r2, r3
 80015f8:	4623      	mov	r3, r4
 80015fa:	80fb      	strh	r3, [r7, #6]
 80015fc:	4603      	mov	r3, r0
 80015fe:	80bb      	strh	r3, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	807b      	strh	r3, [r7, #2]
 8001604:	4613      	mov	r3, r2
 8001606:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8001608:	f9b7 2000 	ldrsh.w	r2, [r7]
 800160c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001616:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800161a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800161e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001622:	1acb      	subs	r3, r1, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	bfb8      	it	lt
 8001628:	425b      	neglt	r3, r3
 800162a:	429a      	cmp	r2, r3
 800162c:	bfcc      	ite	gt
 800162e:	2301      	movgt	r3, #1
 8001630:	2300      	movle	r3, #0
 8001632:	b2db      	uxtb	r3, r3
 8001634:	837b      	strh	r3, [r7, #26]
  if (steep) {
 8001636:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00b      	beq.n	8001656 <ILI9341_drawLine+0x6c>
    swap(x0, y0);
 800163e:	88fb      	ldrh	r3, [r7, #6]
 8001640:	833b      	strh	r3, [r7, #24]
 8001642:	88bb      	ldrh	r3, [r7, #4]
 8001644:	80fb      	strh	r3, [r7, #6]
 8001646:	8b3b      	ldrh	r3, [r7, #24]
 8001648:	80bb      	strh	r3, [r7, #4]
    swap(x1, y1);
 800164a:	887b      	ldrh	r3, [r7, #2]
 800164c:	82fb      	strh	r3, [r7, #22]
 800164e:	883b      	ldrh	r3, [r7, #0]
 8001650:	807b      	strh	r3, [r7, #2]
 8001652:	8afb      	ldrh	r3, [r7, #22]
 8001654:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1) {
 8001656:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800165a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800165e:	429a      	cmp	r2, r3
 8001660:	dd0b      	ble.n	800167a <ILI9341_drawLine+0x90>
    swap(x0, x1);
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	82bb      	strh	r3, [r7, #20]
 8001666:	887b      	ldrh	r3, [r7, #2]
 8001668:	80fb      	strh	r3, [r7, #6]
 800166a:	8abb      	ldrh	r3, [r7, #20]
 800166c:	807b      	strh	r3, [r7, #2]
    swap(y0, y1);
 800166e:	88bb      	ldrh	r3, [r7, #4]
 8001670:	827b      	strh	r3, [r7, #18]
 8001672:	883b      	ldrh	r3, [r7, #0]
 8001674:	80bb      	strh	r3, [r7, #4]
 8001676:	8a7b      	ldrh	r3, [r7, #18]
 8001678:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	b29b      	uxth	r3, r3
 8001682:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8001684:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001688:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	bfb8      	it	lt
 8001692:	425b      	neglt	r3, r3
 8001694:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 8001696:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800169a:	0fda      	lsrs	r2, r3, #31
 800169c:	4413      	add	r3, r2
 800169e:	105b      	asrs	r3, r3, #1
 80016a0:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1) {
 80016a2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80016a6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	da02      	bge.n	80016b4 <ILI9341_drawLine+0xca>
    ystep = 1;
 80016ae:	2301      	movs	r3, #1
 80016b0:	83bb      	strh	r3, [r7, #28]
 80016b2:	e02d      	b.n	8001710 <ILI9341_drawLine+0x126>
  } else {
    ystep = -1;
 80016b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016b8:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++) {
 80016ba:	e029      	b.n	8001710 <ILI9341_drawLine+0x126>
    if (steep) {
 80016bc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d006      	beq.n	80016d2 <ILI9341_drawLine+0xe8>
      ILI9341_DrawPixel(y0, x0, color);
 80016c4:	88bb      	ldrh	r3, [r7, #4]
 80016c6:	88f9      	ldrh	r1, [r7, #6]
 80016c8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fe0c 	bl	80012e8 <ILI9341_DrawPixel>
 80016d0:	e005      	b.n	80016de <ILI9341_drawLine+0xf4>
    } else {
      ILI9341_DrawPixel(x0, y0, color);
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	88b9      	ldrh	r1, [r7, #4]
 80016d6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fe05 	bl	80012e8 <ILI9341_DrawPixel>
    }
    err -= dy;
 80016de:	8bfa      	ldrh	r2, [r7, #30]
 80016e0:	89fb      	ldrh	r3, [r7, #14]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	83fb      	strh	r3, [r7, #30]
    if (err < 0) {
 80016e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	da09      	bge.n	8001704 <ILI9341_drawLine+0x11a>
      y0 += ystep;
 80016f0:	88ba      	ldrh	r2, [r7, #4]
 80016f2:	8bbb      	ldrh	r3, [r7, #28]
 80016f4:	4413      	add	r3, r2
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	80bb      	strh	r3, [r7, #4]
      err += dx;
 80016fa:	8bfa      	ldrh	r2, [r7, #30]
 80016fc:	8a3b      	ldrh	r3, [r7, #16]
 80016fe:	4413      	add	r3, r2
 8001700:	b29b      	uxth	r3, r3
 8001702:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++) {
 8001704:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001708:	b29b      	uxth	r3, r3
 800170a:	3301      	adds	r3, #1
 800170c:	b29b      	uxth	r3, r3
 800170e:	80fb      	strh	r3, [r7, #6]
 8001710:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001714:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001718:	429a      	cmp	r2, r3
 800171a:	ddcf      	ble.n	80016bc <ILI9341_drawLine+0xd2>
    }
  }
}	
 800171c:	bf00      	nop
 800171e:	bf00      	nop
 8001720:	3724      	adds	r7, #36	; 0x24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd90      	pop	{r4, r7, pc}

08001726 <ILI9341_drawFastVLine>:
{
	ILI9341_drawLine(x, y, x+w-1, y, color);
}

void ILI9341_drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8001726:	b590      	push	{r4, r7, lr}
 8001728:	b085      	sub	sp, #20
 800172a:	af02      	add	r7, sp, #8
 800172c:	4604      	mov	r4, r0
 800172e:	4608      	mov	r0, r1
 8001730:	4611      	mov	r1, r2
 8001732:	461a      	mov	r2, r3
 8001734:	4623      	mov	r3, r4
 8001736:	80fb      	strh	r3, [r7, #6]
 8001738:	4603      	mov	r3, r0
 800173a:	80bb      	strh	r3, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	807b      	strh	r3, [r7, #2]
 8001740:	4613      	mov	r3, r2
 8001742:	803b      	strh	r3, [r7, #0]
	ILI9341_drawLine(x, y, x, y+h-1, color);
 8001744:	88ba      	ldrh	r2, [r7, #4]
 8001746:	887b      	ldrh	r3, [r7, #2]
 8001748:	4413      	add	r3, r2
 800174a:	b29b      	uxth	r3, r3
 800174c:	3b01      	subs	r3, #1
 800174e:	b29b      	uxth	r3, r3
 8001750:	b21c      	sxth	r4, r3
 8001752:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001756:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800175a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800175e:	883b      	ldrh	r3, [r7, #0]
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	4623      	mov	r3, r4
 8001764:	f7ff ff41 	bl	80015ea <ILI9341_drawLine>
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	bd90      	pop	{r4, r7, pc}

08001770 <ILI9341_drawChar>:
	}
}

//11. Text printing functions
void ILI9341_drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8001770:	b5b0      	push	{r4, r5, r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af02      	add	r7, sp, #8
 8001776:	4604      	mov	r4, r0
 8001778:	4608      	mov	r0, r1
 800177a:	4611      	mov	r1, r2
 800177c:	461a      	mov	r2, r3
 800177e:	4623      	mov	r3, r4
 8001780:	80fb      	strh	r3, [r7, #6]
 8001782:	4603      	mov	r3, r0
 8001784:	80bb      	strh	r3, [r7, #4]
 8001786:	460b      	mov	r3, r1
 8001788:	70fb      	strb	r3, [r7, #3]
 800178a:	4613      	mov	r3, r2
 800178c:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 800178e:	4b98      	ldr	r3, [pc, #608]	; (80019f0 <ILI9341_drawChar+0x280>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d003      	beq.n	800179e <ILI9341_drawChar+0x2e>
 8001796:	4b96      	ldr	r3, [pc, #600]	; (80019f0 <ILI9341_drawChar+0x280>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b03      	cmp	r3, #3
 800179c:	d11f      	bne.n	80017de <ILI9341_drawChar+0x6e>
	{
		if((x >= ILI9341_WIDTH)            || // Clip right
 800179e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017a2:	2bef      	cmp	r3, #239	; 0xef
 80017a4:	f300 811d 	bgt.w	80019e2 <ILI9341_drawChar+0x272>
 80017a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017ac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80017b0:	f280 8117 	bge.w	80019e2 <ILI9341_drawChar+0x272>
     (y >= ILI9341_HEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 80017b4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80017b8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80017bc:	4613      	mov	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4413      	add	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	440b      	add	r3, r1
     (y >= ILI9341_HEIGHT)           || // Clip bottom
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f340 810b 	ble.w	80019e2 <ILI9341_drawChar+0x272>
     ((y + 8 * size - 1) < 0))   // Clip top
 80017cc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80017d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 80017d8:	2b00      	cmp	r3, #0
 80017da:	dc21      	bgt.n	8001820 <ILI9341_drawChar+0xb0>
    return;
 80017dc:	e101      	b.n	80019e2 <ILI9341_drawChar+0x272>
	}
	else
	{
		if((y >= ILI9341_WIDTH)            || // Clip right
 80017de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017e2:	2bef      	cmp	r3, #239	; 0xef
 80017e4:	f300 80ff 	bgt.w	80019e6 <ILI9341_drawChar+0x276>
 80017e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ec:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80017f0:	f280 80f9 	bge.w	80019e6 <ILI9341_drawChar+0x276>
     (x >= ILI9341_HEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 80017f4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80017f8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80017fc:	4613      	mov	r3, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4413      	add	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	440b      	add	r3, r1
     (x >= ILI9341_HEIGHT)           || // Clip bottom
 8001806:	2b00      	cmp	r3, #0
 8001808:	f340 80ed 	ble.w	80019e6 <ILI9341_drawChar+0x276>
     ((x + 8 * size - 1) < 0))   // Clip top
 800180c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001810:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4413      	add	r3, r2
     ((y + 6 * size - 1) < 0) || // Clip left
 8001818:	2b00      	cmp	r3, #0
 800181a:	f340 80e4 	ble.w	80019e6 <ILI9341_drawChar+0x276>
 800181e:	e000      	b.n	8001822 <ILI9341_drawChar+0xb2>
		if((x >= ILI9341_WIDTH)            || // Clip right
 8001820:	bf00      	nop
    return;
	}	
	

  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 8001822:	4b74      	ldr	r3, [pc, #464]	; (80019f4 <ILI9341_drawChar+0x284>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	f083 0301 	eor.w	r3, r3, #1
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <ILI9341_drawChar+0xcc>
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	2baf      	cmp	r3, #175	; 0xaf
 8001834:	d902      	bls.n	800183c <ILI9341_drawChar+0xcc>
 8001836:	78fb      	ldrb	r3, [r7, #3]
 8001838:	3301      	adds	r3, #1
 800183a:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 800183c:	2300      	movs	r3, #0
 800183e:	73fb      	strb	r3, [r7, #15]
 8001840:	e0c9      	b.n	80019d6 <ILI9341_drawChar+0x266>
    uint8_t line;
    if (i == 5) 
 8001842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001846:	2b05      	cmp	r3, #5
 8001848:	d102      	bne.n	8001850 <ILI9341_drawChar+0xe0>
      line = 0x0;
 800184a:	2300      	movs	r3, #0
 800184c:	73bb      	strb	r3, [r7, #14]
 800184e:	e00b      	b.n	8001868 <ILI9341_drawChar+0xf8>
    else 
      line = pgm_read_byte(font1+(c*5)+i);
 8001850:	78fa      	ldrb	r2, [r7, #3]
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	461a      	mov	r2, r3
 800185a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185e:	4413      	add	r3, r2
 8001860:	4a65      	ldr	r2, [pc, #404]	; (80019f8 <ILI9341_drawChar+0x288>)
 8001862:	4413      	add	r3, r2
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8001868:	2300      	movs	r3, #0
 800186a:	737b      	strb	r3, [r7, #13]
 800186c:	e0a8      	b.n	80019c0 <ILI9341_drawChar+0x250>
      if (line & 0x1) {
 800186e:	7bbb      	ldrb	r3, [r7, #14]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	d04b      	beq.n	8001910 <ILI9341_drawChar+0x1a0>
        if (size == 1) // default size
 8001878:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800187c:	2b01      	cmp	r3, #1
 800187e:	d110      	bne.n	80018a2 <ILI9341_drawChar+0x132>
          ILI9341_DrawPixel(x+i, y+j, color);
 8001880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001884:	b29a      	uxth	r2, r3
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	4413      	add	r3, r2
 800188a:	b298      	uxth	r0, r3
 800188c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001890:	b29a      	uxth	r2, r3
 8001892:	88bb      	ldrh	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	b29b      	uxth	r3, r3
 8001898:	883a      	ldrh	r2, [r7, #0]
 800189a:	4619      	mov	r1, r3
 800189c:	f7ff fd24 	bl	80012e8 <ILI9341_DrawPixel>
 80018a0:	e085      	b.n	80019ae <ILI9341_drawChar+0x23e>
        else {  // big size
          ILI9341_Fill_Rect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 80018a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80018a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018aa:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80018ae:	fb01 f303 	mul.w	r3, r1, r3
 80018b2:	4413      	add	r3, r2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80018ba:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018be:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80018c2:	fb01 f303 	mul.w	r3, r1, r3
 80018c6:	4413      	add	r3, r2
 80018c8:	461c      	mov	r4, r3
 80018ca:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80018ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d2:	441a      	add	r2, r3
 80018d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d8:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80018dc:	fb01 f303 	mul.w	r3, r1, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	461d      	mov	r5, r3
 80018e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018ee:	441a      	add	r2, r3
 80018f0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018f4:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80018f8:	fb01 f303 	mul.w	r3, r1, r3
 80018fc:	4413      	add	r3, r2
 80018fe:	461a      	mov	r2, r3
 8001900:	883b      	ldrh	r3, [r7, #0]
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	4613      	mov	r3, r2
 8001906:	462a      	mov	r2, r5
 8001908:	4621      	mov	r1, r4
 800190a:	f7ff fd51 	bl	80013b0 <ILI9341_Fill_Rect>
 800190e:	e04e      	b.n	80019ae <ILI9341_drawChar+0x23e>
        } 
      } else if (bg != color) {
 8001910:	8c3a      	ldrh	r2, [r7, #32]
 8001912:	883b      	ldrh	r3, [r7, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d04a      	beq.n	80019ae <ILI9341_drawChar+0x23e>
        if (size == 1) // default size
 8001918:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800191c:	2b01      	cmp	r3, #1
 800191e:	d110      	bne.n	8001942 <ILI9341_drawChar+0x1d2>
          ILI9341_DrawPixel(x+i, y+j, bg);
 8001920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001924:	b29a      	uxth	r2, r3
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	4413      	add	r3, r2
 800192a:	b298      	uxth	r0, r3
 800192c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001930:	b29a      	uxth	r2, r3
 8001932:	88bb      	ldrh	r3, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	b29b      	uxth	r3, r3
 8001938:	8c3a      	ldrh	r2, [r7, #32]
 800193a:	4619      	mov	r1, r3
 800193c:	f7ff fcd4 	bl	80012e8 <ILI9341_DrawPixel>
 8001940:	e035      	b.n	80019ae <ILI9341_drawChar+0x23e>
        else {  // big size
          ILI9341_Fill_Rect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 8001942:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800194e:	fb01 f303 	mul.w	r3, r1, r3
 8001952:	4413      	add	r3, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800195a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800195e:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001962:	fb01 f303 	mul.w	r3, r1, r3
 8001966:	4413      	add	r3, r2
 8001968:	461c      	mov	r4, r3
 800196a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800196e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001972:	441a      	add	r2, r3
 8001974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001978:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800197c:	fb01 f303 	mul.w	r3, r1, r3
 8001980:	4413      	add	r3, r2
 8001982:	461d      	mov	r5, r3
 8001984:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800198e:	441a      	add	r2, r3
 8001990:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001994:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001998:	fb01 f303 	mul.w	r3, r1, r3
 800199c:	4413      	add	r3, r2
 800199e:	461a      	mov	r2, r3
 80019a0:	8c3b      	ldrh	r3, [r7, #32]
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	4613      	mov	r3, r2
 80019a6:	462a      	mov	r2, r5
 80019a8:	4621      	mov	r1, r4
 80019aa:	f7ff fd01 	bl	80013b0 <ILI9341_Fill_Rect>
        }
      }
      line >>= 1;
 80019ae:	7bbb      	ldrb	r3, [r7, #14]
 80019b0:	085b      	lsrs	r3, r3, #1
 80019b2:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 80019b4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	3301      	adds	r3, #1
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	737b      	strb	r3, [r7, #13]
 80019c0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80019c4:	2b07      	cmp	r3, #7
 80019c6:	f77f af52 	ble.w	800186e <ILI9341_drawChar+0xfe>
  for (int8_t i=0; i<6; i++ ) {
 80019ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	3301      	adds	r3, #1
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	73fb      	strb	r3, [r7, #15]
 80019d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019da:	2b05      	cmp	r3, #5
 80019dc:	f77f af31 	ble.w	8001842 <ILI9341_drawChar+0xd2>
 80019e0:	e002      	b.n	80019e8 <ILI9341_drawChar+0x278>
    return;
 80019e2:	bf00      	nop
 80019e4:	e000      	b.n	80019e8 <ILI9341_drawChar+0x278>
    return;
 80019e6:	bf00      	nop
    }
  }
}
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bdb0      	pop	{r4, r5, r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000000 	.word	0x20000000
 80019f4:	2000025c 	.word	0x2000025c
 80019f8:	0800d780 	.word	0x0800d780

080019fc <ILI9341_printText>:
void ILI9341_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 80019fc:	b590      	push	{r4, r7, lr}
 80019fe:	b089      	sub	sp, #36	; 0x24
 8001a00:	af02      	add	r7, sp, #8
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	4608      	mov	r0, r1
 8001a06:	4611      	mov	r1, r2
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	817b      	strh	r3, [r7, #10]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	813b      	strh	r3, [r7, #8]
 8001a12:	4613      	mov	r3, r2
 8001a14:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 8001a16:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	0052      	lsls	r2, r2, #1
 8001a20:	4413      	add	r3, r2
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	82fb      	strh	r3, [r7, #22]
 8001a2c:	e01a      	b.n	8001a64 <ILI9341_printText+0x68>
	{
		ILI9341_drawChar(x+(offset*i), y, text[i],color,bg,size);
 8001a2e:	8abb      	ldrh	r3, [r7, #20]
 8001a30:	8afa      	ldrh	r2, [r7, #22]
 8001a32:	fb12 f303 	smulbb	r3, r2, r3
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	897b      	ldrh	r3, [r7, #10]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	b218      	sxth	r0, r3
 8001a40:	8afb      	ldrh	r3, [r7, #22]
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	4413      	add	r3, r2
 8001a46:	781a      	ldrb	r2, [r3, #0]
 8001a48:	88fc      	ldrh	r4, [r7, #6]
 8001a4a:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8001a4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a52:	9301      	str	r3, [sp, #4]
 8001a54:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	4623      	mov	r3, r4
 8001a5a:	f7ff fe89 	bl	8001770 <ILI9341_drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8001a5e:	8afb      	ldrh	r3, [r7, #22]
 8001a60:	3301      	adds	r3, #1
 8001a62:	82fb      	strh	r3, [r7, #22]
 8001a64:	8afb      	ldrh	r3, [r7, #22]
 8001a66:	2b27      	cmp	r3, #39	; 0x27
 8001a68:	d805      	bhi.n	8001a76 <ILI9341_printText+0x7a>
 8001a6a:	8afb      	ldrh	r3, [r7, #22]
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	4413      	add	r3, r2
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1db      	bne.n	8001a2e <ILI9341_printText+0x32>
	}
}
 8001a76:	bf00      	nop
 8001a78:	371c      	adds	r7, #28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd90      	pop	{r4, r7, pc}
	...

08001a80 <ILI9341_setRotation>:
	}
}

//13. Set screen rotation
void ILI9341_setRotation(uint8_t rotate)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
	switch(rotate)
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d832      	bhi.n	8001af8 <ILI9341_setRotation+0x78>
 8001a92:	a201      	add	r2, pc, #4	; (adr r2, 8001a98 <ILI9341_setRotation+0x18>)
 8001a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a98:	08001aa9 	.word	0x08001aa9
 8001a9c:	08001abd 	.word	0x08001abd
 8001aa0:	08001ad1 	.word	0x08001ad1
 8001aa4:	08001ae5 	.word	0x08001ae5
	{
		case 1:
			rotationNum = 1;
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <ILI9341_setRotation+0x94>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001aae:	2036      	movs	r0, #54	; 0x36
 8001ab0:	f7ff faa6 	bl	8001000 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8001ab4:	2088      	movs	r0, #136	; 0x88
 8001ab6:	f7ff fad7 	bl	8001068 <ILI9341_SendData>
			break;
 8001aba:	e027      	b.n	8001b0c <ILI9341_setRotation+0x8c>
		case 2:
			rotationNum = 2;
 8001abc:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <ILI9341_setRotation+0x94>)
 8001abe:	2202      	movs	r2, #2
 8001ac0:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001ac2:	2036      	movs	r0, #54	; 0x36
 8001ac4:	f7ff fa9c 	bl	8001000 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8001ac8:	2028      	movs	r0, #40	; 0x28
 8001aca:	f7ff facd 	bl	8001068 <ILI9341_SendData>
			break;
 8001ace:	e01d      	b.n	8001b0c <ILI9341_setRotation+0x8c>
		case 3:
			rotationNum = 3;
 8001ad0:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <ILI9341_setRotation+0x94>)
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001ad6:	2036      	movs	r0, #54	; 0x36
 8001ad8:	f7ff fa92 	bl	8001000 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 8001adc:	2048      	movs	r0, #72	; 0x48
 8001ade:	f7ff fac3 	bl	8001068 <ILI9341_SendData>
			break;
 8001ae2:	e013      	b.n	8001b0c <ILI9341_setRotation+0x8c>
		case 4:
			rotationNum = 4;
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <ILI9341_setRotation+0x94>)
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001aea:	2036      	movs	r0, #54	; 0x36
 8001aec:	f7ff fa88 	bl	8001000 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8001af0:	20e8      	movs	r0, #232	; 0xe8
 8001af2:	f7ff fab9 	bl	8001068 <ILI9341_SendData>
			break;
 8001af6:	e009      	b.n	8001b0c <ILI9341_setRotation+0x8c>
		default:
			rotationNum = 1;
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <ILI9341_setRotation+0x94>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001afe:	2036      	movs	r0, #54	; 0x36
 8001b00:	f7ff fa7e 	bl	8001000 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8001b04:	2088      	movs	r0, #136	; 0x88
 8001b06:	f7ff faaf 	bl	8001068 <ILI9341_SendData>
			break;
 8001b0a:	bf00      	nop
	}
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000000 	.word	0x20000000

08001b18 <ILI9341_getRotation>:
//14. Get screen rotation
uint8_t ILI9341_getRotation(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
	return rotationNum;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <ILI9341_getRotation+0x14>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000000 	.word	0x20000000

08001b30 <TSC2046_SendCommand>:
#define _TS_CS_DISABLE		HAL_GPIO_WritePin(tsCS_GPIO, tsCS_PIN, GPIO_PIN_SET);

//Functions definitions
//1. Send TSC2046 Command and wait for a response
uint16_t TSC2046_SendCommand(uint8_t cmd)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3] = {0,0,0};
 8001b3a:	4a1e      	ldr	r2, [pc, #120]	; (8001bb4 <TSC2046_SendCommand+0x84>)
 8001b3c:	f107 0308 	add.w	r3, r7, #8
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	4611      	mov	r1, r2
 8001b44:	8019      	strh	r1, [r3, #0]
 8001b46:	3302      	adds	r3, #2
 8001b48:	0c12      	lsrs	r2, r2, #16
 8001b4a:	701a      	strb	r2, [r3, #0]
	uint16_t return16=0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	81fb      	strh	r3, [r7, #14]
	
	_TS_CS_ENBALE;
 8001b50:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <TSC2046_SendCommand+0x88>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a19      	ldr	r2, [pc, #100]	; (8001bbc <TSC2046_SendCommand+0x8c>)
 8001b56:	8811      	ldrh	r1, [r2, #0]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f003 fd6c 	bl	8005638 <HAL_GPIO_WritePin>
	spiBuf[0] = cmd;
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	723b      	strb	r3, [r7, #8]
	HAL_SPI_Transmit(&tsSPIhandle, spiBuf, 1, 10);
 8001b64:	f107 0108 	add.w	r1, r7, #8
 8001b68:	230a      	movs	r3, #10
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	4814      	ldr	r0, [pc, #80]	; (8001bc0 <TSC2046_SendCommand+0x90>)
 8001b6e:	f004 fa9e 	bl	80060ae <HAL_SPI_Transmit>
	//Wait for response (3 ms)
	HAL_Delay(3);
 8001b72:	2003      	movs	r0, #3
 8001b74:	f003 fa14 	bl	8004fa0 <HAL_Delay>
	if(HAL_SPI_Receive(&tsSPIhandle, &spiBuf[1], 2, 10) == HAL_OK) return16 = (spiBuf[1]<<4) + (spiBuf[2]>>4);
 8001b78:	f107 0308 	add.w	r3, r7, #8
 8001b7c:	1c59      	adds	r1, r3, #1
 8001b7e:	230a      	movs	r3, #10
 8001b80:	2202      	movs	r2, #2
 8001b82:	480f      	ldr	r0, [pc, #60]	; (8001bc0 <TSC2046_SendCommand+0x90>)
 8001b84:	f004 fbcf 	bl	8006326 <HAL_SPI_Receive>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10a      	bne.n	8001ba4 <TSC2046_SendCommand+0x74>
 8001b8e:	7a7b      	ldrb	r3, [r7, #9]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	7abb      	ldrb	r3, [r7, #10]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	81fb      	strh	r3, [r7, #14]
 8001ba2:	e001      	b.n	8001ba8 <TSC2046_SendCommand+0x78>
	else return16 = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	81fb      	strh	r3, [r7, #14]
	
	
	return return16;
 8001ba8:	89fb      	ldrh	r3, [r7, #14]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	0800d618 	.word	0x0800d618
 8001bb8:	20000328 	.word	0x20000328
 8001bbc:	2000032c 	.word	0x2000032c
 8001bc0:	200002d0 	.word	0x200002d0
 8001bc4:	00000000 	.word	0x00000000

08001bc8 <TSC2046_Calibrate>:
//2. Calibrate resistive touch panel
void TSC2046_Calibrate(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
	uint16_t watchVar1=0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	80bb      	strh	r3, [r7, #4]
	TS_TOUCH_RAW_Def myRawTouchDef;
	//Get Top-Left corner calibration coordinate
	TSC2046_TL_point();
 8001bd2:	f000 f9f7 	bl	8001fc4 <TSC2046_TL_point>
	myTS_Calibrate.TL_X = 0;
 8001bd6:	4b8c      	ldr	r3, [pc, #560]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	801a      	strh	r2, [r3, #0]
	myTS_Calibrate.TL_Y = 0;
 8001bdc:	4b8a      	ldr	r3, [pc, #552]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	805a      	strh	r2, [r3, #2]
	myTS_Calibrate.BR_X = 0;
 8001be2:	4b89      	ldr	r3, [pc, #548]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	809a      	strh	r2, [r3, #4]
	myTS_Calibrate.BR_Y = 0;
 8001be8:	4b87      	ldr	r3, [pc, #540]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	80da      	strh	r2, [r3, #6]
	
	while(1)
	{
		watchVar1 = TSC2046_getRaw_Z();
 8001bee:	f000 f9d9 	bl	8001fa4 <TSC2046_getRaw_Z>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	80bb      	strh	r3, [r7, #4]
		if(watchVar1>50)
 8001bf6:	88bb      	ldrh	r3, [r7, #4]
 8001bf8:	2b32      	cmp	r3, #50	; 0x32
 8001bfa:	d91b      	bls.n	8001c34 <TSC2046_Calibrate+0x6c>
		{
			for(uint8_t i=0; i<10; i++)
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	71fb      	strb	r3, [r7, #7]
 8001c00:	e014      	b.n	8001c2c <TSC2046_Calibrate+0x64>
			{
				myRawTouchDef = TSC2046_GetRawTouch();
 8001c02:	f000 f905 	bl	8001e10 <TSC2046_GetRawTouch>
 8001c06:	4603      	mov	r3, r0
 8001c08:	603b      	str	r3, [r7, #0]
				myTS_Calibrate.TL_X += myRawTouchDef.x_touch;
 8001c0a:	4b7f      	ldr	r3, [pc, #508]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c0c:	881a      	ldrh	r2, [r3, #0]
 8001c0e:	883b      	ldrh	r3, [r7, #0]
 8001c10:	4413      	add	r3, r2
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	4b7c      	ldr	r3, [pc, #496]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c16:	801a      	strh	r2, [r3, #0]
				myTS_Calibrate.TL_Y += myRawTouchDef.y_touch;
 8001c18:	4b7b      	ldr	r3, [pc, #492]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c1a:	885a      	ldrh	r2, [r3, #2]
 8001c1c:	887b      	ldrh	r3, [r7, #2]
 8001c1e:	4413      	add	r3, r2
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	4b79      	ldr	r3, [pc, #484]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c24:	805a      	strh	r2, [r3, #2]
			for(uint8_t i=0; i<10; i++)
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	71fb      	strb	r3, [r7, #7]
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	2b09      	cmp	r3, #9
 8001c30:	d9e7      	bls.n	8001c02 <TSC2046_Calibrate+0x3a>
			}
			
			break;
 8001c32:	e003      	b.n	8001c3c <TSC2046_Calibrate+0x74>
		}
		HAL_Delay(10);
 8001c34:	200a      	movs	r0, #10
 8001c36:	f003 f9b3 	bl	8004fa0 <HAL_Delay>
		watchVar1 = TSC2046_getRaw_Z();
 8001c3a:	e7d8      	b.n	8001bee <TSC2046_Calibrate+0x26>
	}
	HAL_Delay(1000);
 8001c3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c40:	f003 f9ae 	bl	8004fa0 <HAL_Delay>
	//Get Bottom-Right corner calibration coordinate
	TSC2046_BR_point();
 8001c44:	f000 f9da 	bl	8001ffc <TSC2046_BR_point>
	while(1)
	{
		watchVar1 = TSC2046_getRaw_Z();
 8001c48:	f000 f9ac 	bl	8001fa4 <TSC2046_getRaw_Z>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	80bb      	strh	r3, [r7, #4]
		if(watchVar1>50)
 8001c50:	88bb      	ldrh	r3, [r7, #4]
 8001c52:	2b32      	cmp	r3, #50	; 0x32
 8001c54:	d91b      	bls.n	8001c8e <TSC2046_Calibrate+0xc6>
		{
			for(uint8_t i=0; i<10; i++)
 8001c56:	2300      	movs	r3, #0
 8001c58:	71bb      	strb	r3, [r7, #6]
 8001c5a:	e014      	b.n	8001c86 <TSC2046_Calibrate+0xbe>
			{
				myRawTouchDef = TSC2046_GetRawTouch();
 8001c5c:	f000 f8d8 	bl	8001e10 <TSC2046_GetRawTouch>
 8001c60:	4603      	mov	r3, r0
 8001c62:	603b      	str	r3, [r7, #0]
				myTS_Calibrate.BR_X += myRawTouchDef.x_touch;
 8001c64:	4b68      	ldr	r3, [pc, #416]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c66:	889a      	ldrh	r2, [r3, #4]
 8001c68:	883b      	ldrh	r3, [r7, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	4b66      	ldr	r3, [pc, #408]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c70:	809a      	strh	r2, [r3, #4]
				myTS_Calibrate.BR_Y += myRawTouchDef.y_touch;
 8001c72:	4b65      	ldr	r3, [pc, #404]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c74:	88da      	ldrh	r2, [r3, #6]
 8001c76:	887b      	ldrh	r3, [r7, #2]
 8001c78:	4413      	add	r3, r2
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	4b62      	ldr	r3, [pc, #392]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c7e:	80da      	strh	r2, [r3, #6]
			for(uint8_t i=0; i<10; i++)
 8001c80:	79bb      	ldrb	r3, [r7, #6]
 8001c82:	3301      	adds	r3, #1
 8001c84:	71bb      	strb	r3, [r7, #6]
 8001c86:	79bb      	ldrb	r3, [r7, #6]
 8001c88:	2b09      	cmp	r3, #9
 8001c8a:	d9e7      	bls.n	8001c5c <TSC2046_Calibrate+0x94>
			}
			break;
 8001c8c:	e003      	b.n	8001c96 <TSC2046_Calibrate+0xce>
		}
		HAL_Delay(10);
 8001c8e:	200a      	movs	r0, #10
 8001c90:	f003 f986 	bl	8004fa0 <HAL_Delay>
		watchVar1 = TSC2046_getRaw_Z();
 8001c94:	e7d8      	b.n	8001c48 <TSC2046_Calibrate+0x80>
	}
	
	myTS_Calibrate.TL_X *=0.1;
 8001c96:	4b5c      	ldr	r3, [pc, #368]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fc4a 	bl	8000534 <__aeabi_i2d>
 8001ca0:	a357      	add	r3, pc, #348	; (adr r3, 8001e00 <TSC2046_Calibrate+0x238>)
 8001ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca6:	f7fe fcaf 	bl	8000608 <__aeabi_dmul>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4610      	mov	r0, r2
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f7fe ff81 	bl	8000bb8 <__aeabi_d2uiz>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	4b53      	ldr	r3, [pc, #332]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001cbc:	801a      	strh	r2, [r3, #0]
	myTS_Calibrate.TL_Y *=0.1;
 8001cbe:	4b52      	ldr	r3, [pc, #328]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001cc0:	885b      	ldrh	r3, [r3, #2]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fc36 	bl	8000534 <__aeabi_i2d>
 8001cc8:	a34d      	add	r3, pc, #308	; (adr r3, 8001e00 <TSC2046_Calibrate+0x238>)
 8001cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cce:	f7fe fc9b 	bl	8000608 <__aeabi_dmul>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f7fe ff6d 	bl	8000bb8 <__aeabi_d2uiz>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	4b49      	ldr	r3, [pc, #292]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001ce4:	805a      	strh	r2, [r3, #2]
	
	myTS_Calibrate.BR_X *=0.1;
 8001ce6:	4b48      	ldr	r3, [pc, #288]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001ce8:	889b      	ldrh	r3, [r3, #4]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fc22 	bl	8000534 <__aeabi_i2d>
 8001cf0:	a343      	add	r3, pc, #268	; (adr r3, 8001e00 <TSC2046_Calibrate+0x238>)
 8001cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf6:	f7fe fc87 	bl	8000608 <__aeabi_dmul>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4610      	mov	r0, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	f7fe ff59 	bl	8000bb8 <__aeabi_d2uiz>
 8001d06:	4603      	mov	r3, r0
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	4b3f      	ldr	r3, [pc, #252]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d0c:	809a      	strh	r2, [r3, #4]
	myTS_Calibrate.BR_Y *=0.1;
 8001d0e:	4b3e      	ldr	r3, [pc, #248]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d10:	88db      	ldrh	r3, [r3, #6]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fc0e 	bl	8000534 <__aeabi_i2d>
 8001d18:	a339      	add	r3, pc, #228	; (adr r3, 8001e00 <TSC2046_Calibrate+0x238>)
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	f7fe fc73 	bl	8000608 <__aeabi_dmul>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4610      	mov	r0, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f7fe ff45 	bl	8000bb8 <__aeabi_d2uiz>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	4b35      	ldr	r3, [pc, #212]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d34:	80da      	strh	r2, [r3, #6]
	
	//1. Calculate X_Diff, Y_Diff
	myTS_Calibrate.Scale_X = (myTS_Calibrate.Width + 0.0f)/(myTS_Calibrate.BR_X - myTS_Calibrate.TL_X + 0.0f);
 8001d36:	4b34      	ldr	r3, [pc, #208]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d38:	8b1b      	ldrh	r3, [r3, #24]
 8001d3a:	ee07 3a90 	vmov	s15, r3
 8001d3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d42:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001e0c <TSC2046_Calibrate+0x244>
 8001d46:	ee77 6a87 	vadd.f32	s13, s15, s14
 8001d4a:	4b2f      	ldr	r3, [pc, #188]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d4c:	889b      	ldrh	r3, [r3, #4]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b2d      	ldr	r3, [pc, #180]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	ee07 3a90 	vmov	s15, r3
 8001d5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d5e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001e0c <TSC2046_Calibrate+0x244>
 8001d62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001d66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d6a:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d6c:	edc3 7a02 	vstr	s15, [r3, #8]
	myTS_Calibrate.Scale_Y = (myTS_Calibrate.Height + 0.0f)/(myTS_Calibrate.BR_Y - myTS_Calibrate.TL_Y + 0.0f);
 8001d70:	4b25      	ldr	r3, [pc, #148]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d72:	8b5b      	ldrh	r3, [r3, #26]
 8001d74:	ee07 3a90 	vmov	s15, r3
 8001d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d7c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001e0c <TSC2046_Calibrate+0x244>
 8001d80:	ee77 6a87 	vadd.f32	s13, s15, s14
 8001d84:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d86:	88db      	ldrh	r3, [r3, #6]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b1f      	ldr	r3, [pc, #124]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d8c:	885b      	ldrh	r3, [r3, #2]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	ee07 3a90 	vmov	s15, r3
 8001d94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d98:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001e0c <TSC2046_Calibrate+0x244>
 8001d9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001da4:	4b18      	ldr	r3, [pc, #96]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001da6:	edc3 7a03 	vstr	s15, [r3, #12]
	//2. Calculate Scalling ()
	myTS_Calibrate.Bias_X = 10 - myTS_Calibrate.Scale_X*myTS_Calibrate.TL_X;
 8001daa:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001dac:	ed93 7a02 	vldr	s14, [r3, #8]
 8001db0:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	ee07 3a90 	vmov	s15, r3
 8001db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001dca:	edc3 7a04 	vstr	s15, [r3, #16]
	myTS_Calibrate.Bias_Y = 10 - myTS_Calibrate.Scale_Y*myTS_Calibrate.TL_Y;
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001dd0:	ed93 7a03 	vldr	s14, [r3, #12]
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001dd6:	885b      	ldrh	r3, [r3, #2]
 8001dd8:	ee07 3a90 	vmov	s15, r3
 8001ddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001de8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001dee:	edc3 7a05 	vstr	s15, [r3, #20]
	
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	f3af 8000 	nop.w
 8001e00:	9999999a 	.word	0x9999999a
 8001e04:	3fb99999 	.word	0x3fb99999
 8001e08:	20000330 	.word	0x20000330
 8001e0c:	00000000 	.word	0x00000000

08001e10 <TSC2046_GetRawTouch>:
//3. Poll for touch status
TS_TOUCH_RAW_Def TSC2046_GetRawTouch(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
	
	//Assign raw touch based on orientation
	switch (ScreenOrientation)
 8001e16:	4b3d      	ldr	r3, [pc, #244]	; (8001f0c <TSC2046_GetRawTouch+0xfc>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	d867      	bhi.n	8001ef0 <TSC2046_GetRawTouch+0xe0>
 8001e20:	a201      	add	r2, pc, #4	; (adr r2, 8001e28 <TSC2046_GetRawTouch+0x18>)
 8001e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e26:	bf00      	nop
 8001e28:	08001e39 	.word	0x08001e39
 8001e2c:	08001e67 	.word	0x08001e67
 8001e30:	08001e9b 	.word	0x08001e9b
 8001e34:	08001ec9 	.word	0x08001ec9
	{
		case 1:
			localRawTouch.x_touch = 4095 - TSC2046_getRaw_X();
 8001e38:	f000 f894 	bl	8001f64 <TSC2046_getRaw_X>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001e42:	330f      	adds	r3, #15
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	4b32      	ldr	r3, [pc, #200]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001e48:	801a      	strh	r2, [r3, #0]
			localRawTouch.y_touch = TSC2046_getRaw_Y();
 8001e4a:	f000 f89b 	bl	8001f84 <TSC2046_getRaw_Y>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b2f      	ldr	r3, [pc, #188]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001e54:	805a      	strh	r2, [r3, #2]
			myTS_Calibrate.Width = 230;
 8001e56:	4b2f      	ldr	r3, [pc, #188]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001e58:	22e6      	movs	r2, #230	; 0xe6
 8001e5a:	831a      	strh	r2, [r3, #24]
			myTS_Calibrate.Height = 320;
 8001e5c:	4b2d      	ldr	r3, [pc, #180]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001e5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e62:	835a      	strh	r2, [r3, #26]
			break;
 8001e64:	e044      	b.n	8001ef0 <TSC2046_GetRawTouch+0xe0>
		
		case 2:
			localRawTouch.x_touch = 4095 - TSC2046_getRaw_Y();
 8001e66:	f000 f88d 	bl	8001f84 <TSC2046_getRaw_Y>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001e70:	330f      	adds	r3, #15
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	4b26      	ldr	r3, [pc, #152]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001e76:	801a      	strh	r2, [r3, #0]
			localRawTouch.y_touch = 4095 - TSC2046_getRaw_X();
 8001e78:	f000 f874 	bl	8001f64 <TSC2046_getRaw_X>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001e82:	330f      	adds	r3, #15
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001e88:	805a      	strh	r2, [r3, #2]
			myTS_Calibrate.Width = 320;
 8001e8a:	4b22      	ldr	r3, [pc, #136]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001e8c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e90:	831a      	strh	r2, [r3, #24]
			myTS_Calibrate.Height = 240;
 8001e92:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001e94:	22f0      	movs	r2, #240	; 0xf0
 8001e96:	835a      	strh	r2, [r3, #26]
			break;
 8001e98:	e02a      	b.n	8001ef0 <TSC2046_GetRawTouch+0xe0>
		
		case 3:
			localRawTouch.x_touch = TSC2046_getRaw_X();
 8001e9a:	f000 f863 	bl	8001f64 <TSC2046_getRaw_X>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001ea4:	801a      	strh	r2, [r3, #0]
			localRawTouch.y_touch = 4095 - TSC2046_getRaw_Y();
 8001ea6:	f000 f86d 	bl	8001f84 <TSC2046_getRaw_Y>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001eb0:	330f      	adds	r3, #15
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001eb6:	805a      	strh	r2, [r3, #2]
			myTS_Calibrate.Width = 230;
 8001eb8:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001eba:	22e6      	movs	r2, #230	; 0xe6
 8001ebc:	831a      	strh	r2, [r3, #24]
			myTS_Calibrate.Height = 320;
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001ec0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ec4:	835a      	strh	r2, [r3, #26]
			break;
 8001ec6:	e013      	b.n	8001ef0 <TSC2046_GetRawTouch+0xe0>
		
		case 4:
			localRawTouch.x_touch = TSC2046_getRaw_Y();
 8001ec8:	f000 f85c 	bl	8001f84 <TSC2046_getRaw_Y>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001ed2:	801a      	strh	r2, [r3, #0]
			localRawTouch.y_touch = TSC2046_getRaw_X();
 8001ed4:	f000 f846 	bl	8001f64 <TSC2046_getRaw_X>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	461a      	mov	r2, r3
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001ede:	805a      	strh	r2, [r3, #2]
			myTS_Calibrate.Width = 320;
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001ee2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ee6:	831a      	strh	r2, [r3, #24]
			myTS_Calibrate.Height = 240;
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001eea:	22f0      	movs	r2, #240	; 0xf0
 8001eec:	835a      	strh	r2, [r3, #26]
			break;
 8001eee:	bf00      	nop
	}
	
	return localRawTouch;
 8001ef0:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	88ba      	ldrh	r2, [r7, #4]
 8001efa:	f362 030f 	bfi	r3, r2, #0, #16
 8001efe:	88fa      	ldrh	r2, [r7, #6]
 8001f00:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	2000032e 	.word	0x2000032e
 8001f10:	2000034c 	.word	0x2000034c
 8001f14:	20000330 	.word	0x20000330

08001f18 <TSC2046_Begin>:

//4. Begin function
bool  TSC2046_Begin(SPI_HandleTypeDef *touchSPI, GPIO_TypeDef *csPort, uint16_t csPin)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	4613      	mov	r3, r2
 8001f24:	80fb      	strh	r3, [r7, #6]
	//Touch Screen SPI
	memcpy(&tsSPIhandle, touchSPI, sizeof(*touchSPI));
 8001f26:	2258      	movs	r2, #88	; 0x58
 8001f28:	68f9      	ldr	r1, [r7, #12]
 8001f2a:	480a      	ldr	r0, [pc, #40]	; (8001f54 <TSC2046_Begin+0x3c>)
 8001f2c:	f008 fe53 	bl	800abd6 <memcpy>
	//Chip-Select Port and Pin
	tsCS_GPIO = csPort;
 8001f30:	4a09      	ldr	r2, [pc, #36]	; (8001f58 <TSC2046_Begin+0x40>)
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	6013      	str	r3, [r2, #0]
	tsCS_PIN = csPin;
 8001f36:	4a09      	ldr	r2, [pc, #36]	; (8001f5c <TSC2046_Begin+0x44>)
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	8013      	strh	r3, [r2, #0]
	//Get screen orientation
	ScreenOrientation = TSC2046_getOrientation();
 8001f3c:	f000 f88c 	bl	8002058 <TSC2046_getOrientation>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <TSC2046_Begin+0x48>)
 8001f46:	701a      	strb	r2, [r3, #0]
}
 8001f48:	bf00      	nop
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	200002d0 	.word	0x200002d0
 8001f58:	20000328 	.word	0x20000328
 8001f5c:	2000032c 	.word	0x2000032c
 8001f60:	2000032e 	.word	0x2000032e

08001f64 <TSC2046_getRaw_X>:

//5. Get raw touch data
//i. get x-axis raw touch 12-bit value
uint16_t TSC2046_getRaw_X(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
	return TSC2046_SendCommand(CMD_X_AXIS | CMD_Default);
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <TSC2046_getRaw_X+0x1c>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fddc 	bl	8001b30 <TSC2046_SendCommand>
 8001f78:	4603      	mov	r3, r0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000001 	.word	0x20000001

08001f84 <TSC2046_getRaw_Y>:
//ii. get y-axis raw touch 12-bit value
uint16_t TSC2046_getRaw_Y(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
	return TSC2046_SendCommand(CMD_Y_AXIS | CMD_Default);
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <TSC2046_getRaw_Y+0x1c>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fdcc 	bl	8001b30 <TSC2046_SendCommand>
 8001f98:	4603      	mov	r3, r0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000001 	.word	0x20000001

08001fa4 <TSC2046_getRaw_Z>:
//iii. get z-axis raw touch 12-bit value
uint16_t TSC2046_getRaw_Z(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
	return TSC2046_SendCommand(CMD_Z_AXIS | CMD_Default);
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <TSC2046_getRaw_Z+0x1c>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fdbc 	bl	8001b30 <TSC2046_SendCommand>
 8001fb8:	4603      	mov	r3, r0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000001 	.word	0x20000001

08001fc4 <TSC2046_TL_point>:

//6. Print calibration points
//i. Top-Left corner point
void TSC2046_TL_point(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af02      	add	r7, sp, #8
	ILI9341_fillCircle(10, 10, 3, COLOR_RED);
 8001fca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001fce:	2203      	movs	r2, #3
 8001fd0:	210a      	movs	r1, #10
 8001fd2:	200a      	movs	r0, #10
 8001fd4:	f7ff fad9 	bl	800158a <ILI9341_fillCircle>
	ILI9341_printText("Press here", 20, 30, COLOR_RED, COLOR_RED, 1);
 8001fd8:	2301      	movs	r3, #1
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001fe6:	221e      	movs	r2, #30
 8001fe8:	2114      	movs	r1, #20
 8001fea:	4803      	ldr	r0, [pc, #12]	; (8001ff8 <TSC2046_TL_point+0x34>)
 8001fec:	f7ff fd06 	bl	80019fc <ILI9341_printText>
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	0800d61c 	.word	0x0800d61c

08001ffc <TSC2046_BR_point>:
//ii. Bottom-Right corner point
void TSC2046_BR_point(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af02      	add	r7, sp, #8
	ILI9341_fillCircle(myTS_Calibrate.Width-10, myTS_Calibrate.Height-10, 3, COLOR_RED);
 8002002:	4b13      	ldr	r3, [pc, #76]	; (8002050 <TSC2046_BR_point+0x54>)
 8002004:	8b1b      	ldrh	r3, [r3, #24]
 8002006:	3b0a      	subs	r3, #10
 8002008:	b29b      	uxth	r3, r3
 800200a:	b218      	sxth	r0, r3
 800200c:	4b10      	ldr	r3, [pc, #64]	; (8002050 <TSC2046_BR_point+0x54>)
 800200e:	8b5b      	ldrh	r3, [r3, #26]
 8002010:	3b0a      	subs	r3, #10
 8002012:	b29b      	uxth	r3, r3
 8002014:	b219      	sxth	r1, r3
 8002016:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800201a:	2203      	movs	r2, #3
 800201c:	f7ff fab5 	bl	800158a <ILI9341_fillCircle>
	ILI9341_printText("Press here", myTS_Calibrate.Width-80, myTS_Calibrate.Height-40, COLOR_RED, COLOR_RED, 1);
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <TSC2046_BR_point+0x54>)
 8002022:	8b1b      	ldrh	r3, [r3, #24]
 8002024:	3b50      	subs	r3, #80	; 0x50
 8002026:	b29b      	uxth	r3, r3
 8002028:	b219      	sxth	r1, r3
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <TSC2046_BR_point+0x54>)
 800202c:	8b5b      	ldrh	r3, [r3, #26]
 800202e:	3b28      	subs	r3, #40	; 0x28
 8002030:	b29b      	uxth	r3, r3
 8002032:	b21a      	sxth	r2, r3
 8002034:	2301      	movs	r3, #1
 8002036:	9301      	str	r3, [sp, #4]
 8002038:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002042:	4804      	ldr	r0, [pc, #16]	; (8002054 <TSC2046_BR_point+0x58>)
 8002044:	f7ff fcda 	bl	80019fc <ILI9341_printText>
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000330 	.word	0x20000330
 8002054:	0800d61c 	.word	0x0800d61c

08002058 <TSC2046_getOrientation>:

//7. Get orientation (from LCD driver)
uint8_t TSC2046_getOrientation(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
	return ILI9341_getRotation();
 800205c:	f7ff fd5c 	bl	8001b18 <ILI9341_getRotation>
 8002060:	4603      	mov	r3, r0
}
 8002062:	4618      	mov	r0, r3
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <TSC2046_GetTouchData>:

//8. Get touch sccreen data
TS_TOUCH_DATA_Def TSC2046_GetTouchData(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
	TS_TOUCH_DATA_Def myTsData;
	uint16_t temp16x=0, temp16y=0;
 8002070:	2300      	movs	r3, #0
 8002072:	82fb      	strh	r3, [r7, #22]
 8002074:	2300      	movs	r3, #0
 8002076:	82bb      	strh	r3, [r7, #20]
	//Is screen pressed
	if(TSC2046_getRaw_Z()>50)
 8002078:	f7ff ff94 	bl	8001fa4 <TSC2046_getRaw_Z>
 800207c:	4603      	mov	r3, r0
 800207e:	2b32      	cmp	r3, #50	; 0x32
 8002080:	d920      	bls.n	80020c4 <TSC2046_GetTouchData+0x5c>
	{
		myTsData.isPressed = true;
 8002082:	2301      	movs	r3, #1
 8002084:	733b      	strb	r3, [r7, #12]
		//Read touch data
		for(uint8_t i=0; i<1; i++)
 8002086:	2300      	movs	r3, #0
 8002088:	74fb      	strb	r3, [r7, #19]
 800208a:	e011      	b.n	80020b0 <TSC2046_GetTouchData+0x48>
		{
			localRawTouch = TSC2046_GetRawTouch();
 800208c:	f7ff fec0 	bl	8001e10 <TSC2046_GetRawTouch>
 8002090:	4603      	mov	r3, r0
 8002092:	4a29      	ldr	r2, [pc, #164]	; (8002138 <TSC2046_GetTouchData+0xd0>)
 8002094:	6013      	str	r3, [r2, #0]
			temp16x += localRawTouch.x_touch;
 8002096:	4b28      	ldr	r3, [pc, #160]	; (8002138 <TSC2046_GetTouchData+0xd0>)
 8002098:	881a      	ldrh	r2, [r3, #0]
 800209a:	8afb      	ldrh	r3, [r7, #22]
 800209c:	4413      	add	r3, r2
 800209e:	82fb      	strh	r3, [r7, #22]
			temp16y += localRawTouch.y_touch;
 80020a0:	4b25      	ldr	r3, [pc, #148]	; (8002138 <TSC2046_GetTouchData+0xd0>)
 80020a2:	885a      	ldrh	r2, [r3, #2]
 80020a4:	8abb      	ldrh	r3, [r7, #20]
 80020a6:	4413      	add	r3, r2
 80020a8:	82bb      	strh	r3, [r7, #20]
		for(uint8_t i=0; i<1; i++)
 80020aa:	7cfb      	ldrb	r3, [r7, #19]
 80020ac:	3301      	adds	r3, #1
 80020ae:	74fb      	strb	r3, [r7, #19]
 80020b0:	7cfb      	ldrb	r3, [r7, #19]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0ea      	beq.n	800208c <TSC2046_GetTouchData+0x24>
		}
		localRawTouch.x_touch = temp16x*1;
 80020b6:	4a20      	ldr	r2, [pc, #128]	; (8002138 <TSC2046_GetTouchData+0xd0>)
 80020b8:	8afb      	ldrh	r3, [r7, #22]
 80020ba:	8013      	strh	r3, [r2, #0]
		localRawTouch.y_touch = temp16y*1;
 80020bc:	4a1e      	ldr	r2, [pc, #120]	; (8002138 <TSC2046_GetTouchData+0xd0>)
 80020be:	8abb      	ldrh	r3, [r7, #20]
 80020c0:	8053      	strh	r3, [r2, #2]
 80020c2:	e001      	b.n	80020c8 <TSC2046_GetTouchData+0x60>
	}
	else myTsData.isPressed = false;
 80020c4:	2300      	movs	r3, #0
 80020c6:	733b      	strb	r3, [r7, #12]
	
	
	//X_Touch value
	myTsData.X = myTS_Calibrate.Scale_X*localRawTouch.x_touch + myTS_Calibrate.Bias_X;
 80020c8:	4b1c      	ldr	r3, [pc, #112]	; (800213c <TSC2046_GetTouchData+0xd4>)
 80020ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80020ce:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <TSC2046_GetTouchData+0xd0>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	ee07 3a90 	vmov	s15, r3
 80020d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020de:	4b17      	ldr	r3, [pc, #92]	; (800213c <TSC2046_GetTouchData+0xd4>)
 80020e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80020e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020ec:	ee17 3a90 	vmov	r3, s15
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	81fb      	strh	r3, [r7, #14]
	//Y_Touch value
	myTsData.Y = myTS_Calibrate.Scale_Y*localRawTouch.y_touch + myTS_Calibrate.Bias_Y;
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <TSC2046_GetTouchData+0xd4>)
 80020f6:	ed93 7a03 	vldr	s14, [r3, #12]
 80020fa:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <TSC2046_GetTouchData+0xd0>)
 80020fc:	885b      	ldrh	r3, [r3, #2]
 80020fe:	ee07 3a90 	vmov	s15, r3
 8002102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002106:	ee27 7a27 	vmul.f32	s14, s14, s15
 800210a:	4b0c      	ldr	r3, [pc, #48]	; (800213c <TSC2046_GetTouchData+0xd4>)
 800210c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002118:	ee17 3a90 	vmov	r3, s15
 800211c:	b29b      	uxth	r3, r3
 800211e:	823b      	strh	r3, [r7, #16]
	
	return myTsData;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	461a      	mov	r2, r3
 8002124:	f107 030c 	add.w	r3, r7, #12
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	6010      	str	r0, [r2, #0]
 800212c:	889b      	ldrh	r3, [r3, #4]
 800212e:	8093      	strh	r3, [r2, #4]
}
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	2000034c 	.word	0x2000034c
 800213c:	20000330 	.word	0x20000330

08002140 <HMI_init>:

#include <HMI/hmi_display.h>


Hmi HMI_init(StateMachine* stateMachine, Sensor* sensorExtruder, Sensor* sensorBack)
{
 8002140:	b590      	push	{r4, r7, lr}
 8002142:	b08f      	sub	sp, #60	; 0x3c
 8002144:	af02      	add	r7, sp, #8
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
 800214c:	603b      	str	r3, [r7, #0]
	Hmi hmi;
	hmi.HmiInformation.stateMachine = stateMachine;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
	hmi.HmiInformation.sensorExtruder = sensorExtruder;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	62bb      	str	r3, [r7, #40]	; 0x28
	hmi.HmiInformation.sensorBack = sensorBack;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	62fb      	str	r3, [r7, #44]	; 0x2c

	TSC2046_Calibrate();
 800215a:	f7ff fd35 	bl	8001bc8 <TSC2046_Calibrate>
	ILI9341_Fill(COLOR_WHITE);
 800215e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002162:	f7ff f8e1 	bl	8001328 <ILI9341_Fill>

	ILI9341_Fill_Rect(5, 10, 315, 50, COLOR_ORANGE);
 8002166:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	2332      	movs	r3, #50	; 0x32
 800216e:	f240 123b 	movw	r2, #315	; 0x13b
 8002172:	210a      	movs	r1, #10
 8002174:	2005      	movs	r0, #5
 8002176:	f7ff f91b 	bl	80013b0 <ILI9341_Fill_Rect>
	ILI9341_printText("Sensor1 : 0 mm", 50, 25, COLOR_WHITE, COLOR_ORANGE, 2);
 800217a:	2302      	movs	r3, #2
 800217c:	9301      	str	r3, [sp, #4]
 800217e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002188:	2219      	movs	r2, #25
 800218a:	2132      	movs	r1, #50	; 0x32
 800218c:	4843      	ldr	r0, [pc, #268]	; (800229c <HMI_init+0x15c>)
 800218e:	f7ff fc35 	bl	80019fc <ILI9341_printText>

	ILI9341_Fill_Rect(5, 60, 315, 100, COLOR_ORANGE);
 8002192:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	2364      	movs	r3, #100	; 0x64
 800219a:	f240 123b 	movw	r2, #315	; 0x13b
 800219e:	213c      	movs	r1, #60	; 0x3c
 80021a0:	2005      	movs	r0, #5
 80021a2:	f7ff f905 	bl	80013b0 <ILI9341_Fill_Rect>
	ILI9341_printText("Sensor2 : 0 mm", 50, 75, COLOR_WHITE, COLOR_ORANGE, 2);
 80021a6:	2302      	movs	r3, #2
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021b4:	224b      	movs	r2, #75	; 0x4b
 80021b6:	2132      	movs	r1, #50	; 0x32
 80021b8:	4839      	ldr	r0, [pc, #228]	; (80022a0 <HMI_init+0x160>)
 80021ba:	f7ff fc1f 	bl	80019fc <ILI9341_printText>

	char buf[20];
	sprintf(buf, "Ruhemodus");
 80021be:	f107 0310 	add.w	r3, r7, #16
 80021c2:	4938      	ldr	r1, [pc, #224]	; (80022a4 <HMI_init+0x164>)
 80021c4:	4618      	mov	r0, r3
 80021c6:	f008 fbff 	bl	800a9c8 <siprintf>

	ILI9341_Fill_Rect(5, 110, 315, 150, COLOR_BLUE);
 80021ca:	231f      	movs	r3, #31
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	2396      	movs	r3, #150	; 0x96
 80021d0:	f240 123b 	movw	r2, #315	; 0x13b
 80021d4:	216e      	movs	r1, #110	; 0x6e
 80021d6:	2005      	movs	r0, #5
 80021d8:	f7ff f8ea 	bl	80013b0 <ILI9341_Fill_Rect>
	ILI9341_printText(buf, 50, 120, COLOR_WHITE, COLOR_BLUE, 2);
 80021dc:	f107 0010 	add.w	r0, r7, #16
 80021e0:	2302      	movs	r3, #2
 80021e2:	9301      	str	r3, [sp, #4]
 80021e4:	231f      	movs	r3, #31
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021ec:	2278      	movs	r2, #120	; 0x78
 80021ee:	2132      	movs	r1, #50	; 0x32
 80021f0:	f7ff fc04 	bl	80019fc <ILI9341_printText>

	ILI9341_Fill_Rect(30, 160, 70, 200, COLOR_BLUE);
 80021f4:	231f      	movs	r3, #31
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	23c8      	movs	r3, #200	; 0xc8
 80021fa:	2246      	movs	r2, #70	; 0x46
 80021fc:	21a0      	movs	r1, #160	; 0xa0
 80021fe:	201e      	movs	r0, #30
 8002200:	f7ff f8d6 	bl	80013b0 <ILI9341_Fill_Rect>
	ILI9341_printText("UP", 45,  180, COLOR_WHITE, COLOR_BLUE, 1);
 8002204:	2301      	movs	r3, #1
 8002206:	9301      	str	r3, [sp, #4]
 8002208:	231f      	movs	r3, #31
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002210:	22b4      	movs	r2, #180	; 0xb4
 8002212:	212d      	movs	r1, #45	; 0x2d
 8002214:	4824      	ldr	r0, [pc, #144]	; (80022a8 <HMI_init+0x168>)
 8002216:	f7ff fbf1 	bl	80019fc <ILI9341_printText>

	ILI9341_Fill_Rect(80, 160, 120, 200, COLOR_BLUE);
 800221a:	231f      	movs	r3, #31
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	23c8      	movs	r3, #200	; 0xc8
 8002220:	2278      	movs	r2, #120	; 0x78
 8002222:	21a0      	movs	r1, #160	; 0xa0
 8002224:	2050      	movs	r0, #80	; 0x50
 8002226:	f7ff f8c3 	bl	80013b0 <ILI9341_Fill_Rect>
	ILI9341_printText("DOWN", 90,  180, COLOR_WHITE, COLOR_BLUE, 1);
 800222a:	2301      	movs	r3, #1
 800222c:	9301      	str	r3, [sp, #4]
 800222e:	231f      	movs	r3, #31
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002236:	22b4      	movs	r2, #180	; 0xb4
 8002238:	215a      	movs	r1, #90	; 0x5a
 800223a:	481c      	ldr	r0, [pc, #112]	; (80022ac <HMI_init+0x16c>)
 800223c:	f7ff fbde 	bl	80019fc <ILI9341_printText>

	ILI9341_Fill_Rect(180, 190, 300, 230, COLOR_RED);
 8002240:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	23e6      	movs	r3, #230	; 0xe6
 8002248:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800224c:	21be      	movs	r1, #190	; 0xbe
 800224e:	20b4      	movs	r0, #180	; 0xb4
 8002250:	f7ff f8ae 	bl	80013b0 <ILI9341_Fill_Rect>
	ILI9341_printText("IDLE", 230,  205, COLOR_WHITE, COLOR_RED, 2);
 8002254:	2302      	movs	r3, #2
 8002256:	9301      	str	r3, [sp, #4]
 8002258:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002262:	22cd      	movs	r2, #205	; 0xcd
 8002264:	21e6      	movs	r1, #230	; 0xe6
 8002266:	4812      	ldr	r0, [pc, #72]	; (80022b0 <HMI_init+0x170>)
 8002268:	f7ff fbc8 	bl	80019fc <ILI9341_printText>

	ILI9341_printText("REGELUNG", 195,  170, COLOR_BLACK, COLOR_WHITE, 2);
 800226c:	2302      	movs	r3, #2
 800226e:	9301      	str	r3, [sp, #4]
 8002270:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	2300      	movs	r3, #0
 8002278:	22aa      	movs	r2, #170	; 0xaa
 800227a:	21c3      	movs	r1, #195	; 0xc3
 800227c:	480d      	ldr	r0, [pc, #52]	; (80022b4 <HMI_init+0x174>)
 800227e:	f7ff fbbd 	bl	80019fc <ILI9341_printText>

	return hmi;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	461c      	mov	r4, r3
 8002286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800228a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800228e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	3734      	adds	r7, #52	; 0x34
 8002296:	46bd      	mov	sp, r7
 8002298:	bd90      	pop	{r4, r7, pc}
 800229a:	bf00      	nop
 800229c:	0800d628 	.word	0x0800d628
 80022a0:	0800d638 	.word	0x0800d638
 80022a4:	0800d648 	.word	0x0800d648
 80022a8:	0800d654 	.word	0x0800d654
 80022ac:	0800d658 	.word	0x0800d658
 80022b0:	0800d660 	.word	0x0800d660
 80022b4:	0800d668 	.word	0x0800d668

080022b8 <HMI_checkBlob>:

int HMI_checkBlob(Hmi *hmi, TS_TOUCH_DATA_Def myTS_Handle,int updateHMI){
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08c      	sub	sp, #48	; 0x30
 80022bc:	af02      	add	r7, sp, #8
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	1d38      	adds	r0, r7, #4
 80022c2:	e880 0006 	stmia.w	r0, {r1, r2}
 80022c6:	603b      	str	r3, [r7, #0]
	if(hmi->HmiInformation.stateMachine->getBlobDetected(hmi->HmiInformation.stateMachine)==1)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	6812      	ldr	r2, [r2, #0]
 80022d2:	4610      	mov	r0, r2
 80022d4:	4798      	blx	r3
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b01      	cmp	r3, #1
 80022da:	f040 80d9 	bne.w	8002490 <HMI_checkBlob+0x1d8>
	{
		if(updateHMI ==1){
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d125      	bne.n	8002330 <HMI_checkBlob+0x78>
		ILI9341_Fill(COLOR_RED);
 80022e4:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80022e8:	f7ff f81e 	bl	8001328 <ILI9341_Fill>
		ILI9341_Fill_Rect(110, 70, 210, 170, COLOR_WHITE);
 80022ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	23aa      	movs	r3, #170	; 0xaa
 80022f4:	22d2      	movs	r2, #210	; 0xd2
 80022f6:	2146      	movs	r1, #70	; 0x46
 80022f8:	206e      	movs	r0, #110	; 0x6e
 80022fa:	f7ff f859 	bl	80013b0 <ILI9341_Fill_Rect>
		ILI9341_printText("BLOB erkannt!", 90, 20, COLOR_WHITE, COLOR_RED, 2);
 80022fe:	2302      	movs	r3, #2
 8002300:	9301      	str	r3, [sp, #4]
 8002302:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800230c:	2214      	movs	r2, #20
 800230e:	215a      	movs	r1, #90	; 0x5a
 8002310:	4862      	ldr	r0, [pc, #392]	; (800249c <HMI_checkBlob+0x1e4>)
 8002312:	f7ff fb73 	bl	80019fc <ILI9341_printText>
		ILI9341_printText("OK", 145, 110, COLOR_BLACK, COLOR_WHITE, 3);
 8002316:	2303      	movs	r3, #3
 8002318:	9301      	str	r3, [sp, #4]
 800231a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	2300      	movs	r3, #0
 8002322:	226e      	movs	r2, #110	; 0x6e
 8002324:	2191      	movs	r1, #145	; 0x91
 8002326:	485e      	ldr	r0, [pc, #376]	; (80024a0 <HMI_checkBlob+0x1e8>)
 8002328:	f7ff fb68 	bl	80019fc <ILI9341_printText>
		updateHMI = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	603b      	str	r3, [r7, #0]
		}
		if(myTS_Handle.isPressed)
 8002330:	793b      	ldrb	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 80ac 	beq.w	8002490 <HMI_checkBlob+0x1d8>
		{
			if(myTS_Handle.X >=110 && myTS_Handle.X<=210 && myTS_Handle.Y>=70 && myTS_Handle.Y<=140)
 8002338:	88fb      	ldrh	r3, [r7, #6]
 800233a:	2b6d      	cmp	r3, #109	; 0x6d
 800233c:	f240 80a8 	bls.w	8002490 <HMI_checkBlob+0x1d8>
 8002340:	88fb      	ldrh	r3, [r7, #6]
 8002342:	2bd2      	cmp	r3, #210	; 0xd2
 8002344:	f200 80a4 	bhi.w	8002490 <HMI_checkBlob+0x1d8>
 8002348:	893b      	ldrh	r3, [r7, #8]
 800234a:	2b45      	cmp	r3, #69	; 0x45
 800234c:	f240 80a0 	bls.w	8002490 <HMI_checkBlob+0x1d8>
 8002350:	893b      	ldrh	r3, [r7, #8]
 8002352:	2b8c      	cmp	r3, #140	; 0x8c
 8002354:	f200 809c 	bhi.w	8002490 <HMI_checkBlob+0x1d8>
						{
						hmi->HmiInformation.stateMachine->setBlobDetected(hmi->HmiInformation.stateMachine,0);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	6812      	ldr	r2, [r2, #0]
 8002362:	2100      	movs	r1, #0
 8002364:	4610      	mov	r0, r2
 8002366:	4798      	blx	r3
						ILI9341_Fill(COLOR_WHITE);
 8002368:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800236c:	f7fe ffdc 	bl	8001328 <ILI9341_Fill>

						ILI9341_Fill_Rect(5, 10, 315, 50, COLOR_ORANGE);
 8002370:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	2332      	movs	r3, #50	; 0x32
 8002378:	f240 123b 	movw	r2, #315	; 0x13b
 800237c:	210a      	movs	r1, #10
 800237e:	2005      	movs	r0, #5
 8002380:	f7ff f816 	bl	80013b0 <ILI9341_Fill_Rect>
						ILI9341_printText("Sensor1: 0 mm", 50, 25, COLOR_WHITE, COLOR_ORANGE, 2);
 8002384:	2302      	movs	r3, #2
 8002386:	9301      	str	r3, [sp, #4]
 8002388:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002392:	2219      	movs	r2, #25
 8002394:	2132      	movs	r1, #50	; 0x32
 8002396:	4843      	ldr	r0, [pc, #268]	; (80024a4 <HMI_checkBlob+0x1ec>)
 8002398:	f7ff fb30 	bl	80019fc <ILI9341_printText>

						ILI9341_Fill_Rect(5, 60, 315, 100, COLOR_ORANGE);
 800239c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	2364      	movs	r3, #100	; 0x64
 80023a4:	f240 123b 	movw	r2, #315	; 0x13b
 80023a8:	213c      	movs	r1, #60	; 0x3c
 80023aa:	2005      	movs	r0, #5
 80023ac:	f7ff f800 	bl	80013b0 <ILI9341_Fill_Rect>
						ILI9341_printText("Sensor2 : 0 mm", 50, 75, COLOR_WHITE, COLOR_ORANGE, 2);
 80023b0:	2302      	movs	r3, #2
 80023b2:	9301      	str	r3, [sp, #4]
 80023b4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023be:	224b      	movs	r2, #75	; 0x4b
 80023c0:	2132      	movs	r1, #50	; 0x32
 80023c2:	4839      	ldr	r0, [pc, #228]	; (80024a8 <HMI_checkBlob+0x1f0>)
 80023c4:	f7ff fb1a 	bl	80019fc <ILI9341_printText>

						char buf[20];
						sprintf(buf, "Ruhemodus");
 80023c8:	f107 0314 	add.w	r3, r7, #20
 80023cc:	4937      	ldr	r1, [pc, #220]	; (80024ac <HMI_checkBlob+0x1f4>)
 80023ce:	4618      	mov	r0, r3
 80023d0:	f008 fafa 	bl	800a9c8 <siprintf>
						ILI9341_Fill_Rect(5, 110, 315, 150, COLOR_BLUE);
 80023d4:	231f      	movs	r3, #31
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	2396      	movs	r3, #150	; 0x96
 80023da:	f240 123b 	movw	r2, #315	; 0x13b
 80023de:	216e      	movs	r1, #110	; 0x6e
 80023e0:	2005      	movs	r0, #5
 80023e2:	f7fe ffe5 	bl	80013b0 <ILI9341_Fill_Rect>
						ILI9341_printText(buf, 50, 120, COLOR_WHITE, COLOR_BLUE, 2);
 80023e6:	f107 0014 	add.w	r0, r7, #20
 80023ea:	2302      	movs	r3, #2
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	231f      	movs	r3, #31
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023f6:	2278      	movs	r2, #120	; 0x78
 80023f8:	2132      	movs	r1, #50	; 0x32
 80023fa:	f7ff faff 	bl	80019fc <ILI9341_printText>

						ILI9341_Fill_Rect(30, 160, 70, 200, COLOR_BLUE);
 80023fe:	231f      	movs	r3, #31
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	23c8      	movs	r3, #200	; 0xc8
 8002404:	2246      	movs	r2, #70	; 0x46
 8002406:	21a0      	movs	r1, #160	; 0xa0
 8002408:	201e      	movs	r0, #30
 800240a:	f7fe ffd1 	bl	80013b0 <ILI9341_Fill_Rect>
						ILI9341_printText("UP", 45,  180, COLOR_WHITE, COLOR_BLUE, 1);
 800240e:	2301      	movs	r3, #1
 8002410:	9301      	str	r3, [sp, #4]
 8002412:	231f      	movs	r3, #31
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800241a:	22b4      	movs	r2, #180	; 0xb4
 800241c:	212d      	movs	r1, #45	; 0x2d
 800241e:	4824      	ldr	r0, [pc, #144]	; (80024b0 <HMI_checkBlob+0x1f8>)
 8002420:	f7ff faec 	bl	80019fc <ILI9341_printText>

						ILI9341_Fill_Rect(80, 160, 120, 200, COLOR_BLUE);
 8002424:	231f      	movs	r3, #31
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	23c8      	movs	r3, #200	; 0xc8
 800242a:	2278      	movs	r2, #120	; 0x78
 800242c:	21a0      	movs	r1, #160	; 0xa0
 800242e:	2050      	movs	r0, #80	; 0x50
 8002430:	f7fe ffbe 	bl	80013b0 <ILI9341_Fill_Rect>
						ILI9341_printText("DOWN", 90,  180, COLOR_WHITE, COLOR_BLUE, 1);
 8002434:	2301      	movs	r3, #1
 8002436:	9301      	str	r3, [sp, #4]
 8002438:	231f      	movs	r3, #31
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002440:	22b4      	movs	r2, #180	; 0xb4
 8002442:	215a      	movs	r1, #90	; 0x5a
 8002444:	481b      	ldr	r0, [pc, #108]	; (80024b4 <HMI_checkBlob+0x1fc>)
 8002446:	f7ff fad9 	bl	80019fc <ILI9341_printText>

						ILI9341_printText("REGELUNG", 195,  170, COLOR_BLACK, COLOR_WHITE, 2);
 800244a:	2302      	movs	r3, #2
 800244c:	9301      	str	r3, [sp, #4]
 800244e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	2300      	movs	r3, #0
 8002456:	22aa      	movs	r2, #170	; 0xaa
 8002458:	21c3      	movs	r1, #195	; 0xc3
 800245a:	4817      	ldr	r0, [pc, #92]	; (80024b8 <HMI_checkBlob+0x200>)
 800245c:	f7ff face 	bl	80019fc <ILI9341_printText>


						ILI9341_Fill_Rect(180, 190, 300, 230, COLOR_RED);
 8002460:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	23e6      	movs	r3, #230	; 0xe6
 8002468:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800246c:	21be      	movs	r1, #190	; 0xbe
 800246e:	20b4      	movs	r0, #180	; 0xb4
 8002470:	f7fe ff9e 	bl	80013b0 <ILI9341_Fill_Rect>
						ILI9341_printText("IDLE", 230,  205, COLOR_WHITE, COLOR_RED, 2);
 8002474:	2302      	movs	r3, #2
 8002476:	9301      	str	r3, [sp, #4]
 8002478:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002482:	22cd      	movs	r2, #205	; 0xcd
 8002484:	21e6      	movs	r1, #230	; 0xe6
 8002486:	480d      	ldr	r0, [pc, #52]	; (80024bc <HMI_checkBlob+0x204>)
 8002488:	f7ff fab8 	bl	80019fc <ILI9341_printText>
						updateHMI = 1;
 800248c:	2301      	movs	r3, #1
 800248e:	603b      	str	r3, [r7, #0]
						}
		}

	}
	return updateHMI;
 8002490:	683b      	ldr	r3, [r7, #0]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3728      	adds	r7, #40	; 0x28
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	0800d674 	.word	0x0800d674
 80024a0:	0800d684 	.word	0x0800d684
 80024a4:	0800d688 	.word	0x0800d688
 80024a8:	0800d638 	.word	0x0800d638
 80024ac:	0800d648 	.word	0x0800d648
 80024b0:	0800d654 	.word	0x0800d654
 80024b4:	0800d658 	.word	0x0800d658
 80024b8:	0800d668 	.word	0x0800d668
 80024bc:	0800d660 	.word	0x0800d660

080024c0 <HMI_update_soll>:

void HMI_update_soll(Hmi *hmi,Motor *motor, PIDController *pidController, int operation){
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08c      	sub	sp, #48	; 0x30
 80024c4:	af02      	add	r7, sp, #8
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
 80024cc:	603b      	str	r3, [r7, #0]
	float Soll = 0.0;
 80024ce:	f04f 0300 	mov.w	r3, #0
 80024d2:	627b      	str	r3, [r7, #36]	; 0x24
	char buf[20];
	if(hmi->HmiInformation.stateMachine->getState(hmi->HmiInformation.stateMachine) == STATE_IDLE){
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	6812      	ldr	r2, [r2, #0]
 80024de:	4610      	mov	r0, r2
 80024e0:	4798      	blx	r3
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d106      	bne.n	80024f6 <HMI_update_soll+0x36>
		sprintf(buf, "Ruhemodus");
 80024e8:	f107 0310 	add.w	r3, r7, #16
 80024ec:	495c      	ldr	r1, [pc, #368]	; (8002660 <HMI_update_soll+0x1a0>)
 80024ee:	4618      	mov	r0, r3
 80024f0:	f008 fa6a 	bl	800a9c8 <siprintf>
 80024f4:	e096      	b.n	8002624 <HMI_update_soll+0x164>
	}
	else if(hmi->HmiInformation.stateMachine->getState(hmi->HmiInformation.stateMachine) == STATE_AUTOMATIC_MODE){
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	4610      	mov	r0, r2
 8002502:	4798      	blx	r3
 8002504:	4603      	mov	r3, r0
 8002506:	2b02      	cmp	r3, #2
 8002508:	d13d      	bne.n	8002586 <HMI_update_soll+0xc6>
		Soll = pidController->get_setPoint(pidController);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	4798      	blx	r3
 8002512:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
		if(operation == 1){
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d110      	bne.n	800253e <HMI_update_soll+0x7e>
			Soll = Soll + 0.05;
 800251c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800251e:	f7fe f81b 	bl	8000558 <__aeabi_f2d>
 8002522:	a34d      	add	r3, pc, #308	; (adr r3, 8002658 <HMI_update_soll+0x198>)
 8002524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002528:	f7fd feb8 	bl	800029c <__adddf3>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4610      	mov	r0, r2
 8002532:	4619      	mov	r1, r3
 8002534:	f7fe fb60 	bl	8000bf8 <__aeabi_d2f>
 8002538:	4603      	mov	r3, r0
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
 800253c:	e012      	b.n	8002564 <HMI_update_soll+0xa4>
		}else if(operation == 2)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d10f      	bne.n	8002564 <HMI_update_soll+0xa4>
		{
			Soll = Soll - 0.05;
 8002544:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002546:	f7fe f807 	bl	8000558 <__aeabi_f2d>
 800254a:	a343      	add	r3, pc, #268	; (adr r3, 8002658 <HMI_update_soll+0x198>)
 800254c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002550:	f7fd fea2 	bl	8000298 <__aeabi_dsub>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	f7fe fb4c 	bl	8000bf8 <__aeabi_d2f>
 8002560:	4603      	mov	r3, r0
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
		}
		pidController->set_setPoint(pidController,Soll);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002568:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	4798      	blx	r3
		sprintf(buf, "Soll: %.2f mm", Soll);
 8002570:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002572:	f7fd fff1 	bl	8000558 <__aeabi_f2d>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	f107 0010 	add.w	r0, r7, #16
 800257e:	4939      	ldr	r1, [pc, #228]	; (8002664 <HMI_update_soll+0x1a4>)
 8002580:	f008 fa22 	bl	800a9c8 <siprintf>
 8002584:	e04e      	b.n	8002624 <HMI_update_soll+0x164>
	}else if(hmi->HmiInformation.stateMachine->getState(hmi->HmiInformation.stateMachine) == STATE_MANUAL_CONTROL){
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	4610      	mov	r0, r2
 8002592:	4798      	blx	r3
 8002594:	4603      	mov	r3, r0
 8002596:	2b01      	cmp	r3, #1
 8002598:	d144      	bne.n	8002624 <HMI_update_soll+0x164>
		Soll = motor->getSpeed(motor);
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	68b8      	ldr	r0, [r7, #8]
 80025a0:	4798      	blx	r3
 80025a2:	ee07 0a90 	vmov	s15, r0
 80025a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025aa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		if(operation == 1){
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d108      	bne.n	80025c6 <HMI_update_soll+0x106>
			Soll = Soll + 10;
 80025b4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80025b8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80025bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025c0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80025c4:	e00a      	b.n	80025dc <HMI_update_soll+0x11c>
		}else if(operation == 2)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d107      	bne.n	80025dc <HMI_update_soll+0x11c>
		{
			Soll = Soll - 10;
 80025cc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80025d0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80025d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80025d8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		}
		if(Soll > 100 || Soll < 0){
 80025dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80025e0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002668 <HMI_update_soll+0x1a8>
 80025e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ec:	dc30      	bgt.n	8002650 <HMI_update_soll+0x190>
 80025ee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80025f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fa:	d429      	bmi.n	8002650 <HMI_update_soll+0x190>
			return;
		}
		motor->setSpeed(motor,Soll);
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002604:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002608:	ee17 1a90 	vmov	r1, s15
 800260c:	68b8      	ldr	r0, [r7, #8]
 800260e:	4798      	blx	r3
		sprintf(buf, "Drehzahl: %.2f U/min", Soll);
 8002610:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002612:	f7fd ffa1 	bl	8000558 <__aeabi_f2d>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	f107 0010 	add.w	r0, r7, #16
 800261e:	4913      	ldr	r1, [pc, #76]	; (800266c <HMI_update_soll+0x1ac>)
 8002620:	f008 f9d2 	bl	800a9c8 <siprintf>
	}
	ILI9341_Fill_Rect(5, 110, 315, 150, COLOR_BLUE);
 8002624:	231f      	movs	r3, #31
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	2396      	movs	r3, #150	; 0x96
 800262a:	f240 123b 	movw	r2, #315	; 0x13b
 800262e:	216e      	movs	r1, #110	; 0x6e
 8002630:	2005      	movs	r0, #5
 8002632:	f7fe febd 	bl	80013b0 <ILI9341_Fill_Rect>
	ILI9341_printText(buf, 50, 120, COLOR_WHITE, COLOR_BLUE, 2);
 8002636:	f107 0010 	add.w	r0, r7, #16
 800263a:	2302      	movs	r3, #2
 800263c:	9301      	str	r3, [sp, #4]
 800263e:	231f      	movs	r3, #31
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002646:	2278      	movs	r2, #120	; 0x78
 8002648:	2132      	movs	r1, #50	; 0x32
 800264a:	f7ff f9d7 	bl	80019fc <ILI9341_printText>
 800264e:	e000      	b.n	8002652 <HMI_update_soll+0x192>
			return;
 8002650:	bf00      	nop
}
 8002652:	3728      	adds	r7, #40	; 0x28
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	9999999a 	.word	0x9999999a
 800265c:	3fa99999 	.word	0x3fa99999
 8002660:	0800d648 	.word	0x0800d648
 8002664:	0800d698 	.word	0x0800d698
 8002668:	42c80000 	.word	0x42c80000
 800266c:	0800d6a8 	.word	0x0800d6a8

08002670 <HMI_getTouch>:

void HMI_getTouch(Hmi *hmi, TS_TOUCH_DATA_Def myTS_Handle,Motor *motor, PIDController *pidController)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af02      	add	r7, sp, #8
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	1d38      	adds	r0, r7, #4
 800267a:	e880 0006 	stmia.w	r0, {r1, r2}
 800267e:	603b      	str	r3, [r7, #0]
	if(myTS_Handle.isPressed)
 8002680:	793b      	ldrb	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 80a7 	beq.w	80027d6 <HMI_getTouch+0x166>
	{
		if(myTS_Handle.X >=30 && myTS_Handle.X<=70 && myTS_Handle.Y>=160 && myTS_Handle.Y<=200)
 8002688:	88fb      	ldrh	r3, [r7, #6]
 800268a:	2b1d      	cmp	r3, #29
 800268c:	d90e      	bls.n	80026ac <HMI_getTouch+0x3c>
 800268e:	88fb      	ldrh	r3, [r7, #6]
 8002690:	2b46      	cmp	r3, #70	; 0x46
 8002692:	d80b      	bhi.n	80026ac <HMI_getTouch+0x3c>
 8002694:	893b      	ldrh	r3, [r7, #8]
 8002696:	2b9f      	cmp	r3, #159	; 0x9f
 8002698:	d908      	bls.n	80026ac <HMI_getTouch+0x3c>
 800269a:	893b      	ldrh	r3, [r7, #8]
 800269c:	2bc8      	cmp	r3, #200	; 0xc8
 800269e:	d805      	bhi.n	80026ac <HMI_getTouch+0x3c>
		{
			HMI_update_soll(hmi,motor, pidController, 1);
 80026a0:	2301      	movs	r3, #1
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	6839      	ldr	r1, [r7, #0]
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f7ff ff0a 	bl	80024c0 <HMI_update_soll>
		}

		if(myTS_Handle.X >=80 && myTS_Handle.X<=120 && myTS_Handle.Y>=160 && myTS_Handle.Y<=200)
 80026ac:	88fb      	ldrh	r3, [r7, #6]
 80026ae:	2b4f      	cmp	r3, #79	; 0x4f
 80026b0:	d90e      	bls.n	80026d0 <HMI_getTouch+0x60>
 80026b2:	88fb      	ldrh	r3, [r7, #6]
 80026b4:	2b78      	cmp	r3, #120	; 0x78
 80026b6:	d80b      	bhi.n	80026d0 <HMI_getTouch+0x60>
 80026b8:	893b      	ldrh	r3, [r7, #8]
 80026ba:	2b9f      	cmp	r3, #159	; 0x9f
 80026bc:	d908      	bls.n	80026d0 <HMI_getTouch+0x60>
 80026be:	893b      	ldrh	r3, [r7, #8]
 80026c0:	2bc8      	cmp	r3, #200	; 0xc8
 80026c2:	d805      	bhi.n	80026d0 <HMI_getTouch+0x60>
		{
			HMI_update_soll(hmi,motor, pidController, 0);
 80026c4:	2300      	movs	r3, #0
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	6839      	ldr	r1, [r7, #0]
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f7ff fef8 	bl	80024c0 <HMI_update_soll>
		}

		if(myTS_Handle.X >=180 && myTS_Handle.X<=300 && myTS_Handle.Y>=190 && myTS_Handle.Y<=230)
 80026d0:	88fb      	ldrh	r3, [r7, #6]
 80026d2:	2bb3      	cmp	r3, #179	; 0xb3
 80026d4:	d97f      	bls.n	80027d6 <HMI_getTouch+0x166>
 80026d6:	88fb      	ldrh	r3, [r7, #6]
 80026d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80026dc:	d87b      	bhi.n	80027d6 <HMI_getTouch+0x166>
 80026de:	893b      	ldrh	r3, [r7, #8]
 80026e0:	2bbd      	cmp	r3, #189	; 0xbd
 80026e2:	d978      	bls.n	80027d6 <HMI_getTouch+0x166>
 80026e4:	893b      	ldrh	r3, [r7, #8]
 80026e6:	2be6      	cmp	r3, #230	; 0xe6
 80026e8:	d875      	bhi.n	80027d6 <HMI_getTouch+0x166>
		{
			if(hmi->HmiInformation.stateMachine->getState(hmi->HmiInformation.stateMachine) == STATE_IDLE){
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	4610      	mov	r0, r2
 80026f6:	4798      	blx	r3
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d11e      	bne.n	800273c <HMI_getTouch+0xcc>
				hmi->HmiInformation.stateMachine->changeState(hmi->HmiInformation.stateMachine, STATE_MANUAL_CONTROL);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	6812      	ldr	r2, [r2, #0]
 8002708:	2101      	movs	r1, #1
 800270a:	4610      	mov	r0, r2
 800270c:	4798      	blx	r3
  				ILI9341_Fill_Rect(180, 190, 300, 230, COLOR_ORANGE);
 800270e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	23e6      	movs	r3, #230	; 0xe6
 8002716:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800271a:	21be      	movs	r1, #190	; 0xbe
 800271c:	20b4      	movs	r0, #180	; 0xb4
 800271e:	f7fe fe47 	bl	80013b0 <ILI9341_Fill_Rect>
  				ILI9341_printText("Manual", 230,  205, COLOR_WHITE, COLOR_ORANGE, 2);
 8002722:	2302      	movs	r3, #2
 8002724:	9301      	str	r3, [sp, #4]
 8002726:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002730:	22cd      	movs	r2, #205	; 0xcd
 8002732:	21e6      	movs	r1, #230	; 0xe6
 8002734:	482a      	ldr	r0, [pc, #168]	; (80027e0 <HMI_getTouch+0x170>)
 8002736:	f7ff f961 	bl	80019fc <ILI9341_printText>
 800273a:	e046      	b.n	80027ca <HMI_getTouch+0x15a>
			}
			else if(hmi->HmiInformation.stateMachine->getState(hmi->HmiInformation.stateMachine) == STATE_MANUAL_CONTROL){
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	4610      	mov	r0, r2
 8002748:	4798      	blx	r3
 800274a:	4603      	mov	r3, r0
 800274c:	2b01      	cmp	r3, #1
 800274e:	d11e      	bne.n	800278e <HMI_getTouch+0x11e>
				hmi->HmiInformation.stateMachine->changeState(hmi->HmiInformation.stateMachine, STATE_AUTOMATIC_MODE);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	2102      	movs	r1, #2
 800275c:	4610      	mov	r0, r2
 800275e:	4798      	blx	r3
  				ILI9341_Fill_Rect(180, 190, 300, 230, COLOR_GREEN);
 8002760:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	23e6      	movs	r3, #230	; 0xe6
 8002768:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800276c:	21be      	movs	r1, #190	; 0xbe
 800276e:	20b4      	movs	r0, #180	; 0xb4
 8002770:	f7fe fe1e 	bl	80013b0 <ILI9341_Fill_Rect>
  				ILI9341_printText("Auto", 230,  205, COLOR_WHITE, COLOR_GREEN, 2);
 8002774:	2302      	movs	r3, #2
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002782:	22cd      	movs	r2, #205	; 0xcd
 8002784:	21e6      	movs	r1, #230	; 0xe6
 8002786:	4817      	ldr	r0, [pc, #92]	; (80027e4 <HMI_getTouch+0x174>)
 8002788:	f7ff f938 	bl	80019fc <ILI9341_printText>
 800278c:	e01d      	b.n	80027ca <HMI_getTouch+0x15a>
			}
			else{
				hmi->HmiInformation.stateMachine->changeState(hmi->HmiInformation.stateMachine, STATE_IDLE);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	2100      	movs	r1, #0
 800279a:	4610      	mov	r0, r2
 800279c:	4798      	blx	r3
  				ILI9341_Fill_Rect(180, 190, 300, 230, COLOR_RED);
 800279e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	23e6      	movs	r3, #230	; 0xe6
 80027a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027aa:	21be      	movs	r1, #190	; 0xbe
 80027ac:	20b4      	movs	r0, #180	; 0xb4
 80027ae:	f7fe fdff 	bl	80013b0 <ILI9341_Fill_Rect>
  				ILI9341_printText("Idle", 230,  205, COLOR_WHITE, COLOR_RED, 2);
 80027b2:	2302      	movs	r3, #2
 80027b4:	9301      	str	r3, [sp, #4]
 80027b6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027c0:	22cd      	movs	r2, #205	; 0xcd
 80027c2:	21e6      	movs	r1, #230	; 0xe6
 80027c4:	4808      	ldr	r0, [pc, #32]	; (80027e8 <HMI_getTouch+0x178>)
 80027c6:	f7ff f919 	bl	80019fc <ILI9341_printText>
			}
			HMI_update_soll(hmi,motor, pidController, 0);
 80027ca:	2300      	movs	r3, #0
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	6839      	ldr	r1, [r7, #0]
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f7ff fe75 	bl	80024c0 <HMI_update_soll>
		}
	}


}
 80027d6:	bf00      	nop
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	0800d6c0 	.word	0x0800d6c0
 80027e4:	0800d6c8 	.word	0x0800d6c8
 80027e8:	0800d6d0 	.word	0x0800d6d0

080027ec <HMI_updateDisplaySensor>:

void HMI_updateDisplaySensor(Hmi *hmi, float extruder, float back)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b090      	sub	sp, #64	; 0x40
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80027f8:	edc7 0a01 	vstr	s1, [r7, #4]
	if(hmi->HmiInformation.stateMachine->getBlobDetected(hmi->HmiInformation.stateMachine) == 1){
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	6812      	ldr	r2, [r2, #0]
 8002806:	4610      	mov	r0, r2
 8002808:	4798      	blx	r3
 800280a:	4603      	mov	r3, r0
 800280c:	2b01      	cmp	r3, #1
 800280e:	d062      	beq.n	80028d6 <HMI_updateDisplaySensor+0xea>
		return;
	}
	if(extruder >= 0 && extruder <5){
 8002810:	edd7 7a02 	vldr	s15, [r7, #8]
 8002814:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800281c:	db29      	blt.n	8002872 <HMI_updateDisplaySensor+0x86>
 800281e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002822:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002826:	eef4 7ac7 	vcmpe.f32	s15, s14
 800282a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800282e:	d520      	bpl.n	8002872 <HMI_updateDisplaySensor+0x86>
		//float value1 = sensorExtruder->getDiameter(sensorExtruder);
		char buf1[20];
		sprintf(buf1, "Sensor Ext: %.2f mm", extruder);
 8002830:	68b8      	ldr	r0, [r7, #8]
 8002832:	f7fd fe91 	bl	8000558 <__aeabi_f2d>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800283e:	4928      	ldr	r1, [pc, #160]	; (80028e0 <HMI_updateDisplaySensor+0xf4>)
 8002840:	f008 f8c2 	bl	800a9c8 <siprintf>


		ILI9341_Fill_Rect(5, 10, 315, 50, COLOR_ORANGE);
 8002844:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	2332      	movs	r3, #50	; 0x32
 800284c:	f240 123b 	movw	r2, #315	; 0x13b
 8002850:	210a      	movs	r1, #10
 8002852:	2005      	movs	r0, #5
 8002854:	f7fe fdac 	bl	80013b0 <ILI9341_Fill_Rect>
		ILI9341_printText(buf1, 50, 25, COLOR_WHITE, COLOR_ORANGE, 2);
 8002858:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800285c:	2302      	movs	r3, #2
 800285e:	9301      	str	r3, [sp, #4]
 8002860:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800286a:	2219      	movs	r2, #25
 800286c:	2132      	movs	r1, #50	; 0x32
 800286e:	f7ff f8c5 	bl	80019fc <ILI9341_printText>
	}
	if (back >= 0 && back <5){
 8002872:	edd7 7a01 	vldr	s15, [r7, #4]
 8002876:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800287a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800287e:	db2b      	blt.n	80028d8 <HMI_updateDisplaySensor+0xec>
 8002880:	edd7 7a01 	vldr	s15, [r7, #4]
 8002884:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002888:	eef4 7ac7 	vcmpe.f32	s15, s14
 800288c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002890:	d522      	bpl.n	80028d8 <HMI_updateDisplaySensor+0xec>
		//float value2 = sensorBack->getDiameter(sensorBack);
		char buf2[20];
		sprintf(buf2, "Sensor B: %.2f mm", back);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7fd fe60 	bl	8000558 <__aeabi_f2d>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	f107 0010 	add.w	r0, r7, #16
 80028a0:	4910      	ldr	r1, [pc, #64]	; (80028e4 <HMI_updateDisplaySensor+0xf8>)
 80028a2:	f008 f891 	bl	800a9c8 <siprintf>

		ILI9341_Fill_Rect(5, 60, 315, 100, COLOR_ORANGE);
 80028a6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	2364      	movs	r3, #100	; 0x64
 80028ae:	f240 123b 	movw	r2, #315	; 0x13b
 80028b2:	213c      	movs	r1, #60	; 0x3c
 80028b4:	2005      	movs	r0, #5
 80028b6:	f7fe fd7b 	bl	80013b0 <ILI9341_Fill_Rect>
		ILI9341_printText(buf2, 50, 75, COLOR_WHITE, COLOR_ORANGE, 2);
 80028ba:	f107 0010 	add.w	r0, r7, #16
 80028be:	2302      	movs	r3, #2
 80028c0:	9301      	str	r3, [sp, #4]
 80028c2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028cc:	224b      	movs	r2, #75	; 0x4b
 80028ce:	2132      	movs	r1, #50	; 0x32
 80028d0:	f7ff f894 	bl	80019fc <ILI9341_printText>
 80028d4:	e000      	b.n	80028d8 <HMI_updateDisplaySensor+0xec>
		return;
 80028d6:	bf00      	nop
	}

}
 80028d8:	3738      	adds	r7, #56	; 0x38
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	0800d6d8 	.word	0x0800d6d8
 80028e4:	0800d6ec 	.word	0x0800d6ec

080028e8 <HMI_signallight_check_blob>:
// TODO: ADD IMPLEMENTATION FOR SIGNALLIGHT

// HMI_signallight_check_blob.c
#include "HMI/signallight_control.h"

void HMI_signallight_check_blob(StateMachine* stateMachine, uint16_t pin, float diameter, float on, float off) {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6178      	str	r0, [r7, #20]
 80028f0:	460b      	mov	r3, r1
 80028f2:	ed87 0a03 	vstr	s0, [r7, #12]
 80028f6:	edc7 0a02 	vstr	s1, [r7, #8]
 80028fa:	ed87 1a01 	vstr	s2, [r7, #4]
 80028fe:	827b      	strh	r3, [r7, #18]
    if (diameter >= on) {
 8002900:	ed97 7a03 	vldr	s14, [r7, #12]
 8002904:	edd7 7a02 	vldr	s15, [r7, #8]
 8002908:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800290c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002910:	db0a      	blt.n	8002928 <HMI_signallight_check_blob+0x40>
        HAL_GPIO_WritePin(GPIOC, pin, GPIO_PIN_SET);
 8002912:	8a7b      	ldrh	r3, [r7, #18]
 8002914:	2201      	movs	r2, #1
 8002916:	4619      	mov	r1, r3
 8002918:	4810      	ldr	r0, [pc, #64]	; (800295c <HMI_signallight_check_blob+0x74>)
 800291a:	f002 fe8d 	bl	8005638 <HAL_GPIO_WritePin>
        stateMachine->setBlobDetected(stateMachine,1);
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	2101      	movs	r1, #1
 8002924:	6978      	ldr	r0, [r7, #20]
 8002926:	4798      	blx	r3
    }

    if (diameter <= off) {
 8002928:	ed97 7a03 	vldr	s14, [r7, #12]
 800292c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002930:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002938:	d900      	bls.n	800293c <HMI_signallight_check_blob+0x54>
        HAL_GPIO_WritePin(GPIOC, pin, GPIO_PIN_RESET);
        stateMachine->setBlobDetected(stateMachine,0);
    }
}
 800293a:	e00a      	b.n	8002952 <HMI_signallight_check_blob+0x6a>
        HAL_GPIO_WritePin(GPIOC, pin, GPIO_PIN_RESET);
 800293c:	8a7b      	ldrh	r3, [r7, #18]
 800293e:	2200      	movs	r2, #0
 8002940:	4619      	mov	r1, r3
 8002942:	4806      	ldr	r0, [pc, #24]	; (800295c <HMI_signallight_check_blob+0x74>)
 8002944:	f002 fe78 	bl	8005638 <HAL_GPIO_WritePin>
        stateMachine->setBlobDetected(stateMachine,0);
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	2100      	movs	r1, #0
 800294e:	6978      	ldr	r0, [r7, #20]
 8002950:	4798      	blx	r3
}
 8002952:	bf00      	nop
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40020800 	.word	0x40020800

08002960 <createPcReceiveHandler>:
PcReceiveHandler createPcReceiveHandler(StateMachine*  stateMachine,
										PIDController* controller,
		   								Motor* motor,
		   								PcSendHandler* sender,
		   								UART_HandleTypeDef* uart3)
{
 8002960:	b5b0      	push	{r4, r5, r7, lr}
 8002962:	b08a      	sub	sp, #40	; 0x28
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	603b      	str	r3, [r7, #0]
    PcReceiveHandler handler;
    handler.stateMachine	= stateMachine;
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	613b      	str	r3, [r7, #16]
    handler.pidController 	= controller;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	617b      	str	r3, [r7, #20]
    handler.motor 			= motor;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	61bb      	str	r3, [r7, #24]
    handler.sender 			= sender;
 800297a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297c:	61fb      	str	r3, [r7, #28]
    handler.uart3 			= uart3;
 800297e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002980:	623b      	str	r3, [r7, #32]

    // Zuweisung der globalen Variable
    gPcHandler = handler;
 8002982:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <createPcReceiveHandler+0x5c>)
 8002984:	461d      	mov	r5, r3
 8002986:	f107 0410 	add.w	r4, r7, #16
 800298a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800298c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800298e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002992:	e885 0003 	stmia.w	r5, {r0, r1}

    handler.uartProcessor = createUartProcessor(pc_interface_dictionary);
 8002996:	480a      	ldr	r0, [pc, #40]	; (80029c0 <createPcReceiveHandler+0x60>)
 8002998:	f000 fe90 	bl	80036bc <createUartProcessor>
 800299c:	6278      	str	r0, [r7, #36]	; 0x24
    return handler;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	461d      	mov	r5, r3
 80029a2:	f107 0410 	add.w	r4, r7, #16
 80029a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029ae:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	3728      	adds	r7, #40	; 0x28
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bdb0      	pop	{r4, r5, r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20000350 	.word	0x20000350
 80029c0:	20000004 	.word	0x20000004

080029c4 <handleSetSpeed>:

// Handle-Methods
void handleSetSpeed(uint8_t uartNr, const char* value){
 80029c4:	b5b0      	push	{r4, r5, r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	6039      	str	r1, [r7, #0]
 80029ce:	71fb      	strb	r3, [r7, #7]
	if(gPcHandler.stateMachine->getState(gPcHandler.stateMachine) == STATE_MANUAL_CONTROL){
 80029d0:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <handleSetSpeed+0x4c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	4a0e      	ldr	r2, [pc, #56]	; (8002a10 <handleSetSpeed+0x4c>)
 80029d8:	6812      	ldr	r2, [r2, #0]
 80029da:	4610      	mov	r0, r2
 80029dc:	4798      	blx	r3
 80029de:	4603      	mov	r3, r0
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d110      	bne.n	8002a06 <handleSetSpeed+0x42>
		gPcHandler.motor->setSpeed(gPcHandler.motor,extractFloatValue(3,value));
 80029e4:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <handleSetSpeed+0x4c>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	68dc      	ldr	r4, [r3, #12]
 80029ea:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <handleSetSpeed+0x4c>)
 80029ec:	689d      	ldr	r5, [r3, #8]
 80029ee:	6839      	ldr	r1, [r7, #0]
 80029f0:	2003      	movs	r0, #3
 80029f2:	f000 f933 	bl	8002c5c <extractFloatValue>
 80029f6:	eef0 7a40 	vmov.f32	s15, s0
 80029fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029fe:	ee17 1a90 	vmov	r1, s15
 8002a02:	4628      	mov	r0, r5
 8002a04:	47a0      	blx	r4
	}

}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000350 	.word	0x20000350

08002a14 <handleSetState>:


void handleSetState(uint8_t uartNr, const char* value){
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	6039      	str	r1, [r7, #0]
 8002a1e:	71fb      	strb	r3, [r7, #7]
	int state = extractIntValue(3, value);
 8002a20:	6839      	ldr	r1, [r7, #0]
 8002a22:	2003      	movs	r0, #3
 8002a24:	f000 f9a6 	bl	8002d74 <extractIntValue>
 8002a28:	60b8      	str	r0, [r7, #8]
	State s = STATE_IDLE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	73fb      	strb	r3, [r7, #15]
	if(state == 1){
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d102      	bne.n	8002a3a <handleSetState+0x26>
		s = STATE_MANUAL_CONTROL;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
 8002a38:	e004      	b.n	8002a44 <handleSetState+0x30>
	}else if(state ==2){
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d101      	bne.n	8002a44 <handleSetState+0x30>
		s = STATE_AUTOMATIC_MODE;
 8002a40:	2302      	movs	r3, #2
 8002a42:	73fb      	strb	r3, [r7, #15]
	}

	gPcHandler.stateMachine->changeState(gPcHandler.stateMachine,s);
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <handleSetState+0x48>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	4a04      	ldr	r2, [pc, #16]	; (8002a5c <handleSetState+0x48>)
 8002a4c:	6812      	ldr	r2, [r2, #0]
 8002a4e:	7bf9      	ldrb	r1, [r7, #15]
 8002a50:	4610      	mov	r0, r2
 8002a52:	4798      	blx	r3
}
 8002a54:	bf00      	nop
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	20000350 	.word	0x20000350

08002a60 <handleSetCP>:

void handleSetCP(uint8_t uartNr, const char* value){
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	6039      	str	r1, [r7, #0]
 8002a6a:	71fb      	strb	r3, [r7, #7]
	float kp = extractFloatValue(3, value);
 8002a6c:	6839      	ldr	r1, [r7, #0]
 8002a6e:	2003      	movs	r0, #3
 8002a70:	f000 f8f4 	bl	8002c5c <extractFloatValue>
 8002a74:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.pidController->set_kp(gPcHandler.pidController,kp);
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <handleSetCP+0x34>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7e:	4a05      	ldr	r2, [pc, #20]	; (8002a94 <handleSetCP+0x34>)
 8002a80:	6852      	ldr	r2, [r2, #4]
 8002a82:	ed97 0a03 	vldr	s0, [r7, #12]
 8002a86:	4610      	mov	r0, r2
 8002a88:	4798      	blx	r3
}
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000350 	.word	0x20000350

08002a98 <handleSetCI>:
void handleSetCI(uint8_t uartNr, const char* value){
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	6039      	str	r1, [r7, #0]
 8002aa2:	71fb      	strb	r3, [r7, #7]
	float ki = extractFloatValue(3, value);
 8002aa4:	6839      	ldr	r1, [r7, #0]
 8002aa6:	2003      	movs	r0, #3
 8002aa8:	f000 f8d8 	bl	8002c5c <extractFloatValue>
 8002aac:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.pidController->set_ki(gPcHandler.pidController,ki);
 8002ab0:	4b06      	ldr	r3, [pc, #24]	; (8002acc <handleSetCI+0x34>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	4a05      	ldr	r2, [pc, #20]	; (8002acc <handleSetCI+0x34>)
 8002ab8:	6852      	ldr	r2, [r2, #4]
 8002aba:	ed97 0a03 	vldr	s0, [r7, #12]
 8002abe:	4610      	mov	r0, r2
 8002ac0:	4798      	blx	r3
}
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000350 	.word	0x20000350

08002ad0 <handleSetCD>:
void handleSetCD(uint8_t uartNr, const char* value){
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	6039      	str	r1, [r7, #0]
 8002ada:	71fb      	strb	r3, [r7, #7]
	float kd = extractFloatValue(3, value);
 8002adc:	6839      	ldr	r1, [r7, #0]
 8002ade:	2003      	movs	r0, #3
 8002ae0:	f000 f8bc 	bl	8002c5c <extractFloatValue>
 8002ae4:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.pidController->set_kd(gPcHandler.pidController,kd);
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <handleSetCD+0x34>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	4a05      	ldr	r2, [pc, #20]	; (8002b04 <handleSetCD+0x34>)
 8002af0:	6852      	ldr	r2, [r2, #4]
 8002af2:	ed97 0a03 	vldr	s0, [r7, #12]
 8002af6:	4610      	mov	r0, r2
 8002af8:	4798      	blx	r3
}
 8002afa:	bf00      	nop
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20000350 	.word	0x20000350

08002b08 <handleGetState>:

void handleGetState(uint8_t uartNr, const char* value){
 8002b08:	b5b0      	push	{r4, r5, r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	6039      	str	r1, [r7, #0]
 8002b12:	71fb      	strb	r3, [r7, #7]
	gPcHandler.sender->interface.sendState(gPcHandler.uart3,gPcHandler.stateMachine->getState(gPcHandler.stateMachine));
 8002b14:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <handleGetState+0x34>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	689c      	ldr	r4, [r3, #8]
 8002b1a:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <handleGetState+0x34>)
 8002b1c:	691d      	ldr	r5, [r3, #16]
 8002b1e:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <handleGetState+0x34>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	4a05      	ldr	r2, [pc, #20]	; (8002b3c <handleGetState+0x34>)
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	4610      	mov	r0, r2
 8002b2a:	4798      	blx	r3
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4628      	mov	r0, r5
 8002b32:	47a0      	blx	r4
}
 8002b34:	bf00      	nop
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b3c:	20000350 	.word	0x20000350

08002b40 <handleGetSpeed>:
void handleGetSpeed(uint8_t uartNr, const char* value){
 8002b40:	b5b0      	push	{r4, r5, r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	6039      	str	r1, [r7, #0]
 8002b4a:	71fb      	strb	r3, [r7, #7]
	gPcHandler.sender->interface.sendSpeed(gPcHandler.uart3,gPcHandler.motor->getSpeed(gPcHandler.motor));
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <handleGetSpeed+0x3c>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	68dc      	ldr	r4, [r3, #12]
 8002b52:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <handleGetSpeed+0x3c>)
 8002b54:	691d      	ldr	r5, [r3, #16]
 8002b56:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <handleGetSpeed+0x3c>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	4a07      	ldr	r2, [pc, #28]	; (8002b7c <handleGetSpeed+0x3c>)
 8002b5e:	6892      	ldr	r2, [r2, #8]
 8002b60:	4610      	mov	r0, r2
 8002b62:	4798      	blx	r3
 8002b64:	ee07 0a90 	vmov	s15, r0
 8002b68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b6c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b70:	4628      	mov	r0, r5
 8002b72:	47a0      	blx	r4
}
 8002b74:	bf00      	nop
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b7c:	20000350 	.word	0x20000350

08002b80 <handleGetCP>:
void handleGetCP(uint8_t uartNr, const char* value){
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	6039      	str	r1, [r7, #0]
 8002b8a:	71fb      	strb	r3, [r7, #7]
	float kp = gPcHandler.pidController->get_kp(gPcHandler.pidController);
 8002b8c:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <handleGetCP+0x38>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	4a09      	ldr	r2, [pc, #36]	; (8002bb8 <handleGetCP+0x38>)
 8002b94:	6852      	ldr	r2, [r2, #4]
 8002b96:	4610      	mov	r0, r2
 8002b98:	4798      	blx	r3
 8002b9a:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.sender->interface.sendCPvalue(gPcHandler.uart3,kp);
 8002b9e:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <handleGetCP+0x38>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	4a04      	ldr	r2, [pc, #16]	; (8002bb8 <handleGetCP+0x38>)
 8002ba6:	6912      	ldr	r2, [r2, #16]
 8002ba8:	ed97 0a03 	vldr	s0, [r7, #12]
 8002bac:	4610      	mov	r0, r2
 8002bae:	4798      	blx	r3
}
 8002bb0:	bf00      	nop
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	20000350 	.word	0x20000350

08002bbc <handleGetCI>:
void handleGetCI(uint8_t uartNr, const char* value){
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	6039      	str	r1, [r7, #0]
 8002bc6:	71fb      	strb	r3, [r7, #7]
	float ki = gPcHandler.pidController->get_ki(gPcHandler.pidController);
 8002bc8:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <handleGetCI+0x38>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	4a09      	ldr	r2, [pc, #36]	; (8002bf4 <handleGetCI+0x38>)
 8002bd0:	6852      	ldr	r2, [r2, #4]
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	4798      	blx	r3
 8002bd6:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.sender->interface.sendCIvalue(gPcHandler.uart3,ki);
 8002bda:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <handleGetCI+0x38>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	4a04      	ldr	r2, [pc, #16]	; (8002bf4 <handleGetCI+0x38>)
 8002be2:	6912      	ldr	r2, [r2, #16]
 8002be4:	ed97 0a03 	vldr	s0, [r7, #12]
 8002be8:	4610      	mov	r0, r2
 8002bea:	4798      	blx	r3
}
 8002bec:	bf00      	nop
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	20000350 	.word	0x20000350

08002bf8 <handleGetCD>:
void handleGetCD(uint8_t uartNr, const char* value){
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	6039      	str	r1, [r7, #0]
 8002c02:	71fb      	strb	r3, [r7, #7]
	float kd = gPcHandler.pidController->get_kd(gPcHandler.pidController);
 8002c04:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <handleGetCD+0x38>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	4a09      	ldr	r2, [pc, #36]	; (8002c30 <handleGetCD+0x38>)
 8002c0c:	6852      	ldr	r2, [r2, #4]
 8002c0e:	4610      	mov	r0, r2
 8002c10:	4798      	blx	r3
 8002c12:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.sender->interface.sendCDvalue(gPcHandler.uart3,kd);
 8002c16:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <handleGetCD+0x38>)
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	4a04      	ldr	r2, [pc, #16]	; (8002c30 <handleGetCD+0x38>)
 8002c1e:	6912      	ldr	r2, [r2, #16]
 8002c20:	ed97 0a03 	vldr	s0, [r7, #12]
 8002c24:	4610      	mov	r0, r2
 8002c26:	4798      	blx	r3
}
 8002c28:	bf00      	nop
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	20000350 	.word	0x20000350

08002c34 <processPcInterfaceMessage>:

void processPcInterfaceMessage(PcReceiveHandler* handler,uint8_t* receivedData, uint8_t receivedDataIndex){
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	71fb      	strb	r3, [r7, #7]
	processCommand(3, &(handler->uartProcessor), receivedData, receivedDataIndex);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f103 0114 	add.w	r1, r3, #20
 8002c48:	79fb      	ldrb	r3, [r7, #7]
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	2003      	movs	r0, #3
 8002c4e:	f000 fd73 	bl	8003738 <processCommand>
}
 8002c52:	bf00      	nop
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <extractFloatValue>:

float extractFloatValue(uint8_t uartNr, const char* value) {
 8002c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c60:	b089      	sub	sp, #36	; 0x24
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	4603      	mov	r3, r0
 8002c66:	6039      	str	r1, [r7, #0]
 8002c68:	71fb      	strb	r3, [r7, #7]
    int length = strlen(value);
 8002c6a:	6838      	ldr	r0, [r7, #0]
 8002c6c:	f7fd fb08 	bl	8000280 <strlen>
 8002c70:	4603      	mov	r3, r0
 8002c72:	613b      	str	r3, [r7, #16]
    int startIndex = -1;  // Index des ersten Leerzeichens
 8002c74:	f04f 33ff 	mov.w	r3, #4294967295
 8002c78:	61fb      	str	r3, [r7, #28]
    int endIndex = -1;    // Index des zweiten Leerzeichens
 8002c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7e:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < length; i++) {
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	e019      	b.n	8002cba <extractFloatValue+0x5e>
        if (value[i] == ' ' || value[i] == '\r') {
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b20      	cmp	r3, #32
 8002c90:	d005      	beq.n	8002c9e <extractFloatValue+0x42>
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	4413      	add	r3, r2
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b0d      	cmp	r3, #13
 8002c9c:	d10a      	bne.n	8002cb4 <extractFloatValue+0x58>
            if (startIndex == -1) {
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca4:	d103      	bne.n	8002cae <extractFloatValue+0x52>
                startIndex = i + 1;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	61fb      	str	r3, [r7, #28]
 8002cac:	e002      	b.n	8002cb4 <extractFloatValue+0x58>
            } else {
                endIndex = i;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	61bb      	str	r3, [r7, #24]
                break;
 8002cb2:	e006      	b.n	8002cc2 <extractFloatValue+0x66>
    for (int i = 0; i < length; i++) {
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	617b      	str	r3, [r7, #20]
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	dbe1      	blt.n	8002c86 <extractFloatValue+0x2a>
            }
        }
    }
    if (startIndex != -1 && endIndex != -1 && startIndex < endIndex) {
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc8:	d04a      	beq.n	8002d60 <extractFloatValue+0x104>
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd0:	d046      	beq.n	8002d60 <extractFloatValue+0x104>
 8002cd2:	69fa      	ldr	r2, [r7, #28]
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	da42      	bge.n	8002d60 <extractFloatValue+0x104>
 8002cda:	466b      	mov	r3, sp
 8002cdc:	461e      	mov	r6, r3
        char floatStr[endIndex - startIndex + 1];
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	1c59      	adds	r1, r3, #1
 8002ce6:	1e4b      	subs	r3, r1, #1
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	460a      	mov	r2, r1
 8002cec:	2300      	movs	r3, #0
 8002cee:	4690      	mov	r8, r2
 8002cf0:	4699      	mov	r9, r3
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d06:	460a      	mov	r2, r1
 8002d08:	2300      	movs	r3, #0
 8002d0a:	4614      	mov	r4, r2
 8002d0c:	461d      	mov	r5, r3
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	00eb      	lsls	r3, r5, #3
 8002d18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d1c:	00e2      	lsls	r2, r4, #3
 8002d1e:	460b      	mov	r3, r1
 8002d20:	3307      	adds	r3, #7
 8002d22:	08db      	lsrs	r3, r3, #3
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	ebad 0d03 	sub.w	sp, sp, r3
 8002d2a:	466b      	mov	r3, sp
 8002d2c:	3300      	adds	r3, #0
 8002d2e:	60bb      	str	r3, [r7, #8]
        strncpy(floatStr, value + startIndex, endIndex - startIndex);
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	18d1      	adds	r1, r2, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	68b8      	ldr	r0, [r7, #8]
 8002d40:	f007 febf 	bl	800aac2 <strncpy>
        floatStr[endIndex - startIndex] = '\0';
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	54d1      	strb	r1, [r2, r3]
        return strtof(floatStr, NULL);
 8002d50:	2100      	movs	r1, #0
 8002d52:	68b8      	ldr	r0, [r7, #8]
 8002d54:	f006 fe02 	bl	800995c <strtof>
 8002d58:	eef0 7a40 	vmov.f32	s15, s0
 8002d5c:	46b5      	mov	sp, r6
 8002d5e:	e001      	b.n	8002d64 <extractFloatValue+0x108>
    }
    return 0.00;
 8002d60:	eddf 7a03 	vldr	s15, [pc, #12]	; 8002d70 <extractFloatValue+0x114>
}
 8002d64:	eeb0 0a67 	vmov.f32	s0, s15
 8002d68:	3724      	adds	r7, #36	; 0x24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d70:	00000000 	.word	0x00000000

08002d74 <extractIntValue>:
int extractIntValue(uint8_t uartNr, const char* value) {
 8002d74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d78:	b089      	sub	sp, #36	; 0x24
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	6039      	str	r1, [r7, #0]
 8002d80:	71fb      	strb	r3, [r7, #7]
    int length = strlen(value);
 8002d82:	6838      	ldr	r0, [r7, #0]
 8002d84:	f7fd fa7c 	bl	8000280 <strlen>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	613b      	str	r3, [r7, #16]
    int startIndex = -1;  // Index des ersten Leerzeichens
 8002d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d90:	61fb      	str	r3, [r7, #28]
    int endIndex = -1;    // Index des zweiten Leerzeichens
 8002d92:	f04f 33ff 	mov.w	r3, #4294967295
 8002d96:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < length; i++) {
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	e019      	b.n	8002dd2 <extractIntValue+0x5e>
        if (value[i] == ' ' || value[i] == '\r') {
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	4413      	add	r3, r2
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	d005      	beq.n	8002db6 <extractIntValue+0x42>
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	4413      	add	r3, r2
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b0d      	cmp	r3, #13
 8002db4:	d10a      	bne.n	8002dcc <extractIntValue+0x58>
            if (startIndex == -1) {
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbc:	d103      	bne.n	8002dc6 <extractIntValue+0x52>
                startIndex = i + 1;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	61fb      	str	r3, [r7, #28]
 8002dc4:	e002      	b.n	8002dcc <extractIntValue+0x58>
            } else {
                endIndex = i;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	61bb      	str	r3, [r7, #24]
                break;
 8002dca:	e006      	b.n	8002dda <extractIntValue+0x66>
    for (int i = 0; i < length; i++) {
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	dbe1      	blt.n	8002d9e <extractIntValue+0x2a>
            }
        }
    }
    if (startIndex != -1 && endIndex != -1 && startIndex < endIndex) {
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de0:	d048      	beq.n	8002e74 <extractIntValue+0x100>
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de8:	d044      	beq.n	8002e74 <extractIntValue+0x100>
 8002dea:	69fa      	ldr	r2, [r7, #28]
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	da40      	bge.n	8002e74 <extractIntValue+0x100>
 8002df2:	466b      	mov	r3, sp
 8002df4:	461e      	mov	r6, r3
        char intStr[endIndex - startIndex + 1];
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	1c59      	adds	r1, r3, #1
 8002dfe:	1e4b      	subs	r3, r1, #1
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	460a      	mov	r2, r1
 8002e04:	2300      	movs	r3, #0
 8002e06:	4690      	mov	r8, r2
 8002e08:	4699      	mov	r9, r3
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e1e:	460a      	mov	r2, r1
 8002e20:	2300      	movs	r3, #0
 8002e22:	4614      	mov	r4, r2
 8002e24:	461d      	mov	r5, r3
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	f04f 0300 	mov.w	r3, #0
 8002e2e:	00eb      	lsls	r3, r5, #3
 8002e30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e34:	00e2      	lsls	r2, r4, #3
 8002e36:	460b      	mov	r3, r1
 8002e38:	3307      	adds	r3, #7
 8002e3a:	08db      	lsrs	r3, r3, #3
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	ebad 0d03 	sub.w	sp, sp, r3
 8002e42:	466b      	mov	r3, sp
 8002e44:	3300      	adds	r3, #0
 8002e46:	60bb      	str	r3, [r7, #8]
        strncpy(intStr, value + startIndex, endIndex - startIndex);
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	18d1      	adds	r1, r2, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	461a      	mov	r2, r3
 8002e56:	68b8      	ldr	r0, [r7, #8]
 8002e58:	f007 fe33 	bl	800aac2 <strncpy>
        intStr[endIndex - startIndex] = '\0';
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	2100      	movs	r1, #0
 8002e66:	54d1      	strb	r1, [r2, r3]
        return atoi(intStr);
 8002e68:	68b8      	ldr	r0, [r7, #8]
 8002e6a:	f005 ff61 	bl	8008d30 <atoi>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	46b5      	mov	sp, r6
 8002e72:	e000      	b.n	8002e76 <extractIntValue+0x102>
    }
    return 0;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3724      	adds	r7, #36	; 0x24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002e80 <sendDiamExt_impl>:
#include <stdio.h>
#include <string.h>


// Implementierung der Interface methoden
void sendDiamExt_impl(UART_HandleTypeDef *huart,float value) {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08a      	sub	sp, #40	; 0x28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	ed87 0a00 	vstr	s0, [r7]
	uint8_t tag[] = "DIAMEXT ";
 8002e8c:	4a21      	ldr	r2, [pc, #132]	; (8002f14 <sendDiamExt_impl+0x94>)
 8002e8e:	f107 031c 	add.w	r3, r7, #28
 8002e92:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e94:	c303      	stmia	r3!, {r0, r1}
 8002e96:	701a      	strb	r2, [r3, #0]
	uint8_t diameter[10];
	uint8_t endTag[] = " /r/n";
 8002e98:	4a1f      	ldr	r2, [pc, #124]	; (8002f18 <sendDiamExt_impl+0x98>)
 8002e9a:	f107 0308 	add.w	r3, r7, #8
 8002e9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ea2:	6018      	str	r0, [r3, #0]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	8019      	strh	r1, [r3, #0]

	sprintf((char *)diameter, "%.2f", value);
 8002ea8:	6838      	ldr	r0, [r7, #0]
 8002eaa:	f7fd fb55 	bl	8000558 <__aeabi_f2d>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	f107 0010 	add.w	r0, r7, #16
 8002eb6:	4919      	ldr	r1, [pc, #100]	; (8002f1c <sendDiamExt_impl+0x9c>)
 8002eb8:	f007 fd86 	bl	800a9c8 <siprintf>

	HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 8002ebc:	f107 031c 	add.w	r3, r7, #28
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fd f9dd 	bl	8000280 <strlen>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	f107 011c 	add.w	r1, r7, #28
 8002ece:	230a      	movs	r3, #10
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f004 ff02 	bl	8007cda <HAL_UART_Transmit>
   	HAL_UART_Transmit(huart, diameter, strlen((char*)diameter), 10);
 8002ed6:	f107 0310 	add.w	r3, r7, #16
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fd f9d0 	bl	8000280 <strlen>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	f107 0110 	add.w	r1, r7, #16
 8002ee8:	230a      	movs	r3, #10
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f004 fef5 	bl	8007cda <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 8002ef0:	f107 0308 	add.w	r3, r7, #8
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fd f9c3 	bl	8000280 <strlen>
 8002efa:	4603      	mov	r3, r0
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	f107 0108 	add.w	r1, r7, #8
 8002f02:	230a      	movs	r3, #10
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f004 fee8 	bl	8007cda <HAL_UART_Transmit>
}
 8002f0a:	bf00      	nop
 8002f0c:	3728      	adds	r7, #40	; 0x28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	0800d740 	.word	0x0800d740
 8002f18:	0800d74c 	.word	0x0800d74c
 8002f1c:	0800d738 	.word	0x0800d738

08002f20 <sendDiamBack_impl>:
void sendDiamBack_impl(UART_HandleTypeDef *huart,float value) {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08a      	sub	sp, #40	; 0x28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	ed87 0a00 	vstr	s0, [r7]
	uint8_t tag[] = "DIAMBACK ";
 8002f2c:	4a21      	ldr	r2, [pc, #132]	; (8002fb4 <sendDiamBack_impl+0x94>)
 8002f2e:	f107 031c 	add.w	r3, r7, #28
 8002f32:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f34:	c303      	stmia	r3!, {r0, r1}
 8002f36:	801a      	strh	r2, [r3, #0]
	uint8_t diameter[10];
	uint8_t endTag[] = " /r/n";
 8002f38:	4a1f      	ldr	r2, [pc, #124]	; (8002fb8 <sendDiamBack_impl+0x98>)
 8002f3a:	f107 0308 	add.w	r3, r7, #8
 8002f3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f42:	6018      	str	r0, [r3, #0]
 8002f44:	3304      	adds	r3, #4
 8002f46:	8019      	strh	r1, [r3, #0]

	sprintf((char *)diameter, "%.2f", value);
 8002f48:	6838      	ldr	r0, [r7, #0]
 8002f4a:	f7fd fb05 	bl	8000558 <__aeabi_f2d>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	f107 0010 	add.w	r0, r7, #16
 8002f56:	4919      	ldr	r1, [pc, #100]	; (8002fbc <sendDiamBack_impl+0x9c>)
 8002f58:	f007 fd36 	bl	800a9c8 <siprintf>

	HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 8002f5c:	f107 031c 	add.w	r3, r7, #28
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fd f98d 	bl	8000280 <strlen>
 8002f66:	4603      	mov	r3, r0
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	f107 011c 	add.w	r1, r7, #28
 8002f6e:	230a      	movs	r3, #10
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f004 feb2 	bl	8007cda <HAL_UART_Transmit>
   	HAL_UART_Transmit(huart, diameter, strlen((char*)diameter), 10);
 8002f76:	f107 0310 	add.w	r3, r7, #16
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd f980 	bl	8000280 <strlen>
 8002f80:	4603      	mov	r3, r0
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	f107 0110 	add.w	r1, r7, #16
 8002f88:	230a      	movs	r3, #10
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f004 fea5 	bl	8007cda <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 8002f90:	f107 0308 	add.w	r3, r7, #8
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fd f973 	bl	8000280 <strlen>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	f107 0108 	add.w	r1, r7, #8
 8002fa2:	230a      	movs	r3, #10
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f004 fe98 	bl	8007cda <HAL_UART_Transmit>
}
 8002faa:	bf00      	nop
 8002fac:	3728      	adds	r7, #40	; 0x28
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	0800d754 	.word	0x0800d754
 8002fb8:	0800d74c 	.word	0x0800d74c
 8002fbc:	0800d738 	.word	0x0800d738

08002fc0 <sendState_impl>:

void sendState_impl(UART_HandleTypeDef *huart, State state) {
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	70fb      	strb	r3, [r7, #3]
    uint8_t tag[] = "STATE ";
 8002fcc:	4a22      	ldr	r2, [pc, #136]	; (8003058 <sendState_impl+0x98>)
 8002fce:	f107 0318 	add.w	r3, r7, #24
 8002fd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fd6:	6018      	str	r0, [r3, #0]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	8019      	strh	r1, [r3, #0]
 8002fdc:	3302      	adds	r3, #2
 8002fde:	0c0a      	lsrs	r2, r1, #16
 8002fe0:	701a      	strb	r2, [r3, #0]
    uint8_t stateStr[10];
    uint8_t endTag[] = "\r\n";
 8002fe2:	4a1e      	ldr	r2, [pc, #120]	; (800305c <sendState_impl+0x9c>)
 8002fe4:	f107 0308 	add.w	r3, r7, #8
 8002fe8:	6812      	ldr	r2, [r2, #0]
 8002fea:	4611      	mov	r1, r2
 8002fec:	8019      	strh	r1, [r3, #0]
 8002fee:	3302      	adds	r3, #2
 8002ff0:	0c12      	lsrs	r2, r2, #16
 8002ff2:	701a      	strb	r2, [r3, #0]

    sprintf((char *)stateStr, "%d", state);
 8002ff4:	78fa      	ldrb	r2, [r7, #3]
 8002ff6:	f107 030c 	add.w	r3, r7, #12
 8002ffa:	4919      	ldr	r1, [pc, #100]	; (8003060 <sendState_impl+0xa0>)
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f007 fce3 	bl	800a9c8 <siprintf>

    HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 8003002:	f107 0318 	add.w	r3, r7, #24
 8003006:	4618      	mov	r0, r3
 8003008:	f7fd f93a 	bl	8000280 <strlen>
 800300c:	4603      	mov	r3, r0
 800300e:	b29a      	uxth	r2, r3
 8003010:	f107 0118 	add.w	r1, r7, #24
 8003014:	230a      	movs	r3, #10
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f004 fe5f 	bl	8007cda <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, stateStr, strlen((char*)stateStr), 10);
 800301c:	f107 030c 	add.w	r3, r7, #12
 8003020:	4618      	mov	r0, r3
 8003022:	f7fd f92d 	bl	8000280 <strlen>
 8003026:	4603      	mov	r3, r0
 8003028:	b29a      	uxth	r2, r3
 800302a:	f107 010c 	add.w	r1, r7, #12
 800302e:	230a      	movs	r3, #10
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f004 fe52 	bl	8007cda <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 8003036:	f107 0308 	add.w	r3, r7, #8
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd f920 	bl	8000280 <strlen>
 8003040:	4603      	mov	r3, r0
 8003042:	b29a      	uxth	r2, r3
 8003044:	f107 0108 	add.w	r1, r7, #8
 8003048:	230a      	movs	r3, #10
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f004 fe45 	bl	8007cda <HAL_UART_Transmit>
}
 8003050:	bf00      	nop
 8003052:	3720      	adds	r7, #32
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	0800d764 	.word	0x0800d764
 800305c:	0800d76c 	.word	0x0800d76c
 8003060:	0800d760 	.word	0x0800d760

08003064 <sendSpeed_impl>:
void sendSpeed_impl(UART_HandleTypeDef *huart, float speed){
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	ed87 0a00 	vstr	s0, [r7]
    uint8_t tag[] = "SPEED ";
 8003070:	4a24      	ldr	r2, [pc, #144]	; (8003104 <sendSpeed_impl+0xa0>)
 8003072:	f107 0318 	add.w	r3, r7, #24
 8003076:	e892 0003 	ldmia.w	r2, {r0, r1}
 800307a:	6018      	str	r0, [r3, #0]
 800307c:	3304      	adds	r3, #4
 800307e:	8019      	strh	r1, [r3, #0]
 8003080:	3302      	adds	r3, #2
 8003082:	0c0a      	lsrs	r2, r1, #16
 8003084:	701a      	strb	r2, [r3, #0]
    uint8_t value[10];
    uint8_t endTag[] = "\r\n";
 8003086:	4a20      	ldr	r2, [pc, #128]	; (8003108 <sendSpeed_impl+0xa4>)
 8003088:	f107 0308 	add.w	r3, r7, #8
 800308c:	6812      	ldr	r2, [r2, #0]
 800308e:	4611      	mov	r1, r2
 8003090:	8019      	strh	r1, [r3, #0]
 8003092:	3302      	adds	r3, #2
 8003094:	0c12      	lsrs	r2, r2, #16
 8003096:	701a      	strb	r2, [r3, #0]

    sprintf((char *)value, "%.2f", speed);
 8003098:	6838      	ldr	r0, [r7, #0]
 800309a:	f7fd fa5d 	bl	8000558 <__aeabi_f2d>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	f107 000c 	add.w	r0, r7, #12
 80030a6:	4919      	ldr	r1, [pc, #100]	; (800310c <sendSpeed_impl+0xa8>)
 80030a8:	f007 fc8e 	bl	800a9c8 <siprintf>

    HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 80030ac:	f107 0318 	add.w	r3, r7, #24
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fd f8e5 	bl	8000280 <strlen>
 80030b6:	4603      	mov	r3, r0
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	f107 0118 	add.w	r1, r7, #24
 80030be:	230a      	movs	r3, #10
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f004 fe0a 	bl	8007cda <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, value, strlen((char*)value), 10);
 80030c6:	f107 030c 	add.w	r3, r7, #12
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fd f8d8 	bl	8000280 <strlen>
 80030d0:	4603      	mov	r3, r0
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	f107 010c 	add.w	r1, r7, #12
 80030d8:	230a      	movs	r3, #10
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f004 fdfd 	bl	8007cda <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 80030e0:	f107 0308 	add.w	r3, r7, #8
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fd f8cb 	bl	8000280 <strlen>
 80030ea:	4603      	mov	r3, r0
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	f107 0108 	add.w	r1, r7, #8
 80030f2:	230a      	movs	r3, #10
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f004 fdf0 	bl	8007cda <HAL_UART_Transmit>

}
 80030fa:	bf00      	nop
 80030fc:	3720      	adds	r7, #32
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	0800d770 	.word	0x0800d770
 8003108:	0800d76c 	.word	0x0800d76c
 800310c:	0800d738 	.word	0x0800d738

08003110 <sendCPvalue_impl>:
void sendCPvalue_impl(UART_HandleTypeDef *huart, float cp){
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	ed87 0a00 	vstr	s0, [r7]
    uint8_t tag[] = "CP ";
 800311c:	4b1f      	ldr	r3, [pc, #124]	; (800319c <sendCPvalue_impl+0x8c>)
 800311e:	61fb      	str	r3, [r7, #28]
    uint8_t value[10];
    uint8_t endTag[] = "\r\n";
 8003120:	4a1f      	ldr	r2, [pc, #124]	; (80031a0 <sendCPvalue_impl+0x90>)
 8003122:	f107 030c 	add.w	r3, r7, #12
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	4611      	mov	r1, r2
 800312a:	8019      	strh	r1, [r3, #0]
 800312c:	3302      	adds	r3, #2
 800312e:	0c12      	lsrs	r2, r2, #16
 8003130:	701a      	strb	r2, [r3, #0]

    sprintf((char *)value, "%.2f", cp);
 8003132:	6838      	ldr	r0, [r7, #0]
 8003134:	f7fd fa10 	bl	8000558 <__aeabi_f2d>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	f107 0010 	add.w	r0, r7, #16
 8003140:	4918      	ldr	r1, [pc, #96]	; (80031a4 <sendCPvalue_impl+0x94>)
 8003142:	f007 fc41 	bl	800a9c8 <siprintf>

    HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 8003146:	f107 031c 	add.w	r3, r7, #28
 800314a:	4618      	mov	r0, r3
 800314c:	f7fd f898 	bl	8000280 <strlen>
 8003150:	4603      	mov	r3, r0
 8003152:	b29a      	uxth	r2, r3
 8003154:	f107 011c 	add.w	r1, r7, #28
 8003158:	230a      	movs	r3, #10
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f004 fdbd 	bl	8007cda <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, value, strlen((char*)value), 10);
 8003160:	f107 0310 	add.w	r3, r7, #16
 8003164:	4618      	mov	r0, r3
 8003166:	f7fd f88b 	bl	8000280 <strlen>
 800316a:	4603      	mov	r3, r0
 800316c:	b29a      	uxth	r2, r3
 800316e:	f107 0110 	add.w	r1, r7, #16
 8003172:	230a      	movs	r3, #10
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f004 fdb0 	bl	8007cda <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 800317a:	f107 030c 	add.w	r3, r7, #12
 800317e:	4618      	mov	r0, r3
 8003180:	f7fd f87e 	bl	8000280 <strlen>
 8003184:	4603      	mov	r3, r0
 8003186:	b29a      	uxth	r2, r3
 8003188:	f107 010c 	add.w	r1, r7, #12
 800318c:	230a      	movs	r3, #10
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f004 fda3 	bl	8007cda <HAL_UART_Transmit>
}
 8003194:	bf00      	nop
 8003196:	3720      	adds	r7, #32
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	00205043 	.word	0x00205043
 80031a0:	0800d76c 	.word	0x0800d76c
 80031a4:	0800d738 	.word	0x0800d738

080031a8 <sendCIvalue_impl>:
void sendCIvalue_impl(UART_HandleTypeDef *huart, float ci){
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b088      	sub	sp, #32
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	ed87 0a00 	vstr	s0, [r7]
    uint8_t tag[] = "CI ";
 80031b4:	4b1f      	ldr	r3, [pc, #124]	; (8003234 <sendCIvalue_impl+0x8c>)
 80031b6:	61fb      	str	r3, [r7, #28]
    uint8_t value[10];
    uint8_t endTag[] = "\r\n";
 80031b8:	4a1f      	ldr	r2, [pc, #124]	; (8003238 <sendCIvalue_impl+0x90>)
 80031ba:	f107 030c 	add.w	r3, r7, #12
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	4611      	mov	r1, r2
 80031c2:	8019      	strh	r1, [r3, #0]
 80031c4:	3302      	adds	r3, #2
 80031c6:	0c12      	lsrs	r2, r2, #16
 80031c8:	701a      	strb	r2, [r3, #0]

    sprintf((char *)value, "%.2f", ci);
 80031ca:	6838      	ldr	r0, [r7, #0]
 80031cc:	f7fd f9c4 	bl	8000558 <__aeabi_f2d>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	f107 0010 	add.w	r0, r7, #16
 80031d8:	4918      	ldr	r1, [pc, #96]	; (800323c <sendCIvalue_impl+0x94>)
 80031da:	f007 fbf5 	bl	800a9c8 <siprintf>

    HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 80031de:	f107 031c 	add.w	r3, r7, #28
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fd f84c 	bl	8000280 <strlen>
 80031e8:	4603      	mov	r3, r0
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	f107 011c 	add.w	r1, r7, #28
 80031f0:	230a      	movs	r3, #10
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f004 fd71 	bl	8007cda <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, value, strlen((char*)value), 10);
 80031f8:	f107 0310 	add.w	r3, r7, #16
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fd f83f 	bl	8000280 <strlen>
 8003202:	4603      	mov	r3, r0
 8003204:	b29a      	uxth	r2, r3
 8003206:	f107 0110 	add.w	r1, r7, #16
 800320a:	230a      	movs	r3, #10
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f004 fd64 	bl	8007cda <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 8003212:	f107 030c 	add.w	r3, r7, #12
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd f832 	bl	8000280 <strlen>
 800321c:	4603      	mov	r3, r0
 800321e:	b29a      	uxth	r2, r3
 8003220:	f107 010c 	add.w	r1, r7, #12
 8003224:	230a      	movs	r3, #10
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f004 fd57 	bl	8007cda <HAL_UART_Transmit>
}
 800322c:	bf00      	nop
 800322e:	3720      	adds	r7, #32
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	00204943 	.word	0x00204943
 8003238:	0800d76c 	.word	0x0800d76c
 800323c:	0800d738 	.word	0x0800d738

08003240 <sendCDvalue_impl>:
void sendCDvalue_impl(UART_HandleTypeDef *huart, float cd){
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	ed87 0a00 	vstr	s0, [r7]
    uint8_t tag[] = "CD ";
 800324c:	4b1f      	ldr	r3, [pc, #124]	; (80032cc <sendCDvalue_impl+0x8c>)
 800324e:	61fb      	str	r3, [r7, #28]
    uint8_t value[10];
    uint8_t endTag[] = "\r\n";
 8003250:	4a1f      	ldr	r2, [pc, #124]	; (80032d0 <sendCDvalue_impl+0x90>)
 8003252:	f107 030c 	add.w	r3, r7, #12
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	4611      	mov	r1, r2
 800325a:	8019      	strh	r1, [r3, #0]
 800325c:	3302      	adds	r3, #2
 800325e:	0c12      	lsrs	r2, r2, #16
 8003260:	701a      	strb	r2, [r3, #0]

    sprintf((char *)value, "%.2f", cd);
 8003262:	6838      	ldr	r0, [r7, #0]
 8003264:	f7fd f978 	bl	8000558 <__aeabi_f2d>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	f107 0010 	add.w	r0, r7, #16
 8003270:	4918      	ldr	r1, [pc, #96]	; (80032d4 <sendCDvalue_impl+0x94>)
 8003272:	f007 fba9 	bl	800a9c8 <siprintf>

    HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 8003276:	f107 031c 	add.w	r3, r7, #28
 800327a:	4618      	mov	r0, r3
 800327c:	f7fd f800 	bl	8000280 <strlen>
 8003280:	4603      	mov	r3, r0
 8003282:	b29a      	uxth	r2, r3
 8003284:	f107 011c 	add.w	r1, r7, #28
 8003288:	230a      	movs	r3, #10
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f004 fd25 	bl	8007cda <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, value, strlen((char*)value), 10);
 8003290:	f107 0310 	add.w	r3, r7, #16
 8003294:	4618      	mov	r0, r3
 8003296:	f7fc fff3 	bl	8000280 <strlen>
 800329a:	4603      	mov	r3, r0
 800329c:	b29a      	uxth	r2, r3
 800329e:	f107 0110 	add.w	r1, r7, #16
 80032a2:	230a      	movs	r3, #10
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f004 fd18 	bl	8007cda <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 80032aa:	f107 030c 	add.w	r3, r7, #12
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fc ffe6 	bl	8000280 <strlen>
 80032b4:	4603      	mov	r3, r0
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	f107 010c 	add.w	r1, r7, #12
 80032bc:	230a      	movs	r3, #10
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f004 fd0b 	bl	8007cda <HAL_UART_Transmit>
}
 80032c4:	bf00      	nop
 80032c6:	3720      	adds	r7, #32
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	00204443 	.word	0x00204443
 80032d0:	0800d76c 	.word	0x0800d76c
 80032d4:	0800d738 	.word	0x0800d738

080032d8 <createPcSendHandler>:
PcSendHandler createPcSendHandler(uint32_t timeout) {
 80032d8:	b4b0      	push	{r4, r5, r7}
 80032da:	b08b      	sub	sp, #44	; 0x2c
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
	PcSendHandler handler;
    handler.interface.sendDiamExt	= sendDiamExt_impl;
 80032e2:	4b0f      	ldr	r3, [pc, #60]	; (8003320 <createPcSendHandler+0x48>)
 80032e4:	60bb      	str	r3, [r7, #8]
    handler.interface.sendDiamBack	= sendDiamBack_impl;
 80032e6:	4b0f      	ldr	r3, [pc, #60]	; (8003324 <createPcSendHandler+0x4c>)
 80032e8:	60fb      	str	r3, [r7, #12]
    handler.interface.sendState		= sendState_impl;
 80032ea:	4b0f      	ldr	r3, [pc, #60]	; (8003328 <createPcSendHandler+0x50>)
 80032ec:	613b      	str	r3, [r7, #16]
    handler.interface.sendSpeed		= sendSpeed_impl;
 80032ee:	4b0f      	ldr	r3, [pc, #60]	; (800332c <createPcSendHandler+0x54>)
 80032f0:	617b      	str	r3, [r7, #20]
    handler.interface.sendCPvalue	= sendCPvalue_impl;
 80032f2:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <createPcSendHandler+0x58>)
 80032f4:	61bb      	str	r3, [r7, #24]
    handler.interface.sendCIvalue	= sendCIvalue_impl;
 80032f6:	4b0f      	ldr	r3, [pc, #60]	; (8003334 <createPcSendHandler+0x5c>)
 80032f8:	61fb      	str	r3, [r7, #28]
    handler.interface.sendCDvalue	= sendCDvalue_impl;
 80032fa:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <createPcSendHandler+0x60>)
 80032fc:	623b      	str	r3, [r7, #32]

    handler.interface.timeout = timeout;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
    return handler;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	461d      	mov	r5, r3
 8003306:	f107 0408 	add.w	r4, r7, #8
 800330a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800330c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800330e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003312:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	372c      	adds	r7, #44	; 0x2c
 800331a:	46bd      	mov	sp, r7
 800331c:	bcb0      	pop	{r4, r5, r7}
 800331e:	4770      	bx	lr
 8003320:	08002e81 	.word	0x08002e81
 8003324:	08002f21 	.word	0x08002f21
 8003328:	08002fc1 	.word	0x08002fc1
 800332c:	08003065 	.word	0x08003065
 8003330:	08003111 	.word	0x08003111
 8003334:	080031a9 	.word	0x080031a9
 8003338:	08003241 	.word	0x08003241

0800333c <createSensorReceiveHandler>:

// Konstruktor
SensorReceiveHandler createSensorReceiveHandler(Sensor* sensorExtruder,
												Sensor* sensorBack,
												Hmi* hmi)
{
 800333c:	b590      	push	{r4, r7, lr}
 800333e:	b089      	sub	sp, #36	; 0x24
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	603b      	str	r3, [r7, #0]
	SensorReceiveHandler handler;
    handler.sensorExtruder = sensorExtruder;
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	613b      	str	r3, [r7, #16]
    handler.sensorBack = sensorBack;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	617b      	str	r3, [r7, #20]
    handler.hmi = hmi;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	61bb      	str	r3, [r7, #24]

    // Zuweisung der globalen Variable
    gHandler = handler;
 8003356:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <createSensorReceiveHandler+0x48>)
 8003358:	461c      	mov	r4, r3
 800335a:	f107 0310 	add.w	r3, r7, #16
 800335e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003360:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    handler.uartProcessor = createUartProcessor(sensor_interface_dictionary);
 8003364:	4808      	ldr	r0, [pc, #32]	; (8003388 <createSensorReceiveHandler+0x4c>)
 8003366:	f000 f9a9 	bl	80036bc <createUartProcessor>
 800336a:	61f8      	str	r0, [r7, #28]
    return handler;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	461c      	mov	r4, r3
 8003370:	f107 0310 	add.w	r3, r7, #16
 8003374:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003376:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	3724      	adds	r7, #36	; 0x24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd90      	pop	{r4, r7, pc}
 8003382:	bf00      	nop
 8003384:	20000368 	.word	0x20000368
 8003388:	2000005c 	.word	0x2000005c

0800338c <handleDiamRecieved>:

// Methoden
void handleDiamRecieved(uint8_t uartNr, const char* value){
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	6039      	str	r1, [r7, #0]
 8003396:	71fb      	strb	r3, [r7, #7]
	uint8_t ext = gHandler.sensorExtruder->getUartPort(gHandler.sensorExtruder);
 8003398:	4b2a      	ldr	r3, [pc, #168]	; (8003444 <handleDiamRecieved+0xb8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	4a29      	ldr	r2, [pc, #164]	; (8003444 <handleDiamRecieved+0xb8>)
 80033a0:	6812      	ldr	r2, [r2, #0]
 80033a2:	4610      	mov	r0, r2
 80033a4:	4798      	blx	r3
 80033a6:	4603      	mov	r3, r0
 80033a8:	77fb      	strb	r3, [r7, #31]
	uint8_t back = gHandler.sensorBack->getUartPort(gHandler.sensorBack);
 80033aa:	4b26      	ldr	r3, [pc, #152]	; (8003444 <handleDiamRecieved+0xb8>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	4a24      	ldr	r2, [pc, #144]	; (8003444 <handleDiamRecieved+0xb8>)
 80033b2:	6852      	ldr	r2, [r2, #4]
 80033b4:	4610      	mov	r0, r2
 80033b6:	4798      	blx	r3
 80033b8:	4603      	mov	r3, r0
 80033ba:	77bb      	strb	r3, [r7, #30]
	if(ext == uartNr){
 80033bc:	7ffa      	ldrb	r2, [r7, #31]
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d10e      	bne.n	80033e2 <handleDiamRecieved+0x56>
		float diam = getFloatFromMessage(value);
 80033c4:	6838      	ldr	r0, [r7, #0]
 80033c6:	f000 f83f 	bl	8003448 <getFloatFromMessage>
 80033ca:	ed87 0a05 	vstr	s0, [r7, #20]
		gHandler.sensorExtruder->setDiameter(gHandler.sensorExtruder,diam);
 80033ce:	4b1d      	ldr	r3, [pc, #116]	; (8003444 <handleDiamRecieved+0xb8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	4a1b      	ldr	r2, [pc, #108]	; (8003444 <handleDiamRecieved+0xb8>)
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	ed97 0a05 	vldr	s0, [r7, #20]
 80033dc:	4610      	mov	r0, r2
 80033de:	4798      	blx	r3
 80033e0:	e011      	b.n	8003406 <handleDiamRecieved+0x7a>
	}
	else if(back == uartNr){
 80033e2:	7fba      	ldrb	r2, [r7, #30]
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d10d      	bne.n	8003406 <handleDiamRecieved+0x7a>
		float diam = getFloatFromMessage(value);
 80033ea:	6838      	ldr	r0, [r7, #0]
 80033ec:	f000 f82c 	bl	8003448 <getFloatFromMessage>
 80033f0:	ed87 0a06 	vstr	s0, [r7, #24]
		gHandler.sensorBack->setDiameter(gHandler.sensorBack,diam);
 80033f4:	4b13      	ldr	r3, [pc, #76]	; (8003444 <handleDiamRecieved+0xb8>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	4a12      	ldr	r2, [pc, #72]	; (8003444 <handleDiamRecieved+0xb8>)
 80033fc:	6852      	ldr	r2, [r2, #4]
 80033fe:	ed97 0a06 	vldr	s0, [r7, #24]
 8003402:	4610      	mov	r0, r2
 8003404:	4798      	blx	r3
	}
	float extruder  = gHandler.sensorExtruder->getDiameter(gHandler.sensorExtruder);
 8003406:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <handleDiamRecieved+0xb8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	4a0d      	ldr	r2, [pc, #52]	; (8003444 <handleDiamRecieved+0xb8>)
 800340e:	6812      	ldr	r2, [r2, #0]
 8003410:	4610      	mov	r0, r2
 8003412:	4798      	blx	r3
 8003414:	ed87 0a04 	vstr	s0, [r7, #16]
	float backValue = gHandler.sensorBack->getDiameter(gHandler.sensorBack);
 8003418:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <handleDiamRecieved+0xb8>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	4a09      	ldr	r2, [pc, #36]	; (8003444 <handleDiamRecieved+0xb8>)
 8003420:	6852      	ldr	r2, [r2, #4]
 8003422:	4610      	mov	r0, r2
 8003424:	4798      	blx	r3
 8003426:	ed87 0a03 	vstr	s0, [r7, #12]
	HMI_updateDisplaySensor(gHandler.hmi, extruder,backValue);
 800342a:	4b06      	ldr	r3, [pc, #24]	; (8003444 <handleDiamRecieved+0xb8>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	edd7 0a03 	vldr	s1, [r7, #12]
 8003432:	ed97 0a04 	vldr	s0, [r7, #16]
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff f9d8 	bl	80027ec <HMI_updateDisplaySensor>
}
 800343c:	bf00      	nop
 800343e:	3720      	adds	r7, #32
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	20000368 	.word	0x20000368

08003448 <getFloatFromMessage>:
float getFloatFromMessage(const char* value) {
 8003448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800344c:	b089      	sub	sp, #36	; 0x24
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
    int length = strlen(value);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7fc ff14 	bl	8000280 <strlen>
 8003458:	4603      	mov	r3, r0
 800345a:	613b      	str	r3, [r7, #16]
    int startIndex = -1;  // Index des ersten Leerzeichens
 800345c:	f04f 33ff 	mov.w	r3, #4294967295
 8003460:	61fb      	str	r3, [r7, #28]
    int endIndex = -1;    // Index des zweiten Leerzeichens
 8003462:	f04f 33ff 	mov.w	r3, #4294967295
 8003466:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < length; i++) {
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	e019      	b.n	80034a2 <getFloatFromMessage+0x5a>
        if (value[i] == ' ' || value[i] == '\r') {
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	4413      	add	r3, r2
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b20      	cmp	r3, #32
 8003478:	d005      	beq.n	8003486 <getFloatFromMessage+0x3e>
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	4413      	add	r3, r2
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b0d      	cmp	r3, #13
 8003484:	d10a      	bne.n	800349c <getFloatFromMessage+0x54>
            if (startIndex == -1) {
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348c:	d103      	bne.n	8003496 <getFloatFromMessage+0x4e>
                startIndex = i + 1;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	3301      	adds	r3, #1
 8003492:	61fb      	str	r3, [r7, #28]
 8003494:	e002      	b.n	800349c <getFloatFromMessage+0x54>
            } else {
                endIndex = i;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	61bb      	str	r3, [r7, #24]
                break;
 800349a:	e006      	b.n	80034aa <getFloatFromMessage+0x62>
    for (int i = 0; i < length; i++) {
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	3301      	adds	r3, #1
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	dbe1      	blt.n	800346e <getFloatFromMessage+0x26>
            }
        }
    }
    if (startIndex != -1 && endIndex != -1 && startIndex < endIndex) {
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b0:	d04a      	beq.n	8003548 <getFloatFromMessage+0x100>
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b8:	d046      	beq.n	8003548 <getFloatFromMessage+0x100>
 80034ba:	69fa      	ldr	r2, [r7, #28]
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	429a      	cmp	r2, r3
 80034c0:	da42      	bge.n	8003548 <getFloatFromMessage+0x100>
 80034c2:	466b      	mov	r3, sp
 80034c4:	461e      	mov	r6, r3
        char floatStr[endIndex - startIndex + 1];
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	1c59      	adds	r1, r3, #1
 80034ce:	1e4b      	subs	r3, r1, #1
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	460a      	mov	r2, r1
 80034d4:	2300      	movs	r3, #0
 80034d6:	4690      	mov	r8, r2
 80034d8:	4699      	mov	r9, r3
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	f04f 0300 	mov.w	r3, #0
 80034e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034ee:	460a      	mov	r2, r1
 80034f0:	2300      	movs	r3, #0
 80034f2:	4614      	mov	r4, r2
 80034f4:	461d      	mov	r5, r3
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	f04f 0300 	mov.w	r3, #0
 80034fe:	00eb      	lsls	r3, r5, #3
 8003500:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003504:	00e2      	lsls	r2, r4, #3
 8003506:	460b      	mov	r3, r1
 8003508:	3307      	adds	r3, #7
 800350a:	08db      	lsrs	r3, r3, #3
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	ebad 0d03 	sub.w	sp, sp, r3
 8003512:	466b      	mov	r3, sp
 8003514:	3300      	adds	r3, #0
 8003516:	60bb      	str	r3, [r7, #8]
        strncpy(floatStr, value + startIndex, endIndex - startIndex);
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	18d1      	adds	r1, r2, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	461a      	mov	r2, r3
 8003526:	68b8      	ldr	r0, [r7, #8]
 8003528:	f007 facb 	bl	800aac2 <strncpy>
        floatStr[endIndex - startIndex] = '\0';
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	2100      	movs	r1, #0
 8003536:	54d1      	strb	r1, [r2, r3]
        return strtof(floatStr, NULL);
 8003538:	2100      	movs	r1, #0
 800353a:	68b8      	ldr	r0, [r7, #8]
 800353c:	f006 fa0e 	bl	800995c <strtof>
 8003540:	eef0 7a40 	vmov.f32	s15, s0
 8003544:	46b5      	mov	sp, r6
 8003546:	e001      	b.n	800354c <getFloatFromMessage+0x104>
    }
    return 0.00;
 8003548:	eddf 7a03 	vldr	s15, [pc, #12]	; 8003558 <getFloatFromMessage+0x110>
}
 800354c:	eeb0 0a67 	vmov.f32	s0, s15
 8003550:	3724      	adds	r7, #36	; 0x24
 8003552:	46bd      	mov	sp, r7
 8003554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003558:	00000000 	.word	0x00000000

0800355c <processSensorInterfaceMessage>:


void processSensorInterfaceMessage(uint8_t uartNr,SensorReceiveHandler* handler,uint8_t* receivedData, uint8_t receivedDataIndex){
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	607a      	str	r2, [r7, #4]
 8003566:	461a      	mov	r2, r3
 8003568:	4603      	mov	r3, r0
 800356a:	73fb      	strb	r3, [r7, #15]
 800356c:	4613      	mov	r3, r2
 800356e:	73bb      	strb	r3, [r7, #14]
	processCommand(uartNr, &(handler->uartProcessor), receivedData, receivedDataIndex);
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f103 010c 	add.w	r1, r3, #12
 8003576:	7bbb      	ldrb	r3, [r7, #14]
 8003578:	7bf8      	ldrb	r0, [r7, #15]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	f000 f8dc 	bl	8003738 <processCommand>
}
 8003580:	bf00      	nop
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <getReceivedData>:


#include <Kommunikation/uart_data.h>

// Getter-Methoden
const uint8_t* getReceivedData(const UartData* uartData) {
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
    return uartData->receivedData;
 8003590:	687b      	ldr	r3, [r7, #4]
}
 8003592:	4618      	mov	r0, r3
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <getDataIndex>:

int getDataIndex(const UartData* uartData) {
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
    return uartData->dataIndex;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <getMessageComplete>:

int getMessageComplete(const UartData* uartData) {
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
    return uartData->messageComplete;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <setReceivedData>:

// Setter-Methoden
void setReceivedData(UartData* uartData, const uint8_t* receivedData) {
 80035ce:	b480      	push	{r7}
 80035d0:	b085      	sub	sp, #20
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
 80035d6:	6039      	str	r1, [r7, #0]
    // Kopiere die Daten
    for (int i = 0; i < 64; i++) {
 80035d8:	2300      	movs	r3, #0
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	e00b      	b.n	80035f6 <setReceivedData+0x28>
        uartData->receivedData[i] = receivedData[i];
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	4413      	add	r3, r2
 80035e4:	7819      	ldrb	r1, [r3, #0]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4413      	add	r3, r2
 80035ec:	460a      	mov	r2, r1
 80035ee:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 64; i++) {
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	3301      	adds	r3, #1
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2b3f      	cmp	r3, #63	; 0x3f
 80035fa:	ddf0      	ble.n	80035de <setReceivedData+0x10>
    }
}
 80035fc:	bf00      	nop
 80035fe:	bf00      	nop
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <setDataIndex>:

void setDataIndex(UartData* uartData, int dataIndex) {
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	6039      	str	r1, [r7, #0]
    uartData->dataIndex = dataIndex;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	641a      	str	r2, [r3, #64]	; 0x40
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <setMessageComplete>:

void setMessageComplete(UartData* uartData, int messageComplete) {
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
 800362e:	6039      	str	r1, [r7, #0]
    uartData->messageComplete = messageComplete;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
	...

08003644 <createUartDataObject>:

// Konstruktor
UartDataObject createUartDataObject() {
 8003644:	b580      	push	{r7, lr}
 8003646:	b09c      	sub	sp, #112	; 0x70
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
    UartDataObject uartDataObject;
    uartDataObject.getReceivedData = &getReceivedData;
 800364c:	4b15      	ldr	r3, [pc, #84]	; (80036a4 <createUartDataObject+0x60>)
 800364e:	657b      	str	r3, [r7, #84]	; 0x54
    uartDataObject.getDataIndex = &getDataIndex;
 8003650:	4b15      	ldr	r3, [pc, #84]	; (80036a8 <createUartDataObject+0x64>)
 8003652:	65bb      	str	r3, [r7, #88]	; 0x58
    uartDataObject.getMessageComplete = &getMessageComplete;
 8003654:	4b15      	ldr	r3, [pc, #84]	; (80036ac <createUartDataObject+0x68>)
 8003656:	65fb      	str	r3, [r7, #92]	; 0x5c
    uartDataObject.setReceivedData = &setReceivedData;
 8003658:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <createUartDataObject+0x6c>)
 800365a:	663b      	str	r3, [r7, #96]	; 0x60
    uartDataObject.setDataIndex = &setDataIndex;
 800365c:	4b15      	ldr	r3, [pc, #84]	; (80036b4 <createUartDataObject+0x70>)
 800365e:	667b      	str	r3, [r7, #100]	; 0x64
    uartDataObject.setMessageComplete = &setMessageComplete;
 8003660:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <createUartDataObject+0x74>)
 8003662:	66bb      	str	r3, [r7, #104]	; 0x68

    // Initialisiere die Daten
    for (int i = 0; i < 64; i++) {
 8003664:	2300      	movs	r3, #0
 8003666:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003668:	e008      	b.n	800367c <createUartDataObject+0x38>
        uartDataObject.data.receivedData[i] = 0;
 800366a:	f107 020c 	add.w	r2, r7, #12
 800366e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003670:	4413      	add	r3, r2
 8003672:	2200      	movs	r2, #0
 8003674:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 64; i++) {
 8003676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003678:	3301      	adds	r3, #1
 800367a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800367c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800367e:	2b3f      	cmp	r3, #63	; 0x3f
 8003680:	ddf3      	ble.n	800366a <createUartDataObject+0x26>
    }
    uartDataObject.data.dataIndex = 0;
 8003682:	2300      	movs	r3, #0
 8003684:	64fb      	str	r3, [r7, #76]	; 0x4c
    uartDataObject.data.messageComplete = 0;
 8003686:	2300      	movs	r3, #0
 8003688:	653b      	str	r3, [r7, #80]	; 0x50

    return uartDataObject;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4618      	mov	r0, r3
 800368e:	f107 030c 	add.w	r3, r7, #12
 8003692:	2260      	movs	r2, #96	; 0x60
 8003694:	4619      	mov	r1, r3
 8003696:	f007 fa9e 	bl	800abd6 <memcpy>
}
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	3770      	adds	r7, #112	; 0x70
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	08003589 	.word	0x08003589
 80036a8:	0800359f 	.word	0x0800359f
 80036ac:	080035b7 	.word	0x080035b7
 80036b0:	080035cf 	.word	0x080035cf
 80036b4:	0800360b 	.word	0x0800360b
 80036b8:	08003627 	.word	0x08003627

080036bc <createUartProcessor>:
#include <string.h>



// Funktion zur Initialisierung des UART-Prozessors
UartProcessor createUartProcessor(CommandEntry* dictionary) {
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
    UartProcessor uartProcessor;
    uartProcessor.commandDictionary = dictionary;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	60fb      	str	r3, [r7, #12]
    return uartProcessor;
 80036c8:	68fb      	ldr	r3, [r7, #12]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <strncasecmp>:

// Case-insensitive String-Vergleich
int strnicmp(const char *s1, const char *s2, size_t n) {
 80036d6:	b590      	push	{r4, r7, lr}
 80036d8:	b085      	sub	sp, #20
 80036da:	af00      	add	r7, sp, #0
 80036dc:	60f8      	str	r0, [r7, #12]
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	607a      	str	r2, [r7, #4]
    while (*s1 && *s2 && n > 0) {
 80036e2:	e019      	b.n	8003718 <strncasecmp+0x42>
        if (tolower(*s1) != tolower(*s2))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f006 fa2b 	bl	8009b44 <tolower>
 80036ee:	4604      	mov	r4, r0
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f006 fa25 	bl	8009b44 <tolower>
 80036fa:	4603      	mov	r3, r0
 80036fc:	429c      	cmp	r4, r3
 80036fe:	d002      	beq.n	8003706 <strncasecmp+0x30>
            return -1;
 8003700:	f04f 33ff 	mov.w	r3, #4294967295
 8003704:	e014      	b.n	8003730 <strncasecmp+0x5a>
        s1++;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	3301      	adds	r3, #1
 800370a:	60fb      	str	r3, [r7, #12]
        s2++;
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	3301      	adds	r3, #1
 8003710:	60bb      	str	r3, [r7, #8]
        n--;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3b01      	subs	r3, #1
 8003716:	607b      	str	r3, [r7, #4]
    while (*s1 && *s2 && n > 0) {
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d006      	beq.n	800372e <strncasecmp+0x58>
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <strncasecmp+0x58>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1da      	bne.n	80036e4 <strncasecmp+0xe>
    }
    return 0;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	bd90      	pop	{r4, r7, pc}

08003738 <processCommand>:

void processCommand(uint8_t uartNr, UartProcessor* uartProcessor,uint8_t* receivedData,uint8_t receivedDataIndex) {
 8003738:	b590      	push	{r4, r7, lr}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	607a      	str	r2, [r7, #4]
 8003742:	461a      	mov	r2, r3
 8003744:	4603      	mov	r3, r0
 8003746:	73fb      	strb	r3, [r7, #15]
 8003748:	4613      	mov	r3, r2
 800374a:	73bb      	strb	r3, [r7, #14]
    for (int i = 0; uartProcessor->commandDictionary[i].command != NULL; ++i) {
 800374c:	2300      	movs	r3, #0
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	e025      	b.n	800379e <processCommand+0x66>
    	if (strnicmp((char*)receivedData, uartProcessor->commandDictionary[i].command, strlen(uartProcessor->commandDictionary[i].command)) == 0) {
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	4413      	add	r3, r2
 800375c:	681c      	ldr	r4, [r3, #0]
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	4413      	add	r3, r2
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f7fc fd88 	bl	8000280 <strlen>
 8003770:	4603      	mov	r3, r0
 8003772:	461a      	mov	r2, r3
 8003774:	4621      	mov	r1, r4
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff ffad 	bl	80036d6 <strncasecmp>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10a      	bne.n	8003798 <processCommand+0x60>
            // Rufe den entsprechenden Handler auf
    		uartProcessor->commandDictionary[i].functionPointer(uartNr, (char*)receivedData);
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	4413      	add	r3, r2
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	7bfa      	ldrb	r2, [r7, #15]
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	4610      	mov	r0, r2
 8003794:	4798      	blx	r3
            return;
 8003796:	e00a      	b.n	80037ae <processCommand+0x76>
    for (int i = 0; uartProcessor->commandDictionary[i].command != NULL; ++i) {
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	3301      	adds	r3, #1
 800379c:	617b      	str	r3, [r7, #20]
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	4413      	add	r3, r2
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1d1      	bne.n	8003752 <processCommand+0x1a>
        }
    }
}
 80037ae:	371c      	adds	r7, #28
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd90      	pop	{r4, r7, pc}

080037b4 <changeState>:
 */

#include <Management/global_state_machine.h>

// Change the state of the State Machine
static void changeState(StateMachine *machine, State newState) {
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	70fb      	strb	r3, [r7, #3]
    switch (newState) {
 80037c0:	78fb      	ldrb	r3, [r7, #3]
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d01a      	beq.n	80037fc <changeState+0x48>
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	dc26      	bgt.n	8003818 <changeState+0x64>
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <changeState+0x20>
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d00e      	beq.n	80037f0 <changeState+0x3c>
        	machine->info.motor->setSpeed(machine->info.motor, 25);
        	HAL_TIM_Base_Start_IT(machine->info.timer);
            break;
        default:
            // Handle unknown state
            break;
 80037d2:	e021      	b.n	8003818 <changeState+0x64>
            machine->info.motor->setSpeed(machine->info.motor, 0);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6852      	ldr	r2, [r2, #4]
 80037de:	2100      	movs	r1, #0
 80037e0:	4610      	mov	r0, r2
 80037e2:	4798      	blx	r3
            HAL_TIM_Base_Stop(machine->info.timer);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f003 f9ce 	bl	8006b8a <HAL_TIM_Base_Stop>
            break;
 80037ee:	e014      	b.n	800381a <changeState+0x66>
            HAL_TIM_Base_Stop(machine->info.timer);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f003 f9c8 	bl	8006b8a <HAL_TIM_Base_Stop>
            break;
 80037fa:	e00e      	b.n	800381a <changeState+0x66>
        	machine->info.motor->setSpeed(machine->info.motor, 25);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6852      	ldr	r2, [r2, #4]
 8003806:	2119      	movs	r1, #25
 8003808:	4610      	mov	r0, r2
 800380a:	4798      	blx	r3
        	HAL_TIM_Base_Start_IT(machine->info.timer);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	4618      	mov	r0, r3
 8003812:	f003 f9e1 	bl	8006bd8 <HAL_TIM_Base_Start_IT>
            break;
 8003816:	e000      	b.n	800381a <changeState+0x66>
            break;
 8003818:	bf00      	nop
    }
    machine->info.currentState = newState;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	78fa      	ldrb	r2, [r7, #3]
 800381e:	701a      	strb	r2, [r3, #0]
}
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <getState>:
// Get the current state of the State Machine
static State getState(const StateMachine *machine) {
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
    return machine->info.currentState;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	781b      	ldrb	r3, [r3, #0]
}
 8003834:	4618      	mov	r0, r3
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <setBlobDetected>:
void setBlobDetected(struct StateMachine *machine, int blobDetected){
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
	machine->info.blobDetected = blobDetected;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	609a      	str	r2, [r3, #8]
	if(blobDetected == 1){
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d102      	bne.n	800385c <setBlobDetected+0x1c>
		machine->info.currentState = STATE_IDLE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	701a      	strb	r2, [r3, #0]
	}
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <getBlobDetected>:
static int getBlobDetected(const struct StateMachine *machine){
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
	return machine->info.blobDetected;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
}
 8003874:	4618      	mov	r0, r3
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <initStateMachine>:



// Initialization function for the State Machine
StateMachine initStateMachine(Motor* motor, TIM_HandleTypeDef* timer) {
 8003880:	b4b0      	push	{r4, r5, r7}
 8003882:	b08d      	sub	sp, #52	; 0x34
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
    StateMachine machine;

    machine.info.motor = motor;
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	617b      	str	r3, [r7, #20]
    machine.info.timer = timer;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	61fb      	str	r3, [r7, #28]

    machine.changeState = changeState;
 8003894:	4b0d      	ldr	r3, [pc, #52]	; (80038cc <initStateMachine+0x4c>)
 8003896:	623b      	str	r3, [r7, #32]
    machine.getState = getState;
 8003898:	4b0d      	ldr	r3, [pc, #52]	; (80038d0 <initStateMachine+0x50>)
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
    machine.setBlobDetected = setBlobDetected;
 800389c:	4b0d      	ldr	r3, [pc, #52]	; (80038d4 <initStateMachine+0x54>)
 800389e:	62fb      	str	r3, [r7, #44]	; 0x2c
    machine.getBlobDetected = getBlobDetected;
 80038a0:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <initStateMachine+0x58>)
 80038a2:	62bb      	str	r3, [r7, #40]	; 0x28

    // Set initial state and initialize motor
    machine.info.currentState = STATE_IDLE;
 80038a4:	2300      	movs	r3, #0
 80038a6:	743b      	strb	r3, [r7, #16]
    machine.info.blobDetected = 0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	61bb      	str	r3, [r7, #24]


    return machine;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	461d      	mov	r5, r3
 80038b0:	f107 0410 	add.w	r4, r7, #16
 80038b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80038bc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	3734      	adds	r7, #52	; 0x34
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bcb0      	pop	{r4, r5, r7}
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	080037b5 	.word	0x080037b5
 80038d0:	08003829 	.word	0x08003829
 80038d4:	08003841 	.word	0x08003841
 80038d8:	08003869 	.word	0x08003869

080038dc <set_kp>:
 *  Created on: Jan 3, 2024
 *      Author: Daniel Alf
 */
#include "Regelung/pid_controller.h"

void set_kp(PIDController *pid, float kp) {
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	ed87 0a00 	vstr	s0, [r7]
    pid->data.kp = kp;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	601a      	str	r2, [r3, #0]
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <get_kp>:

float get_kp(const PIDController *pid) {
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
    return pid->data.kp;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	ee07 3a90 	vmov	s15, r3
}
 800390a:	eeb0 0a67 	vmov.f32	s0, s15
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <set_ki>:

void set_ki(PIDController *pid, float ki) {
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	ed87 0a00 	vstr	s0, [r7]
	pid->data.ki = ki;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	605a      	str	r2, [r3, #4]
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <get_ki>:

float get_ki(const PIDController *pid) {
 8003936:	b480      	push	{r7}
 8003938:	b083      	sub	sp, #12
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
    return pid->data.ki;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	ee07 3a90 	vmov	s15, r3
}
 8003946:	eeb0 0a67 	vmov.f32	s0, s15
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <set_kd>:

void set_kd(PIDController *pid, float kd) {
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	ed87 0a00 	vstr	s0, [r7]
	pid->data.kd = kd;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	609a      	str	r2, [r3, #8]
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <get_kd>:

float get_kd(const PIDController *pid) {
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
    return pid->data.kd;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	ee07 3a90 	vmov	s15, r3
}
 8003982:	eeb0 0a67 	vmov.f32	s0, s15
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <set_setPoint>:
void set_setPoint(PIDController *pid, float setPoint) {
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	ed87 0a00 	vstr	s0, [r7]
	pid->data.setpoint = setPoint;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	60da      	str	r2, [r3, #12]
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <get_setPoint>:

float get_setPoint(const PIDController *pid) {
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
    return pid->data.setpoint;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	ee07 3a90 	vmov	s15, r3
}
 80039be:	eeb0 0a67 	vmov.f32	s0, s15
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <pid_update>:
float pid_update(PIDController *pid, float current_value) {
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	ed87 0a00 	vstr	s0, [r7]
    // Berechne den Fehler
    float error = pid->data.setpoint - current_value;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	ed93 7a03 	vldr	s14, [r3, #12]
 80039de:	edd7 7a00 	vldr	s15, [r7]
 80039e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039e6:	edc7 7a05 	vstr	s15, [r7, #20]

    // Berechne den Proportionalanteil
    float p_term = pid->data.kp * error;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	edd3 7a00 	vldr	s15, [r3]
 80039f0:	ed97 7a05 	vldr	s14, [r7, #20]
 80039f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f8:	edc7 7a04 	vstr	s15, [r7, #16]

    // Summe der Anteile für die Ausgabe
    float output = p_term;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	60fb      	str	r3, [r7, #12]

    return output;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	ee07 3a90 	vmov	s15, r3
}
 8003a06:	eeb0 0a67 	vmov.f32	s0, s15
 8003a0a:	371c      	adds	r7, #28
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <pid_init>:

PIDController pid_init(float kp, float ki, float kd, float setpoint) {
 8003a14:	b4b0      	push	{r4, r5, r7}
 8003a16:	b097      	sub	sp, #92	; 0x5c
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6178      	str	r0, [r7, #20]
 8003a1c:	ed87 0a04 	vstr	s0, [r7, #16]
 8003a20:	edc7 0a03 	vstr	s1, [r7, #12]
 8003a24:	ed87 1a02 	vstr	s2, [r7, #8]
 8003a28:	edc7 1a01 	vstr	s3, [r7, #4]
    PIDController pidController;
    pidController.data.kp = kp;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	61fb      	str	r3, [r7, #28]
    pidController.data.ki = ki;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	623b      	str	r3, [r7, #32]
    pidController.data.kd = kd;
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
    pidController.data.setpoint = 0.0;
 8003a38:	f04f 0300 	mov.w	r3, #0
 8003a3c:	62bb      	str	r3, [r7, #40]	; 0x28
    pidController.data.last_error = 0.0;
 8003a3e:	f04f 0300 	mov.w	r3, #0
 8003a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    pidController.data.integral = 0.0;
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	633b      	str	r3, [r7, #48]	; 0x30
    pidController.data.setpoint = setpoint;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	62bb      	str	r3, [r7, #40]	; 0x28

    //Initialisierung der getter FUnktionen
    pidController.get_kp = get_kp;
 8003a4e:	4b12      	ldr	r3, [pc, #72]	; (8003a98 <pid_init+0x84>)
 8003a50:	637b      	str	r3, [r7, #52]	; 0x34
    pidController.get_ki = get_ki;
 8003a52:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <pid_init+0x88>)
 8003a54:	63bb      	str	r3, [r7, #56]	; 0x38
    pidController.get_kd = get_kd;
 8003a56:	4b12      	ldr	r3, [pc, #72]	; (8003aa0 <pid_init+0x8c>)
 8003a58:	63fb      	str	r3, [r7, #60]	; 0x3c
    pidController.get_setPoint = get_setPoint;
 8003a5a:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <pid_init+0x90>)
 8003a5c:	643b      	str	r3, [r7, #64]	; 0x40

    //Initialisierung der setter Funktionen
    pidController.set_kp = set_kp;
 8003a5e:	4b12      	ldr	r3, [pc, #72]	; (8003aa8 <pid_init+0x94>)
 8003a60:	647b      	str	r3, [r7, #68]	; 0x44
    pidController.set_ki = set_ki;
 8003a62:	4b12      	ldr	r3, [pc, #72]	; (8003aac <pid_init+0x98>)
 8003a64:	64bb      	str	r3, [r7, #72]	; 0x48
    pidController.set_kd = set_kd;
 8003a66:	4b12      	ldr	r3, [pc, #72]	; (8003ab0 <pid_init+0x9c>)
 8003a68:	64fb      	str	r3, [r7, #76]	; 0x4c
    pidController.set_setPoint = set_setPoint;
 8003a6a:	4b12      	ldr	r3, [pc, #72]	; (8003ab4 <pid_init+0xa0>)
 8003a6c:	653b      	str	r3, [r7, #80]	; 0x50

    pidController.pid_update = pid_update;
 8003a6e:	4b12      	ldr	r3, [pc, #72]	; (8003ab8 <pid_init+0xa4>)
 8003a70:	657b      	str	r3, [r7, #84]	; 0x54

    return pidController;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	461d      	mov	r5, r3
 8003a76:	f107 041c 	add.w	r4, r7, #28
 8003a7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a86:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003a8a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8003a8e:	6978      	ldr	r0, [r7, #20]
 8003a90:	375c      	adds	r7, #92	; 0x5c
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bcb0      	pop	{r4, r5, r7}
 8003a96:	4770      	bx	lr
 8003a98:	080038fb 	.word	0x080038fb
 8003a9c:	08003937 	.word	0x08003937
 8003aa0:	08003973 	.word	0x08003973
 8003aa4:	080039af 	.word	0x080039af
 8003aa8:	080038dd 	.word	0x080038dd
 8003aac:	08003919 	.word	0x08003919
 8003ab0:	08003955 	.word	0x08003955
 8003ab4:	08003991 	.word	0x08003991
 8003ab8:	080039cd 	.word	0x080039cd

08003abc <getSpeed>:
 */

#include <SensorActuators/motor.h>
#include "stm32f4xx_hal.h"
// Implementierung der Getter-Methode für die Geschwindigkeit des Motors
int getSpeed(const Motor *motor) {
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
    return motor->info.speed;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <setSpeed>:

// Implementierung der Setter-Methode für die Geschwindigkeit des Motors
void setSpeed(Motor *motor, int speed) {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
	if(speed <= 0){
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	dc09      	bgt.n	8003af8 <setSpeed+0x24>
		HAL_TIM_PWM_Stop(motor->info.timer, 0);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2100      	movs	r1, #0
 8003aea:	4618      	mov	r0, r3
 8003aec:	f003 f9e0 	bl	8006eb0 <HAL_TIM_PWM_Stop>
	    motor->info.speed = 0;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
		return;
 8003af6:	e01e      	b.n	8003b36 <setSpeed+0x62>
	}

	if(speed > 100){
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2b64      	cmp	r3, #100	; 0x64
 8003afc:	dc1a      	bgt.n	8003b34 <setSpeed+0x60>
		return;
	}
    motor->info.speed = speed;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	601a      	str	r2, [r3, #0]
	  // Geschwindigkeit in Frequenz umrechnen
	int frequency = (speed * 3200) / 60;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8003b0a:	fb02 f303 	mul.w	r3, r2, r3
 8003b0e:	4a0b      	ldr	r2, [pc, #44]	; (8003b3c <setSpeed+0x68>)
 8003b10:	fb82 1203 	smull	r1, r2, r2, r3
 8003b14:	441a      	add	r2, r3
 8003b16:	1152      	asrs	r2, r2, #5
 8003b18:	17db      	asrs	r3, r3, #31
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	60fb      	str	r3, [r7, #12]

	      // PWM-Signal generieren
	generatePWM(motor,frequency);
 8003b1e:	68f9      	ldr	r1, [r7, #12]
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f80d 	bl	8003b40 <generatePWM>
	HAL_TIM_PWM_Start(motor->info.timer, 0);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f003 f90f 	bl	8006d50 <HAL_TIM_PWM_Start>
 8003b32:	e000      	b.n	8003b36 <setSpeed+0x62>
		return;
 8003b34:	bf00      	nop

}
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	88888889 	.word	0x88888889

08003b40 <generatePWM>:

void generatePWM(Motor *motor, int frequency) {
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b090      	sub	sp, #64	; 0x40
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
	  uint32_t period = (HAL_RCC_GetHCLKFreq() / ((motor->info.timer->Init.Prescaler + 1)* frequency)) - 1;
 8003b4a:	f002 f9f3 	bl	8005f34 <HAL_RCC_GetHCLKFreq>
 8003b4e:	4601      	mov	r1, r0
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	3301      	adds	r3, #1
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	fb02 f303 	mul.w	r3, r2, r3
 8003b5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b62:	3b01      	subs	r3, #1
 8003b64:	63fb      	str	r3, [r7, #60]	; 0x3c

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	605a      	str	r2, [r3, #4]
 8003b70:	609a      	str	r2, [r3, #8]
 8003b72:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b7e:	f107 0308 	add.w	r3, r7, #8
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	605a      	str	r2, [r3, #4]
 8003b88:	609a      	str	r2, [r3, #8]
 8003b8a:	60da      	str	r2, [r3, #12]
 8003b8c:	611a      	str	r2, [r3, #16]
 8003b8e:	615a      	str	r2, [r3, #20]
 8003b90:	619a      	str	r2, [r3, #24]

	  motor->info.timer->Init.Period = period; //26250-1
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b98:	60da      	str	r2, [r3, #12]
	  HAL_TIM_Base_Init(motor->info.timer);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f002 ffa4 	bl	8006aec <HAL_TIM_Base_Init>
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  HAL_TIM_ConfigClockSource(motor->info.timer, &sClockSourceConfig);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f003 fba9 	bl	800730c <HAL_TIM_ConfigClockSource>
	  HAL_TIM_PWM_Init(motor->info.timer);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f003 f86c 	bl	8006c9c <HAL_TIM_PWM_Init>
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	627b      	str	r3, [r7, #36]	; 0x24
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_TIMEx_MasterConfigSynchronization(motor->info.timer, &sMasterConfig);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f003 ff5e 	bl	8007a98 <HAL_TIMEx_MasterConfigSynchronization>
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bdc:	2360      	movs	r3, #96	; 0x60
 8003bde:	60bb      	str	r3, [r7, #8]
	  sConfigOC.Pulse = motor->info.timer->Init.Period / 2; //13125-1
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	085b      	lsrs	r3, r3, #1
 8003be8:	60fb      	str	r3, [r7, #12]
	  HAL_TIM_PWM_ConfigChannel(motor->info.timer, &sConfigOC, TIM_CHANNEL_1);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f107 0108 	add.w	r1, r7, #8
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f003 fac7 	bl	8007188 <HAL_TIM_PWM_ConfigChannel>
	  HAL_TIM_MspPostInit(motor->info.timer);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fece 	bl	80049a0 <HAL_TIM_MspPostInit>


}
 8003c04:	bf00      	nop
 8003c06:	3740      	adds	r7, #64	; 0x40
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <initMotor>:

// Implementierung des Konstruktors für den Motor
Motor initMotor(TIM_HandleTypeDef *timer) {
 8003c0c:	b490      	push	{r4, r7}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
    Motor newMotor;
    newMotor.info.speed = 0;
 8003c16:	2300      	movs	r3, #0
 8003c18:	60bb      	str	r3, [r7, #8]
    newMotor.info.timer = timer;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	60fb      	str	r3, [r7, #12]
    newMotor.getSpeed = &getSpeed;
 8003c1e:	4b08      	ldr	r3, [pc, #32]	; (8003c40 <initMotor+0x34>)
 8003c20:	613b      	str	r3, [r7, #16]
    newMotor.setSpeed = &setSpeed;
 8003c22:	4b08      	ldr	r3, [pc, #32]	; (8003c44 <initMotor+0x38>)
 8003c24:	617b      	str	r3, [r7, #20]
    return newMotor;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	461c      	mov	r4, r3
 8003c2a:	f107 0308 	add.w	r3, r7, #8
 8003c2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc90      	pop	{r4, r7}
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	08003abd 	.word	0x08003abd
 8003c44:	08003ad5 	.word	0x08003ad5

08003c48 <getDiameter>:
#include <stdlib.h>
#include <stdint.h>
#include <SensorActuators/sensor.h>

// Getter-Methoden
float getDiameter(const Sensor* sensor) {
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
    return sensor->info.diameter;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	ee07 3a90 	vmov	s15, r3
}
 8003c58:	eeb0 0a67 	vmov.f32	s0, s15
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <getUartPort>:
char getPosition(const Sensor* sensor) {
	return sensor->info.position;
}
uint8_t getUartPort(const Sensor* sensor) {
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
	return sensor->info.uartPort;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	795b      	ldrb	r3, [r3, #5]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <setDiameter>:

// Setter-Methoden
void setDiameter(Sensor* sensor, float diameter) {
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	ed87 0a00 	vstr	s0, [r7]
    sensor->info.diameter = diameter;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	601a      	str	r2, [r3, #0]
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <initSensor>:
}
void setUartPort(Sensor* sensor, uint8_t port){
	sensor->info.uartPort = port;
}
// Konstruktor
Sensor initSensor(float diameter, uint8_t port) {
 8003c9c:	b4b0      	push	{r4, r5, r7}
 8003c9e:	b08d      	sub	sp, #52	; 0x34
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	71fb      	strb	r3, [r7, #7]
    Sensor sensor;
    sensor.info.diameter = diameter;
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	613b      	str	r3, [r7, #16]
    sensor.info.uartPort = port;
 8003cb0:	79fb      	ldrb	r3, [r7, #7]
 8003cb2:	757b      	strb	r3, [r7, #21]

    // Initialisiere die Getter-Funktionen
    sensor.getDiameter = getDiameter;
 8003cb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ce0 <initSensor+0x44>)
 8003cb6:	61bb      	str	r3, [r7, #24]
    sensor.getUartPort = getUartPort;
 8003cb8:	4b0a      	ldr	r3, [pc, #40]	; (8003ce4 <initSensor+0x48>)
 8003cba:	623b      	str	r3, [r7, #32]

    // Initialisiere die Setter-Funktionen
    sensor.setDiameter = setDiameter;
 8003cbc:	4b0a      	ldr	r3, [pc, #40]	; (8003ce8 <initSensor+0x4c>)
 8003cbe:	627b      	str	r3, [r7, #36]	; 0x24

    return sensor;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	461d      	mov	r5, r3
 8003cc4:	f107 0410 	add.w	r4, r7, #16
 8003cc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ccc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003cd0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	3734      	adds	r7, #52	; 0x34
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bcb0      	pop	{r4, r5, r7}
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	08003c49 	.word	0x08003c49
 8003ce4:	08003c67 	.word	0x08003c67
 8003ce8:	08003c7f 	.word	0x08003c7f

08003cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003cec:	b5b0      	push	{r4, r5, r7, lr}
 8003cee:	b09e      	sub	sp, #120	; 0x78
 8003cf0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003cf2:	f001 f8e3 	bl	8004ebc <HAL_Init>

  /* USER CODE BEGIN Init */
  sensorExtruder = initSensor(1.57, 1);
 8003cf6:	4cb1      	ldr	r4, [pc, #708]	; (8003fbc <main+0x2d0>)
 8003cf8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8003fc0 <main+0x2d4>
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff ffca 	bl	8003c9c <initSensor>
 8003d08:	4625      	mov	r5, r4
 8003d0a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003d0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d12:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003d16:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  sensorBack 	 = initSensor(1.58, 6);
 8003d1a:	4caa      	ldr	r4, [pc, #680]	; (8003fc4 <main+0x2d8>)
 8003d1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003d20:	2106      	movs	r1, #6
 8003d22:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 8003fc8 <main+0x2dc>
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7ff ffb8 	bl	8003c9c <initSensor>
 8003d2c:	4625      	mov	r5, r4
 8003d2e:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003d32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d36:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003d3a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  motor 		 = initMotor(&htim1);
 8003d3e:	4ca3      	ldr	r4, [pc, #652]	; (8003fcc <main+0x2e0>)
 8003d40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003d44:	49a2      	ldr	r1, [pc, #648]	; (8003fd0 <main+0x2e4>)
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff ff60 	bl	8003c0c <initMotor>
 8003d4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003d50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  int updateFaultHMI = 1;
 8003d56:	2301      	movs	r3, #1
 8003d58:	667b      	str	r3, [r7, #100]	; 0x64
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d5a:	f000 f963 	bl	8004024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d5e:	f000 fba5 	bl	80044ac <MX_GPIO_Init>
  MX_SPI1_Init();
 8003d62:	f000 f9c9 	bl	80040f8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003d66:	f000 f9fd 	bl	8004164 <MX_SPI2_Init>
  MX_TIM1_Init();
 8003d6a:	f000 fa31 	bl	80041d0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8003d6e:	f000 fb1f 	bl	80043b0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003d72:	f000 fb47 	bl	8004404 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8003d76:	f000 fb6f 	bl	8004458 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8003d7a:	f000 facb 	bl	8004314 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init(&hspi1, LCD_CS_GPIO_Port, LCD_CS_Pin, LCD_DC_GPIO_Port, LCD_DC_Pin, LCD_RST_GPIO_Port, LCD_RST_Pin);
 8003d7e:	2380      	movs	r3, #128	; 0x80
 8003d80:	9302      	str	r3, [sp, #8]
 8003d82:	4b94      	ldr	r3, [pc, #592]	; (8003fd4 <main+0x2e8>)
 8003d84:	9301      	str	r3, [sp, #4]
 8003d86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	4b92      	ldr	r3, [pc, #584]	; (8003fd8 <main+0x2ec>)
 8003d8e:	2240      	movs	r2, #64	; 0x40
 8003d90:	4992      	ldr	r1, [pc, #584]	; (8003fdc <main+0x2f0>)
 8003d92:	4893      	ldr	r0, [pc, #588]	; (8003fe0 <main+0x2f4>)
 8003d94:	f7fd f9e8 	bl	8001168 <ILI9341_Init>
  ILI9341_setRotation(2);
 8003d98:	2002      	movs	r0, #2
 8003d9a:	f7fd fe71 	bl	8001a80 <ILI9341_setRotation>
  ILI9341_Fill(COLOR_NAVY);
 8003d9e:	200f      	movs	r0, #15
 8003da0:	f7fd fac2 	bl	8001328 <ILI9341_Fill>
  TSC2046_Begin(&hspi2, TS_CS_GPIO_Port, TS_CS_Pin);
 8003da4:	2220      	movs	r2, #32
 8003da6:	498d      	ldr	r1, [pc, #564]	; (8003fdc <main+0x2f0>)
 8003da8:	488e      	ldr	r0, [pc, #568]	; (8003fe4 <main+0x2f8>)
 8003daa:	f7fe f8b5 	bl	8001f18 <TSC2046_Begin>



  HAL_TIM_PWM_Start(&htim1, 0);
 8003dae:	2100      	movs	r1, #0
 8003db0:	4887      	ldr	r0, [pc, #540]	; (8003fd0 <main+0x2e4>)
 8003db2:	f002 ffcd 	bl	8006d50 <HAL_TIM_PWM_Start>
  stateMachine = initStateMachine(&motor,&htim3);
 8003db6:	4c8c      	ldr	r4, [pc, #560]	; (8003fe8 <main+0x2fc>)
 8003db8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003dbc:	4a8b      	ldr	r2, [pc, #556]	; (8003fec <main+0x300>)
 8003dbe:	4983      	ldr	r1, [pc, #524]	; (8003fcc <main+0x2e0>)
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff fd5d 	bl	8003880 <initStateMachine>
 8003dc6:	4625      	mov	r5, r4
 8003dc8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003dcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dd0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003dd4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  pidController = pid_init(1.0, 0.0,0.0, 1.75);
 8003dd8:	4c85      	ldr	r4, [pc, #532]	; (8003ff0 <main+0x304>)
 8003dda:	463b      	mov	r3, r7
 8003ddc:	eef7 1a0c 	vmov.f32	s3, #124	; 0x3fe00000  1.750
 8003de0:	ed9f 1a84 	vldr	s2, [pc, #528]	; 8003ff4 <main+0x308>
 8003de4:	eddf 0a83 	vldr	s1, [pc, #524]	; 8003ff4 <main+0x308>
 8003de8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff fe11 	bl	8003a14 <pid_init>
 8003df2:	4625      	mov	r5, r4
 8003df4:	463c      	mov	r4, r7
 8003df6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003df8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e02:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003e06:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  uartDataPc 		     = createUartDataObject();
 8003e0a:	4c7b      	ldr	r4, [pc, #492]	; (8003ff8 <main+0x30c>)
 8003e0c:	463b      	mov	r3, r7
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff fc18 	bl	8003644 <createUartDataObject>
 8003e14:	4620      	mov	r0, r4
 8003e16:	463b      	mov	r3, r7
 8003e18:	2260      	movs	r2, #96	; 0x60
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	f006 fedb 	bl	800abd6 <memcpy>
  uartDataSensorExtruder = createUartDataObject();
 8003e20:	4c76      	ldr	r4, [pc, #472]	; (8003ffc <main+0x310>)
 8003e22:	463b      	mov	r3, r7
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff fc0d 	bl	8003644 <createUartDataObject>
 8003e2a:	4620      	mov	r0, r4
 8003e2c:	463b      	mov	r3, r7
 8003e2e:	2260      	movs	r2, #96	; 0x60
 8003e30:	4619      	mov	r1, r3
 8003e32:	f006 fed0 	bl	800abd6 <memcpy>
  uartDataSensorBack	 = createUartDataObject();
 8003e36:	4c72      	ldr	r4, [pc, #456]	; (8004000 <main+0x314>)
 8003e38:	463b      	mov	r3, r7
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff fc02 	bl	8003644 <createUartDataObject>
 8003e40:	4620      	mov	r0, r4
 8003e42:	463b      	mov	r3, r7
 8003e44:	2260      	movs	r2, #96	; 0x60
 8003e46:	4619      	mov	r1, r3
 8003e48:	f006 fec5 	bl	800abd6 <memcpy>
  pcSender 		= createPcSendHandler(10);
 8003e4c:	4c6d      	ldr	r4, [pc, #436]	; (8004004 <main+0x318>)
 8003e4e:	463b      	mov	r3, r7
 8003e50:	210a      	movs	r1, #10
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff fa40 	bl	80032d8 <createPcSendHandler>
 8003e58:	4625      	mov	r5, r4
 8003e5a:	463c      	mov	r4, r7
 8003e5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003e64:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  pcReciever 	= createPcReceiveHandler(&stateMachine,&pidController, &motor, &pcSender, &huart2);
 8003e68:	4c67      	ldr	r4, [pc, #412]	; (8004008 <main+0x31c>)
 8003e6a:	4638      	mov	r0, r7
 8003e6c:	4b67      	ldr	r3, [pc, #412]	; (800400c <main+0x320>)
 8003e6e:	9301      	str	r3, [sp, #4]
 8003e70:	4b64      	ldr	r3, [pc, #400]	; (8004004 <main+0x318>)
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	4b55      	ldr	r3, [pc, #340]	; (8003fcc <main+0x2e0>)
 8003e76:	4a5e      	ldr	r2, [pc, #376]	; (8003ff0 <main+0x304>)
 8003e78:	495b      	ldr	r1, [pc, #364]	; (8003fe8 <main+0x2fc>)
 8003e7a:	f7fe fd71 	bl	8002960 <createPcReceiveHandler>
 8003e7e:	4625      	mov	r5, r4
 8003e80:	463c      	mov	r4, r7
 8003e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e8a:	e885 0003 	stmia.w	r5, {r0, r1}
  sensorReciever = createSensorReceiveHandler(&sensorExtruder, &sensorBack, &hmi);
 8003e8e:	4c60      	ldr	r4, [pc, #384]	; (8004010 <main+0x324>)
 8003e90:	4638      	mov	r0, r7
 8003e92:	4b60      	ldr	r3, [pc, #384]	; (8004014 <main+0x328>)
 8003e94:	4a4b      	ldr	r2, [pc, #300]	; (8003fc4 <main+0x2d8>)
 8003e96:	4949      	ldr	r1, [pc, #292]	; (8003fbc <main+0x2d0>)
 8003e98:	f7ff fa50 	bl	800333c <createSensorReceiveHandler>
 8003e9c:	463b      	mov	r3, r7
 8003e9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ea0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  HAL_UART_Receive_IT(&huart1, (uint8_t *)uartDataSensorExtruder.data.receivedData, 1);
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	4955      	ldr	r1, [pc, #340]	; (8003ffc <main+0x310>)
 8003ea8:	485b      	ldr	r0, [pc, #364]	; (8004018 <main+0x32c>)
 8003eaa:	f003 ffa8 	bl	8007dfe <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, (uint8_t *)uartDataSensorBack.data.receivedData, 1);
 8003eae:	2201      	movs	r2, #1
 8003eb0:	4953      	ldr	r1, [pc, #332]	; (8004000 <main+0x314>)
 8003eb2:	485a      	ldr	r0, [pc, #360]	; (800401c <main+0x330>)
 8003eb4:	f003 ffa3 	bl	8007dfe <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *)uartDataPc.data.receivedData, 1);
 8003eb8:	2201      	movs	r2, #1
 8003eba:	494f      	ldr	r1, [pc, #316]	; (8003ff8 <main+0x30c>)
 8003ebc:	4853      	ldr	r0, [pc, #332]	; (800400c <main+0x320>)
 8003ebe:	f003 ff9e 	bl	8007dfe <HAL_UART_Receive_IT>

  hmi = HMI_init(&stateMachine, &sensorExtruder, &sensorBack);
 8003ec2:	4c54      	ldr	r4, [pc, #336]	; (8004014 <main+0x328>)
 8003ec4:	4638      	mov	r0, r7
 8003ec6:	4b3f      	ldr	r3, [pc, #252]	; (8003fc4 <main+0x2d8>)
 8003ec8:	4a3c      	ldr	r2, [pc, #240]	; (8003fbc <main+0x2d0>)
 8003eca:	4947      	ldr	r1, [pc, #284]	; (8003fe8 <main+0x2fc>)
 8003ecc:	f7fe f938 	bl	8002140 <HMI_init>
 8003ed0:	463b      	mov	r3, r7
 8003ed2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ed6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  myTS_Handle = TSC2046_GetTouchData();
 8003eda:	4c51      	ldr	r4, [pc, #324]	; (8004020 <main+0x334>)
 8003edc:	463b      	mov	r3, r7
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fe f8c2 	bl	8002068 <TSC2046_GetTouchData>
 8003ee4:	4622      	mov	r2, r4
 8003ee6:	463b      	mov	r3, r7
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	6010      	str	r0, [r2, #0]
 8003eec:	889b      	ldrh	r3, [r3, #4]
 8003eee:	8093      	strh	r3, [r2, #4]
	  HMI_getTouch(&hmi, myTS_Handle,&motor, &pidController);
 8003ef0:	4a4b      	ldr	r2, [pc, #300]	; (8004020 <main+0x334>)
 8003ef2:	4b3f      	ldr	r3, [pc, #252]	; (8003ff0 <main+0x304>)
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	4b35      	ldr	r3, [pc, #212]	; (8003fcc <main+0x2e0>)
 8003ef8:	ca06      	ldmia	r2, {r1, r2}
 8003efa:	4846      	ldr	r0, [pc, #280]	; (8004014 <main+0x328>)
 8003efc:	f7fe fbb8 	bl	8002670 <HMI_getTouch>
	  float diameter = sensorBack.getDiameter(&sensorBack);
 8003f00:	4b30      	ldr	r3, [pc, #192]	; (8003fc4 <main+0x2d8>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	482f      	ldr	r0, [pc, #188]	; (8003fc4 <main+0x2d8>)
 8003f06:	4798      	blx	r3
 8003f08:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
	  updateFaultHMI = HMI_checkBlob(&hmi, myTS_Handle, updateFaultHMI);
 8003f0c:	4a44      	ldr	r2, [pc, #272]	; (8004020 <main+0x334>)
 8003f0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f10:	ca06      	ldmia	r2, {r1, r2}
 8003f12:	4840      	ldr	r0, [pc, #256]	; (8004014 <main+0x328>)
 8003f14:	f7fe f9d0 	bl	80022b8 <HMI_checkBlob>
 8003f18:	6678      	str	r0, [r7, #100]	; 0x64
	  HMI_signallight_check_blob(&stateMachine, fault_Pin, diameter, 2.5, 2);
 8003f1a:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 8003f1e:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
 8003f22:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8003f26:	2120      	movs	r1, #32
 8003f28:	482f      	ldr	r0, [pc, #188]	; (8003fe8 <main+0x2fc>)
 8003f2a:	f7fe fcdd 	bl	80028e8 <HMI_signallight_check_blob>


	  if(uartDataPc.data.messageComplete){
 8003f2e:	4b32      	ldr	r3, [pc, #200]	; (8003ff8 <main+0x30c>)
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d012      	beq.n	8003f5c <main+0x270>
		processPcInterfaceMessage(&pcReciever, uartDataPc.data.receivedData, uartDataPc.data.dataIndex);
 8003f36:	4b30      	ldr	r3, [pc, #192]	; (8003ff8 <main+0x30c>)
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	492e      	ldr	r1, [pc, #184]	; (8003ff8 <main+0x30c>)
 8003f40:	4831      	ldr	r0, [pc, #196]	; (8004008 <main+0x31c>)
 8003f42:	f7fe fe77 	bl	8002c34 <processPcInterfaceMessage>
		// Zurücksetzen für die nächste Nachricht
		uartDataPc.data.messageComplete = 0;
 8003f46:	4b2c      	ldr	r3, [pc, #176]	; (8003ff8 <main+0x30c>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	645a      	str	r2, [r3, #68]	; 0x44
		uartDataPc.data.dataIndex = 0;
 8003f4c:	4b2a      	ldr	r3, [pc, #168]	; (8003ff8 <main+0x30c>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_UART_Receive_IT(&huart2, (uint8_t *)uartDataPc.data.receivedData, 1);
 8003f52:	2201      	movs	r2, #1
 8003f54:	4928      	ldr	r1, [pc, #160]	; (8003ff8 <main+0x30c>)
 8003f56:	482d      	ldr	r0, [pc, #180]	; (800400c <main+0x320>)
 8003f58:	f003 ff51 	bl	8007dfe <HAL_UART_Receive_IT>

	  }
	  if(uartDataSensorExtruder.data.messageComplete){
 8003f5c:	4b27      	ldr	r3, [pc, #156]	; (8003ffc <main+0x310>)
 8003f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d012      	beq.n	8003f8a <main+0x29e>
		processSensorInterfaceMessage(1,&sensorReciever, uartDataSensorExtruder.data.receivedData, uartDataSensorExtruder.data.dataIndex);
 8003f64:	4b25      	ldr	r3, [pc, #148]	; (8003ffc <main+0x310>)
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	4a24      	ldr	r2, [pc, #144]	; (8003ffc <main+0x310>)
 8003f6c:	4928      	ldr	r1, [pc, #160]	; (8004010 <main+0x324>)
 8003f6e:	2001      	movs	r0, #1
 8003f70:	f7ff faf4 	bl	800355c <processSensorInterfaceMessage>
		// Zurücksetzen für die nächste Nachricht
		uartDataSensorExtruder.data.messageComplete = 0;
 8003f74:	4b21      	ldr	r3, [pc, #132]	; (8003ffc <main+0x310>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	645a      	str	r2, [r3, #68]	; 0x44
		uartDataSensorExtruder.data.dataIndex = 0;
 8003f7a:	4b20      	ldr	r3, [pc, #128]	; (8003ffc <main+0x310>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_UART_Receive_IT(&huart1, (uint8_t *)uartDataSensorExtruder.data.receivedData, 1);
 8003f80:	2201      	movs	r2, #1
 8003f82:	491e      	ldr	r1, [pc, #120]	; (8003ffc <main+0x310>)
 8003f84:	4824      	ldr	r0, [pc, #144]	; (8004018 <main+0x32c>)
 8003f86:	f003 ff3a 	bl	8007dfe <HAL_UART_Receive_IT>
	  }
	  if(uartDataSensorBack.data.messageComplete){
 8003f8a:	4b1d      	ldr	r3, [pc, #116]	; (8004000 <main+0x314>)
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0a3      	beq.n	8003eda <main+0x1ee>
		processSensorInterfaceMessage(6,&sensorReciever, uartDataSensorBack.data.receivedData, uartDataSensorBack.data.dataIndex);
 8003f92:	4b1b      	ldr	r3, [pc, #108]	; (8004000 <main+0x314>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	4a19      	ldr	r2, [pc, #100]	; (8004000 <main+0x314>)
 8003f9a:	491d      	ldr	r1, [pc, #116]	; (8004010 <main+0x324>)
 8003f9c:	2006      	movs	r0, #6
 8003f9e:	f7ff fadd 	bl	800355c <processSensorInterfaceMessage>
		// Zurücksetzen für die nächste Nachricht
		uartDataSensorBack.data.messageComplete = 0;
 8003fa2:	4b17      	ldr	r3, [pc, #92]	; (8004000 <main+0x314>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	645a      	str	r2, [r3, #68]	; 0x44
		uartDataSensorBack.data.dataIndex = 0;
 8003fa8:	4b15      	ldr	r3, [pc, #84]	; (8004000 <main+0x314>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_UART_Receive_IT(&huart6, (uint8_t *)uartDataSensorBack.data.receivedData, 1);
 8003fae:	2201      	movs	r2, #1
 8003fb0:	4913      	ldr	r1, [pc, #76]	; (8004000 <main+0x314>)
 8003fb2:	481a      	ldr	r0, [pc, #104]	; (800401c <main+0x330>)
 8003fb4:	f003 ff23 	bl	8007dfe <HAL_UART_Receive_IT>
  {
 8003fb8:	e78f      	b.n	8003eda <main+0x1ee>
 8003fba:	bf00      	nop
 8003fbc:	20000584 	.word	0x20000584
 8003fc0:	3fc8f5c3 	.word	0x3fc8f5c3
 8003fc4:	200005a4 	.word	0x200005a4
 8003fc8:	3fca3d71 	.word	0x3fca3d71
 8003fcc:	200005c4 	.word	0x200005c4
 8003fd0:	20000428 	.word	0x20000428
 8003fd4:	40020800 	.word	0x40020800
 8003fd8:	40020000 	.word	0x40020000
 8003fdc:	40020400 	.word	0x40020400
 8003fe0:	20000378 	.word	0x20000378
 8003fe4:	200003d0 	.word	0x200003d0
 8003fe8:	200005d4 	.word	0x200005d4
 8003fec:	20000470 	.word	0x20000470
 8003ff0:	200005f4 	.word	0x200005f4
 8003ff4:	00000000 	.word	0x00000000
 8003ff8:	20000678 	.word	0x20000678
 8003ffc:	200006d8 	.word	0x200006d8
 8004000:	20000738 	.word	0x20000738
 8004004:	20000658 	.word	0x20000658
 8004008:	20000640 	.word	0x20000640
 800400c:	200004fc 	.word	0x200004fc
 8004010:	20000630 	.word	0x20000630
 8004014:	20000798 	.word	0x20000798
 8004018:	200004b8 	.word	0x200004b8
 800401c:	20000540 	.word	0x20000540
 8004020:	200007a4 	.word	0x200007a4

08004024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b094      	sub	sp, #80	; 0x50
 8004028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800402a:	f107 0320 	add.w	r3, r7, #32
 800402e:	2230      	movs	r2, #48	; 0x30
 8004030:	2100      	movs	r1, #0
 8004032:	4618      	mov	r0, r3
 8004034:	f006 fd2b 	bl	800aa8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004038:	f107 030c 	add.w	r3, r7, #12
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	605a      	str	r2, [r3, #4]
 8004042:	609a      	str	r2, [r3, #8]
 8004044:	60da      	str	r2, [r3, #12]
 8004046:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004048:	2300      	movs	r3, #0
 800404a:	60bb      	str	r3, [r7, #8]
 800404c:	4b28      	ldr	r3, [pc, #160]	; (80040f0 <SystemClock_Config+0xcc>)
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	4a27      	ldr	r2, [pc, #156]	; (80040f0 <SystemClock_Config+0xcc>)
 8004052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004056:	6413      	str	r3, [r2, #64]	; 0x40
 8004058:	4b25      	ldr	r3, [pc, #148]	; (80040f0 <SystemClock_Config+0xcc>)
 800405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004064:	2300      	movs	r3, #0
 8004066:	607b      	str	r3, [r7, #4]
 8004068:	4b22      	ldr	r3, [pc, #136]	; (80040f4 <SystemClock_Config+0xd0>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a21      	ldr	r2, [pc, #132]	; (80040f4 <SystemClock_Config+0xd0>)
 800406e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	4b1f      	ldr	r3, [pc, #124]	; (80040f4 <SystemClock_Config+0xd0>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800407c:	607b      	str	r3, [r7, #4]
 800407e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004080:	2302      	movs	r3, #2
 8004082:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004084:	2301      	movs	r3, #1
 8004086:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004088:	2310      	movs	r3, #16
 800408a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800408c:	2302      	movs	r3, #2
 800408e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004090:	2300      	movs	r3, #0
 8004092:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8004094:	2310      	movs	r3, #16
 8004096:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004098:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800409c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800409e:	2304      	movs	r3, #4
 80040a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80040a2:	2304      	movs	r3, #4
 80040a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040a6:	f107 0320 	add.w	r3, r7, #32
 80040aa:	4618      	mov	r0, r3
 80040ac:	f001 fade 	bl	800566c <HAL_RCC_OscConfig>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80040b6:	f000 fb4b 	bl	8004750 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040ba:	230f      	movs	r3, #15
 80040bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040be:	2302      	movs	r3, #2
 80040c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040c2:	2300      	movs	r3, #0
 80040c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80040c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80040cc:	2300      	movs	r3, #0
 80040ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80040d0:	f107 030c 	add.w	r3, r7, #12
 80040d4:	2102      	movs	r1, #2
 80040d6:	4618      	mov	r0, r3
 80040d8:	f001 fd40 	bl	8005b5c <HAL_RCC_ClockConfig>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80040e2:	f000 fb35 	bl	8004750 <Error_Handler>
  }
}
 80040e6:	bf00      	nop
 80040e8:	3750      	adds	r7, #80	; 0x50
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40023800 	.word	0x40023800
 80040f4:	40007000 	.word	0x40007000

080040f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80040fc:	4b17      	ldr	r3, [pc, #92]	; (800415c <MX_SPI1_Init+0x64>)
 80040fe:	4a18      	ldr	r2, [pc, #96]	; (8004160 <MX_SPI1_Init+0x68>)
 8004100:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004102:	4b16      	ldr	r3, [pc, #88]	; (800415c <MX_SPI1_Init+0x64>)
 8004104:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004108:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800410a:	4b14      	ldr	r3, [pc, #80]	; (800415c <MX_SPI1_Init+0x64>)
 800410c:	2200      	movs	r2, #0
 800410e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004110:	4b12      	ldr	r3, [pc, #72]	; (800415c <MX_SPI1_Init+0x64>)
 8004112:	2200      	movs	r2, #0
 8004114:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004116:	4b11      	ldr	r3, [pc, #68]	; (800415c <MX_SPI1_Init+0x64>)
 8004118:	2200      	movs	r2, #0
 800411a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800411c:	4b0f      	ldr	r3, [pc, #60]	; (800415c <MX_SPI1_Init+0x64>)
 800411e:	2200      	movs	r2, #0
 8004120:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004122:	4b0e      	ldr	r3, [pc, #56]	; (800415c <MX_SPI1_Init+0x64>)
 8004124:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004128:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800412a:	4b0c      	ldr	r3, [pc, #48]	; (800415c <MX_SPI1_Init+0x64>)
 800412c:	2200      	movs	r2, #0
 800412e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004130:	4b0a      	ldr	r3, [pc, #40]	; (800415c <MX_SPI1_Init+0x64>)
 8004132:	2200      	movs	r2, #0
 8004134:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004136:	4b09      	ldr	r3, [pc, #36]	; (800415c <MX_SPI1_Init+0x64>)
 8004138:	2200      	movs	r2, #0
 800413a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800413c:	4b07      	ldr	r3, [pc, #28]	; (800415c <MX_SPI1_Init+0x64>)
 800413e:	2200      	movs	r2, #0
 8004140:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004142:	4b06      	ldr	r3, [pc, #24]	; (800415c <MX_SPI1_Init+0x64>)
 8004144:	220a      	movs	r2, #10
 8004146:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004148:	4804      	ldr	r0, [pc, #16]	; (800415c <MX_SPI1_Init+0x64>)
 800414a:	f001 ff27 	bl	8005f9c <HAL_SPI_Init>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004154:	f000 fafc 	bl	8004750 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004158:	bf00      	nop
 800415a:	bd80      	pop	{r7, pc}
 800415c:	20000378 	.word	0x20000378
 8004160:	40013000 	.word	0x40013000

08004164 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004168:	4b17      	ldr	r3, [pc, #92]	; (80041c8 <MX_SPI2_Init+0x64>)
 800416a:	4a18      	ldr	r2, [pc, #96]	; (80041cc <MX_SPI2_Init+0x68>)
 800416c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800416e:	4b16      	ldr	r3, [pc, #88]	; (80041c8 <MX_SPI2_Init+0x64>)
 8004170:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004174:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004176:	4b14      	ldr	r3, [pc, #80]	; (80041c8 <MX_SPI2_Init+0x64>)
 8004178:	2200      	movs	r2, #0
 800417a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800417c:	4b12      	ldr	r3, [pc, #72]	; (80041c8 <MX_SPI2_Init+0x64>)
 800417e:	2200      	movs	r2, #0
 8004180:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004182:	4b11      	ldr	r3, [pc, #68]	; (80041c8 <MX_SPI2_Init+0x64>)
 8004184:	2200      	movs	r2, #0
 8004186:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004188:	4b0f      	ldr	r3, [pc, #60]	; (80041c8 <MX_SPI2_Init+0x64>)
 800418a:	2200      	movs	r2, #0
 800418c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800418e:	4b0e      	ldr	r3, [pc, #56]	; (80041c8 <MX_SPI2_Init+0x64>)
 8004190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004194:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004196:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <MX_SPI2_Init+0x64>)
 8004198:	2210      	movs	r2, #16
 800419a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800419c:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <MX_SPI2_Init+0x64>)
 800419e:	2200      	movs	r2, #0
 80041a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80041a2:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <MX_SPI2_Init+0x64>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041a8:	4b07      	ldr	r3, [pc, #28]	; (80041c8 <MX_SPI2_Init+0x64>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80041ae:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <MX_SPI2_Init+0x64>)
 80041b0:	220a      	movs	r2, #10
 80041b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80041b4:	4804      	ldr	r0, [pc, #16]	; (80041c8 <MX_SPI2_Init+0x64>)
 80041b6:	f001 fef1 	bl	8005f9c <HAL_SPI_Init>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80041c0:	f000 fac6 	bl	8004750 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80041c4:	bf00      	nop
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	200003d0 	.word	0x200003d0
 80041cc:	40003800 	.word	0x40003800

080041d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b096      	sub	sp, #88	; 0x58
 80041d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	605a      	str	r2, [r3, #4]
 80041e0:	609a      	str	r2, [r3, #8]
 80041e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	605a      	str	r2, [r3, #4]
 80041f8:	609a      	str	r2, [r3, #8]
 80041fa:	60da      	str	r2, [r3, #12]
 80041fc:	611a      	str	r2, [r3, #16]
 80041fe:	615a      	str	r2, [r3, #20]
 8004200:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004202:	1d3b      	adds	r3, r7, #4
 8004204:	2220      	movs	r2, #32
 8004206:	2100      	movs	r1, #0
 8004208:	4618      	mov	r0, r3
 800420a:	f006 fc40 	bl	800aa8e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800420e:	4b3f      	ldr	r3, [pc, #252]	; (800430c <MX_TIM1_Init+0x13c>)
 8004210:	4a3f      	ldr	r2, [pc, #252]	; (8004310 <MX_TIM1_Init+0x140>)
 8004212:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 8004214:	4b3d      	ldr	r3, [pc, #244]	; (800430c <MX_TIM1_Init+0x13c>)
 8004216:	2204      	movs	r2, #4
 8004218:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800421a:	4b3c      	ldr	r3, [pc, #240]	; (800430c <MX_TIM1_Init+0x13c>)
 800421c:	2200      	movs	r2, #0
 800421e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004220:	4b3a      	ldr	r3, [pc, #232]	; (800430c <MX_TIM1_Init+0x13c>)
 8004222:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004226:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004228:	4b38      	ldr	r3, [pc, #224]	; (800430c <MX_TIM1_Init+0x13c>)
 800422a:	2200      	movs	r2, #0
 800422c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800422e:	4b37      	ldr	r3, [pc, #220]	; (800430c <MX_TIM1_Init+0x13c>)
 8004230:	2200      	movs	r2, #0
 8004232:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004234:	4b35      	ldr	r3, [pc, #212]	; (800430c <MX_TIM1_Init+0x13c>)
 8004236:	2200      	movs	r2, #0
 8004238:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800423a:	4834      	ldr	r0, [pc, #208]	; (800430c <MX_TIM1_Init+0x13c>)
 800423c:	f002 fc56 	bl	8006aec <HAL_TIM_Base_Init>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004246:	f000 fa83 	bl	8004750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800424a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800424e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004250:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004254:	4619      	mov	r1, r3
 8004256:	482d      	ldr	r0, [pc, #180]	; (800430c <MX_TIM1_Init+0x13c>)
 8004258:	f003 f858 	bl	800730c <HAL_TIM_ConfigClockSource>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004262:	f000 fa75 	bl	8004750 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004266:	4829      	ldr	r0, [pc, #164]	; (800430c <MX_TIM1_Init+0x13c>)
 8004268:	f002 fd18 	bl	8006c9c <HAL_TIM_PWM_Init>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004272:	f000 fa6d 	bl	8004750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004276:	2300      	movs	r3, #0
 8004278:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800427a:	2300      	movs	r3, #0
 800427c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800427e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004282:	4619      	mov	r1, r3
 8004284:	4821      	ldr	r0, [pc, #132]	; (800430c <MX_TIM1_Init+0x13c>)
 8004286:	f003 fc07 	bl	8007a98 <HAL_TIMEx_MasterConfigSynchronization>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004290:	f000 fa5e 	bl	8004750 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004294:	2360      	movs	r3, #96	; 0x60
 8004296:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 13125-1;
 8004298:	f243 3344 	movw	r3, #13124	; 0x3344
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800429e:	2300      	movs	r3, #0
 80042a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80042a2:	2300      	movs	r3, #0
 80042a4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042a6:	2300      	movs	r3, #0
 80042a8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80042aa:	2300      	movs	r3, #0
 80042ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80042ae:	2300      	movs	r3, #0
 80042b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042b6:	2200      	movs	r2, #0
 80042b8:	4619      	mov	r1, r3
 80042ba:	4814      	ldr	r0, [pc, #80]	; (800430c <MX_TIM1_Init+0x13c>)
 80042bc:	f002 ff64 	bl	8007188 <HAL_TIM_PWM_ConfigChannel>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80042c6:	f000 fa43 	bl	8004750 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80042ca:	2300      	movs	r3, #0
 80042cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80042d6:	2300      	movs	r3, #0
 80042d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80042da:	2300      	movs	r3, #0
 80042dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80042de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80042e4:	2300      	movs	r3, #0
 80042e6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80042e8:	1d3b      	adds	r3, r7, #4
 80042ea:	4619      	mov	r1, r3
 80042ec:	4807      	ldr	r0, [pc, #28]	; (800430c <MX_TIM1_Init+0x13c>)
 80042ee:	f003 fc41 	bl	8007b74 <HAL_TIMEx_ConfigBreakDeadTime>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80042f8:	f000 fa2a 	bl	8004750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80042fc:	4803      	ldr	r0, [pc, #12]	; (800430c <MX_TIM1_Init+0x13c>)
 80042fe:	f000 fb4f 	bl	80049a0 <HAL_TIM_MspPostInit>

}
 8004302:	bf00      	nop
 8004304:	3758      	adds	r7, #88	; 0x58
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	20000428 	.word	0x20000428
 8004310:	40010000 	.word	0x40010000

08004314 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800431a:	f107 0308 	add.w	r3, r7, #8
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	605a      	str	r2, [r3, #4]
 8004324:	609a      	str	r2, [r3, #8]
 8004326:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004328:	463b      	mov	r3, r7
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004330:	4b1d      	ldr	r3, [pc, #116]	; (80043a8 <MX_TIM3_Init+0x94>)
 8004332:	4a1e      	ldr	r2, [pc, #120]	; (80043ac <MX_TIM3_Init+0x98>)
 8004334:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 8004336:	4b1c      	ldr	r3, [pc, #112]	; (80043a8 <MX_TIM3_Init+0x94>)
 8004338:	2204      	movs	r2, #4
 800433a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800433c:	4b1a      	ldr	r3, [pc, #104]	; (80043a8 <MX_TIM3_Init+0x94>)
 800433e:	2200      	movs	r2, #0
 8004340:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004342:	4b19      	ldr	r3, [pc, #100]	; (80043a8 <MX_TIM3_Init+0x94>)
 8004344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004348:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800434a:	4b17      	ldr	r3, [pc, #92]	; (80043a8 <MX_TIM3_Init+0x94>)
 800434c:	2200      	movs	r2, #0
 800434e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004350:	4b15      	ldr	r3, [pc, #84]	; (80043a8 <MX_TIM3_Init+0x94>)
 8004352:	2200      	movs	r2, #0
 8004354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004356:	4814      	ldr	r0, [pc, #80]	; (80043a8 <MX_TIM3_Init+0x94>)
 8004358:	f002 fbc8 	bl	8006aec <HAL_TIM_Base_Init>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8004362:	f000 f9f5 	bl	8004750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800436a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800436c:	f107 0308 	add.w	r3, r7, #8
 8004370:	4619      	mov	r1, r3
 8004372:	480d      	ldr	r0, [pc, #52]	; (80043a8 <MX_TIM3_Init+0x94>)
 8004374:	f002 ffca 	bl	800730c <HAL_TIM_ConfigClockSource>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800437e:	f000 f9e7 	bl	8004750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004382:	2300      	movs	r3, #0
 8004384:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004386:	2300      	movs	r3, #0
 8004388:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800438a:	463b      	mov	r3, r7
 800438c:	4619      	mov	r1, r3
 800438e:	4806      	ldr	r0, [pc, #24]	; (80043a8 <MX_TIM3_Init+0x94>)
 8004390:	f003 fb82 	bl	8007a98 <HAL_TIMEx_MasterConfigSynchronization>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800439a:	f000 f9d9 	bl	8004750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800439e:	bf00      	nop
 80043a0:	3718      	adds	r7, #24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	20000470 	.word	0x20000470
 80043ac:	40000400 	.word	0x40000400

080043b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80043b4:	4b11      	ldr	r3, [pc, #68]	; (80043fc <MX_USART1_UART_Init+0x4c>)
 80043b6:	4a12      	ldr	r2, [pc, #72]	; (8004400 <MX_USART1_UART_Init+0x50>)
 80043b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80043ba:	4b10      	ldr	r3, [pc, #64]	; (80043fc <MX_USART1_UART_Init+0x4c>)
 80043bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80043c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80043c2:	4b0e      	ldr	r3, [pc, #56]	; (80043fc <MX_USART1_UART_Init+0x4c>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80043c8:	4b0c      	ldr	r3, [pc, #48]	; (80043fc <MX_USART1_UART_Init+0x4c>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80043ce:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <MX_USART1_UART_Init+0x4c>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80043d4:	4b09      	ldr	r3, [pc, #36]	; (80043fc <MX_USART1_UART_Init+0x4c>)
 80043d6:	220c      	movs	r2, #12
 80043d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043da:	4b08      	ldr	r3, [pc, #32]	; (80043fc <MX_USART1_UART_Init+0x4c>)
 80043dc:	2200      	movs	r2, #0
 80043de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80043e0:	4b06      	ldr	r3, [pc, #24]	; (80043fc <MX_USART1_UART_Init+0x4c>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80043e6:	4805      	ldr	r0, [pc, #20]	; (80043fc <MX_USART1_UART_Init+0x4c>)
 80043e8:	f003 fc2a 	bl	8007c40 <HAL_UART_Init>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80043f2:	f000 f9ad 	bl	8004750 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80043f6:	bf00      	nop
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	200004b8 	.word	0x200004b8
 8004400:	40011000 	.word	0x40011000

08004404 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004408:	4b11      	ldr	r3, [pc, #68]	; (8004450 <MX_USART2_UART_Init+0x4c>)
 800440a:	4a12      	ldr	r2, [pc, #72]	; (8004454 <MX_USART2_UART_Init+0x50>)
 800440c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800440e:	4b10      	ldr	r3, [pc, #64]	; (8004450 <MX_USART2_UART_Init+0x4c>)
 8004410:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004414:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004416:	4b0e      	ldr	r3, [pc, #56]	; (8004450 <MX_USART2_UART_Init+0x4c>)
 8004418:	2200      	movs	r2, #0
 800441a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800441c:	4b0c      	ldr	r3, [pc, #48]	; (8004450 <MX_USART2_UART_Init+0x4c>)
 800441e:	2200      	movs	r2, #0
 8004420:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004422:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <MX_USART2_UART_Init+0x4c>)
 8004424:	2200      	movs	r2, #0
 8004426:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004428:	4b09      	ldr	r3, [pc, #36]	; (8004450 <MX_USART2_UART_Init+0x4c>)
 800442a:	220c      	movs	r2, #12
 800442c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800442e:	4b08      	ldr	r3, [pc, #32]	; (8004450 <MX_USART2_UART_Init+0x4c>)
 8004430:	2200      	movs	r2, #0
 8004432:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004434:	4b06      	ldr	r3, [pc, #24]	; (8004450 <MX_USART2_UART_Init+0x4c>)
 8004436:	2200      	movs	r2, #0
 8004438:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800443a:	4805      	ldr	r0, [pc, #20]	; (8004450 <MX_USART2_UART_Init+0x4c>)
 800443c:	f003 fc00 	bl	8007c40 <HAL_UART_Init>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004446:	f000 f983 	bl	8004750 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800444a:	bf00      	nop
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	200004fc 	.word	0x200004fc
 8004454:	40004400 	.word	0x40004400

08004458 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800445c:	4b11      	ldr	r3, [pc, #68]	; (80044a4 <MX_USART6_UART_Init+0x4c>)
 800445e:	4a12      	ldr	r2, [pc, #72]	; (80044a8 <MX_USART6_UART_Init+0x50>)
 8004460:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004462:	4b10      	ldr	r3, [pc, #64]	; (80044a4 <MX_USART6_UART_Init+0x4c>)
 8004464:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004468:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800446a:	4b0e      	ldr	r3, [pc, #56]	; (80044a4 <MX_USART6_UART_Init+0x4c>)
 800446c:	2200      	movs	r2, #0
 800446e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004470:	4b0c      	ldr	r3, [pc, #48]	; (80044a4 <MX_USART6_UART_Init+0x4c>)
 8004472:	2200      	movs	r2, #0
 8004474:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004476:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <MX_USART6_UART_Init+0x4c>)
 8004478:	2200      	movs	r2, #0
 800447a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800447c:	4b09      	ldr	r3, [pc, #36]	; (80044a4 <MX_USART6_UART_Init+0x4c>)
 800447e:	220c      	movs	r2, #12
 8004480:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004482:	4b08      	ldr	r3, [pc, #32]	; (80044a4 <MX_USART6_UART_Init+0x4c>)
 8004484:	2200      	movs	r2, #0
 8004486:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004488:	4b06      	ldr	r3, [pc, #24]	; (80044a4 <MX_USART6_UART_Init+0x4c>)
 800448a:	2200      	movs	r2, #0
 800448c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800448e:	4805      	ldr	r0, [pc, #20]	; (80044a4 <MX_USART6_UART_Init+0x4c>)
 8004490:	f003 fbd6 	bl	8007c40 <HAL_UART_Init>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800449a:	f000 f959 	bl	8004750 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800449e:	bf00      	nop
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	20000540 	.word	0x20000540
 80044a8:	40011400 	.word	0x40011400

080044ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08a      	sub	sp, #40	; 0x28
 80044b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044b2:	f107 0314 	add.w	r3, r7, #20
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	605a      	str	r2, [r3, #4]
 80044bc:	609a      	str	r2, [r3, #8]
 80044be:	60da      	str	r2, [r3, #12]
 80044c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044c2:	2300      	movs	r3, #0
 80044c4:	613b      	str	r3, [r7, #16]
 80044c6:	4b41      	ldr	r3, [pc, #260]	; (80045cc <MX_GPIO_Init+0x120>)
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	4a40      	ldr	r2, [pc, #256]	; (80045cc <MX_GPIO_Init+0x120>)
 80044cc:	f043 0304 	orr.w	r3, r3, #4
 80044d0:	6313      	str	r3, [r2, #48]	; 0x30
 80044d2:	4b3e      	ldr	r3, [pc, #248]	; (80045cc <MX_GPIO_Init+0x120>)
 80044d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d6:	f003 0304 	and.w	r3, r3, #4
 80044da:	613b      	str	r3, [r7, #16]
 80044dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	4b3a      	ldr	r3, [pc, #232]	; (80045cc <MX_GPIO_Init+0x120>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	4a39      	ldr	r2, [pc, #228]	; (80045cc <MX_GPIO_Init+0x120>)
 80044e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ec:	6313      	str	r3, [r2, #48]	; 0x30
 80044ee:	4b37      	ldr	r3, [pc, #220]	; (80045cc <MX_GPIO_Init+0x120>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044fa:	2300      	movs	r3, #0
 80044fc:	60bb      	str	r3, [r7, #8]
 80044fe:	4b33      	ldr	r3, [pc, #204]	; (80045cc <MX_GPIO_Init+0x120>)
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	4a32      	ldr	r2, [pc, #200]	; (80045cc <MX_GPIO_Init+0x120>)
 8004504:	f043 0301 	orr.w	r3, r3, #1
 8004508:	6313      	str	r3, [r2, #48]	; 0x30
 800450a:	4b30      	ldr	r3, [pc, #192]	; (80045cc <MX_GPIO_Init+0x120>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	60bb      	str	r3, [r7, #8]
 8004514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004516:	2300      	movs	r3, #0
 8004518:	607b      	str	r3, [r7, #4]
 800451a:	4b2c      	ldr	r3, [pc, #176]	; (80045cc <MX_GPIO_Init+0x120>)
 800451c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451e:	4a2b      	ldr	r2, [pc, #172]	; (80045cc <MX_GPIO_Init+0x120>)
 8004520:	f043 0302 	orr.w	r3, r3, #2
 8004524:	6313      	str	r3, [r2, #48]	; 0x30
 8004526:	4b29      	ldr	r3, [pc, #164]	; (80045cc <MX_GPIO_Init+0x120>)
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	607b      	str	r3, [r7, #4]
 8004530:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8004532:	2200      	movs	r2, #0
 8004534:	f44f 7108 	mov.w	r1, #544	; 0x220
 8004538:	4825      	ldr	r0, [pc, #148]	; (80045d0 <MX_GPIO_Init+0x124>)
 800453a:	f001 f87d 	bl	8005638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, fault_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800453e:	2200      	movs	r2, #0
 8004540:	21a0      	movs	r1, #160	; 0xa0
 8004542:	4824      	ldr	r0, [pc, #144]	; (80045d4 <MX_GPIO_Init+0x128>)
 8004544:	f001 f878 	bl	8005638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TS_CS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8004548:	2200      	movs	r2, #0
 800454a:	2160      	movs	r1, #96	; 0x60
 800454c:	4822      	ldr	r0, [pc, #136]	; (80045d8 <MX_GPIO_Init+0x12c>)
 800454e:	f001 f873 	bl	8005638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004552:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004558:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800455c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004562:	f107 0314 	add.w	r3, r7, #20
 8004566:	4619      	mov	r1, r3
 8004568:	481a      	ldr	r0, [pc, #104]	; (80045d4 <MX_GPIO_Init+0x128>)
 800456a:	f000 fee1 	bl	8005330 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LCD_DC_Pin;
 800456e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8004572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004574:	2301      	movs	r3, #1
 8004576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004578:	2300      	movs	r3, #0
 800457a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800457c:	2300      	movs	r3, #0
 800457e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004580:	f107 0314 	add.w	r3, r7, #20
 8004584:	4619      	mov	r1, r3
 8004586:	4812      	ldr	r0, [pc, #72]	; (80045d0 <MX_GPIO_Init+0x124>)
 8004588:	f000 fed2 	bl	8005330 <HAL_GPIO_Init>

  /*Configure GPIO pins : fault_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = fault_Pin|LCD_RST_Pin;
 800458c:	23a0      	movs	r3, #160	; 0xa0
 800458e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004590:	2301      	movs	r3, #1
 8004592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004594:	2300      	movs	r3, #0
 8004596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004598:	2300      	movs	r3, #0
 800459a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800459c:	f107 0314 	add.w	r3, r7, #20
 80045a0:	4619      	mov	r1, r3
 80045a2:	480c      	ldr	r0, [pc, #48]	; (80045d4 <MX_GPIO_Init+0x128>)
 80045a4:	f000 fec4 	bl	8005330 <HAL_GPIO_Init>

  /*Configure GPIO pins : TS_CS_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = TS_CS_Pin|LCD_CS_Pin;
 80045a8:	2360      	movs	r3, #96	; 0x60
 80045aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045ac:	2301      	movs	r3, #1
 80045ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b0:	2300      	movs	r3, #0
 80045b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045b4:	2300      	movs	r3, #0
 80045b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045b8:	f107 0314 	add.w	r3, r7, #20
 80045bc:	4619      	mov	r1, r3
 80045be:	4806      	ldr	r0, [pc, #24]	; (80045d8 <MX_GPIO_Init+0x12c>)
 80045c0:	f000 feb6 	bl	8005330 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80045c4:	bf00      	nop
 80045c6:	3728      	adds	r7, #40	; 0x28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40023800 	.word	0x40023800
 80045d0:	40020000 	.word	0x40020000
 80045d4:	40020800 	.word	0x40020800
 80045d8:	40020400 	.word	0x40020400

080045dc <processUartData>:

/* USER CODE BEGIN 4 */
void processUartData(UART_HandleTypeDef *huart, UartDataObject *uartData) {
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  if (uartData->data.dataIndex == 0 && uartData->data.receivedData[0] != '?' && uartData->data.receivedData[0] != '!') {
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d111      	bne.n	8004612 <processUartData+0x36>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	2b3f      	cmp	r3, #63	; 0x3f
 80045f4:	d00d      	beq.n	8004612 <processUartData+0x36>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b21      	cmp	r3, #33	; 0x21
 80045fc:	d009      	beq.n	8004612 <processUartData+0x36>
    // Fehlerhafte Startbyte, Nachricht ignorieren
    uartData->data.dataIndex = 0;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2200      	movs	r2, #0
 8004602:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_UART_Receive_IT(huart, &uartData->data.receivedData[0], 1);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2201      	movs	r2, #1
 8004608:	4619      	mov	r1, r3
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f003 fbf7 	bl	8007dfe <HAL_UART_Receive_IT>
    HAL_UART_Receive_IT(huart, &uartData->data.receivedData[0], 1);
  } else {
    uartData->data.dataIndex++;
    HAL_UART_Receive_IT(huart, (uint8_t *)&uartData->data.receivedData[uartData->data.dataIndex], 1);
  }
}
 8004610:	e02b      	b.n	800466a <processUartData+0x8e>
  } else if (uartData->data.receivedData[uartData->data.dataIndex] == '\r' ) {
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	5cd3      	ldrb	r3, [r2, r3]
 800461a:	2b0d      	cmp	r3, #13
 800461c:	d109      	bne.n	8004632 <processUartData+0x56>
    uartData->data.receivedData[uartData->data.dataIndex + 1] = '\0';  // Null-Terminierung hinzufügen
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	3301      	adds	r3, #1
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	2100      	movs	r1, #0
 8004628:	54d1      	strb	r1, [r2, r3]
    uartData->data.messageComplete = 1;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2201      	movs	r2, #1
 800462e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004630:	e01b      	b.n	800466a <processUartData+0x8e>
  } else if (uartData->data.dataIndex >= sizeof(uartData->data.receivedData) - 1) {
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	2b3e      	cmp	r3, #62	; 0x3e
 8004638:	d909      	bls.n	800464e <processUartData+0x72>
    uartData->data.dataIndex = 0;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2200      	movs	r2, #0
 800463e:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_UART_Receive_IT(huart, &uartData->data.receivedData[0], 1);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2201      	movs	r2, #1
 8004644:	4619      	mov	r1, r3
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f003 fbd9 	bl	8007dfe <HAL_UART_Receive_IT>
}
 800464c:	e00d      	b.n	800466a <processUartData+0x8e>
    uartData->data.dataIndex++;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_UART_Receive_IT(huart, (uint8_t *)&uartData->data.receivedData[uartData->data.dataIndex], 1);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	4413      	add	r3, r2
 8004660:	2201      	movs	r2, #1
 8004662:	4619      	mov	r1, r3
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f003 fbca 	bl	8007dfe <HAL_UART_Receive_IT>
}
 800466a:	bf00      	nop
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
	...

08004674 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  if (huart == &huart2) {
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a0e      	ldr	r2, [pc, #56]	; (80046b8 <HAL_UART_RxCpltCallback+0x44>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d104      	bne.n	800468e <HAL_UART_RxCpltCallback+0x1a>
    processUartData(&huart2, &uartDataPc);
 8004684:	490d      	ldr	r1, [pc, #52]	; (80046bc <HAL_UART_RxCpltCallback+0x48>)
 8004686:	480c      	ldr	r0, [pc, #48]	; (80046b8 <HAL_UART_RxCpltCallback+0x44>)
 8004688:	f7ff ffa8 	bl	80045dc <processUartData>
  }else if (huart == &huart1){
	processUartData(&huart1, &uartDataSensorExtruder);
  }else if (huart == &huart6){
	  processUartData(&huart6, &uartDataSensorBack);
  }
}
 800468c:	e010      	b.n	80046b0 <HAL_UART_RxCpltCallback+0x3c>
  }else if (huart == &huart1){
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a0b      	ldr	r2, [pc, #44]	; (80046c0 <HAL_UART_RxCpltCallback+0x4c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d104      	bne.n	80046a0 <HAL_UART_RxCpltCallback+0x2c>
	processUartData(&huart1, &uartDataSensorExtruder);
 8004696:	490b      	ldr	r1, [pc, #44]	; (80046c4 <HAL_UART_RxCpltCallback+0x50>)
 8004698:	4809      	ldr	r0, [pc, #36]	; (80046c0 <HAL_UART_RxCpltCallback+0x4c>)
 800469a:	f7ff ff9f 	bl	80045dc <processUartData>
}
 800469e:	e007      	b.n	80046b0 <HAL_UART_RxCpltCallback+0x3c>
  }else if (huart == &huart6){
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a09      	ldr	r2, [pc, #36]	; (80046c8 <HAL_UART_RxCpltCallback+0x54>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d103      	bne.n	80046b0 <HAL_UART_RxCpltCallback+0x3c>
	  processUartData(&huart6, &uartDataSensorBack);
 80046a8:	4908      	ldr	r1, [pc, #32]	; (80046cc <HAL_UART_RxCpltCallback+0x58>)
 80046aa:	4807      	ldr	r0, [pc, #28]	; (80046c8 <HAL_UART_RxCpltCallback+0x54>)
 80046ac:	f7ff ff96 	bl	80045dc <processUartData>
}
 80046b0:	bf00      	nop
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	200004fc 	.word	0x200004fc
 80046bc:	20000678 	.word	0x20000678
 80046c0:	200004b8 	.word	0x200004b8
 80046c4:	200006d8 	.word	0x200006d8
 80046c8:	20000540 	.word	0x20000540
 80046cc:	20000738 	.word	0x20000738

080046d0 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
  float diameter = sensorBack.getDiameter(&sensorBack);
 80046d6:	4b1a      	ldr	r3, [pc, #104]	; (8004740 <TIM3_IRQHandler+0x70>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	4819      	ldr	r0, [pc, #100]	; (8004740 <TIM3_IRQHandler+0x70>)
 80046dc:	4798      	blx	r3
 80046de:	ed87 0a03 	vstr	s0, [r7, #12]
  float cValue   = pidController.pid_update(&pidController,diameter);
 80046e2:	4b18      	ldr	r3, [pc, #96]	; (8004744 <TIM3_IRQHandler+0x74>)
 80046e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e6:	ed97 0a03 	vldr	s0, [r7, #12]
 80046ea:	4816      	ldr	r0, [pc, #88]	; (8004744 <TIM3_IRQHandler+0x74>)
 80046ec:	4798      	blx	r3
 80046ee:	ed87 0a02 	vstr	s0, [r7, #8]

  float speed = motor.getSpeed(&motor);
 80046f2:	4b15      	ldr	r3, [pc, #84]	; (8004748 <TIM3_IRQHandler+0x78>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	4814      	ldr	r0, [pc, #80]	; (8004748 <TIM3_IRQHandler+0x78>)
 80046f8:	4798      	blx	r3
 80046fa:	ee07 0a90 	vmov	s15, r0
 80046fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004702:	edc7 7a01 	vstr	s15, [r7, #4]

  speed = speed + cValue * speed;
 8004706:	ed97 7a02 	vldr	s14, [r7, #8]
 800470a:	edd7 7a01 	vldr	s15, [r7, #4]
 800470e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004712:	ed97 7a01 	vldr	s14, [r7, #4]
 8004716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800471a:	edc7 7a01 	vstr	s15, [r7, #4]
  motor.setSpeed(&motor,speed);
 800471e:	4b0a      	ldr	r3, [pc, #40]	; (8004748 <TIM3_IRQHandler+0x78>)
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	edd7 7a01 	vldr	s15, [r7, #4]
 8004726:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800472a:	ee17 1a90 	vmov	r1, s15
 800472e:	4806      	ldr	r0, [pc, #24]	; (8004748 <TIM3_IRQHandler+0x78>)
 8004730:	4798      	blx	r3
  HAL_TIM_IRQHandler(&htim3);
 8004732:	4806      	ldr	r0, [pc, #24]	; (800474c <TIM3_IRQHandler+0x7c>)
 8004734:	f002 fc20 	bl	8006f78 <HAL_TIM_IRQHandler>
}
 8004738:	bf00      	nop
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	200005a4 	.word	0x200005a4
 8004744:	200005f4 	.word	0x200005f4
 8004748:	200005c4 	.word	0x200005c4
 800474c:	20000470 	.word	0x20000470

08004750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004754:	b672      	cpsid	i
}
 8004756:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004758:	e7fe      	b.n	8004758 <Error_Handler+0x8>
	...

0800475c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004762:	2300      	movs	r3, #0
 8004764:	607b      	str	r3, [r7, #4]
 8004766:	4b10      	ldr	r3, [pc, #64]	; (80047a8 <HAL_MspInit+0x4c>)
 8004768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476a:	4a0f      	ldr	r2, [pc, #60]	; (80047a8 <HAL_MspInit+0x4c>)
 800476c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004770:	6453      	str	r3, [r2, #68]	; 0x44
 8004772:	4b0d      	ldr	r3, [pc, #52]	; (80047a8 <HAL_MspInit+0x4c>)
 8004774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800477a:	607b      	str	r3, [r7, #4]
 800477c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800477e:	2300      	movs	r3, #0
 8004780:	603b      	str	r3, [r7, #0]
 8004782:	4b09      	ldr	r3, [pc, #36]	; (80047a8 <HAL_MspInit+0x4c>)
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	4a08      	ldr	r2, [pc, #32]	; (80047a8 <HAL_MspInit+0x4c>)
 8004788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800478c:	6413      	str	r3, [r2, #64]	; 0x40
 800478e:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <HAL_MspInit+0x4c>)
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004796:	603b      	str	r3, [r7, #0]
 8004798:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800479a:	2007      	movs	r0, #7
 800479c:	f000 fcf4 	bl	8005188 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047a0:	bf00      	nop
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40023800 	.word	0x40023800

080047ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b08e      	sub	sp, #56	; 0x38
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	605a      	str	r2, [r3, #4]
 80047be:	609a      	str	r2, [r3, #8]
 80047c0:	60da      	str	r2, [r3, #12]
 80047c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a50      	ldr	r2, [pc, #320]	; (800490c <HAL_SPI_MspInit+0x160>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d14a      	bne.n	8004864 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80047ce:	2300      	movs	r3, #0
 80047d0:	623b      	str	r3, [r7, #32]
 80047d2:	4b4f      	ldr	r3, [pc, #316]	; (8004910 <HAL_SPI_MspInit+0x164>)
 80047d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d6:	4a4e      	ldr	r2, [pc, #312]	; (8004910 <HAL_SPI_MspInit+0x164>)
 80047d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80047dc:	6453      	str	r3, [r2, #68]	; 0x44
 80047de:	4b4c      	ldr	r3, [pc, #304]	; (8004910 <HAL_SPI_MspInit+0x164>)
 80047e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047e6:	623b      	str	r3, [r7, #32]
 80047e8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ea:	2300      	movs	r3, #0
 80047ec:	61fb      	str	r3, [r7, #28]
 80047ee:	4b48      	ldr	r3, [pc, #288]	; (8004910 <HAL_SPI_MspInit+0x164>)
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	4a47      	ldr	r2, [pc, #284]	; (8004910 <HAL_SPI_MspInit+0x164>)
 80047f4:	f043 0301 	orr.w	r3, r3, #1
 80047f8:	6313      	str	r3, [r2, #48]	; 0x30
 80047fa:	4b45      	ldr	r3, [pc, #276]	; (8004910 <HAL_SPI_MspInit+0x164>)
 80047fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	61fb      	str	r3, [r7, #28]
 8004804:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004806:	2300      	movs	r3, #0
 8004808:	61bb      	str	r3, [r7, #24]
 800480a:	4b41      	ldr	r3, [pc, #260]	; (8004910 <HAL_SPI_MspInit+0x164>)
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	4a40      	ldr	r2, [pc, #256]	; (8004910 <HAL_SPI_MspInit+0x164>)
 8004810:	f043 0302 	orr.w	r3, r3, #2
 8004814:	6313      	str	r3, [r2, #48]	; 0x30
 8004816:	4b3e      	ldr	r3, [pc, #248]	; (8004910 <HAL_SPI_MspInit+0x164>)
 8004818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	61bb      	str	r3, [r7, #24]
 8004820:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004822:	23c0      	movs	r3, #192	; 0xc0
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004826:	2302      	movs	r3, #2
 8004828:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800482a:	2300      	movs	r3, #0
 800482c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800482e:	2303      	movs	r3, #3
 8004830:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004832:	2305      	movs	r3, #5
 8004834:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800483a:	4619      	mov	r1, r3
 800483c:	4835      	ldr	r0, [pc, #212]	; (8004914 <HAL_SPI_MspInit+0x168>)
 800483e:	f000 fd77 	bl	8005330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004842:	2308      	movs	r3, #8
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004846:	2302      	movs	r3, #2
 8004848:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800484a:	2300      	movs	r3, #0
 800484c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800484e:	2303      	movs	r3, #3
 8004850:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004852:	2305      	movs	r3, #5
 8004854:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800485a:	4619      	mov	r1, r3
 800485c:	482e      	ldr	r0, [pc, #184]	; (8004918 <HAL_SPI_MspInit+0x16c>)
 800485e:	f000 fd67 	bl	8005330 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004862:	e04f      	b.n	8004904 <HAL_SPI_MspInit+0x158>
  else if(hspi->Instance==SPI2)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a2c      	ldr	r2, [pc, #176]	; (800491c <HAL_SPI_MspInit+0x170>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d14a      	bne.n	8004904 <HAL_SPI_MspInit+0x158>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800486e:	2300      	movs	r3, #0
 8004870:	617b      	str	r3, [r7, #20]
 8004872:	4b27      	ldr	r3, [pc, #156]	; (8004910 <HAL_SPI_MspInit+0x164>)
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	4a26      	ldr	r2, [pc, #152]	; (8004910 <HAL_SPI_MspInit+0x164>)
 8004878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800487c:	6413      	str	r3, [r2, #64]	; 0x40
 800487e:	4b24      	ldr	r3, [pc, #144]	; (8004910 <HAL_SPI_MspInit+0x164>)
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800488a:	2300      	movs	r3, #0
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	4b20      	ldr	r3, [pc, #128]	; (8004910 <HAL_SPI_MspInit+0x164>)
 8004890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004892:	4a1f      	ldr	r2, [pc, #124]	; (8004910 <HAL_SPI_MspInit+0x164>)
 8004894:	f043 0304 	orr.w	r3, r3, #4
 8004898:	6313      	str	r3, [r2, #48]	; 0x30
 800489a:	4b1d      	ldr	r3, [pc, #116]	; (8004910 <HAL_SPI_MspInit+0x164>)
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	613b      	str	r3, [r7, #16]
 80048a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048a6:	2300      	movs	r3, #0
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	4b19      	ldr	r3, [pc, #100]	; (8004910 <HAL_SPI_MspInit+0x164>)
 80048ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ae:	4a18      	ldr	r2, [pc, #96]	; (8004910 <HAL_SPI_MspInit+0x164>)
 80048b0:	f043 0302 	orr.w	r3, r3, #2
 80048b4:	6313      	str	r3, [r2, #48]	; 0x30
 80048b6:	4b16      	ldr	r3, [pc, #88]	; (8004910 <HAL_SPI_MspInit+0x164>)
 80048b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TS_DO_Pin|T_DIN_Pin;
 80048c2:	230c      	movs	r3, #12
 80048c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048c6:	2302      	movs	r3, #2
 80048c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ca:	2300      	movs	r3, #0
 80048cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048ce:	2303      	movs	r3, #3
 80048d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80048d2:	2305      	movs	r3, #5
 80048d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048da:	4619      	mov	r1, r3
 80048dc:	4810      	ldr	r0, [pc, #64]	; (8004920 <HAL_SPI_MspInit+0x174>)
 80048de:	f000 fd27 	bl	8005330 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80048e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048e8:	2302      	movs	r3, #2
 80048ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ec:	2300      	movs	r3, #0
 80048ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048f0:	2303      	movs	r3, #3
 80048f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80048f4:	2305      	movs	r3, #5
 80048f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048fc:	4619      	mov	r1, r3
 80048fe:	4806      	ldr	r0, [pc, #24]	; (8004918 <HAL_SPI_MspInit+0x16c>)
 8004900:	f000 fd16 	bl	8005330 <HAL_GPIO_Init>
}
 8004904:	bf00      	nop
 8004906:	3738      	adds	r7, #56	; 0x38
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40013000 	.word	0x40013000
 8004910:	40023800 	.word	0x40023800
 8004914:	40020000 	.word	0x40020000
 8004918:	40020400 	.word	0x40020400
 800491c:	40003800 	.word	0x40003800
 8004920:	40020800 	.word	0x40020800

08004924 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a18      	ldr	r2, [pc, #96]	; (8004994 <HAL_TIM_Base_MspInit+0x70>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d10e      	bne.n	8004954 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004936:	2300      	movs	r3, #0
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	4b17      	ldr	r3, [pc, #92]	; (8004998 <HAL_TIM_Base_MspInit+0x74>)
 800493c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493e:	4a16      	ldr	r2, [pc, #88]	; (8004998 <HAL_TIM_Base_MspInit+0x74>)
 8004940:	f043 0301 	orr.w	r3, r3, #1
 8004944:	6453      	str	r3, [r2, #68]	; 0x44
 8004946:	4b14      	ldr	r3, [pc, #80]	; (8004998 <HAL_TIM_Base_MspInit+0x74>)
 8004948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004952:	e01a      	b.n	800498a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a10      	ldr	r2, [pc, #64]	; (800499c <HAL_TIM_Base_MspInit+0x78>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d115      	bne.n	800498a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800495e:	2300      	movs	r3, #0
 8004960:	60bb      	str	r3, [r7, #8]
 8004962:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <HAL_TIM_Base_MspInit+0x74>)
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	4a0c      	ldr	r2, [pc, #48]	; (8004998 <HAL_TIM_Base_MspInit+0x74>)
 8004968:	f043 0302 	orr.w	r3, r3, #2
 800496c:	6413      	str	r3, [r2, #64]	; 0x40
 800496e:	4b0a      	ldr	r3, [pc, #40]	; (8004998 <HAL_TIM_Base_MspInit+0x74>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	60bb      	str	r3, [r7, #8]
 8004978:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800497a:	2200      	movs	r2, #0
 800497c:	2100      	movs	r1, #0
 800497e:	201d      	movs	r0, #29
 8004980:	f000 fc0d 	bl	800519e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004984:	201d      	movs	r0, #29
 8004986:	f000 fc26 	bl	80051d6 <HAL_NVIC_EnableIRQ>
}
 800498a:	bf00      	nop
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	40010000 	.word	0x40010000
 8004998:	40023800 	.word	0x40023800
 800499c:	40000400 	.word	0x40000400

080049a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b088      	sub	sp, #32
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049a8:	f107 030c 	add.w	r3, r7, #12
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	605a      	str	r2, [r3, #4]
 80049b2:	609a      	str	r2, [r3, #8]
 80049b4:	60da      	str	r2, [r3, #12]
 80049b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a12      	ldr	r2, [pc, #72]	; (8004a08 <HAL_TIM_MspPostInit+0x68>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d11e      	bne.n	8004a00 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049c2:	2300      	movs	r3, #0
 80049c4:	60bb      	str	r3, [r7, #8]
 80049c6:	4b11      	ldr	r3, [pc, #68]	; (8004a0c <HAL_TIM_MspPostInit+0x6c>)
 80049c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ca:	4a10      	ldr	r2, [pc, #64]	; (8004a0c <HAL_TIM_MspPostInit+0x6c>)
 80049cc:	f043 0301 	orr.w	r3, r3, #1
 80049d0:	6313      	str	r3, [r2, #48]	; 0x30
 80049d2:	4b0e      	ldr	r3, [pc, #56]	; (8004a0c <HAL_TIM_MspPostInit+0x6c>)
 80049d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	60bb      	str	r3, [r7, #8]
 80049dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80049de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049e4:	2302      	movs	r3, #2
 80049e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049e8:	2300      	movs	r3, #0
 80049ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049ec:	2300      	movs	r3, #0
 80049ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80049f0:	2301      	movs	r3, #1
 80049f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049f4:	f107 030c 	add.w	r3, r7, #12
 80049f8:	4619      	mov	r1, r3
 80049fa:	4805      	ldr	r0, [pc, #20]	; (8004a10 <HAL_TIM_MspPostInit+0x70>)
 80049fc:	f000 fc98 	bl	8005330 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004a00:	bf00      	nop
 8004a02:	3720      	adds	r7, #32
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40010000 	.word	0x40010000
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	40020000 	.word	0x40020000

08004a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b090      	sub	sp, #64	; 0x40
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	605a      	str	r2, [r3, #4]
 8004a26:	609a      	str	r2, [r3, #8]
 8004a28:	60da      	str	r2, [r3, #12]
 8004a2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a76      	ldr	r2, [pc, #472]	; (8004c0c <HAL_UART_MspInit+0x1f8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d153      	bne.n	8004ade <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a36:	2300      	movs	r3, #0
 8004a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a3a:	4b75      	ldr	r3, [pc, #468]	; (8004c10 <HAL_UART_MspInit+0x1fc>)
 8004a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3e:	4a74      	ldr	r2, [pc, #464]	; (8004c10 <HAL_UART_MspInit+0x1fc>)
 8004a40:	f043 0310 	orr.w	r3, r3, #16
 8004a44:	6453      	str	r3, [r2, #68]	; 0x44
 8004a46:	4b72      	ldr	r3, [pc, #456]	; (8004c10 <HAL_UART_MspInit+0x1fc>)
 8004a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4a:	f003 0310 	and.w	r3, r3, #16
 8004a4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a50:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a52:	2300      	movs	r3, #0
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
 8004a56:	4b6e      	ldr	r3, [pc, #440]	; (8004c10 <HAL_UART_MspInit+0x1fc>)
 8004a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5a:	4a6d      	ldr	r2, [pc, #436]	; (8004c10 <HAL_UART_MspInit+0x1fc>)
 8004a5c:	f043 0301 	orr.w	r3, r3, #1
 8004a60:	6313      	str	r3, [r2, #48]	; 0x30
 8004a62:	4b6b      	ldr	r3, [pc, #428]	; (8004c10 <HAL_UART_MspInit+0x1fc>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a6e:	2300      	movs	r3, #0
 8004a70:	623b      	str	r3, [r7, #32]
 8004a72:	4b67      	ldr	r3, [pc, #412]	; (8004c10 <HAL_UART_MspInit+0x1fc>)
 8004a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a76:	4a66      	ldr	r2, [pc, #408]	; (8004c10 <HAL_UART_MspInit+0x1fc>)
 8004a78:	f043 0302 	orr.w	r3, r3, #2
 8004a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a7e:	4b64      	ldr	r3, [pc, #400]	; (8004c10 <HAL_UART_MspInit+0x1fc>)
 8004a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	623b      	str	r3, [r7, #32]
 8004a88:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a90:	2302      	movs	r3, #2
 8004a92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a94:	2300      	movs	r3, #0
 8004a96:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a9c:	2307      	movs	r3, #7
 8004a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	485b      	ldr	r0, [pc, #364]	; (8004c14 <HAL_UART_MspInit+0x200>)
 8004aa8:	f000 fc42 	bl	8005330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004aac:	2380      	movs	r3, #128	; 0x80
 8004aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004abc:	2307      	movs	r3, #7
 8004abe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ac0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4854      	ldr	r0, [pc, #336]	; (8004c18 <HAL_UART_MspInit+0x204>)
 8004ac8:	f000 fc32 	bl	8005330 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004acc:	2200      	movs	r2, #0
 8004ace:	2100      	movs	r1, #0
 8004ad0:	2025      	movs	r0, #37	; 0x25
 8004ad2:	f000 fb64 	bl	800519e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004ad6:	2025      	movs	r0, #37	; 0x25
 8004ad8:	f000 fb7d 	bl	80051d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004adc:	e091      	b.n	8004c02 <HAL_UART_MspInit+0x1ee>
  else if(huart->Instance==USART2)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a4e      	ldr	r2, [pc, #312]	; (8004c1c <HAL_UART_MspInit+0x208>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d134      	bne.n	8004b52 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004ae8:	2300      	movs	r3, #0
 8004aea:	61fb      	str	r3, [r7, #28]
 8004aec:	4b48      	ldr	r3, [pc, #288]	; (8004c10 <HAL_UART_MspInit+0x1fc>)
 8004aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af0:	4a47      	ldr	r2, [pc, #284]	; (8004c10 <HAL_UART_MspInit+0x1fc>)
 8004af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004af6:	6413      	str	r3, [r2, #64]	; 0x40
 8004af8:	4b45      	ldr	r3, [pc, #276]	; (8004c10 <HAL_UART_MspInit+0x1fc>)
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b00:	61fb      	str	r3, [r7, #28]
 8004b02:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b04:	2300      	movs	r3, #0
 8004b06:	61bb      	str	r3, [r7, #24]
 8004b08:	4b41      	ldr	r3, [pc, #260]	; (8004c10 <HAL_UART_MspInit+0x1fc>)
 8004b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0c:	4a40      	ldr	r2, [pc, #256]	; (8004c10 <HAL_UART_MspInit+0x1fc>)
 8004b0e:	f043 0301 	orr.w	r3, r3, #1
 8004b12:	6313      	str	r3, [r2, #48]	; 0x30
 8004b14:	4b3e      	ldr	r3, [pc, #248]	; (8004c10 <HAL_UART_MspInit+0x1fc>)
 8004b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	61bb      	str	r3, [r7, #24]
 8004b1e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004b20:	230c      	movs	r3, #12
 8004b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b24:	2302      	movs	r3, #2
 8004b26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004b30:	2307      	movs	r3, #7
 8004b32:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4836      	ldr	r0, [pc, #216]	; (8004c14 <HAL_UART_MspInit+0x200>)
 8004b3c:	f000 fbf8 	bl	8005330 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004b40:	2200      	movs	r2, #0
 8004b42:	2100      	movs	r1, #0
 8004b44:	2026      	movs	r0, #38	; 0x26
 8004b46:	f000 fb2a 	bl	800519e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004b4a:	2026      	movs	r0, #38	; 0x26
 8004b4c:	f000 fb43 	bl	80051d6 <HAL_NVIC_EnableIRQ>
}
 8004b50:	e057      	b.n	8004c02 <HAL_UART_MspInit+0x1ee>
  else if(huart->Instance==USART6)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a32      	ldr	r2, [pc, #200]	; (8004c20 <HAL_UART_MspInit+0x20c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d152      	bne.n	8004c02 <HAL_UART_MspInit+0x1ee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	4b2b      	ldr	r3, [pc, #172]	; (8004c10 <HAL_UART_MspInit+0x1fc>)
 8004b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b64:	4a2a      	ldr	r2, [pc, #168]	; (8004c10 <HAL_UART_MspInit+0x1fc>)
 8004b66:	f043 0320 	orr.w	r3, r3, #32
 8004b6a:	6453      	str	r3, [r2, #68]	; 0x44
 8004b6c:	4b28      	ldr	r3, [pc, #160]	; (8004c10 <HAL_UART_MspInit+0x1fc>)
 8004b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b70:	f003 0320 	and.w	r3, r3, #32
 8004b74:	617b      	str	r3, [r7, #20]
 8004b76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b78:	2300      	movs	r3, #0
 8004b7a:	613b      	str	r3, [r7, #16]
 8004b7c:	4b24      	ldr	r3, [pc, #144]	; (8004c10 <HAL_UART_MspInit+0x1fc>)
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b80:	4a23      	ldr	r2, [pc, #140]	; (8004c10 <HAL_UART_MspInit+0x1fc>)
 8004b82:	f043 0304 	orr.w	r3, r3, #4
 8004b86:	6313      	str	r3, [r2, #48]	; 0x30
 8004b88:	4b21      	ldr	r3, [pc, #132]	; (8004c10 <HAL_UART_MspInit+0x1fc>)
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	f003 0304 	and.w	r3, r3, #4
 8004b90:	613b      	str	r3, [r7, #16]
 8004b92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b94:	2300      	movs	r3, #0
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	4b1d      	ldr	r3, [pc, #116]	; (8004c10 <HAL_UART_MspInit+0x1fc>)
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9c:	4a1c      	ldr	r2, [pc, #112]	; (8004c10 <HAL_UART_MspInit+0x1fc>)
 8004b9e:	f043 0301 	orr.w	r3, r3, #1
 8004ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8004ba4:	4b1a      	ldr	r3, [pc, #104]	; (8004c10 <HAL_UART_MspInit+0x1fc>)
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	60fb      	str	r3, [r7, #12]
 8004bae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004bb0:	2340      	movs	r3, #64	; 0x40
 8004bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004bc0:	2308      	movs	r3, #8
 8004bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bc8:	4619      	mov	r1, r3
 8004bca:	4816      	ldr	r0, [pc, #88]	; (8004c24 <HAL_UART_MspInit+0x210>)
 8004bcc:	f000 fbb0 	bl	8005330 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bde:	2303      	movs	r3, #3
 8004be0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004be2:	2308      	movs	r3, #8
 8004be4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004be6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bea:	4619      	mov	r1, r3
 8004bec:	4809      	ldr	r0, [pc, #36]	; (8004c14 <HAL_UART_MspInit+0x200>)
 8004bee:	f000 fb9f 	bl	8005330 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	2047      	movs	r0, #71	; 0x47
 8004bf8:	f000 fad1 	bl	800519e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004bfc:	2047      	movs	r0, #71	; 0x47
 8004bfe:	f000 faea 	bl	80051d6 <HAL_NVIC_EnableIRQ>
}
 8004c02:	bf00      	nop
 8004c04:	3740      	adds	r7, #64	; 0x40
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40011000 	.word	0x40011000
 8004c10:	40023800 	.word	0x40023800
 8004c14:	40020000 	.word	0x40020000
 8004c18:	40020400 	.word	0x40020400
 8004c1c:	40004400 	.word	0x40004400
 8004c20:	40011400 	.word	0x40011400
 8004c24:	40020800 	.word	0x40020800

08004c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004c2c:	e7fe      	b.n	8004c2c <NMI_Handler+0x4>

08004c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c32:	e7fe      	b.n	8004c32 <HardFault_Handler+0x4>

08004c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c38:	e7fe      	b.n	8004c38 <MemManage_Handler+0x4>

08004c3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c3e:	e7fe      	b.n	8004c3e <BusFault_Handler+0x4>

08004c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c44:	e7fe      	b.n	8004c44 <UsageFault_Handler+0x4>

08004c46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c46:	b480      	push	{r7}
 8004c48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c4a:	bf00      	nop
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c58:	bf00      	nop
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c62:	b480      	push	{r7}
 8004c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c66:	bf00      	nop
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c74:	f000 f974 	bl	8004f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c78:	bf00      	nop
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <USART1_IRQHandler>:
  */
/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004c80:	4802      	ldr	r0, [pc, #8]	; (8004c8c <USART1_IRQHandler+0x10>)
 8004c82:	f003 f8ed 	bl	8007e60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004c86:	bf00      	nop
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	200004b8 	.word	0x200004b8

08004c90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004c94:	4802      	ldr	r0, [pc, #8]	; (8004ca0 <USART2_IRQHandler+0x10>)
 8004c96:	f003 f8e3 	bl	8007e60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004c9a:	bf00      	nop
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	200004fc 	.word	0x200004fc

08004ca4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004ca8:	4802      	ldr	r0, [pc, #8]	; (8004cb4 <USART6_IRQHandler+0x10>)
 8004caa:	f003 f8d9 	bl	8007e60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004cae:	bf00      	nop
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	20000540 	.word	0x20000540

08004cb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	af00      	add	r7, sp, #0
  return 1;
 8004cbc:	2301      	movs	r3, #1
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <_kill>:

int _kill(int pid, int sig)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004cd2:	f005 ff53 	bl	800ab7c <__errno>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2216      	movs	r2, #22
 8004cda:	601a      	str	r2, [r3, #0]
  return -1;
 8004cdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <_exit>:

void _exit (int status)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7ff ffe7 	bl	8004cc8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004cfa:	e7fe      	b.n	8004cfa <_exit+0x12>

08004cfc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d08:	2300      	movs	r3, #0
 8004d0a:	617b      	str	r3, [r7, #20]
 8004d0c:	e00a      	b.n	8004d24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004d0e:	f3af 8000 	nop.w
 8004d12:	4601      	mov	r1, r0
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	1c5a      	adds	r2, r3, #1
 8004d18:	60ba      	str	r2, [r7, #8]
 8004d1a:	b2ca      	uxtb	r2, r1
 8004d1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	3301      	adds	r3, #1
 8004d22:	617b      	str	r3, [r7, #20]
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	dbf0      	blt.n	8004d0e <_read+0x12>
  }

  return len;
 8004d2c:	687b      	ldr	r3, [r7, #4]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b086      	sub	sp, #24
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	60f8      	str	r0, [r7, #12]
 8004d3e:	60b9      	str	r1, [r7, #8]
 8004d40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d42:	2300      	movs	r3, #0
 8004d44:	617b      	str	r3, [r7, #20]
 8004d46:	e009      	b.n	8004d5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	60ba      	str	r2, [r7, #8]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	dbf1      	blt.n	8004d48 <_write+0x12>
  }
  return len;
 8004d64:	687b      	ldr	r3, [r7, #4]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3718      	adds	r7, #24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <_close>:

int _close(int file)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d96:	605a      	str	r2, [r3, #4]
  return 0;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <_isatty>:

int _isatty(int file)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b083      	sub	sp, #12
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004dae:	2301      	movs	r3, #1
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004de0:	4a14      	ldr	r2, [pc, #80]	; (8004e34 <_sbrk+0x5c>)
 8004de2:	4b15      	ldr	r3, [pc, #84]	; (8004e38 <_sbrk+0x60>)
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004dec:	4b13      	ldr	r3, [pc, #76]	; (8004e3c <_sbrk+0x64>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d102      	bne.n	8004dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004df4:	4b11      	ldr	r3, [pc, #68]	; (8004e3c <_sbrk+0x64>)
 8004df6:	4a12      	ldr	r2, [pc, #72]	; (8004e40 <_sbrk+0x68>)
 8004df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004dfa:	4b10      	ldr	r3, [pc, #64]	; (8004e3c <_sbrk+0x64>)
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4413      	add	r3, r2
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d207      	bcs.n	8004e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e08:	f005 feb8 	bl	800ab7c <__errno>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	220c      	movs	r2, #12
 8004e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e12:	f04f 33ff 	mov.w	r3, #4294967295
 8004e16:	e009      	b.n	8004e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e18:	4b08      	ldr	r3, [pc, #32]	; (8004e3c <_sbrk+0x64>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e1e:	4b07      	ldr	r3, [pc, #28]	; (8004e3c <_sbrk+0x64>)
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4413      	add	r3, r2
 8004e26:	4a05      	ldr	r2, [pc, #20]	; (8004e3c <_sbrk+0x64>)
 8004e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3718      	adds	r7, #24
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	20020000 	.word	0x20020000
 8004e38:	00000400 	.word	0x00000400
 8004e3c:	200007ac 	.word	0x200007ac
 8004e40:	20000900 	.word	0x20000900

08004e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e44:	b480      	push	{r7}
 8004e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e48:	4b06      	ldr	r3, [pc, #24]	; (8004e64 <SystemInit+0x20>)
 8004e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4e:	4a05      	ldr	r2, [pc, #20]	; (8004e64 <SystemInit+0x20>)
 8004e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e58:	bf00      	nop
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	e000ed00 	.word	0xe000ed00

08004e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004e68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ea0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004e6c:	480d      	ldr	r0, [pc, #52]	; (8004ea4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004e6e:	490e      	ldr	r1, [pc, #56]	; (8004ea8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004e70:	4a0e      	ldr	r2, [pc, #56]	; (8004eac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e74:	e002      	b.n	8004e7c <LoopCopyDataInit>

08004e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e7a:	3304      	adds	r3, #4

08004e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e80:	d3f9      	bcc.n	8004e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e82:	4a0b      	ldr	r2, [pc, #44]	; (8004eb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004e84:	4c0b      	ldr	r4, [pc, #44]	; (8004eb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e88:	e001      	b.n	8004e8e <LoopFillZerobss>

08004e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e8c:	3204      	adds	r2, #4

08004e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e90:	d3fb      	bcc.n	8004e8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004e92:	f7ff ffd7 	bl	8004e44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e96:	f005 fe77 	bl	800ab88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e9a:	f7fe ff27 	bl	8003cec <main>
  bx  lr    
 8004e9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004ea0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ea8:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8004eac:	0800e0d4 	.word	0x0800e0d4
  ldr r2, =_sbss
 8004eb0:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8004eb4:	20000900 	.word	0x20000900

08004eb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004eb8:	e7fe      	b.n	8004eb8 <ADC_IRQHandler>
	...

08004ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ec0:	4b0e      	ldr	r3, [pc, #56]	; (8004efc <HAL_Init+0x40>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a0d      	ldr	r2, [pc, #52]	; (8004efc <HAL_Init+0x40>)
 8004ec6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004eca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ecc:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <HAL_Init+0x40>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a0a      	ldr	r2, [pc, #40]	; (8004efc <HAL_Init+0x40>)
 8004ed2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ed6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ed8:	4b08      	ldr	r3, [pc, #32]	; (8004efc <HAL_Init+0x40>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a07      	ldr	r2, [pc, #28]	; (8004efc <HAL_Init+0x40>)
 8004ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ee2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ee4:	2003      	movs	r0, #3
 8004ee6:	f000 f94f 	bl	8005188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004eea:	2000      	movs	r0, #0
 8004eec:	f000 f808 	bl	8004f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ef0:	f7ff fc34 	bl	800475c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	40023c00 	.word	0x40023c00

08004f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f08:	4b12      	ldr	r3, [pc, #72]	; (8004f54 <HAL_InitTick+0x54>)
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	4b12      	ldr	r3, [pc, #72]	; (8004f58 <HAL_InitTick+0x58>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	4619      	mov	r1, r3
 8004f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 f967 	bl	80051f2 <HAL_SYSTICK_Config>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e00e      	b.n	8004f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b0f      	cmp	r3, #15
 8004f32:	d80a      	bhi.n	8004f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f34:	2200      	movs	r2, #0
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	f04f 30ff 	mov.w	r0, #4294967295
 8004f3c:	f000 f92f 	bl	800519e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f40:	4a06      	ldr	r2, [pc, #24]	; (8004f5c <HAL_InitTick+0x5c>)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
 8004f48:	e000      	b.n	8004f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	2000006c 	.word	0x2000006c
 8004f58:	20000074 	.word	0x20000074
 8004f5c:	20000070 	.word	0x20000070

08004f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f64:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <HAL_IncTick+0x20>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <HAL_IncTick+0x24>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4413      	add	r3, r2
 8004f70:	4a04      	ldr	r2, [pc, #16]	; (8004f84 <HAL_IncTick+0x24>)
 8004f72:	6013      	str	r3, [r2, #0]
}
 8004f74:	bf00      	nop
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	20000074 	.word	0x20000074
 8004f84:	200007b0 	.word	0x200007b0

08004f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8004f8c:	4b03      	ldr	r3, [pc, #12]	; (8004f9c <HAL_GetTick+0x14>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	200007b0 	.word	0x200007b0

08004fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004fa8:	f7ff ffee 	bl	8004f88 <HAL_GetTick>
 8004fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb8:	d005      	beq.n	8004fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004fba:	4b0a      	ldr	r3, [pc, #40]	; (8004fe4 <HAL_Delay+0x44>)
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004fc6:	bf00      	nop
 8004fc8:	f7ff ffde 	bl	8004f88 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d8f7      	bhi.n	8004fc8 <HAL_Delay+0x28>
  {
  }
}
 8004fd8:	bf00      	nop
 8004fda:	bf00      	nop
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20000074 	.word	0x20000074

08004fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ff8:	4b0c      	ldr	r3, [pc, #48]	; (800502c <__NVIC_SetPriorityGrouping+0x44>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005004:	4013      	ands	r3, r2
 8005006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800501a:	4a04      	ldr	r2, [pc, #16]	; (800502c <__NVIC_SetPriorityGrouping+0x44>)
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	60d3      	str	r3, [r2, #12]
}
 8005020:	bf00      	nop
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	e000ed00 	.word	0xe000ed00

08005030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005034:	4b04      	ldr	r3, [pc, #16]	; (8005048 <__NVIC_GetPriorityGrouping+0x18>)
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	0a1b      	lsrs	r3, r3, #8
 800503a:	f003 0307 	and.w	r3, r3, #7
}
 800503e:	4618      	mov	r0, r3
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	e000ed00 	.word	0xe000ed00

0800504c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	4603      	mov	r3, r0
 8005054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800505a:	2b00      	cmp	r3, #0
 800505c:	db0b      	blt.n	8005076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800505e:	79fb      	ldrb	r3, [r7, #7]
 8005060:	f003 021f 	and.w	r2, r3, #31
 8005064:	4907      	ldr	r1, [pc, #28]	; (8005084 <__NVIC_EnableIRQ+0x38>)
 8005066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506a:	095b      	lsrs	r3, r3, #5
 800506c:	2001      	movs	r0, #1
 800506e:	fa00 f202 	lsl.w	r2, r0, r2
 8005072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005076:	bf00      	nop
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	e000e100 	.word	0xe000e100

08005088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	4603      	mov	r3, r0
 8005090:	6039      	str	r1, [r7, #0]
 8005092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005098:	2b00      	cmp	r3, #0
 800509a:	db0a      	blt.n	80050b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	b2da      	uxtb	r2, r3
 80050a0:	490c      	ldr	r1, [pc, #48]	; (80050d4 <__NVIC_SetPriority+0x4c>)
 80050a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a6:	0112      	lsls	r2, r2, #4
 80050a8:	b2d2      	uxtb	r2, r2
 80050aa:	440b      	add	r3, r1
 80050ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050b0:	e00a      	b.n	80050c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	4908      	ldr	r1, [pc, #32]	; (80050d8 <__NVIC_SetPriority+0x50>)
 80050b8:	79fb      	ldrb	r3, [r7, #7]
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	3b04      	subs	r3, #4
 80050c0:	0112      	lsls	r2, r2, #4
 80050c2:	b2d2      	uxtb	r2, r2
 80050c4:	440b      	add	r3, r1
 80050c6:	761a      	strb	r2, [r3, #24]
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	e000e100 	.word	0xe000e100
 80050d8:	e000ed00 	.word	0xe000ed00

080050dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050dc:	b480      	push	{r7}
 80050de:	b089      	sub	sp, #36	; 0x24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f003 0307 	and.w	r3, r3, #7
 80050ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	f1c3 0307 	rsb	r3, r3, #7
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	bf28      	it	cs
 80050fa:	2304      	movcs	r3, #4
 80050fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	3304      	adds	r3, #4
 8005102:	2b06      	cmp	r3, #6
 8005104:	d902      	bls.n	800510c <NVIC_EncodePriority+0x30>
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	3b03      	subs	r3, #3
 800510a:	e000      	b.n	800510e <NVIC_EncodePriority+0x32>
 800510c:	2300      	movs	r3, #0
 800510e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005110:	f04f 32ff 	mov.w	r2, #4294967295
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	fa02 f303 	lsl.w	r3, r2, r3
 800511a:	43da      	mvns	r2, r3
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	401a      	ands	r2, r3
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005124:	f04f 31ff 	mov.w	r1, #4294967295
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	fa01 f303 	lsl.w	r3, r1, r3
 800512e:	43d9      	mvns	r1, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005134:	4313      	orrs	r3, r2
         );
}
 8005136:	4618      	mov	r0, r3
 8005138:	3724      	adds	r7, #36	; 0x24
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
	...

08005144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3b01      	subs	r3, #1
 8005150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005154:	d301      	bcc.n	800515a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005156:	2301      	movs	r3, #1
 8005158:	e00f      	b.n	800517a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800515a:	4a0a      	ldr	r2, [pc, #40]	; (8005184 <SysTick_Config+0x40>)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3b01      	subs	r3, #1
 8005160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005162:	210f      	movs	r1, #15
 8005164:	f04f 30ff 	mov.w	r0, #4294967295
 8005168:	f7ff ff8e 	bl	8005088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800516c:	4b05      	ldr	r3, [pc, #20]	; (8005184 <SysTick_Config+0x40>)
 800516e:	2200      	movs	r2, #0
 8005170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005172:	4b04      	ldr	r3, [pc, #16]	; (8005184 <SysTick_Config+0x40>)
 8005174:	2207      	movs	r2, #7
 8005176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	e000e010 	.word	0xe000e010

08005188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7ff ff29 	bl	8004fe8 <__NVIC_SetPriorityGrouping>
}
 8005196:	bf00      	nop
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800519e:	b580      	push	{r7, lr}
 80051a0:	b086      	sub	sp, #24
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	4603      	mov	r3, r0
 80051a6:	60b9      	str	r1, [r7, #8]
 80051a8:	607a      	str	r2, [r7, #4]
 80051aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80051b0:	f7ff ff3e 	bl	8005030 <__NVIC_GetPriorityGrouping>
 80051b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	68b9      	ldr	r1, [r7, #8]
 80051ba:	6978      	ldr	r0, [r7, #20]
 80051bc:	f7ff ff8e 	bl	80050dc <NVIC_EncodePriority>
 80051c0:	4602      	mov	r2, r0
 80051c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051c6:	4611      	mov	r1, r2
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7ff ff5d 	bl	8005088 <__NVIC_SetPriority>
}
 80051ce:	bf00      	nop
 80051d0:	3718      	adds	r7, #24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b082      	sub	sp, #8
 80051da:	af00      	add	r7, sp, #0
 80051dc:	4603      	mov	r3, r0
 80051de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7ff ff31 	bl	800504c <__NVIC_EnableIRQ>
}
 80051ea:	bf00      	nop
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b082      	sub	sp, #8
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7ff ffa2 	bl	8005144 <SysTick_Config>
 8005200:	4603      	mov	r3, r0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b084      	sub	sp, #16
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005216:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005218:	f7ff feb6 	bl	8004f88 <HAL_GetTick>
 800521c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d008      	beq.n	800523c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2280      	movs	r2, #128	; 0x80
 800522e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e052      	b.n	80052e2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0216 	bic.w	r2, r2, #22
 800524a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	695a      	ldr	r2, [r3, #20]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800525a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005260:	2b00      	cmp	r3, #0
 8005262:	d103      	bne.n	800526c <HAL_DMA_Abort+0x62>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005268:	2b00      	cmp	r3, #0
 800526a:	d007      	beq.n	800527c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 0208 	bic.w	r2, r2, #8
 800527a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 0201 	bic.w	r2, r2, #1
 800528a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800528c:	e013      	b.n	80052b6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800528e:	f7ff fe7b 	bl	8004f88 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b05      	cmp	r3, #5
 800529a:	d90c      	bls.n	80052b6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2220      	movs	r2, #32
 80052a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2203      	movs	r2, #3
 80052a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e015      	b.n	80052e2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1e4      	bne.n	800528e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c8:	223f      	movs	r2, #63	; 0x3f
 80052ca:	409a      	lsls	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d004      	beq.n	8005308 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2280      	movs	r2, #128	; 0x80
 8005302:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e00c      	b.n	8005322 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2205      	movs	r2, #5
 800530c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0201 	bic.w	r2, r2, #1
 800531e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
	...

08005330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005330:	b480      	push	{r7}
 8005332:	b089      	sub	sp, #36	; 0x24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800533a:	2300      	movs	r3, #0
 800533c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800533e:	2300      	movs	r3, #0
 8005340:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005342:	2300      	movs	r3, #0
 8005344:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005346:	2300      	movs	r3, #0
 8005348:	61fb      	str	r3, [r7, #28]
 800534a:	e159      	b.n	8005600 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800534c:	2201      	movs	r2, #1
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	fa02 f303 	lsl.w	r3, r2, r3
 8005354:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	4013      	ands	r3, r2
 800535e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	429a      	cmp	r2, r3
 8005366:	f040 8148 	bne.w	80055fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	2b01      	cmp	r3, #1
 8005374:	d005      	beq.n	8005382 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800537e:	2b02      	cmp	r3, #2
 8005380:	d130      	bne.n	80053e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	2203      	movs	r2, #3
 800538e:	fa02 f303 	lsl.w	r3, r2, r3
 8005392:	43db      	mvns	r3, r3
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	4013      	ands	r3, r2
 8005398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68da      	ldr	r2, [r3, #12]
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	fa02 f303 	lsl.w	r3, r2, r3
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053b8:	2201      	movs	r2, #1
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	fa02 f303 	lsl.w	r3, r2, r3
 80053c0:	43db      	mvns	r3, r3
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	4013      	ands	r3, r2
 80053c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	091b      	lsrs	r3, r3, #4
 80053ce:	f003 0201 	and.w	r2, r3, #1
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	4313      	orrs	r3, r2
 80053dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f003 0303 	and.w	r3, r3, #3
 80053ec:	2b03      	cmp	r3, #3
 80053ee:	d017      	beq.n	8005420 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	2203      	movs	r2, #3
 80053fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005400:	43db      	mvns	r3, r3
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	4013      	ands	r3, r2
 8005406:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	fa02 f303 	lsl.w	r3, r2, r3
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	4313      	orrs	r3, r2
 8005418:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f003 0303 	and.w	r3, r3, #3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d123      	bne.n	8005474 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	08da      	lsrs	r2, r3, #3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3208      	adds	r2, #8
 8005434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005438:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	f003 0307 	and.w	r3, r3, #7
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	220f      	movs	r2, #15
 8005444:	fa02 f303 	lsl.w	r3, r2, r3
 8005448:	43db      	mvns	r3, r3
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	4013      	ands	r3, r2
 800544e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	691a      	ldr	r2, [r3, #16]
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	f003 0307 	and.w	r3, r3, #7
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	fa02 f303 	lsl.w	r3, r2, r3
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	4313      	orrs	r3, r2
 8005464:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	08da      	lsrs	r2, r3, #3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	3208      	adds	r2, #8
 800546e:	69b9      	ldr	r1, [r7, #24]
 8005470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	2203      	movs	r2, #3
 8005480:	fa02 f303 	lsl.w	r3, r2, r3
 8005484:	43db      	mvns	r3, r3
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	4013      	ands	r3, r2
 800548a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f003 0203 	and.w	r2, r3, #3
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	fa02 f303 	lsl.w	r3, r2, r3
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	4313      	orrs	r3, r2
 80054a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f000 80a2 	beq.w	80055fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]
 80054ba:	4b57      	ldr	r3, [pc, #348]	; (8005618 <HAL_GPIO_Init+0x2e8>)
 80054bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054be:	4a56      	ldr	r2, [pc, #344]	; (8005618 <HAL_GPIO_Init+0x2e8>)
 80054c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054c4:	6453      	str	r3, [r2, #68]	; 0x44
 80054c6:	4b54      	ldr	r3, [pc, #336]	; (8005618 <HAL_GPIO_Init+0x2e8>)
 80054c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054d2:	4a52      	ldr	r2, [pc, #328]	; (800561c <HAL_GPIO_Init+0x2ec>)
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	089b      	lsrs	r3, r3, #2
 80054d8:	3302      	adds	r3, #2
 80054da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	f003 0303 	and.w	r3, r3, #3
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	220f      	movs	r2, #15
 80054ea:	fa02 f303 	lsl.w	r3, r2, r3
 80054ee:	43db      	mvns	r3, r3
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	4013      	ands	r3, r2
 80054f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a49      	ldr	r2, [pc, #292]	; (8005620 <HAL_GPIO_Init+0x2f0>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d019      	beq.n	8005532 <HAL_GPIO_Init+0x202>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a48      	ldr	r2, [pc, #288]	; (8005624 <HAL_GPIO_Init+0x2f4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d013      	beq.n	800552e <HAL_GPIO_Init+0x1fe>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a47      	ldr	r2, [pc, #284]	; (8005628 <HAL_GPIO_Init+0x2f8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00d      	beq.n	800552a <HAL_GPIO_Init+0x1fa>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a46      	ldr	r2, [pc, #280]	; (800562c <HAL_GPIO_Init+0x2fc>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d007      	beq.n	8005526 <HAL_GPIO_Init+0x1f6>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a45      	ldr	r2, [pc, #276]	; (8005630 <HAL_GPIO_Init+0x300>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d101      	bne.n	8005522 <HAL_GPIO_Init+0x1f2>
 800551e:	2304      	movs	r3, #4
 8005520:	e008      	b.n	8005534 <HAL_GPIO_Init+0x204>
 8005522:	2307      	movs	r3, #7
 8005524:	e006      	b.n	8005534 <HAL_GPIO_Init+0x204>
 8005526:	2303      	movs	r3, #3
 8005528:	e004      	b.n	8005534 <HAL_GPIO_Init+0x204>
 800552a:	2302      	movs	r3, #2
 800552c:	e002      	b.n	8005534 <HAL_GPIO_Init+0x204>
 800552e:	2301      	movs	r3, #1
 8005530:	e000      	b.n	8005534 <HAL_GPIO_Init+0x204>
 8005532:	2300      	movs	r3, #0
 8005534:	69fa      	ldr	r2, [r7, #28]
 8005536:	f002 0203 	and.w	r2, r2, #3
 800553a:	0092      	lsls	r2, r2, #2
 800553c:	4093      	lsls	r3, r2
 800553e:	69ba      	ldr	r2, [r7, #24]
 8005540:	4313      	orrs	r3, r2
 8005542:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005544:	4935      	ldr	r1, [pc, #212]	; (800561c <HAL_GPIO_Init+0x2ec>)
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	089b      	lsrs	r3, r3, #2
 800554a:	3302      	adds	r3, #2
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005552:	4b38      	ldr	r3, [pc, #224]	; (8005634 <HAL_GPIO_Init+0x304>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	43db      	mvns	r3, r3
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	4013      	ands	r3, r2
 8005560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	4313      	orrs	r3, r2
 8005574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005576:	4a2f      	ldr	r2, [pc, #188]	; (8005634 <HAL_GPIO_Init+0x304>)
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800557c:	4b2d      	ldr	r3, [pc, #180]	; (8005634 <HAL_GPIO_Init+0x304>)
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	43db      	mvns	r3, r3
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	4013      	ands	r3, r2
 800558a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d003      	beq.n	80055a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	4313      	orrs	r3, r2
 800559e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80055a0:	4a24      	ldr	r2, [pc, #144]	; (8005634 <HAL_GPIO_Init+0x304>)
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80055a6:	4b23      	ldr	r3, [pc, #140]	; (8005634 <HAL_GPIO_Init+0x304>)
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	43db      	mvns	r3, r3
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	4013      	ands	r3, r2
 80055b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80055c2:	69ba      	ldr	r2, [r7, #24]
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80055ca:	4a1a      	ldr	r2, [pc, #104]	; (8005634 <HAL_GPIO_Init+0x304>)
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80055d0:	4b18      	ldr	r3, [pc, #96]	; (8005634 <HAL_GPIO_Init+0x304>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	43db      	mvns	r3, r3
 80055da:	69ba      	ldr	r2, [r7, #24]
 80055dc:	4013      	ands	r3, r2
 80055de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d003      	beq.n	80055f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80055f4:	4a0f      	ldr	r2, [pc, #60]	; (8005634 <HAL_GPIO_Init+0x304>)
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	3301      	adds	r3, #1
 80055fe:	61fb      	str	r3, [r7, #28]
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	2b0f      	cmp	r3, #15
 8005604:	f67f aea2 	bls.w	800534c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005608:	bf00      	nop
 800560a:	bf00      	nop
 800560c:	3724      	adds	r7, #36	; 0x24
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	40023800 	.word	0x40023800
 800561c:	40013800 	.word	0x40013800
 8005620:	40020000 	.word	0x40020000
 8005624:	40020400 	.word	0x40020400
 8005628:	40020800 	.word	0x40020800
 800562c:	40020c00 	.word	0x40020c00
 8005630:	40021000 	.word	0x40021000
 8005634:	40013c00 	.word	0x40013c00

08005638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	807b      	strh	r3, [r7, #2]
 8005644:	4613      	mov	r3, r2
 8005646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005648:	787b      	ldrb	r3, [r7, #1]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800564e:	887a      	ldrh	r2, [r7, #2]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005654:	e003      	b.n	800565e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005656:	887b      	ldrh	r3, [r7, #2]
 8005658:	041a      	lsls	r2, r3, #16
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	619a      	str	r2, [r3, #24]
}
 800565e:	bf00      	nop
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
	...

0800566c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e267      	b.n	8005b4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	d075      	beq.n	8005776 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800568a:	4b88      	ldr	r3, [pc, #544]	; (80058ac <HAL_RCC_OscConfig+0x240>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f003 030c 	and.w	r3, r3, #12
 8005692:	2b04      	cmp	r3, #4
 8005694:	d00c      	beq.n	80056b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005696:	4b85      	ldr	r3, [pc, #532]	; (80058ac <HAL_RCC_OscConfig+0x240>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800569e:	2b08      	cmp	r3, #8
 80056a0:	d112      	bne.n	80056c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056a2:	4b82      	ldr	r3, [pc, #520]	; (80058ac <HAL_RCC_OscConfig+0x240>)
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056ae:	d10b      	bne.n	80056c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056b0:	4b7e      	ldr	r3, [pc, #504]	; (80058ac <HAL_RCC_OscConfig+0x240>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d05b      	beq.n	8005774 <HAL_RCC_OscConfig+0x108>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d157      	bne.n	8005774 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e242      	b.n	8005b4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056d0:	d106      	bne.n	80056e0 <HAL_RCC_OscConfig+0x74>
 80056d2:	4b76      	ldr	r3, [pc, #472]	; (80058ac <HAL_RCC_OscConfig+0x240>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a75      	ldr	r2, [pc, #468]	; (80058ac <HAL_RCC_OscConfig+0x240>)
 80056d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056dc:	6013      	str	r3, [r2, #0]
 80056de:	e01d      	b.n	800571c <HAL_RCC_OscConfig+0xb0>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056e8:	d10c      	bne.n	8005704 <HAL_RCC_OscConfig+0x98>
 80056ea:	4b70      	ldr	r3, [pc, #448]	; (80058ac <HAL_RCC_OscConfig+0x240>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a6f      	ldr	r2, [pc, #444]	; (80058ac <HAL_RCC_OscConfig+0x240>)
 80056f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	4b6d      	ldr	r3, [pc, #436]	; (80058ac <HAL_RCC_OscConfig+0x240>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a6c      	ldr	r2, [pc, #432]	; (80058ac <HAL_RCC_OscConfig+0x240>)
 80056fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005700:	6013      	str	r3, [r2, #0]
 8005702:	e00b      	b.n	800571c <HAL_RCC_OscConfig+0xb0>
 8005704:	4b69      	ldr	r3, [pc, #420]	; (80058ac <HAL_RCC_OscConfig+0x240>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a68      	ldr	r2, [pc, #416]	; (80058ac <HAL_RCC_OscConfig+0x240>)
 800570a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	4b66      	ldr	r3, [pc, #408]	; (80058ac <HAL_RCC_OscConfig+0x240>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a65      	ldr	r2, [pc, #404]	; (80058ac <HAL_RCC_OscConfig+0x240>)
 8005716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800571a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d013      	beq.n	800574c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005724:	f7ff fc30 	bl	8004f88 <HAL_GetTick>
 8005728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800572c:	f7ff fc2c 	bl	8004f88 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b64      	cmp	r3, #100	; 0x64
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e207      	b.n	8005b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800573e:	4b5b      	ldr	r3, [pc, #364]	; (80058ac <HAL_RCC_OscConfig+0x240>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0f0      	beq.n	800572c <HAL_RCC_OscConfig+0xc0>
 800574a:	e014      	b.n	8005776 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800574c:	f7ff fc1c 	bl	8004f88 <HAL_GetTick>
 8005750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005752:	e008      	b.n	8005766 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005754:	f7ff fc18 	bl	8004f88 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b64      	cmp	r3, #100	; 0x64
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e1f3      	b.n	8005b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005766:	4b51      	ldr	r3, [pc, #324]	; (80058ac <HAL_RCC_OscConfig+0x240>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1f0      	bne.n	8005754 <HAL_RCC_OscConfig+0xe8>
 8005772:	e000      	b.n	8005776 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d063      	beq.n	800584a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005782:	4b4a      	ldr	r3, [pc, #296]	; (80058ac <HAL_RCC_OscConfig+0x240>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 030c 	and.w	r3, r3, #12
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00b      	beq.n	80057a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800578e:	4b47      	ldr	r3, [pc, #284]	; (80058ac <HAL_RCC_OscConfig+0x240>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005796:	2b08      	cmp	r3, #8
 8005798:	d11c      	bne.n	80057d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800579a:	4b44      	ldr	r3, [pc, #272]	; (80058ac <HAL_RCC_OscConfig+0x240>)
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d116      	bne.n	80057d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057a6:	4b41      	ldr	r3, [pc, #260]	; (80058ac <HAL_RCC_OscConfig+0x240>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d005      	beq.n	80057be <HAL_RCC_OscConfig+0x152>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d001      	beq.n	80057be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e1c7      	b.n	8005b4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057be:	4b3b      	ldr	r3, [pc, #236]	; (80058ac <HAL_RCC_OscConfig+0x240>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	4937      	ldr	r1, [pc, #220]	; (80058ac <HAL_RCC_OscConfig+0x240>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057d2:	e03a      	b.n	800584a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d020      	beq.n	800581e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057dc:	4b34      	ldr	r3, [pc, #208]	; (80058b0 <HAL_RCC_OscConfig+0x244>)
 80057de:	2201      	movs	r2, #1
 80057e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e2:	f7ff fbd1 	bl	8004f88 <HAL_GetTick>
 80057e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057e8:	e008      	b.n	80057fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057ea:	f7ff fbcd 	bl	8004f88 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d901      	bls.n	80057fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e1a8      	b.n	8005b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057fc:	4b2b      	ldr	r3, [pc, #172]	; (80058ac <HAL_RCC_OscConfig+0x240>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d0f0      	beq.n	80057ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005808:	4b28      	ldr	r3, [pc, #160]	; (80058ac <HAL_RCC_OscConfig+0x240>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	4925      	ldr	r1, [pc, #148]	; (80058ac <HAL_RCC_OscConfig+0x240>)
 8005818:	4313      	orrs	r3, r2
 800581a:	600b      	str	r3, [r1, #0]
 800581c:	e015      	b.n	800584a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800581e:	4b24      	ldr	r3, [pc, #144]	; (80058b0 <HAL_RCC_OscConfig+0x244>)
 8005820:	2200      	movs	r2, #0
 8005822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005824:	f7ff fbb0 	bl	8004f88 <HAL_GetTick>
 8005828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800582a:	e008      	b.n	800583e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800582c:	f7ff fbac 	bl	8004f88 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e187      	b.n	8005b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800583e:	4b1b      	ldr	r3, [pc, #108]	; (80058ac <HAL_RCC_OscConfig+0x240>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1f0      	bne.n	800582c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0308 	and.w	r3, r3, #8
 8005852:	2b00      	cmp	r3, #0
 8005854:	d036      	beq.n	80058c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d016      	beq.n	800588c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800585e:	4b15      	ldr	r3, [pc, #84]	; (80058b4 <HAL_RCC_OscConfig+0x248>)
 8005860:	2201      	movs	r2, #1
 8005862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005864:	f7ff fb90 	bl	8004f88 <HAL_GetTick>
 8005868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800586a:	e008      	b.n	800587e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800586c:	f7ff fb8c 	bl	8004f88 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	2b02      	cmp	r3, #2
 8005878:	d901      	bls.n	800587e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e167      	b.n	8005b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800587e:	4b0b      	ldr	r3, [pc, #44]	; (80058ac <HAL_RCC_OscConfig+0x240>)
 8005880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d0f0      	beq.n	800586c <HAL_RCC_OscConfig+0x200>
 800588a:	e01b      	b.n	80058c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800588c:	4b09      	ldr	r3, [pc, #36]	; (80058b4 <HAL_RCC_OscConfig+0x248>)
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005892:	f7ff fb79 	bl	8004f88 <HAL_GetTick>
 8005896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005898:	e00e      	b.n	80058b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800589a:	f7ff fb75 	bl	8004f88 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d907      	bls.n	80058b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e150      	b.n	8005b4e <HAL_RCC_OscConfig+0x4e2>
 80058ac:	40023800 	.word	0x40023800
 80058b0:	42470000 	.word	0x42470000
 80058b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058b8:	4b88      	ldr	r3, [pc, #544]	; (8005adc <HAL_RCC_OscConfig+0x470>)
 80058ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1ea      	bne.n	800589a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 8097 	beq.w	8005a00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058d2:	2300      	movs	r3, #0
 80058d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058d6:	4b81      	ldr	r3, [pc, #516]	; (8005adc <HAL_RCC_OscConfig+0x470>)
 80058d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10f      	bne.n	8005902 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058e2:	2300      	movs	r3, #0
 80058e4:	60bb      	str	r3, [r7, #8]
 80058e6:	4b7d      	ldr	r3, [pc, #500]	; (8005adc <HAL_RCC_OscConfig+0x470>)
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	4a7c      	ldr	r2, [pc, #496]	; (8005adc <HAL_RCC_OscConfig+0x470>)
 80058ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058f0:	6413      	str	r3, [r2, #64]	; 0x40
 80058f2:	4b7a      	ldr	r3, [pc, #488]	; (8005adc <HAL_RCC_OscConfig+0x470>)
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058fa:	60bb      	str	r3, [r7, #8]
 80058fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058fe:	2301      	movs	r3, #1
 8005900:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005902:	4b77      	ldr	r3, [pc, #476]	; (8005ae0 <HAL_RCC_OscConfig+0x474>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800590a:	2b00      	cmp	r3, #0
 800590c:	d118      	bne.n	8005940 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800590e:	4b74      	ldr	r3, [pc, #464]	; (8005ae0 <HAL_RCC_OscConfig+0x474>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a73      	ldr	r2, [pc, #460]	; (8005ae0 <HAL_RCC_OscConfig+0x474>)
 8005914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800591a:	f7ff fb35 	bl	8004f88 <HAL_GetTick>
 800591e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005920:	e008      	b.n	8005934 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005922:	f7ff fb31 	bl	8004f88 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	2b02      	cmp	r3, #2
 800592e:	d901      	bls.n	8005934 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e10c      	b.n	8005b4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005934:	4b6a      	ldr	r3, [pc, #424]	; (8005ae0 <HAL_RCC_OscConfig+0x474>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0f0      	beq.n	8005922 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d106      	bne.n	8005956 <HAL_RCC_OscConfig+0x2ea>
 8005948:	4b64      	ldr	r3, [pc, #400]	; (8005adc <HAL_RCC_OscConfig+0x470>)
 800594a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594c:	4a63      	ldr	r2, [pc, #396]	; (8005adc <HAL_RCC_OscConfig+0x470>)
 800594e:	f043 0301 	orr.w	r3, r3, #1
 8005952:	6713      	str	r3, [r2, #112]	; 0x70
 8005954:	e01c      	b.n	8005990 <HAL_RCC_OscConfig+0x324>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	2b05      	cmp	r3, #5
 800595c:	d10c      	bne.n	8005978 <HAL_RCC_OscConfig+0x30c>
 800595e:	4b5f      	ldr	r3, [pc, #380]	; (8005adc <HAL_RCC_OscConfig+0x470>)
 8005960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005962:	4a5e      	ldr	r2, [pc, #376]	; (8005adc <HAL_RCC_OscConfig+0x470>)
 8005964:	f043 0304 	orr.w	r3, r3, #4
 8005968:	6713      	str	r3, [r2, #112]	; 0x70
 800596a:	4b5c      	ldr	r3, [pc, #368]	; (8005adc <HAL_RCC_OscConfig+0x470>)
 800596c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596e:	4a5b      	ldr	r2, [pc, #364]	; (8005adc <HAL_RCC_OscConfig+0x470>)
 8005970:	f043 0301 	orr.w	r3, r3, #1
 8005974:	6713      	str	r3, [r2, #112]	; 0x70
 8005976:	e00b      	b.n	8005990 <HAL_RCC_OscConfig+0x324>
 8005978:	4b58      	ldr	r3, [pc, #352]	; (8005adc <HAL_RCC_OscConfig+0x470>)
 800597a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597c:	4a57      	ldr	r2, [pc, #348]	; (8005adc <HAL_RCC_OscConfig+0x470>)
 800597e:	f023 0301 	bic.w	r3, r3, #1
 8005982:	6713      	str	r3, [r2, #112]	; 0x70
 8005984:	4b55      	ldr	r3, [pc, #340]	; (8005adc <HAL_RCC_OscConfig+0x470>)
 8005986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005988:	4a54      	ldr	r2, [pc, #336]	; (8005adc <HAL_RCC_OscConfig+0x470>)
 800598a:	f023 0304 	bic.w	r3, r3, #4
 800598e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d015      	beq.n	80059c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005998:	f7ff faf6 	bl	8004f88 <HAL_GetTick>
 800599c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800599e:	e00a      	b.n	80059b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059a0:	f7ff faf2 	bl	8004f88 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e0cb      	b.n	8005b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059b6:	4b49      	ldr	r3, [pc, #292]	; (8005adc <HAL_RCC_OscConfig+0x470>)
 80059b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d0ee      	beq.n	80059a0 <HAL_RCC_OscConfig+0x334>
 80059c2:	e014      	b.n	80059ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059c4:	f7ff fae0 	bl	8004f88 <HAL_GetTick>
 80059c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059ca:	e00a      	b.n	80059e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059cc:	f7ff fadc 	bl	8004f88 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059da:	4293      	cmp	r3, r2
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e0b5      	b.n	8005b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059e2:	4b3e      	ldr	r3, [pc, #248]	; (8005adc <HAL_RCC_OscConfig+0x470>)
 80059e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1ee      	bne.n	80059cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059ee:	7dfb      	ldrb	r3, [r7, #23]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d105      	bne.n	8005a00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059f4:	4b39      	ldr	r3, [pc, #228]	; (8005adc <HAL_RCC_OscConfig+0x470>)
 80059f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f8:	4a38      	ldr	r2, [pc, #224]	; (8005adc <HAL_RCC_OscConfig+0x470>)
 80059fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f000 80a1 	beq.w	8005b4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a0a:	4b34      	ldr	r3, [pc, #208]	; (8005adc <HAL_RCC_OscConfig+0x470>)
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f003 030c 	and.w	r3, r3, #12
 8005a12:	2b08      	cmp	r3, #8
 8005a14:	d05c      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d141      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a1e:	4b31      	ldr	r3, [pc, #196]	; (8005ae4 <HAL_RCC_OscConfig+0x478>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a24:	f7ff fab0 	bl	8004f88 <HAL_GetTick>
 8005a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a2a:	e008      	b.n	8005a3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a2c:	f7ff faac 	bl	8004f88 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e087      	b.n	8005b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a3e:	4b27      	ldr	r3, [pc, #156]	; (8005adc <HAL_RCC_OscConfig+0x470>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1f0      	bne.n	8005a2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69da      	ldr	r2, [r3, #28]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	019b      	lsls	r3, r3, #6
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a60:	085b      	lsrs	r3, r3, #1
 8005a62:	3b01      	subs	r3, #1
 8005a64:	041b      	lsls	r3, r3, #16
 8005a66:	431a      	orrs	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6c:	061b      	lsls	r3, r3, #24
 8005a6e:	491b      	ldr	r1, [pc, #108]	; (8005adc <HAL_RCC_OscConfig+0x470>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a74:	4b1b      	ldr	r3, [pc, #108]	; (8005ae4 <HAL_RCC_OscConfig+0x478>)
 8005a76:	2201      	movs	r2, #1
 8005a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a7a:	f7ff fa85 	bl	8004f88 <HAL_GetTick>
 8005a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a80:	e008      	b.n	8005a94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a82:	f7ff fa81 	bl	8004f88 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e05c      	b.n	8005b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a94:	4b11      	ldr	r3, [pc, #68]	; (8005adc <HAL_RCC_OscConfig+0x470>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0f0      	beq.n	8005a82 <HAL_RCC_OscConfig+0x416>
 8005aa0:	e054      	b.n	8005b4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aa2:	4b10      	ldr	r3, [pc, #64]	; (8005ae4 <HAL_RCC_OscConfig+0x478>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aa8:	f7ff fa6e 	bl	8004f88 <HAL_GetTick>
 8005aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aae:	e008      	b.n	8005ac2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ab0:	f7ff fa6a 	bl	8004f88 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e045      	b.n	8005b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ac2:	4b06      	ldr	r3, [pc, #24]	; (8005adc <HAL_RCC_OscConfig+0x470>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1f0      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x444>
 8005ace:	e03d      	b.n	8005b4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d107      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e038      	b.n	8005b4e <HAL_RCC_OscConfig+0x4e2>
 8005adc:	40023800 	.word	0x40023800
 8005ae0:	40007000 	.word	0x40007000
 8005ae4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ae8:	4b1b      	ldr	r3, [pc, #108]	; (8005b58 <HAL_RCC_OscConfig+0x4ec>)
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d028      	beq.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d121      	bne.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d11a      	bne.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b18:	4013      	ands	r3, r2
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d111      	bne.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2e:	085b      	lsrs	r3, r3, #1
 8005b30:	3b01      	subs	r3, #1
 8005b32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d107      	bne.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d001      	beq.n	8005b4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e000      	b.n	8005b4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3718      	adds	r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	40023800 	.word	0x40023800

08005b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e0cc      	b.n	8005d0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b70:	4b68      	ldr	r3, [pc, #416]	; (8005d14 <HAL_RCC_ClockConfig+0x1b8>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0307 	and.w	r3, r3, #7
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d90c      	bls.n	8005b98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b7e:	4b65      	ldr	r3, [pc, #404]	; (8005d14 <HAL_RCC_ClockConfig+0x1b8>)
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	b2d2      	uxtb	r2, r2
 8005b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b86:	4b63      	ldr	r3, [pc, #396]	; (8005d14 <HAL_RCC_ClockConfig+0x1b8>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0307 	and.w	r3, r3, #7
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d001      	beq.n	8005b98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e0b8      	b.n	8005d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d020      	beq.n	8005be6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d005      	beq.n	8005bbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bb0:	4b59      	ldr	r3, [pc, #356]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	4a58      	ldr	r2, [pc, #352]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005bba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0308 	and.w	r3, r3, #8
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d005      	beq.n	8005bd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bc8:	4b53      	ldr	r3, [pc, #332]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	4a52      	ldr	r2, [pc, #328]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005bce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005bd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bd4:	4b50      	ldr	r3, [pc, #320]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	494d      	ldr	r1, [pc, #308]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d044      	beq.n	8005c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d107      	bne.n	8005c0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bfa:	4b47      	ldr	r3, [pc, #284]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d119      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e07f      	b.n	8005d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d003      	beq.n	8005c1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c16:	2b03      	cmp	r3, #3
 8005c18:	d107      	bne.n	8005c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c1a:	4b3f      	ldr	r3, [pc, #252]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d109      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e06f      	b.n	8005d0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c2a:	4b3b      	ldr	r3, [pc, #236]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e067      	b.n	8005d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c3a:	4b37      	ldr	r3, [pc, #220]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f023 0203 	bic.w	r2, r3, #3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	4934      	ldr	r1, [pc, #208]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c4c:	f7ff f99c 	bl	8004f88 <HAL_GetTick>
 8005c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c52:	e00a      	b.n	8005c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c54:	f7ff f998 	bl	8004f88 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e04f      	b.n	8005d0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c6a:	4b2b      	ldr	r3, [pc, #172]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 020c 	and.w	r2, r3, #12
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d1eb      	bne.n	8005c54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c7c:	4b25      	ldr	r3, [pc, #148]	; (8005d14 <HAL_RCC_ClockConfig+0x1b8>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0307 	and.w	r3, r3, #7
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d20c      	bcs.n	8005ca4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c8a:	4b22      	ldr	r3, [pc, #136]	; (8005d14 <HAL_RCC_ClockConfig+0x1b8>)
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	b2d2      	uxtb	r2, r2
 8005c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c92:	4b20      	ldr	r3, [pc, #128]	; (8005d14 <HAL_RCC_ClockConfig+0x1b8>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d001      	beq.n	8005ca4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e032      	b.n	8005d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d008      	beq.n	8005cc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cb0:	4b19      	ldr	r3, [pc, #100]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	4916      	ldr	r1, [pc, #88]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0308 	and.w	r3, r3, #8
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d009      	beq.n	8005ce2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cce:	4b12      	ldr	r3, [pc, #72]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	00db      	lsls	r3, r3, #3
 8005cdc:	490e      	ldr	r1, [pc, #56]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ce2:	f000 f821 	bl	8005d28 <HAL_RCC_GetSysClockFreq>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	4b0b      	ldr	r3, [pc, #44]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	091b      	lsrs	r3, r3, #4
 8005cee:	f003 030f 	and.w	r3, r3, #15
 8005cf2:	490a      	ldr	r1, [pc, #40]	; (8005d1c <HAL_RCC_ClockConfig+0x1c0>)
 8005cf4:	5ccb      	ldrb	r3, [r1, r3]
 8005cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cfa:	4a09      	ldr	r2, [pc, #36]	; (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005cfe:	4b09      	ldr	r3, [pc, #36]	; (8005d24 <HAL_RCC_ClockConfig+0x1c8>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7ff f8fc 	bl	8004f00 <HAL_InitTick>

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	40023c00 	.word	0x40023c00
 8005d18:	40023800 	.word	0x40023800
 8005d1c:	0800dc80 	.word	0x0800dc80
 8005d20:	2000006c 	.word	0x2000006c
 8005d24:	20000070 	.word	0x20000070

08005d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d2c:	b094      	sub	sp, #80	; 0x50
 8005d2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d30:	2300      	movs	r3, #0
 8005d32:	647b      	str	r3, [r7, #68]	; 0x44
 8005d34:	2300      	movs	r3, #0
 8005d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d38:	2300      	movs	r3, #0
 8005d3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d40:	4b79      	ldr	r3, [pc, #484]	; (8005f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f003 030c 	and.w	r3, r3, #12
 8005d48:	2b08      	cmp	r3, #8
 8005d4a:	d00d      	beq.n	8005d68 <HAL_RCC_GetSysClockFreq+0x40>
 8005d4c:	2b08      	cmp	r3, #8
 8005d4e:	f200 80e1 	bhi.w	8005f14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d002      	beq.n	8005d5c <HAL_RCC_GetSysClockFreq+0x34>
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d003      	beq.n	8005d62 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d5a:	e0db      	b.n	8005f14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d5c:	4b73      	ldr	r3, [pc, #460]	; (8005f2c <HAL_RCC_GetSysClockFreq+0x204>)
 8005d5e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005d60:	e0db      	b.n	8005f1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d62:	4b73      	ldr	r3, [pc, #460]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x208>)
 8005d64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d66:	e0d8      	b.n	8005f1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d68:	4b6f      	ldr	r3, [pc, #444]	; (8005f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d70:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d72:	4b6d      	ldr	r3, [pc, #436]	; (8005f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d063      	beq.n	8005e46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d7e:	4b6a      	ldr	r3, [pc, #424]	; (8005f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	099b      	lsrs	r3, r3, #6
 8005d84:	2200      	movs	r2, #0
 8005d86:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d90:	633b      	str	r3, [r7, #48]	; 0x30
 8005d92:	2300      	movs	r3, #0
 8005d94:	637b      	str	r3, [r7, #52]	; 0x34
 8005d96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005d9a:	4622      	mov	r2, r4
 8005d9c:	462b      	mov	r3, r5
 8005d9e:	f04f 0000 	mov.w	r0, #0
 8005da2:	f04f 0100 	mov.w	r1, #0
 8005da6:	0159      	lsls	r1, r3, #5
 8005da8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005dac:	0150      	lsls	r0, r2, #5
 8005dae:	4602      	mov	r2, r0
 8005db0:	460b      	mov	r3, r1
 8005db2:	4621      	mov	r1, r4
 8005db4:	1a51      	subs	r1, r2, r1
 8005db6:	6139      	str	r1, [r7, #16]
 8005db8:	4629      	mov	r1, r5
 8005dba:	eb63 0301 	sbc.w	r3, r3, r1
 8005dbe:	617b      	str	r3, [r7, #20]
 8005dc0:	f04f 0200 	mov.w	r2, #0
 8005dc4:	f04f 0300 	mov.w	r3, #0
 8005dc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005dcc:	4659      	mov	r1, fp
 8005dce:	018b      	lsls	r3, r1, #6
 8005dd0:	4651      	mov	r1, sl
 8005dd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005dd6:	4651      	mov	r1, sl
 8005dd8:	018a      	lsls	r2, r1, #6
 8005dda:	4651      	mov	r1, sl
 8005ddc:	ebb2 0801 	subs.w	r8, r2, r1
 8005de0:	4659      	mov	r1, fp
 8005de2:	eb63 0901 	sbc.w	r9, r3, r1
 8005de6:	f04f 0200 	mov.w	r2, #0
 8005dea:	f04f 0300 	mov.w	r3, #0
 8005dee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005df2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005df6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dfa:	4690      	mov	r8, r2
 8005dfc:	4699      	mov	r9, r3
 8005dfe:	4623      	mov	r3, r4
 8005e00:	eb18 0303 	adds.w	r3, r8, r3
 8005e04:	60bb      	str	r3, [r7, #8]
 8005e06:	462b      	mov	r3, r5
 8005e08:	eb49 0303 	adc.w	r3, r9, r3
 8005e0c:	60fb      	str	r3, [r7, #12]
 8005e0e:	f04f 0200 	mov.w	r2, #0
 8005e12:	f04f 0300 	mov.w	r3, #0
 8005e16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e1a:	4629      	mov	r1, r5
 8005e1c:	024b      	lsls	r3, r1, #9
 8005e1e:	4621      	mov	r1, r4
 8005e20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e24:	4621      	mov	r1, r4
 8005e26:	024a      	lsls	r2, r1, #9
 8005e28:	4610      	mov	r0, r2
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e2e:	2200      	movs	r2, #0
 8005e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e38:	f7fa ff2e 	bl	8000c98 <__aeabi_uldivmod>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4613      	mov	r3, r2
 8005e42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e44:	e058      	b.n	8005ef8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e46:	4b38      	ldr	r3, [pc, #224]	; (8005f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	099b      	lsrs	r3, r3, #6
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	4618      	mov	r0, r3
 8005e50:	4611      	mov	r1, r2
 8005e52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e56:	623b      	str	r3, [r7, #32]
 8005e58:	2300      	movs	r3, #0
 8005e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e60:	4642      	mov	r2, r8
 8005e62:	464b      	mov	r3, r9
 8005e64:	f04f 0000 	mov.w	r0, #0
 8005e68:	f04f 0100 	mov.w	r1, #0
 8005e6c:	0159      	lsls	r1, r3, #5
 8005e6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e72:	0150      	lsls	r0, r2, #5
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	4641      	mov	r1, r8
 8005e7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e7e:	4649      	mov	r1, r9
 8005e80:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e84:	f04f 0200 	mov.w	r2, #0
 8005e88:	f04f 0300 	mov.w	r3, #0
 8005e8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e98:	ebb2 040a 	subs.w	r4, r2, sl
 8005e9c:	eb63 050b 	sbc.w	r5, r3, fp
 8005ea0:	f04f 0200 	mov.w	r2, #0
 8005ea4:	f04f 0300 	mov.w	r3, #0
 8005ea8:	00eb      	lsls	r3, r5, #3
 8005eaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005eae:	00e2      	lsls	r2, r4, #3
 8005eb0:	4614      	mov	r4, r2
 8005eb2:	461d      	mov	r5, r3
 8005eb4:	4643      	mov	r3, r8
 8005eb6:	18e3      	adds	r3, r4, r3
 8005eb8:	603b      	str	r3, [r7, #0]
 8005eba:	464b      	mov	r3, r9
 8005ebc:	eb45 0303 	adc.w	r3, r5, r3
 8005ec0:	607b      	str	r3, [r7, #4]
 8005ec2:	f04f 0200 	mov.w	r2, #0
 8005ec6:	f04f 0300 	mov.w	r3, #0
 8005eca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ece:	4629      	mov	r1, r5
 8005ed0:	028b      	lsls	r3, r1, #10
 8005ed2:	4621      	mov	r1, r4
 8005ed4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ed8:	4621      	mov	r1, r4
 8005eda:	028a      	lsls	r2, r1, #10
 8005edc:	4610      	mov	r0, r2
 8005ede:	4619      	mov	r1, r3
 8005ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	61bb      	str	r3, [r7, #24]
 8005ee6:	61fa      	str	r2, [r7, #28]
 8005ee8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005eec:	f7fa fed4 	bl	8000c98 <__aeabi_uldivmod>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ef8:	4b0b      	ldr	r3, [pc, #44]	; (8005f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	0c1b      	lsrs	r3, r3, #16
 8005efe:	f003 0303 	and.w	r3, r3, #3
 8005f02:	3301      	adds	r3, #1
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005f08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f12:	e002      	b.n	8005f1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f14:	4b05      	ldr	r3, [pc, #20]	; (8005f2c <HAL_RCC_GetSysClockFreq+0x204>)
 8005f16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3750      	adds	r7, #80	; 0x50
 8005f20:	46bd      	mov	sp, r7
 8005f22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f26:	bf00      	nop
 8005f28:	40023800 	.word	0x40023800
 8005f2c:	00f42400 	.word	0x00f42400
 8005f30:	007a1200 	.word	0x007a1200

08005f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f34:	b480      	push	{r7}
 8005f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f38:	4b03      	ldr	r3, [pc, #12]	; (8005f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	2000006c 	.word	0x2000006c

08005f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f50:	f7ff fff0 	bl	8005f34 <HAL_RCC_GetHCLKFreq>
 8005f54:	4602      	mov	r2, r0
 8005f56:	4b05      	ldr	r3, [pc, #20]	; (8005f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	0a9b      	lsrs	r3, r3, #10
 8005f5c:	f003 0307 	and.w	r3, r3, #7
 8005f60:	4903      	ldr	r1, [pc, #12]	; (8005f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f62:	5ccb      	ldrb	r3, [r1, r3]
 8005f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	40023800 	.word	0x40023800
 8005f70:	0800dc90 	.word	0x0800dc90

08005f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f78:	f7ff ffdc 	bl	8005f34 <HAL_RCC_GetHCLKFreq>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	4b05      	ldr	r3, [pc, #20]	; (8005f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	0b5b      	lsrs	r3, r3, #13
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	4903      	ldr	r1, [pc, #12]	; (8005f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f8a:	5ccb      	ldrb	r3, [r1, r3]
 8005f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	40023800 	.word	0x40023800
 8005f98:	0800dc90 	.word	0x0800dc90

08005f9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e07b      	b.n	80060a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d108      	bne.n	8005fc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fbe:	d009      	beq.n	8005fd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	61da      	str	r2, [r3, #28]
 8005fc6:	e005      	b.n	8005fd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d106      	bne.n	8005ff4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7fe fbdc 	bl	80047ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800600a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800601c:	431a      	orrs	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006026:	431a      	orrs	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	431a      	orrs	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	f003 0301 	and.w	r3, r3, #1
 800603a:	431a      	orrs	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006044:	431a      	orrs	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800604e:	431a      	orrs	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006058:	ea42 0103 	orr.w	r1, r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006060:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	430a      	orrs	r2, r1
 800606a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	0c1b      	lsrs	r3, r3, #16
 8006072:	f003 0104 	and.w	r1, r3, #4
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607a:	f003 0210 	and.w	r2, r3, #16
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	430a      	orrs	r2, r1
 8006084:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	69da      	ldr	r2, [r3, #28]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006094:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b088      	sub	sp, #32
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	60f8      	str	r0, [r7, #12]
 80060b6:	60b9      	str	r1, [r7, #8]
 80060b8:	603b      	str	r3, [r7, #0]
 80060ba:	4613      	mov	r3, r2
 80060bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_SPI_Transmit+0x22>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e126      	b.n	800631e <HAL_SPI_Transmit+0x270>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060d8:	f7fe ff56 	bl	8004f88 <HAL_GetTick>
 80060dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80060de:	88fb      	ldrh	r3, [r7, #6]
 80060e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d002      	beq.n	80060f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80060ee:	2302      	movs	r3, #2
 80060f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80060f2:	e10b      	b.n	800630c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d002      	beq.n	8006100 <HAL_SPI_Transmit+0x52>
 80060fa:	88fb      	ldrh	r3, [r7, #6]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d102      	bne.n	8006106 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006104:	e102      	b.n	800630c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2203      	movs	r2, #3
 800610a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	88fa      	ldrh	r2, [r7, #6]
 800611e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	88fa      	ldrh	r2, [r7, #6]
 8006124:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800614c:	d10f      	bne.n	800616e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800615c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800616c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006178:	2b40      	cmp	r3, #64	; 0x40
 800617a:	d007      	beq.n	800618c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800618a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006194:	d14b      	bne.n	800622e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d002      	beq.n	80061a4 <HAL_SPI_Transmit+0xf6>
 800619e:	8afb      	ldrh	r3, [r7, #22]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d13e      	bne.n	8006222 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a8:	881a      	ldrh	r2, [r3, #0]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b4:	1c9a      	adds	r2, r3, #2
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061be:	b29b      	uxth	r3, r3
 80061c0:	3b01      	subs	r3, #1
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80061c8:	e02b      	b.n	8006222 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d112      	bne.n	80061fe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061dc:	881a      	ldrh	r2, [r3, #0]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e8:	1c9a      	adds	r2, r3, #2
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	3b01      	subs	r3, #1
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80061fc:	e011      	b.n	8006222 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061fe:	f7fe fec3 	bl	8004f88 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	429a      	cmp	r2, r3
 800620c:	d803      	bhi.n	8006216 <HAL_SPI_Transmit+0x168>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006214:	d102      	bne.n	800621c <HAL_SPI_Transmit+0x16e>
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d102      	bne.n	8006222 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006220:	e074      	b.n	800630c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006226:	b29b      	uxth	r3, r3
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1ce      	bne.n	80061ca <HAL_SPI_Transmit+0x11c>
 800622c:	e04c      	b.n	80062c8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d002      	beq.n	800623c <HAL_SPI_Transmit+0x18e>
 8006236:	8afb      	ldrh	r3, [r7, #22]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d140      	bne.n	80062be <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	330c      	adds	r3, #12
 8006246:	7812      	ldrb	r2, [r2, #0]
 8006248:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624e:	1c5a      	adds	r2, r3, #1
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006258:	b29b      	uxth	r3, r3
 800625a:	3b01      	subs	r3, #1
 800625c:	b29a      	uxth	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006262:	e02c      	b.n	80062be <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b02      	cmp	r3, #2
 8006270:	d113      	bne.n	800629a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	330c      	adds	r3, #12
 800627c:	7812      	ldrb	r2, [r2, #0]
 800627e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800628e:	b29b      	uxth	r3, r3
 8006290:	3b01      	subs	r3, #1
 8006292:	b29a      	uxth	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	86da      	strh	r2, [r3, #54]	; 0x36
 8006298:	e011      	b.n	80062be <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800629a:	f7fe fe75 	bl	8004f88 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d803      	bhi.n	80062b2 <HAL_SPI_Transmit+0x204>
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b0:	d102      	bne.n	80062b8 <HAL_SPI_Transmit+0x20a>
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d102      	bne.n	80062be <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80062bc:	e026      	b.n	800630c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1cd      	bne.n	8006264 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062c8:	69ba      	ldr	r2, [r7, #24]
 80062ca:	6839      	ldr	r1, [r7, #0]
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f000 fbcb 	bl	8006a68 <SPI_EndRxTxTransaction>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d002      	beq.n	80062de <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2220      	movs	r2, #32
 80062dc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10a      	bne.n	80062fc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062e6:	2300      	movs	r3, #0
 80062e8:	613b      	str	r3, [r7, #16]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	613b      	str	r3, [r7, #16]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	613b      	str	r3, [r7, #16]
 80062fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	77fb      	strb	r3, [r7, #31]
 8006308:	e000      	b.n	800630c <HAL_SPI_Transmit+0x25e>
  }

error:
 800630a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800631c:	7ffb      	ldrb	r3, [r7, #31]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3720      	adds	r7, #32
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b088      	sub	sp, #32
 800632a:	af02      	add	r7, sp, #8
 800632c:	60f8      	str	r0, [r7, #12]
 800632e:	60b9      	str	r1, [r7, #8]
 8006330:	603b      	str	r3, [r7, #0]
 8006332:	4613      	mov	r3, r2
 8006334:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006336:	2300      	movs	r3, #0
 8006338:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006342:	d112      	bne.n	800636a <HAL_SPI_Receive+0x44>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10e      	bne.n	800636a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2204      	movs	r2, #4
 8006350:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006354:	88fa      	ldrh	r2, [r7, #6]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	4613      	mov	r3, r2
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	68b9      	ldr	r1, [r7, #8]
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f000 f8f1 	bl	8006548 <HAL_SPI_TransmitReceive>
 8006366:	4603      	mov	r3, r0
 8006368:	e0ea      	b.n	8006540 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006370:	2b01      	cmp	r3, #1
 8006372:	d101      	bne.n	8006378 <HAL_SPI_Receive+0x52>
 8006374:	2302      	movs	r3, #2
 8006376:	e0e3      	b.n	8006540 <HAL_SPI_Receive+0x21a>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006380:	f7fe fe02 	bl	8004f88 <HAL_GetTick>
 8006384:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b01      	cmp	r3, #1
 8006390:	d002      	beq.n	8006398 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006392:	2302      	movs	r3, #2
 8006394:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006396:	e0ca      	b.n	800652e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d002      	beq.n	80063a4 <HAL_SPI_Receive+0x7e>
 800639e:	88fb      	ldrh	r3, [r7, #6]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d102      	bne.n	80063aa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063a8:	e0c1      	b.n	800652e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2204      	movs	r2, #4
 80063ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	88fa      	ldrh	r2, [r7, #6]
 80063c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	88fa      	ldrh	r2, [r7, #6]
 80063c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063f0:	d10f      	bne.n	8006412 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006400:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006410:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641c:	2b40      	cmp	r3, #64	; 0x40
 800641e:	d007      	beq.n	8006430 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800642e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d162      	bne.n	80064fe <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006438:	e02e      	b.n	8006498 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b01      	cmp	r3, #1
 8006446:	d115      	bne.n	8006474 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f103 020c 	add.w	r2, r3, #12
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006454:	7812      	ldrb	r2, [r2, #0]
 8006456:	b2d2      	uxtb	r2, r2
 8006458:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006468:	b29b      	uxth	r3, r3
 800646a:	3b01      	subs	r3, #1
 800646c:	b29a      	uxth	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006472:	e011      	b.n	8006498 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006474:	f7fe fd88 	bl	8004f88 <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	429a      	cmp	r2, r3
 8006482:	d803      	bhi.n	800648c <HAL_SPI_Receive+0x166>
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648a:	d102      	bne.n	8006492 <HAL_SPI_Receive+0x16c>
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d102      	bne.n	8006498 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006496:	e04a      	b.n	800652e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800649c:	b29b      	uxth	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1cb      	bne.n	800643a <HAL_SPI_Receive+0x114>
 80064a2:	e031      	b.n	8006508 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d113      	bne.n	80064da <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68da      	ldr	r2, [r3, #12]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064bc:	b292      	uxth	r2, r2
 80064be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c4:	1c9a      	adds	r2, r3, #2
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	3b01      	subs	r3, #1
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064d8:	e011      	b.n	80064fe <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064da:	f7fe fd55 	bl	8004f88 <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d803      	bhi.n	80064f2 <HAL_SPI_Receive+0x1cc>
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f0:	d102      	bne.n	80064f8 <HAL_SPI_Receive+0x1d2>
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d102      	bne.n	80064fe <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80064fc:	e017      	b.n	800652e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006502:	b29b      	uxth	r3, r3
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1cd      	bne.n	80064a4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	6839      	ldr	r1, [r7, #0]
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 fa45 	bl	800699c <SPI_EndRxTransaction>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d002      	beq.n	800651e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2220      	movs	r2, #32
 800651c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006522:	2b00      	cmp	r3, #0
 8006524:	d002      	beq.n	800652c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	75fb      	strb	r3, [r7, #23]
 800652a:	e000      	b.n	800652e <HAL_SPI_Receive+0x208>
  }

error :
 800652c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800653e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006540:	4618      	mov	r0, r3
 8006542:	3718      	adds	r7, #24
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b08c      	sub	sp, #48	; 0x30
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
 8006554:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006556:	2301      	movs	r3, #1
 8006558:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800655a:	2300      	movs	r3, #0
 800655c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006566:	2b01      	cmp	r3, #1
 8006568:	d101      	bne.n	800656e <HAL_SPI_TransmitReceive+0x26>
 800656a:	2302      	movs	r3, #2
 800656c:	e18a      	b.n	8006884 <HAL_SPI_TransmitReceive+0x33c>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006576:	f7fe fd07 	bl	8004f88 <HAL_GetTick>
 800657a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800658c:	887b      	ldrh	r3, [r7, #2]
 800658e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006590:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006594:	2b01      	cmp	r3, #1
 8006596:	d00f      	beq.n	80065b8 <HAL_SPI_TransmitReceive+0x70>
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800659e:	d107      	bne.n	80065b0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d103      	bne.n	80065b0 <HAL_SPI_TransmitReceive+0x68>
 80065a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065ac:	2b04      	cmp	r3, #4
 80065ae:	d003      	beq.n	80065b8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80065b0:	2302      	movs	r3, #2
 80065b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80065b6:	e15b      	b.n	8006870 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d005      	beq.n	80065ca <HAL_SPI_TransmitReceive+0x82>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <HAL_SPI_TransmitReceive+0x82>
 80065c4:	887b      	ldrh	r3, [r7, #2]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d103      	bne.n	80065d2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80065d0:	e14e      	b.n	8006870 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b04      	cmp	r3, #4
 80065dc:	d003      	beq.n	80065e6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2205      	movs	r2, #5
 80065e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	887a      	ldrh	r2, [r7, #2]
 80065f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	887a      	ldrh	r2, [r7, #2]
 80065fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	887a      	ldrh	r2, [r7, #2]
 8006608:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	887a      	ldrh	r2, [r7, #2]
 800660e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006626:	2b40      	cmp	r3, #64	; 0x40
 8006628:	d007      	beq.n	800663a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006638:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006642:	d178      	bne.n	8006736 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <HAL_SPI_TransmitReceive+0x10a>
 800664c:	8b7b      	ldrh	r3, [r7, #26]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d166      	bne.n	8006720 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006656:	881a      	ldrh	r2, [r3, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006662:	1c9a      	adds	r2, r3, #2
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800666c:	b29b      	uxth	r3, r3
 800666e:	3b01      	subs	r3, #1
 8006670:	b29a      	uxth	r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006676:	e053      	b.n	8006720 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	2b02      	cmp	r3, #2
 8006684:	d11b      	bne.n	80066be <HAL_SPI_TransmitReceive+0x176>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800668a:	b29b      	uxth	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	d016      	beq.n	80066be <HAL_SPI_TransmitReceive+0x176>
 8006690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006692:	2b01      	cmp	r3, #1
 8006694:	d113      	bne.n	80066be <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669a:	881a      	ldrh	r2, [r3, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a6:	1c9a      	adds	r2, r3, #2
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	3b01      	subs	r3, #1
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066ba:	2300      	movs	r3, #0
 80066bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f003 0301 	and.w	r3, r3, #1
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d119      	bne.n	8006700 <HAL_SPI_TransmitReceive+0x1b8>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d014      	beq.n	8006700 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68da      	ldr	r2, [r3, #12]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e0:	b292      	uxth	r2, r2
 80066e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e8:	1c9a      	adds	r2, r3, #2
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	3b01      	subs	r3, #1
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066fc:	2301      	movs	r3, #1
 80066fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006700:	f7fe fc42 	bl	8004f88 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800670c:	429a      	cmp	r2, r3
 800670e:	d807      	bhi.n	8006720 <HAL_SPI_TransmitReceive+0x1d8>
 8006710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006716:	d003      	beq.n	8006720 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800671e:	e0a7      	b.n	8006870 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006724:	b29b      	uxth	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1a6      	bne.n	8006678 <HAL_SPI_TransmitReceive+0x130>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800672e:	b29b      	uxth	r3, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1a1      	bne.n	8006678 <HAL_SPI_TransmitReceive+0x130>
 8006734:	e07c      	b.n	8006830 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d002      	beq.n	8006744 <HAL_SPI_TransmitReceive+0x1fc>
 800673e:	8b7b      	ldrh	r3, [r7, #26]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d16b      	bne.n	800681c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	330c      	adds	r3, #12
 800674e:	7812      	ldrb	r2, [r2, #0]
 8006750:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006756:	1c5a      	adds	r2, r3, #1
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006760:	b29b      	uxth	r3, r3
 8006762:	3b01      	subs	r3, #1
 8006764:	b29a      	uxth	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800676a:	e057      	b.n	800681c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f003 0302 	and.w	r3, r3, #2
 8006776:	2b02      	cmp	r3, #2
 8006778:	d11c      	bne.n	80067b4 <HAL_SPI_TransmitReceive+0x26c>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800677e:	b29b      	uxth	r3, r3
 8006780:	2b00      	cmp	r3, #0
 8006782:	d017      	beq.n	80067b4 <HAL_SPI_TransmitReceive+0x26c>
 8006784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006786:	2b01      	cmp	r3, #1
 8006788:	d114      	bne.n	80067b4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	330c      	adds	r3, #12
 8006794:	7812      	ldrb	r2, [r2, #0]
 8006796:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	3b01      	subs	r3, #1
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067b0:	2300      	movs	r3, #0
 80067b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d119      	bne.n	80067f6 <HAL_SPI_TransmitReceive+0x2ae>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d014      	beq.n	80067f6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68da      	ldr	r2, [r3, #12]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d6:	b2d2      	uxtb	r2, r2
 80067d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067de:	1c5a      	adds	r2, r3, #1
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	3b01      	subs	r3, #1
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067f2:	2301      	movs	r3, #1
 80067f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80067f6:	f7fe fbc7 	bl	8004f88 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006802:	429a      	cmp	r2, r3
 8006804:	d803      	bhi.n	800680e <HAL_SPI_TransmitReceive+0x2c6>
 8006806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800680c:	d102      	bne.n	8006814 <HAL_SPI_TransmitReceive+0x2cc>
 800680e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006810:	2b00      	cmp	r3, #0
 8006812:	d103      	bne.n	800681c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800681a:	e029      	b.n	8006870 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006820:	b29b      	uxth	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1a2      	bne.n	800676c <HAL_SPI_TransmitReceive+0x224>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800682a:	b29b      	uxth	r3, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	d19d      	bne.n	800676c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006832:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f000 f917 	bl	8006a68 <SPI_EndRxTxTransaction>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d006      	beq.n	800684e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2220      	movs	r2, #32
 800684a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800684c:	e010      	b.n	8006870 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10b      	bne.n	800686e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006856:	2300      	movs	r3, #0
 8006858:	617b      	str	r3, [r7, #20]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	617b      	str	r3, [r7, #20]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	617b      	str	r3, [r7, #20]
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	e000      	b.n	8006870 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800686e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006880:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006884:	4618      	mov	r0, r3
 8006886:	3730      	adds	r7, #48	; 0x30
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b088      	sub	sp, #32
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	603b      	str	r3, [r7, #0]
 8006898:	4613      	mov	r3, r2
 800689a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800689c:	f7fe fb74 	bl	8004f88 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a4:	1a9b      	subs	r3, r3, r2
 80068a6:	683a      	ldr	r2, [r7, #0]
 80068a8:	4413      	add	r3, r2
 80068aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80068ac:	f7fe fb6c 	bl	8004f88 <HAL_GetTick>
 80068b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80068b2:	4b39      	ldr	r3, [pc, #228]	; (8006998 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	015b      	lsls	r3, r3, #5
 80068b8:	0d1b      	lsrs	r3, r3, #20
 80068ba:	69fa      	ldr	r2, [r7, #28]
 80068bc:	fb02 f303 	mul.w	r3, r2, r3
 80068c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068c2:	e054      	b.n	800696e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ca:	d050      	beq.n	800696e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068cc:	f7fe fb5c 	bl	8004f88 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	69fa      	ldr	r2, [r7, #28]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d902      	bls.n	80068e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d13d      	bne.n	800695e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80068f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068fa:	d111      	bne.n	8006920 <SPI_WaitFlagStateUntilTimeout+0x94>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006904:	d004      	beq.n	8006910 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800690e:	d107      	bne.n	8006920 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800691e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006924:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006928:	d10f      	bne.n	800694a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006938:	601a      	str	r2, [r3, #0]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006948:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e017      	b.n	800698e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006964:	2300      	movs	r3, #0
 8006966:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	3b01      	subs	r3, #1
 800696c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	689a      	ldr	r2, [r3, #8]
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	4013      	ands	r3, r2
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	429a      	cmp	r2, r3
 800697c:	bf0c      	ite	eq
 800697e:	2301      	moveq	r3, #1
 8006980:	2300      	movne	r3, #0
 8006982:	b2db      	uxtb	r3, r3
 8006984:	461a      	mov	r2, r3
 8006986:	79fb      	ldrb	r3, [r7, #7]
 8006988:	429a      	cmp	r2, r3
 800698a:	d19b      	bne.n	80068c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3720      	adds	r7, #32
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	2000006c 	.word	0x2000006c

0800699c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af02      	add	r7, sp, #8
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069b0:	d111      	bne.n	80069d6 <SPI_EndRxTransaction+0x3a>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ba:	d004      	beq.n	80069c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069c4:	d107      	bne.n	80069d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069d4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069de:	d12a      	bne.n	8006a36 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069e8:	d012      	beq.n	8006a10 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2200      	movs	r2, #0
 80069f2:	2180      	movs	r1, #128	; 0x80
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f7ff ff49 	bl	800688c <SPI_WaitFlagStateUntilTimeout>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d02d      	beq.n	8006a5c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a04:	f043 0220 	orr.w	r2, r3, #32
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e026      	b.n	8006a5e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2200      	movs	r2, #0
 8006a18:	2101      	movs	r1, #1
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f7ff ff36 	bl	800688c <SPI_WaitFlagStateUntilTimeout>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d01a      	beq.n	8006a5c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2a:	f043 0220 	orr.w	r2, r3, #32
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e013      	b.n	8006a5e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	2101      	movs	r1, #1
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f7ff ff23 	bl	800688c <SPI_WaitFlagStateUntilTimeout>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d007      	beq.n	8006a5c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a50:	f043 0220 	orr.w	r2, r3, #32
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e000      	b.n	8006a5e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
	...

08006a68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b088      	sub	sp, #32
 8006a6c:	af02      	add	r7, sp, #8
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a74:	4b1b      	ldr	r3, [pc, #108]	; (8006ae4 <SPI_EndRxTxTransaction+0x7c>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a1b      	ldr	r2, [pc, #108]	; (8006ae8 <SPI_EndRxTxTransaction+0x80>)
 8006a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a7e:	0d5b      	lsrs	r3, r3, #21
 8006a80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a84:	fb02 f303 	mul.w	r3, r2, r3
 8006a88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a92:	d112      	bne.n	8006aba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	2180      	movs	r1, #128	; 0x80
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f7ff fef4 	bl	800688c <SPI_WaitFlagStateUntilTimeout>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d016      	beq.n	8006ad8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aae:	f043 0220 	orr.w	r2, r3, #32
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e00f      	b.n	8006ada <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00a      	beq.n	8006ad6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad0:	2b80      	cmp	r3, #128	; 0x80
 8006ad2:	d0f2      	beq.n	8006aba <SPI_EndRxTxTransaction+0x52>
 8006ad4:	e000      	b.n	8006ad8 <SPI_EndRxTxTransaction+0x70>
        break;
 8006ad6:	bf00      	nop
  }

  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3718      	adds	r7, #24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	2000006c 	.word	0x2000006c
 8006ae8:	165e9f81 	.word	0x165e9f81

08006aec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e041      	b.n	8006b82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d106      	bne.n	8006b18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7fd ff06 	bl	8004924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	3304      	adds	r3, #4
 8006b28:	4619      	mov	r1, r3
 8006b2a:	4610      	mov	r0, r2
 8006b2c:	f000 fce8 	bl	8007500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	b083      	sub	sp, #12
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	6a1a      	ldr	r2, [r3, #32]
 8006b98:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d10f      	bne.n	8006bc2 <HAL_TIM_Base_Stop+0x38>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6a1a      	ldr	r2, [r3, #32]
 8006ba8:	f240 4344 	movw	r3, #1092	; 0x444
 8006bac:	4013      	ands	r3, r2
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d107      	bne.n	8006bc2 <HAL_TIM_Base_Stop+0x38>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f022 0201 	bic.w	r2, r2, #1
 8006bc0:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d001      	beq.n	8006bf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e044      	b.n	8006c7a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68da      	ldr	r2, [r3, #12]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f042 0201 	orr.w	r2, r2, #1
 8006c06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a1e      	ldr	r2, [pc, #120]	; (8006c88 <HAL_TIM_Base_Start_IT+0xb0>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d018      	beq.n	8006c44 <HAL_TIM_Base_Start_IT+0x6c>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c1a:	d013      	beq.n	8006c44 <HAL_TIM_Base_Start_IT+0x6c>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a1a      	ldr	r2, [pc, #104]	; (8006c8c <HAL_TIM_Base_Start_IT+0xb4>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d00e      	beq.n	8006c44 <HAL_TIM_Base_Start_IT+0x6c>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a19      	ldr	r2, [pc, #100]	; (8006c90 <HAL_TIM_Base_Start_IT+0xb8>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d009      	beq.n	8006c44 <HAL_TIM_Base_Start_IT+0x6c>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a17      	ldr	r2, [pc, #92]	; (8006c94 <HAL_TIM_Base_Start_IT+0xbc>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d004      	beq.n	8006c44 <HAL_TIM_Base_Start_IT+0x6c>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a16      	ldr	r2, [pc, #88]	; (8006c98 <HAL_TIM_Base_Start_IT+0xc0>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d111      	bne.n	8006c68 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f003 0307 	and.w	r3, r3, #7
 8006c4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2b06      	cmp	r3, #6
 8006c54:	d010      	beq.n	8006c78 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f042 0201 	orr.w	r2, r2, #1
 8006c64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c66:	e007      	b.n	8006c78 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f042 0201 	orr.w	r2, r2, #1
 8006c76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3714      	adds	r7, #20
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	40010000 	.word	0x40010000
 8006c8c:	40000400 	.word	0x40000400
 8006c90:	40000800 	.word	0x40000800
 8006c94:	40000c00 	.word	0x40000c00
 8006c98:	40014000 	.word	0x40014000

08006c9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e041      	b.n	8006d32 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d106      	bne.n	8006cc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f839 	bl	8006d3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	3304      	adds	r3, #4
 8006cd8:	4619      	mov	r1, r3
 8006cda:	4610      	mov	r0, r2
 8006cdc:	f000 fc10 	bl	8007500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b083      	sub	sp, #12
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d42:	bf00      	nop
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
	...

08006d50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d109      	bne.n	8006d74 <HAL_TIM_PWM_Start+0x24>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	bf14      	ite	ne
 8006d6c:	2301      	movne	r3, #1
 8006d6e:	2300      	moveq	r3, #0
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	e022      	b.n	8006dba <HAL_TIM_PWM_Start+0x6a>
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	2b04      	cmp	r3, #4
 8006d78:	d109      	bne.n	8006d8e <HAL_TIM_PWM_Start+0x3e>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	bf14      	ite	ne
 8006d86:	2301      	movne	r3, #1
 8006d88:	2300      	moveq	r3, #0
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	e015      	b.n	8006dba <HAL_TIM_PWM_Start+0x6a>
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b08      	cmp	r3, #8
 8006d92:	d109      	bne.n	8006da8 <HAL_TIM_PWM_Start+0x58>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	bf14      	ite	ne
 8006da0:	2301      	movne	r3, #1
 8006da2:	2300      	moveq	r3, #0
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	e008      	b.n	8006dba <HAL_TIM_PWM_Start+0x6a>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	bf14      	ite	ne
 8006db4:	2301      	movne	r3, #1
 8006db6:	2300      	moveq	r3, #0
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d001      	beq.n	8006dc2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e068      	b.n	8006e94 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d104      	bne.n	8006dd2 <HAL_TIM_PWM_Start+0x82>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2202      	movs	r2, #2
 8006dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dd0:	e013      	b.n	8006dfa <HAL_TIM_PWM_Start+0xaa>
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	2b04      	cmp	r3, #4
 8006dd6:	d104      	bne.n	8006de2 <HAL_TIM_PWM_Start+0x92>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2202      	movs	r2, #2
 8006ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006de0:	e00b      	b.n	8006dfa <HAL_TIM_PWM_Start+0xaa>
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2b08      	cmp	r3, #8
 8006de6:	d104      	bne.n	8006df2 <HAL_TIM_PWM_Start+0xa2>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2202      	movs	r2, #2
 8006dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006df0:	e003      	b.n	8006dfa <HAL_TIM_PWM_Start+0xaa>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2202      	movs	r2, #2
 8006df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	6839      	ldr	r1, [r7, #0]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 fe22 	bl	8007a4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a23      	ldr	r2, [pc, #140]	; (8006e9c <HAL_TIM_PWM_Start+0x14c>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d107      	bne.n	8006e22 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a1d      	ldr	r2, [pc, #116]	; (8006e9c <HAL_TIM_PWM_Start+0x14c>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d018      	beq.n	8006e5e <HAL_TIM_PWM_Start+0x10e>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e34:	d013      	beq.n	8006e5e <HAL_TIM_PWM_Start+0x10e>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a19      	ldr	r2, [pc, #100]	; (8006ea0 <HAL_TIM_PWM_Start+0x150>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d00e      	beq.n	8006e5e <HAL_TIM_PWM_Start+0x10e>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a17      	ldr	r2, [pc, #92]	; (8006ea4 <HAL_TIM_PWM_Start+0x154>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d009      	beq.n	8006e5e <HAL_TIM_PWM_Start+0x10e>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a16      	ldr	r2, [pc, #88]	; (8006ea8 <HAL_TIM_PWM_Start+0x158>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d004      	beq.n	8006e5e <HAL_TIM_PWM_Start+0x10e>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a14      	ldr	r2, [pc, #80]	; (8006eac <HAL_TIM_PWM_Start+0x15c>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d111      	bne.n	8006e82 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f003 0307 	and.w	r3, r3, #7
 8006e68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2b06      	cmp	r3, #6
 8006e6e:	d010      	beq.n	8006e92 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f042 0201 	orr.w	r2, r2, #1
 8006e7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e80:	e007      	b.n	8006e92 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f042 0201 	orr.w	r2, r2, #1
 8006e90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	40010000 	.word	0x40010000
 8006ea0:	40000400 	.word	0x40000400
 8006ea4:	40000800 	.word	0x40000800
 8006ea8:	40000c00 	.word	0x40000c00
 8006eac:	40014000 	.word	0x40014000

08006eb0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	6839      	ldr	r1, [r7, #0]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f000 fdc2 	bl	8007a4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a29      	ldr	r2, [pc, #164]	; (8006f74 <HAL_TIM_PWM_Stop+0xc4>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d117      	bne.n	8006f02 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	6a1a      	ldr	r2, [r3, #32]
 8006ed8:	f241 1311 	movw	r3, #4369	; 0x1111
 8006edc:	4013      	ands	r3, r2
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10f      	bne.n	8006f02 <HAL_TIM_PWM_Stop+0x52>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	6a1a      	ldr	r2, [r3, #32]
 8006ee8:	f240 4344 	movw	r3, #1092	; 0x444
 8006eec:	4013      	ands	r3, r2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d107      	bne.n	8006f02 <HAL_TIM_PWM_Stop+0x52>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	6a1a      	ldr	r2, [r3, #32]
 8006f08:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10f      	bne.n	8006f32 <HAL_TIM_PWM_Stop+0x82>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	6a1a      	ldr	r2, [r3, #32]
 8006f18:	f240 4344 	movw	r3, #1092	; 0x444
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d107      	bne.n	8006f32 <HAL_TIM_PWM_Stop+0x82>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f022 0201 	bic.w	r2, r2, #1
 8006f30:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d104      	bne.n	8006f42 <HAL_TIM_PWM_Stop+0x92>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f40:	e013      	b.n	8006f6a <HAL_TIM_PWM_Stop+0xba>
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b04      	cmp	r3, #4
 8006f46:	d104      	bne.n	8006f52 <HAL_TIM_PWM_Stop+0xa2>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f50:	e00b      	b.n	8006f6a <HAL_TIM_PWM_Stop+0xba>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b08      	cmp	r3, #8
 8006f56:	d104      	bne.n	8006f62 <HAL_TIM_PWM_Stop+0xb2>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f60:	e003      	b.n	8006f6a <HAL_TIM_PWM_Stop+0xba>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3708      	adds	r7, #8
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	40010000 	.word	0x40010000

08006f78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	f003 0302 	and.w	r3, r3, #2
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d122      	bne.n	8006fd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	f003 0302 	and.w	r3, r3, #2
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d11b      	bne.n	8006fd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f06f 0202 	mvn.w	r2, #2
 8006fa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	f003 0303 	and.w	r3, r3, #3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d003      	beq.n	8006fc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fa81 	bl	80074c2 <HAL_TIM_IC_CaptureCallback>
 8006fc0:	e005      	b.n	8006fce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fa73 	bl	80074ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fa84 	bl	80074d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	f003 0304 	and.w	r3, r3, #4
 8006fde:	2b04      	cmp	r3, #4
 8006fe0:	d122      	bne.n	8007028 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	f003 0304 	and.w	r3, r3, #4
 8006fec:	2b04      	cmp	r3, #4
 8006fee:	d11b      	bne.n	8007028 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f06f 0204 	mvn.w	r2, #4
 8006ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2202      	movs	r2, #2
 8006ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800700a:	2b00      	cmp	r3, #0
 800700c:	d003      	beq.n	8007016 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fa57 	bl	80074c2 <HAL_TIM_IC_CaptureCallback>
 8007014:	e005      	b.n	8007022 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fa49 	bl	80074ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 fa5a 	bl	80074d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	f003 0308 	and.w	r3, r3, #8
 8007032:	2b08      	cmp	r3, #8
 8007034:	d122      	bne.n	800707c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	f003 0308 	and.w	r3, r3, #8
 8007040:	2b08      	cmp	r3, #8
 8007042:	d11b      	bne.n	800707c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f06f 0208 	mvn.w	r2, #8
 800704c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2204      	movs	r2, #4
 8007052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	69db      	ldr	r3, [r3, #28]
 800705a:	f003 0303 	and.w	r3, r3, #3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d003      	beq.n	800706a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fa2d 	bl	80074c2 <HAL_TIM_IC_CaptureCallback>
 8007068:	e005      	b.n	8007076 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 fa1f 	bl	80074ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fa30 	bl	80074d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	f003 0310 	and.w	r3, r3, #16
 8007086:	2b10      	cmp	r3, #16
 8007088:	d122      	bne.n	80070d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	f003 0310 	and.w	r3, r3, #16
 8007094:	2b10      	cmp	r3, #16
 8007096:	d11b      	bne.n	80070d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f06f 0210 	mvn.w	r2, #16
 80070a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2208      	movs	r2, #8
 80070a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d003      	beq.n	80070be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fa03 	bl	80074c2 <HAL_TIM_IC_CaptureCallback>
 80070bc:	e005      	b.n	80070ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f9f5 	bl	80074ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fa06 	bl	80074d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d10e      	bne.n	80070fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d107      	bne.n	80070fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f06f 0201 	mvn.w	r2, #1
 80070f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f9cf 	bl	800749a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007106:	2b80      	cmp	r3, #128	; 0x80
 8007108:	d10e      	bne.n	8007128 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007114:	2b80      	cmp	r3, #128	; 0x80
 8007116:	d107      	bne.n	8007128 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fd82 	bl	8007c2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007132:	2b40      	cmp	r3, #64	; 0x40
 8007134:	d10e      	bne.n	8007154 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007140:	2b40      	cmp	r3, #64	; 0x40
 8007142:	d107      	bne.n	8007154 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800714c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f9cb 	bl	80074ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	f003 0320 	and.w	r3, r3, #32
 800715e:	2b20      	cmp	r3, #32
 8007160:	d10e      	bne.n	8007180 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f003 0320 	and.w	r3, r3, #32
 800716c:	2b20      	cmp	r3, #32
 800716e:	d107      	bne.n	8007180 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f06f 0220 	mvn.w	r2, #32
 8007178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fd4c 	bl	8007c18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007180:	bf00      	nop
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007194:	2300      	movs	r3, #0
 8007196:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d101      	bne.n	80071a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071a2:	2302      	movs	r3, #2
 80071a4:	e0ae      	b.n	8007304 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2b0c      	cmp	r3, #12
 80071b2:	f200 809f 	bhi.w	80072f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80071b6:	a201      	add	r2, pc, #4	; (adr r2, 80071bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071bc:	080071f1 	.word	0x080071f1
 80071c0:	080072f5 	.word	0x080072f5
 80071c4:	080072f5 	.word	0x080072f5
 80071c8:	080072f5 	.word	0x080072f5
 80071cc:	08007231 	.word	0x08007231
 80071d0:	080072f5 	.word	0x080072f5
 80071d4:	080072f5 	.word	0x080072f5
 80071d8:	080072f5 	.word	0x080072f5
 80071dc:	08007273 	.word	0x08007273
 80071e0:	080072f5 	.word	0x080072f5
 80071e4:	080072f5 	.word	0x080072f5
 80071e8:	080072f5 	.word	0x080072f5
 80071ec:	080072b3 	.word	0x080072b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68b9      	ldr	r1, [r7, #8]
 80071f6:	4618      	mov	r0, r3
 80071f8:	f000 fa02 	bl	8007600 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	699a      	ldr	r2, [r3, #24]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f042 0208 	orr.w	r2, r2, #8
 800720a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	699a      	ldr	r2, [r3, #24]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 0204 	bic.w	r2, r2, #4
 800721a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6999      	ldr	r1, [r3, #24]
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	691a      	ldr	r2, [r3, #16]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	430a      	orrs	r2, r1
 800722c:	619a      	str	r2, [r3, #24]
      break;
 800722e:	e064      	b.n	80072fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68b9      	ldr	r1, [r7, #8]
 8007236:	4618      	mov	r0, r3
 8007238:	f000 fa48 	bl	80076cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	699a      	ldr	r2, [r3, #24]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800724a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	699a      	ldr	r2, [r3, #24]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800725a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6999      	ldr	r1, [r3, #24]
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	021a      	lsls	r2, r3, #8
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	430a      	orrs	r2, r1
 800726e:	619a      	str	r2, [r3, #24]
      break;
 8007270:	e043      	b.n	80072fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68b9      	ldr	r1, [r7, #8]
 8007278:	4618      	mov	r0, r3
 800727a:	f000 fa93 	bl	80077a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	69da      	ldr	r2, [r3, #28]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f042 0208 	orr.w	r2, r2, #8
 800728c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	69da      	ldr	r2, [r3, #28]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f022 0204 	bic.w	r2, r2, #4
 800729c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	69d9      	ldr	r1, [r3, #28]
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	691a      	ldr	r2, [r3, #16]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	430a      	orrs	r2, r1
 80072ae:	61da      	str	r2, [r3, #28]
      break;
 80072b0:	e023      	b.n	80072fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68b9      	ldr	r1, [r7, #8]
 80072b8:	4618      	mov	r0, r3
 80072ba:	f000 fadd 	bl	8007878 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	69da      	ldr	r2, [r3, #28]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	69da      	ldr	r2, [r3, #28]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	69d9      	ldr	r1, [r3, #28]
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	021a      	lsls	r2, r3, #8
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	430a      	orrs	r2, r1
 80072f0:	61da      	str	r2, [r3, #28]
      break;
 80072f2:	e002      	b.n	80072fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	75fb      	strb	r3, [r7, #23]
      break;
 80072f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007302:	7dfb      	ldrb	r3, [r7, #23]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3718      	adds	r7, #24
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007316:	2300      	movs	r3, #0
 8007318:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007320:	2b01      	cmp	r3, #1
 8007322:	d101      	bne.n	8007328 <HAL_TIM_ConfigClockSource+0x1c>
 8007324:	2302      	movs	r3, #2
 8007326:	e0b4      	b.n	8007492 <HAL_TIM_ConfigClockSource+0x186>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800734e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007360:	d03e      	beq.n	80073e0 <HAL_TIM_ConfigClockSource+0xd4>
 8007362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007366:	f200 8087 	bhi.w	8007478 <HAL_TIM_ConfigClockSource+0x16c>
 800736a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800736e:	f000 8086 	beq.w	800747e <HAL_TIM_ConfigClockSource+0x172>
 8007372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007376:	d87f      	bhi.n	8007478 <HAL_TIM_ConfigClockSource+0x16c>
 8007378:	2b70      	cmp	r3, #112	; 0x70
 800737a:	d01a      	beq.n	80073b2 <HAL_TIM_ConfigClockSource+0xa6>
 800737c:	2b70      	cmp	r3, #112	; 0x70
 800737e:	d87b      	bhi.n	8007478 <HAL_TIM_ConfigClockSource+0x16c>
 8007380:	2b60      	cmp	r3, #96	; 0x60
 8007382:	d050      	beq.n	8007426 <HAL_TIM_ConfigClockSource+0x11a>
 8007384:	2b60      	cmp	r3, #96	; 0x60
 8007386:	d877      	bhi.n	8007478 <HAL_TIM_ConfigClockSource+0x16c>
 8007388:	2b50      	cmp	r3, #80	; 0x50
 800738a:	d03c      	beq.n	8007406 <HAL_TIM_ConfigClockSource+0xfa>
 800738c:	2b50      	cmp	r3, #80	; 0x50
 800738e:	d873      	bhi.n	8007478 <HAL_TIM_ConfigClockSource+0x16c>
 8007390:	2b40      	cmp	r3, #64	; 0x40
 8007392:	d058      	beq.n	8007446 <HAL_TIM_ConfigClockSource+0x13a>
 8007394:	2b40      	cmp	r3, #64	; 0x40
 8007396:	d86f      	bhi.n	8007478 <HAL_TIM_ConfigClockSource+0x16c>
 8007398:	2b30      	cmp	r3, #48	; 0x30
 800739a:	d064      	beq.n	8007466 <HAL_TIM_ConfigClockSource+0x15a>
 800739c:	2b30      	cmp	r3, #48	; 0x30
 800739e:	d86b      	bhi.n	8007478 <HAL_TIM_ConfigClockSource+0x16c>
 80073a0:	2b20      	cmp	r3, #32
 80073a2:	d060      	beq.n	8007466 <HAL_TIM_ConfigClockSource+0x15a>
 80073a4:	2b20      	cmp	r3, #32
 80073a6:	d867      	bhi.n	8007478 <HAL_TIM_ConfigClockSource+0x16c>
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d05c      	beq.n	8007466 <HAL_TIM_ConfigClockSource+0x15a>
 80073ac:	2b10      	cmp	r3, #16
 80073ae:	d05a      	beq.n	8007466 <HAL_TIM_ConfigClockSource+0x15a>
 80073b0:	e062      	b.n	8007478 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6818      	ldr	r0, [r3, #0]
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	6899      	ldr	r1, [r3, #8]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	685a      	ldr	r2, [r3, #4]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	f000 fb23 	bl	8007a0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	609a      	str	r2, [r3, #8]
      break;
 80073de:	e04f      	b.n	8007480 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6818      	ldr	r0, [r3, #0]
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	6899      	ldr	r1, [r3, #8]
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	685a      	ldr	r2, [r3, #4]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	f000 fb0c 	bl	8007a0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	689a      	ldr	r2, [r3, #8]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007402:	609a      	str	r2, [r3, #8]
      break;
 8007404:	e03c      	b.n	8007480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6818      	ldr	r0, [r3, #0]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	6859      	ldr	r1, [r3, #4]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	461a      	mov	r2, r3
 8007414:	f000 fa80 	bl	8007918 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2150      	movs	r1, #80	; 0x50
 800741e:	4618      	mov	r0, r3
 8007420:	f000 fad9 	bl	80079d6 <TIM_ITRx_SetConfig>
      break;
 8007424:	e02c      	b.n	8007480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6818      	ldr	r0, [r3, #0]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	6859      	ldr	r1, [r3, #4]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	461a      	mov	r2, r3
 8007434:	f000 fa9f 	bl	8007976 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2160      	movs	r1, #96	; 0x60
 800743e:	4618      	mov	r0, r3
 8007440:	f000 fac9 	bl	80079d6 <TIM_ITRx_SetConfig>
      break;
 8007444:	e01c      	b.n	8007480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6818      	ldr	r0, [r3, #0]
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	6859      	ldr	r1, [r3, #4]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	461a      	mov	r2, r3
 8007454:	f000 fa60 	bl	8007918 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2140      	movs	r1, #64	; 0x40
 800745e:	4618      	mov	r0, r3
 8007460:	f000 fab9 	bl	80079d6 <TIM_ITRx_SetConfig>
      break;
 8007464:	e00c      	b.n	8007480 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4619      	mov	r1, r3
 8007470:	4610      	mov	r0, r2
 8007472:	f000 fab0 	bl	80079d6 <TIM_ITRx_SetConfig>
      break;
 8007476:	e003      	b.n	8007480 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	73fb      	strb	r3, [r7, #15]
      break;
 800747c:	e000      	b.n	8007480 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800747e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007490:	7bfb      	ldrb	r3, [r7, #15]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800749a:	b480      	push	{r7}
 800749c:	b083      	sub	sp, #12
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80074a2:	bf00      	nop
 80074a4:	370c      	adds	r7, #12
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b083      	sub	sp, #12
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074b6:	bf00      	nop
 80074b8:	370c      	adds	r7, #12
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074c2:	b480      	push	{r7}
 80074c4:	b083      	sub	sp, #12
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074ca:	bf00      	nop
 80074cc:	370c      	adds	r7, #12
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b083      	sub	sp, #12
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074de:	bf00      	nop
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074f2:	bf00      	nop
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
	...

08007500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a34      	ldr	r2, [pc, #208]	; (80075e4 <TIM_Base_SetConfig+0xe4>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d00f      	beq.n	8007538 <TIM_Base_SetConfig+0x38>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800751e:	d00b      	beq.n	8007538 <TIM_Base_SetConfig+0x38>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a31      	ldr	r2, [pc, #196]	; (80075e8 <TIM_Base_SetConfig+0xe8>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d007      	beq.n	8007538 <TIM_Base_SetConfig+0x38>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a30      	ldr	r2, [pc, #192]	; (80075ec <TIM_Base_SetConfig+0xec>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d003      	beq.n	8007538 <TIM_Base_SetConfig+0x38>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a2f      	ldr	r2, [pc, #188]	; (80075f0 <TIM_Base_SetConfig+0xf0>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d108      	bne.n	800754a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800753e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	4313      	orrs	r3, r2
 8007548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a25      	ldr	r2, [pc, #148]	; (80075e4 <TIM_Base_SetConfig+0xe4>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d01b      	beq.n	800758a <TIM_Base_SetConfig+0x8a>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007558:	d017      	beq.n	800758a <TIM_Base_SetConfig+0x8a>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a22      	ldr	r2, [pc, #136]	; (80075e8 <TIM_Base_SetConfig+0xe8>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d013      	beq.n	800758a <TIM_Base_SetConfig+0x8a>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a21      	ldr	r2, [pc, #132]	; (80075ec <TIM_Base_SetConfig+0xec>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d00f      	beq.n	800758a <TIM_Base_SetConfig+0x8a>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a20      	ldr	r2, [pc, #128]	; (80075f0 <TIM_Base_SetConfig+0xf0>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d00b      	beq.n	800758a <TIM_Base_SetConfig+0x8a>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a1f      	ldr	r2, [pc, #124]	; (80075f4 <TIM_Base_SetConfig+0xf4>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d007      	beq.n	800758a <TIM_Base_SetConfig+0x8a>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a1e      	ldr	r2, [pc, #120]	; (80075f8 <TIM_Base_SetConfig+0xf8>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d003      	beq.n	800758a <TIM_Base_SetConfig+0x8a>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a1d      	ldr	r2, [pc, #116]	; (80075fc <TIM_Base_SetConfig+0xfc>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d108      	bne.n	800759c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	4313      	orrs	r3, r2
 800759a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	695b      	ldr	r3, [r3, #20]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	689a      	ldr	r2, [r3, #8]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a08      	ldr	r2, [pc, #32]	; (80075e4 <TIM_Base_SetConfig+0xe4>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d103      	bne.n	80075d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	691a      	ldr	r2, [r3, #16]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	615a      	str	r2, [r3, #20]
}
 80075d6:	bf00      	nop
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	40010000 	.word	0x40010000
 80075e8:	40000400 	.word	0x40000400
 80075ec:	40000800 	.word	0x40000800
 80075f0:	40000c00 	.word	0x40000c00
 80075f4:	40014000 	.word	0x40014000
 80075f8:	40014400 	.word	0x40014400
 80075fc:	40014800 	.word	0x40014800

08007600 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007600:	b480      	push	{r7}
 8007602:	b087      	sub	sp, #28
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	f023 0201 	bic.w	r2, r3, #1
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800762e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f023 0303 	bic.w	r3, r3, #3
 8007636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	4313      	orrs	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	f023 0302 	bic.w	r3, r3, #2
 8007648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	4313      	orrs	r3, r2
 8007652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a1c      	ldr	r2, [pc, #112]	; (80076c8 <TIM_OC1_SetConfig+0xc8>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d10c      	bne.n	8007676 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	f023 0308 	bic.w	r3, r3, #8
 8007662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	4313      	orrs	r3, r2
 800766c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	f023 0304 	bic.w	r3, r3, #4
 8007674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a13      	ldr	r2, [pc, #76]	; (80076c8 <TIM_OC1_SetConfig+0xc8>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d111      	bne.n	80076a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800768c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	693a      	ldr	r2, [r7, #16]
 8007694:	4313      	orrs	r3, r2
 8007696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	4313      	orrs	r3, r2
 80076a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	697a      	ldr	r2, [r7, #20]
 80076ba:	621a      	str	r2, [r3, #32]
}
 80076bc:	bf00      	nop
 80076be:	371c      	adds	r7, #28
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr
 80076c8:	40010000 	.word	0x40010000

080076cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b087      	sub	sp, #28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	f023 0210 	bic.w	r2, r3, #16
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	021b      	lsls	r3, r3, #8
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	4313      	orrs	r3, r2
 800770e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	f023 0320 	bic.w	r3, r3, #32
 8007716:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	011b      	lsls	r3, r3, #4
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	4313      	orrs	r3, r2
 8007722:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a1e      	ldr	r2, [pc, #120]	; (80077a0 <TIM_OC2_SetConfig+0xd4>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d10d      	bne.n	8007748 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	011b      	lsls	r3, r3, #4
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	4313      	orrs	r3, r2
 800773e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007746:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a15      	ldr	r2, [pc, #84]	; (80077a0 <TIM_OC2_SetConfig+0xd4>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d113      	bne.n	8007778 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007756:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800775e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	695b      	ldr	r3, [r3, #20]
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	4313      	orrs	r3, r2
 800776a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	4313      	orrs	r3, r2
 8007776:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	621a      	str	r2, [r3, #32]
}
 8007792:	bf00      	nop
 8007794:	371c      	adds	r7, #28
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	40010000 	.word	0x40010000

080077a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	69db      	ldr	r3, [r3, #28]
 80077ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f023 0303 	bic.w	r3, r3, #3
 80077da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	021b      	lsls	r3, r3, #8
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a1d      	ldr	r2, [pc, #116]	; (8007874 <TIM_OC3_SetConfig+0xd0>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d10d      	bne.n	800781e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007808:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	021b      	lsls	r3, r3, #8
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	4313      	orrs	r3, r2
 8007814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800781c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a14      	ldr	r2, [pc, #80]	; (8007874 <TIM_OC3_SetConfig+0xd0>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d113      	bne.n	800784e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800782c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007834:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	011b      	lsls	r3, r3, #4
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	4313      	orrs	r3, r2
 8007840:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	011b      	lsls	r3, r3, #4
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	4313      	orrs	r3, r2
 800784c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	693a      	ldr	r2, [r7, #16]
 8007852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	685a      	ldr	r2, [r3, #4]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	621a      	str	r2, [r3, #32]
}
 8007868:	bf00      	nop
 800786a:	371c      	adds	r7, #28
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr
 8007874:	40010000 	.word	0x40010000

08007878 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a1b      	ldr	r3, [r3, #32]
 8007892:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	69db      	ldr	r3, [r3, #28]
 800789e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	021b      	lsls	r3, r3, #8
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	031b      	lsls	r3, r3, #12
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a10      	ldr	r2, [pc, #64]	; (8007914 <TIM_OC4_SetConfig+0x9c>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d109      	bne.n	80078ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	695b      	ldr	r3, [r3, #20]
 80078e4:	019b      	lsls	r3, r3, #6
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	621a      	str	r2, [r3, #32]
}
 8007906:	bf00      	nop
 8007908:	371c      	adds	r7, #28
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	40010000 	.word	0x40010000

08007918 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007918:	b480      	push	{r7}
 800791a:	b087      	sub	sp, #28
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6a1b      	ldr	r3, [r3, #32]
 8007928:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	f023 0201 	bic.w	r2, r3, #1
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007942:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	011b      	lsls	r3, r3, #4
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	4313      	orrs	r3, r2
 800794c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	f023 030a 	bic.w	r3, r3, #10
 8007954:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	4313      	orrs	r3, r2
 800795c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	621a      	str	r2, [r3, #32]
}
 800796a:	bf00      	nop
 800796c:	371c      	adds	r7, #28
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007976:	b480      	push	{r7}
 8007978:	b087      	sub	sp, #28
 800797a:	af00      	add	r7, sp, #0
 800797c:	60f8      	str	r0, [r7, #12]
 800797e:	60b9      	str	r1, [r7, #8]
 8007980:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	f023 0210 	bic.w	r2, r3, #16
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6a1b      	ldr	r3, [r3, #32]
 8007998:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	031b      	lsls	r3, r3, #12
 80079a6:	697a      	ldr	r2, [r7, #20]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80079b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	011b      	lsls	r3, r3, #4
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	693a      	ldr	r2, [r7, #16]
 80079c8:	621a      	str	r2, [r3, #32]
}
 80079ca:	bf00      	nop
 80079cc:	371c      	adds	r7, #28
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b085      	sub	sp, #20
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
 80079de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	f043 0307 	orr.w	r3, r3, #7
 80079f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	609a      	str	r2, [r3, #8]
}
 8007a00:	bf00      	nop
 8007a02:	3714      	adds	r7, #20
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b087      	sub	sp, #28
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	607a      	str	r2, [r7, #4]
 8007a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	021a      	lsls	r2, r3, #8
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	431a      	orrs	r2, r3
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	697a      	ldr	r2, [r7, #20]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	697a      	ldr	r2, [r7, #20]
 8007a3e:	609a      	str	r2, [r3, #8]
}
 8007a40:	bf00      	nop
 8007a42:	371c      	adds	r7, #28
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b087      	sub	sp, #28
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	f003 031f 	and.w	r3, r3, #31
 8007a5e:	2201      	movs	r2, #1
 8007a60:	fa02 f303 	lsl.w	r3, r2, r3
 8007a64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6a1a      	ldr	r2, [r3, #32]
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	43db      	mvns	r3, r3
 8007a6e:	401a      	ands	r2, r3
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6a1a      	ldr	r2, [r3, #32]
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	f003 031f 	and.w	r3, r3, #31
 8007a7e:	6879      	ldr	r1, [r7, #4]
 8007a80:	fa01 f303 	lsl.w	r3, r1, r3
 8007a84:	431a      	orrs	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	621a      	str	r2, [r3, #32]
}
 8007a8a:	bf00      	nop
 8007a8c:	371c      	adds	r7, #28
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
	...

08007a98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d101      	bne.n	8007ab0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007aac:	2302      	movs	r3, #2
 8007aae:	e050      	b.n	8007b52 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2202      	movs	r2, #2
 8007abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ad6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a1c      	ldr	r2, [pc, #112]	; (8007b60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d018      	beq.n	8007b26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007afc:	d013      	beq.n	8007b26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a18      	ldr	r2, [pc, #96]	; (8007b64 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d00e      	beq.n	8007b26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a16      	ldr	r2, [pc, #88]	; (8007b68 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d009      	beq.n	8007b26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a15      	ldr	r2, [pc, #84]	; (8007b6c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d004      	beq.n	8007b26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a13      	ldr	r2, [pc, #76]	; (8007b70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d10c      	bne.n	8007b40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	40010000 	.word	0x40010000
 8007b64:	40000400 	.word	0x40000400
 8007b68:	40000800 	.word	0x40000800
 8007b6c:	40000c00 	.word	0x40000c00
 8007b70:	40014000 	.word	0x40014000

08007b74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d101      	bne.n	8007b90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	e03d      	b.n	8007c0c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	695b      	ldr	r3, [r3, #20]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	69db      	ldr	r3, [r3, #28]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3714      	adds	r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d101      	bne.n	8007c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e03f      	b.n	8007cd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d106      	bne.n	8007c6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7fc fed4 	bl	8004a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2224      	movs	r2, #36	; 0x24
 8007c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68da      	ldr	r2, [r3, #12]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fddf 	bl	8008848 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	691a      	ldr	r2, [r3, #16]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	695a      	ldr	r2, [r3, #20]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ca8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68da      	ldr	r2, [r3, #12]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2220      	movs	r2, #32
 8007cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2220      	movs	r2, #32
 8007ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b08a      	sub	sp, #40	; 0x28
 8007cde:	af02      	add	r7, sp, #8
 8007ce0:	60f8      	str	r0, [r7, #12]
 8007ce2:	60b9      	str	r1, [r7, #8]
 8007ce4:	603b      	str	r3, [r7, #0]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b20      	cmp	r3, #32
 8007cf8:	d17c      	bne.n	8007df4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d002      	beq.n	8007d06 <HAL_UART_Transmit+0x2c>
 8007d00:	88fb      	ldrh	r3, [r7, #6]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d101      	bne.n	8007d0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e075      	b.n	8007df6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d101      	bne.n	8007d18 <HAL_UART_Transmit+0x3e>
 8007d14:	2302      	movs	r3, #2
 8007d16:	e06e      	b.n	8007df6 <HAL_UART_Transmit+0x11c>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2200      	movs	r2, #0
 8007d24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2221      	movs	r2, #33	; 0x21
 8007d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d2e:	f7fd f92b 	bl	8004f88 <HAL_GetTick>
 8007d32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	88fa      	ldrh	r2, [r7, #6]
 8007d38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	88fa      	ldrh	r2, [r7, #6]
 8007d3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d48:	d108      	bne.n	8007d5c <HAL_UART_Transmit+0x82>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d104      	bne.n	8007d5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007d52:	2300      	movs	r3, #0
 8007d54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	61bb      	str	r3, [r7, #24]
 8007d5a:	e003      	b.n	8007d64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d60:	2300      	movs	r3, #0
 8007d62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007d6c:	e02a      	b.n	8007dc4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2200      	movs	r2, #0
 8007d76:	2180      	movs	r1, #128	; 0x80
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f000 fb1f 	bl	80083bc <UART_WaitOnFlagUntilTimeout>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d001      	beq.n	8007d88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e036      	b.n	8007df6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10b      	bne.n	8007da6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	881b      	ldrh	r3, [r3, #0]
 8007d92:	461a      	mov	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	3302      	adds	r3, #2
 8007da2:	61bb      	str	r3, [r7, #24]
 8007da4:	e007      	b.n	8007db6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	781a      	ldrb	r2, [r3, #0]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	3301      	adds	r3, #1
 8007db4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1cf      	bne.n	8007d6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	2140      	movs	r1, #64	; 0x40
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f000 faef 	bl	80083bc <UART_WaitOnFlagUntilTimeout>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d001      	beq.n	8007de8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e006      	b.n	8007df6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2220      	movs	r2, #32
 8007dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007df0:	2300      	movs	r3, #0
 8007df2:	e000      	b.n	8007df6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007df4:	2302      	movs	r3, #2
  }
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3720      	adds	r7, #32
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b084      	sub	sp, #16
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	60f8      	str	r0, [r7, #12]
 8007e06:	60b9      	str	r1, [r7, #8]
 8007e08:	4613      	mov	r3, r2
 8007e0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	2b20      	cmp	r3, #32
 8007e16:	d11d      	bne.n	8007e54 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d002      	beq.n	8007e24 <HAL_UART_Receive_IT+0x26>
 8007e1e:	88fb      	ldrh	r3, [r7, #6]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d101      	bne.n	8007e28 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	e016      	b.n	8007e56 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d101      	bne.n	8007e36 <HAL_UART_Receive_IT+0x38>
 8007e32:	2302      	movs	r3, #2
 8007e34:	e00f      	b.n	8007e56 <HAL_UART_Receive_IT+0x58>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007e44:	88fb      	ldrh	r3, [r7, #6]
 8007e46:	461a      	mov	r2, r3
 8007e48:	68b9      	ldr	r1, [r7, #8]
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f000 fb24 	bl	8008498 <UART_Start_Receive_IT>
 8007e50:	4603      	mov	r3, r0
 8007e52:	e000      	b.n	8007e56 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007e54:	2302      	movs	r3, #2
  }
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
	...

08007e60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b0ba      	sub	sp, #232	; 0xe8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007e86:	2300      	movs	r3, #0
 8007e88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e96:	f003 030f 	and.w	r3, r3, #15
 8007e9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007e9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d10f      	bne.n	8007ec6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eaa:	f003 0320 	and.w	r3, r3, #32
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d009      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x66>
 8007eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eb6:	f003 0320 	and.w	r3, r3, #32
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fc07 	bl	80086d2 <UART_Receive_IT>
      return;
 8007ec4:	e256      	b.n	8008374 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007ec6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 80de 	beq.w	800808c <HAL_UART_IRQHandler+0x22c>
 8007ed0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d106      	bne.n	8007eea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ee0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 80d1 	beq.w	800808c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eee:	f003 0301 	and.w	r3, r3, #1
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00b      	beq.n	8007f0e <HAL_UART_IRQHandler+0xae>
 8007ef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d005      	beq.n	8007f0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f06:	f043 0201 	orr.w	r2, r3, #1
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f12:	f003 0304 	and.w	r3, r3, #4
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00b      	beq.n	8007f32 <HAL_UART_IRQHandler+0xd2>
 8007f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f1e:	f003 0301 	and.w	r3, r3, #1
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d005      	beq.n	8007f32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2a:	f043 0202 	orr.w	r2, r3, #2
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f36:	f003 0302 	and.w	r3, r3, #2
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00b      	beq.n	8007f56 <HAL_UART_IRQHandler+0xf6>
 8007f3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f42:	f003 0301 	and.w	r3, r3, #1
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d005      	beq.n	8007f56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4e:	f043 0204 	orr.w	r2, r3, #4
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f5a:	f003 0308 	and.w	r3, r3, #8
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d011      	beq.n	8007f86 <HAL_UART_IRQHandler+0x126>
 8007f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f66:	f003 0320 	and.w	r3, r3, #32
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d105      	bne.n	8007f7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f72:	f003 0301 	and.w	r3, r3, #1
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d005      	beq.n	8007f86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7e:	f043 0208 	orr.w	r2, r3, #8
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f000 81ed 	beq.w	800836a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f94:	f003 0320 	and.w	r3, r3, #32
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d008      	beq.n	8007fae <HAL_UART_IRQHandler+0x14e>
 8007f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fa0:	f003 0320 	and.w	r3, r3, #32
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d002      	beq.n	8007fae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 fb92 	bl	80086d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	695b      	ldr	r3, [r3, #20]
 8007fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb8:	2b40      	cmp	r3, #64	; 0x40
 8007fba:	bf0c      	ite	eq
 8007fbc:	2301      	moveq	r3, #1
 8007fbe:	2300      	movne	r3, #0
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fca:	f003 0308 	and.w	r3, r3, #8
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d103      	bne.n	8007fda <HAL_UART_IRQHandler+0x17a>
 8007fd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d04f      	beq.n	800807a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 fa9a 	bl	8008514 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fea:	2b40      	cmp	r3, #64	; 0x40
 8007fec:	d141      	bne.n	8008072 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	3314      	adds	r3, #20
 8007ff4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ffc:	e853 3f00 	ldrex	r3, [r3]
 8008000:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008004:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800800c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	3314      	adds	r3, #20
 8008016:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800801a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800801e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008022:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008026:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800802a:	e841 2300 	strex	r3, r2, [r1]
 800802e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008032:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d1d9      	bne.n	8007fee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803e:	2b00      	cmp	r3, #0
 8008040:	d013      	beq.n	800806a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008046:	4a7d      	ldr	r2, [pc, #500]	; (800823c <HAL_UART_IRQHandler+0x3dc>)
 8008048:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804e:	4618      	mov	r0, r3
 8008050:	f7fd f94b 	bl	80052ea <HAL_DMA_Abort_IT>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d016      	beq.n	8008088 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008064:	4610      	mov	r0, r2
 8008066:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008068:	e00e      	b.n	8008088 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f990 	bl	8008390 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008070:	e00a      	b.n	8008088 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f98c 	bl	8008390 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008078:	e006      	b.n	8008088 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f988 	bl	8008390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008086:	e170      	b.n	800836a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008088:	bf00      	nop
    return;
 800808a:	e16e      	b.n	800836a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008090:	2b01      	cmp	r3, #1
 8008092:	f040 814a 	bne.w	800832a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800809a:	f003 0310 	and.w	r3, r3, #16
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f000 8143 	beq.w	800832a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80080a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080a8:	f003 0310 	and.w	r3, r3, #16
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f000 813c 	beq.w	800832a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080b2:	2300      	movs	r3, #0
 80080b4:	60bb      	str	r3, [r7, #8]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	60bb      	str	r3, [r7, #8]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	60bb      	str	r3, [r7, #8]
 80080c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d2:	2b40      	cmp	r3, #64	; 0x40
 80080d4:	f040 80b4 	bne.w	8008240 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80080e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f000 8140 	beq.w	800836e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80080f6:	429a      	cmp	r2, r3
 80080f8:	f080 8139 	bcs.w	800836e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008102:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008108:	69db      	ldr	r3, [r3, #28]
 800810a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800810e:	f000 8088 	beq.w	8008222 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	330c      	adds	r3, #12
 8008118:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008120:	e853 3f00 	ldrex	r3, [r3]
 8008124:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008128:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800812c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008130:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	330c      	adds	r3, #12
 800813a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800813e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008142:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008146:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800814a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800814e:	e841 2300 	strex	r3, r2, [r1]
 8008152:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008156:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1d9      	bne.n	8008112 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	3314      	adds	r3, #20
 8008164:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008168:	e853 3f00 	ldrex	r3, [r3]
 800816c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800816e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008170:	f023 0301 	bic.w	r3, r3, #1
 8008174:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	3314      	adds	r3, #20
 800817e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008182:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008186:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008188:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800818a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800818e:	e841 2300 	strex	r3, r2, [r1]
 8008192:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008194:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1e1      	bne.n	800815e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	3314      	adds	r3, #20
 80081a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081a4:	e853 3f00 	ldrex	r3, [r3]
 80081a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80081aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	3314      	adds	r3, #20
 80081ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80081be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80081c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80081c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80081c6:	e841 2300 	strex	r3, r2, [r1]
 80081ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80081cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1e3      	bne.n	800819a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2220      	movs	r2, #32
 80081d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	330c      	adds	r3, #12
 80081e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ea:	e853 3f00 	ldrex	r3, [r3]
 80081ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80081f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081f2:	f023 0310 	bic.w	r3, r3, #16
 80081f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	330c      	adds	r3, #12
 8008200:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008204:	65ba      	str	r2, [r7, #88]	; 0x58
 8008206:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008208:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800820a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800820c:	e841 2300 	strex	r3, r2, [r1]
 8008210:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008214:	2b00      	cmp	r3, #0
 8008216:	d1e3      	bne.n	80081e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821c:	4618      	mov	r0, r3
 800821e:	f7fc fff4 	bl	800520a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800822a:	b29b      	uxth	r3, r3
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	b29b      	uxth	r3, r3
 8008230:	4619      	mov	r1, r3
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f8b6 	bl	80083a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008238:	e099      	b.n	800836e <HAL_UART_IRQHandler+0x50e>
 800823a:	bf00      	nop
 800823c:	080085db 	.word	0x080085db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008248:	b29b      	uxth	r3, r3
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008254:	b29b      	uxth	r3, r3
 8008256:	2b00      	cmp	r3, #0
 8008258:	f000 808b 	beq.w	8008372 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800825c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 8086 	beq.w	8008372 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	330c      	adds	r3, #12
 800826c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008270:	e853 3f00 	ldrex	r3, [r3]
 8008274:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008278:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800827c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	330c      	adds	r3, #12
 8008286:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800828a:	647a      	str	r2, [r7, #68]	; 0x44
 800828c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008290:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008292:	e841 2300 	strex	r3, r2, [r1]
 8008296:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1e3      	bne.n	8008266 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	3314      	adds	r3, #20
 80082a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a8:	e853 3f00 	ldrex	r3, [r3]
 80082ac:	623b      	str	r3, [r7, #32]
   return(result);
 80082ae:	6a3b      	ldr	r3, [r7, #32]
 80082b0:	f023 0301 	bic.w	r3, r3, #1
 80082b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	3314      	adds	r3, #20
 80082be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80082c2:	633a      	str	r2, [r7, #48]	; 0x30
 80082c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082ca:	e841 2300 	strex	r3, r2, [r1]
 80082ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1e3      	bne.n	800829e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2220      	movs	r2, #32
 80082da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	330c      	adds	r3, #12
 80082ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	e853 3f00 	ldrex	r3, [r3]
 80082f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f023 0310 	bic.w	r3, r3, #16
 80082fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	330c      	adds	r3, #12
 8008304:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008308:	61fa      	str	r2, [r7, #28]
 800830a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800830c:	69b9      	ldr	r1, [r7, #24]
 800830e:	69fa      	ldr	r2, [r7, #28]
 8008310:	e841 2300 	strex	r3, r2, [r1]
 8008314:	617b      	str	r3, [r7, #20]
   return(result);
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d1e3      	bne.n	80082e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800831c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008320:	4619      	mov	r1, r3
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 f83e 	bl	80083a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008328:	e023      	b.n	8008372 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800832a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800832e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008332:	2b00      	cmp	r3, #0
 8008334:	d009      	beq.n	800834a <HAL_UART_IRQHandler+0x4ea>
 8008336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800833a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800833e:	2b00      	cmp	r3, #0
 8008340:	d003      	beq.n	800834a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f95d 	bl	8008602 <UART_Transmit_IT>
    return;
 8008348:	e014      	b.n	8008374 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800834a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800834e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00e      	beq.n	8008374 <HAL_UART_IRQHandler+0x514>
 8008356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800835a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800835e:	2b00      	cmp	r3, #0
 8008360:	d008      	beq.n	8008374 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 f99d 	bl	80086a2 <UART_EndTransmit_IT>
    return;
 8008368:	e004      	b.n	8008374 <HAL_UART_IRQHandler+0x514>
    return;
 800836a:	bf00      	nop
 800836c:	e002      	b.n	8008374 <HAL_UART_IRQHandler+0x514>
      return;
 800836e:	bf00      	nop
 8008370:	e000      	b.n	8008374 <HAL_UART_IRQHandler+0x514>
      return;
 8008372:	bf00      	nop
  }
}
 8008374:	37e8      	adds	r7, #232	; 0xe8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop

0800837c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	460b      	mov	r3, r1
 80083ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083b0:	bf00      	nop
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b090      	sub	sp, #64	; 0x40
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	603b      	str	r3, [r7, #0]
 80083c8:	4613      	mov	r3, r2
 80083ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083cc:	e050      	b.n	8008470 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d4:	d04c      	beq.n	8008470 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80083d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d007      	beq.n	80083ec <UART_WaitOnFlagUntilTimeout+0x30>
 80083dc:	f7fc fdd4 	bl	8004f88 <HAL_GetTick>
 80083e0:	4602      	mov	r2, r0
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d241      	bcs.n	8008470 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	330c      	adds	r3, #12
 80083f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f6:	e853 3f00 	ldrex	r3, [r3]
 80083fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	330c      	adds	r3, #12
 800840a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800840c:	637a      	str	r2, [r7, #52]	; 0x34
 800840e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008410:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008414:	e841 2300 	strex	r3, r2, [r1]
 8008418:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800841a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1e5      	bne.n	80083ec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	3314      	adds	r3, #20
 8008426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	e853 3f00 	ldrex	r3, [r3]
 800842e:	613b      	str	r3, [r7, #16]
   return(result);
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	f023 0301 	bic.w	r3, r3, #1
 8008436:	63bb      	str	r3, [r7, #56]	; 0x38
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	3314      	adds	r3, #20
 800843e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008440:	623a      	str	r2, [r7, #32]
 8008442:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008444:	69f9      	ldr	r1, [r7, #28]
 8008446:	6a3a      	ldr	r2, [r7, #32]
 8008448:	e841 2300 	strex	r3, r2, [r1]
 800844c:	61bb      	str	r3, [r7, #24]
   return(result);
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1e5      	bne.n	8008420 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2220      	movs	r2, #32
 8008458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2220      	movs	r2, #32
 8008460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800846c:	2303      	movs	r3, #3
 800846e:	e00f      	b.n	8008490 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	4013      	ands	r3, r2
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	429a      	cmp	r2, r3
 800847e:	bf0c      	ite	eq
 8008480:	2301      	moveq	r3, #1
 8008482:	2300      	movne	r3, #0
 8008484:	b2db      	uxtb	r3, r3
 8008486:	461a      	mov	r2, r3
 8008488:	79fb      	ldrb	r3, [r7, #7]
 800848a:	429a      	cmp	r2, r3
 800848c:	d09f      	beq.n	80083ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3740      	adds	r7, #64	; 0x40
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	4613      	mov	r3, r2
 80084a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	88fa      	ldrh	r2, [r7, #6]
 80084b0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	88fa      	ldrh	r2, [r7, #6]
 80084b6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2222      	movs	r2, #34	; 0x22
 80084c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d007      	beq.n	80084e6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68da      	ldr	r2, [r3, #12]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084e4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	695a      	ldr	r2, [r3, #20]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f042 0201 	orr.w	r2, r2, #1
 80084f4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68da      	ldr	r2, [r3, #12]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f042 0220 	orr.w	r2, r2, #32
 8008504:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008514:	b480      	push	{r7}
 8008516:	b095      	sub	sp, #84	; 0x54
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	330c      	adds	r3, #12
 8008522:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008526:	e853 3f00 	ldrex	r3, [r3]
 800852a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800852c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	330c      	adds	r3, #12
 800853a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800853c:	643a      	str	r2, [r7, #64]	; 0x40
 800853e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008540:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008542:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008544:	e841 2300 	strex	r3, r2, [r1]
 8008548:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800854a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1e5      	bne.n	800851c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	3314      	adds	r3, #20
 8008556:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008558:	6a3b      	ldr	r3, [r7, #32]
 800855a:	e853 3f00 	ldrex	r3, [r3]
 800855e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	f023 0301 	bic.w	r3, r3, #1
 8008566:	64bb      	str	r3, [r7, #72]	; 0x48
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	3314      	adds	r3, #20
 800856e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008570:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008572:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008574:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008578:	e841 2300 	strex	r3, r2, [r1]
 800857c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800857e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1e5      	bne.n	8008550 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008588:	2b01      	cmp	r3, #1
 800858a:	d119      	bne.n	80085c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	330c      	adds	r3, #12
 8008592:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	e853 3f00 	ldrex	r3, [r3]
 800859a:	60bb      	str	r3, [r7, #8]
   return(result);
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	f023 0310 	bic.w	r3, r3, #16
 80085a2:	647b      	str	r3, [r7, #68]	; 0x44
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	330c      	adds	r3, #12
 80085aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085ac:	61ba      	str	r2, [r7, #24]
 80085ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b0:	6979      	ldr	r1, [r7, #20]
 80085b2:	69ba      	ldr	r2, [r7, #24]
 80085b4:	e841 2300 	strex	r3, r2, [r1]
 80085b8:	613b      	str	r3, [r7, #16]
   return(result);
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d1e5      	bne.n	800858c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2220      	movs	r2, #32
 80085c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80085ce:	bf00      	nop
 80085d0:	3754      	adds	r7, #84	; 0x54
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b084      	sub	sp, #16
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2200      	movs	r2, #0
 80085f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f7ff fecb 	bl	8008390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085fa:	bf00      	nop
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008602:	b480      	push	{r7}
 8008604:	b085      	sub	sp, #20
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008610:	b2db      	uxtb	r3, r3
 8008612:	2b21      	cmp	r3, #33	; 0x21
 8008614:	d13e      	bne.n	8008694 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800861e:	d114      	bne.n	800864a <UART_Transmit_IT+0x48>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d110      	bne.n	800864a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a1b      	ldr	r3, [r3, #32]
 800862c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	461a      	mov	r2, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800863c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a1b      	ldr	r3, [r3, #32]
 8008642:	1c9a      	adds	r2, r3, #2
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	621a      	str	r2, [r3, #32]
 8008648:	e008      	b.n	800865c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a1b      	ldr	r3, [r3, #32]
 800864e:	1c59      	adds	r1, r3, #1
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	6211      	str	r1, [r2, #32]
 8008654:	781a      	ldrb	r2, [r3, #0]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008660:	b29b      	uxth	r3, r3
 8008662:	3b01      	subs	r3, #1
 8008664:	b29b      	uxth	r3, r3
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	4619      	mov	r1, r3
 800866a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800866c:	2b00      	cmp	r3, #0
 800866e:	d10f      	bne.n	8008690 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68da      	ldr	r2, [r3, #12]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800867e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68da      	ldr	r2, [r3, #12]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800868e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008690:	2300      	movs	r3, #0
 8008692:	e000      	b.n	8008696 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008694:	2302      	movs	r3, #2
  }
}
 8008696:	4618      	mov	r0, r3
 8008698:	3714      	adds	r7, #20
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr

080086a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b082      	sub	sp, #8
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68da      	ldr	r2, [r3, #12]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2220      	movs	r2, #32
 80086be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f7ff fe5a 	bl	800837c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3708      	adds	r7, #8
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}

080086d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b08c      	sub	sp, #48	; 0x30
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	2b22      	cmp	r3, #34	; 0x22
 80086e4:	f040 80ab 	bne.w	800883e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086f0:	d117      	bne.n	8008722 <UART_Receive_IT+0x50>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d113      	bne.n	8008722 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80086fa:	2300      	movs	r3, #0
 80086fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008702:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	b29b      	uxth	r3, r3
 800870c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008710:	b29a      	uxth	r2, r3
 8008712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008714:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871a:	1c9a      	adds	r2, r3, #2
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	629a      	str	r2, [r3, #40]	; 0x28
 8008720:	e026      	b.n	8008770 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008726:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008728:	2300      	movs	r3, #0
 800872a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008734:	d007      	beq.n	8008746 <UART_Receive_IT+0x74>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10a      	bne.n	8008754 <UART_Receive_IT+0x82>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d106      	bne.n	8008754 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	b2da      	uxtb	r2, r3
 800874e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008750:	701a      	strb	r2, [r3, #0]
 8008752:	e008      	b.n	8008766 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	b2db      	uxtb	r3, r3
 800875c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008760:	b2da      	uxtb	r2, r3
 8008762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008764:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876a:	1c5a      	adds	r2, r3, #1
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008774:	b29b      	uxth	r3, r3
 8008776:	3b01      	subs	r3, #1
 8008778:	b29b      	uxth	r3, r3
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	4619      	mov	r1, r3
 800877e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008780:	2b00      	cmp	r3, #0
 8008782:	d15a      	bne.n	800883a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68da      	ldr	r2, [r3, #12]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f022 0220 	bic.w	r2, r2, #32
 8008792:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68da      	ldr	r2, [r3, #12]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	695a      	ldr	r2, [r3, #20]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f022 0201 	bic.w	r2, r2, #1
 80087b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2220      	movs	r2, #32
 80087b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d135      	bne.n	8008830 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	330c      	adds	r3, #12
 80087d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	e853 3f00 	ldrex	r3, [r3]
 80087d8:	613b      	str	r3, [r7, #16]
   return(result);
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	f023 0310 	bic.w	r3, r3, #16
 80087e0:	627b      	str	r3, [r7, #36]	; 0x24
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	330c      	adds	r3, #12
 80087e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ea:	623a      	str	r2, [r7, #32]
 80087ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ee:	69f9      	ldr	r1, [r7, #28]
 80087f0:	6a3a      	ldr	r2, [r7, #32]
 80087f2:	e841 2300 	strex	r3, r2, [r1]
 80087f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1e5      	bne.n	80087ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f003 0310 	and.w	r3, r3, #16
 8008808:	2b10      	cmp	r3, #16
 800880a:	d10a      	bne.n	8008822 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800880c:	2300      	movs	r3, #0
 800880e:	60fb      	str	r3, [r7, #12]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	60fb      	str	r3, [r7, #12]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	60fb      	str	r3, [r7, #12]
 8008820:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008826:	4619      	mov	r1, r3
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f7ff fdbb 	bl	80083a4 <HAL_UARTEx_RxEventCallback>
 800882e:	e002      	b.n	8008836 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f7fb ff1f 	bl	8004674 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	e002      	b.n	8008840 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800883a:	2300      	movs	r3, #0
 800883c:	e000      	b.n	8008840 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800883e:	2302      	movs	r3, #2
  }
}
 8008840:	4618      	mov	r0, r3
 8008842:	3730      	adds	r7, #48	; 0x30
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800884c:	b0c0      	sub	sp, #256	; 0x100
 800884e:	af00      	add	r7, sp, #0
 8008850:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	691b      	ldr	r3, [r3, #16]
 800885c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008864:	68d9      	ldr	r1, [r3, #12]
 8008866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	ea40 0301 	orr.w	r3, r0, r1
 8008870:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008876:	689a      	ldr	r2, [r3, #8]
 8008878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	431a      	orrs	r2, r3
 8008880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	431a      	orrs	r2, r3
 8008888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800888c:	69db      	ldr	r3, [r3, #28]
 800888e:	4313      	orrs	r3, r2
 8008890:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80088a0:	f021 010c 	bic.w	r1, r1, #12
 80088a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80088ae:	430b      	orrs	r3, r1
 80088b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80088b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	695b      	ldr	r3, [r3, #20]
 80088ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80088be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088c2:	6999      	ldr	r1, [r3, #24]
 80088c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	ea40 0301 	orr.w	r3, r0, r1
 80088ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80088d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	4b8f      	ldr	r3, [pc, #572]	; (8008b14 <UART_SetConfig+0x2cc>)
 80088d8:	429a      	cmp	r2, r3
 80088da:	d005      	beq.n	80088e8 <UART_SetConfig+0xa0>
 80088dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	4b8d      	ldr	r3, [pc, #564]	; (8008b18 <UART_SetConfig+0x2d0>)
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d104      	bne.n	80088f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80088e8:	f7fd fb44 	bl	8005f74 <HAL_RCC_GetPCLK2Freq>
 80088ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80088f0:	e003      	b.n	80088fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80088f2:	f7fd fb2b 	bl	8005f4c <HAL_RCC_GetPCLK1Freq>
 80088f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088fe:	69db      	ldr	r3, [r3, #28]
 8008900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008904:	f040 810c 	bne.w	8008b20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008908:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800890c:	2200      	movs	r2, #0
 800890e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008912:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008916:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800891a:	4622      	mov	r2, r4
 800891c:	462b      	mov	r3, r5
 800891e:	1891      	adds	r1, r2, r2
 8008920:	65b9      	str	r1, [r7, #88]	; 0x58
 8008922:	415b      	adcs	r3, r3
 8008924:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008926:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800892a:	4621      	mov	r1, r4
 800892c:	eb12 0801 	adds.w	r8, r2, r1
 8008930:	4629      	mov	r1, r5
 8008932:	eb43 0901 	adc.w	r9, r3, r1
 8008936:	f04f 0200 	mov.w	r2, #0
 800893a:	f04f 0300 	mov.w	r3, #0
 800893e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008942:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008946:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800894a:	4690      	mov	r8, r2
 800894c:	4699      	mov	r9, r3
 800894e:	4623      	mov	r3, r4
 8008950:	eb18 0303 	adds.w	r3, r8, r3
 8008954:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008958:	462b      	mov	r3, r5
 800895a:	eb49 0303 	adc.w	r3, r9, r3
 800895e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800896e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008972:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008976:	460b      	mov	r3, r1
 8008978:	18db      	adds	r3, r3, r3
 800897a:	653b      	str	r3, [r7, #80]	; 0x50
 800897c:	4613      	mov	r3, r2
 800897e:	eb42 0303 	adc.w	r3, r2, r3
 8008982:	657b      	str	r3, [r7, #84]	; 0x54
 8008984:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008988:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800898c:	f7f8 f984 	bl	8000c98 <__aeabi_uldivmod>
 8008990:	4602      	mov	r2, r0
 8008992:	460b      	mov	r3, r1
 8008994:	4b61      	ldr	r3, [pc, #388]	; (8008b1c <UART_SetConfig+0x2d4>)
 8008996:	fba3 2302 	umull	r2, r3, r3, r2
 800899a:	095b      	lsrs	r3, r3, #5
 800899c:	011c      	lsls	r4, r3, #4
 800899e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089a2:	2200      	movs	r2, #0
 80089a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80089a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80089ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80089b0:	4642      	mov	r2, r8
 80089b2:	464b      	mov	r3, r9
 80089b4:	1891      	adds	r1, r2, r2
 80089b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80089b8:	415b      	adcs	r3, r3
 80089ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80089c0:	4641      	mov	r1, r8
 80089c2:	eb12 0a01 	adds.w	sl, r2, r1
 80089c6:	4649      	mov	r1, r9
 80089c8:	eb43 0b01 	adc.w	fp, r3, r1
 80089cc:	f04f 0200 	mov.w	r2, #0
 80089d0:	f04f 0300 	mov.w	r3, #0
 80089d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80089d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80089dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80089e0:	4692      	mov	sl, r2
 80089e2:	469b      	mov	fp, r3
 80089e4:	4643      	mov	r3, r8
 80089e6:	eb1a 0303 	adds.w	r3, sl, r3
 80089ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80089ee:	464b      	mov	r3, r9
 80089f0:	eb4b 0303 	adc.w	r3, fp, r3
 80089f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80089f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008a08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	18db      	adds	r3, r3, r3
 8008a10:	643b      	str	r3, [r7, #64]	; 0x40
 8008a12:	4613      	mov	r3, r2
 8008a14:	eb42 0303 	adc.w	r3, r2, r3
 8008a18:	647b      	str	r3, [r7, #68]	; 0x44
 8008a1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008a1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008a22:	f7f8 f939 	bl	8000c98 <__aeabi_uldivmod>
 8008a26:	4602      	mov	r2, r0
 8008a28:	460b      	mov	r3, r1
 8008a2a:	4611      	mov	r1, r2
 8008a2c:	4b3b      	ldr	r3, [pc, #236]	; (8008b1c <UART_SetConfig+0x2d4>)
 8008a2e:	fba3 2301 	umull	r2, r3, r3, r1
 8008a32:	095b      	lsrs	r3, r3, #5
 8008a34:	2264      	movs	r2, #100	; 0x64
 8008a36:	fb02 f303 	mul.w	r3, r2, r3
 8008a3a:	1acb      	subs	r3, r1, r3
 8008a3c:	00db      	lsls	r3, r3, #3
 8008a3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008a42:	4b36      	ldr	r3, [pc, #216]	; (8008b1c <UART_SetConfig+0x2d4>)
 8008a44:	fba3 2302 	umull	r2, r3, r3, r2
 8008a48:	095b      	lsrs	r3, r3, #5
 8008a4a:	005b      	lsls	r3, r3, #1
 8008a4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008a50:	441c      	add	r4, r3
 8008a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a56:	2200      	movs	r2, #0
 8008a58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008a60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008a64:	4642      	mov	r2, r8
 8008a66:	464b      	mov	r3, r9
 8008a68:	1891      	adds	r1, r2, r2
 8008a6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008a6c:	415b      	adcs	r3, r3
 8008a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008a74:	4641      	mov	r1, r8
 8008a76:	1851      	adds	r1, r2, r1
 8008a78:	6339      	str	r1, [r7, #48]	; 0x30
 8008a7a:	4649      	mov	r1, r9
 8008a7c:	414b      	adcs	r3, r1
 8008a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8008a80:	f04f 0200 	mov.w	r2, #0
 8008a84:	f04f 0300 	mov.w	r3, #0
 8008a88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008a8c:	4659      	mov	r1, fp
 8008a8e:	00cb      	lsls	r3, r1, #3
 8008a90:	4651      	mov	r1, sl
 8008a92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a96:	4651      	mov	r1, sl
 8008a98:	00ca      	lsls	r2, r1, #3
 8008a9a:	4610      	mov	r0, r2
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	4642      	mov	r2, r8
 8008aa2:	189b      	adds	r3, r3, r2
 8008aa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008aa8:	464b      	mov	r3, r9
 8008aaa:	460a      	mov	r2, r1
 8008aac:	eb42 0303 	adc.w	r3, r2, r3
 8008ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008ac0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008ac4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008ac8:	460b      	mov	r3, r1
 8008aca:	18db      	adds	r3, r3, r3
 8008acc:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ace:	4613      	mov	r3, r2
 8008ad0:	eb42 0303 	adc.w	r3, r2, r3
 8008ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ad6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008ada:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008ade:	f7f8 f8db 	bl	8000c98 <__aeabi_uldivmod>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	4b0d      	ldr	r3, [pc, #52]	; (8008b1c <UART_SetConfig+0x2d4>)
 8008ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8008aec:	095b      	lsrs	r3, r3, #5
 8008aee:	2164      	movs	r1, #100	; 0x64
 8008af0:	fb01 f303 	mul.w	r3, r1, r3
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	00db      	lsls	r3, r3, #3
 8008af8:	3332      	adds	r3, #50	; 0x32
 8008afa:	4a08      	ldr	r2, [pc, #32]	; (8008b1c <UART_SetConfig+0x2d4>)
 8008afc:	fba2 2303 	umull	r2, r3, r2, r3
 8008b00:	095b      	lsrs	r3, r3, #5
 8008b02:	f003 0207 	and.w	r2, r3, #7
 8008b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4422      	add	r2, r4
 8008b0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008b10:	e106      	b.n	8008d20 <UART_SetConfig+0x4d8>
 8008b12:	bf00      	nop
 8008b14:	40011000 	.word	0x40011000
 8008b18:	40011400 	.word	0x40011400
 8008b1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b24:	2200      	movs	r2, #0
 8008b26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008b2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008b2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008b32:	4642      	mov	r2, r8
 8008b34:	464b      	mov	r3, r9
 8008b36:	1891      	adds	r1, r2, r2
 8008b38:	6239      	str	r1, [r7, #32]
 8008b3a:	415b      	adcs	r3, r3
 8008b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8008b3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b42:	4641      	mov	r1, r8
 8008b44:	1854      	adds	r4, r2, r1
 8008b46:	4649      	mov	r1, r9
 8008b48:	eb43 0501 	adc.w	r5, r3, r1
 8008b4c:	f04f 0200 	mov.w	r2, #0
 8008b50:	f04f 0300 	mov.w	r3, #0
 8008b54:	00eb      	lsls	r3, r5, #3
 8008b56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b5a:	00e2      	lsls	r2, r4, #3
 8008b5c:	4614      	mov	r4, r2
 8008b5e:	461d      	mov	r5, r3
 8008b60:	4643      	mov	r3, r8
 8008b62:	18e3      	adds	r3, r4, r3
 8008b64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008b68:	464b      	mov	r3, r9
 8008b6a:	eb45 0303 	adc.w	r3, r5, r3
 8008b6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008b7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008b82:	f04f 0200 	mov.w	r2, #0
 8008b86:	f04f 0300 	mov.w	r3, #0
 8008b8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008b8e:	4629      	mov	r1, r5
 8008b90:	008b      	lsls	r3, r1, #2
 8008b92:	4621      	mov	r1, r4
 8008b94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b98:	4621      	mov	r1, r4
 8008b9a:	008a      	lsls	r2, r1, #2
 8008b9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008ba0:	f7f8 f87a 	bl	8000c98 <__aeabi_uldivmod>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	4b60      	ldr	r3, [pc, #384]	; (8008d2c <UART_SetConfig+0x4e4>)
 8008baa:	fba3 2302 	umull	r2, r3, r3, r2
 8008bae:	095b      	lsrs	r3, r3, #5
 8008bb0:	011c      	lsls	r4, r3, #4
 8008bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008bbc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008bc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008bc4:	4642      	mov	r2, r8
 8008bc6:	464b      	mov	r3, r9
 8008bc8:	1891      	adds	r1, r2, r2
 8008bca:	61b9      	str	r1, [r7, #24]
 8008bcc:	415b      	adcs	r3, r3
 8008bce:	61fb      	str	r3, [r7, #28]
 8008bd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008bd4:	4641      	mov	r1, r8
 8008bd6:	1851      	adds	r1, r2, r1
 8008bd8:	6139      	str	r1, [r7, #16]
 8008bda:	4649      	mov	r1, r9
 8008bdc:	414b      	adcs	r3, r1
 8008bde:	617b      	str	r3, [r7, #20]
 8008be0:	f04f 0200 	mov.w	r2, #0
 8008be4:	f04f 0300 	mov.w	r3, #0
 8008be8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008bec:	4659      	mov	r1, fp
 8008bee:	00cb      	lsls	r3, r1, #3
 8008bf0:	4651      	mov	r1, sl
 8008bf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008bf6:	4651      	mov	r1, sl
 8008bf8:	00ca      	lsls	r2, r1, #3
 8008bfa:	4610      	mov	r0, r2
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	4603      	mov	r3, r0
 8008c00:	4642      	mov	r2, r8
 8008c02:	189b      	adds	r3, r3, r2
 8008c04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c08:	464b      	mov	r3, r9
 8008c0a:	460a      	mov	r2, r1
 8008c0c:	eb42 0303 	adc.w	r3, r2, r3
 8008c10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008c20:	f04f 0200 	mov.w	r2, #0
 8008c24:	f04f 0300 	mov.w	r3, #0
 8008c28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008c2c:	4649      	mov	r1, r9
 8008c2e:	008b      	lsls	r3, r1, #2
 8008c30:	4641      	mov	r1, r8
 8008c32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c36:	4641      	mov	r1, r8
 8008c38:	008a      	lsls	r2, r1, #2
 8008c3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008c3e:	f7f8 f82b 	bl	8000c98 <__aeabi_uldivmod>
 8008c42:	4602      	mov	r2, r0
 8008c44:	460b      	mov	r3, r1
 8008c46:	4611      	mov	r1, r2
 8008c48:	4b38      	ldr	r3, [pc, #224]	; (8008d2c <UART_SetConfig+0x4e4>)
 8008c4a:	fba3 2301 	umull	r2, r3, r3, r1
 8008c4e:	095b      	lsrs	r3, r3, #5
 8008c50:	2264      	movs	r2, #100	; 0x64
 8008c52:	fb02 f303 	mul.w	r3, r2, r3
 8008c56:	1acb      	subs	r3, r1, r3
 8008c58:	011b      	lsls	r3, r3, #4
 8008c5a:	3332      	adds	r3, #50	; 0x32
 8008c5c:	4a33      	ldr	r2, [pc, #204]	; (8008d2c <UART_SetConfig+0x4e4>)
 8008c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c62:	095b      	lsrs	r3, r3, #5
 8008c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c68:	441c      	add	r4, r3
 8008c6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c6e:	2200      	movs	r2, #0
 8008c70:	673b      	str	r3, [r7, #112]	; 0x70
 8008c72:	677a      	str	r2, [r7, #116]	; 0x74
 8008c74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008c78:	4642      	mov	r2, r8
 8008c7a:	464b      	mov	r3, r9
 8008c7c:	1891      	adds	r1, r2, r2
 8008c7e:	60b9      	str	r1, [r7, #8]
 8008c80:	415b      	adcs	r3, r3
 8008c82:	60fb      	str	r3, [r7, #12]
 8008c84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c88:	4641      	mov	r1, r8
 8008c8a:	1851      	adds	r1, r2, r1
 8008c8c:	6039      	str	r1, [r7, #0]
 8008c8e:	4649      	mov	r1, r9
 8008c90:	414b      	adcs	r3, r1
 8008c92:	607b      	str	r3, [r7, #4]
 8008c94:	f04f 0200 	mov.w	r2, #0
 8008c98:	f04f 0300 	mov.w	r3, #0
 8008c9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008ca0:	4659      	mov	r1, fp
 8008ca2:	00cb      	lsls	r3, r1, #3
 8008ca4:	4651      	mov	r1, sl
 8008ca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008caa:	4651      	mov	r1, sl
 8008cac:	00ca      	lsls	r2, r1, #3
 8008cae:	4610      	mov	r0, r2
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	4642      	mov	r2, r8
 8008cb6:	189b      	adds	r3, r3, r2
 8008cb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8008cba:	464b      	mov	r3, r9
 8008cbc:	460a      	mov	r2, r1
 8008cbe:	eb42 0303 	adc.w	r3, r2, r3
 8008cc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	663b      	str	r3, [r7, #96]	; 0x60
 8008cce:	667a      	str	r2, [r7, #100]	; 0x64
 8008cd0:	f04f 0200 	mov.w	r2, #0
 8008cd4:	f04f 0300 	mov.w	r3, #0
 8008cd8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008cdc:	4649      	mov	r1, r9
 8008cde:	008b      	lsls	r3, r1, #2
 8008ce0:	4641      	mov	r1, r8
 8008ce2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ce6:	4641      	mov	r1, r8
 8008ce8:	008a      	lsls	r2, r1, #2
 8008cea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008cee:	f7f7 ffd3 	bl	8000c98 <__aeabi_uldivmod>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	4b0d      	ldr	r3, [pc, #52]	; (8008d2c <UART_SetConfig+0x4e4>)
 8008cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8008cfc:	095b      	lsrs	r3, r3, #5
 8008cfe:	2164      	movs	r1, #100	; 0x64
 8008d00:	fb01 f303 	mul.w	r3, r1, r3
 8008d04:	1ad3      	subs	r3, r2, r3
 8008d06:	011b      	lsls	r3, r3, #4
 8008d08:	3332      	adds	r3, #50	; 0x32
 8008d0a:	4a08      	ldr	r2, [pc, #32]	; (8008d2c <UART_SetConfig+0x4e4>)
 8008d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d10:	095b      	lsrs	r3, r3, #5
 8008d12:	f003 020f 	and.w	r2, r3, #15
 8008d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4422      	add	r2, r4
 8008d1e:	609a      	str	r2, [r3, #8]
}
 8008d20:	bf00      	nop
 8008d22:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008d26:	46bd      	mov	sp, r7
 8008d28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d2c:	51eb851f 	.word	0x51eb851f

08008d30 <atoi>:
 8008d30:	220a      	movs	r2, #10
 8008d32:	2100      	movs	r1, #0
 8008d34:	f000 befc 	b.w	8009b30 <strtol>

08008d38 <sulp>:
 8008d38:	b570      	push	{r4, r5, r6, lr}
 8008d3a:	4604      	mov	r4, r0
 8008d3c:	460d      	mov	r5, r1
 8008d3e:	ec45 4b10 	vmov	d0, r4, r5
 8008d42:	4616      	mov	r6, r2
 8008d44:	f003 fdb8 	bl	800c8b8 <__ulp>
 8008d48:	ec51 0b10 	vmov	r0, r1, d0
 8008d4c:	b17e      	cbz	r6, 8008d6e <sulp+0x36>
 8008d4e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008d52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	dd09      	ble.n	8008d6e <sulp+0x36>
 8008d5a:	051b      	lsls	r3, r3, #20
 8008d5c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008d60:	2400      	movs	r4, #0
 8008d62:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008d66:	4622      	mov	r2, r4
 8008d68:	462b      	mov	r3, r5
 8008d6a:	f7f7 fc4d 	bl	8000608 <__aeabi_dmul>
 8008d6e:	bd70      	pop	{r4, r5, r6, pc}

08008d70 <_strtod_l>:
 8008d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d74:	ed2d 8b02 	vpush	{d8}
 8008d78:	b09b      	sub	sp, #108	; 0x6c
 8008d7a:	4604      	mov	r4, r0
 8008d7c:	9213      	str	r2, [sp, #76]	; 0x4c
 8008d7e:	2200      	movs	r2, #0
 8008d80:	9216      	str	r2, [sp, #88]	; 0x58
 8008d82:	460d      	mov	r5, r1
 8008d84:	f04f 0800 	mov.w	r8, #0
 8008d88:	f04f 0900 	mov.w	r9, #0
 8008d8c:	460a      	mov	r2, r1
 8008d8e:	9215      	str	r2, [sp, #84]	; 0x54
 8008d90:	7811      	ldrb	r1, [r2, #0]
 8008d92:	292b      	cmp	r1, #43	; 0x2b
 8008d94:	d04c      	beq.n	8008e30 <_strtod_l+0xc0>
 8008d96:	d83a      	bhi.n	8008e0e <_strtod_l+0x9e>
 8008d98:	290d      	cmp	r1, #13
 8008d9a:	d834      	bhi.n	8008e06 <_strtod_l+0x96>
 8008d9c:	2908      	cmp	r1, #8
 8008d9e:	d834      	bhi.n	8008e0a <_strtod_l+0x9a>
 8008da0:	2900      	cmp	r1, #0
 8008da2:	d03d      	beq.n	8008e20 <_strtod_l+0xb0>
 8008da4:	2200      	movs	r2, #0
 8008da6:	920a      	str	r2, [sp, #40]	; 0x28
 8008da8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008daa:	7832      	ldrb	r2, [r6, #0]
 8008dac:	2a30      	cmp	r2, #48	; 0x30
 8008dae:	f040 80b4 	bne.w	8008f1a <_strtod_l+0x1aa>
 8008db2:	7872      	ldrb	r2, [r6, #1]
 8008db4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008db8:	2a58      	cmp	r2, #88	; 0x58
 8008dba:	d170      	bne.n	8008e9e <_strtod_l+0x12e>
 8008dbc:	9302      	str	r3, [sp, #8]
 8008dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dc0:	9301      	str	r3, [sp, #4]
 8008dc2:	ab16      	add	r3, sp, #88	; 0x58
 8008dc4:	9300      	str	r3, [sp, #0]
 8008dc6:	4a8e      	ldr	r2, [pc, #568]	; (8009000 <_strtod_l+0x290>)
 8008dc8:	ab17      	add	r3, sp, #92	; 0x5c
 8008dca:	a915      	add	r1, sp, #84	; 0x54
 8008dcc:	4620      	mov	r0, r4
 8008dce:	f002 fe51 	bl	800ba74 <__gethex>
 8008dd2:	f010 070f 	ands.w	r7, r0, #15
 8008dd6:	4605      	mov	r5, r0
 8008dd8:	d005      	beq.n	8008de6 <_strtod_l+0x76>
 8008dda:	2f06      	cmp	r7, #6
 8008ddc:	d12a      	bne.n	8008e34 <_strtod_l+0xc4>
 8008dde:	3601      	adds	r6, #1
 8008de0:	2300      	movs	r3, #0
 8008de2:	9615      	str	r6, [sp, #84]	; 0x54
 8008de4:	930a      	str	r3, [sp, #40]	; 0x28
 8008de6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f040 857f 	bne.w	80098ec <_strtod_l+0xb7c>
 8008dee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008df0:	b1db      	cbz	r3, 8008e2a <_strtod_l+0xba>
 8008df2:	4642      	mov	r2, r8
 8008df4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008df8:	ec43 2b10 	vmov	d0, r2, r3
 8008dfc:	b01b      	add	sp, #108	; 0x6c
 8008dfe:	ecbd 8b02 	vpop	{d8}
 8008e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e06:	2920      	cmp	r1, #32
 8008e08:	d1cc      	bne.n	8008da4 <_strtod_l+0x34>
 8008e0a:	3201      	adds	r2, #1
 8008e0c:	e7bf      	b.n	8008d8e <_strtod_l+0x1e>
 8008e0e:	292d      	cmp	r1, #45	; 0x2d
 8008e10:	d1c8      	bne.n	8008da4 <_strtod_l+0x34>
 8008e12:	2101      	movs	r1, #1
 8008e14:	910a      	str	r1, [sp, #40]	; 0x28
 8008e16:	1c51      	adds	r1, r2, #1
 8008e18:	9115      	str	r1, [sp, #84]	; 0x54
 8008e1a:	7852      	ldrb	r2, [r2, #1]
 8008e1c:	2a00      	cmp	r2, #0
 8008e1e:	d1c3      	bne.n	8008da8 <_strtod_l+0x38>
 8008e20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e22:	9515      	str	r5, [sp, #84]	; 0x54
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f040 855f 	bne.w	80098e8 <_strtod_l+0xb78>
 8008e2a:	4642      	mov	r2, r8
 8008e2c:	464b      	mov	r3, r9
 8008e2e:	e7e3      	b.n	8008df8 <_strtod_l+0x88>
 8008e30:	2100      	movs	r1, #0
 8008e32:	e7ef      	b.n	8008e14 <_strtod_l+0xa4>
 8008e34:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008e36:	b13a      	cbz	r2, 8008e48 <_strtod_l+0xd8>
 8008e38:	2135      	movs	r1, #53	; 0x35
 8008e3a:	a818      	add	r0, sp, #96	; 0x60
 8008e3c:	f003 fe39 	bl	800cab2 <__copybits>
 8008e40:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008e42:	4620      	mov	r0, r4
 8008e44:	f003 fa0c 	bl	800c260 <_Bfree>
 8008e48:	3f01      	subs	r7, #1
 8008e4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008e4c:	2f04      	cmp	r7, #4
 8008e4e:	d806      	bhi.n	8008e5e <_strtod_l+0xee>
 8008e50:	e8df f007 	tbb	[pc, r7]
 8008e54:	201d0314 	.word	0x201d0314
 8008e58:	14          	.byte	0x14
 8008e59:	00          	.byte	0x00
 8008e5a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008e5e:	05e9      	lsls	r1, r5, #23
 8008e60:	bf48      	it	mi
 8008e62:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008e66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e6a:	0d1b      	lsrs	r3, r3, #20
 8008e6c:	051b      	lsls	r3, r3, #20
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1b9      	bne.n	8008de6 <_strtod_l+0x76>
 8008e72:	f001 fe83 	bl	800ab7c <__errno>
 8008e76:	2322      	movs	r3, #34	; 0x22
 8008e78:	6003      	str	r3, [r0, #0]
 8008e7a:	e7b4      	b.n	8008de6 <_strtod_l+0x76>
 8008e7c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008e80:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008e84:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008e88:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008e8c:	e7e7      	b.n	8008e5e <_strtod_l+0xee>
 8008e8e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009008 <_strtod_l+0x298>
 8008e92:	e7e4      	b.n	8008e5e <_strtod_l+0xee>
 8008e94:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008e98:	f04f 38ff 	mov.w	r8, #4294967295
 8008e9c:	e7df      	b.n	8008e5e <_strtod_l+0xee>
 8008e9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ea0:	1c5a      	adds	r2, r3, #1
 8008ea2:	9215      	str	r2, [sp, #84]	; 0x54
 8008ea4:	785b      	ldrb	r3, [r3, #1]
 8008ea6:	2b30      	cmp	r3, #48	; 0x30
 8008ea8:	d0f9      	beq.n	8008e9e <_strtod_l+0x12e>
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d09b      	beq.n	8008de6 <_strtod_l+0x76>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	f04f 0a00 	mov.w	sl, #0
 8008eb4:	9304      	str	r3, [sp, #16]
 8008eb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008eb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008eba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008ebe:	46d3      	mov	fp, sl
 8008ec0:	220a      	movs	r2, #10
 8008ec2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008ec4:	7806      	ldrb	r6, [r0, #0]
 8008ec6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008eca:	b2d9      	uxtb	r1, r3
 8008ecc:	2909      	cmp	r1, #9
 8008ece:	d926      	bls.n	8008f1e <_strtod_l+0x1ae>
 8008ed0:	494c      	ldr	r1, [pc, #304]	; (8009004 <_strtod_l+0x294>)
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f001 fde3 	bl	800aa9e <strncmp>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d030      	beq.n	8008f3e <_strtod_l+0x1ce>
 8008edc:	2000      	movs	r0, #0
 8008ede:	4632      	mov	r2, r6
 8008ee0:	9005      	str	r0, [sp, #20]
 8008ee2:	465e      	mov	r6, fp
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2a65      	cmp	r2, #101	; 0x65
 8008ee8:	d001      	beq.n	8008eee <_strtod_l+0x17e>
 8008eea:	2a45      	cmp	r2, #69	; 0x45
 8008eec:	d113      	bne.n	8008f16 <_strtod_l+0x1a6>
 8008eee:	b91e      	cbnz	r6, 8008ef8 <_strtod_l+0x188>
 8008ef0:	9a04      	ldr	r2, [sp, #16]
 8008ef2:	4302      	orrs	r2, r0
 8008ef4:	d094      	beq.n	8008e20 <_strtod_l+0xb0>
 8008ef6:	2600      	movs	r6, #0
 8008ef8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008efa:	1c6a      	adds	r2, r5, #1
 8008efc:	9215      	str	r2, [sp, #84]	; 0x54
 8008efe:	786a      	ldrb	r2, [r5, #1]
 8008f00:	2a2b      	cmp	r2, #43	; 0x2b
 8008f02:	d074      	beq.n	8008fee <_strtod_l+0x27e>
 8008f04:	2a2d      	cmp	r2, #45	; 0x2d
 8008f06:	d078      	beq.n	8008ffa <_strtod_l+0x28a>
 8008f08:	f04f 0c00 	mov.w	ip, #0
 8008f0c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008f10:	2909      	cmp	r1, #9
 8008f12:	d97f      	bls.n	8009014 <_strtod_l+0x2a4>
 8008f14:	9515      	str	r5, [sp, #84]	; 0x54
 8008f16:	2700      	movs	r7, #0
 8008f18:	e09e      	b.n	8009058 <_strtod_l+0x2e8>
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	e7c8      	b.n	8008eb0 <_strtod_l+0x140>
 8008f1e:	f1bb 0f08 	cmp.w	fp, #8
 8008f22:	bfd8      	it	le
 8008f24:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008f26:	f100 0001 	add.w	r0, r0, #1
 8008f2a:	bfda      	itte	le
 8008f2c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008f30:	9309      	strle	r3, [sp, #36]	; 0x24
 8008f32:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008f36:	f10b 0b01 	add.w	fp, fp, #1
 8008f3a:	9015      	str	r0, [sp, #84]	; 0x54
 8008f3c:	e7c1      	b.n	8008ec2 <_strtod_l+0x152>
 8008f3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f40:	1c5a      	adds	r2, r3, #1
 8008f42:	9215      	str	r2, [sp, #84]	; 0x54
 8008f44:	785a      	ldrb	r2, [r3, #1]
 8008f46:	f1bb 0f00 	cmp.w	fp, #0
 8008f4a:	d037      	beq.n	8008fbc <_strtod_l+0x24c>
 8008f4c:	9005      	str	r0, [sp, #20]
 8008f4e:	465e      	mov	r6, fp
 8008f50:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008f54:	2b09      	cmp	r3, #9
 8008f56:	d912      	bls.n	8008f7e <_strtod_l+0x20e>
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e7c4      	b.n	8008ee6 <_strtod_l+0x176>
 8008f5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f5e:	1c5a      	adds	r2, r3, #1
 8008f60:	9215      	str	r2, [sp, #84]	; 0x54
 8008f62:	785a      	ldrb	r2, [r3, #1]
 8008f64:	3001      	adds	r0, #1
 8008f66:	2a30      	cmp	r2, #48	; 0x30
 8008f68:	d0f8      	beq.n	8008f5c <_strtod_l+0x1ec>
 8008f6a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008f6e:	2b08      	cmp	r3, #8
 8008f70:	f200 84c1 	bhi.w	80098f6 <_strtod_l+0xb86>
 8008f74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f76:	9005      	str	r0, [sp, #20]
 8008f78:	2000      	movs	r0, #0
 8008f7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f7c:	4606      	mov	r6, r0
 8008f7e:	3a30      	subs	r2, #48	; 0x30
 8008f80:	f100 0301 	add.w	r3, r0, #1
 8008f84:	d014      	beq.n	8008fb0 <_strtod_l+0x240>
 8008f86:	9905      	ldr	r1, [sp, #20]
 8008f88:	4419      	add	r1, r3
 8008f8a:	9105      	str	r1, [sp, #20]
 8008f8c:	4633      	mov	r3, r6
 8008f8e:	eb00 0c06 	add.w	ip, r0, r6
 8008f92:	210a      	movs	r1, #10
 8008f94:	4563      	cmp	r3, ip
 8008f96:	d113      	bne.n	8008fc0 <_strtod_l+0x250>
 8008f98:	1833      	adds	r3, r6, r0
 8008f9a:	2b08      	cmp	r3, #8
 8008f9c:	f106 0601 	add.w	r6, r6, #1
 8008fa0:	4406      	add	r6, r0
 8008fa2:	dc1a      	bgt.n	8008fda <_strtod_l+0x26a>
 8008fa4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fa6:	230a      	movs	r3, #10
 8008fa8:	fb03 2301 	mla	r3, r3, r1, r2
 8008fac:	9309      	str	r3, [sp, #36]	; 0x24
 8008fae:	2300      	movs	r3, #0
 8008fb0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008fb2:	1c51      	adds	r1, r2, #1
 8008fb4:	9115      	str	r1, [sp, #84]	; 0x54
 8008fb6:	7852      	ldrb	r2, [r2, #1]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	e7c9      	b.n	8008f50 <_strtod_l+0x1e0>
 8008fbc:	4658      	mov	r0, fp
 8008fbe:	e7d2      	b.n	8008f66 <_strtod_l+0x1f6>
 8008fc0:	2b08      	cmp	r3, #8
 8008fc2:	f103 0301 	add.w	r3, r3, #1
 8008fc6:	dc03      	bgt.n	8008fd0 <_strtod_l+0x260>
 8008fc8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008fca:	434f      	muls	r7, r1
 8008fcc:	9709      	str	r7, [sp, #36]	; 0x24
 8008fce:	e7e1      	b.n	8008f94 <_strtod_l+0x224>
 8008fd0:	2b10      	cmp	r3, #16
 8008fd2:	bfd8      	it	le
 8008fd4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008fd8:	e7dc      	b.n	8008f94 <_strtod_l+0x224>
 8008fda:	2e10      	cmp	r6, #16
 8008fdc:	bfdc      	itt	le
 8008fde:	230a      	movle	r3, #10
 8008fe0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008fe4:	e7e3      	b.n	8008fae <_strtod_l+0x23e>
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	9305      	str	r3, [sp, #20]
 8008fea:	2301      	movs	r3, #1
 8008fec:	e780      	b.n	8008ef0 <_strtod_l+0x180>
 8008fee:	f04f 0c00 	mov.w	ip, #0
 8008ff2:	1caa      	adds	r2, r5, #2
 8008ff4:	9215      	str	r2, [sp, #84]	; 0x54
 8008ff6:	78aa      	ldrb	r2, [r5, #2]
 8008ff8:	e788      	b.n	8008f0c <_strtod_l+0x19c>
 8008ffa:	f04f 0c01 	mov.w	ip, #1
 8008ffe:	e7f8      	b.n	8008ff2 <_strtod_l+0x282>
 8009000:	0800dc9c 	.word	0x0800dc9c
 8009004:	0800dc98 	.word	0x0800dc98
 8009008:	7ff00000 	.word	0x7ff00000
 800900c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800900e:	1c51      	adds	r1, r2, #1
 8009010:	9115      	str	r1, [sp, #84]	; 0x54
 8009012:	7852      	ldrb	r2, [r2, #1]
 8009014:	2a30      	cmp	r2, #48	; 0x30
 8009016:	d0f9      	beq.n	800900c <_strtod_l+0x29c>
 8009018:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800901c:	2908      	cmp	r1, #8
 800901e:	f63f af7a 	bhi.w	8008f16 <_strtod_l+0x1a6>
 8009022:	3a30      	subs	r2, #48	; 0x30
 8009024:	9208      	str	r2, [sp, #32]
 8009026:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009028:	920c      	str	r2, [sp, #48]	; 0x30
 800902a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800902c:	1c57      	adds	r7, r2, #1
 800902e:	9715      	str	r7, [sp, #84]	; 0x54
 8009030:	7852      	ldrb	r2, [r2, #1]
 8009032:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009036:	f1be 0f09 	cmp.w	lr, #9
 800903a:	d938      	bls.n	80090ae <_strtod_l+0x33e>
 800903c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800903e:	1a7f      	subs	r7, r7, r1
 8009040:	2f08      	cmp	r7, #8
 8009042:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009046:	dc03      	bgt.n	8009050 <_strtod_l+0x2e0>
 8009048:	9908      	ldr	r1, [sp, #32]
 800904a:	428f      	cmp	r7, r1
 800904c:	bfa8      	it	ge
 800904e:	460f      	movge	r7, r1
 8009050:	f1bc 0f00 	cmp.w	ip, #0
 8009054:	d000      	beq.n	8009058 <_strtod_l+0x2e8>
 8009056:	427f      	negs	r7, r7
 8009058:	2e00      	cmp	r6, #0
 800905a:	d14f      	bne.n	80090fc <_strtod_l+0x38c>
 800905c:	9904      	ldr	r1, [sp, #16]
 800905e:	4301      	orrs	r1, r0
 8009060:	f47f aec1 	bne.w	8008de6 <_strtod_l+0x76>
 8009064:	2b00      	cmp	r3, #0
 8009066:	f47f aedb 	bne.w	8008e20 <_strtod_l+0xb0>
 800906a:	2a69      	cmp	r2, #105	; 0x69
 800906c:	d029      	beq.n	80090c2 <_strtod_l+0x352>
 800906e:	dc26      	bgt.n	80090be <_strtod_l+0x34e>
 8009070:	2a49      	cmp	r2, #73	; 0x49
 8009072:	d026      	beq.n	80090c2 <_strtod_l+0x352>
 8009074:	2a4e      	cmp	r2, #78	; 0x4e
 8009076:	f47f aed3 	bne.w	8008e20 <_strtod_l+0xb0>
 800907a:	499b      	ldr	r1, [pc, #620]	; (80092e8 <_strtod_l+0x578>)
 800907c:	a815      	add	r0, sp, #84	; 0x54
 800907e:	f002 ff39 	bl	800bef4 <__match>
 8009082:	2800      	cmp	r0, #0
 8009084:	f43f aecc 	beq.w	8008e20 <_strtod_l+0xb0>
 8009088:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	2b28      	cmp	r3, #40	; 0x28
 800908e:	d12f      	bne.n	80090f0 <_strtod_l+0x380>
 8009090:	4996      	ldr	r1, [pc, #600]	; (80092ec <_strtod_l+0x57c>)
 8009092:	aa18      	add	r2, sp, #96	; 0x60
 8009094:	a815      	add	r0, sp, #84	; 0x54
 8009096:	f002 ff41 	bl	800bf1c <__hexnan>
 800909a:	2805      	cmp	r0, #5
 800909c:	d128      	bne.n	80090f0 <_strtod_l+0x380>
 800909e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80090a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80090a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80090a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80090ac:	e69b      	b.n	8008de6 <_strtod_l+0x76>
 80090ae:	9f08      	ldr	r7, [sp, #32]
 80090b0:	210a      	movs	r1, #10
 80090b2:	fb01 2107 	mla	r1, r1, r7, r2
 80090b6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80090ba:	9208      	str	r2, [sp, #32]
 80090bc:	e7b5      	b.n	800902a <_strtod_l+0x2ba>
 80090be:	2a6e      	cmp	r2, #110	; 0x6e
 80090c0:	e7d9      	b.n	8009076 <_strtod_l+0x306>
 80090c2:	498b      	ldr	r1, [pc, #556]	; (80092f0 <_strtod_l+0x580>)
 80090c4:	a815      	add	r0, sp, #84	; 0x54
 80090c6:	f002 ff15 	bl	800bef4 <__match>
 80090ca:	2800      	cmp	r0, #0
 80090cc:	f43f aea8 	beq.w	8008e20 <_strtod_l+0xb0>
 80090d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090d2:	4988      	ldr	r1, [pc, #544]	; (80092f4 <_strtod_l+0x584>)
 80090d4:	3b01      	subs	r3, #1
 80090d6:	a815      	add	r0, sp, #84	; 0x54
 80090d8:	9315      	str	r3, [sp, #84]	; 0x54
 80090da:	f002 ff0b 	bl	800bef4 <__match>
 80090de:	b910      	cbnz	r0, 80090e6 <_strtod_l+0x376>
 80090e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090e2:	3301      	adds	r3, #1
 80090e4:	9315      	str	r3, [sp, #84]	; 0x54
 80090e6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8009304 <_strtod_l+0x594>
 80090ea:	f04f 0800 	mov.w	r8, #0
 80090ee:	e67a      	b.n	8008de6 <_strtod_l+0x76>
 80090f0:	4881      	ldr	r0, [pc, #516]	; (80092f8 <_strtod_l+0x588>)
 80090f2:	f001 fd81 	bl	800abf8 <nan>
 80090f6:	ec59 8b10 	vmov	r8, r9, d0
 80090fa:	e674      	b.n	8008de6 <_strtod_l+0x76>
 80090fc:	9b05      	ldr	r3, [sp, #20]
 80090fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009100:	1afb      	subs	r3, r7, r3
 8009102:	f1bb 0f00 	cmp.w	fp, #0
 8009106:	bf08      	it	eq
 8009108:	46b3      	moveq	fp, r6
 800910a:	2e10      	cmp	r6, #16
 800910c:	9308      	str	r3, [sp, #32]
 800910e:	4635      	mov	r5, r6
 8009110:	bfa8      	it	ge
 8009112:	2510      	movge	r5, #16
 8009114:	f7f7 f9fe 	bl	8000514 <__aeabi_ui2d>
 8009118:	2e09      	cmp	r6, #9
 800911a:	4680      	mov	r8, r0
 800911c:	4689      	mov	r9, r1
 800911e:	dd13      	ble.n	8009148 <_strtod_l+0x3d8>
 8009120:	4b76      	ldr	r3, [pc, #472]	; (80092fc <_strtod_l+0x58c>)
 8009122:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009126:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800912a:	f7f7 fa6d 	bl	8000608 <__aeabi_dmul>
 800912e:	4680      	mov	r8, r0
 8009130:	4650      	mov	r0, sl
 8009132:	4689      	mov	r9, r1
 8009134:	f7f7 f9ee 	bl	8000514 <__aeabi_ui2d>
 8009138:	4602      	mov	r2, r0
 800913a:	460b      	mov	r3, r1
 800913c:	4640      	mov	r0, r8
 800913e:	4649      	mov	r1, r9
 8009140:	f7f7 f8ac 	bl	800029c <__adddf3>
 8009144:	4680      	mov	r8, r0
 8009146:	4689      	mov	r9, r1
 8009148:	2e0f      	cmp	r6, #15
 800914a:	dc38      	bgt.n	80091be <_strtod_l+0x44e>
 800914c:	9b08      	ldr	r3, [sp, #32]
 800914e:	2b00      	cmp	r3, #0
 8009150:	f43f ae49 	beq.w	8008de6 <_strtod_l+0x76>
 8009154:	dd24      	ble.n	80091a0 <_strtod_l+0x430>
 8009156:	2b16      	cmp	r3, #22
 8009158:	dc0b      	bgt.n	8009172 <_strtod_l+0x402>
 800915a:	4968      	ldr	r1, [pc, #416]	; (80092fc <_strtod_l+0x58c>)
 800915c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009164:	4642      	mov	r2, r8
 8009166:	464b      	mov	r3, r9
 8009168:	f7f7 fa4e 	bl	8000608 <__aeabi_dmul>
 800916c:	4680      	mov	r8, r0
 800916e:	4689      	mov	r9, r1
 8009170:	e639      	b.n	8008de6 <_strtod_l+0x76>
 8009172:	9a08      	ldr	r2, [sp, #32]
 8009174:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009178:	4293      	cmp	r3, r2
 800917a:	db20      	blt.n	80091be <_strtod_l+0x44e>
 800917c:	4c5f      	ldr	r4, [pc, #380]	; (80092fc <_strtod_l+0x58c>)
 800917e:	f1c6 060f 	rsb	r6, r6, #15
 8009182:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009186:	4642      	mov	r2, r8
 8009188:	464b      	mov	r3, r9
 800918a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800918e:	f7f7 fa3b 	bl	8000608 <__aeabi_dmul>
 8009192:	9b08      	ldr	r3, [sp, #32]
 8009194:	1b9e      	subs	r6, r3, r6
 8009196:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800919a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800919e:	e7e3      	b.n	8009168 <_strtod_l+0x3f8>
 80091a0:	9b08      	ldr	r3, [sp, #32]
 80091a2:	3316      	adds	r3, #22
 80091a4:	db0b      	blt.n	80091be <_strtod_l+0x44e>
 80091a6:	9b05      	ldr	r3, [sp, #20]
 80091a8:	1bdf      	subs	r7, r3, r7
 80091aa:	4b54      	ldr	r3, [pc, #336]	; (80092fc <_strtod_l+0x58c>)
 80091ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80091b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091b4:	4640      	mov	r0, r8
 80091b6:	4649      	mov	r1, r9
 80091b8:	f7f7 fb50 	bl	800085c <__aeabi_ddiv>
 80091bc:	e7d6      	b.n	800916c <_strtod_l+0x3fc>
 80091be:	9b08      	ldr	r3, [sp, #32]
 80091c0:	1b75      	subs	r5, r6, r5
 80091c2:	441d      	add	r5, r3
 80091c4:	2d00      	cmp	r5, #0
 80091c6:	dd70      	ble.n	80092aa <_strtod_l+0x53a>
 80091c8:	f015 030f 	ands.w	r3, r5, #15
 80091cc:	d00a      	beq.n	80091e4 <_strtod_l+0x474>
 80091ce:	494b      	ldr	r1, [pc, #300]	; (80092fc <_strtod_l+0x58c>)
 80091d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80091d4:	4642      	mov	r2, r8
 80091d6:	464b      	mov	r3, r9
 80091d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091dc:	f7f7 fa14 	bl	8000608 <__aeabi_dmul>
 80091e0:	4680      	mov	r8, r0
 80091e2:	4689      	mov	r9, r1
 80091e4:	f035 050f 	bics.w	r5, r5, #15
 80091e8:	d04d      	beq.n	8009286 <_strtod_l+0x516>
 80091ea:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80091ee:	dd22      	ble.n	8009236 <_strtod_l+0x4c6>
 80091f0:	2500      	movs	r5, #0
 80091f2:	46ab      	mov	fp, r5
 80091f4:	9509      	str	r5, [sp, #36]	; 0x24
 80091f6:	9505      	str	r5, [sp, #20]
 80091f8:	2322      	movs	r3, #34	; 0x22
 80091fa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009304 <_strtod_l+0x594>
 80091fe:	6023      	str	r3, [r4, #0]
 8009200:	f04f 0800 	mov.w	r8, #0
 8009204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009206:	2b00      	cmp	r3, #0
 8009208:	f43f aded 	beq.w	8008de6 <_strtod_l+0x76>
 800920c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800920e:	4620      	mov	r0, r4
 8009210:	f003 f826 	bl	800c260 <_Bfree>
 8009214:	9905      	ldr	r1, [sp, #20]
 8009216:	4620      	mov	r0, r4
 8009218:	f003 f822 	bl	800c260 <_Bfree>
 800921c:	4659      	mov	r1, fp
 800921e:	4620      	mov	r0, r4
 8009220:	f003 f81e 	bl	800c260 <_Bfree>
 8009224:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009226:	4620      	mov	r0, r4
 8009228:	f003 f81a 	bl	800c260 <_Bfree>
 800922c:	4629      	mov	r1, r5
 800922e:	4620      	mov	r0, r4
 8009230:	f003 f816 	bl	800c260 <_Bfree>
 8009234:	e5d7      	b.n	8008de6 <_strtod_l+0x76>
 8009236:	4b32      	ldr	r3, [pc, #200]	; (8009300 <_strtod_l+0x590>)
 8009238:	9304      	str	r3, [sp, #16]
 800923a:	2300      	movs	r3, #0
 800923c:	112d      	asrs	r5, r5, #4
 800923e:	4640      	mov	r0, r8
 8009240:	4649      	mov	r1, r9
 8009242:	469a      	mov	sl, r3
 8009244:	2d01      	cmp	r5, #1
 8009246:	dc21      	bgt.n	800928c <_strtod_l+0x51c>
 8009248:	b10b      	cbz	r3, 800924e <_strtod_l+0x4de>
 800924a:	4680      	mov	r8, r0
 800924c:	4689      	mov	r9, r1
 800924e:	492c      	ldr	r1, [pc, #176]	; (8009300 <_strtod_l+0x590>)
 8009250:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009254:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009258:	4642      	mov	r2, r8
 800925a:	464b      	mov	r3, r9
 800925c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009260:	f7f7 f9d2 	bl	8000608 <__aeabi_dmul>
 8009264:	4b27      	ldr	r3, [pc, #156]	; (8009304 <_strtod_l+0x594>)
 8009266:	460a      	mov	r2, r1
 8009268:	400b      	ands	r3, r1
 800926a:	4927      	ldr	r1, [pc, #156]	; (8009308 <_strtod_l+0x598>)
 800926c:	428b      	cmp	r3, r1
 800926e:	4680      	mov	r8, r0
 8009270:	d8be      	bhi.n	80091f0 <_strtod_l+0x480>
 8009272:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009276:	428b      	cmp	r3, r1
 8009278:	bf86      	itte	hi
 800927a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800930c <_strtod_l+0x59c>
 800927e:	f04f 38ff 	movhi.w	r8, #4294967295
 8009282:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009286:	2300      	movs	r3, #0
 8009288:	9304      	str	r3, [sp, #16]
 800928a:	e07b      	b.n	8009384 <_strtod_l+0x614>
 800928c:	07ea      	lsls	r2, r5, #31
 800928e:	d505      	bpl.n	800929c <_strtod_l+0x52c>
 8009290:	9b04      	ldr	r3, [sp, #16]
 8009292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009296:	f7f7 f9b7 	bl	8000608 <__aeabi_dmul>
 800929a:	2301      	movs	r3, #1
 800929c:	9a04      	ldr	r2, [sp, #16]
 800929e:	3208      	adds	r2, #8
 80092a0:	f10a 0a01 	add.w	sl, sl, #1
 80092a4:	106d      	asrs	r5, r5, #1
 80092a6:	9204      	str	r2, [sp, #16]
 80092a8:	e7cc      	b.n	8009244 <_strtod_l+0x4d4>
 80092aa:	d0ec      	beq.n	8009286 <_strtod_l+0x516>
 80092ac:	426d      	negs	r5, r5
 80092ae:	f015 020f 	ands.w	r2, r5, #15
 80092b2:	d00a      	beq.n	80092ca <_strtod_l+0x55a>
 80092b4:	4b11      	ldr	r3, [pc, #68]	; (80092fc <_strtod_l+0x58c>)
 80092b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092ba:	4640      	mov	r0, r8
 80092bc:	4649      	mov	r1, r9
 80092be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c2:	f7f7 facb 	bl	800085c <__aeabi_ddiv>
 80092c6:	4680      	mov	r8, r0
 80092c8:	4689      	mov	r9, r1
 80092ca:	112d      	asrs	r5, r5, #4
 80092cc:	d0db      	beq.n	8009286 <_strtod_l+0x516>
 80092ce:	2d1f      	cmp	r5, #31
 80092d0:	dd1e      	ble.n	8009310 <_strtod_l+0x5a0>
 80092d2:	2500      	movs	r5, #0
 80092d4:	46ab      	mov	fp, r5
 80092d6:	9509      	str	r5, [sp, #36]	; 0x24
 80092d8:	9505      	str	r5, [sp, #20]
 80092da:	2322      	movs	r3, #34	; 0x22
 80092dc:	f04f 0800 	mov.w	r8, #0
 80092e0:	f04f 0900 	mov.w	r9, #0
 80092e4:	6023      	str	r3, [r4, #0]
 80092e6:	e78d      	b.n	8009204 <_strtod_l+0x494>
 80092e8:	0800ddfe 	.word	0x0800ddfe
 80092ec:	0800dcb0 	.word	0x0800dcb0
 80092f0:	0800ddf6 	.word	0x0800ddf6
 80092f4:	0800de35 	.word	0x0800de35
 80092f8:	0800e0c0 	.word	0x0800e0c0
 80092fc:	0800dfa0 	.word	0x0800dfa0
 8009300:	0800df78 	.word	0x0800df78
 8009304:	7ff00000 	.word	0x7ff00000
 8009308:	7ca00000 	.word	0x7ca00000
 800930c:	7fefffff 	.word	0x7fefffff
 8009310:	f015 0310 	ands.w	r3, r5, #16
 8009314:	bf18      	it	ne
 8009316:	236a      	movne	r3, #106	; 0x6a
 8009318:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80096bc <_strtod_l+0x94c>
 800931c:	9304      	str	r3, [sp, #16]
 800931e:	4640      	mov	r0, r8
 8009320:	4649      	mov	r1, r9
 8009322:	2300      	movs	r3, #0
 8009324:	07ea      	lsls	r2, r5, #31
 8009326:	d504      	bpl.n	8009332 <_strtod_l+0x5c2>
 8009328:	e9da 2300 	ldrd	r2, r3, [sl]
 800932c:	f7f7 f96c 	bl	8000608 <__aeabi_dmul>
 8009330:	2301      	movs	r3, #1
 8009332:	106d      	asrs	r5, r5, #1
 8009334:	f10a 0a08 	add.w	sl, sl, #8
 8009338:	d1f4      	bne.n	8009324 <_strtod_l+0x5b4>
 800933a:	b10b      	cbz	r3, 8009340 <_strtod_l+0x5d0>
 800933c:	4680      	mov	r8, r0
 800933e:	4689      	mov	r9, r1
 8009340:	9b04      	ldr	r3, [sp, #16]
 8009342:	b1bb      	cbz	r3, 8009374 <_strtod_l+0x604>
 8009344:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009348:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800934c:	2b00      	cmp	r3, #0
 800934e:	4649      	mov	r1, r9
 8009350:	dd10      	ble.n	8009374 <_strtod_l+0x604>
 8009352:	2b1f      	cmp	r3, #31
 8009354:	f340 811e 	ble.w	8009594 <_strtod_l+0x824>
 8009358:	2b34      	cmp	r3, #52	; 0x34
 800935a:	bfde      	ittt	le
 800935c:	f04f 33ff 	movle.w	r3, #4294967295
 8009360:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009364:	4093      	lslle	r3, r2
 8009366:	f04f 0800 	mov.w	r8, #0
 800936a:	bfcc      	ite	gt
 800936c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009370:	ea03 0901 	andle.w	r9, r3, r1
 8009374:	2200      	movs	r2, #0
 8009376:	2300      	movs	r3, #0
 8009378:	4640      	mov	r0, r8
 800937a:	4649      	mov	r1, r9
 800937c:	f7f7 fbac 	bl	8000ad8 <__aeabi_dcmpeq>
 8009380:	2800      	cmp	r0, #0
 8009382:	d1a6      	bne.n	80092d2 <_strtod_l+0x562>
 8009384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800938a:	4633      	mov	r3, r6
 800938c:	465a      	mov	r2, fp
 800938e:	4620      	mov	r0, r4
 8009390:	f002 ffce 	bl	800c330 <__s2b>
 8009394:	9009      	str	r0, [sp, #36]	; 0x24
 8009396:	2800      	cmp	r0, #0
 8009398:	f43f af2a 	beq.w	80091f0 <_strtod_l+0x480>
 800939c:	9a08      	ldr	r2, [sp, #32]
 800939e:	9b05      	ldr	r3, [sp, #20]
 80093a0:	2a00      	cmp	r2, #0
 80093a2:	eba3 0307 	sub.w	r3, r3, r7
 80093a6:	bfa8      	it	ge
 80093a8:	2300      	movge	r3, #0
 80093aa:	930c      	str	r3, [sp, #48]	; 0x30
 80093ac:	2500      	movs	r5, #0
 80093ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80093b2:	9312      	str	r3, [sp, #72]	; 0x48
 80093b4:	46ab      	mov	fp, r5
 80093b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093b8:	4620      	mov	r0, r4
 80093ba:	6859      	ldr	r1, [r3, #4]
 80093bc:	f002 ff10 	bl	800c1e0 <_Balloc>
 80093c0:	9005      	str	r0, [sp, #20]
 80093c2:	2800      	cmp	r0, #0
 80093c4:	f43f af18 	beq.w	80091f8 <_strtod_l+0x488>
 80093c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ca:	691a      	ldr	r2, [r3, #16]
 80093cc:	3202      	adds	r2, #2
 80093ce:	f103 010c 	add.w	r1, r3, #12
 80093d2:	0092      	lsls	r2, r2, #2
 80093d4:	300c      	adds	r0, #12
 80093d6:	f001 fbfe 	bl	800abd6 <memcpy>
 80093da:	ec49 8b10 	vmov	d0, r8, r9
 80093de:	aa18      	add	r2, sp, #96	; 0x60
 80093e0:	a917      	add	r1, sp, #92	; 0x5c
 80093e2:	4620      	mov	r0, r4
 80093e4:	f003 fad8 	bl	800c998 <__d2b>
 80093e8:	ec49 8b18 	vmov	d8, r8, r9
 80093ec:	9016      	str	r0, [sp, #88]	; 0x58
 80093ee:	2800      	cmp	r0, #0
 80093f0:	f43f af02 	beq.w	80091f8 <_strtod_l+0x488>
 80093f4:	2101      	movs	r1, #1
 80093f6:	4620      	mov	r0, r4
 80093f8:	f003 f832 	bl	800c460 <__i2b>
 80093fc:	4683      	mov	fp, r0
 80093fe:	2800      	cmp	r0, #0
 8009400:	f43f aefa 	beq.w	80091f8 <_strtod_l+0x488>
 8009404:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009406:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009408:	2e00      	cmp	r6, #0
 800940a:	bfab      	itete	ge
 800940c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800940e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009410:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009412:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8009416:	bfac      	ite	ge
 8009418:	eb06 0a03 	addge.w	sl, r6, r3
 800941c:	1b9f      	sublt	r7, r3, r6
 800941e:	9b04      	ldr	r3, [sp, #16]
 8009420:	1af6      	subs	r6, r6, r3
 8009422:	4416      	add	r6, r2
 8009424:	4ba0      	ldr	r3, [pc, #640]	; (80096a8 <_strtod_l+0x938>)
 8009426:	3e01      	subs	r6, #1
 8009428:	429e      	cmp	r6, r3
 800942a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800942e:	f280 80c4 	bge.w	80095ba <_strtod_l+0x84a>
 8009432:	1b9b      	subs	r3, r3, r6
 8009434:	2b1f      	cmp	r3, #31
 8009436:	eba2 0203 	sub.w	r2, r2, r3
 800943a:	f04f 0101 	mov.w	r1, #1
 800943e:	f300 80b0 	bgt.w	80095a2 <_strtod_l+0x832>
 8009442:	fa01 f303 	lsl.w	r3, r1, r3
 8009446:	930e      	str	r3, [sp, #56]	; 0x38
 8009448:	2300      	movs	r3, #0
 800944a:	930d      	str	r3, [sp, #52]	; 0x34
 800944c:	eb0a 0602 	add.w	r6, sl, r2
 8009450:	9b04      	ldr	r3, [sp, #16]
 8009452:	45b2      	cmp	sl, r6
 8009454:	4417      	add	r7, r2
 8009456:	441f      	add	r7, r3
 8009458:	4653      	mov	r3, sl
 800945a:	bfa8      	it	ge
 800945c:	4633      	movge	r3, r6
 800945e:	42bb      	cmp	r3, r7
 8009460:	bfa8      	it	ge
 8009462:	463b      	movge	r3, r7
 8009464:	2b00      	cmp	r3, #0
 8009466:	bfc2      	ittt	gt
 8009468:	1af6      	subgt	r6, r6, r3
 800946a:	1aff      	subgt	r7, r7, r3
 800946c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009470:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009472:	2b00      	cmp	r3, #0
 8009474:	dd17      	ble.n	80094a6 <_strtod_l+0x736>
 8009476:	4659      	mov	r1, fp
 8009478:	461a      	mov	r2, r3
 800947a:	4620      	mov	r0, r4
 800947c:	f003 f8b0 	bl	800c5e0 <__pow5mult>
 8009480:	4683      	mov	fp, r0
 8009482:	2800      	cmp	r0, #0
 8009484:	f43f aeb8 	beq.w	80091f8 <_strtod_l+0x488>
 8009488:	4601      	mov	r1, r0
 800948a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800948c:	4620      	mov	r0, r4
 800948e:	f002 fffd 	bl	800c48c <__multiply>
 8009492:	900b      	str	r0, [sp, #44]	; 0x2c
 8009494:	2800      	cmp	r0, #0
 8009496:	f43f aeaf 	beq.w	80091f8 <_strtod_l+0x488>
 800949a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800949c:	4620      	mov	r0, r4
 800949e:	f002 fedf 	bl	800c260 <_Bfree>
 80094a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094a4:	9316      	str	r3, [sp, #88]	; 0x58
 80094a6:	2e00      	cmp	r6, #0
 80094a8:	f300 808c 	bgt.w	80095c4 <_strtod_l+0x854>
 80094ac:	9b08      	ldr	r3, [sp, #32]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	dd08      	ble.n	80094c4 <_strtod_l+0x754>
 80094b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80094b4:	9905      	ldr	r1, [sp, #20]
 80094b6:	4620      	mov	r0, r4
 80094b8:	f003 f892 	bl	800c5e0 <__pow5mult>
 80094bc:	9005      	str	r0, [sp, #20]
 80094be:	2800      	cmp	r0, #0
 80094c0:	f43f ae9a 	beq.w	80091f8 <_strtod_l+0x488>
 80094c4:	2f00      	cmp	r7, #0
 80094c6:	dd08      	ble.n	80094da <_strtod_l+0x76a>
 80094c8:	9905      	ldr	r1, [sp, #20]
 80094ca:	463a      	mov	r2, r7
 80094cc:	4620      	mov	r0, r4
 80094ce:	f003 f8e1 	bl	800c694 <__lshift>
 80094d2:	9005      	str	r0, [sp, #20]
 80094d4:	2800      	cmp	r0, #0
 80094d6:	f43f ae8f 	beq.w	80091f8 <_strtod_l+0x488>
 80094da:	f1ba 0f00 	cmp.w	sl, #0
 80094de:	dd08      	ble.n	80094f2 <_strtod_l+0x782>
 80094e0:	4659      	mov	r1, fp
 80094e2:	4652      	mov	r2, sl
 80094e4:	4620      	mov	r0, r4
 80094e6:	f003 f8d5 	bl	800c694 <__lshift>
 80094ea:	4683      	mov	fp, r0
 80094ec:	2800      	cmp	r0, #0
 80094ee:	f43f ae83 	beq.w	80091f8 <_strtod_l+0x488>
 80094f2:	9a05      	ldr	r2, [sp, #20]
 80094f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80094f6:	4620      	mov	r0, r4
 80094f8:	f003 f954 	bl	800c7a4 <__mdiff>
 80094fc:	4605      	mov	r5, r0
 80094fe:	2800      	cmp	r0, #0
 8009500:	f43f ae7a 	beq.w	80091f8 <_strtod_l+0x488>
 8009504:	68c3      	ldr	r3, [r0, #12]
 8009506:	930b      	str	r3, [sp, #44]	; 0x2c
 8009508:	2300      	movs	r3, #0
 800950a:	60c3      	str	r3, [r0, #12]
 800950c:	4659      	mov	r1, fp
 800950e:	f003 f92d 	bl	800c76c <__mcmp>
 8009512:	2800      	cmp	r0, #0
 8009514:	da60      	bge.n	80095d8 <_strtod_l+0x868>
 8009516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009518:	ea53 0308 	orrs.w	r3, r3, r8
 800951c:	f040 8084 	bne.w	8009628 <_strtod_l+0x8b8>
 8009520:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009524:	2b00      	cmp	r3, #0
 8009526:	d17f      	bne.n	8009628 <_strtod_l+0x8b8>
 8009528:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800952c:	0d1b      	lsrs	r3, r3, #20
 800952e:	051b      	lsls	r3, r3, #20
 8009530:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009534:	d978      	bls.n	8009628 <_strtod_l+0x8b8>
 8009536:	696b      	ldr	r3, [r5, #20]
 8009538:	b913      	cbnz	r3, 8009540 <_strtod_l+0x7d0>
 800953a:	692b      	ldr	r3, [r5, #16]
 800953c:	2b01      	cmp	r3, #1
 800953e:	dd73      	ble.n	8009628 <_strtod_l+0x8b8>
 8009540:	4629      	mov	r1, r5
 8009542:	2201      	movs	r2, #1
 8009544:	4620      	mov	r0, r4
 8009546:	f003 f8a5 	bl	800c694 <__lshift>
 800954a:	4659      	mov	r1, fp
 800954c:	4605      	mov	r5, r0
 800954e:	f003 f90d 	bl	800c76c <__mcmp>
 8009552:	2800      	cmp	r0, #0
 8009554:	dd68      	ble.n	8009628 <_strtod_l+0x8b8>
 8009556:	9904      	ldr	r1, [sp, #16]
 8009558:	4a54      	ldr	r2, [pc, #336]	; (80096ac <_strtod_l+0x93c>)
 800955a:	464b      	mov	r3, r9
 800955c:	2900      	cmp	r1, #0
 800955e:	f000 8084 	beq.w	800966a <_strtod_l+0x8fa>
 8009562:	ea02 0109 	and.w	r1, r2, r9
 8009566:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800956a:	dc7e      	bgt.n	800966a <_strtod_l+0x8fa>
 800956c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009570:	f77f aeb3 	ble.w	80092da <_strtod_l+0x56a>
 8009574:	4b4e      	ldr	r3, [pc, #312]	; (80096b0 <_strtod_l+0x940>)
 8009576:	4640      	mov	r0, r8
 8009578:	4649      	mov	r1, r9
 800957a:	2200      	movs	r2, #0
 800957c:	f7f7 f844 	bl	8000608 <__aeabi_dmul>
 8009580:	4b4a      	ldr	r3, [pc, #296]	; (80096ac <_strtod_l+0x93c>)
 8009582:	400b      	ands	r3, r1
 8009584:	4680      	mov	r8, r0
 8009586:	4689      	mov	r9, r1
 8009588:	2b00      	cmp	r3, #0
 800958a:	f47f ae3f 	bne.w	800920c <_strtod_l+0x49c>
 800958e:	2322      	movs	r3, #34	; 0x22
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	e63b      	b.n	800920c <_strtod_l+0x49c>
 8009594:	f04f 32ff 	mov.w	r2, #4294967295
 8009598:	fa02 f303 	lsl.w	r3, r2, r3
 800959c:	ea03 0808 	and.w	r8, r3, r8
 80095a0:	e6e8      	b.n	8009374 <_strtod_l+0x604>
 80095a2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80095a6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80095aa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80095ae:	36e2      	adds	r6, #226	; 0xe2
 80095b0:	fa01 f306 	lsl.w	r3, r1, r6
 80095b4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80095b8:	e748      	b.n	800944c <_strtod_l+0x6dc>
 80095ba:	2100      	movs	r1, #0
 80095bc:	2301      	movs	r3, #1
 80095be:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80095c2:	e743      	b.n	800944c <_strtod_l+0x6dc>
 80095c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80095c6:	4632      	mov	r2, r6
 80095c8:	4620      	mov	r0, r4
 80095ca:	f003 f863 	bl	800c694 <__lshift>
 80095ce:	9016      	str	r0, [sp, #88]	; 0x58
 80095d0:	2800      	cmp	r0, #0
 80095d2:	f47f af6b 	bne.w	80094ac <_strtod_l+0x73c>
 80095d6:	e60f      	b.n	80091f8 <_strtod_l+0x488>
 80095d8:	46ca      	mov	sl, r9
 80095da:	d171      	bne.n	80096c0 <_strtod_l+0x950>
 80095dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80095de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095e2:	b352      	cbz	r2, 800963a <_strtod_l+0x8ca>
 80095e4:	4a33      	ldr	r2, [pc, #204]	; (80096b4 <_strtod_l+0x944>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d12a      	bne.n	8009640 <_strtod_l+0x8d0>
 80095ea:	9b04      	ldr	r3, [sp, #16]
 80095ec:	4641      	mov	r1, r8
 80095ee:	b1fb      	cbz	r3, 8009630 <_strtod_l+0x8c0>
 80095f0:	4b2e      	ldr	r3, [pc, #184]	; (80096ac <_strtod_l+0x93c>)
 80095f2:	ea09 0303 	and.w	r3, r9, r3
 80095f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80095fa:	f04f 32ff 	mov.w	r2, #4294967295
 80095fe:	d81a      	bhi.n	8009636 <_strtod_l+0x8c6>
 8009600:	0d1b      	lsrs	r3, r3, #20
 8009602:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009606:	fa02 f303 	lsl.w	r3, r2, r3
 800960a:	4299      	cmp	r1, r3
 800960c:	d118      	bne.n	8009640 <_strtod_l+0x8d0>
 800960e:	4b2a      	ldr	r3, [pc, #168]	; (80096b8 <_strtod_l+0x948>)
 8009610:	459a      	cmp	sl, r3
 8009612:	d102      	bne.n	800961a <_strtod_l+0x8aa>
 8009614:	3101      	adds	r1, #1
 8009616:	f43f adef 	beq.w	80091f8 <_strtod_l+0x488>
 800961a:	4b24      	ldr	r3, [pc, #144]	; (80096ac <_strtod_l+0x93c>)
 800961c:	ea0a 0303 	and.w	r3, sl, r3
 8009620:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009624:	f04f 0800 	mov.w	r8, #0
 8009628:	9b04      	ldr	r3, [sp, #16]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d1a2      	bne.n	8009574 <_strtod_l+0x804>
 800962e:	e5ed      	b.n	800920c <_strtod_l+0x49c>
 8009630:	f04f 33ff 	mov.w	r3, #4294967295
 8009634:	e7e9      	b.n	800960a <_strtod_l+0x89a>
 8009636:	4613      	mov	r3, r2
 8009638:	e7e7      	b.n	800960a <_strtod_l+0x89a>
 800963a:	ea53 0308 	orrs.w	r3, r3, r8
 800963e:	d08a      	beq.n	8009556 <_strtod_l+0x7e6>
 8009640:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009642:	b1e3      	cbz	r3, 800967e <_strtod_l+0x90e>
 8009644:	ea13 0f0a 	tst.w	r3, sl
 8009648:	d0ee      	beq.n	8009628 <_strtod_l+0x8b8>
 800964a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800964c:	9a04      	ldr	r2, [sp, #16]
 800964e:	4640      	mov	r0, r8
 8009650:	4649      	mov	r1, r9
 8009652:	b1c3      	cbz	r3, 8009686 <_strtod_l+0x916>
 8009654:	f7ff fb70 	bl	8008d38 <sulp>
 8009658:	4602      	mov	r2, r0
 800965a:	460b      	mov	r3, r1
 800965c:	ec51 0b18 	vmov	r0, r1, d8
 8009660:	f7f6 fe1c 	bl	800029c <__adddf3>
 8009664:	4680      	mov	r8, r0
 8009666:	4689      	mov	r9, r1
 8009668:	e7de      	b.n	8009628 <_strtod_l+0x8b8>
 800966a:	4013      	ands	r3, r2
 800966c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009670:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009674:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009678:	f04f 38ff 	mov.w	r8, #4294967295
 800967c:	e7d4      	b.n	8009628 <_strtod_l+0x8b8>
 800967e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009680:	ea13 0f08 	tst.w	r3, r8
 8009684:	e7e0      	b.n	8009648 <_strtod_l+0x8d8>
 8009686:	f7ff fb57 	bl	8008d38 <sulp>
 800968a:	4602      	mov	r2, r0
 800968c:	460b      	mov	r3, r1
 800968e:	ec51 0b18 	vmov	r0, r1, d8
 8009692:	f7f6 fe01 	bl	8000298 <__aeabi_dsub>
 8009696:	2200      	movs	r2, #0
 8009698:	2300      	movs	r3, #0
 800969a:	4680      	mov	r8, r0
 800969c:	4689      	mov	r9, r1
 800969e:	f7f7 fa1b 	bl	8000ad8 <__aeabi_dcmpeq>
 80096a2:	2800      	cmp	r0, #0
 80096a4:	d0c0      	beq.n	8009628 <_strtod_l+0x8b8>
 80096a6:	e618      	b.n	80092da <_strtod_l+0x56a>
 80096a8:	fffffc02 	.word	0xfffffc02
 80096ac:	7ff00000 	.word	0x7ff00000
 80096b0:	39500000 	.word	0x39500000
 80096b4:	000fffff 	.word	0x000fffff
 80096b8:	7fefffff 	.word	0x7fefffff
 80096bc:	0800dcc8 	.word	0x0800dcc8
 80096c0:	4659      	mov	r1, fp
 80096c2:	4628      	mov	r0, r5
 80096c4:	f003 f9c2 	bl	800ca4c <__ratio>
 80096c8:	ec57 6b10 	vmov	r6, r7, d0
 80096cc:	ee10 0a10 	vmov	r0, s0
 80096d0:	2200      	movs	r2, #0
 80096d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80096d6:	4639      	mov	r1, r7
 80096d8:	f7f7 fa12 	bl	8000b00 <__aeabi_dcmple>
 80096dc:	2800      	cmp	r0, #0
 80096de:	d071      	beq.n	80097c4 <_strtod_l+0xa54>
 80096e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d17c      	bne.n	80097e0 <_strtod_l+0xa70>
 80096e6:	f1b8 0f00 	cmp.w	r8, #0
 80096ea:	d15a      	bne.n	80097a2 <_strtod_l+0xa32>
 80096ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d15d      	bne.n	80097b0 <_strtod_l+0xa40>
 80096f4:	4b90      	ldr	r3, [pc, #576]	; (8009938 <_strtod_l+0xbc8>)
 80096f6:	2200      	movs	r2, #0
 80096f8:	4630      	mov	r0, r6
 80096fa:	4639      	mov	r1, r7
 80096fc:	f7f7 f9f6 	bl	8000aec <__aeabi_dcmplt>
 8009700:	2800      	cmp	r0, #0
 8009702:	d15c      	bne.n	80097be <_strtod_l+0xa4e>
 8009704:	4630      	mov	r0, r6
 8009706:	4639      	mov	r1, r7
 8009708:	4b8c      	ldr	r3, [pc, #560]	; (800993c <_strtod_l+0xbcc>)
 800970a:	2200      	movs	r2, #0
 800970c:	f7f6 ff7c 	bl	8000608 <__aeabi_dmul>
 8009710:	4606      	mov	r6, r0
 8009712:	460f      	mov	r7, r1
 8009714:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009718:	9606      	str	r6, [sp, #24]
 800971a:	9307      	str	r3, [sp, #28]
 800971c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009720:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009724:	4b86      	ldr	r3, [pc, #536]	; (8009940 <_strtod_l+0xbd0>)
 8009726:	ea0a 0303 	and.w	r3, sl, r3
 800972a:	930d      	str	r3, [sp, #52]	; 0x34
 800972c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800972e:	4b85      	ldr	r3, [pc, #532]	; (8009944 <_strtod_l+0xbd4>)
 8009730:	429a      	cmp	r2, r3
 8009732:	f040 8090 	bne.w	8009856 <_strtod_l+0xae6>
 8009736:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800973a:	ec49 8b10 	vmov	d0, r8, r9
 800973e:	f003 f8bb 	bl	800c8b8 <__ulp>
 8009742:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009746:	ec51 0b10 	vmov	r0, r1, d0
 800974a:	f7f6 ff5d 	bl	8000608 <__aeabi_dmul>
 800974e:	4642      	mov	r2, r8
 8009750:	464b      	mov	r3, r9
 8009752:	f7f6 fda3 	bl	800029c <__adddf3>
 8009756:	460b      	mov	r3, r1
 8009758:	4979      	ldr	r1, [pc, #484]	; (8009940 <_strtod_l+0xbd0>)
 800975a:	4a7b      	ldr	r2, [pc, #492]	; (8009948 <_strtod_l+0xbd8>)
 800975c:	4019      	ands	r1, r3
 800975e:	4291      	cmp	r1, r2
 8009760:	4680      	mov	r8, r0
 8009762:	d944      	bls.n	80097ee <_strtod_l+0xa7e>
 8009764:	ee18 2a90 	vmov	r2, s17
 8009768:	4b78      	ldr	r3, [pc, #480]	; (800994c <_strtod_l+0xbdc>)
 800976a:	429a      	cmp	r2, r3
 800976c:	d104      	bne.n	8009778 <_strtod_l+0xa08>
 800976e:	ee18 3a10 	vmov	r3, s16
 8009772:	3301      	adds	r3, #1
 8009774:	f43f ad40 	beq.w	80091f8 <_strtod_l+0x488>
 8009778:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800994c <_strtod_l+0xbdc>
 800977c:	f04f 38ff 	mov.w	r8, #4294967295
 8009780:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009782:	4620      	mov	r0, r4
 8009784:	f002 fd6c 	bl	800c260 <_Bfree>
 8009788:	9905      	ldr	r1, [sp, #20]
 800978a:	4620      	mov	r0, r4
 800978c:	f002 fd68 	bl	800c260 <_Bfree>
 8009790:	4659      	mov	r1, fp
 8009792:	4620      	mov	r0, r4
 8009794:	f002 fd64 	bl	800c260 <_Bfree>
 8009798:	4629      	mov	r1, r5
 800979a:	4620      	mov	r0, r4
 800979c:	f002 fd60 	bl	800c260 <_Bfree>
 80097a0:	e609      	b.n	80093b6 <_strtod_l+0x646>
 80097a2:	f1b8 0f01 	cmp.w	r8, #1
 80097a6:	d103      	bne.n	80097b0 <_strtod_l+0xa40>
 80097a8:	f1b9 0f00 	cmp.w	r9, #0
 80097ac:	f43f ad95 	beq.w	80092da <_strtod_l+0x56a>
 80097b0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009908 <_strtod_l+0xb98>
 80097b4:	4f60      	ldr	r7, [pc, #384]	; (8009938 <_strtod_l+0xbc8>)
 80097b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80097ba:	2600      	movs	r6, #0
 80097bc:	e7ae      	b.n	800971c <_strtod_l+0x9ac>
 80097be:	4f5f      	ldr	r7, [pc, #380]	; (800993c <_strtod_l+0xbcc>)
 80097c0:	2600      	movs	r6, #0
 80097c2:	e7a7      	b.n	8009714 <_strtod_l+0x9a4>
 80097c4:	4b5d      	ldr	r3, [pc, #372]	; (800993c <_strtod_l+0xbcc>)
 80097c6:	4630      	mov	r0, r6
 80097c8:	4639      	mov	r1, r7
 80097ca:	2200      	movs	r2, #0
 80097cc:	f7f6 ff1c 	bl	8000608 <__aeabi_dmul>
 80097d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097d2:	4606      	mov	r6, r0
 80097d4:	460f      	mov	r7, r1
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d09c      	beq.n	8009714 <_strtod_l+0x9a4>
 80097da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80097de:	e79d      	b.n	800971c <_strtod_l+0x9ac>
 80097e0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009910 <_strtod_l+0xba0>
 80097e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80097e8:	ec57 6b17 	vmov	r6, r7, d7
 80097ec:	e796      	b.n	800971c <_strtod_l+0x9ac>
 80097ee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80097f2:	9b04      	ldr	r3, [sp, #16]
 80097f4:	46ca      	mov	sl, r9
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1c2      	bne.n	8009780 <_strtod_l+0xa10>
 80097fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80097fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009800:	0d1b      	lsrs	r3, r3, #20
 8009802:	051b      	lsls	r3, r3, #20
 8009804:	429a      	cmp	r2, r3
 8009806:	d1bb      	bne.n	8009780 <_strtod_l+0xa10>
 8009808:	4630      	mov	r0, r6
 800980a:	4639      	mov	r1, r7
 800980c:	f7f7 fa5c 	bl	8000cc8 <__aeabi_d2lz>
 8009810:	f7f6 fecc 	bl	80005ac <__aeabi_l2d>
 8009814:	4602      	mov	r2, r0
 8009816:	460b      	mov	r3, r1
 8009818:	4630      	mov	r0, r6
 800981a:	4639      	mov	r1, r7
 800981c:	f7f6 fd3c 	bl	8000298 <__aeabi_dsub>
 8009820:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009822:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009826:	ea43 0308 	orr.w	r3, r3, r8
 800982a:	4313      	orrs	r3, r2
 800982c:	4606      	mov	r6, r0
 800982e:	460f      	mov	r7, r1
 8009830:	d054      	beq.n	80098dc <_strtod_l+0xb6c>
 8009832:	a339      	add	r3, pc, #228	; (adr r3, 8009918 <_strtod_l+0xba8>)
 8009834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009838:	f7f7 f958 	bl	8000aec <__aeabi_dcmplt>
 800983c:	2800      	cmp	r0, #0
 800983e:	f47f ace5 	bne.w	800920c <_strtod_l+0x49c>
 8009842:	a337      	add	r3, pc, #220	; (adr r3, 8009920 <_strtod_l+0xbb0>)
 8009844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009848:	4630      	mov	r0, r6
 800984a:	4639      	mov	r1, r7
 800984c:	f7f7 f96c 	bl	8000b28 <__aeabi_dcmpgt>
 8009850:	2800      	cmp	r0, #0
 8009852:	d095      	beq.n	8009780 <_strtod_l+0xa10>
 8009854:	e4da      	b.n	800920c <_strtod_l+0x49c>
 8009856:	9b04      	ldr	r3, [sp, #16]
 8009858:	b333      	cbz	r3, 80098a8 <_strtod_l+0xb38>
 800985a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800985c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009860:	d822      	bhi.n	80098a8 <_strtod_l+0xb38>
 8009862:	a331      	add	r3, pc, #196	; (adr r3, 8009928 <_strtod_l+0xbb8>)
 8009864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009868:	4630      	mov	r0, r6
 800986a:	4639      	mov	r1, r7
 800986c:	f7f7 f948 	bl	8000b00 <__aeabi_dcmple>
 8009870:	b1a0      	cbz	r0, 800989c <_strtod_l+0xb2c>
 8009872:	4639      	mov	r1, r7
 8009874:	4630      	mov	r0, r6
 8009876:	f7f7 f99f 	bl	8000bb8 <__aeabi_d2uiz>
 800987a:	2801      	cmp	r0, #1
 800987c:	bf38      	it	cc
 800987e:	2001      	movcc	r0, #1
 8009880:	f7f6 fe48 	bl	8000514 <__aeabi_ui2d>
 8009884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009886:	4606      	mov	r6, r0
 8009888:	460f      	mov	r7, r1
 800988a:	bb23      	cbnz	r3, 80098d6 <_strtod_l+0xb66>
 800988c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009890:	9010      	str	r0, [sp, #64]	; 0x40
 8009892:	9311      	str	r3, [sp, #68]	; 0x44
 8009894:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009898:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800989c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800989e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80098a4:	1a9b      	subs	r3, r3, r2
 80098a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80098a8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80098ac:	eeb0 0a48 	vmov.f32	s0, s16
 80098b0:	eef0 0a68 	vmov.f32	s1, s17
 80098b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80098b8:	f002 fffe 	bl	800c8b8 <__ulp>
 80098bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80098c0:	ec53 2b10 	vmov	r2, r3, d0
 80098c4:	f7f6 fea0 	bl	8000608 <__aeabi_dmul>
 80098c8:	ec53 2b18 	vmov	r2, r3, d8
 80098cc:	f7f6 fce6 	bl	800029c <__adddf3>
 80098d0:	4680      	mov	r8, r0
 80098d2:	4689      	mov	r9, r1
 80098d4:	e78d      	b.n	80097f2 <_strtod_l+0xa82>
 80098d6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80098da:	e7db      	b.n	8009894 <_strtod_l+0xb24>
 80098dc:	a314      	add	r3, pc, #80	; (adr r3, 8009930 <_strtod_l+0xbc0>)
 80098de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e2:	f7f7 f903 	bl	8000aec <__aeabi_dcmplt>
 80098e6:	e7b3      	b.n	8009850 <_strtod_l+0xae0>
 80098e8:	2300      	movs	r3, #0
 80098ea:	930a      	str	r3, [sp, #40]	; 0x28
 80098ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80098ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098f0:	6013      	str	r3, [r2, #0]
 80098f2:	f7ff ba7c 	b.w	8008dee <_strtod_l+0x7e>
 80098f6:	2a65      	cmp	r2, #101	; 0x65
 80098f8:	f43f ab75 	beq.w	8008fe6 <_strtod_l+0x276>
 80098fc:	2a45      	cmp	r2, #69	; 0x45
 80098fe:	f43f ab72 	beq.w	8008fe6 <_strtod_l+0x276>
 8009902:	2301      	movs	r3, #1
 8009904:	f7ff bbaa 	b.w	800905c <_strtod_l+0x2ec>
 8009908:	00000000 	.word	0x00000000
 800990c:	bff00000 	.word	0xbff00000
 8009910:	00000000 	.word	0x00000000
 8009914:	3ff00000 	.word	0x3ff00000
 8009918:	94a03595 	.word	0x94a03595
 800991c:	3fdfffff 	.word	0x3fdfffff
 8009920:	35afe535 	.word	0x35afe535
 8009924:	3fe00000 	.word	0x3fe00000
 8009928:	ffc00000 	.word	0xffc00000
 800992c:	41dfffff 	.word	0x41dfffff
 8009930:	94a03595 	.word	0x94a03595
 8009934:	3fcfffff 	.word	0x3fcfffff
 8009938:	3ff00000 	.word	0x3ff00000
 800993c:	3fe00000 	.word	0x3fe00000
 8009940:	7ff00000 	.word	0x7ff00000
 8009944:	7fe00000 	.word	0x7fe00000
 8009948:	7c9fffff 	.word	0x7c9fffff
 800994c:	7fefffff 	.word	0x7fefffff

08009950 <_strtod_r>:
 8009950:	4b01      	ldr	r3, [pc, #4]	; (8009958 <_strtod_r+0x8>)
 8009952:	f7ff ba0d 	b.w	8008d70 <_strtod_l>
 8009956:	bf00      	nop
 8009958:	20000084 	.word	0x20000084

0800995c <strtof>:
 800995c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009960:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8009a24 <strtof+0xc8>
 8009964:	4b2a      	ldr	r3, [pc, #168]	; (8009a10 <strtof+0xb4>)
 8009966:	460a      	mov	r2, r1
 8009968:	ed2d 8b02 	vpush	{d8}
 800996c:	4601      	mov	r1, r0
 800996e:	f8d8 0000 	ldr.w	r0, [r8]
 8009972:	f7ff f9fd 	bl	8008d70 <_strtod_l>
 8009976:	ec55 4b10 	vmov	r4, r5, d0
 800997a:	ee10 2a10 	vmov	r2, s0
 800997e:	ee10 0a10 	vmov	r0, s0
 8009982:	462b      	mov	r3, r5
 8009984:	4629      	mov	r1, r5
 8009986:	f7f7 f8d9 	bl	8000b3c <__aeabi_dcmpun>
 800998a:	b190      	cbz	r0, 80099b2 <strtof+0x56>
 800998c:	2d00      	cmp	r5, #0
 800998e:	4821      	ldr	r0, [pc, #132]	; (8009a14 <strtof+0xb8>)
 8009990:	da09      	bge.n	80099a6 <strtof+0x4a>
 8009992:	f001 f939 	bl	800ac08 <nanf>
 8009996:	eeb1 8a40 	vneg.f32	s16, s0
 800999a:	eeb0 0a48 	vmov.f32	s0, s16
 800999e:	ecbd 8b02 	vpop	{d8}
 80099a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099a6:	ecbd 8b02 	vpop	{d8}
 80099aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099ae:	f001 b92b 	b.w	800ac08 <nanf>
 80099b2:	4620      	mov	r0, r4
 80099b4:	4629      	mov	r1, r5
 80099b6:	f7f7 f91f 	bl	8000bf8 <__aeabi_d2f>
 80099ba:	ee08 0a10 	vmov	s16, r0
 80099be:	eddf 7a16 	vldr	s15, [pc, #88]	; 8009a18 <strtof+0xbc>
 80099c2:	eeb0 7ac8 	vabs.f32	s14, s16
 80099c6:	eeb4 7a67 	vcmp.f32	s14, s15
 80099ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ce:	dd11      	ble.n	80099f4 <strtof+0x98>
 80099d0:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80099d4:	4b11      	ldr	r3, [pc, #68]	; (8009a1c <strtof+0xc0>)
 80099d6:	f04f 32ff 	mov.w	r2, #4294967295
 80099da:	4620      	mov	r0, r4
 80099dc:	4639      	mov	r1, r7
 80099de:	f7f7 f8ad 	bl	8000b3c <__aeabi_dcmpun>
 80099e2:	b980      	cbnz	r0, 8009a06 <strtof+0xaa>
 80099e4:	4b0d      	ldr	r3, [pc, #52]	; (8009a1c <strtof+0xc0>)
 80099e6:	f04f 32ff 	mov.w	r2, #4294967295
 80099ea:	4620      	mov	r0, r4
 80099ec:	4639      	mov	r1, r7
 80099ee:	f7f7 f887 	bl	8000b00 <__aeabi_dcmple>
 80099f2:	b940      	cbnz	r0, 8009a06 <strtof+0xaa>
 80099f4:	ee18 3a10 	vmov	r3, s16
 80099f8:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80099fc:	d1cd      	bne.n	800999a <strtof+0x3e>
 80099fe:	4b08      	ldr	r3, [pc, #32]	; (8009a20 <strtof+0xc4>)
 8009a00:	402b      	ands	r3, r5
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d0c9      	beq.n	800999a <strtof+0x3e>
 8009a06:	f8d8 3000 	ldr.w	r3, [r8]
 8009a0a:	2222      	movs	r2, #34	; 0x22
 8009a0c:	601a      	str	r2, [r3, #0]
 8009a0e:	e7c4      	b.n	800999a <strtof+0x3e>
 8009a10:	20000084 	.word	0x20000084
 8009a14:	0800e0c0 	.word	0x0800e0c0
 8009a18:	7f7fffff 	.word	0x7f7fffff
 8009a1c:	7fefffff 	.word	0x7fefffff
 8009a20:	7ff00000 	.word	0x7ff00000
 8009a24:	2000023c 	.word	0x2000023c

08009a28 <_strtol_l.constprop.0>:
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a2e:	d001      	beq.n	8009a34 <_strtol_l.constprop.0+0xc>
 8009a30:	2b24      	cmp	r3, #36	; 0x24
 8009a32:	d906      	bls.n	8009a42 <_strtol_l.constprop.0+0x1a>
 8009a34:	f001 f8a2 	bl	800ab7c <__errno>
 8009a38:	2316      	movs	r3, #22
 8009a3a:	6003      	str	r3, [r0, #0]
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a42:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009b28 <_strtol_l.constprop.0+0x100>
 8009a46:	460d      	mov	r5, r1
 8009a48:	462e      	mov	r6, r5
 8009a4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a4e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009a52:	f017 0708 	ands.w	r7, r7, #8
 8009a56:	d1f7      	bne.n	8009a48 <_strtol_l.constprop.0+0x20>
 8009a58:	2c2d      	cmp	r4, #45	; 0x2d
 8009a5a:	d132      	bne.n	8009ac2 <_strtol_l.constprop.0+0x9a>
 8009a5c:	782c      	ldrb	r4, [r5, #0]
 8009a5e:	2701      	movs	r7, #1
 8009a60:	1cb5      	adds	r5, r6, #2
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d05b      	beq.n	8009b1e <_strtol_l.constprop.0+0xf6>
 8009a66:	2b10      	cmp	r3, #16
 8009a68:	d109      	bne.n	8009a7e <_strtol_l.constprop.0+0x56>
 8009a6a:	2c30      	cmp	r4, #48	; 0x30
 8009a6c:	d107      	bne.n	8009a7e <_strtol_l.constprop.0+0x56>
 8009a6e:	782c      	ldrb	r4, [r5, #0]
 8009a70:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009a74:	2c58      	cmp	r4, #88	; 0x58
 8009a76:	d14d      	bne.n	8009b14 <_strtol_l.constprop.0+0xec>
 8009a78:	786c      	ldrb	r4, [r5, #1]
 8009a7a:	2310      	movs	r3, #16
 8009a7c:	3502      	adds	r5, #2
 8009a7e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009a82:	f108 38ff 	add.w	r8, r8, #4294967295
 8009a86:	f04f 0e00 	mov.w	lr, #0
 8009a8a:	fbb8 f9f3 	udiv	r9, r8, r3
 8009a8e:	4676      	mov	r6, lr
 8009a90:	fb03 8a19 	mls	sl, r3, r9, r8
 8009a94:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009a98:	f1bc 0f09 	cmp.w	ip, #9
 8009a9c:	d816      	bhi.n	8009acc <_strtol_l.constprop.0+0xa4>
 8009a9e:	4664      	mov	r4, ip
 8009aa0:	42a3      	cmp	r3, r4
 8009aa2:	dd24      	ble.n	8009aee <_strtol_l.constprop.0+0xc6>
 8009aa4:	f1be 3fff 	cmp.w	lr, #4294967295
 8009aa8:	d008      	beq.n	8009abc <_strtol_l.constprop.0+0x94>
 8009aaa:	45b1      	cmp	r9, r6
 8009aac:	d31c      	bcc.n	8009ae8 <_strtol_l.constprop.0+0xc0>
 8009aae:	d101      	bne.n	8009ab4 <_strtol_l.constprop.0+0x8c>
 8009ab0:	45a2      	cmp	sl, r4
 8009ab2:	db19      	blt.n	8009ae8 <_strtol_l.constprop.0+0xc0>
 8009ab4:	fb06 4603 	mla	r6, r6, r3, r4
 8009ab8:	f04f 0e01 	mov.w	lr, #1
 8009abc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ac0:	e7e8      	b.n	8009a94 <_strtol_l.constprop.0+0x6c>
 8009ac2:	2c2b      	cmp	r4, #43	; 0x2b
 8009ac4:	bf04      	itt	eq
 8009ac6:	782c      	ldrbeq	r4, [r5, #0]
 8009ac8:	1cb5      	addeq	r5, r6, #2
 8009aca:	e7ca      	b.n	8009a62 <_strtol_l.constprop.0+0x3a>
 8009acc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009ad0:	f1bc 0f19 	cmp.w	ip, #25
 8009ad4:	d801      	bhi.n	8009ada <_strtol_l.constprop.0+0xb2>
 8009ad6:	3c37      	subs	r4, #55	; 0x37
 8009ad8:	e7e2      	b.n	8009aa0 <_strtol_l.constprop.0+0x78>
 8009ada:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009ade:	f1bc 0f19 	cmp.w	ip, #25
 8009ae2:	d804      	bhi.n	8009aee <_strtol_l.constprop.0+0xc6>
 8009ae4:	3c57      	subs	r4, #87	; 0x57
 8009ae6:	e7db      	b.n	8009aa0 <_strtol_l.constprop.0+0x78>
 8009ae8:	f04f 3eff 	mov.w	lr, #4294967295
 8009aec:	e7e6      	b.n	8009abc <_strtol_l.constprop.0+0x94>
 8009aee:	f1be 3fff 	cmp.w	lr, #4294967295
 8009af2:	d105      	bne.n	8009b00 <_strtol_l.constprop.0+0xd8>
 8009af4:	2322      	movs	r3, #34	; 0x22
 8009af6:	6003      	str	r3, [r0, #0]
 8009af8:	4646      	mov	r6, r8
 8009afa:	b942      	cbnz	r2, 8009b0e <_strtol_l.constprop.0+0xe6>
 8009afc:	4630      	mov	r0, r6
 8009afe:	e79e      	b.n	8009a3e <_strtol_l.constprop.0+0x16>
 8009b00:	b107      	cbz	r7, 8009b04 <_strtol_l.constprop.0+0xdc>
 8009b02:	4276      	negs	r6, r6
 8009b04:	2a00      	cmp	r2, #0
 8009b06:	d0f9      	beq.n	8009afc <_strtol_l.constprop.0+0xd4>
 8009b08:	f1be 0f00 	cmp.w	lr, #0
 8009b0c:	d000      	beq.n	8009b10 <_strtol_l.constprop.0+0xe8>
 8009b0e:	1e69      	subs	r1, r5, #1
 8009b10:	6011      	str	r1, [r2, #0]
 8009b12:	e7f3      	b.n	8009afc <_strtol_l.constprop.0+0xd4>
 8009b14:	2430      	movs	r4, #48	; 0x30
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1b1      	bne.n	8009a7e <_strtol_l.constprop.0+0x56>
 8009b1a:	2308      	movs	r3, #8
 8009b1c:	e7af      	b.n	8009a7e <_strtol_l.constprop.0+0x56>
 8009b1e:	2c30      	cmp	r4, #48	; 0x30
 8009b20:	d0a5      	beq.n	8009a6e <_strtol_l.constprop.0+0x46>
 8009b22:	230a      	movs	r3, #10
 8009b24:	e7ab      	b.n	8009a7e <_strtol_l.constprop.0+0x56>
 8009b26:	bf00      	nop
 8009b28:	0800dcf1 	.word	0x0800dcf1

08009b2c <_strtol_r>:
 8009b2c:	f7ff bf7c 	b.w	8009a28 <_strtol_l.constprop.0>

08009b30 <strtol>:
 8009b30:	4613      	mov	r3, r2
 8009b32:	460a      	mov	r2, r1
 8009b34:	4601      	mov	r1, r0
 8009b36:	4802      	ldr	r0, [pc, #8]	; (8009b40 <strtol+0x10>)
 8009b38:	6800      	ldr	r0, [r0, #0]
 8009b3a:	f7ff bf75 	b.w	8009a28 <_strtol_l.constprop.0>
 8009b3e:	bf00      	nop
 8009b40:	2000023c 	.word	0x2000023c

08009b44 <tolower>:
 8009b44:	4b03      	ldr	r3, [pc, #12]	; (8009b54 <tolower+0x10>)
 8009b46:	5c1b      	ldrb	r3, [r3, r0]
 8009b48:	f003 0303 	and.w	r3, r3, #3
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	bf08      	it	eq
 8009b50:	3020      	addeq	r0, #32
 8009b52:	4770      	bx	lr
 8009b54:	0800dcf1 	.word	0x0800dcf1

08009b58 <__cvt>:
 8009b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b5c:	ec55 4b10 	vmov	r4, r5, d0
 8009b60:	2d00      	cmp	r5, #0
 8009b62:	460e      	mov	r6, r1
 8009b64:	4619      	mov	r1, r3
 8009b66:	462b      	mov	r3, r5
 8009b68:	bfbb      	ittet	lt
 8009b6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009b6e:	461d      	movlt	r5, r3
 8009b70:	2300      	movge	r3, #0
 8009b72:	232d      	movlt	r3, #45	; 0x2d
 8009b74:	700b      	strb	r3, [r1, #0]
 8009b76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009b7c:	4691      	mov	r9, r2
 8009b7e:	f023 0820 	bic.w	r8, r3, #32
 8009b82:	bfbc      	itt	lt
 8009b84:	4622      	movlt	r2, r4
 8009b86:	4614      	movlt	r4, r2
 8009b88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b8c:	d005      	beq.n	8009b9a <__cvt+0x42>
 8009b8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009b92:	d100      	bne.n	8009b96 <__cvt+0x3e>
 8009b94:	3601      	adds	r6, #1
 8009b96:	2102      	movs	r1, #2
 8009b98:	e000      	b.n	8009b9c <__cvt+0x44>
 8009b9a:	2103      	movs	r1, #3
 8009b9c:	ab03      	add	r3, sp, #12
 8009b9e:	9301      	str	r3, [sp, #4]
 8009ba0:	ab02      	add	r3, sp, #8
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	ec45 4b10 	vmov	d0, r4, r5
 8009ba8:	4653      	mov	r3, sl
 8009baa:	4632      	mov	r2, r6
 8009bac:	f001 f8bc 	bl	800ad28 <_dtoa_r>
 8009bb0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009bb4:	4607      	mov	r7, r0
 8009bb6:	d102      	bne.n	8009bbe <__cvt+0x66>
 8009bb8:	f019 0f01 	tst.w	r9, #1
 8009bbc:	d022      	beq.n	8009c04 <__cvt+0xac>
 8009bbe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009bc2:	eb07 0906 	add.w	r9, r7, r6
 8009bc6:	d110      	bne.n	8009bea <__cvt+0x92>
 8009bc8:	783b      	ldrb	r3, [r7, #0]
 8009bca:	2b30      	cmp	r3, #48	; 0x30
 8009bcc:	d10a      	bne.n	8009be4 <__cvt+0x8c>
 8009bce:	2200      	movs	r2, #0
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	4629      	mov	r1, r5
 8009bd6:	f7f6 ff7f 	bl	8000ad8 <__aeabi_dcmpeq>
 8009bda:	b918      	cbnz	r0, 8009be4 <__cvt+0x8c>
 8009bdc:	f1c6 0601 	rsb	r6, r6, #1
 8009be0:	f8ca 6000 	str.w	r6, [sl]
 8009be4:	f8da 3000 	ldr.w	r3, [sl]
 8009be8:	4499      	add	r9, r3
 8009bea:	2200      	movs	r2, #0
 8009bec:	2300      	movs	r3, #0
 8009bee:	4620      	mov	r0, r4
 8009bf0:	4629      	mov	r1, r5
 8009bf2:	f7f6 ff71 	bl	8000ad8 <__aeabi_dcmpeq>
 8009bf6:	b108      	cbz	r0, 8009bfc <__cvt+0xa4>
 8009bf8:	f8cd 900c 	str.w	r9, [sp, #12]
 8009bfc:	2230      	movs	r2, #48	; 0x30
 8009bfe:	9b03      	ldr	r3, [sp, #12]
 8009c00:	454b      	cmp	r3, r9
 8009c02:	d307      	bcc.n	8009c14 <__cvt+0xbc>
 8009c04:	9b03      	ldr	r3, [sp, #12]
 8009c06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c08:	1bdb      	subs	r3, r3, r7
 8009c0a:	4638      	mov	r0, r7
 8009c0c:	6013      	str	r3, [r2, #0]
 8009c0e:	b004      	add	sp, #16
 8009c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c14:	1c59      	adds	r1, r3, #1
 8009c16:	9103      	str	r1, [sp, #12]
 8009c18:	701a      	strb	r2, [r3, #0]
 8009c1a:	e7f0      	b.n	8009bfe <__cvt+0xa6>

08009c1c <__exponent>:
 8009c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2900      	cmp	r1, #0
 8009c22:	bfb8      	it	lt
 8009c24:	4249      	neglt	r1, r1
 8009c26:	f803 2b02 	strb.w	r2, [r3], #2
 8009c2a:	bfb4      	ite	lt
 8009c2c:	222d      	movlt	r2, #45	; 0x2d
 8009c2e:	222b      	movge	r2, #43	; 0x2b
 8009c30:	2909      	cmp	r1, #9
 8009c32:	7042      	strb	r2, [r0, #1]
 8009c34:	dd2a      	ble.n	8009c8c <__exponent+0x70>
 8009c36:	f10d 0207 	add.w	r2, sp, #7
 8009c3a:	4617      	mov	r7, r2
 8009c3c:	260a      	movs	r6, #10
 8009c3e:	4694      	mov	ip, r2
 8009c40:	fb91 f5f6 	sdiv	r5, r1, r6
 8009c44:	fb06 1415 	mls	r4, r6, r5, r1
 8009c48:	3430      	adds	r4, #48	; 0x30
 8009c4a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009c4e:	460c      	mov	r4, r1
 8009c50:	2c63      	cmp	r4, #99	; 0x63
 8009c52:	f102 32ff 	add.w	r2, r2, #4294967295
 8009c56:	4629      	mov	r1, r5
 8009c58:	dcf1      	bgt.n	8009c3e <__exponent+0x22>
 8009c5a:	3130      	adds	r1, #48	; 0x30
 8009c5c:	f1ac 0402 	sub.w	r4, ip, #2
 8009c60:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009c64:	1c41      	adds	r1, r0, #1
 8009c66:	4622      	mov	r2, r4
 8009c68:	42ba      	cmp	r2, r7
 8009c6a:	d30a      	bcc.n	8009c82 <__exponent+0x66>
 8009c6c:	f10d 0209 	add.w	r2, sp, #9
 8009c70:	eba2 020c 	sub.w	r2, r2, ip
 8009c74:	42bc      	cmp	r4, r7
 8009c76:	bf88      	it	hi
 8009c78:	2200      	movhi	r2, #0
 8009c7a:	4413      	add	r3, r2
 8009c7c:	1a18      	subs	r0, r3, r0
 8009c7e:	b003      	add	sp, #12
 8009c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c82:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009c86:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009c8a:	e7ed      	b.n	8009c68 <__exponent+0x4c>
 8009c8c:	2330      	movs	r3, #48	; 0x30
 8009c8e:	3130      	adds	r1, #48	; 0x30
 8009c90:	7083      	strb	r3, [r0, #2]
 8009c92:	70c1      	strb	r1, [r0, #3]
 8009c94:	1d03      	adds	r3, r0, #4
 8009c96:	e7f1      	b.n	8009c7c <__exponent+0x60>

08009c98 <_printf_float>:
 8009c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9c:	ed2d 8b02 	vpush	{d8}
 8009ca0:	b08d      	sub	sp, #52	; 0x34
 8009ca2:	460c      	mov	r4, r1
 8009ca4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009ca8:	4616      	mov	r6, r2
 8009caa:	461f      	mov	r7, r3
 8009cac:	4605      	mov	r5, r0
 8009cae:	f000 ff1b 	bl	800aae8 <_localeconv_r>
 8009cb2:	f8d0 a000 	ldr.w	sl, [r0]
 8009cb6:	4650      	mov	r0, sl
 8009cb8:	f7f6 fae2 	bl	8000280 <strlen>
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	930a      	str	r3, [sp, #40]	; 0x28
 8009cc0:	6823      	ldr	r3, [r4, #0]
 8009cc2:	9305      	str	r3, [sp, #20]
 8009cc4:	f8d8 3000 	ldr.w	r3, [r8]
 8009cc8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009ccc:	3307      	adds	r3, #7
 8009cce:	f023 0307 	bic.w	r3, r3, #7
 8009cd2:	f103 0208 	add.w	r2, r3, #8
 8009cd6:	f8c8 2000 	str.w	r2, [r8]
 8009cda:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009cde:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009ce2:	9307      	str	r3, [sp, #28]
 8009ce4:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ce8:	ee08 0a10 	vmov	s16, r0
 8009cec:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009cf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cf4:	4b9e      	ldr	r3, [pc, #632]	; (8009f70 <_printf_float+0x2d8>)
 8009cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8009cfa:	f7f6 ff1f 	bl	8000b3c <__aeabi_dcmpun>
 8009cfe:	bb88      	cbnz	r0, 8009d64 <_printf_float+0xcc>
 8009d00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d04:	4b9a      	ldr	r3, [pc, #616]	; (8009f70 <_printf_float+0x2d8>)
 8009d06:	f04f 32ff 	mov.w	r2, #4294967295
 8009d0a:	f7f6 fef9 	bl	8000b00 <__aeabi_dcmple>
 8009d0e:	bb48      	cbnz	r0, 8009d64 <_printf_float+0xcc>
 8009d10:	2200      	movs	r2, #0
 8009d12:	2300      	movs	r3, #0
 8009d14:	4640      	mov	r0, r8
 8009d16:	4649      	mov	r1, r9
 8009d18:	f7f6 fee8 	bl	8000aec <__aeabi_dcmplt>
 8009d1c:	b110      	cbz	r0, 8009d24 <_printf_float+0x8c>
 8009d1e:	232d      	movs	r3, #45	; 0x2d
 8009d20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d24:	4a93      	ldr	r2, [pc, #588]	; (8009f74 <_printf_float+0x2dc>)
 8009d26:	4b94      	ldr	r3, [pc, #592]	; (8009f78 <_printf_float+0x2e0>)
 8009d28:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009d2c:	bf94      	ite	ls
 8009d2e:	4690      	movls	r8, r2
 8009d30:	4698      	movhi	r8, r3
 8009d32:	2303      	movs	r3, #3
 8009d34:	6123      	str	r3, [r4, #16]
 8009d36:	9b05      	ldr	r3, [sp, #20]
 8009d38:	f023 0304 	bic.w	r3, r3, #4
 8009d3c:	6023      	str	r3, [r4, #0]
 8009d3e:	f04f 0900 	mov.w	r9, #0
 8009d42:	9700      	str	r7, [sp, #0]
 8009d44:	4633      	mov	r3, r6
 8009d46:	aa0b      	add	r2, sp, #44	; 0x2c
 8009d48:	4621      	mov	r1, r4
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	f000 f9da 	bl	800a104 <_printf_common>
 8009d50:	3001      	adds	r0, #1
 8009d52:	f040 8090 	bne.w	8009e76 <_printf_float+0x1de>
 8009d56:	f04f 30ff 	mov.w	r0, #4294967295
 8009d5a:	b00d      	add	sp, #52	; 0x34
 8009d5c:	ecbd 8b02 	vpop	{d8}
 8009d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d64:	4642      	mov	r2, r8
 8009d66:	464b      	mov	r3, r9
 8009d68:	4640      	mov	r0, r8
 8009d6a:	4649      	mov	r1, r9
 8009d6c:	f7f6 fee6 	bl	8000b3c <__aeabi_dcmpun>
 8009d70:	b140      	cbz	r0, 8009d84 <_printf_float+0xec>
 8009d72:	464b      	mov	r3, r9
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	bfbc      	itt	lt
 8009d78:	232d      	movlt	r3, #45	; 0x2d
 8009d7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009d7e:	4a7f      	ldr	r2, [pc, #508]	; (8009f7c <_printf_float+0x2e4>)
 8009d80:	4b7f      	ldr	r3, [pc, #508]	; (8009f80 <_printf_float+0x2e8>)
 8009d82:	e7d1      	b.n	8009d28 <_printf_float+0x90>
 8009d84:	6863      	ldr	r3, [r4, #4]
 8009d86:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009d8a:	9206      	str	r2, [sp, #24]
 8009d8c:	1c5a      	adds	r2, r3, #1
 8009d8e:	d13f      	bne.n	8009e10 <_printf_float+0x178>
 8009d90:	2306      	movs	r3, #6
 8009d92:	6063      	str	r3, [r4, #4]
 8009d94:	9b05      	ldr	r3, [sp, #20]
 8009d96:	6861      	ldr	r1, [r4, #4]
 8009d98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	9303      	str	r3, [sp, #12]
 8009da0:	ab0a      	add	r3, sp, #40	; 0x28
 8009da2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009da6:	ab09      	add	r3, sp, #36	; 0x24
 8009da8:	ec49 8b10 	vmov	d0, r8, r9
 8009dac:	9300      	str	r3, [sp, #0]
 8009dae:	6022      	str	r2, [r4, #0]
 8009db0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009db4:	4628      	mov	r0, r5
 8009db6:	f7ff fecf 	bl	8009b58 <__cvt>
 8009dba:	9b06      	ldr	r3, [sp, #24]
 8009dbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009dbe:	2b47      	cmp	r3, #71	; 0x47
 8009dc0:	4680      	mov	r8, r0
 8009dc2:	d108      	bne.n	8009dd6 <_printf_float+0x13e>
 8009dc4:	1cc8      	adds	r0, r1, #3
 8009dc6:	db02      	blt.n	8009dce <_printf_float+0x136>
 8009dc8:	6863      	ldr	r3, [r4, #4]
 8009dca:	4299      	cmp	r1, r3
 8009dcc:	dd41      	ble.n	8009e52 <_printf_float+0x1ba>
 8009dce:	f1ab 0302 	sub.w	r3, fp, #2
 8009dd2:	fa5f fb83 	uxtb.w	fp, r3
 8009dd6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009dda:	d820      	bhi.n	8009e1e <_printf_float+0x186>
 8009ddc:	3901      	subs	r1, #1
 8009dde:	465a      	mov	r2, fp
 8009de0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009de4:	9109      	str	r1, [sp, #36]	; 0x24
 8009de6:	f7ff ff19 	bl	8009c1c <__exponent>
 8009dea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009dec:	1813      	adds	r3, r2, r0
 8009dee:	2a01      	cmp	r2, #1
 8009df0:	4681      	mov	r9, r0
 8009df2:	6123      	str	r3, [r4, #16]
 8009df4:	dc02      	bgt.n	8009dfc <_printf_float+0x164>
 8009df6:	6822      	ldr	r2, [r4, #0]
 8009df8:	07d2      	lsls	r2, r2, #31
 8009dfa:	d501      	bpl.n	8009e00 <_printf_float+0x168>
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	6123      	str	r3, [r4, #16]
 8009e00:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d09c      	beq.n	8009d42 <_printf_float+0xaa>
 8009e08:	232d      	movs	r3, #45	; 0x2d
 8009e0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e0e:	e798      	b.n	8009d42 <_printf_float+0xaa>
 8009e10:	9a06      	ldr	r2, [sp, #24]
 8009e12:	2a47      	cmp	r2, #71	; 0x47
 8009e14:	d1be      	bne.n	8009d94 <_printf_float+0xfc>
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d1bc      	bne.n	8009d94 <_printf_float+0xfc>
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e7b9      	b.n	8009d92 <_printf_float+0xfa>
 8009e1e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009e22:	d118      	bne.n	8009e56 <_printf_float+0x1be>
 8009e24:	2900      	cmp	r1, #0
 8009e26:	6863      	ldr	r3, [r4, #4]
 8009e28:	dd0b      	ble.n	8009e42 <_printf_float+0x1aa>
 8009e2a:	6121      	str	r1, [r4, #16]
 8009e2c:	b913      	cbnz	r3, 8009e34 <_printf_float+0x19c>
 8009e2e:	6822      	ldr	r2, [r4, #0]
 8009e30:	07d0      	lsls	r0, r2, #31
 8009e32:	d502      	bpl.n	8009e3a <_printf_float+0x1a2>
 8009e34:	3301      	adds	r3, #1
 8009e36:	440b      	add	r3, r1
 8009e38:	6123      	str	r3, [r4, #16]
 8009e3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8009e3c:	f04f 0900 	mov.w	r9, #0
 8009e40:	e7de      	b.n	8009e00 <_printf_float+0x168>
 8009e42:	b913      	cbnz	r3, 8009e4a <_printf_float+0x1b2>
 8009e44:	6822      	ldr	r2, [r4, #0]
 8009e46:	07d2      	lsls	r2, r2, #31
 8009e48:	d501      	bpl.n	8009e4e <_printf_float+0x1b6>
 8009e4a:	3302      	adds	r3, #2
 8009e4c:	e7f4      	b.n	8009e38 <_printf_float+0x1a0>
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e7f2      	b.n	8009e38 <_printf_float+0x1a0>
 8009e52:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e58:	4299      	cmp	r1, r3
 8009e5a:	db05      	blt.n	8009e68 <_printf_float+0x1d0>
 8009e5c:	6823      	ldr	r3, [r4, #0]
 8009e5e:	6121      	str	r1, [r4, #16]
 8009e60:	07d8      	lsls	r0, r3, #31
 8009e62:	d5ea      	bpl.n	8009e3a <_printf_float+0x1a2>
 8009e64:	1c4b      	adds	r3, r1, #1
 8009e66:	e7e7      	b.n	8009e38 <_printf_float+0x1a0>
 8009e68:	2900      	cmp	r1, #0
 8009e6a:	bfd4      	ite	le
 8009e6c:	f1c1 0202 	rsble	r2, r1, #2
 8009e70:	2201      	movgt	r2, #1
 8009e72:	4413      	add	r3, r2
 8009e74:	e7e0      	b.n	8009e38 <_printf_float+0x1a0>
 8009e76:	6823      	ldr	r3, [r4, #0]
 8009e78:	055a      	lsls	r2, r3, #21
 8009e7a:	d407      	bmi.n	8009e8c <_printf_float+0x1f4>
 8009e7c:	6923      	ldr	r3, [r4, #16]
 8009e7e:	4642      	mov	r2, r8
 8009e80:	4631      	mov	r1, r6
 8009e82:	4628      	mov	r0, r5
 8009e84:	47b8      	blx	r7
 8009e86:	3001      	adds	r0, #1
 8009e88:	d12c      	bne.n	8009ee4 <_printf_float+0x24c>
 8009e8a:	e764      	b.n	8009d56 <_printf_float+0xbe>
 8009e8c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e90:	f240 80e0 	bls.w	800a054 <_printf_float+0x3bc>
 8009e94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e98:	2200      	movs	r2, #0
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	f7f6 fe1c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	d034      	beq.n	8009f0e <_printf_float+0x276>
 8009ea4:	4a37      	ldr	r2, [pc, #220]	; (8009f84 <_printf_float+0x2ec>)
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	4631      	mov	r1, r6
 8009eaa:	4628      	mov	r0, r5
 8009eac:	47b8      	blx	r7
 8009eae:	3001      	adds	r0, #1
 8009eb0:	f43f af51 	beq.w	8009d56 <_printf_float+0xbe>
 8009eb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	db02      	blt.n	8009ec2 <_printf_float+0x22a>
 8009ebc:	6823      	ldr	r3, [r4, #0]
 8009ebe:	07d8      	lsls	r0, r3, #31
 8009ec0:	d510      	bpl.n	8009ee4 <_printf_float+0x24c>
 8009ec2:	ee18 3a10 	vmov	r3, s16
 8009ec6:	4652      	mov	r2, sl
 8009ec8:	4631      	mov	r1, r6
 8009eca:	4628      	mov	r0, r5
 8009ecc:	47b8      	blx	r7
 8009ece:	3001      	adds	r0, #1
 8009ed0:	f43f af41 	beq.w	8009d56 <_printf_float+0xbe>
 8009ed4:	f04f 0800 	mov.w	r8, #0
 8009ed8:	f104 091a 	add.w	r9, r4, #26
 8009edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ede:	3b01      	subs	r3, #1
 8009ee0:	4543      	cmp	r3, r8
 8009ee2:	dc09      	bgt.n	8009ef8 <_printf_float+0x260>
 8009ee4:	6823      	ldr	r3, [r4, #0]
 8009ee6:	079b      	lsls	r3, r3, #30
 8009ee8:	f100 8107 	bmi.w	800a0fa <_printf_float+0x462>
 8009eec:	68e0      	ldr	r0, [r4, #12]
 8009eee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ef0:	4298      	cmp	r0, r3
 8009ef2:	bfb8      	it	lt
 8009ef4:	4618      	movlt	r0, r3
 8009ef6:	e730      	b.n	8009d5a <_printf_float+0xc2>
 8009ef8:	2301      	movs	r3, #1
 8009efa:	464a      	mov	r2, r9
 8009efc:	4631      	mov	r1, r6
 8009efe:	4628      	mov	r0, r5
 8009f00:	47b8      	blx	r7
 8009f02:	3001      	adds	r0, #1
 8009f04:	f43f af27 	beq.w	8009d56 <_printf_float+0xbe>
 8009f08:	f108 0801 	add.w	r8, r8, #1
 8009f0c:	e7e6      	b.n	8009edc <_printf_float+0x244>
 8009f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	dc39      	bgt.n	8009f88 <_printf_float+0x2f0>
 8009f14:	4a1b      	ldr	r2, [pc, #108]	; (8009f84 <_printf_float+0x2ec>)
 8009f16:	2301      	movs	r3, #1
 8009f18:	4631      	mov	r1, r6
 8009f1a:	4628      	mov	r0, r5
 8009f1c:	47b8      	blx	r7
 8009f1e:	3001      	adds	r0, #1
 8009f20:	f43f af19 	beq.w	8009d56 <_printf_float+0xbe>
 8009f24:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	d102      	bne.n	8009f32 <_printf_float+0x29a>
 8009f2c:	6823      	ldr	r3, [r4, #0]
 8009f2e:	07d9      	lsls	r1, r3, #31
 8009f30:	d5d8      	bpl.n	8009ee4 <_printf_float+0x24c>
 8009f32:	ee18 3a10 	vmov	r3, s16
 8009f36:	4652      	mov	r2, sl
 8009f38:	4631      	mov	r1, r6
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	47b8      	blx	r7
 8009f3e:	3001      	adds	r0, #1
 8009f40:	f43f af09 	beq.w	8009d56 <_printf_float+0xbe>
 8009f44:	f04f 0900 	mov.w	r9, #0
 8009f48:	f104 0a1a 	add.w	sl, r4, #26
 8009f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f4e:	425b      	negs	r3, r3
 8009f50:	454b      	cmp	r3, r9
 8009f52:	dc01      	bgt.n	8009f58 <_printf_float+0x2c0>
 8009f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f56:	e792      	b.n	8009e7e <_printf_float+0x1e6>
 8009f58:	2301      	movs	r3, #1
 8009f5a:	4652      	mov	r2, sl
 8009f5c:	4631      	mov	r1, r6
 8009f5e:	4628      	mov	r0, r5
 8009f60:	47b8      	blx	r7
 8009f62:	3001      	adds	r0, #1
 8009f64:	f43f aef7 	beq.w	8009d56 <_printf_float+0xbe>
 8009f68:	f109 0901 	add.w	r9, r9, #1
 8009f6c:	e7ee      	b.n	8009f4c <_printf_float+0x2b4>
 8009f6e:	bf00      	nop
 8009f70:	7fefffff 	.word	0x7fefffff
 8009f74:	0800ddf1 	.word	0x0800ddf1
 8009f78:	0800ddf5 	.word	0x0800ddf5
 8009f7c:	0800ddf9 	.word	0x0800ddf9
 8009f80:	0800ddfd 	.word	0x0800ddfd
 8009f84:	0800de01 	.word	0x0800de01
 8009f88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	bfa8      	it	ge
 8009f90:	461a      	movge	r2, r3
 8009f92:	2a00      	cmp	r2, #0
 8009f94:	4691      	mov	r9, r2
 8009f96:	dc37      	bgt.n	800a008 <_printf_float+0x370>
 8009f98:	f04f 0b00 	mov.w	fp, #0
 8009f9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fa0:	f104 021a 	add.w	r2, r4, #26
 8009fa4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fa6:	9305      	str	r3, [sp, #20]
 8009fa8:	eba3 0309 	sub.w	r3, r3, r9
 8009fac:	455b      	cmp	r3, fp
 8009fae:	dc33      	bgt.n	800a018 <_printf_float+0x380>
 8009fb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	db3b      	blt.n	800a030 <_printf_float+0x398>
 8009fb8:	6823      	ldr	r3, [r4, #0]
 8009fba:	07da      	lsls	r2, r3, #31
 8009fbc:	d438      	bmi.n	800a030 <_printf_float+0x398>
 8009fbe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009fc2:	eba2 0903 	sub.w	r9, r2, r3
 8009fc6:	9b05      	ldr	r3, [sp, #20]
 8009fc8:	1ad2      	subs	r2, r2, r3
 8009fca:	4591      	cmp	r9, r2
 8009fcc:	bfa8      	it	ge
 8009fce:	4691      	movge	r9, r2
 8009fd0:	f1b9 0f00 	cmp.w	r9, #0
 8009fd4:	dc35      	bgt.n	800a042 <_printf_float+0x3aa>
 8009fd6:	f04f 0800 	mov.w	r8, #0
 8009fda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fde:	f104 0a1a 	add.w	sl, r4, #26
 8009fe2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fe6:	1a9b      	subs	r3, r3, r2
 8009fe8:	eba3 0309 	sub.w	r3, r3, r9
 8009fec:	4543      	cmp	r3, r8
 8009fee:	f77f af79 	ble.w	8009ee4 <_printf_float+0x24c>
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	4652      	mov	r2, sl
 8009ff6:	4631      	mov	r1, r6
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	47b8      	blx	r7
 8009ffc:	3001      	adds	r0, #1
 8009ffe:	f43f aeaa 	beq.w	8009d56 <_printf_float+0xbe>
 800a002:	f108 0801 	add.w	r8, r8, #1
 800a006:	e7ec      	b.n	8009fe2 <_printf_float+0x34a>
 800a008:	4613      	mov	r3, r2
 800a00a:	4631      	mov	r1, r6
 800a00c:	4642      	mov	r2, r8
 800a00e:	4628      	mov	r0, r5
 800a010:	47b8      	blx	r7
 800a012:	3001      	adds	r0, #1
 800a014:	d1c0      	bne.n	8009f98 <_printf_float+0x300>
 800a016:	e69e      	b.n	8009d56 <_printf_float+0xbe>
 800a018:	2301      	movs	r3, #1
 800a01a:	4631      	mov	r1, r6
 800a01c:	4628      	mov	r0, r5
 800a01e:	9205      	str	r2, [sp, #20]
 800a020:	47b8      	blx	r7
 800a022:	3001      	adds	r0, #1
 800a024:	f43f ae97 	beq.w	8009d56 <_printf_float+0xbe>
 800a028:	9a05      	ldr	r2, [sp, #20]
 800a02a:	f10b 0b01 	add.w	fp, fp, #1
 800a02e:	e7b9      	b.n	8009fa4 <_printf_float+0x30c>
 800a030:	ee18 3a10 	vmov	r3, s16
 800a034:	4652      	mov	r2, sl
 800a036:	4631      	mov	r1, r6
 800a038:	4628      	mov	r0, r5
 800a03a:	47b8      	blx	r7
 800a03c:	3001      	adds	r0, #1
 800a03e:	d1be      	bne.n	8009fbe <_printf_float+0x326>
 800a040:	e689      	b.n	8009d56 <_printf_float+0xbe>
 800a042:	9a05      	ldr	r2, [sp, #20]
 800a044:	464b      	mov	r3, r9
 800a046:	4442      	add	r2, r8
 800a048:	4631      	mov	r1, r6
 800a04a:	4628      	mov	r0, r5
 800a04c:	47b8      	blx	r7
 800a04e:	3001      	adds	r0, #1
 800a050:	d1c1      	bne.n	8009fd6 <_printf_float+0x33e>
 800a052:	e680      	b.n	8009d56 <_printf_float+0xbe>
 800a054:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a056:	2a01      	cmp	r2, #1
 800a058:	dc01      	bgt.n	800a05e <_printf_float+0x3c6>
 800a05a:	07db      	lsls	r3, r3, #31
 800a05c:	d53a      	bpl.n	800a0d4 <_printf_float+0x43c>
 800a05e:	2301      	movs	r3, #1
 800a060:	4642      	mov	r2, r8
 800a062:	4631      	mov	r1, r6
 800a064:	4628      	mov	r0, r5
 800a066:	47b8      	blx	r7
 800a068:	3001      	adds	r0, #1
 800a06a:	f43f ae74 	beq.w	8009d56 <_printf_float+0xbe>
 800a06e:	ee18 3a10 	vmov	r3, s16
 800a072:	4652      	mov	r2, sl
 800a074:	4631      	mov	r1, r6
 800a076:	4628      	mov	r0, r5
 800a078:	47b8      	blx	r7
 800a07a:	3001      	adds	r0, #1
 800a07c:	f43f ae6b 	beq.w	8009d56 <_printf_float+0xbe>
 800a080:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a084:	2200      	movs	r2, #0
 800a086:	2300      	movs	r3, #0
 800a088:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a08c:	f7f6 fd24 	bl	8000ad8 <__aeabi_dcmpeq>
 800a090:	b9d8      	cbnz	r0, 800a0ca <_printf_float+0x432>
 800a092:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a096:	f108 0201 	add.w	r2, r8, #1
 800a09a:	4631      	mov	r1, r6
 800a09c:	4628      	mov	r0, r5
 800a09e:	47b8      	blx	r7
 800a0a0:	3001      	adds	r0, #1
 800a0a2:	d10e      	bne.n	800a0c2 <_printf_float+0x42a>
 800a0a4:	e657      	b.n	8009d56 <_printf_float+0xbe>
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	4652      	mov	r2, sl
 800a0aa:	4631      	mov	r1, r6
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	47b8      	blx	r7
 800a0b0:	3001      	adds	r0, #1
 800a0b2:	f43f ae50 	beq.w	8009d56 <_printf_float+0xbe>
 800a0b6:	f108 0801 	add.w	r8, r8, #1
 800a0ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	4543      	cmp	r3, r8
 800a0c0:	dcf1      	bgt.n	800a0a6 <_printf_float+0x40e>
 800a0c2:	464b      	mov	r3, r9
 800a0c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a0c8:	e6da      	b.n	8009e80 <_printf_float+0x1e8>
 800a0ca:	f04f 0800 	mov.w	r8, #0
 800a0ce:	f104 0a1a 	add.w	sl, r4, #26
 800a0d2:	e7f2      	b.n	800a0ba <_printf_float+0x422>
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	4642      	mov	r2, r8
 800a0d8:	e7df      	b.n	800a09a <_printf_float+0x402>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	464a      	mov	r2, r9
 800a0de:	4631      	mov	r1, r6
 800a0e0:	4628      	mov	r0, r5
 800a0e2:	47b8      	blx	r7
 800a0e4:	3001      	adds	r0, #1
 800a0e6:	f43f ae36 	beq.w	8009d56 <_printf_float+0xbe>
 800a0ea:	f108 0801 	add.w	r8, r8, #1
 800a0ee:	68e3      	ldr	r3, [r4, #12]
 800a0f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a0f2:	1a5b      	subs	r3, r3, r1
 800a0f4:	4543      	cmp	r3, r8
 800a0f6:	dcf0      	bgt.n	800a0da <_printf_float+0x442>
 800a0f8:	e6f8      	b.n	8009eec <_printf_float+0x254>
 800a0fa:	f04f 0800 	mov.w	r8, #0
 800a0fe:	f104 0919 	add.w	r9, r4, #25
 800a102:	e7f4      	b.n	800a0ee <_printf_float+0x456>

0800a104 <_printf_common>:
 800a104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a108:	4616      	mov	r6, r2
 800a10a:	4699      	mov	r9, r3
 800a10c:	688a      	ldr	r2, [r1, #8]
 800a10e:	690b      	ldr	r3, [r1, #16]
 800a110:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a114:	4293      	cmp	r3, r2
 800a116:	bfb8      	it	lt
 800a118:	4613      	movlt	r3, r2
 800a11a:	6033      	str	r3, [r6, #0]
 800a11c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a120:	4607      	mov	r7, r0
 800a122:	460c      	mov	r4, r1
 800a124:	b10a      	cbz	r2, 800a12a <_printf_common+0x26>
 800a126:	3301      	adds	r3, #1
 800a128:	6033      	str	r3, [r6, #0]
 800a12a:	6823      	ldr	r3, [r4, #0]
 800a12c:	0699      	lsls	r1, r3, #26
 800a12e:	bf42      	ittt	mi
 800a130:	6833      	ldrmi	r3, [r6, #0]
 800a132:	3302      	addmi	r3, #2
 800a134:	6033      	strmi	r3, [r6, #0]
 800a136:	6825      	ldr	r5, [r4, #0]
 800a138:	f015 0506 	ands.w	r5, r5, #6
 800a13c:	d106      	bne.n	800a14c <_printf_common+0x48>
 800a13e:	f104 0a19 	add.w	sl, r4, #25
 800a142:	68e3      	ldr	r3, [r4, #12]
 800a144:	6832      	ldr	r2, [r6, #0]
 800a146:	1a9b      	subs	r3, r3, r2
 800a148:	42ab      	cmp	r3, r5
 800a14a:	dc26      	bgt.n	800a19a <_printf_common+0x96>
 800a14c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a150:	1e13      	subs	r3, r2, #0
 800a152:	6822      	ldr	r2, [r4, #0]
 800a154:	bf18      	it	ne
 800a156:	2301      	movne	r3, #1
 800a158:	0692      	lsls	r2, r2, #26
 800a15a:	d42b      	bmi.n	800a1b4 <_printf_common+0xb0>
 800a15c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a160:	4649      	mov	r1, r9
 800a162:	4638      	mov	r0, r7
 800a164:	47c0      	blx	r8
 800a166:	3001      	adds	r0, #1
 800a168:	d01e      	beq.n	800a1a8 <_printf_common+0xa4>
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	6922      	ldr	r2, [r4, #16]
 800a16e:	f003 0306 	and.w	r3, r3, #6
 800a172:	2b04      	cmp	r3, #4
 800a174:	bf02      	ittt	eq
 800a176:	68e5      	ldreq	r5, [r4, #12]
 800a178:	6833      	ldreq	r3, [r6, #0]
 800a17a:	1aed      	subeq	r5, r5, r3
 800a17c:	68a3      	ldr	r3, [r4, #8]
 800a17e:	bf0c      	ite	eq
 800a180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a184:	2500      	movne	r5, #0
 800a186:	4293      	cmp	r3, r2
 800a188:	bfc4      	itt	gt
 800a18a:	1a9b      	subgt	r3, r3, r2
 800a18c:	18ed      	addgt	r5, r5, r3
 800a18e:	2600      	movs	r6, #0
 800a190:	341a      	adds	r4, #26
 800a192:	42b5      	cmp	r5, r6
 800a194:	d11a      	bne.n	800a1cc <_printf_common+0xc8>
 800a196:	2000      	movs	r0, #0
 800a198:	e008      	b.n	800a1ac <_printf_common+0xa8>
 800a19a:	2301      	movs	r3, #1
 800a19c:	4652      	mov	r2, sl
 800a19e:	4649      	mov	r1, r9
 800a1a0:	4638      	mov	r0, r7
 800a1a2:	47c0      	blx	r8
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	d103      	bne.n	800a1b0 <_printf_common+0xac>
 800a1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1b0:	3501      	adds	r5, #1
 800a1b2:	e7c6      	b.n	800a142 <_printf_common+0x3e>
 800a1b4:	18e1      	adds	r1, r4, r3
 800a1b6:	1c5a      	adds	r2, r3, #1
 800a1b8:	2030      	movs	r0, #48	; 0x30
 800a1ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1be:	4422      	add	r2, r4
 800a1c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1c8:	3302      	adds	r3, #2
 800a1ca:	e7c7      	b.n	800a15c <_printf_common+0x58>
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	4622      	mov	r2, r4
 800a1d0:	4649      	mov	r1, r9
 800a1d2:	4638      	mov	r0, r7
 800a1d4:	47c0      	blx	r8
 800a1d6:	3001      	adds	r0, #1
 800a1d8:	d0e6      	beq.n	800a1a8 <_printf_common+0xa4>
 800a1da:	3601      	adds	r6, #1
 800a1dc:	e7d9      	b.n	800a192 <_printf_common+0x8e>
	...

0800a1e0 <_printf_i>:
 800a1e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1e4:	7e0f      	ldrb	r7, [r1, #24]
 800a1e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a1e8:	2f78      	cmp	r7, #120	; 0x78
 800a1ea:	4691      	mov	r9, r2
 800a1ec:	4680      	mov	r8, r0
 800a1ee:	460c      	mov	r4, r1
 800a1f0:	469a      	mov	sl, r3
 800a1f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a1f6:	d807      	bhi.n	800a208 <_printf_i+0x28>
 800a1f8:	2f62      	cmp	r7, #98	; 0x62
 800a1fa:	d80a      	bhi.n	800a212 <_printf_i+0x32>
 800a1fc:	2f00      	cmp	r7, #0
 800a1fe:	f000 80d4 	beq.w	800a3aa <_printf_i+0x1ca>
 800a202:	2f58      	cmp	r7, #88	; 0x58
 800a204:	f000 80c0 	beq.w	800a388 <_printf_i+0x1a8>
 800a208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a20c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a210:	e03a      	b.n	800a288 <_printf_i+0xa8>
 800a212:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a216:	2b15      	cmp	r3, #21
 800a218:	d8f6      	bhi.n	800a208 <_printf_i+0x28>
 800a21a:	a101      	add	r1, pc, #4	; (adr r1, 800a220 <_printf_i+0x40>)
 800a21c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a220:	0800a279 	.word	0x0800a279
 800a224:	0800a28d 	.word	0x0800a28d
 800a228:	0800a209 	.word	0x0800a209
 800a22c:	0800a209 	.word	0x0800a209
 800a230:	0800a209 	.word	0x0800a209
 800a234:	0800a209 	.word	0x0800a209
 800a238:	0800a28d 	.word	0x0800a28d
 800a23c:	0800a209 	.word	0x0800a209
 800a240:	0800a209 	.word	0x0800a209
 800a244:	0800a209 	.word	0x0800a209
 800a248:	0800a209 	.word	0x0800a209
 800a24c:	0800a391 	.word	0x0800a391
 800a250:	0800a2b9 	.word	0x0800a2b9
 800a254:	0800a34b 	.word	0x0800a34b
 800a258:	0800a209 	.word	0x0800a209
 800a25c:	0800a209 	.word	0x0800a209
 800a260:	0800a3b3 	.word	0x0800a3b3
 800a264:	0800a209 	.word	0x0800a209
 800a268:	0800a2b9 	.word	0x0800a2b9
 800a26c:	0800a209 	.word	0x0800a209
 800a270:	0800a209 	.word	0x0800a209
 800a274:	0800a353 	.word	0x0800a353
 800a278:	682b      	ldr	r3, [r5, #0]
 800a27a:	1d1a      	adds	r2, r3, #4
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	602a      	str	r2, [r5, #0]
 800a280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a288:	2301      	movs	r3, #1
 800a28a:	e09f      	b.n	800a3cc <_printf_i+0x1ec>
 800a28c:	6820      	ldr	r0, [r4, #0]
 800a28e:	682b      	ldr	r3, [r5, #0]
 800a290:	0607      	lsls	r7, r0, #24
 800a292:	f103 0104 	add.w	r1, r3, #4
 800a296:	6029      	str	r1, [r5, #0]
 800a298:	d501      	bpl.n	800a29e <_printf_i+0xbe>
 800a29a:	681e      	ldr	r6, [r3, #0]
 800a29c:	e003      	b.n	800a2a6 <_printf_i+0xc6>
 800a29e:	0646      	lsls	r6, r0, #25
 800a2a0:	d5fb      	bpl.n	800a29a <_printf_i+0xba>
 800a2a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a2a6:	2e00      	cmp	r6, #0
 800a2a8:	da03      	bge.n	800a2b2 <_printf_i+0xd2>
 800a2aa:	232d      	movs	r3, #45	; 0x2d
 800a2ac:	4276      	negs	r6, r6
 800a2ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2b2:	485a      	ldr	r0, [pc, #360]	; (800a41c <_printf_i+0x23c>)
 800a2b4:	230a      	movs	r3, #10
 800a2b6:	e012      	b.n	800a2de <_printf_i+0xfe>
 800a2b8:	682b      	ldr	r3, [r5, #0]
 800a2ba:	6820      	ldr	r0, [r4, #0]
 800a2bc:	1d19      	adds	r1, r3, #4
 800a2be:	6029      	str	r1, [r5, #0]
 800a2c0:	0605      	lsls	r5, r0, #24
 800a2c2:	d501      	bpl.n	800a2c8 <_printf_i+0xe8>
 800a2c4:	681e      	ldr	r6, [r3, #0]
 800a2c6:	e002      	b.n	800a2ce <_printf_i+0xee>
 800a2c8:	0641      	lsls	r1, r0, #25
 800a2ca:	d5fb      	bpl.n	800a2c4 <_printf_i+0xe4>
 800a2cc:	881e      	ldrh	r6, [r3, #0]
 800a2ce:	4853      	ldr	r0, [pc, #332]	; (800a41c <_printf_i+0x23c>)
 800a2d0:	2f6f      	cmp	r7, #111	; 0x6f
 800a2d2:	bf0c      	ite	eq
 800a2d4:	2308      	moveq	r3, #8
 800a2d6:	230a      	movne	r3, #10
 800a2d8:	2100      	movs	r1, #0
 800a2da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2de:	6865      	ldr	r5, [r4, #4]
 800a2e0:	60a5      	str	r5, [r4, #8]
 800a2e2:	2d00      	cmp	r5, #0
 800a2e4:	bfa2      	ittt	ge
 800a2e6:	6821      	ldrge	r1, [r4, #0]
 800a2e8:	f021 0104 	bicge.w	r1, r1, #4
 800a2ec:	6021      	strge	r1, [r4, #0]
 800a2ee:	b90e      	cbnz	r6, 800a2f4 <_printf_i+0x114>
 800a2f0:	2d00      	cmp	r5, #0
 800a2f2:	d04b      	beq.n	800a38c <_printf_i+0x1ac>
 800a2f4:	4615      	mov	r5, r2
 800a2f6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a2fa:	fb03 6711 	mls	r7, r3, r1, r6
 800a2fe:	5dc7      	ldrb	r7, [r0, r7]
 800a300:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a304:	4637      	mov	r7, r6
 800a306:	42bb      	cmp	r3, r7
 800a308:	460e      	mov	r6, r1
 800a30a:	d9f4      	bls.n	800a2f6 <_printf_i+0x116>
 800a30c:	2b08      	cmp	r3, #8
 800a30e:	d10b      	bne.n	800a328 <_printf_i+0x148>
 800a310:	6823      	ldr	r3, [r4, #0]
 800a312:	07de      	lsls	r6, r3, #31
 800a314:	d508      	bpl.n	800a328 <_printf_i+0x148>
 800a316:	6923      	ldr	r3, [r4, #16]
 800a318:	6861      	ldr	r1, [r4, #4]
 800a31a:	4299      	cmp	r1, r3
 800a31c:	bfde      	ittt	le
 800a31e:	2330      	movle	r3, #48	; 0x30
 800a320:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a324:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a328:	1b52      	subs	r2, r2, r5
 800a32a:	6122      	str	r2, [r4, #16]
 800a32c:	f8cd a000 	str.w	sl, [sp]
 800a330:	464b      	mov	r3, r9
 800a332:	aa03      	add	r2, sp, #12
 800a334:	4621      	mov	r1, r4
 800a336:	4640      	mov	r0, r8
 800a338:	f7ff fee4 	bl	800a104 <_printf_common>
 800a33c:	3001      	adds	r0, #1
 800a33e:	d14a      	bne.n	800a3d6 <_printf_i+0x1f6>
 800a340:	f04f 30ff 	mov.w	r0, #4294967295
 800a344:	b004      	add	sp, #16
 800a346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a34a:	6823      	ldr	r3, [r4, #0]
 800a34c:	f043 0320 	orr.w	r3, r3, #32
 800a350:	6023      	str	r3, [r4, #0]
 800a352:	4833      	ldr	r0, [pc, #204]	; (800a420 <_printf_i+0x240>)
 800a354:	2778      	movs	r7, #120	; 0x78
 800a356:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a35a:	6823      	ldr	r3, [r4, #0]
 800a35c:	6829      	ldr	r1, [r5, #0]
 800a35e:	061f      	lsls	r7, r3, #24
 800a360:	f851 6b04 	ldr.w	r6, [r1], #4
 800a364:	d402      	bmi.n	800a36c <_printf_i+0x18c>
 800a366:	065f      	lsls	r7, r3, #25
 800a368:	bf48      	it	mi
 800a36a:	b2b6      	uxthmi	r6, r6
 800a36c:	07df      	lsls	r7, r3, #31
 800a36e:	bf48      	it	mi
 800a370:	f043 0320 	orrmi.w	r3, r3, #32
 800a374:	6029      	str	r1, [r5, #0]
 800a376:	bf48      	it	mi
 800a378:	6023      	strmi	r3, [r4, #0]
 800a37a:	b91e      	cbnz	r6, 800a384 <_printf_i+0x1a4>
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	f023 0320 	bic.w	r3, r3, #32
 800a382:	6023      	str	r3, [r4, #0]
 800a384:	2310      	movs	r3, #16
 800a386:	e7a7      	b.n	800a2d8 <_printf_i+0xf8>
 800a388:	4824      	ldr	r0, [pc, #144]	; (800a41c <_printf_i+0x23c>)
 800a38a:	e7e4      	b.n	800a356 <_printf_i+0x176>
 800a38c:	4615      	mov	r5, r2
 800a38e:	e7bd      	b.n	800a30c <_printf_i+0x12c>
 800a390:	682b      	ldr	r3, [r5, #0]
 800a392:	6826      	ldr	r6, [r4, #0]
 800a394:	6961      	ldr	r1, [r4, #20]
 800a396:	1d18      	adds	r0, r3, #4
 800a398:	6028      	str	r0, [r5, #0]
 800a39a:	0635      	lsls	r5, r6, #24
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	d501      	bpl.n	800a3a4 <_printf_i+0x1c4>
 800a3a0:	6019      	str	r1, [r3, #0]
 800a3a2:	e002      	b.n	800a3aa <_printf_i+0x1ca>
 800a3a4:	0670      	lsls	r0, r6, #25
 800a3a6:	d5fb      	bpl.n	800a3a0 <_printf_i+0x1c0>
 800a3a8:	8019      	strh	r1, [r3, #0]
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	6123      	str	r3, [r4, #16]
 800a3ae:	4615      	mov	r5, r2
 800a3b0:	e7bc      	b.n	800a32c <_printf_i+0x14c>
 800a3b2:	682b      	ldr	r3, [r5, #0]
 800a3b4:	1d1a      	adds	r2, r3, #4
 800a3b6:	602a      	str	r2, [r5, #0]
 800a3b8:	681d      	ldr	r5, [r3, #0]
 800a3ba:	6862      	ldr	r2, [r4, #4]
 800a3bc:	2100      	movs	r1, #0
 800a3be:	4628      	mov	r0, r5
 800a3c0:	f7f5 ff0e 	bl	80001e0 <memchr>
 800a3c4:	b108      	cbz	r0, 800a3ca <_printf_i+0x1ea>
 800a3c6:	1b40      	subs	r0, r0, r5
 800a3c8:	6060      	str	r0, [r4, #4]
 800a3ca:	6863      	ldr	r3, [r4, #4]
 800a3cc:	6123      	str	r3, [r4, #16]
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3d4:	e7aa      	b.n	800a32c <_printf_i+0x14c>
 800a3d6:	6923      	ldr	r3, [r4, #16]
 800a3d8:	462a      	mov	r2, r5
 800a3da:	4649      	mov	r1, r9
 800a3dc:	4640      	mov	r0, r8
 800a3de:	47d0      	blx	sl
 800a3e0:	3001      	adds	r0, #1
 800a3e2:	d0ad      	beq.n	800a340 <_printf_i+0x160>
 800a3e4:	6823      	ldr	r3, [r4, #0]
 800a3e6:	079b      	lsls	r3, r3, #30
 800a3e8:	d413      	bmi.n	800a412 <_printf_i+0x232>
 800a3ea:	68e0      	ldr	r0, [r4, #12]
 800a3ec:	9b03      	ldr	r3, [sp, #12]
 800a3ee:	4298      	cmp	r0, r3
 800a3f0:	bfb8      	it	lt
 800a3f2:	4618      	movlt	r0, r3
 800a3f4:	e7a6      	b.n	800a344 <_printf_i+0x164>
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	4632      	mov	r2, r6
 800a3fa:	4649      	mov	r1, r9
 800a3fc:	4640      	mov	r0, r8
 800a3fe:	47d0      	blx	sl
 800a400:	3001      	adds	r0, #1
 800a402:	d09d      	beq.n	800a340 <_printf_i+0x160>
 800a404:	3501      	adds	r5, #1
 800a406:	68e3      	ldr	r3, [r4, #12]
 800a408:	9903      	ldr	r1, [sp, #12]
 800a40a:	1a5b      	subs	r3, r3, r1
 800a40c:	42ab      	cmp	r3, r5
 800a40e:	dcf2      	bgt.n	800a3f6 <_printf_i+0x216>
 800a410:	e7eb      	b.n	800a3ea <_printf_i+0x20a>
 800a412:	2500      	movs	r5, #0
 800a414:	f104 0619 	add.w	r6, r4, #25
 800a418:	e7f5      	b.n	800a406 <_printf_i+0x226>
 800a41a:	bf00      	nop
 800a41c:	0800de03 	.word	0x0800de03
 800a420:	0800de14 	.word	0x0800de14

0800a424 <_scanf_float>:
 800a424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a428:	b087      	sub	sp, #28
 800a42a:	4617      	mov	r7, r2
 800a42c:	9303      	str	r3, [sp, #12]
 800a42e:	688b      	ldr	r3, [r1, #8]
 800a430:	1e5a      	subs	r2, r3, #1
 800a432:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a436:	bf83      	ittte	hi
 800a438:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a43c:	195b      	addhi	r3, r3, r5
 800a43e:	9302      	strhi	r3, [sp, #8]
 800a440:	2300      	movls	r3, #0
 800a442:	bf86      	itte	hi
 800a444:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a448:	608b      	strhi	r3, [r1, #8]
 800a44a:	9302      	strls	r3, [sp, #8]
 800a44c:	680b      	ldr	r3, [r1, #0]
 800a44e:	468b      	mov	fp, r1
 800a450:	2500      	movs	r5, #0
 800a452:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a456:	f84b 3b1c 	str.w	r3, [fp], #28
 800a45a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a45e:	4680      	mov	r8, r0
 800a460:	460c      	mov	r4, r1
 800a462:	465e      	mov	r6, fp
 800a464:	46aa      	mov	sl, r5
 800a466:	46a9      	mov	r9, r5
 800a468:	9501      	str	r5, [sp, #4]
 800a46a:	68a2      	ldr	r2, [r4, #8]
 800a46c:	b152      	cbz	r2, 800a484 <_scanf_float+0x60>
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	2b4e      	cmp	r3, #78	; 0x4e
 800a474:	d864      	bhi.n	800a540 <_scanf_float+0x11c>
 800a476:	2b40      	cmp	r3, #64	; 0x40
 800a478:	d83c      	bhi.n	800a4f4 <_scanf_float+0xd0>
 800a47a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a47e:	b2c8      	uxtb	r0, r1
 800a480:	280e      	cmp	r0, #14
 800a482:	d93a      	bls.n	800a4fa <_scanf_float+0xd6>
 800a484:	f1b9 0f00 	cmp.w	r9, #0
 800a488:	d003      	beq.n	800a492 <_scanf_float+0x6e>
 800a48a:	6823      	ldr	r3, [r4, #0]
 800a48c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a490:	6023      	str	r3, [r4, #0]
 800a492:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a496:	f1ba 0f01 	cmp.w	sl, #1
 800a49a:	f200 8113 	bhi.w	800a6c4 <_scanf_float+0x2a0>
 800a49e:	455e      	cmp	r6, fp
 800a4a0:	f200 8105 	bhi.w	800a6ae <_scanf_float+0x28a>
 800a4a4:	2501      	movs	r5, #1
 800a4a6:	4628      	mov	r0, r5
 800a4a8:	b007      	add	sp, #28
 800a4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a4b2:	2a0d      	cmp	r2, #13
 800a4b4:	d8e6      	bhi.n	800a484 <_scanf_float+0x60>
 800a4b6:	a101      	add	r1, pc, #4	; (adr r1, 800a4bc <_scanf_float+0x98>)
 800a4b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a4bc:	0800a5fb 	.word	0x0800a5fb
 800a4c0:	0800a485 	.word	0x0800a485
 800a4c4:	0800a485 	.word	0x0800a485
 800a4c8:	0800a485 	.word	0x0800a485
 800a4cc:	0800a65b 	.word	0x0800a65b
 800a4d0:	0800a633 	.word	0x0800a633
 800a4d4:	0800a485 	.word	0x0800a485
 800a4d8:	0800a485 	.word	0x0800a485
 800a4dc:	0800a609 	.word	0x0800a609
 800a4e0:	0800a485 	.word	0x0800a485
 800a4e4:	0800a485 	.word	0x0800a485
 800a4e8:	0800a485 	.word	0x0800a485
 800a4ec:	0800a485 	.word	0x0800a485
 800a4f0:	0800a5c1 	.word	0x0800a5c1
 800a4f4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a4f8:	e7db      	b.n	800a4b2 <_scanf_float+0x8e>
 800a4fa:	290e      	cmp	r1, #14
 800a4fc:	d8c2      	bhi.n	800a484 <_scanf_float+0x60>
 800a4fe:	a001      	add	r0, pc, #4	; (adr r0, 800a504 <_scanf_float+0xe0>)
 800a500:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a504:	0800a5b3 	.word	0x0800a5b3
 800a508:	0800a485 	.word	0x0800a485
 800a50c:	0800a5b3 	.word	0x0800a5b3
 800a510:	0800a647 	.word	0x0800a647
 800a514:	0800a485 	.word	0x0800a485
 800a518:	0800a561 	.word	0x0800a561
 800a51c:	0800a59d 	.word	0x0800a59d
 800a520:	0800a59d 	.word	0x0800a59d
 800a524:	0800a59d 	.word	0x0800a59d
 800a528:	0800a59d 	.word	0x0800a59d
 800a52c:	0800a59d 	.word	0x0800a59d
 800a530:	0800a59d 	.word	0x0800a59d
 800a534:	0800a59d 	.word	0x0800a59d
 800a538:	0800a59d 	.word	0x0800a59d
 800a53c:	0800a59d 	.word	0x0800a59d
 800a540:	2b6e      	cmp	r3, #110	; 0x6e
 800a542:	d809      	bhi.n	800a558 <_scanf_float+0x134>
 800a544:	2b60      	cmp	r3, #96	; 0x60
 800a546:	d8b2      	bhi.n	800a4ae <_scanf_float+0x8a>
 800a548:	2b54      	cmp	r3, #84	; 0x54
 800a54a:	d077      	beq.n	800a63c <_scanf_float+0x218>
 800a54c:	2b59      	cmp	r3, #89	; 0x59
 800a54e:	d199      	bne.n	800a484 <_scanf_float+0x60>
 800a550:	2d07      	cmp	r5, #7
 800a552:	d197      	bne.n	800a484 <_scanf_float+0x60>
 800a554:	2508      	movs	r5, #8
 800a556:	e029      	b.n	800a5ac <_scanf_float+0x188>
 800a558:	2b74      	cmp	r3, #116	; 0x74
 800a55a:	d06f      	beq.n	800a63c <_scanf_float+0x218>
 800a55c:	2b79      	cmp	r3, #121	; 0x79
 800a55e:	e7f6      	b.n	800a54e <_scanf_float+0x12a>
 800a560:	6821      	ldr	r1, [r4, #0]
 800a562:	05c8      	lsls	r0, r1, #23
 800a564:	d51a      	bpl.n	800a59c <_scanf_float+0x178>
 800a566:	9b02      	ldr	r3, [sp, #8]
 800a568:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a56c:	6021      	str	r1, [r4, #0]
 800a56e:	f109 0901 	add.w	r9, r9, #1
 800a572:	b11b      	cbz	r3, 800a57c <_scanf_float+0x158>
 800a574:	3b01      	subs	r3, #1
 800a576:	3201      	adds	r2, #1
 800a578:	9302      	str	r3, [sp, #8]
 800a57a:	60a2      	str	r2, [r4, #8]
 800a57c:	68a3      	ldr	r3, [r4, #8]
 800a57e:	3b01      	subs	r3, #1
 800a580:	60a3      	str	r3, [r4, #8]
 800a582:	6923      	ldr	r3, [r4, #16]
 800a584:	3301      	adds	r3, #1
 800a586:	6123      	str	r3, [r4, #16]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	3b01      	subs	r3, #1
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	607b      	str	r3, [r7, #4]
 800a590:	f340 8084 	ble.w	800a69c <_scanf_float+0x278>
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	3301      	adds	r3, #1
 800a598:	603b      	str	r3, [r7, #0]
 800a59a:	e766      	b.n	800a46a <_scanf_float+0x46>
 800a59c:	eb1a 0f05 	cmn.w	sl, r5
 800a5a0:	f47f af70 	bne.w	800a484 <_scanf_float+0x60>
 800a5a4:	6822      	ldr	r2, [r4, #0]
 800a5a6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a5aa:	6022      	str	r2, [r4, #0]
 800a5ac:	f806 3b01 	strb.w	r3, [r6], #1
 800a5b0:	e7e4      	b.n	800a57c <_scanf_float+0x158>
 800a5b2:	6822      	ldr	r2, [r4, #0]
 800a5b4:	0610      	lsls	r0, r2, #24
 800a5b6:	f57f af65 	bpl.w	800a484 <_scanf_float+0x60>
 800a5ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5be:	e7f4      	b.n	800a5aa <_scanf_float+0x186>
 800a5c0:	f1ba 0f00 	cmp.w	sl, #0
 800a5c4:	d10e      	bne.n	800a5e4 <_scanf_float+0x1c0>
 800a5c6:	f1b9 0f00 	cmp.w	r9, #0
 800a5ca:	d10e      	bne.n	800a5ea <_scanf_float+0x1c6>
 800a5cc:	6822      	ldr	r2, [r4, #0]
 800a5ce:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a5d2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a5d6:	d108      	bne.n	800a5ea <_scanf_float+0x1c6>
 800a5d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a5dc:	6022      	str	r2, [r4, #0]
 800a5de:	f04f 0a01 	mov.w	sl, #1
 800a5e2:	e7e3      	b.n	800a5ac <_scanf_float+0x188>
 800a5e4:	f1ba 0f02 	cmp.w	sl, #2
 800a5e8:	d055      	beq.n	800a696 <_scanf_float+0x272>
 800a5ea:	2d01      	cmp	r5, #1
 800a5ec:	d002      	beq.n	800a5f4 <_scanf_float+0x1d0>
 800a5ee:	2d04      	cmp	r5, #4
 800a5f0:	f47f af48 	bne.w	800a484 <_scanf_float+0x60>
 800a5f4:	3501      	adds	r5, #1
 800a5f6:	b2ed      	uxtb	r5, r5
 800a5f8:	e7d8      	b.n	800a5ac <_scanf_float+0x188>
 800a5fa:	f1ba 0f01 	cmp.w	sl, #1
 800a5fe:	f47f af41 	bne.w	800a484 <_scanf_float+0x60>
 800a602:	f04f 0a02 	mov.w	sl, #2
 800a606:	e7d1      	b.n	800a5ac <_scanf_float+0x188>
 800a608:	b97d      	cbnz	r5, 800a62a <_scanf_float+0x206>
 800a60a:	f1b9 0f00 	cmp.w	r9, #0
 800a60e:	f47f af3c 	bne.w	800a48a <_scanf_float+0x66>
 800a612:	6822      	ldr	r2, [r4, #0]
 800a614:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a618:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a61c:	f47f af39 	bne.w	800a492 <_scanf_float+0x6e>
 800a620:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a624:	6022      	str	r2, [r4, #0]
 800a626:	2501      	movs	r5, #1
 800a628:	e7c0      	b.n	800a5ac <_scanf_float+0x188>
 800a62a:	2d03      	cmp	r5, #3
 800a62c:	d0e2      	beq.n	800a5f4 <_scanf_float+0x1d0>
 800a62e:	2d05      	cmp	r5, #5
 800a630:	e7de      	b.n	800a5f0 <_scanf_float+0x1cc>
 800a632:	2d02      	cmp	r5, #2
 800a634:	f47f af26 	bne.w	800a484 <_scanf_float+0x60>
 800a638:	2503      	movs	r5, #3
 800a63a:	e7b7      	b.n	800a5ac <_scanf_float+0x188>
 800a63c:	2d06      	cmp	r5, #6
 800a63e:	f47f af21 	bne.w	800a484 <_scanf_float+0x60>
 800a642:	2507      	movs	r5, #7
 800a644:	e7b2      	b.n	800a5ac <_scanf_float+0x188>
 800a646:	6822      	ldr	r2, [r4, #0]
 800a648:	0591      	lsls	r1, r2, #22
 800a64a:	f57f af1b 	bpl.w	800a484 <_scanf_float+0x60>
 800a64e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a652:	6022      	str	r2, [r4, #0]
 800a654:	f8cd 9004 	str.w	r9, [sp, #4]
 800a658:	e7a8      	b.n	800a5ac <_scanf_float+0x188>
 800a65a:	6822      	ldr	r2, [r4, #0]
 800a65c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a660:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a664:	d006      	beq.n	800a674 <_scanf_float+0x250>
 800a666:	0550      	lsls	r0, r2, #21
 800a668:	f57f af0c 	bpl.w	800a484 <_scanf_float+0x60>
 800a66c:	f1b9 0f00 	cmp.w	r9, #0
 800a670:	f43f af0f 	beq.w	800a492 <_scanf_float+0x6e>
 800a674:	0591      	lsls	r1, r2, #22
 800a676:	bf58      	it	pl
 800a678:	9901      	ldrpl	r1, [sp, #4]
 800a67a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a67e:	bf58      	it	pl
 800a680:	eba9 0101 	subpl.w	r1, r9, r1
 800a684:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a688:	bf58      	it	pl
 800a68a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a68e:	6022      	str	r2, [r4, #0]
 800a690:	f04f 0900 	mov.w	r9, #0
 800a694:	e78a      	b.n	800a5ac <_scanf_float+0x188>
 800a696:	f04f 0a03 	mov.w	sl, #3
 800a69a:	e787      	b.n	800a5ac <_scanf_float+0x188>
 800a69c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a6a0:	4639      	mov	r1, r7
 800a6a2:	4640      	mov	r0, r8
 800a6a4:	4798      	blx	r3
 800a6a6:	2800      	cmp	r0, #0
 800a6a8:	f43f aedf 	beq.w	800a46a <_scanf_float+0x46>
 800a6ac:	e6ea      	b.n	800a484 <_scanf_float+0x60>
 800a6ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a6b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a6b6:	463a      	mov	r2, r7
 800a6b8:	4640      	mov	r0, r8
 800a6ba:	4798      	blx	r3
 800a6bc:	6923      	ldr	r3, [r4, #16]
 800a6be:	3b01      	subs	r3, #1
 800a6c0:	6123      	str	r3, [r4, #16]
 800a6c2:	e6ec      	b.n	800a49e <_scanf_float+0x7a>
 800a6c4:	1e6b      	subs	r3, r5, #1
 800a6c6:	2b06      	cmp	r3, #6
 800a6c8:	d825      	bhi.n	800a716 <_scanf_float+0x2f2>
 800a6ca:	2d02      	cmp	r5, #2
 800a6cc:	d836      	bhi.n	800a73c <_scanf_float+0x318>
 800a6ce:	455e      	cmp	r6, fp
 800a6d0:	f67f aee8 	bls.w	800a4a4 <_scanf_float+0x80>
 800a6d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a6d8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a6dc:	463a      	mov	r2, r7
 800a6de:	4640      	mov	r0, r8
 800a6e0:	4798      	blx	r3
 800a6e2:	6923      	ldr	r3, [r4, #16]
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	6123      	str	r3, [r4, #16]
 800a6e8:	e7f1      	b.n	800a6ce <_scanf_float+0x2aa>
 800a6ea:	9802      	ldr	r0, [sp, #8]
 800a6ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a6f0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a6f4:	9002      	str	r0, [sp, #8]
 800a6f6:	463a      	mov	r2, r7
 800a6f8:	4640      	mov	r0, r8
 800a6fa:	4798      	blx	r3
 800a6fc:	6923      	ldr	r3, [r4, #16]
 800a6fe:	3b01      	subs	r3, #1
 800a700:	6123      	str	r3, [r4, #16]
 800a702:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a706:	fa5f fa8a 	uxtb.w	sl, sl
 800a70a:	f1ba 0f02 	cmp.w	sl, #2
 800a70e:	d1ec      	bne.n	800a6ea <_scanf_float+0x2c6>
 800a710:	3d03      	subs	r5, #3
 800a712:	b2ed      	uxtb	r5, r5
 800a714:	1b76      	subs	r6, r6, r5
 800a716:	6823      	ldr	r3, [r4, #0]
 800a718:	05da      	lsls	r2, r3, #23
 800a71a:	d52f      	bpl.n	800a77c <_scanf_float+0x358>
 800a71c:	055b      	lsls	r3, r3, #21
 800a71e:	d510      	bpl.n	800a742 <_scanf_float+0x31e>
 800a720:	455e      	cmp	r6, fp
 800a722:	f67f aebf 	bls.w	800a4a4 <_scanf_float+0x80>
 800a726:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a72a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a72e:	463a      	mov	r2, r7
 800a730:	4640      	mov	r0, r8
 800a732:	4798      	blx	r3
 800a734:	6923      	ldr	r3, [r4, #16]
 800a736:	3b01      	subs	r3, #1
 800a738:	6123      	str	r3, [r4, #16]
 800a73a:	e7f1      	b.n	800a720 <_scanf_float+0x2fc>
 800a73c:	46aa      	mov	sl, r5
 800a73e:	9602      	str	r6, [sp, #8]
 800a740:	e7df      	b.n	800a702 <_scanf_float+0x2de>
 800a742:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a746:	6923      	ldr	r3, [r4, #16]
 800a748:	2965      	cmp	r1, #101	; 0x65
 800a74a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a74e:	f106 35ff 	add.w	r5, r6, #4294967295
 800a752:	6123      	str	r3, [r4, #16]
 800a754:	d00c      	beq.n	800a770 <_scanf_float+0x34c>
 800a756:	2945      	cmp	r1, #69	; 0x45
 800a758:	d00a      	beq.n	800a770 <_scanf_float+0x34c>
 800a75a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a75e:	463a      	mov	r2, r7
 800a760:	4640      	mov	r0, r8
 800a762:	4798      	blx	r3
 800a764:	6923      	ldr	r3, [r4, #16]
 800a766:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a76a:	3b01      	subs	r3, #1
 800a76c:	1eb5      	subs	r5, r6, #2
 800a76e:	6123      	str	r3, [r4, #16]
 800a770:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a774:	463a      	mov	r2, r7
 800a776:	4640      	mov	r0, r8
 800a778:	4798      	blx	r3
 800a77a:	462e      	mov	r6, r5
 800a77c:	6825      	ldr	r5, [r4, #0]
 800a77e:	f015 0510 	ands.w	r5, r5, #16
 800a782:	d158      	bne.n	800a836 <_scanf_float+0x412>
 800a784:	7035      	strb	r5, [r6, #0]
 800a786:	6823      	ldr	r3, [r4, #0]
 800a788:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a78c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a790:	d11c      	bne.n	800a7cc <_scanf_float+0x3a8>
 800a792:	9b01      	ldr	r3, [sp, #4]
 800a794:	454b      	cmp	r3, r9
 800a796:	eba3 0209 	sub.w	r2, r3, r9
 800a79a:	d124      	bne.n	800a7e6 <_scanf_float+0x3c2>
 800a79c:	2200      	movs	r2, #0
 800a79e:	4659      	mov	r1, fp
 800a7a0:	4640      	mov	r0, r8
 800a7a2:	f7ff f8d5 	bl	8009950 <_strtod_r>
 800a7a6:	9b03      	ldr	r3, [sp, #12]
 800a7a8:	6821      	ldr	r1, [r4, #0]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f011 0f02 	tst.w	r1, #2
 800a7b0:	ec57 6b10 	vmov	r6, r7, d0
 800a7b4:	f103 0204 	add.w	r2, r3, #4
 800a7b8:	d020      	beq.n	800a7fc <_scanf_float+0x3d8>
 800a7ba:	9903      	ldr	r1, [sp, #12]
 800a7bc:	600a      	str	r2, [r1, #0]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	e9c3 6700 	strd	r6, r7, [r3]
 800a7c4:	68e3      	ldr	r3, [r4, #12]
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	60e3      	str	r3, [r4, #12]
 800a7ca:	e66c      	b.n	800a4a6 <_scanf_float+0x82>
 800a7cc:	9b04      	ldr	r3, [sp, #16]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d0e4      	beq.n	800a79c <_scanf_float+0x378>
 800a7d2:	9905      	ldr	r1, [sp, #20]
 800a7d4:	230a      	movs	r3, #10
 800a7d6:	462a      	mov	r2, r5
 800a7d8:	3101      	adds	r1, #1
 800a7da:	4640      	mov	r0, r8
 800a7dc:	f7ff f9a6 	bl	8009b2c <_strtol_r>
 800a7e0:	9b04      	ldr	r3, [sp, #16]
 800a7e2:	9e05      	ldr	r6, [sp, #20]
 800a7e4:	1ac2      	subs	r2, r0, r3
 800a7e6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a7ea:	429e      	cmp	r6, r3
 800a7ec:	bf28      	it	cs
 800a7ee:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a7f2:	4912      	ldr	r1, [pc, #72]	; (800a83c <_scanf_float+0x418>)
 800a7f4:	4630      	mov	r0, r6
 800a7f6:	f000 f8e7 	bl	800a9c8 <siprintf>
 800a7fa:	e7cf      	b.n	800a79c <_scanf_float+0x378>
 800a7fc:	f011 0f04 	tst.w	r1, #4
 800a800:	9903      	ldr	r1, [sp, #12]
 800a802:	600a      	str	r2, [r1, #0]
 800a804:	d1db      	bne.n	800a7be <_scanf_float+0x39a>
 800a806:	f8d3 8000 	ldr.w	r8, [r3]
 800a80a:	ee10 2a10 	vmov	r2, s0
 800a80e:	ee10 0a10 	vmov	r0, s0
 800a812:	463b      	mov	r3, r7
 800a814:	4639      	mov	r1, r7
 800a816:	f7f6 f991 	bl	8000b3c <__aeabi_dcmpun>
 800a81a:	b128      	cbz	r0, 800a828 <_scanf_float+0x404>
 800a81c:	4808      	ldr	r0, [pc, #32]	; (800a840 <_scanf_float+0x41c>)
 800a81e:	f000 f9f3 	bl	800ac08 <nanf>
 800a822:	ed88 0a00 	vstr	s0, [r8]
 800a826:	e7cd      	b.n	800a7c4 <_scanf_float+0x3a0>
 800a828:	4630      	mov	r0, r6
 800a82a:	4639      	mov	r1, r7
 800a82c:	f7f6 f9e4 	bl	8000bf8 <__aeabi_d2f>
 800a830:	f8c8 0000 	str.w	r0, [r8]
 800a834:	e7c6      	b.n	800a7c4 <_scanf_float+0x3a0>
 800a836:	2500      	movs	r5, #0
 800a838:	e635      	b.n	800a4a6 <_scanf_float+0x82>
 800a83a:	bf00      	nop
 800a83c:	0800de25 	.word	0x0800de25
 800a840:	0800e0c0 	.word	0x0800e0c0

0800a844 <std>:
 800a844:	2300      	movs	r3, #0
 800a846:	b510      	push	{r4, lr}
 800a848:	4604      	mov	r4, r0
 800a84a:	e9c0 3300 	strd	r3, r3, [r0]
 800a84e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a852:	6083      	str	r3, [r0, #8]
 800a854:	8181      	strh	r1, [r0, #12]
 800a856:	6643      	str	r3, [r0, #100]	; 0x64
 800a858:	81c2      	strh	r2, [r0, #14]
 800a85a:	6183      	str	r3, [r0, #24]
 800a85c:	4619      	mov	r1, r3
 800a85e:	2208      	movs	r2, #8
 800a860:	305c      	adds	r0, #92	; 0x5c
 800a862:	f000 f914 	bl	800aa8e <memset>
 800a866:	4b0d      	ldr	r3, [pc, #52]	; (800a89c <std+0x58>)
 800a868:	6263      	str	r3, [r4, #36]	; 0x24
 800a86a:	4b0d      	ldr	r3, [pc, #52]	; (800a8a0 <std+0x5c>)
 800a86c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a86e:	4b0d      	ldr	r3, [pc, #52]	; (800a8a4 <std+0x60>)
 800a870:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a872:	4b0d      	ldr	r3, [pc, #52]	; (800a8a8 <std+0x64>)
 800a874:	6323      	str	r3, [r4, #48]	; 0x30
 800a876:	4b0d      	ldr	r3, [pc, #52]	; (800a8ac <std+0x68>)
 800a878:	6224      	str	r4, [r4, #32]
 800a87a:	429c      	cmp	r4, r3
 800a87c:	d006      	beq.n	800a88c <std+0x48>
 800a87e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a882:	4294      	cmp	r4, r2
 800a884:	d002      	beq.n	800a88c <std+0x48>
 800a886:	33d0      	adds	r3, #208	; 0xd0
 800a888:	429c      	cmp	r4, r3
 800a88a:	d105      	bne.n	800a898 <std+0x54>
 800a88c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a894:	f000 b99c 	b.w	800abd0 <__retarget_lock_init_recursive>
 800a898:	bd10      	pop	{r4, pc}
 800a89a:	bf00      	nop
 800a89c:	0800aa09 	.word	0x0800aa09
 800a8a0:	0800aa2b 	.word	0x0800aa2b
 800a8a4:	0800aa63 	.word	0x0800aa63
 800a8a8:	0800aa87 	.word	0x0800aa87
 800a8ac:	200007b4 	.word	0x200007b4

0800a8b0 <stdio_exit_handler>:
 800a8b0:	4a02      	ldr	r2, [pc, #8]	; (800a8bc <stdio_exit_handler+0xc>)
 800a8b2:	4903      	ldr	r1, [pc, #12]	; (800a8c0 <stdio_exit_handler+0x10>)
 800a8b4:	4803      	ldr	r0, [pc, #12]	; (800a8c4 <stdio_exit_handler+0x14>)
 800a8b6:	f000 b869 	b.w	800a98c <_fwalk_sglue>
 800a8ba:	bf00      	nop
 800a8bc:	20000078 	.word	0x20000078
 800a8c0:	0800cf11 	.word	0x0800cf11
 800a8c4:	200001f0 	.word	0x200001f0

0800a8c8 <cleanup_stdio>:
 800a8c8:	6841      	ldr	r1, [r0, #4]
 800a8ca:	4b0c      	ldr	r3, [pc, #48]	; (800a8fc <cleanup_stdio+0x34>)
 800a8cc:	4299      	cmp	r1, r3
 800a8ce:	b510      	push	{r4, lr}
 800a8d0:	4604      	mov	r4, r0
 800a8d2:	d001      	beq.n	800a8d8 <cleanup_stdio+0x10>
 800a8d4:	f002 fb1c 	bl	800cf10 <_fflush_r>
 800a8d8:	68a1      	ldr	r1, [r4, #8]
 800a8da:	4b09      	ldr	r3, [pc, #36]	; (800a900 <cleanup_stdio+0x38>)
 800a8dc:	4299      	cmp	r1, r3
 800a8de:	d002      	beq.n	800a8e6 <cleanup_stdio+0x1e>
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	f002 fb15 	bl	800cf10 <_fflush_r>
 800a8e6:	68e1      	ldr	r1, [r4, #12]
 800a8e8:	4b06      	ldr	r3, [pc, #24]	; (800a904 <cleanup_stdio+0x3c>)
 800a8ea:	4299      	cmp	r1, r3
 800a8ec:	d004      	beq.n	800a8f8 <cleanup_stdio+0x30>
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8f4:	f002 bb0c 	b.w	800cf10 <_fflush_r>
 800a8f8:	bd10      	pop	{r4, pc}
 800a8fa:	bf00      	nop
 800a8fc:	200007b4 	.word	0x200007b4
 800a900:	2000081c 	.word	0x2000081c
 800a904:	20000884 	.word	0x20000884

0800a908 <global_stdio_init.part.0>:
 800a908:	b510      	push	{r4, lr}
 800a90a:	4b0b      	ldr	r3, [pc, #44]	; (800a938 <global_stdio_init.part.0+0x30>)
 800a90c:	4c0b      	ldr	r4, [pc, #44]	; (800a93c <global_stdio_init.part.0+0x34>)
 800a90e:	4a0c      	ldr	r2, [pc, #48]	; (800a940 <global_stdio_init.part.0+0x38>)
 800a910:	601a      	str	r2, [r3, #0]
 800a912:	4620      	mov	r0, r4
 800a914:	2200      	movs	r2, #0
 800a916:	2104      	movs	r1, #4
 800a918:	f7ff ff94 	bl	800a844 <std>
 800a91c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a920:	2201      	movs	r2, #1
 800a922:	2109      	movs	r1, #9
 800a924:	f7ff ff8e 	bl	800a844 <std>
 800a928:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a92c:	2202      	movs	r2, #2
 800a92e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a932:	2112      	movs	r1, #18
 800a934:	f7ff bf86 	b.w	800a844 <std>
 800a938:	200008ec 	.word	0x200008ec
 800a93c:	200007b4 	.word	0x200007b4
 800a940:	0800a8b1 	.word	0x0800a8b1

0800a944 <__sfp_lock_acquire>:
 800a944:	4801      	ldr	r0, [pc, #4]	; (800a94c <__sfp_lock_acquire+0x8>)
 800a946:	f000 b944 	b.w	800abd2 <__retarget_lock_acquire_recursive>
 800a94a:	bf00      	nop
 800a94c:	200008f5 	.word	0x200008f5

0800a950 <__sfp_lock_release>:
 800a950:	4801      	ldr	r0, [pc, #4]	; (800a958 <__sfp_lock_release+0x8>)
 800a952:	f000 b93f 	b.w	800abd4 <__retarget_lock_release_recursive>
 800a956:	bf00      	nop
 800a958:	200008f5 	.word	0x200008f5

0800a95c <__sinit>:
 800a95c:	b510      	push	{r4, lr}
 800a95e:	4604      	mov	r4, r0
 800a960:	f7ff fff0 	bl	800a944 <__sfp_lock_acquire>
 800a964:	6a23      	ldr	r3, [r4, #32]
 800a966:	b11b      	cbz	r3, 800a970 <__sinit+0x14>
 800a968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a96c:	f7ff bff0 	b.w	800a950 <__sfp_lock_release>
 800a970:	4b04      	ldr	r3, [pc, #16]	; (800a984 <__sinit+0x28>)
 800a972:	6223      	str	r3, [r4, #32]
 800a974:	4b04      	ldr	r3, [pc, #16]	; (800a988 <__sinit+0x2c>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d1f5      	bne.n	800a968 <__sinit+0xc>
 800a97c:	f7ff ffc4 	bl	800a908 <global_stdio_init.part.0>
 800a980:	e7f2      	b.n	800a968 <__sinit+0xc>
 800a982:	bf00      	nop
 800a984:	0800a8c9 	.word	0x0800a8c9
 800a988:	200008ec 	.word	0x200008ec

0800a98c <_fwalk_sglue>:
 800a98c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a990:	4607      	mov	r7, r0
 800a992:	4688      	mov	r8, r1
 800a994:	4614      	mov	r4, r2
 800a996:	2600      	movs	r6, #0
 800a998:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a99c:	f1b9 0901 	subs.w	r9, r9, #1
 800a9a0:	d505      	bpl.n	800a9ae <_fwalk_sglue+0x22>
 800a9a2:	6824      	ldr	r4, [r4, #0]
 800a9a4:	2c00      	cmp	r4, #0
 800a9a6:	d1f7      	bne.n	800a998 <_fwalk_sglue+0xc>
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9ae:	89ab      	ldrh	r3, [r5, #12]
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d907      	bls.n	800a9c4 <_fwalk_sglue+0x38>
 800a9b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	d003      	beq.n	800a9c4 <_fwalk_sglue+0x38>
 800a9bc:	4629      	mov	r1, r5
 800a9be:	4638      	mov	r0, r7
 800a9c0:	47c0      	blx	r8
 800a9c2:	4306      	orrs	r6, r0
 800a9c4:	3568      	adds	r5, #104	; 0x68
 800a9c6:	e7e9      	b.n	800a99c <_fwalk_sglue+0x10>

0800a9c8 <siprintf>:
 800a9c8:	b40e      	push	{r1, r2, r3}
 800a9ca:	b500      	push	{lr}
 800a9cc:	b09c      	sub	sp, #112	; 0x70
 800a9ce:	ab1d      	add	r3, sp, #116	; 0x74
 800a9d0:	9002      	str	r0, [sp, #8]
 800a9d2:	9006      	str	r0, [sp, #24]
 800a9d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a9d8:	4809      	ldr	r0, [pc, #36]	; (800aa00 <siprintf+0x38>)
 800a9da:	9107      	str	r1, [sp, #28]
 800a9dc:	9104      	str	r1, [sp, #16]
 800a9de:	4909      	ldr	r1, [pc, #36]	; (800aa04 <siprintf+0x3c>)
 800a9e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9e4:	9105      	str	r1, [sp, #20]
 800a9e6:	6800      	ldr	r0, [r0, #0]
 800a9e8:	9301      	str	r3, [sp, #4]
 800a9ea:	a902      	add	r1, sp, #8
 800a9ec:	f002 f90c 	bl	800cc08 <_svfiprintf_r>
 800a9f0:	9b02      	ldr	r3, [sp, #8]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	701a      	strb	r2, [r3, #0]
 800a9f6:	b01c      	add	sp, #112	; 0x70
 800a9f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9fc:	b003      	add	sp, #12
 800a9fe:	4770      	bx	lr
 800aa00:	2000023c 	.word	0x2000023c
 800aa04:	ffff0208 	.word	0xffff0208

0800aa08 <__sread>:
 800aa08:	b510      	push	{r4, lr}
 800aa0a:	460c      	mov	r4, r1
 800aa0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa10:	f000 f890 	bl	800ab34 <_read_r>
 800aa14:	2800      	cmp	r0, #0
 800aa16:	bfab      	itete	ge
 800aa18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa1a:	89a3      	ldrhlt	r3, [r4, #12]
 800aa1c:	181b      	addge	r3, r3, r0
 800aa1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa22:	bfac      	ite	ge
 800aa24:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa26:	81a3      	strhlt	r3, [r4, #12]
 800aa28:	bd10      	pop	{r4, pc}

0800aa2a <__swrite>:
 800aa2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa2e:	461f      	mov	r7, r3
 800aa30:	898b      	ldrh	r3, [r1, #12]
 800aa32:	05db      	lsls	r3, r3, #23
 800aa34:	4605      	mov	r5, r0
 800aa36:	460c      	mov	r4, r1
 800aa38:	4616      	mov	r6, r2
 800aa3a:	d505      	bpl.n	800aa48 <__swrite+0x1e>
 800aa3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa40:	2302      	movs	r3, #2
 800aa42:	2200      	movs	r2, #0
 800aa44:	f000 f864 	bl	800ab10 <_lseek_r>
 800aa48:	89a3      	ldrh	r3, [r4, #12]
 800aa4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa52:	81a3      	strh	r3, [r4, #12]
 800aa54:	4632      	mov	r2, r6
 800aa56:	463b      	mov	r3, r7
 800aa58:	4628      	mov	r0, r5
 800aa5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa5e:	f000 b87b 	b.w	800ab58 <_write_r>

0800aa62 <__sseek>:
 800aa62:	b510      	push	{r4, lr}
 800aa64:	460c      	mov	r4, r1
 800aa66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa6a:	f000 f851 	bl	800ab10 <_lseek_r>
 800aa6e:	1c43      	adds	r3, r0, #1
 800aa70:	89a3      	ldrh	r3, [r4, #12]
 800aa72:	bf15      	itete	ne
 800aa74:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa7e:	81a3      	strheq	r3, [r4, #12]
 800aa80:	bf18      	it	ne
 800aa82:	81a3      	strhne	r3, [r4, #12]
 800aa84:	bd10      	pop	{r4, pc}

0800aa86 <__sclose>:
 800aa86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa8a:	f000 b831 	b.w	800aaf0 <_close_r>

0800aa8e <memset>:
 800aa8e:	4402      	add	r2, r0
 800aa90:	4603      	mov	r3, r0
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d100      	bne.n	800aa98 <memset+0xa>
 800aa96:	4770      	bx	lr
 800aa98:	f803 1b01 	strb.w	r1, [r3], #1
 800aa9c:	e7f9      	b.n	800aa92 <memset+0x4>

0800aa9e <strncmp>:
 800aa9e:	b510      	push	{r4, lr}
 800aaa0:	b16a      	cbz	r2, 800aabe <strncmp+0x20>
 800aaa2:	3901      	subs	r1, #1
 800aaa4:	1884      	adds	r4, r0, r2
 800aaa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaaa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d103      	bne.n	800aaba <strncmp+0x1c>
 800aab2:	42a0      	cmp	r0, r4
 800aab4:	d001      	beq.n	800aaba <strncmp+0x1c>
 800aab6:	2a00      	cmp	r2, #0
 800aab8:	d1f5      	bne.n	800aaa6 <strncmp+0x8>
 800aaba:	1ad0      	subs	r0, r2, r3
 800aabc:	bd10      	pop	{r4, pc}
 800aabe:	4610      	mov	r0, r2
 800aac0:	e7fc      	b.n	800aabc <strncmp+0x1e>

0800aac2 <strncpy>:
 800aac2:	b510      	push	{r4, lr}
 800aac4:	3901      	subs	r1, #1
 800aac6:	4603      	mov	r3, r0
 800aac8:	b132      	cbz	r2, 800aad8 <strncpy+0x16>
 800aaca:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800aace:	f803 4b01 	strb.w	r4, [r3], #1
 800aad2:	3a01      	subs	r2, #1
 800aad4:	2c00      	cmp	r4, #0
 800aad6:	d1f7      	bne.n	800aac8 <strncpy+0x6>
 800aad8:	441a      	add	r2, r3
 800aada:	2100      	movs	r1, #0
 800aadc:	4293      	cmp	r3, r2
 800aade:	d100      	bne.n	800aae2 <strncpy+0x20>
 800aae0:	bd10      	pop	{r4, pc}
 800aae2:	f803 1b01 	strb.w	r1, [r3], #1
 800aae6:	e7f9      	b.n	800aadc <strncpy+0x1a>

0800aae8 <_localeconv_r>:
 800aae8:	4800      	ldr	r0, [pc, #0]	; (800aaec <_localeconv_r+0x4>)
 800aaea:	4770      	bx	lr
 800aaec:	20000174 	.word	0x20000174

0800aaf0 <_close_r>:
 800aaf0:	b538      	push	{r3, r4, r5, lr}
 800aaf2:	4d06      	ldr	r5, [pc, #24]	; (800ab0c <_close_r+0x1c>)
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	4604      	mov	r4, r0
 800aaf8:	4608      	mov	r0, r1
 800aafa:	602b      	str	r3, [r5, #0]
 800aafc:	f7fa f937 	bl	8004d6e <_close>
 800ab00:	1c43      	adds	r3, r0, #1
 800ab02:	d102      	bne.n	800ab0a <_close_r+0x1a>
 800ab04:	682b      	ldr	r3, [r5, #0]
 800ab06:	b103      	cbz	r3, 800ab0a <_close_r+0x1a>
 800ab08:	6023      	str	r3, [r4, #0]
 800ab0a:	bd38      	pop	{r3, r4, r5, pc}
 800ab0c:	200008f0 	.word	0x200008f0

0800ab10 <_lseek_r>:
 800ab10:	b538      	push	{r3, r4, r5, lr}
 800ab12:	4d07      	ldr	r5, [pc, #28]	; (800ab30 <_lseek_r+0x20>)
 800ab14:	4604      	mov	r4, r0
 800ab16:	4608      	mov	r0, r1
 800ab18:	4611      	mov	r1, r2
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	602a      	str	r2, [r5, #0]
 800ab1e:	461a      	mov	r2, r3
 800ab20:	f7fa f94c 	bl	8004dbc <_lseek>
 800ab24:	1c43      	adds	r3, r0, #1
 800ab26:	d102      	bne.n	800ab2e <_lseek_r+0x1e>
 800ab28:	682b      	ldr	r3, [r5, #0]
 800ab2a:	b103      	cbz	r3, 800ab2e <_lseek_r+0x1e>
 800ab2c:	6023      	str	r3, [r4, #0]
 800ab2e:	bd38      	pop	{r3, r4, r5, pc}
 800ab30:	200008f0 	.word	0x200008f0

0800ab34 <_read_r>:
 800ab34:	b538      	push	{r3, r4, r5, lr}
 800ab36:	4d07      	ldr	r5, [pc, #28]	; (800ab54 <_read_r+0x20>)
 800ab38:	4604      	mov	r4, r0
 800ab3a:	4608      	mov	r0, r1
 800ab3c:	4611      	mov	r1, r2
 800ab3e:	2200      	movs	r2, #0
 800ab40:	602a      	str	r2, [r5, #0]
 800ab42:	461a      	mov	r2, r3
 800ab44:	f7fa f8da 	bl	8004cfc <_read>
 800ab48:	1c43      	adds	r3, r0, #1
 800ab4a:	d102      	bne.n	800ab52 <_read_r+0x1e>
 800ab4c:	682b      	ldr	r3, [r5, #0]
 800ab4e:	b103      	cbz	r3, 800ab52 <_read_r+0x1e>
 800ab50:	6023      	str	r3, [r4, #0]
 800ab52:	bd38      	pop	{r3, r4, r5, pc}
 800ab54:	200008f0 	.word	0x200008f0

0800ab58 <_write_r>:
 800ab58:	b538      	push	{r3, r4, r5, lr}
 800ab5a:	4d07      	ldr	r5, [pc, #28]	; (800ab78 <_write_r+0x20>)
 800ab5c:	4604      	mov	r4, r0
 800ab5e:	4608      	mov	r0, r1
 800ab60:	4611      	mov	r1, r2
 800ab62:	2200      	movs	r2, #0
 800ab64:	602a      	str	r2, [r5, #0]
 800ab66:	461a      	mov	r2, r3
 800ab68:	f7fa f8e5 	bl	8004d36 <_write>
 800ab6c:	1c43      	adds	r3, r0, #1
 800ab6e:	d102      	bne.n	800ab76 <_write_r+0x1e>
 800ab70:	682b      	ldr	r3, [r5, #0]
 800ab72:	b103      	cbz	r3, 800ab76 <_write_r+0x1e>
 800ab74:	6023      	str	r3, [r4, #0]
 800ab76:	bd38      	pop	{r3, r4, r5, pc}
 800ab78:	200008f0 	.word	0x200008f0

0800ab7c <__errno>:
 800ab7c:	4b01      	ldr	r3, [pc, #4]	; (800ab84 <__errno+0x8>)
 800ab7e:	6818      	ldr	r0, [r3, #0]
 800ab80:	4770      	bx	lr
 800ab82:	bf00      	nop
 800ab84:	2000023c 	.word	0x2000023c

0800ab88 <__libc_init_array>:
 800ab88:	b570      	push	{r4, r5, r6, lr}
 800ab8a:	4d0d      	ldr	r5, [pc, #52]	; (800abc0 <__libc_init_array+0x38>)
 800ab8c:	4c0d      	ldr	r4, [pc, #52]	; (800abc4 <__libc_init_array+0x3c>)
 800ab8e:	1b64      	subs	r4, r4, r5
 800ab90:	10a4      	asrs	r4, r4, #2
 800ab92:	2600      	movs	r6, #0
 800ab94:	42a6      	cmp	r6, r4
 800ab96:	d109      	bne.n	800abac <__libc_init_array+0x24>
 800ab98:	4d0b      	ldr	r5, [pc, #44]	; (800abc8 <__libc_init_array+0x40>)
 800ab9a:	4c0c      	ldr	r4, [pc, #48]	; (800abcc <__libc_init_array+0x44>)
 800ab9c:	f002 fd30 	bl	800d600 <_init>
 800aba0:	1b64      	subs	r4, r4, r5
 800aba2:	10a4      	asrs	r4, r4, #2
 800aba4:	2600      	movs	r6, #0
 800aba6:	42a6      	cmp	r6, r4
 800aba8:	d105      	bne.n	800abb6 <__libc_init_array+0x2e>
 800abaa:	bd70      	pop	{r4, r5, r6, pc}
 800abac:	f855 3b04 	ldr.w	r3, [r5], #4
 800abb0:	4798      	blx	r3
 800abb2:	3601      	adds	r6, #1
 800abb4:	e7ee      	b.n	800ab94 <__libc_init_array+0xc>
 800abb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800abba:	4798      	blx	r3
 800abbc:	3601      	adds	r6, #1
 800abbe:	e7f2      	b.n	800aba6 <__libc_init_array+0x1e>
 800abc0:	0800e0cc 	.word	0x0800e0cc
 800abc4:	0800e0cc 	.word	0x0800e0cc
 800abc8:	0800e0cc 	.word	0x0800e0cc
 800abcc:	0800e0d0 	.word	0x0800e0d0

0800abd0 <__retarget_lock_init_recursive>:
 800abd0:	4770      	bx	lr

0800abd2 <__retarget_lock_acquire_recursive>:
 800abd2:	4770      	bx	lr

0800abd4 <__retarget_lock_release_recursive>:
 800abd4:	4770      	bx	lr

0800abd6 <memcpy>:
 800abd6:	440a      	add	r2, r1
 800abd8:	4291      	cmp	r1, r2
 800abda:	f100 33ff 	add.w	r3, r0, #4294967295
 800abde:	d100      	bne.n	800abe2 <memcpy+0xc>
 800abe0:	4770      	bx	lr
 800abe2:	b510      	push	{r4, lr}
 800abe4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abe8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abec:	4291      	cmp	r1, r2
 800abee:	d1f9      	bne.n	800abe4 <memcpy+0xe>
 800abf0:	bd10      	pop	{r4, pc}
 800abf2:	0000      	movs	r0, r0
 800abf4:	0000      	movs	r0, r0
	...

0800abf8 <nan>:
 800abf8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ac00 <nan+0x8>
 800abfc:	4770      	bx	lr
 800abfe:	bf00      	nop
 800ac00:	00000000 	.word	0x00000000
 800ac04:	7ff80000 	.word	0x7ff80000

0800ac08 <nanf>:
 800ac08:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ac10 <nanf+0x8>
 800ac0c:	4770      	bx	lr
 800ac0e:	bf00      	nop
 800ac10:	7fc00000 	.word	0x7fc00000

0800ac14 <quorem>:
 800ac14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac18:	6903      	ldr	r3, [r0, #16]
 800ac1a:	690c      	ldr	r4, [r1, #16]
 800ac1c:	42a3      	cmp	r3, r4
 800ac1e:	4607      	mov	r7, r0
 800ac20:	db7e      	blt.n	800ad20 <quorem+0x10c>
 800ac22:	3c01      	subs	r4, #1
 800ac24:	f101 0814 	add.w	r8, r1, #20
 800ac28:	f100 0514 	add.w	r5, r0, #20
 800ac2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac30:	9301      	str	r3, [sp, #4]
 800ac32:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ac36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ac42:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ac46:	fbb2 f6f3 	udiv	r6, r2, r3
 800ac4a:	d331      	bcc.n	800acb0 <quorem+0x9c>
 800ac4c:	f04f 0e00 	mov.w	lr, #0
 800ac50:	4640      	mov	r0, r8
 800ac52:	46ac      	mov	ip, r5
 800ac54:	46f2      	mov	sl, lr
 800ac56:	f850 2b04 	ldr.w	r2, [r0], #4
 800ac5a:	b293      	uxth	r3, r2
 800ac5c:	fb06 e303 	mla	r3, r6, r3, lr
 800ac60:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ac64:	0c1a      	lsrs	r2, r3, #16
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	ebaa 0303 	sub.w	r3, sl, r3
 800ac6c:	f8dc a000 	ldr.w	sl, [ip]
 800ac70:	fa13 f38a 	uxtah	r3, r3, sl
 800ac74:	fb06 220e 	mla	r2, r6, lr, r2
 800ac78:	9300      	str	r3, [sp, #0]
 800ac7a:	9b00      	ldr	r3, [sp, #0]
 800ac7c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ac80:	b292      	uxth	r2, r2
 800ac82:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ac86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac8a:	f8bd 3000 	ldrh.w	r3, [sp]
 800ac8e:	4581      	cmp	r9, r0
 800ac90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac94:	f84c 3b04 	str.w	r3, [ip], #4
 800ac98:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ac9c:	d2db      	bcs.n	800ac56 <quorem+0x42>
 800ac9e:	f855 300b 	ldr.w	r3, [r5, fp]
 800aca2:	b92b      	cbnz	r3, 800acb0 <quorem+0x9c>
 800aca4:	9b01      	ldr	r3, [sp, #4]
 800aca6:	3b04      	subs	r3, #4
 800aca8:	429d      	cmp	r5, r3
 800acaa:	461a      	mov	r2, r3
 800acac:	d32c      	bcc.n	800ad08 <quorem+0xf4>
 800acae:	613c      	str	r4, [r7, #16]
 800acb0:	4638      	mov	r0, r7
 800acb2:	f001 fd5b 	bl	800c76c <__mcmp>
 800acb6:	2800      	cmp	r0, #0
 800acb8:	db22      	blt.n	800ad00 <quorem+0xec>
 800acba:	3601      	adds	r6, #1
 800acbc:	4629      	mov	r1, r5
 800acbe:	2000      	movs	r0, #0
 800acc0:	f858 2b04 	ldr.w	r2, [r8], #4
 800acc4:	f8d1 c000 	ldr.w	ip, [r1]
 800acc8:	b293      	uxth	r3, r2
 800acca:	1ac3      	subs	r3, r0, r3
 800accc:	0c12      	lsrs	r2, r2, #16
 800acce:	fa13 f38c 	uxtah	r3, r3, ip
 800acd2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800acd6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800acda:	b29b      	uxth	r3, r3
 800acdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ace0:	45c1      	cmp	r9, r8
 800ace2:	f841 3b04 	str.w	r3, [r1], #4
 800ace6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800acea:	d2e9      	bcs.n	800acc0 <quorem+0xac>
 800acec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800acf0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800acf4:	b922      	cbnz	r2, 800ad00 <quorem+0xec>
 800acf6:	3b04      	subs	r3, #4
 800acf8:	429d      	cmp	r5, r3
 800acfa:	461a      	mov	r2, r3
 800acfc:	d30a      	bcc.n	800ad14 <quorem+0x100>
 800acfe:	613c      	str	r4, [r7, #16]
 800ad00:	4630      	mov	r0, r6
 800ad02:	b003      	add	sp, #12
 800ad04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad08:	6812      	ldr	r2, [r2, #0]
 800ad0a:	3b04      	subs	r3, #4
 800ad0c:	2a00      	cmp	r2, #0
 800ad0e:	d1ce      	bne.n	800acae <quorem+0x9a>
 800ad10:	3c01      	subs	r4, #1
 800ad12:	e7c9      	b.n	800aca8 <quorem+0x94>
 800ad14:	6812      	ldr	r2, [r2, #0]
 800ad16:	3b04      	subs	r3, #4
 800ad18:	2a00      	cmp	r2, #0
 800ad1a:	d1f0      	bne.n	800acfe <quorem+0xea>
 800ad1c:	3c01      	subs	r4, #1
 800ad1e:	e7eb      	b.n	800acf8 <quorem+0xe4>
 800ad20:	2000      	movs	r0, #0
 800ad22:	e7ee      	b.n	800ad02 <quorem+0xee>
 800ad24:	0000      	movs	r0, r0
	...

0800ad28 <_dtoa_r>:
 800ad28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad2c:	ed2d 8b04 	vpush	{d8-d9}
 800ad30:	69c5      	ldr	r5, [r0, #28]
 800ad32:	b093      	sub	sp, #76	; 0x4c
 800ad34:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ad38:	ec57 6b10 	vmov	r6, r7, d0
 800ad3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ad40:	9107      	str	r1, [sp, #28]
 800ad42:	4604      	mov	r4, r0
 800ad44:	920a      	str	r2, [sp, #40]	; 0x28
 800ad46:	930d      	str	r3, [sp, #52]	; 0x34
 800ad48:	b975      	cbnz	r5, 800ad68 <_dtoa_r+0x40>
 800ad4a:	2010      	movs	r0, #16
 800ad4c:	f001 f982 	bl	800c054 <malloc>
 800ad50:	4602      	mov	r2, r0
 800ad52:	61e0      	str	r0, [r4, #28]
 800ad54:	b920      	cbnz	r0, 800ad60 <_dtoa_r+0x38>
 800ad56:	4bae      	ldr	r3, [pc, #696]	; (800b010 <_dtoa_r+0x2e8>)
 800ad58:	21ef      	movs	r1, #239	; 0xef
 800ad5a:	48ae      	ldr	r0, [pc, #696]	; (800b014 <_dtoa_r+0x2ec>)
 800ad5c:	f002 f92a 	bl	800cfb4 <__assert_func>
 800ad60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ad64:	6005      	str	r5, [r0, #0]
 800ad66:	60c5      	str	r5, [r0, #12]
 800ad68:	69e3      	ldr	r3, [r4, #28]
 800ad6a:	6819      	ldr	r1, [r3, #0]
 800ad6c:	b151      	cbz	r1, 800ad84 <_dtoa_r+0x5c>
 800ad6e:	685a      	ldr	r2, [r3, #4]
 800ad70:	604a      	str	r2, [r1, #4]
 800ad72:	2301      	movs	r3, #1
 800ad74:	4093      	lsls	r3, r2
 800ad76:	608b      	str	r3, [r1, #8]
 800ad78:	4620      	mov	r0, r4
 800ad7a:	f001 fa71 	bl	800c260 <_Bfree>
 800ad7e:	69e3      	ldr	r3, [r4, #28]
 800ad80:	2200      	movs	r2, #0
 800ad82:	601a      	str	r2, [r3, #0]
 800ad84:	1e3b      	subs	r3, r7, #0
 800ad86:	bfbb      	ittet	lt
 800ad88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ad8c:	9303      	strlt	r3, [sp, #12]
 800ad8e:	2300      	movge	r3, #0
 800ad90:	2201      	movlt	r2, #1
 800ad92:	bfac      	ite	ge
 800ad94:	f8c8 3000 	strge.w	r3, [r8]
 800ad98:	f8c8 2000 	strlt.w	r2, [r8]
 800ad9c:	4b9e      	ldr	r3, [pc, #632]	; (800b018 <_dtoa_r+0x2f0>)
 800ad9e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ada2:	ea33 0308 	bics.w	r3, r3, r8
 800ada6:	d11b      	bne.n	800ade0 <_dtoa_r+0xb8>
 800ada8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800adaa:	f242 730f 	movw	r3, #9999	; 0x270f
 800adae:	6013      	str	r3, [r2, #0]
 800adb0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800adb4:	4333      	orrs	r3, r6
 800adb6:	f000 8593 	beq.w	800b8e0 <_dtoa_r+0xbb8>
 800adba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800adbc:	b963      	cbnz	r3, 800add8 <_dtoa_r+0xb0>
 800adbe:	4b97      	ldr	r3, [pc, #604]	; (800b01c <_dtoa_r+0x2f4>)
 800adc0:	e027      	b.n	800ae12 <_dtoa_r+0xea>
 800adc2:	4b97      	ldr	r3, [pc, #604]	; (800b020 <_dtoa_r+0x2f8>)
 800adc4:	9300      	str	r3, [sp, #0]
 800adc6:	3308      	adds	r3, #8
 800adc8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800adca:	6013      	str	r3, [r2, #0]
 800adcc:	9800      	ldr	r0, [sp, #0]
 800adce:	b013      	add	sp, #76	; 0x4c
 800add0:	ecbd 8b04 	vpop	{d8-d9}
 800add4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800add8:	4b90      	ldr	r3, [pc, #576]	; (800b01c <_dtoa_r+0x2f4>)
 800adda:	9300      	str	r3, [sp, #0]
 800addc:	3303      	adds	r3, #3
 800adde:	e7f3      	b.n	800adc8 <_dtoa_r+0xa0>
 800ade0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ade4:	2200      	movs	r2, #0
 800ade6:	ec51 0b17 	vmov	r0, r1, d7
 800adea:	eeb0 8a47 	vmov.f32	s16, s14
 800adee:	eef0 8a67 	vmov.f32	s17, s15
 800adf2:	2300      	movs	r3, #0
 800adf4:	f7f5 fe70 	bl	8000ad8 <__aeabi_dcmpeq>
 800adf8:	4681      	mov	r9, r0
 800adfa:	b160      	cbz	r0, 800ae16 <_dtoa_r+0xee>
 800adfc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800adfe:	2301      	movs	r3, #1
 800ae00:	6013      	str	r3, [r2, #0]
 800ae02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f000 8568 	beq.w	800b8da <_dtoa_r+0xbb2>
 800ae0a:	4b86      	ldr	r3, [pc, #536]	; (800b024 <_dtoa_r+0x2fc>)
 800ae0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ae0e:	6013      	str	r3, [r2, #0]
 800ae10:	3b01      	subs	r3, #1
 800ae12:	9300      	str	r3, [sp, #0]
 800ae14:	e7da      	b.n	800adcc <_dtoa_r+0xa4>
 800ae16:	aa10      	add	r2, sp, #64	; 0x40
 800ae18:	a911      	add	r1, sp, #68	; 0x44
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	eeb0 0a48 	vmov.f32	s0, s16
 800ae20:	eef0 0a68 	vmov.f32	s1, s17
 800ae24:	f001 fdb8 	bl	800c998 <__d2b>
 800ae28:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ae2c:	4682      	mov	sl, r0
 800ae2e:	2d00      	cmp	r5, #0
 800ae30:	d07f      	beq.n	800af32 <_dtoa_r+0x20a>
 800ae32:	ee18 3a90 	vmov	r3, s17
 800ae36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae3a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ae3e:	ec51 0b18 	vmov	r0, r1, d8
 800ae42:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ae46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ae4a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ae4e:	4619      	mov	r1, r3
 800ae50:	2200      	movs	r2, #0
 800ae52:	4b75      	ldr	r3, [pc, #468]	; (800b028 <_dtoa_r+0x300>)
 800ae54:	f7f5 fa20 	bl	8000298 <__aeabi_dsub>
 800ae58:	a367      	add	r3, pc, #412	; (adr r3, 800aff8 <_dtoa_r+0x2d0>)
 800ae5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5e:	f7f5 fbd3 	bl	8000608 <__aeabi_dmul>
 800ae62:	a367      	add	r3, pc, #412	; (adr r3, 800b000 <_dtoa_r+0x2d8>)
 800ae64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae68:	f7f5 fa18 	bl	800029c <__adddf3>
 800ae6c:	4606      	mov	r6, r0
 800ae6e:	4628      	mov	r0, r5
 800ae70:	460f      	mov	r7, r1
 800ae72:	f7f5 fb5f 	bl	8000534 <__aeabi_i2d>
 800ae76:	a364      	add	r3, pc, #400	; (adr r3, 800b008 <_dtoa_r+0x2e0>)
 800ae78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7c:	f7f5 fbc4 	bl	8000608 <__aeabi_dmul>
 800ae80:	4602      	mov	r2, r0
 800ae82:	460b      	mov	r3, r1
 800ae84:	4630      	mov	r0, r6
 800ae86:	4639      	mov	r1, r7
 800ae88:	f7f5 fa08 	bl	800029c <__adddf3>
 800ae8c:	4606      	mov	r6, r0
 800ae8e:	460f      	mov	r7, r1
 800ae90:	f7f5 fe6a 	bl	8000b68 <__aeabi_d2iz>
 800ae94:	2200      	movs	r2, #0
 800ae96:	4683      	mov	fp, r0
 800ae98:	2300      	movs	r3, #0
 800ae9a:	4630      	mov	r0, r6
 800ae9c:	4639      	mov	r1, r7
 800ae9e:	f7f5 fe25 	bl	8000aec <__aeabi_dcmplt>
 800aea2:	b148      	cbz	r0, 800aeb8 <_dtoa_r+0x190>
 800aea4:	4658      	mov	r0, fp
 800aea6:	f7f5 fb45 	bl	8000534 <__aeabi_i2d>
 800aeaa:	4632      	mov	r2, r6
 800aeac:	463b      	mov	r3, r7
 800aeae:	f7f5 fe13 	bl	8000ad8 <__aeabi_dcmpeq>
 800aeb2:	b908      	cbnz	r0, 800aeb8 <_dtoa_r+0x190>
 800aeb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aeb8:	f1bb 0f16 	cmp.w	fp, #22
 800aebc:	d857      	bhi.n	800af6e <_dtoa_r+0x246>
 800aebe:	4b5b      	ldr	r3, [pc, #364]	; (800b02c <_dtoa_r+0x304>)
 800aec0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec8:	ec51 0b18 	vmov	r0, r1, d8
 800aecc:	f7f5 fe0e 	bl	8000aec <__aeabi_dcmplt>
 800aed0:	2800      	cmp	r0, #0
 800aed2:	d04e      	beq.n	800af72 <_dtoa_r+0x24a>
 800aed4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aed8:	2300      	movs	r3, #0
 800aeda:	930c      	str	r3, [sp, #48]	; 0x30
 800aedc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aede:	1b5b      	subs	r3, r3, r5
 800aee0:	1e5a      	subs	r2, r3, #1
 800aee2:	bf45      	ittet	mi
 800aee4:	f1c3 0301 	rsbmi	r3, r3, #1
 800aee8:	9305      	strmi	r3, [sp, #20]
 800aeea:	2300      	movpl	r3, #0
 800aeec:	2300      	movmi	r3, #0
 800aeee:	9206      	str	r2, [sp, #24]
 800aef0:	bf54      	ite	pl
 800aef2:	9305      	strpl	r3, [sp, #20]
 800aef4:	9306      	strmi	r3, [sp, #24]
 800aef6:	f1bb 0f00 	cmp.w	fp, #0
 800aefa:	db3c      	blt.n	800af76 <_dtoa_r+0x24e>
 800aefc:	9b06      	ldr	r3, [sp, #24]
 800aefe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800af02:	445b      	add	r3, fp
 800af04:	9306      	str	r3, [sp, #24]
 800af06:	2300      	movs	r3, #0
 800af08:	9308      	str	r3, [sp, #32]
 800af0a:	9b07      	ldr	r3, [sp, #28]
 800af0c:	2b09      	cmp	r3, #9
 800af0e:	d868      	bhi.n	800afe2 <_dtoa_r+0x2ba>
 800af10:	2b05      	cmp	r3, #5
 800af12:	bfc4      	itt	gt
 800af14:	3b04      	subgt	r3, #4
 800af16:	9307      	strgt	r3, [sp, #28]
 800af18:	9b07      	ldr	r3, [sp, #28]
 800af1a:	f1a3 0302 	sub.w	r3, r3, #2
 800af1e:	bfcc      	ite	gt
 800af20:	2500      	movgt	r5, #0
 800af22:	2501      	movle	r5, #1
 800af24:	2b03      	cmp	r3, #3
 800af26:	f200 8085 	bhi.w	800b034 <_dtoa_r+0x30c>
 800af2a:	e8df f003 	tbb	[pc, r3]
 800af2e:	3b2e      	.short	0x3b2e
 800af30:	5839      	.short	0x5839
 800af32:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800af36:	441d      	add	r5, r3
 800af38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800af3c:	2b20      	cmp	r3, #32
 800af3e:	bfc1      	itttt	gt
 800af40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800af44:	fa08 f803 	lslgt.w	r8, r8, r3
 800af48:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800af4c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800af50:	bfd6      	itet	le
 800af52:	f1c3 0320 	rsble	r3, r3, #32
 800af56:	ea48 0003 	orrgt.w	r0, r8, r3
 800af5a:	fa06 f003 	lslle.w	r0, r6, r3
 800af5e:	f7f5 fad9 	bl	8000514 <__aeabi_ui2d>
 800af62:	2201      	movs	r2, #1
 800af64:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800af68:	3d01      	subs	r5, #1
 800af6a:	920e      	str	r2, [sp, #56]	; 0x38
 800af6c:	e76f      	b.n	800ae4e <_dtoa_r+0x126>
 800af6e:	2301      	movs	r3, #1
 800af70:	e7b3      	b.n	800aeda <_dtoa_r+0x1b2>
 800af72:	900c      	str	r0, [sp, #48]	; 0x30
 800af74:	e7b2      	b.n	800aedc <_dtoa_r+0x1b4>
 800af76:	9b05      	ldr	r3, [sp, #20]
 800af78:	eba3 030b 	sub.w	r3, r3, fp
 800af7c:	9305      	str	r3, [sp, #20]
 800af7e:	f1cb 0300 	rsb	r3, fp, #0
 800af82:	9308      	str	r3, [sp, #32]
 800af84:	2300      	movs	r3, #0
 800af86:	930b      	str	r3, [sp, #44]	; 0x2c
 800af88:	e7bf      	b.n	800af0a <_dtoa_r+0x1e2>
 800af8a:	2300      	movs	r3, #0
 800af8c:	9309      	str	r3, [sp, #36]	; 0x24
 800af8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af90:	2b00      	cmp	r3, #0
 800af92:	dc52      	bgt.n	800b03a <_dtoa_r+0x312>
 800af94:	2301      	movs	r3, #1
 800af96:	9301      	str	r3, [sp, #4]
 800af98:	9304      	str	r3, [sp, #16]
 800af9a:	461a      	mov	r2, r3
 800af9c:	920a      	str	r2, [sp, #40]	; 0x28
 800af9e:	e00b      	b.n	800afb8 <_dtoa_r+0x290>
 800afa0:	2301      	movs	r3, #1
 800afa2:	e7f3      	b.n	800af8c <_dtoa_r+0x264>
 800afa4:	2300      	movs	r3, #0
 800afa6:	9309      	str	r3, [sp, #36]	; 0x24
 800afa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afaa:	445b      	add	r3, fp
 800afac:	9301      	str	r3, [sp, #4]
 800afae:	3301      	adds	r3, #1
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	9304      	str	r3, [sp, #16]
 800afb4:	bfb8      	it	lt
 800afb6:	2301      	movlt	r3, #1
 800afb8:	69e0      	ldr	r0, [r4, #28]
 800afba:	2100      	movs	r1, #0
 800afbc:	2204      	movs	r2, #4
 800afbe:	f102 0614 	add.w	r6, r2, #20
 800afc2:	429e      	cmp	r6, r3
 800afc4:	d93d      	bls.n	800b042 <_dtoa_r+0x31a>
 800afc6:	6041      	str	r1, [r0, #4]
 800afc8:	4620      	mov	r0, r4
 800afca:	f001 f909 	bl	800c1e0 <_Balloc>
 800afce:	9000      	str	r0, [sp, #0]
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d139      	bne.n	800b048 <_dtoa_r+0x320>
 800afd4:	4b16      	ldr	r3, [pc, #88]	; (800b030 <_dtoa_r+0x308>)
 800afd6:	4602      	mov	r2, r0
 800afd8:	f240 11af 	movw	r1, #431	; 0x1af
 800afdc:	e6bd      	b.n	800ad5a <_dtoa_r+0x32>
 800afde:	2301      	movs	r3, #1
 800afe0:	e7e1      	b.n	800afa6 <_dtoa_r+0x27e>
 800afe2:	2501      	movs	r5, #1
 800afe4:	2300      	movs	r3, #0
 800afe6:	9307      	str	r3, [sp, #28]
 800afe8:	9509      	str	r5, [sp, #36]	; 0x24
 800afea:	f04f 33ff 	mov.w	r3, #4294967295
 800afee:	9301      	str	r3, [sp, #4]
 800aff0:	9304      	str	r3, [sp, #16]
 800aff2:	2200      	movs	r2, #0
 800aff4:	2312      	movs	r3, #18
 800aff6:	e7d1      	b.n	800af9c <_dtoa_r+0x274>
 800aff8:	636f4361 	.word	0x636f4361
 800affc:	3fd287a7 	.word	0x3fd287a7
 800b000:	8b60c8b3 	.word	0x8b60c8b3
 800b004:	3fc68a28 	.word	0x3fc68a28
 800b008:	509f79fb 	.word	0x509f79fb
 800b00c:	3fd34413 	.word	0x3fd34413
 800b010:	0800de3f 	.word	0x0800de3f
 800b014:	0800de56 	.word	0x0800de56
 800b018:	7ff00000 	.word	0x7ff00000
 800b01c:	0800de3b 	.word	0x0800de3b
 800b020:	0800de32 	.word	0x0800de32
 800b024:	0800de02 	.word	0x0800de02
 800b028:	3ff80000 	.word	0x3ff80000
 800b02c:	0800dfa0 	.word	0x0800dfa0
 800b030:	0800deae 	.word	0x0800deae
 800b034:	2301      	movs	r3, #1
 800b036:	9309      	str	r3, [sp, #36]	; 0x24
 800b038:	e7d7      	b.n	800afea <_dtoa_r+0x2c2>
 800b03a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b03c:	9301      	str	r3, [sp, #4]
 800b03e:	9304      	str	r3, [sp, #16]
 800b040:	e7ba      	b.n	800afb8 <_dtoa_r+0x290>
 800b042:	3101      	adds	r1, #1
 800b044:	0052      	lsls	r2, r2, #1
 800b046:	e7ba      	b.n	800afbe <_dtoa_r+0x296>
 800b048:	69e3      	ldr	r3, [r4, #28]
 800b04a:	9a00      	ldr	r2, [sp, #0]
 800b04c:	601a      	str	r2, [r3, #0]
 800b04e:	9b04      	ldr	r3, [sp, #16]
 800b050:	2b0e      	cmp	r3, #14
 800b052:	f200 80a8 	bhi.w	800b1a6 <_dtoa_r+0x47e>
 800b056:	2d00      	cmp	r5, #0
 800b058:	f000 80a5 	beq.w	800b1a6 <_dtoa_r+0x47e>
 800b05c:	f1bb 0f00 	cmp.w	fp, #0
 800b060:	dd38      	ble.n	800b0d4 <_dtoa_r+0x3ac>
 800b062:	4bc0      	ldr	r3, [pc, #768]	; (800b364 <_dtoa_r+0x63c>)
 800b064:	f00b 020f 	and.w	r2, fp, #15
 800b068:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b06c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b070:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b074:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b078:	d019      	beq.n	800b0ae <_dtoa_r+0x386>
 800b07a:	4bbb      	ldr	r3, [pc, #748]	; (800b368 <_dtoa_r+0x640>)
 800b07c:	ec51 0b18 	vmov	r0, r1, d8
 800b080:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b084:	f7f5 fbea 	bl	800085c <__aeabi_ddiv>
 800b088:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b08c:	f008 080f 	and.w	r8, r8, #15
 800b090:	2503      	movs	r5, #3
 800b092:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b368 <_dtoa_r+0x640>
 800b096:	f1b8 0f00 	cmp.w	r8, #0
 800b09a:	d10a      	bne.n	800b0b2 <_dtoa_r+0x38a>
 800b09c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0a0:	4632      	mov	r2, r6
 800b0a2:	463b      	mov	r3, r7
 800b0a4:	f7f5 fbda 	bl	800085c <__aeabi_ddiv>
 800b0a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0ac:	e02b      	b.n	800b106 <_dtoa_r+0x3de>
 800b0ae:	2502      	movs	r5, #2
 800b0b0:	e7ef      	b.n	800b092 <_dtoa_r+0x36a>
 800b0b2:	f018 0f01 	tst.w	r8, #1
 800b0b6:	d008      	beq.n	800b0ca <_dtoa_r+0x3a2>
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	4639      	mov	r1, r7
 800b0bc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b0c0:	f7f5 faa2 	bl	8000608 <__aeabi_dmul>
 800b0c4:	3501      	adds	r5, #1
 800b0c6:	4606      	mov	r6, r0
 800b0c8:	460f      	mov	r7, r1
 800b0ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b0ce:	f109 0908 	add.w	r9, r9, #8
 800b0d2:	e7e0      	b.n	800b096 <_dtoa_r+0x36e>
 800b0d4:	f000 809f 	beq.w	800b216 <_dtoa_r+0x4ee>
 800b0d8:	f1cb 0600 	rsb	r6, fp, #0
 800b0dc:	4ba1      	ldr	r3, [pc, #644]	; (800b364 <_dtoa_r+0x63c>)
 800b0de:	4fa2      	ldr	r7, [pc, #648]	; (800b368 <_dtoa_r+0x640>)
 800b0e0:	f006 020f 	and.w	r2, r6, #15
 800b0e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ec:	ec51 0b18 	vmov	r0, r1, d8
 800b0f0:	f7f5 fa8a 	bl	8000608 <__aeabi_dmul>
 800b0f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0f8:	1136      	asrs	r6, r6, #4
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	2502      	movs	r5, #2
 800b0fe:	2e00      	cmp	r6, #0
 800b100:	d17e      	bne.n	800b200 <_dtoa_r+0x4d8>
 800b102:	2b00      	cmp	r3, #0
 800b104:	d1d0      	bne.n	800b0a8 <_dtoa_r+0x380>
 800b106:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b108:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f000 8084 	beq.w	800b21a <_dtoa_r+0x4f2>
 800b112:	4b96      	ldr	r3, [pc, #600]	; (800b36c <_dtoa_r+0x644>)
 800b114:	2200      	movs	r2, #0
 800b116:	4640      	mov	r0, r8
 800b118:	4649      	mov	r1, r9
 800b11a:	f7f5 fce7 	bl	8000aec <__aeabi_dcmplt>
 800b11e:	2800      	cmp	r0, #0
 800b120:	d07b      	beq.n	800b21a <_dtoa_r+0x4f2>
 800b122:	9b04      	ldr	r3, [sp, #16]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d078      	beq.n	800b21a <_dtoa_r+0x4f2>
 800b128:	9b01      	ldr	r3, [sp, #4]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	dd39      	ble.n	800b1a2 <_dtoa_r+0x47a>
 800b12e:	4b90      	ldr	r3, [pc, #576]	; (800b370 <_dtoa_r+0x648>)
 800b130:	2200      	movs	r2, #0
 800b132:	4640      	mov	r0, r8
 800b134:	4649      	mov	r1, r9
 800b136:	f7f5 fa67 	bl	8000608 <__aeabi_dmul>
 800b13a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b13e:	9e01      	ldr	r6, [sp, #4]
 800b140:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b144:	3501      	adds	r5, #1
 800b146:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b14a:	4628      	mov	r0, r5
 800b14c:	f7f5 f9f2 	bl	8000534 <__aeabi_i2d>
 800b150:	4642      	mov	r2, r8
 800b152:	464b      	mov	r3, r9
 800b154:	f7f5 fa58 	bl	8000608 <__aeabi_dmul>
 800b158:	4b86      	ldr	r3, [pc, #536]	; (800b374 <_dtoa_r+0x64c>)
 800b15a:	2200      	movs	r2, #0
 800b15c:	f7f5 f89e 	bl	800029c <__adddf3>
 800b160:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b164:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b168:	9303      	str	r3, [sp, #12]
 800b16a:	2e00      	cmp	r6, #0
 800b16c:	d158      	bne.n	800b220 <_dtoa_r+0x4f8>
 800b16e:	4b82      	ldr	r3, [pc, #520]	; (800b378 <_dtoa_r+0x650>)
 800b170:	2200      	movs	r2, #0
 800b172:	4640      	mov	r0, r8
 800b174:	4649      	mov	r1, r9
 800b176:	f7f5 f88f 	bl	8000298 <__aeabi_dsub>
 800b17a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b17e:	4680      	mov	r8, r0
 800b180:	4689      	mov	r9, r1
 800b182:	f7f5 fcd1 	bl	8000b28 <__aeabi_dcmpgt>
 800b186:	2800      	cmp	r0, #0
 800b188:	f040 8296 	bne.w	800b6b8 <_dtoa_r+0x990>
 800b18c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b190:	4640      	mov	r0, r8
 800b192:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b196:	4649      	mov	r1, r9
 800b198:	f7f5 fca8 	bl	8000aec <__aeabi_dcmplt>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	f040 8289 	bne.w	800b6b4 <_dtoa_r+0x98c>
 800b1a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b1a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	f2c0 814e 	blt.w	800b44a <_dtoa_r+0x722>
 800b1ae:	f1bb 0f0e 	cmp.w	fp, #14
 800b1b2:	f300 814a 	bgt.w	800b44a <_dtoa_r+0x722>
 800b1b6:	4b6b      	ldr	r3, [pc, #428]	; (800b364 <_dtoa_r+0x63c>)
 800b1b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b1bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b1c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	f280 80dc 	bge.w	800b380 <_dtoa_r+0x658>
 800b1c8:	9b04      	ldr	r3, [sp, #16]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	f300 80d8 	bgt.w	800b380 <_dtoa_r+0x658>
 800b1d0:	f040 826f 	bne.w	800b6b2 <_dtoa_r+0x98a>
 800b1d4:	4b68      	ldr	r3, [pc, #416]	; (800b378 <_dtoa_r+0x650>)
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	4640      	mov	r0, r8
 800b1da:	4649      	mov	r1, r9
 800b1dc:	f7f5 fa14 	bl	8000608 <__aeabi_dmul>
 800b1e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b1e4:	f7f5 fc96 	bl	8000b14 <__aeabi_dcmpge>
 800b1e8:	9e04      	ldr	r6, [sp, #16]
 800b1ea:	4637      	mov	r7, r6
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	f040 8245 	bne.w	800b67c <_dtoa_r+0x954>
 800b1f2:	9d00      	ldr	r5, [sp, #0]
 800b1f4:	2331      	movs	r3, #49	; 0x31
 800b1f6:	f805 3b01 	strb.w	r3, [r5], #1
 800b1fa:	f10b 0b01 	add.w	fp, fp, #1
 800b1fe:	e241      	b.n	800b684 <_dtoa_r+0x95c>
 800b200:	07f2      	lsls	r2, r6, #31
 800b202:	d505      	bpl.n	800b210 <_dtoa_r+0x4e8>
 800b204:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b208:	f7f5 f9fe 	bl	8000608 <__aeabi_dmul>
 800b20c:	3501      	adds	r5, #1
 800b20e:	2301      	movs	r3, #1
 800b210:	1076      	asrs	r6, r6, #1
 800b212:	3708      	adds	r7, #8
 800b214:	e773      	b.n	800b0fe <_dtoa_r+0x3d6>
 800b216:	2502      	movs	r5, #2
 800b218:	e775      	b.n	800b106 <_dtoa_r+0x3de>
 800b21a:	9e04      	ldr	r6, [sp, #16]
 800b21c:	465f      	mov	r7, fp
 800b21e:	e792      	b.n	800b146 <_dtoa_r+0x41e>
 800b220:	9900      	ldr	r1, [sp, #0]
 800b222:	4b50      	ldr	r3, [pc, #320]	; (800b364 <_dtoa_r+0x63c>)
 800b224:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b228:	4431      	add	r1, r6
 800b22a:	9102      	str	r1, [sp, #8]
 800b22c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b22e:	eeb0 9a47 	vmov.f32	s18, s14
 800b232:	eef0 9a67 	vmov.f32	s19, s15
 800b236:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b23a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b23e:	2900      	cmp	r1, #0
 800b240:	d044      	beq.n	800b2cc <_dtoa_r+0x5a4>
 800b242:	494e      	ldr	r1, [pc, #312]	; (800b37c <_dtoa_r+0x654>)
 800b244:	2000      	movs	r0, #0
 800b246:	f7f5 fb09 	bl	800085c <__aeabi_ddiv>
 800b24a:	ec53 2b19 	vmov	r2, r3, d9
 800b24e:	f7f5 f823 	bl	8000298 <__aeabi_dsub>
 800b252:	9d00      	ldr	r5, [sp, #0]
 800b254:	ec41 0b19 	vmov	d9, r0, r1
 800b258:	4649      	mov	r1, r9
 800b25a:	4640      	mov	r0, r8
 800b25c:	f7f5 fc84 	bl	8000b68 <__aeabi_d2iz>
 800b260:	4606      	mov	r6, r0
 800b262:	f7f5 f967 	bl	8000534 <__aeabi_i2d>
 800b266:	4602      	mov	r2, r0
 800b268:	460b      	mov	r3, r1
 800b26a:	4640      	mov	r0, r8
 800b26c:	4649      	mov	r1, r9
 800b26e:	f7f5 f813 	bl	8000298 <__aeabi_dsub>
 800b272:	3630      	adds	r6, #48	; 0x30
 800b274:	f805 6b01 	strb.w	r6, [r5], #1
 800b278:	ec53 2b19 	vmov	r2, r3, d9
 800b27c:	4680      	mov	r8, r0
 800b27e:	4689      	mov	r9, r1
 800b280:	f7f5 fc34 	bl	8000aec <__aeabi_dcmplt>
 800b284:	2800      	cmp	r0, #0
 800b286:	d164      	bne.n	800b352 <_dtoa_r+0x62a>
 800b288:	4642      	mov	r2, r8
 800b28a:	464b      	mov	r3, r9
 800b28c:	4937      	ldr	r1, [pc, #220]	; (800b36c <_dtoa_r+0x644>)
 800b28e:	2000      	movs	r0, #0
 800b290:	f7f5 f802 	bl	8000298 <__aeabi_dsub>
 800b294:	ec53 2b19 	vmov	r2, r3, d9
 800b298:	f7f5 fc28 	bl	8000aec <__aeabi_dcmplt>
 800b29c:	2800      	cmp	r0, #0
 800b29e:	f040 80b6 	bne.w	800b40e <_dtoa_r+0x6e6>
 800b2a2:	9b02      	ldr	r3, [sp, #8]
 800b2a4:	429d      	cmp	r5, r3
 800b2a6:	f43f af7c 	beq.w	800b1a2 <_dtoa_r+0x47a>
 800b2aa:	4b31      	ldr	r3, [pc, #196]	; (800b370 <_dtoa_r+0x648>)
 800b2ac:	ec51 0b19 	vmov	r0, r1, d9
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f7f5 f9a9 	bl	8000608 <__aeabi_dmul>
 800b2b6:	4b2e      	ldr	r3, [pc, #184]	; (800b370 <_dtoa_r+0x648>)
 800b2b8:	ec41 0b19 	vmov	d9, r0, r1
 800b2bc:	2200      	movs	r2, #0
 800b2be:	4640      	mov	r0, r8
 800b2c0:	4649      	mov	r1, r9
 800b2c2:	f7f5 f9a1 	bl	8000608 <__aeabi_dmul>
 800b2c6:	4680      	mov	r8, r0
 800b2c8:	4689      	mov	r9, r1
 800b2ca:	e7c5      	b.n	800b258 <_dtoa_r+0x530>
 800b2cc:	ec51 0b17 	vmov	r0, r1, d7
 800b2d0:	f7f5 f99a 	bl	8000608 <__aeabi_dmul>
 800b2d4:	9b02      	ldr	r3, [sp, #8]
 800b2d6:	9d00      	ldr	r5, [sp, #0]
 800b2d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2da:	ec41 0b19 	vmov	d9, r0, r1
 800b2de:	4649      	mov	r1, r9
 800b2e0:	4640      	mov	r0, r8
 800b2e2:	f7f5 fc41 	bl	8000b68 <__aeabi_d2iz>
 800b2e6:	4606      	mov	r6, r0
 800b2e8:	f7f5 f924 	bl	8000534 <__aeabi_i2d>
 800b2ec:	3630      	adds	r6, #48	; 0x30
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	4640      	mov	r0, r8
 800b2f4:	4649      	mov	r1, r9
 800b2f6:	f7f4 ffcf 	bl	8000298 <__aeabi_dsub>
 800b2fa:	f805 6b01 	strb.w	r6, [r5], #1
 800b2fe:	9b02      	ldr	r3, [sp, #8]
 800b300:	429d      	cmp	r5, r3
 800b302:	4680      	mov	r8, r0
 800b304:	4689      	mov	r9, r1
 800b306:	f04f 0200 	mov.w	r2, #0
 800b30a:	d124      	bne.n	800b356 <_dtoa_r+0x62e>
 800b30c:	4b1b      	ldr	r3, [pc, #108]	; (800b37c <_dtoa_r+0x654>)
 800b30e:	ec51 0b19 	vmov	r0, r1, d9
 800b312:	f7f4 ffc3 	bl	800029c <__adddf3>
 800b316:	4602      	mov	r2, r0
 800b318:	460b      	mov	r3, r1
 800b31a:	4640      	mov	r0, r8
 800b31c:	4649      	mov	r1, r9
 800b31e:	f7f5 fc03 	bl	8000b28 <__aeabi_dcmpgt>
 800b322:	2800      	cmp	r0, #0
 800b324:	d173      	bne.n	800b40e <_dtoa_r+0x6e6>
 800b326:	ec53 2b19 	vmov	r2, r3, d9
 800b32a:	4914      	ldr	r1, [pc, #80]	; (800b37c <_dtoa_r+0x654>)
 800b32c:	2000      	movs	r0, #0
 800b32e:	f7f4 ffb3 	bl	8000298 <__aeabi_dsub>
 800b332:	4602      	mov	r2, r0
 800b334:	460b      	mov	r3, r1
 800b336:	4640      	mov	r0, r8
 800b338:	4649      	mov	r1, r9
 800b33a:	f7f5 fbd7 	bl	8000aec <__aeabi_dcmplt>
 800b33e:	2800      	cmp	r0, #0
 800b340:	f43f af2f 	beq.w	800b1a2 <_dtoa_r+0x47a>
 800b344:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b346:	1e6b      	subs	r3, r5, #1
 800b348:	930f      	str	r3, [sp, #60]	; 0x3c
 800b34a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b34e:	2b30      	cmp	r3, #48	; 0x30
 800b350:	d0f8      	beq.n	800b344 <_dtoa_r+0x61c>
 800b352:	46bb      	mov	fp, r7
 800b354:	e04a      	b.n	800b3ec <_dtoa_r+0x6c4>
 800b356:	4b06      	ldr	r3, [pc, #24]	; (800b370 <_dtoa_r+0x648>)
 800b358:	f7f5 f956 	bl	8000608 <__aeabi_dmul>
 800b35c:	4680      	mov	r8, r0
 800b35e:	4689      	mov	r9, r1
 800b360:	e7bd      	b.n	800b2de <_dtoa_r+0x5b6>
 800b362:	bf00      	nop
 800b364:	0800dfa0 	.word	0x0800dfa0
 800b368:	0800df78 	.word	0x0800df78
 800b36c:	3ff00000 	.word	0x3ff00000
 800b370:	40240000 	.word	0x40240000
 800b374:	401c0000 	.word	0x401c0000
 800b378:	40140000 	.word	0x40140000
 800b37c:	3fe00000 	.word	0x3fe00000
 800b380:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b384:	9d00      	ldr	r5, [sp, #0]
 800b386:	4642      	mov	r2, r8
 800b388:	464b      	mov	r3, r9
 800b38a:	4630      	mov	r0, r6
 800b38c:	4639      	mov	r1, r7
 800b38e:	f7f5 fa65 	bl	800085c <__aeabi_ddiv>
 800b392:	f7f5 fbe9 	bl	8000b68 <__aeabi_d2iz>
 800b396:	9001      	str	r0, [sp, #4]
 800b398:	f7f5 f8cc 	bl	8000534 <__aeabi_i2d>
 800b39c:	4642      	mov	r2, r8
 800b39e:	464b      	mov	r3, r9
 800b3a0:	f7f5 f932 	bl	8000608 <__aeabi_dmul>
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	4639      	mov	r1, r7
 800b3ac:	f7f4 ff74 	bl	8000298 <__aeabi_dsub>
 800b3b0:	9e01      	ldr	r6, [sp, #4]
 800b3b2:	9f04      	ldr	r7, [sp, #16]
 800b3b4:	3630      	adds	r6, #48	; 0x30
 800b3b6:	f805 6b01 	strb.w	r6, [r5], #1
 800b3ba:	9e00      	ldr	r6, [sp, #0]
 800b3bc:	1bae      	subs	r6, r5, r6
 800b3be:	42b7      	cmp	r7, r6
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	d134      	bne.n	800b430 <_dtoa_r+0x708>
 800b3c6:	f7f4 ff69 	bl	800029c <__adddf3>
 800b3ca:	4642      	mov	r2, r8
 800b3cc:	464b      	mov	r3, r9
 800b3ce:	4606      	mov	r6, r0
 800b3d0:	460f      	mov	r7, r1
 800b3d2:	f7f5 fba9 	bl	8000b28 <__aeabi_dcmpgt>
 800b3d6:	b9c8      	cbnz	r0, 800b40c <_dtoa_r+0x6e4>
 800b3d8:	4642      	mov	r2, r8
 800b3da:	464b      	mov	r3, r9
 800b3dc:	4630      	mov	r0, r6
 800b3de:	4639      	mov	r1, r7
 800b3e0:	f7f5 fb7a 	bl	8000ad8 <__aeabi_dcmpeq>
 800b3e4:	b110      	cbz	r0, 800b3ec <_dtoa_r+0x6c4>
 800b3e6:	9b01      	ldr	r3, [sp, #4]
 800b3e8:	07db      	lsls	r3, r3, #31
 800b3ea:	d40f      	bmi.n	800b40c <_dtoa_r+0x6e4>
 800b3ec:	4651      	mov	r1, sl
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	f000 ff36 	bl	800c260 <_Bfree>
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b3f8:	702b      	strb	r3, [r5, #0]
 800b3fa:	f10b 0301 	add.w	r3, fp, #1
 800b3fe:	6013      	str	r3, [r2, #0]
 800b400:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b402:	2b00      	cmp	r3, #0
 800b404:	f43f ace2 	beq.w	800adcc <_dtoa_r+0xa4>
 800b408:	601d      	str	r5, [r3, #0]
 800b40a:	e4df      	b.n	800adcc <_dtoa_r+0xa4>
 800b40c:	465f      	mov	r7, fp
 800b40e:	462b      	mov	r3, r5
 800b410:	461d      	mov	r5, r3
 800b412:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b416:	2a39      	cmp	r2, #57	; 0x39
 800b418:	d106      	bne.n	800b428 <_dtoa_r+0x700>
 800b41a:	9a00      	ldr	r2, [sp, #0]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d1f7      	bne.n	800b410 <_dtoa_r+0x6e8>
 800b420:	9900      	ldr	r1, [sp, #0]
 800b422:	2230      	movs	r2, #48	; 0x30
 800b424:	3701      	adds	r7, #1
 800b426:	700a      	strb	r2, [r1, #0]
 800b428:	781a      	ldrb	r2, [r3, #0]
 800b42a:	3201      	adds	r2, #1
 800b42c:	701a      	strb	r2, [r3, #0]
 800b42e:	e790      	b.n	800b352 <_dtoa_r+0x62a>
 800b430:	4ba3      	ldr	r3, [pc, #652]	; (800b6c0 <_dtoa_r+0x998>)
 800b432:	2200      	movs	r2, #0
 800b434:	f7f5 f8e8 	bl	8000608 <__aeabi_dmul>
 800b438:	2200      	movs	r2, #0
 800b43a:	2300      	movs	r3, #0
 800b43c:	4606      	mov	r6, r0
 800b43e:	460f      	mov	r7, r1
 800b440:	f7f5 fb4a 	bl	8000ad8 <__aeabi_dcmpeq>
 800b444:	2800      	cmp	r0, #0
 800b446:	d09e      	beq.n	800b386 <_dtoa_r+0x65e>
 800b448:	e7d0      	b.n	800b3ec <_dtoa_r+0x6c4>
 800b44a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b44c:	2a00      	cmp	r2, #0
 800b44e:	f000 80ca 	beq.w	800b5e6 <_dtoa_r+0x8be>
 800b452:	9a07      	ldr	r2, [sp, #28]
 800b454:	2a01      	cmp	r2, #1
 800b456:	f300 80ad 	bgt.w	800b5b4 <_dtoa_r+0x88c>
 800b45a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b45c:	2a00      	cmp	r2, #0
 800b45e:	f000 80a5 	beq.w	800b5ac <_dtoa_r+0x884>
 800b462:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b466:	9e08      	ldr	r6, [sp, #32]
 800b468:	9d05      	ldr	r5, [sp, #20]
 800b46a:	9a05      	ldr	r2, [sp, #20]
 800b46c:	441a      	add	r2, r3
 800b46e:	9205      	str	r2, [sp, #20]
 800b470:	9a06      	ldr	r2, [sp, #24]
 800b472:	2101      	movs	r1, #1
 800b474:	441a      	add	r2, r3
 800b476:	4620      	mov	r0, r4
 800b478:	9206      	str	r2, [sp, #24]
 800b47a:	f000 fff1 	bl	800c460 <__i2b>
 800b47e:	4607      	mov	r7, r0
 800b480:	b165      	cbz	r5, 800b49c <_dtoa_r+0x774>
 800b482:	9b06      	ldr	r3, [sp, #24]
 800b484:	2b00      	cmp	r3, #0
 800b486:	dd09      	ble.n	800b49c <_dtoa_r+0x774>
 800b488:	42ab      	cmp	r3, r5
 800b48a:	9a05      	ldr	r2, [sp, #20]
 800b48c:	bfa8      	it	ge
 800b48e:	462b      	movge	r3, r5
 800b490:	1ad2      	subs	r2, r2, r3
 800b492:	9205      	str	r2, [sp, #20]
 800b494:	9a06      	ldr	r2, [sp, #24]
 800b496:	1aed      	subs	r5, r5, r3
 800b498:	1ad3      	subs	r3, r2, r3
 800b49a:	9306      	str	r3, [sp, #24]
 800b49c:	9b08      	ldr	r3, [sp, #32]
 800b49e:	b1f3      	cbz	r3, 800b4de <_dtoa_r+0x7b6>
 800b4a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	f000 80a3 	beq.w	800b5ee <_dtoa_r+0x8c6>
 800b4a8:	2e00      	cmp	r6, #0
 800b4aa:	dd10      	ble.n	800b4ce <_dtoa_r+0x7a6>
 800b4ac:	4639      	mov	r1, r7
 800b4ae:	4632      	mov	r2, r6
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	f001 f895 	bl	800c5e0 <__pow5mult>
 800b4b6:	4652      	mov	r2, sl
 800b4b8:	4601      	mov	r1, r0
 800b4ba:	4607      	mov	r7, r0
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f000 ffe5 	bl	800c48c <__multiply>
 800b4c2:	4651      	mov	r1, sl
 800b4c4:	4680      	mov	r8, r0
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	f000 feca 	bl	800c260 <_Bfree>
 800b4cc:	46c2      	mov	sl, r8
 800b4ce:	9b08      	ldr	r3, [sp, #32]
 800b4d0:	1b9a      	subs	r2, r3, r6
 800b4d2:	d004      	beq.n	800b4de <_dtoa_r+0x7b6>
 800b4d4:	4651      	mov	r1, sl
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	f001 f882 	bl	800c5e0 <__pow5mult>
 800b4dc:	4682      	mov	sl, r0
 800b4de:	2101      	movs	r1, #1
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	f000 ffbd 	bl	800c460 <__i2b>
 800b4e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	4606      	mov	r6, r0
 800b4ec:	f340 8081 	ble.w	800b5f2 <_dtoa_r+0x8ca>
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	4601      	mov	r1, r0
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	f001 f873 	bl	800c5e0 <__pow5mult>
 800b4fa:	9b07      	ldr	r3, [sp, #28]
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	4606      	mov	r6, r0
 800b500:	dd7a      	ble.n	800b5f8 <_dtoa_r+0x8d0>
 800b502:	f04f 0800 	mov.w	r8, #0
 800b506:	6933      	ldr	r3, [r6, #16]
 800b508:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b50c:	6918      	ldr	r0, [r3, #16]
 800b50e:	f000 ff59 	bl	800c3c4 <__hi0bits>
 800b512:	f1c0 0020 	rsb	r0, r0, #32
 800b516:	9b06      	ldr	r3, [sp, #24]
 800b518:	4418      	add	r0, r3
 800b51a:	f010 001f 	ands.w	r0, r0, #31
 800b51e:	f000 8094 	beq.w	800b64a <_dtoa_r+0x922>
 800b522:	f1c0 0320 	rsb	r3, r0, #32
 800b526:	2b04      	cmp	r3, #4
 800b528:	f340 8085 	ble.w	800b636 <_dtoa_r+0x90e>
 800b52c:	9b05      	ldr	r3, [sp, #20]
 800b52e:	f1c0 001c 	rsb	r0, r0, #28
 800b532:	4403      	add	r3, r0
 800b534:	9305      	str	r3, [sp, #20]
 800b536:	9b06      	ldr	r3, [sp, #24]
 800b538:	4403      	add	r3, r0
 800b53a:	4405      	add	r5, r0
 800b53c:	9306      	str	r3, [sp, #24]
 800b53e:	9b05      	ldr	r3, [sp, #20]
 800b540:	2b00      	cmp	r3, #0
 800b542:	dd05      	ble.n	800b550 <_dtoa_r+0x828>
 800b544:	4651      	mov	r1, sl
 800b546:	461a      	mov	r2, r3
 800b548:	4620      	mov	r0, r4
 800b54a:	f001 f8a3 	bl	800c694 <__lshift>
 800b54e:	4682      	mov	sl, r0
 800b550:	9b06      	ldr	r3, [sp, #24]
 800b552:	2b00      	cmp	r3, #0
 800b554:	dd05      	ble.n	800b562 <_dtoa_r+0x83a>
 800b556:	4631      	mov	r1, r6
 800b558:	461a      	mov	r2, r3
 800b55a:	4620      	mov	r0, r4
 800b55c:	f001 f89a 	bl	800c694 <__lshift>
 800b560:	4606      	mov	r6, r0
 800b562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b564:	2b00      	cmp	r3, #0
 800b566:	d072      	beq.n	800b64e <_dtoa_r+0x926>
 800b568:	4631      	mov	r1, r6
 800b56a:	4650      	mov	r0, sl
 800b56c:	f001 f8fe 	bl	800c76c <__mcmp>
 800b570:	2800      	cmp	r0, #0
 800b572:	da6c      	bge.n	800b64e <_dtoa_r+0x926>
 800b574:	2300      	movs	r3, #0
 800b576:	4651      	mov	r1, sl
 800b578:	220a      	movs	r2, #10
 800b57a:	4620      	mov	r0, r4
 800b57c:	f000 fe92 	bl	800c2a4 <__multadd>
 800b580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b582:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b586:	4682      	mov	sl, r0
 800b588:	2b00      	cmp	r3, #0
 800b58a:	f000 81b0 	beq.w	800b8ee <_dtoa_r+0xbc6>
 800b58e:	2300      	movs	r3, #0
 800b590:	4639      	mov	r1, r7
 800b592:	220a      	movs	r2, #10
 800b594:	4620      	mov	r0, r4
 800b596:	f000 fe85 	bl	800c2a4 <__multadd>
 800b59a:	9b01      	ldr	r3, [sp, #4]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	4607      	mov	r7, r0
 800b5a0:	f300 8096 	bgt.w	800b6d0 <_dtoa_r+0x9a8>
 800b5a4:	9b07      	ldr	r3, [sp, #28]
 800b5a6:	2b02      	cmp	r3, #2
 800b5a8:	dc59      	bgt.n	800b65e <_dtoa_r+0x936>
 800b5aa:	e091      	b.n	800b6d0 <_dtoa_r+0x9a8>
 800b5ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b5ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b5b2:	e758      	b.n	800b466 <_dtoa_r+0x73e>
 800b5b4:	9b04      	ldr	r3, [sp, #16]
 800b5b6:	1e5e      	subs	r6, r3, #1
 800b5b8:	9b08      	ldr	r3, [sp, #32]
 800b5ba:	42b3      	cmp	r3, r6
 800b5bc:	bfbf      	itttt	lt
 800b5be:	9b08      	ldrlt	r3, [sp, #32]
 800b5c0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b5c2:	9608      	strlt	r6, [sp, #32]
 800b5c4:	1af3      	sublt	r3, r6, r3
 800b5c6:	bfb4      	ite	lt
 800b5c8:	18d2      	addlt	r2, r2, r3
 800b5ca:	1b9e      	subge	r6, r3, r6
 800b5cc:	9b04      	ldr	r3, [sp, #16]
 800b5ce:	bfbc      	itt	lt
 800b5d0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b5d2:	2600      	movlt	r6, #0
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	bfb7      	itett	lt
 800b5d8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b5dc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b5e0:	1a9d      	sublt	r5, r3, r2
 800b5e2:	2300      	movlt	r3, #0
 800b5e4:	e741      	b.n	800b46a <_dtoa_r+0x742>
 800b5e6:	9e08      	ldr	r6, [sp, #32]
 800b5e8:	9d05      	ldr	r5, [sp, #20]
 800b5ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b5ec:	e748      	b.n	800b480 <_dtoa_r+0x758>
 800b5ee:	9a08      	ldr	r2, [sp, #32]
 800b5f0:	e770      	b.n	800b4d4 <_dtoa_r+0x7ac>
 800b5f2:	9b07      	ldr	r3, [sp, #28]
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	dc19      	bgt.n	800b62c <_dtoa_r+0x904>
 800b5f8:	9b02      	ldr	r3, [sp, #8]
 800b5fa:	b9bb      	cbnz	r3, 800b62c <_dtoa_r+0x904>
 800b5fc:	9b03      	ldr	r3, [sp, #12]
 800b5fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b602:	b99b      	cbnz	r3, 800b62c <_dtoa_r+0x904>
 800b604:	9b03      	ldr	r3, [sp, #12]
 800b606:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b60a:	0d1b      	lsrs	r3, r3, #20
 800b60c:	051b      	lsls	r3, r3, #20
 800b60e:	b183      	cbz	r3, 800b632 <_dtoa_r+0x90a>
 800b610:	9b05      	ldr	r3, [sp, #20]
 800b612:	3301      	adds	r3, #1
 800b614:	9305      	str	r3, [sp, #20]
 800b616:	9b06      	ldr	r3, [sp, #24]
 800b618:	3301      	adds	r3, #1
 800b61a:	9306      	str	r3, [sp, #24]
 800b61c:	f04f 0801 	mov.w	r8, #1
 800b620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b622:	2b00      	cmp	r3, #0
 800b624:	f47f af6f 	bne.w	800b506 <_dtoa_r+0x7de>
 800b628:	2001      	movs	r0, #1
 800b62a:	e774      	b.n	800b516 <_dtoa_r+0x7ee>
 800b62c:	f04f 0800 	mov.w	r8, #0
 800b630:	e7f6      	b.n	800b620 <_dtoa_r+0x8f8>
 800b632:	4698      	mov	r8, r3
 800b634:	e7f4      	b.n	800b620 <_dtoa_r+0x8f8>
 800b636:	d082      	beq.n	800b53e <_dtoa_r+0x816>
 800b638:	9a05      	ldr	r2, [sp, #20]
 800b63a:	331c      	adds	r3, #28
 800b63c:	441a      	add	r2, r3
 800b63e:	9205      	str	r2, [sp, #20]
 800b640:	9a06      	ldr	r2, [sp, #24]
 800b642:	441a      	add	r2, r3
 800b644:	441d      	add	r5, r3
 800b646:	9206      	str	r2, [sp, #24]
 800b648:	e779      	b.n	800b53e <_dtoa_r+0x816>
 800b64a:	4603      	mov	r3, r0
 800b64c:	e7f4      	b.n	800b638 <_dtoa_r+0x910>
 800b64e:	9b04      	ldr	r3, [sp, #16]
 800b650:	2b00      	cmp	r3, #0
 800b652:	dc37      	bgt.n	800b6c4 <_dtoa_r+0x99c>
 800b654:	9b07      	ldr	r3, [sp, #28]
 800b656:	2b02      	cmp	r3, #2
 800b658:	dd34      	ble.n	800b6c4 <_dtoa_r+0x99c>
 800b65a:	9b04      	ldr	r3, [sp, #16]
 800b65c:	9301      	str	r3, [sp, #4]
 800b65e:	9b01      	ldr	r3, [sp, #4]
 800b660:	b963      	cbnz	r3, 800b67c <_dtoa_r+0x954>
 800b662:	4631      	mov	r1, r6
 800b664:	2205      	movs	r2, #5
 800b666:	4620      	mov	r0, r4
 800b668:	f000 fe1c 	bl	800c2a4 <__multadd>
 800b66c:	4601      	mov	r1, r0
 800b66e:	4606      	mov	r6, r0
 800b670:	4650      	mov	r0, sl
 800b672:	f001 f87b 	bl	800c76c <__mcmp>
 800b676:	2800      	cmp	r0, #0
 800b678:	f73f adbb 	bgt.w	800b1f2 <_dtoa_r+0x4ca>
 800b67c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b67e:	9d00      	ldr	r5, [sp, #0]
 800b680:	ea6f 0b03 	mvn.w	fp, r3
 800b684:	f04f 0800 	mov.w	r8, #0
 800b688:	4631      	mov	r1, r6
 800b68a:	4620      	mov	r0, r4
 800b68c:	f000 fde8 	bl	800c260 <_Bfree>
 800b690:	2f00      	cmp	r7, #0
 800b692:	f43f aeab 	beq.w	800b3ec <_dtoa_r+0x6c4>
 800b696:	f1b8 0f00 	cmp.w	r8, #0
 800b69a:	d005      	beq.n	800b6a8 <_dtoa_r+0x980>
 800b69c:	45b8      	cmp	r8, r7
 800b69e:	d003      	beq.n	800b6a8 <_dtoa_r+0x980>
 800b6a0:	4641      	mov	r1, r8
 800b6a2:	4620      	mov	r0, r4
 800b6a4:	f000 fddc 	bl	800c260 <_Bfree>
 800b6a8:	4639      	mov	r1, r7
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	f000 fdd8 	bl	800c260 <_Bfree>
 800b6b0:	e69c      	b.n	800b3ec <_dtoa_r+0x6c4>
 800b6b2:	2600      	movs	r6, #0
 800b6b4:	4637      	mov	r7, r6
 800b6b6:	e7e1      	b.n	800b67c <_dtoa_r+0x954>
 800b6b8:	46bb      	mov	fp, r7
 800b6ba:	4637      	mov	r7, r6
 800b6bc:	e599      	b.n	800b1f2 <_dtoa_r+0x4ca>
 800b6be:	bf00      	nop
 800b6c0:	40240000 	.word	0x40240000
 800b6c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	f000 80c8 	beq.w	800b85c <_dtoa_r+0xb34>
 800b6cc:	9b04      	ldr	r3, [sp, #16]
 800b6ce:	9301      	str	r3, [sp, #4]
 800b6d0:	2d00      	cmp	r5, #0
 800b6d2:	dd05      	ble.n	800b6e0 <_dtoa_r+0x9b8>
 800b6d4:	4639      	mov	r1, r7
 800b6d6:	462a      	mov	r2, r5
 800b6d8:	4620      	mov	r0, r4
 800b6da:	f000 ffdb 	bl	800c694 <__lshift>
 800b6de:	4607      	mov	r7, r0
 800b6e0:	f1b8 0f00 	cmp.w	r8, #0
 800b6e4:	d05b      	beq.n	800b79e <_dtoa_r+0xa76>
 800b6e6:	6879      	ldr	r1, [r7, #4]
 800b6e8:	4620      	mov	r0, r4
 800b6ea:	f000 fd79 	bl	800c1e0 <_Balloc>
 800b6ee:	4605      	mov	r5, r0
 800b6f0:	b928      	cbnz	r0, 800b6fe <_dtoa_r+0x9d6>
 800b6f2:	4b83      	ldr	r3, [pc, #524]	; (800b900 <_dtoa_r+0xbd8>)
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b6fa:	f7ff bb2e 	b.w	800ad5a <_dtoa_r+0x32>
 800b6fe:	693a      	ldr	r2, [r7, #16]
 800b700:	3202      	adds	r2, #2
 800b702:	0092      	lsls	r2, r2, #2
 800b704:	f107 010c 	add.w	r1, r7, #12
 800b708:	300c      	adds	r0, #12
 800b70a:	f7ff fa64 	bl	800abd6 <memcpy>
 800b70e:	2201      	movs	r2, #1
 800b710:	4629      	mov	r1, r5
 800b712:	4620      	mov	r0, r4
 800b714:	f000 ffbe 	bl	800c694 <__lshift>
 800b718:	9b00      	ldr	r3, [sp, #0]
 800b71a:	3301      	adds	r3, #1
 800b71c:	9304      	str	r3, [sp, #16]
 800b71e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b722:	4413      	add	r3, r2
 800b724:	9308      	str	r3, [sp, #32]
 800b726:	9b02      	ldr	r3, [sp, #8]
 800b728:	f003 0301 	and.w	r3, r3, #1
 800b72c:	46b8      	mov	r8, r7
 800b72e:	9306      	str	r3, [sp, #24]
 800b730:	4607      	mov	r7, r0
 800b732:	9b04      	ldr	r3, [sp, #16]
 800b734:	4631      	mov	r1, r6
 800b736:	3b01      	subs	r3, #1
 800b738:	4650      	mov	r0, sl
 800b73a:	9301      	str	r3, [sp, #4]
 800b73c:	f7ff fa6a 	bl	800ac14 <quorem>
 800b740:	4641      	mov	r1, r8
 800b742:	9002      	str	r0, [sp, #8]
 800b744:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b748:	4650      	mov	r0, sl
 800b74a:	f001 f80f 	bl	800c76c <__mcmp>
 800b74e:	463a      	mov	r2, r7
 800b750:	9005      	str	r0, [sp, #20]
 800b752:	4631      	mov	r1, r6
 800b754:	4620      	mov	r0, r4
 800b756:	f001 f825 	bl	800c7a4 <__mdiff>
 800b75a:	68c2      	ldr	r2, [r0, #12]
 800b75c:	4605      	mov	r5, r0
 800b75e:	bb02      	cbnz	r2, 800b7a2 <_dtoa_r+0xa7a>
 800b760:	4601      	mov	r1, r0
 800b762:	4650      	mov	r0, sl
 800b764:	f001 f802 	bl	800c76c <__mcmp>
 800b768:	4602      	mov	r2, r0
 800b76a:	4629      	mov	r1, r5
 800b76c:	4620      	mov	r0, r4
 800b76e:	9209      	str	r2, [sp, #36]	; 0x24
 800b770:	f000 fd76 	bl	800c260 <_Bfree>
 800b774:	9b07      	ldr	r3, [sp, #28]
 800b776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b778:	9d04      	ldr	r5, [sp, #16]
 800b77a:	ea43 0102 	orr.w	r1, r3, r2
 800b77e:	9b06      	ldr	r3, [sp, #24]
 800b780:	4319      	orrs	r1, r3
 800b782:	d110      	bne.n	800b7a6 <_dtoa_r+0xa7e>
 800b784:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b788:	d029      	beq.n	800b7de <_dtoa_r+0xab6>
 800b78a:	9b05      	ldr	r3, [sp, #20]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	dd02      	ble.n	800b796 <_dtoa_r+0xa6e>
 800b790:	9b02      	ldr	r3, [sp, #8]
 800b792:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b796:	9b01      	ldr	r3, [sp, #4]
 800b798:	f883 9000 	strb.w	r9, [r3]
 800b79c:	e774      	b.n	800b688 <_dtoa_r+0x960>
 800b79e:	4638      	mov	r0, r7
 800b7a0:	e7ba      	b.n	800b718 <_dtoa_r+0x9f0>
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	e7e1      	b.n	800b76a <_dtoa_r+0xa42>
 800b7a6:	9b05      	ldr	r3, [sp, #20]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	db04      	blt.n	800b7b6 <_dtoa_r+0xa8e>
 800b7ac:	9907      	ldr	r1, [sp, #28]
 800b7ae:	430b      	orrs	r3, r1
 800b7b0:	9906      	ldr	r1, [sp, #24]
 800b7b2:	430b      	orrs	r3, r1
 800b7b4:	d120      	bne.n	800b7f8 <_dtoa_r+0xad0>
 800b7b6:	2a00      	cmp	r2, #0
 800b7b8:	dded      	ble.n	800b796 <_dtoa_r+0xa6e>
 800b7ba:	4651      	mov	r1, sl
 800b7bc:	2201      	movs	r2, #1
 800b7be:	4620      	mov	r0, r4
 800b7c0:	f000 ff68 	bl	800c694 <__lshift>
 800b7c4:	4631      	mov	r1, r6
 800b7c6:	4682      	mov	sl, r0
 800b7c8:	f000 ffd0 	bl	800c76c <__mcmp>
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	dc03      	bgt.n	800b7d8 <_dtoa_r+0xab0>
 800b7d0:	d1e1      	bne.n	800b796 <_dtoa_r+0xa6e>
 800b7d2:	f019 0f01 	tst.w	r9, #1
 800b7d6:	d0de      	beq.n	800b796 <_dtoa_r+0xa6e>
 800b7d8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b7dc:	d1d8      	bne.n	800b790 <_dtoa_r+0xa68>
 800b7de:	9a01      	ldr	r2, [sp, #4]
 800b7e0:	2339      	movs	r3, #57	; 0x39
 800b7e2:	7013      	strb	r3, [r2, #0]
 800b7e4:	462b      	mov	r3, r5
 800b7e6:	461d      	mov	r5, r3
 800b7e8:	3b01      	subs	r3, #1
 800b7ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b7ee:	2a39      	cmp	r2, #57	; 0x39
 800b7f0:	d06c      	beq.n	800b8cc <_dtoa_r+0xba4>
 800b7f2:	3201      	adds	r2, #1
 800b7f4:	701a      	strb	r2, [r3, #0]
 800b7f6:	e747      	b.n	800b688 <_dtoa_r+0x960>
 800b7f8:	2a00      	cmp	r2, #0
 800b7fa:	dd07      	ble.n	800b80c <_dtoa_r+0xae4>
 800b7fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b800:	d0ed      	beq.n	800b7de <_dtoa_r+0xab6>
 800b802:	9a01      	ldr	r2, [sp, #4]
 800b804:	f109 0301 	add.w	r3, r9, #1
 800b808:	7013      	strb	r3, [r2, #0]
 800b80a:	e73d      	b.n	800b688 <_dtoa_r+0x960>
 800b80c:	9b04      	ldr	r3, [sp, #16]
 800b80e:	9a08      	ldr	r2, [sp, #32]
 800b810:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b814:	4293      	cmp	r3, r2
 800b816:	d043      	beq.n	800b8a0 <_dtoa_r+0xb78>
 800b818:	4651      	mov	r1, sl
 800b81a:	2300      	movs	r3, #0
 800b81c:	220a      	movs	r2, #10
 800b81e:	4620      	mov	r0, r4
 800b820:	f000 fd40 	bl	800c2a4 <__multadd>
 800b824:	45b8      	cmp	r8, r7
 800b826:	4682      	mov	sl, r0
 800b828:	f04f 0300 	mov.w	r3, #0
 800b82c:	f04f 020a 	mov.w	r2, #10
 800b830:	4641      	mov	r1, r8
 800b832:	4620      	mov	r0, r4
 800b834:	d107      	bne.n	800b846 <_dtoa_r+0xb1e>
 800b836:	f000 fd35 	bl	800c2a4 <__multadd>
 800b83a:	4680      	mov	r8, r0
 800b83c:	4607      	mov	r7, r0
 800b83e:	9b04      	ldr	r3, [sp, #16]
 800b840:	3301      	adds	r3, #1
 800b842:	9304      	str	r3, [sp, #16]
 800b844:	e775      	b.n	800b732 <_dtoa_r+0xa0a>
 800b846:	f000 fd2d 	bl	800c2a4 <__multadd>
 800b84a:	4639      	mov	r1, r7
 800b84c:	4680      	mov	r8, r0
 800b84e:	2300      	movs	r3, #0
 800b850:	220a      	movs	r2, #10
 800b852:	4620      	mov	r0, r4
 800b854:	f000 fd26 	bl	800c2a4 <__multadd>
 800b858:	4607      	mov	r7, r0
 800b85a:	e7f0      	b.n	800b83e <_dtoa_r+0xb16>
 800b85c:	9b04      	ldr	r3, [sp, #16]
 800b85e:	9301      	str	r3, [sp, #4]
 800b860:	9d00      	ldr	r5, [sp, #0]
 800b862:	4631      	mov	r1, r6
 800b864:	4650      	mov	r0, sl
 800b866:	f7ff f9d5 	bl	800ac14 <quorem>
 800b86a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b86e:	9b00      	ldr	r3, [sp, #0]
 800b870:	f805 9b01 	strb.w	r9, [r5], #1
 800b874:	1aea      	subs	r2, r5, r3
 800b876:	9b01      	ldr	r3, [sp, #4]
 800b878:	4293      	cmp	r3, r2
 800b87a:	dd07      	ble.n	800b88c <_dtoa_r+0xb64>
 800b87c:	4651      	mov	r1, sl
 800b87e:	2300      	movs	r3, #0
 800b880:	220a      	movs	r2, #10
 800b882:	4620      	mov	r0, r4
 800b884:	f000 fd0e 	bl	800c2a4 <__multadd>
 800b888:	4682      	mov	sl, r0
 800b88a:	e7ea      	b.n	800b862 <_dtoa_r+0xb3a>
 800b88c:	9b01      	ldr	r3, [sp, #4]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	bfc8      	it	gt
 800b892:	461d      	movgt	r5, r3
 800b894:	9b00      	ldr	r3, [sp, #0]
 800b896:	bfd8      	it	le
 800b898:	2501      	movle	r5, #1
 800b89a:	441d      	add	r5, r3
 800b89c:	f04f 0800 	mov.w	r8, #0
 800b8a0:	4651      	mov	r1, sl
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	f000 fef5 	bl	800c694 <__lshift>
 800b8aa:	4631      	mov	r1, r6
 800b8ac:	4682      	mov	sl, r0
 800b8ae:	f000 ff5d 	bl	800c76c <__mcmp>
 800b8b2:	2800      	cmp	r0, #0
 800b8b4:	dc96      	bgt.n	800b7e4 <_dtoa_r+0xabc>
 800b8b6:	d102      	bne.n	800b8be <_dtoa_r+0xb96>
 800b8b8:	f019 0f01 	tst.w	r9, #1
 800b8bc:	d192      	bne.n	800b7e4 <_dtoa_r+0xabc>
 800b8be:	462b      	mov	r3, r5
 800b8c0:	461d      	mov	r5, r3
 800b8c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b8c6:	2a30      	cmp	r2, #48	; 0x30
 800b8c8:	d0fa      	beq.n	800b8c0 <_dtoa_r+0xb98>
 800b8ca:	e6dd      	b.n	800b688 <_dtoa_r+0x960>
 800b8cc:	9a00      	ldr	r2, [sp, #0]
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d189      	bne.n	800b7e6 <_dtoa_r+0xabe>
 800b8d2:	f10b 0b01 	add.w	fp, fp, #1
 800b8d6:	2331      	movs	r3, #49	; 0x31
 800b8d8:	e796      	b.n	800b808 <_dtoa_r+0xae0>
 800b8da:	4b0a      	ldr	r3, [pc, #40]	; (800b904 <_dtoa_r+0xbdc>)
 800b8dc:	f7ff ba99 	b.w	800ae12 <_dtoa_r+0xea>
 800b8e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	f47f aa6d 	bne.w	800adc2 <_dtoa_r+0x9a>
 800b8e8:	4b07      	ldr	r3, [pc, #28]	; (800b908 <_dtoa_r+0xbe0>)
 800b8ea:	f7ff ba92 	b.w	800ae12 <_dtoa_r+0xea>
 800b8ee:	9b01      	ldr	r3, [sp, #4]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	dcb5      	bgt.n	800b860 <_dtoa_r+0xb38>
 800b8f4:	9b07      	ldr	r3, [sp, #28]
 800b8f6:	2b02      	cmp	r3, #2
 800b8f8:	f73f aeb1 	bgt.w	800b65e <_dtoa_r+0x936>
 800b8fc:	e7b0      	b.n	800b860 <_dtoa_r+0xb38>
 800b8fe:	bf00      	nop
 800b900:	0800deae 	.word	0x0800deae
 800b904:	0800de01 	.word	0x0800de01
 800b908:	0800de32 	.word	0x0800de32

0800b90c <_free_r>:
 800b90c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b90e:	2900      	cmp	r1, #0
 800b910:	d044      	beq.n	800b99c <_free_r+0x90>
 800b912:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b916:	9001      	str	r0, [sp, #4]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	f1a1 0404 	sub.w	r4, r1, #4
 800b91e:	bfb8      	it	lt
 800b920:	18e4      	addlt	r4, r4, r3
 800b922:	f000 fc51 	bl	800c1c8 <__malloc_lock>
 800b926:	4a1e      	ldr	r2, [pc, #120]	; (800b9a0 <_free_r+0x94>)
 800b928:	9801      	ldr	r0, [sp, #4]
 800b92a:	6813      	ldr	r3, [r2, #0]
 800b92c:	b933      	cbnz	r3, 800b93c <_free_r+0x30>
 800b92e:	6063      	str	r3, [r4, #4]
 800b930:	6014      	str	r4, [r2, #0]
 800b932:	b003      	add	sp, #12
 800b934:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b938:	f000 bc4c 	b.w	800c1d4 <__malloc_unlock>
 800b93c:	42a3      	cmp	r3, r4
 800b93e:	d908      	bls.n	800b952 <_free_r+0x46>
 800b940:	6825      	ldr	r5, [r4, #0]
 800b942:	1961      	adds	r1, r4, r5
 800b944:	428b      	cmp	r3, r1
 800b946:	bf01      	itttt	eq
 800b948:	6819      	ldreq	r1, [r3, #0]
 800b94a:	685b      	ldreq	r3, [r3, #4]
 800b94c:	1949      	addeq	r1, r1, r5
 800b94e:	6021      	streq	r1, [r4, #0]
 800b950:	e7ed      	b.n	800b92e <_free_r+0x22>
 800b952:	461a      	mov	r2, r3
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	b10b      	cbz	r3, 800b95c <_free_r+0x50>
 800b958:	42a3      	cmp	r3, r4
 800b95a:	d9fa      	bls.n	800b952 <_free_r+0x46>
 800b95c:	6811      	ldr	r1, [r2, #0]
 800b95e:	1855      	adds	r5, r2, r1
 800b960:	42a5      	cmp	r5, r4
 800b962:	d10b      	bne.n	800b97c <_free_r+0x70>
 800b964:	6824      	ldr	r4, [r4, #0]
 800b966:	4421      	add	r1, r4
 800b968:	1854      	adds	r4, r2, r1
 800b96a:	42a3      	cmp	r3, r4
 800b96c:	6011      	str	r1, [r2, #0]
 800b96e:	d1e0      	bne.n	800b932 <_free_r+0x26>
 800b970:	681c      	ldr	r4, [r3, #0]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	6053      	str	r3, [r2, #4]
 800b976:	440c      	add	r4, r1
 800b978:	6014      	str	r4, [r2, #0]
 800b97a:	e7da      	b.n	800b932 <_free_r+0x26>
 800b97c:	d902      	bls.n	800b984 <_free_r+0x78>
 800b97e:	230c      	movs	r3, #12
 800b980:	6003      	str	r3, [r0, #0]
 800b982:	e7d6      	b.n	800b932 <_free_r+0x26>
 800b984:	6825      	ldr	r5, [r4, #0]
 800b986:	1961      	adds	r1, r4, r5
 800b988:	428b      	cmp	r3, r1
 800b98a:	bf04      	itt	eq
 800b98c:	6819      	ldreq	r1, [r3, #0]
 800b98e:	685b      	ldreq	r3, [r3, #4]
 800b990:	6063      	str	r3, [r4, #4]
 800b992:	bf04      	itt	eq
 800b994:	1949      	addeq	r1, r1, r5
 800b996:	6021      	streq	r1, [r4, #0]
 800b998:	6054      	str	r4, [r2, #4]
 800b99a:	e7ca      	b.n	800b932 <_free_r+0x26>
 800b99c:	b003      	add	sp, #12
 800b99e:	bd30      	pop	{r4, r5, pc}
 800b9a0:	200008f8 	.word	0x200008f8

0800b9a4 <rshift>:
 800b9a4:	6903      	ldr	r3, [r0, #16]
 800b9a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b9aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b9ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b9b2:	f100 0414 	add.w	r4, r0, #20
 800b9b6:	dd45      	ble.n	800ba44 <rshift+0xa0>
 800b9b8:	f011 011f 	ands.w	r1, r1, #31
 800b9bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b9c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b9c4:	d10c      	bne.n	800b9e0 <rshift+0x3c>
 800b9c6:	f100 0710 	add.w	r7, r0, #16
 800b9ca:	4629      	mov	r1, r5
 800b9cc:	42b1      	cmp	r1, r6
 800b9ce:	d334      	bcc.n	800ba3a <rshift+0x96>
 800b9d0:	1a9b      	subs	r3, r3, r2
 800b9d2:	009b      	lsls	r3, r3, #2
 800b9d4:	1eea      	subs	r2, r5, #3
 800b9d6:	4296      	cmp	r6, r2
 800b9d8:	bf38      	it	cc
 800b9da:	2300      	movcc	r3, #0
 800b9dc:	4423      	add	r3, r4
 800b9de:	e015      	b.n	800ba0c <rshift+0x68>
 800b9e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b9e4:	f1c1 0820 	rsb	r8, r1, #32
 800b9e8:	40cf      	lsrs	r7, r1
 800b9ea:	f105 0e04 	add.w	lr, r5, #4
 800b9ee:	46a1      	mov	r9, r4
 800b9f0:	4576      	cmp	r6, lr
 800b9f2:	46f4      	mov	ip, lr
 800b9f4:	d815      	bhi.n	800ba22 <rshift+0x7e>
 800b9f6:	1a9a      	subs	r2, r3, r2
 800b9f8:	0092      	lsls	r2, r2, #2
 800b9fa:	3a04      	subs	r2, #4
 800b9fc:	3501      	adds	r5, #1
 800b9fe:	42ae      	cmp	r6, r5
 800ba00:	bf38      	it	cc
 800ba02:	2200      	movcc	r2, #0
 800ba04:	18a3      	adds	r3, r4, r2
 800ba06:	50a7      	str	r7, [r4, r2]
 800ba08:	b107      	cbz	r7, 800ba0c <rshift+0x68>
 800ba0a:	3304      	adds	r3, #4
 800ba0c:	1b1a      	subs	r2, r3, r4
 800ba0e:	42a3      	cmp	r3, r4
 800ba10:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ba14:	bf08      	it	eq
 800ba16:	2300      	moveq	r3, #0
 800ba18:	6102      	str	r2, [r0, #16]
 800ba1a:	bf08      	it	eq
 800ba1c:	6143      	streq	r3, [r0, #20]
 800ba1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba22:	f8dc c000 	ldr.w	ip, [ip]
 800ba26:	fa0c fc08 	lsl.w	ip, ip, r8
 800ba2a:	ea4c 0707 	orr.w	r7, ip, r7
 800ba2e:	f849 7b04 	str.w	r7, [r9], #4
 800ba32:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ba36:	40cf      	lsrs	r7, r1
 800ba38:	e7da      	b.n	800b9f0 <rshift+0x4c>
 800ba3a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ba3e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ba42:	e7c3      	b.n	800b9cc <rshift+0x28>
 800ba44:	4623      	mov	r3, r4
 800ba46:	e7e1      	b.n	800ba0c <rshift+0x68>

0800ba48 <__hexdig_fun>:
 800ba48:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ba4c:	2b09      	cmp	r3, #9
 800ba4e:	d802      	bhi.n	800ba56 <__hexdig_fun+0xe>
 800ba50:	3820      	subs	r0, #32
 800ba52:	b2c0      	uxtb	r0, r0
 800ba54:	4770      	bx	lr
 800ba56:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ba5a:	2b05      	cmp	r3, #5
 800ba5c:	d801      	bhi.n	800ba62 <__hexdig_fun+0x1a>
 800ba5e:	3847      	subs	r0, #71	; 0x47
 800ba60:	e7f7      	b.n	800ba52 <__hexdig_fun+0xa>
 800ba62:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ba66:	2b05      	cmp	r3, #5
 800ba68:	d801      	bhi.n	800ba6e <__hexdig_fun+0x26>
 800ba6a:	3827      	subs	r0, #39	; 0x27
 800ba6c:	e7f1      	b.n	800ba52 <__hexdig_fun+0xa>
 800ba6e:	2000      	movs	r0, #0
 800ba70:	4770      	bx	lr
	...

0800ba74 <__gethex>:
 800ba74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba78:	4617      	mov	r7, r2
 800ba7a:	680a      	ldr	r2, [r1, #0]
 800ba7c:	b085      	sub	sp, #20
 800ba7e:	f102 0b02 	add.w	fp, r2, #2
 800ba82:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ba86:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ba8a:	4681      	mov	r9, r0
 800ba8c:	468a      	mov	sl, r1
 800ba8e:	9302      	str	r3, [sp, #8]
 800ba90:	32fe      	adds	r2, #254	; 0xfe
 800ba92:	eb02 030b 	add.w	r3, r2, fp
 800ba96:	46d8      	mov	r8, fp
 800ba98:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800ba9c:	9301      	str	r3, [sp, #4]
 800ba9e:	2830      	cmp	r0, #48	; 0x30
 800baa0:	d0f7      	beq.n	800ba92 <__gethex+0x1e>
 800baa2:	f7ff ffd1 	bl	800ba48 <__hexdig_fun>
 800baa6:	4604      	mov	r4, r0
 800baa8:	2800      	cmp	r0, #0
 800baaa:	d138      	bne.n	800bb1e <__gethex+0xaa>
 800baac:	49a7      	ldr	r1, [pc, #668]	; (800bd4c <__gethex+0x2d8>)
 800baae:	2201      	movs	r2, #1
 800bab0:	4640      	mov	r0, r8
 800bab2:	f7fe fff4 	bl	800aa9e <strncmp>
 800bab6:	4606      	mov	r6, r0
 800bab8:	2800      	cmp	r0, #0
 800baba:	d169      	bne.n	800bb90 <__gethex+0x11c>
 800babc:	f898 0001 	ldrb.w	r0, [r8, #1]
 800bac0:	465d      	mov	r5, fp
 800bac2:	f7ff ffc1 	bl	800ba48 <__hexdig_fun>
 800bac6:	2800      	cmp	r0, #0
 800bac8:	d064      	beq.n	800bb94 <__gethex+0x120>
 800baca:	465a      	mov	r2, fp
 800bacc:	7810      	ldrb	r0, [r2, #0]
 800bace:	2830      	cmp	r0, #48	; 0x30
 800bad0:	4690      	mov	r8, r2
 800bad2:	f102 0201 	add.w	r2, r2, #1
 800bad6:	d0f9      	beq.n	800bacc <__gethex+0x58>
 800bad8:	f7ff ffb6 	bl	800ba48 <__hexdig_fun>
 800badc:	2301      	movs	r3, #1
 800bade:	fab0 f480 	clz	r4, r0
 800bae2:	0964      	lsrs	r4, r4, #5
 800bae4:	465e      	mov	r6, fp
 800bae6:	9301      	str	r3, [sp, #4]
 800bae8:	4642      	mov	r2, r8
 800baea:	4615      	mov	r5, r2
 800baec:	3201      	adds	r2, #1
 800baee:	7828      	ldrb	r0, [r5, #0]
 800baf0:	f7ff ffaa 	bl	800ba48 <__hexdig_fun>
 800baf4:	2800      	cmp	r0, #0
 800baf6:	d1f8      	bne.n	800baea <__gethex+0x76>
 800baf8:	4994      	ldr	r1, [pc, #592]	; (800bd4c <__gethex+0x2d8>)
 800bafa:	2201      	movs	r2, #1
 800bafc:	4628      	mov	r0, r5
 800bafe:	f7fe ffce 	bl	800aa9e <strncmp>
 800bb02:	b978      	cbnz	r0, 800bb24 <__gethex+0xb0>
 800bb04:	b946      	cbnz	r6, 800bb18 <__gethex+0xa4>
 800bb06:	1c6e      	adds	r6, r5, #1
 800bb08:	4632      	mov	r2, r6
 800bb0a:	4615      	mov	r5, r2
 800bb0c:	3201      	adds	r2, #1
 800bb0e:	7828      	ldrb	r0, [r5, #0]
 800bb10:	f7ff ff9a 	bl	800ba48 <__hexdig_fun>
 800bb14:	2800      	cmp	r0, #0
 800bb16:	d1f8      	bne.n	800bb0a <__gethex+0x96>
 800bb18:	1b73      	subs	r3, r6, r5
 800bb1a:	009e      	lsls	r6, r3, #2
 800bb1c:	e004      	b.n	800bb28 <__gethex+0xb4>
 800bb1e:	2400      	movs	r4, #0
 800bb20:	4626      	mov	r6, r4
 800bb22:	e7e1      	b.n	800bae8 <__gethex+0x74>
 800bb24:	2e00      	cmp	r6, #0
 800bb26:	d1f7      	bne.n	800bb18 <__gethex+0xa4>
 800bb28:	782b      	ldrb	r3, [r5, #0]
 800bb2a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bb2e:	2b50      	cmp	r3, #80	; 0x50
 800bb30:	d13d      	bne.n	800bbae <__gethex+0x13a>
 800bb32:	786b      	ldrb	r3, [r5, #1]
 800bb34:	2b2b      	cmp	r3, #43	; 0x2b
 800bb36:	d02f      	beq.n	800bb98 <__gethex+0x124>
 800bb38:	2b2d      	cmp	r3, #45	; 0x2d
 800bb3a:	d031      	beq.n	800bba0 <__gethex+0x12c>
 800bb3c:	1c69      	adds	r1, r5, #1
 800bb3e:	f04f 0b00 	mov.w	fp, #0
 800bb42:	7808      	ldrb	r0, [r1, #0]
 800bb44:	f7ff ff80 	bl	800ba48 <__hexdig_fun>
 800bb48:	1e42      	subs	r2, r0, #1
 800bb4a:	b2d2      	uxtb	r2, r2
 800bb4c:	2a18      	cmp	r2, #24
 800bb4e:	d82e      	bhi.n	800bbae <__gethex+0x13a>
 800bb50:	f1a0 0210 	sub.w	r2, r0, #16
 800bb54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bb58:	f7ff ff76 	bl	800ba48 <__hexdig_fun>
 800bb5c:	f100 3cff 	add.w	ip, r0, #4294967295
 800bb60:	fa5f fc8c 	uxtb.w	ip, ip
 800bb64:	f1bc 0f18 	cmp.w	ip, #24
 800bb68:	d91d      	bls.n	800bba6 <__gethex+0x132>
 800bb6a:	f1bb 0f00 	cmp.w	fp, #0
 800bb6e:	d000      	beq.n	800bb72 <__gethex+0xfe>
 800bb70:	4252      	negs	r2, r2
 800bb72:	4416      	add	r6, r2
 800bb74:	f8ca 1000 	str.w	r1, [sl]
 800bb78:	b1dc      	cbz	r4, 800bbb2 <__gethex+0x13e>
 800bb7a:	9b01      	ldr	r3, [sp, #4]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	bf14      	ite	ne
 800bb80:	f04f 0800 	movne.w	r8, #0
 800bb84:	f04f 0806 	moveq.w	r8, #6
 800bb88:	4640      	mov	r0, r8
 800bb8a:	b005      	add	sp, #20
 800bb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb90:	4645      	mov	r5, r8
 800bb92:	4626      	mov	r6, r4
 800bb94:	2401      	movs	r4, #1
 800bb96:	e7c7      	b.n	800bb28 <__gethex+0xb4>
 800bb98:	f04f 0b00 	mov.w	fp, #0
 800bb9c:	1ca9      	adds	r1, r5, #2
 800bb9e:	e7d0      	b.n	800bb42 <__gethex+0xce>
 800bba0:	f04f 0b01 	mov.w	fp, #1
 800bba4:	e7fa      	b.n	800bb9c <__gethex+0x128>
 800bba6:	230a      	movs	r3, #10
 800bba8:	fb03 0002 	mla	r0, r3, r2, r0
 800bbac:	e7d0      	b.n	800bb50 <__gethex+0xdc>
 800bbae:	4629      	mov	r1, r5
 800bbb0:	e7e0      	b.n	800bb74 <__gethex+0x100>
 800bbb2:	eba5 0308 	sub.w	r3, r5, r8
 800bbb6:	3b01      	subs	r3, #1
 800bbb8:	4621      	mov	r1, r4
 800bbba:	2b07      	cmp	r3, #7
 800bbbc:	dc0a      	bgt.n	800bbd4 <__gethex+0x160>
 800bbbe:	4648      	mov	r0, r9
 800bbc0:	f000 fb0e 	bl	800c1e0 <_Balloc>
 800bbc4:	4604      	mov	r4, r0
 800bbc6:	b940      	cbnz	r0, 800bbda <__gethex+0x166>
 800bbc8:	4b61      	ldr	r3, [pc, #388]	; (800bd50 <__gethex+0x2dc>)
 800bbca:	4602      	mov	r2, r0
 800bbcc:	21e4      	movs	r1, #228	; 0xe4
 800bbce:	4861      	ldr	r0, [pc, #388]	; (800bd54 <__gethex+0x2e0>)
 800bbd0:	f001 f9f0 	bl	800cfb4 <__assert_func>
 800bbd4:	3101      	adds	r1, #1
 800bbd6:	105b      	asrs	r3, r3, #1
 800bbd8:	e7ef      	b.n	800bbba <__gethex+0x146>
 800bbda:	f100 0a14 	add.w	sl, r0, #20
 800bbde:	2300      	movs	r3, #0
 800bbe0:	495a      	ldr	r1, [pc, #360]	; (800bd4c <__gethex+0x2d8>)
 800bbe2:	f8cd a004 	str.w	sl, [sp, #4]
 800bbe6:	469b      	mov	fp, r3
 800bbe8:	45a8      	cmp	r8, r5
 800bbea:	d342      	bcc.n	800bc72 <__gethex+0x1fe>
 800bbec:	9801      	ldr	r0, [sp, #4]
 800bbee:	f840 bb04 	str.w	fp, [r0], #4
 800bbf2:	eba0 000a 	sub.w	r0, r0, sl
 800bbf6:	1080      	asrs	r0, r0, #2
 800bbf8:	6120      	str	r0, [r4, #16]
 800bbfa:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800bbfe:	4658      	mov	r0, fp
 800bc00:	f000 fbe0 	bl	800c3c4 <__hi0bits>
 800bc04:	683d      	ldr	r5, [r7, #0]
 800bc06:	eba8 0000 	sub.w	r0, r8, r0
 800bc0a:	42a8      	cmp	r0, r5
 800bc0c:	dd59      	ble.n	800bcc2 <__gethex+0x24e>
 800bc0e:	eba0 0805 	sub.w	r8, r0, r5
 800bc12:	4641      	mov	r1, r8
 800bc14:	4620      	mov	r0, r4
 800bc16:	f000 ff6f 	bl	800caf8 <__any_on>
 800bc1a:	4683      	mov	fp, r0
 800bc1c:	b1b8      	cbz	r0, 800bc4e <__gethex+0x1da>
 800bc1e:	f108 33ff 	add.w	r3, r8, #4294967295
 800bc22:	1159      	asrs	r1, r3, #5
 800bc24:	f003 021f 	and.w	r2, r3, #31
 800bc28:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bc2c:	f04f 0b01 	mov.w	fp, #1
 800bc30:	fa0b f202 	lsl.w	r2, fp, r2
 800bc34:	420a      	tst	r2, r1
 800bc36:	d00a      	beq.n	800bc4e <__gethex+0x1da>
 800bc38:	455b      	cmp	r3, fp
 800bc3a:	dd06      	ble.n	800bc4a <__gethex+0x1d6>
 800bc3c:	f1a8 0102 	sub.w	r1, r8, #2
 800bc40:	4620      	mov	r0, r4
 800bc42:	f000 ff59 	bl	800caf8 <__any_on>
 800bc46:	2800      	cmp	r0, #0
 800bc48:	d138      	bne.n	800bcbc <__gethex+0x248>
 800bc4a:	f04f 0b02 	mov.w	fp, #2
 800bc4e:	4641      	mov	r1, r8
 800bc50:	4620      	mov	r0, r4
 800bc52:	f7ff fea7 	bl	800b9a4 <rshift>
 800bc56:	4446      	add	r6, r8
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	42b3      	cmp	r3, r6
 800bc5c:	da41      	bge.n	800bce2 <__gethex+0x26e>
 800bc5e:	4621      	mov	r1, r4
 800bc60:	4648      	mov	r0, r9
 800bc62:	f000 fafd 	bl	800c260 <_Bfree>
 800bc66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc68:	2300      	movs	r3, #0
 800bc6a:	6013      	str	r3, [r2, #0]
 800bc6c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800bc70:	e78a      	b.n	800bb88 <__gethex+0x114>
 800bc72:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800bc76:	2a2e      	cmp	r2, #46	; 0x2e
 800bc78:	d014      	beq.n	800bca4 <__gethex+0x230>
 800bc7a:	2b20      	cmp	r3, #32
 800bc7c:	d106      	bne.n	800bc8c <__gethex+0x218>
 800bc7e:	9b01      	ldr	r3, [sp, #4]
 800bc80:	f843 bb04 	str.w	fp, [r3], #4
 800bc84:	f04f 0b00 	mov.w	fp, #0
 800bc88:	9301      	str	r3, [sp, #4]
 800bc8a:	465b      	mov	r3, fp
 800bc8c:	7828      	ldrb	r0, [r5, #0]
 800bc8e:	9303      	str	r3, [sp, #12]
 800bc90:	f7ff feda 	bl	800ba48 <__hexdig_fun>
 800bc94:	9b03      	ldr	r3, [sp, #12]
 800bc96:	f000 000f 	and.w	r0, r0, #15
 800bc9a:	4098      	lsls	r0, r3
 800bc9c:	ea4b 0b00 	orr.w	fp, fp, r0
 800bca0:	3304      	adds	r3, #4
 800bca2:	e7a1      	b.n	800bbe8 <__gethex+0x174>
 800bca4:	45a8      	cmp	r8, r5
 800bca6:	d8e8      	bhi.n	800bc7a <__gethex+0x206>
 800bca8:	2201      	movs	r2, #1
 800bcaa:	4628      	mov	r0, r5
 800bcac:	9303      	str	r3, [sp, #12]
 800bcae:	f7fe fef6 	bl	800aa9e <strncmp>
 800bcb2:	4926      	ldr	r1, [pc, #152]	; (800bd4c <__gethex+0x2d8>)
 800bcb4:	9b03      	ldr	r3, [sp, #12]
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	d1df      	bne.n	800bc7a <__gethex+0x206>
 800bcba:	e795      	b.n	800bbe8 <__gethex+0x174>
 800bcbc:	f04f 0b03 	mov.w	fp, #3
 800bcc0:	e7c5      	b.n	800bc4e <__gethex+0x1da>
 800bcc2:	da0b      	bge.n	800bcdc <__gethex+0x268>
 800bcc4:	eba5 0800 	sub.w	r8, r5, r0
 800bcc8:	4621      	mov	r1, r4
 800bcca:	4642      	mov	r2, r8
 800bccc:	4648      	mov	r0, r9
 800bcce:	f000 fce1 	bl	800c694 <__lshift>
 800bcd2:	eba6 0608 	sub.w	r6, r6, r8
 800bcd6:	4604      	mov	r4, r0
 800bcd8:	f100 0a14 	add.w	sl, r0, #20
 800bcdc:	f04f 0b00 	mov.w	fp, #0
 800bce0:	e7ba      	b.n	800bc58 <__gethex+0x1e4>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	42b3      	cmp	r3, r6
 800bce6:	dd73      	ble.n	800bdd0 <__gethex+0x35c>
 800bce8:	1b9e      	subs	r6, r3, r6
 800bcea:	42b5      	cmp	r5, r6
 800bcec:	dc34      	bgt.n	800bd58 <__gethex+0x2e4>
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2b02      	cmp	r3, #2
 800bcf2:	d023      	beq.n	800bd3c <__gethex+0x2c8>
 800bcf4:	2b03      	cmp	r3, #3
 800bcf6:	d025      	beq.n	800bd44 <__gethex+0x2d0>
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d115      	bne.n	800bd28 <__gethex+0x2b4>
 800bcfc:	42b5      	cmp	r5, r6
 800bcfe:	d113      	bne.n	800bd28 <__gethex+0x2b4>
 800bd00:	2d01      	cmp	r5, #1
 800bd02:	d10b      	bne.n	800bd1c <__gethex+0x2a8>
 800bd04:	9a02      	ldr	r2, [sp, #8]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6013      	str	r3, [r2, #0]
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	6123      	str	r3, [r4, #16]
 800bd0e:	f8ca 3000 	str.w	r3, [sl]
 800bd12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd14:	f04f 0862 	mov.w	r8, #98	; 0x62
 800bd18:	601c      	str	r4, [r3, #0]
 800bd1a:	e735      	b.n	800bb88 <__gethex+0x114>
 800bd1c:	1e69      	subs	r1, r5, #1
 800bd1e:	4620      	mov	r0, r4
 800bd20:	f000 feea 	bl	800caf8 <__any_on>
 800bd24:	2800      	cmp	r0, #0
 800bd26:	d1ed      	bne.n	800bd04 <__gethex+0x290>
 800bd28:	4621      	mov	r1, r4
 800bd2a:	4648      	mov	r0, r9
 800bd2c:	f000 fa98 	bl	800c260 <_Bfree>
 800bd30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd32:	2300      	movs	r3, #0
 800bd34:	6013      	str	r3, [r2, #0]
 800bd36:	f04f 0850 	mov.w	r8, #80	; 0x50
 800bd3a:	e725      	b.n	800bb88 <__gethex+0x114>
 800bd3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d1f2      	bne.n	800bd28 <__gethex+0x2b4>
 800bd42:	e7df      	b.n	800bd04 <__gethex+0x290>
 800bd44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d1dc      	bne.n	800bd04 <__gethex+0x290>
 800bd4a:	e7ed      	b.n	800bd28 <__gethex+0x2b4>
 800bd4c:	0800dc98 	.word	0x0800dc98
 800bd50:	0800deae 	.word	0x0800deae
 800bd54:	0800debf 	.word	0x0800debf
 800bd58:	f106 38ff 	add.w	r8, r6, #4294967295
 800bd5c:	f1bb 0f00 	cmp.w	fp, #0
 800bd60:	d133      	bne.n	800bdca <__gethex+0x356>
 800bd62:	f1b8 0f00 	cmp.w	r8, #0
 800bd66:	d004      	beq.n	800bd72 <__gethex+0x2fe>
 800bd68:	4641      	mov	r1, r8
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	f000 fec4 	bl	800caf8 <__any_on>
 800bd70:	4683      	mov	fp, r0
 800bd72:	ea4f 1268 	mov.w	r2, r8, asr #5
 800bd76:	2301      	movs	r3, #1
 800bd78:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bd7c:	f008 081f 	and.w	r8, r8, #31
 800bd80:	fa03 f308 	lsl.w	r3, r3, r8
 800bd84:	4213      	tst	r3, r2
 800bd86:	4631      	mov	r1, r6
 800bd88:	4620      	mov	r0, r4
 800bd8a:	bf18      	it	ne
 800bd8c:	f04b 0b02 	orrne.w	fp, fp, #2
 800bd90:	1bad      	subs	r5, r5, r6
 800bd92:	f7ff fe07 	bl	800b9a4 <rshift>
 800bd96:	687e      	ldr	r6, [r7, #4]
 800bd98:	f04f 0802 	mov.w	r8, #2
 800bd9c:	f1bb 0f00 	cmp.w	fp, #0
 800bda0:	d04a      	beq.n	800be38 <__gethex+0x3c4>
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2b02      	cmp	r3, #2
 800bda6:	d016      	beq.n	800bdd6 <__gethex+0x362>
 800bda8:	2b03      	cmp	r3, #3
 800bdaa:	d018      	beq.n	800bdde <__gethex+0x36a>
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d109      	bne.n	800bdc4 <__gethex+0x350>
 800bdb0:	f01b 0f02 	tst.w	fp, #2
 800bdb4:	d006      	beq.n	800bdc4 <__gethex+0x350>
 800bdb6:	f8da 3000 	ldr.w	r3, [sl]
 800bdba:	ea4b 0b03 	orr.w	fp, fp, r3
 800bdbe:	f01b 0f01 	tst.w	fp, #1
 800bdc2:	d10f      	bne.n	800bde4 <__gethex+0x370>
 800bdc4:	f048 0810 	orr.w	r8, r8, #16
 800bdc8:	e036      	b.n	800be38 <__gethex+0x3c4>
 800bdca:	f04f 0b01 	mov.w	fp, #1
 800bdce:	e7d0      	b.n	800bd72 <__gethex+0x2fe>
 800bdd0:	f04f 0801 	mov.w	r8, #1
 800bdd4:	e7e2      	b.n	800bd9c <__gethex+0x328>
 800bdd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bdd8:	f1c3 0301 	rsb	r3, r3, #1
 800bddc:	930f      	str	r3, [sp, #60]	; 0x3c
 800bdde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d0ef      	beq.n	800bdc4 <__gethex+0x350>
 800bde4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bde8:	f104 0214 	add.w	r2, r4, #20
 800bdec:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800bdf0:	9301      	str	r3, [sp, #4]
 800bdf2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	4694      	mov	ip, r2
 800bdfa:	f852 1b04 	ldr.w	r1, [r2], #4
 800bdfe:	f1b1 3fff 	cmp.w	r1, #4294967295
 800be02:	d01e      	beq.n	800be42 <__gethex+0x3ce>
 800be04:	3101      	adds	r1, #1
 800be06:	f8cc 1000 	str.w	r1, [ip]
 800be0a:	f1b8 0f02 	cmp.w	r8, #2
 800be0e:	f104 0214 	add.w	r2, r4, #20
 800be12:	d13d      	bne.n	800be90 <__gethex+0x41c>
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	3b01      	subs	r3, #1
 800be18:	42ab      	cmp	r3, r5
 800be1a:	d10b      	bne.n	800be34 <__gethex+0x3c0>
 800be1c:	1169      	asrs	r1, r5, #5
 800be1e:	2301      	movs	r3, #1
 800be20:	f005 051f 	and.w	r5, r5, #31
 800be24:	fa03 f505 	lsl.w	r5, r3, r5
 800be28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be2c:	421d      	tst	r5, r3
 800be2e:	bf18      	it	ne
 800be30:	f04f 0801 	movne.w	r8, #1
 800be34:	f048 0820 	orr.w	r8, r8, #32
 800be38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be3a:	601c      	str	r4, [r3, #0]
 800be3c:	9b02      	ldr	r3, [sp, #8]
 800be3e:	601e      	str	r6, [r3, #0]
 800be40:	e6a2      	b.n	800bb88 <__gethex+0x114>
 800be42:	4290      	cmp	r0, r2
 800be44:	f842 3c04 	str.w	r3, [r2, #-4]
 800be48:	d8d6      	bhi.n	800bdf8 <__gethex+0x384>
 800be4a:	68a2      	ldr	r2, [r4, #8]
 800be4c:	4593      	cmp	fp, r2
 800be4e:	db17      	blt.n	800be80 <__gethex+0x40c>
 800be50:	6861      	ldr	r1, [r4, #4]
 800be52:	4648      	mov	r0, r9
 800be54:	3101      	adds	r1, #1
 800be56:	f000 f9c3 	bl	800c1e0 <_Balloc>
 800be5a:	4682      	mov	sl, r0
 800be5c:	b918      	cbnz	r0, 800be66 <__gethex+0x3f2>
 800be5e:	4b1b      	ldr	r3, [pc, #108]	; (800becc <__gethex+0x458>)
 800be60:	4602      	mov	r2, r0
 800be62:	2184      	movs	r1, #132	; 0x84
 800be64:	e6b3      	b.n	800bbce <__gethex+0x15a>
 800be66:	6922      	ldr	r2, [r4, #16]
 800be68:	3202      	adds	r2, #2
 800be6a:	f104 010c 	add.w	r1, r4, #12
 800be6e:	0092      	lsls	r2, r2, #2
 800be70:	300c      	adds	r0, #12
 800be72:	f7fe feb0 	bl	800abd6 <memcpy>
 800be76:	4621      	mov	r1, r4
 800be78:	4648      	mov	r0, r9
 800be7a:	f000 f9f1 	bl	800c260 <_Bfree>
 800be7e:	4654      	mov	r4, sl
 800be80:	6922      	ldr	r2, [r4, #16]
 800be82:	1c51      	adds	r1, r2, #1
 800be84:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800be88:	6121      	str	r1, [r4, #16]
 800be8a:	2101      	movs	r1, #1
 800be8c:	6151      	str	r1, [r2, #20]
 800be8e:	e7bc      	b.n	800be0a <__gethex+0x396>
 800be90:	6921      	ldr	r1, [r4, #16]
 800be92:	4559      	cmp	r1, fp
 800be94:	dd0b      	ble.n	800beae <__gethex+0x43a>
 800be96:	2101      	movs	r1, #1
 800be98:	4620      	mov	r0, r4
 800be9a:	f7ff fd83 	bl	800b9a4 <rshift>
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	3601      	adds	r6, #1
 800bea2:	42b3      	cmp	r3, r6
 800bea4:	f6ff aedb 	blt.w	800bc5e <__gethex+0x1ea>
 800bea8:	f04f 0801 	mov.w	r8, #1
 800beac:	e7c2      	b.n	800be34 <__gethex+0x3c0>
 800beae:	f015 051f 	ands.w	r5, r5, #31
 800beb2:	d0f9      	beq.n	800bea8 <__gethex+0x434>
 800beb4:	9b01      	ldr	r3, [sp, #4]
 800beb6:	441a      	add	r2, r3
 800beb8:	f1c5 0520 	rsb	r5, r5, #32
 800bebc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800bec0:	f000 fa80 	bl	800c3c4 <__hi0bits>
 800bec4:	42a8      	cmp	r0, r5
 800bec6:	dbe6      	blt.n	800be96 <__gethex+0x422>
 800bec8:	e7ee      	b.n	800bea8 <__gethex+0x434>
 800beca:	bf00      	nop
 800becc:	0800deae 	.word	0x0800deae

0800bed0 <L_shift>:
 800bed0:	f1c2 0208 	rsb	r2, r2, #8
 800bed4:	0092      	lsls	r2, r2, #2
 800bed6:	b570      	push	{r4, r5, r6, lr}
 800bed8:	f1c2 0620 	rsb	r6, r2, #32
 800bedc:	6843      	ldr	r3, [r0, #4]
 800bede:	6804      	ldr	r4, [r0, #0]
 800bee0:	fa03 f506 	lsl.w	r5, r3, r6
 800bee4:	432c      	orrs	r4, r5
 800bee6:	40d3      	lsrs	r3, r2
 800bee8:	6004      	str	r4, [r0, #0]
 800beea:	f840 3f04 	str.w	r3, [r0, #4]!
 800beee:	4288      	cmp	r0, r1
 800bef0:	d3f4      	bcc.n	800bedc <L_shift+0xc>
 800bef2:	bd70      	pop	{r4, r5, r6, pc}

0800bef4 <__match>:
 800bef4:	b530      	push	{r4, r5, lr}
 800bef6:	6803      	ldr	r3, [r0, #0]
 800bef8:	3301      	adds	r3, #1
 800befa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800befe:	b914      	cbnz	r4, 800bf06 <__match+0x12>
 800bf00:	6003      	str	r3, [r0, #0]
 800bf02:	2001      	movs	r0, #1
 800bf04:	bd30      	pop	{r4, r5, pc}
 800bf06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf0a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bf0e:	2d19      	cmp	r5, #25
 800bf10:	bf98      	it	ls
 800bf12:	3220      	addls	r2, #32
 800bf14:	42a2      	cmp	r2, r4
 800bf16:	d0f0      	beq.n	800befa <__match+0x6>
 800bf18:	2000      	movs	r0, #0
 800bf1a:	e7f3      	b.n	800bf04 <__match+0x10>

0800bf1c <__hexnan>:
 800bf1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf20:	680b      	ldr	r3, [r1, #0]
 800bf22:	6801      	ldr	r1, [r0, #0]
 800bf24:	115e      	asrs	r6, r3, #5
 800bf26:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bf2a:	f013 031f 	ands.w	r3, r3, #31
 800bf2e:	b087      	sub	sp, #28
 800bf30:	bf18      	it	ne
 800bf32:	3604      	addne	r6, #4
 800bf34:	2500      	movs	r5, #0
 800bf36:	1f37      	subs	r7, r6, #4
 800bf38:	4682      	mov	sl, r0
 800bf3a:	4690      	mov	r8, r2
 800bf3c:	9301      	str	r3, [sp, #4]
 800bf3e:	f846 5c04 	str.w	r5, [r6, #-4]
 800bf42:	46b9      	mov	r9, r7
 800bf44:	463c      	mov	r4, r7
 800bf46:	9502      	str	r5, [sp, #8]
 800bf48:	46ab      	mov	fp, r5
 800bf4a:	784a      	ldrb	r2, [r1, #1]
 800bf4c:	1c4b      	adds	r3, r1, #1
 800bf4e:	9303      	str	r3, [sp, #12]
 800bf50:	b342      	cbz	r2, 800bfa4 <__hexnan+0x88>
 800bf52:	4610      	mov	r0, r2
 800bf54:	9105      	str	r1, [sp, #20]
 800bf56:	9204      	str	r2, [sp, #16]
 800bf58:	f7ff fd76 	bl	800ba48 <__hexdig_fun>
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	d14f      	bne.n	800c000 <__hexnan+0xe4>
 800bf60:	9a04      	ldr	r2, [sp, #16]
 800bf62:	9905      	ldr	r1, [sp, #20]
 800bf64:	2a20      	cmp	r2, #32
 800bf66:	d818      	bhi.n	800bf9a <__hexnan+0x7e>
 800bf68:	9b02      	ldr	r3, [sp, #8]
 800bf6a:	459b      	cmp	fp, r3
 800bf6c:	dd13      	ble.n	800bf96 <__hexnan+0x7a>
 800bf6e:	454c      	cmp	r4, r9
 800bf70:	d206      	bcs.n	800bf80 <__hexnan+0x64>
 800bf72:	2d07      	cmp	r5, #7
 800bf74:	dc04      	bgt.n	800bf80 <__hexnan+0x64>
 800bf76:	462a      	mov	r2, r5
 800bf78:	4649      	mov	r1, r9
 800bf7a:	4620      	mov	r0, r4
 800bf7c:	f7ff ffa8 	bl	800bed0 <L_shift>
 800bf80:	4544      	cmp	r4, r8
 800bf82:	d950      	bls.n	800c026 <__hexnan+0x10a>
 800bf84:	2300      	movs	r3, #0
 800bf86:	f1a4 0904 	sub.w	r9, r4, #4
 800bf8a:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf8e:	f8cd b008 	str.w	fp, [sp, #8]
 800bf92:	464c      	mov	r4, r9
 800bf94:	461d      	mov	r5, r3
 800bf96:	9903      	ldr	r1, [sp, #12]
 800bf98:	e7d7      	b.n	800bf4a <__hexnan+0x2e>
 800bf9a:	2a29      	cmp	r2, #41	; 0x29
 800bf9c:	d155      	bne.n	800c04a <__hexnan+0x12e>
 800bf9e:	3102      	adds	r1, #2
 800bfa0:	f8ca 1000 	str.w	r1, [sl]
 800bfa4:	f1bb 0f00 	cmp.w	fp, #0
 800bfa8:	d04f      	beq.n	800c04a <__hexnan+0x12e>
 800bfaa:	454c      	cmp	r4, r9
 800bfac:	d206      	bcs.n	800bfbc <__hexnan+0xa0>
 800bfae:	2d07      	cmp	r5, #7
 800bfb0:	dc04      	bgt.n	800bfbc <__hexnan+0xa0>
 800bfb2:	462a      	mov	r2, r5
 800bfb4:	4649      	mov	r1, r9
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	f7ff ff8a 	bl	800bed0 <L_shift>
 800bfbc:	4544      	cmp	r4, r8
 800bfbe:	d934      	bls.n	800c02a <__hexnan+0x10e>
 800bfc0:	f1a8 0204 	sub.w	r2, r8, #4
 800bfc4:	4623      	mov	r3, r4
 800bfc6:	f853 1b04 	ldr.w	r1, [r3], #4
 800bfca:	f842 1f04 	str.w	r1, [r2, #4]!
 800bfce:	429f      	cmp	r7, r3
 800bfd0:	d2f9      	bcs.n	800bfc6 <__hexnan+0xaa>
 800bfd2:	1b3b      	subs	r3, r7, r4
 800bfd4:	f023 0303 	bic.w	r3, r3, #3
 800bfd8:	3304      	adds	r3, #4
 800bfda:	3e03      	subs	r6, #3
 800bfdc:	3401      	adds	r4, #1
 800bfde:	42a6      	cmp	r6, r4
 800bfe0:	bf38      	it	cc
 800bfe2:	2304      	movcc	r3, #4
 800bfe4:	4443      	add	r3, r8
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	f843 2b04 	str.w	r2, [r3], #4
 800bfec:	429f      	cmp	r7, r3
 800bfee:	d2fb      	bcs.n	800bfe8 <__hexnan+0xcc>
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	b91b      	cbnz	r3, 800bffc <__hexnan+0xe0>
 800bff4:	4547      	cmp	r7, r8
 800bff6:	d126      	bne.n	800c046 <__hexnan+0x12a>
 800bff8:	2301      	movs	r3, #1
 800bffa:	603b      	str	r3, [r7, #0]
 800bffc:	2005      	movs	r0, #5
 800bffe:	e025      	b.n	800c04c <__hexnan+0x130>
 800c000:	3501      	adds	r5, #1
 800c002:	2d08      	cmp	r5, #8
 800c004:	f10b 0b01 	add.w	fp, fp, #1
 800c008:	dd06      	ble.n	800c018 <__hexnan+0xfc>
 800c00a:	4544      	cmp	r4, r8
 800c00c:	d9c3      	bls.n	800bf96 <__hexnan+0x7a>
 800c00e:	2300      	movs	r3, #0
 800c010:	f844 3c04 	str.w	r3, [r4, #-4]
 800c014:	2501      	movs	r5, #1
 800c016:	3c04      	subs	r4, #4
 800c018:	6822      	ldr	r2, [r4, #0]
 800c01a:	f000 000f 	and.w	r0, r0, #15
 800c01e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c022:	6020      	str	r0, [r4, #0]
 800c024:	e7b7      	b.n	800bf96 <__hexnan+0x7a>
 800c026:	2508      	movs	r5, #8
 800c028:	e7b5      	b.n	800bf96 <__hexnan+0x7a>
 800c02a:	9b01      	ldr	r3, [sp, #4]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d0df      	beq.n	800bff0 <__hexnan+0xd4>
 800c030:	f1c3 0320 	rsb	r3, r3, #32
 800c034:	f04f 32ff 	mov.w	r2, #4294967295
 800c038:	40da      	lsrs	r2, r3
 800c03a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c03e:	4013      	ands	r3, r2
 800c040:	f846 3c04 	str.w	r3, [r6, #-4]
 800c044:	e7d4      	b.n	800bff0 <__hexnan+0xd4>
 800c046:	3f04      	subs	r7, #4
 800c048:	e7d2      	b.n	800bff0 <__hexnan+0xd4>
 800c04a:	2004      	movs	r0, #4
 800c04c:	b007      	add	sp, #28
 800c04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800c054 <malloc>:
 800c054:	4b02      	ldr	r3, [pc, #8]	; (800c060 <malloc+0xc>)
 800c056:	4601      	mov	r1, r0
 800c058:	6818      	ldr	r0, [r3, #0]
 800c05a:	f000 b823 	b.w	800c0a4 <_malloc_r>
 800c05e:	bf00      	nop
 800c060:	2000023c 	.word	0x2000023c

0800c064 <sbrk_aligned>:
 800c064:	b570      	push	{r4, r5, r6, lr}
 800c066:	4e0e      	ldr	r6, [pc, #56]	; (800c0a0 <sbrk_aligned+0x3c>)
 800c068:	460c      	mov	r4, r1
 800c06a:	6831      	ldr	r1, [r6, #0]
 800c06c:	4605      	mov	r5, r0
 800c06e:	b911      	cbnz	r1, 800c076 <sbrk_aligned+0x12>
 800c070:	f000 ff90 	bl	800cf94 <_sbrk_r>
 800c074:	6030      	str	r0, [r6, #0]
 800c076:	4621      	mov	r1, r4
 800c078:	4628      	mov	r0, r5
 800c07a:	f000 ff8b 	bl	800cf94 <_sbrk_r>
 800c07e:	1c43      	adds	r3, r0, #1
 800c080:	d00a      	beq.n	800c098 <sbrk_aligned+0x34>
 800c082:	1cc4      	adds	r4, r0, #3
 800c084:	f024 0403 	bic.w	r4, r4, #3
 800c088:	42a0      	cmp	r0, r4
 800c08a:	d007      	beq.n	800c09c <sbrk_aligned+0x38>
 800c08c:	1a21      	subs	r1, r4, r0
 800c08e:	4628      	mov	r0, r5
 800c090:	f000 ff80 	bl	800cf94 <_sbrk_r>
 800c094:	3001      	adds	r0, #1
 800c096:	d101      	bne.n	800c09c <sbrk_aligned+0x38>
 800c098:	f04f 34ff 	mov.w	r4, #4294967295
 800c09c:	4620      	mov	r0, r4
 800c09e:	bd70      	pop	{r4, r5, r6, pc}
 800c0a0:	200008fc 	.word	0x200008fc

0800c0a4 <_malloc_r>:
 800c0a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0a8:	1ccd      	adds	r5, r1, #3
 800c0aa:	f025 0503 	bic.w	r5, r5, #3
 800c0ae:	3508      	adds	r5, #8
 800c0b0:	2d0c      	cmp	r5, #12
 800c0b2:	bf38      	it	cc
 800c0b4:	250c      	movcc	r5, #12
 800c0b6:	2d00      	cmp	r5, #0
 800c0b8:	4607      	mov	r7, r0
 800c0ba:	db01      	blt.n	800c0c0 <_malloc_r+0x1c>
 800c0bc:	42a9      	cmp	r1, r5
 800c0be:	d905      	bls.n	800c0cc <_malloc_r+0x28>
 800c0c0:	230c      	movs	r3, #12
 800c0c2:	603b      	str	r3, [r7, #0]
 800c0c4:	2600      	movs	r6, #0
 800c0c6:	4630      	mov	r0, r6
 800c0c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c1a0 <_malloc_r+0xfc>
 800c0d0:	f000 f87a 	bl	800c1c8 <__malloc_lock>
 800c0d4:	f8d8 3000 	ldr.w	r3, [r8]
 800c0d8:	461c      	mov	r4, r3
 800c0da:	bb5c      	cbnz	r4, 800c134 <_malloc_r+0x90>
 800c0dc:	4629      	mov	r1, r5
 800c0de:	4638      	mov	r0, r7
 800c0e0:	f7ff ffc0 	bl	800c064 <sbrk_aligned>
 800c0e4:	1c43      	adds	r3, r0, #1
 800c0e6:	4604      	mov	r4, r0
 800c0e8:	d155      	bne.n	800c196 <_malloc_r+0xf2>
 800c0ea:	f8d8 4000 	ldr.w	r4, [r8]
 800c0ee:	4626      	mov	r6, r4
 800c0f0:	2e00      	cmp	r6, #0
 800c0f2:	d145      	bne.n	800c180 <_malloc_r+0xdc>
 800c0f4:	2c00      	cmp	r4, #0
 800c0f6:	d048      	beq.n	800c18a <_malloc_r+0xe6>
 800c0f8:	6823      	ldr	r3, [r4, #0]
 800c0fa:	4631      	mov	r1, r6
 800c0fc:	4638      	mov	r0, r7
 800c0fe:	eb04 0903 	add.w	r9, r4, r3
 800c102:	f000 ff47 	bl	800cf94 <_sbrk_r>
 800c106:	4581      	cmp	r9, r0
 800c108:	d13f      	bne.n	800c18a <_malloc_r+0xe6>
 800c10a:	6821      	ldr	r1, [r4, #0]
 800c10c:	1a6d      	subs	r5, r5, r1
 800c10e:	4629      	mov	r1, r5
 800c110:	4638      	mov	r0, r7
 800c112:	f7ff ffa7 	bl	800c064 <sbrk_aligned>
 800c116:	3001      	adds	r0, #1
 800c118:	d037      	beq.n	800c18a <_malloc_r+0xe6>
 800c11a:	6823      	ldr	r3, [r4, #0]
 800c11c:	442b      	add	r3, r5
 800c11e:	6023      	str	r3, [r4, #0]
 800c120:	f8d8 3000 	ldr.w	r3, [r8]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d038      	beq.n	800c19a <_malloc_r+0xf6>
 800c128:	685a      	ldr	r2, [r3, #4]
 800c12a:	42a2      	cmp	r2, r4
 800c12c:	d12b      	bne.n	800c186 <_malloc_r+0xe2>
 800c12e:	2200      	movs	r2, #0
 800c130:	605a      	str	r2, [r3, #4]
 800c132:	e00f      	b.n	800c154 <_malloc_r+0xb0>
 800c134:	6822      	ldr	r2, [r4, #0]
 800c136:	1b52      	subs	r2, r2, r5
 800c138:	d41f      	bmi.n	800c17a <_malloc_r+0xd6>
 800c13a:	2a0b      	cmp	r2, #11
 800c13c:	d917      	bls.n	800c16e <_malloc_r+0xca>
 800c13e:	1961      	adds	r1, r4, r5
 800c140:	42a3      	cmp	r3, r4
 800c142:	6025      	str	r5, [r4, #0]
 800c144:	bf18      	it	ne
 800c146:	6059      	strne	r1, [r3, #4]
 800c148:	6863      	ldr	r3, [r4, #4]
 800c14a:	bf08      	it	eq
 800c14c:	f8c8 1000 	streq.w	r1, [r8]
 800c150:	5162      	str	r2, [r4, r5]
 800c152:	604b      	str	r3, [r1, #4]
 800c154:	4638      	mov	r0, r7
 800c156:	f104 060b 	add.w	r6, r4, #11
 800c15a:	f000 f83b 	bl	800c1d4 <__malloc_unlock>
 800c15e:	f026 0607 	bic.w	r6, r6, #7
 800c162:	1d23      	adds	r3, r4, #4
 800c164:	1af2      	subs	r2, r6, r3
 800c166:	d0ae      	beq.n	800c0c6 <_malloc_r+0x22>
 800c168:	1b9b      	subs	r3, r3, r6
 800c16a:	50a3      	str	r3, [r4, r2]
 800c16c:	e7ab      	b.n	800c0c6 <_malloc_r+0x22>
 800c16e:	42a3      	cmp	r3, r4
 800c170:	6862      	ldr	r2, [r4, #4]
 800c172:	d1dd      	bne.n	800c130 <_malloc_r+0x8c>
 800c174:	f8c8 2000 	str.w	r2, [r8]
 800c178:	e7ec      	b.n	800c154 <_malloc_r+0xb0>
 800c17a:	4623      	mov	r3, r4
 800c17c:	6864      	ldr	r4, [r4, #4]
 800c17e:	e7ac      	b.n	800c0da <_malloc_r+0x36>
 800c180:	4634      	mov	r4, r6
 800c182:	6876      	ldr	r6, [r6, #4]
 800c184:	e7b4      	b.n	800c0f0 <_malloc_r+0x4c>
 800c186:	4613      	mov	r3, r2
 800c188:	e7cc      	b.n	800c124 <_malloc_r+0x80>
 800c18a:	230c      	movs	r3, #12
 800c18c:	603b      	str	r3, [r7, #0]
 800c18e:	4638      	mov	r0, r7
 800c190:	f000 f820 	bl	800c1d4 <__malloc_unlock>
 800c194:	e797      	b.n	800c0c6 <_malloc_r+0x22>
 800c196:	6025      	str	r5, [r4, #0]
 800c198:	e7dc      	b.n	800c154 <_malloc_r+0xb0>
 800c19a:	605b      	str	r3, [r3, #4]
 800c19c:	deff      	udf	#255	; 0xff
 800c19e:	bf00      	nop
 800c1a0:	200008f8 	.word	0x200008f8

0800c1a4 <__ascii_mbtowc>:
 800c1a4:	b082      	sub	sp, #8
 800c1a6:	b901      	cbnz	r1, 800c1aa <__ascii_mbtowc+0x6>
 800c1a8:	a901      	add	r1, sp, #4
 800c1aa:	b142      	cbz	r2, 800c1be <__ascii_mbtowc+0x1a>
 800c1ac:	b14b      	cbz	r3, 800c1c2 <__ascii_mbtowc+0x1e>
 800c1ae:	7813      	ldrb	r3, [r2, #0]
 800c1b0:	600b      	str	r3, [r1, #0]
 800c1b2:	7812      	ldrb	r2, [r2, #0]
 800c1b4:	1e10      	subs	r0, r2, #0
 800c1b6:	bf18      	it	ne
 800c1b8:	2001      	movne	r0, #1
 800c1ba:	b002      	add	sp, #8
 800c1bc:	4770      	bx	lr
 800c1be:	4610      	mov	r0, r2
 800c1c0:	e7fb      	b.n	800c1ba <__ascii_mbtowc+0x16>
 800c1c2:	f06f 0001 	mvn.w	r0, #1
 800c1c6:	e7f8      	b.n	800c1ba <__ascii_mbtowc+0x16>

0800c1c8 <__malloc_lock>:
 800c1c8:	4801      	ldr	r0, [pc, #4]	; (800c1d0 <__malloc_lock+0x8>)
 800c1ca:	f7fe bd02 	b.w	800abd2 <__retarget_lock_acquire_recursive>
 800c1ce:	bf00      	nop
 800c1d0:	200008f4 	.word	0x200008f4

0800c1d4 <__malloc_unlock>:
 800c1d4:	4801      	ldr	r0, [pc, #4]	; (800c1dc <__malloc_unlock+0x8>)
 800c1d6:	f7fe bcfd 	b.w	800abd4 <__retarget_lock_release_recursive>
 800c1da:	bf00      	nop
 800c1dc:	200008f4 	.word	0x200008f4

0800c1e0 <_Balloc>:
 800c1e0:	b570      	push	{r4, r5, r6, lr}
 800c1e2:	69c6      	ldr	r6, [r0, #28]
 800c1e4:	4604      	mov	r4, r0
 800c1e6:	460d      	mov	r5, r1
 800c1e8:	b976      	cbnz	r6, 800c208 <_Balloc+0x28>
 800c1ea:	2010      	movs	r0, #16
 800c1ec:	f7ff ff32 	bl	800c054 <malloc>
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	61e0      	str	r0, [r4, #28]
 800c1f4:	b920      	cbnz	r0, 800c200 <_Balloc+0x20>
 800c1f6:	4b18      	ldr	r3, [pc, #96]	; (800c258 <_Balloc+0x78>)
 800c1f8:	4818      	ldr	r0, [pc, #96]	; (800c25c <_Balloc+0x7c>)
 800c1fa:	216b      	movs	r1, #107	; 0x6b
 800c1fc:	f000 feda 	bl	800cfb4 <__assert_func>
 800c200:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c204:	6006      	str	r6, [r0, #0]
 800c206:	60c6      	str	r6, [r0, #12]
 800c208:	69e6      	ldr	r6, [r4, #28]
 800c20a:	68f3      	ldr	r3, [r6, #12]
 800c20c:	b183      	cbz	r3, 800c230 <_Balloc+0x50>
 800c20e:	69e3      	ldr	r3, [r4, #28]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c216:	b9b8      	cbnz	r0, 800c248 <_Balloc+0x68>
 800c218:	2101      	movs	r1, #1
 800c21a:	fa01 f605 	lsl.w	r6, r1, r5
 800c21e:	1d72      	adds	r2, r6, #5
 800c220:	0092      	lsls	r2, r2, #2
 800c222:	4620      	mov	r0, r4
 800c224:	f000 fee4 	bl	800cff0 <_calloc_r>
 800c228:	b160      	cbz	r0, 800c244 <_Balloc+0x64>
 800c22a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c22e:	e00e      	b.n	800c24e <_Balloc+0x6e>
 800c230:	2221      	movs	r2, #33	; 0x21
 800c232:	2104      	movs	r1, #4
 800c234:	4620      	mov	r0, r4
 800c236:	f000 fedb 	bl	800cff0 <_calloc_r>
 800c23a:	69e3      	ldr	r3, [r4, #28]
 800c23c:	60f0      	str	r0, [r6, #12]
 800c23e:	68db      	ldr	r3, [r3, #12]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d1e4      	bne.n	800c20e <_Balloc+0x2e>
 800c244:	2000      	movs	r0, #0
 800c246:	bd70      	pop	{r4, r5, r6, pc}
 800c248:	6802      	ldr	r2, [r0, #0]
 800c24a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c24e:	2300      	movs	r3, #0
 800c250:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c254:	e7f7      	b.n	800c246 <_Balloc+0x66>
 800c256:	bf00      	nop
 800c258:	0800de3f 	.word	0x0800de3f
 800c25c:	0800df1f 	.word	0x0800df1f

0800c260 <_Bfree>:
 800c260:	b570      	push	{r4, r5, r6, lr}
 800c262:	69c6      	ldr	r6, [r0, #28]
 800c264:	4605      	mov	r5, r0
 800c266:	460c      	mov	r4, r1
 800c268:	b976      	cbnz	r6, 800c288 <_Bfree+0x28>
 800c26a:	2010      	movs	r0, #16
 800c26c:	f7ff fef2 	bl	800c054 <malloc>
 800c270:	4602      	mov	r2, r0
 800c272:	61e8      	str	r0, [r5, #28]
 800c274:	b920      	cbnz	r0, 800c280 <_Bfree+0x20>
 800c276:	4b09      	ldr	r3, [pc, #36]	; (800c29c <_Bfree+0x3c>)
 800c278:	4809      	ldr	r0, [pc, #36]	; (800c2a0 <_Bfree+0x40>)
 800c27a:	218f      	movs	r1, #143	; 0x8f
 800c27c:	f000 fe9a 	bl	800cfb4 <__assert_func>
 800c280:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c284:	6006      	str	r6, [r0, #0]
 800c286:	60c6      	str	r6, [r0, #12]
 800c288:	b13c      	cbz	r4, 800c29a <_Bfree+0x3a>
 800c28a:	69eb      	ldr	r3, [r5, #28]
 800c28c:	6862      	ldr	r2, [r4, #4]
 800c28e:	68db      	ldr	r3, [r3, #12]
 800c290:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c294:	6021      	str	r1, [r4, #0]
 800c296:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c29a:	bd70      	pop	{r4, r5, r6, pc}
 800c29c:	0800de3f 	.word	0x0800de3f
 800c2a0:	0800df1f 	.word	0x0800df1f

0800c2a4 <__multadd>:
 800c2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2a8:	690d      	ldr	r5, [r1, #16]
 800c2aa:	4607      	mov	r7, r0
 800c2ac:	460c      	mov	r4, r1
 800c2ae:	461e      	mov	r6, r3
 800c2b0:	f101 0c14 	add.w	ip, r1, #20
 800c2b4:	2000      	movs	r0, #0
 800c2b6:	f8dc 3000 	ldr.w	r3, [ip]
 800c2ba:	b299      	uxth	r1, r3
 800c2bc:	fb02 6101 	mla	r1, r2, r1, r6
 800c2c0:	0c1e      	lsrs	r6, r3, #16
 800c2c2:	0c0b      	lsrs	r3, r1, #16
 800c2c4:	fb02 3306 	mla	r3, r2, r6, r3
 800c2c8:	b289      	uxth	r1, r1
 800c2ca:	3001      	adds	r0, #1
 800c2cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c2d0:	4285      	cmp	r5, r0
 800c2d2:	f84c 1b04 	str.w	r1, [ip], #4
 800c2d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c2da:	dcec      	bgt.n	800c2b6 <__multadd+0x12>
 800c2dc:	b30e      	cbz	r6, 800c322 <__multadd+0x7e>
 800c2de:	68a3      	ldr	r3, [r4, #8]
 800c2e0:	42ab      	cmp	r3, r5
 800c2e2:	dc19      	bgt.n	800c318 <__multadd+0x74>
 800c2e4:	6861      	ldr	r1, [r4, #4]
 800c2e6:	4638      	mov	r0, r7
 800c2e8:	3101      	adds	r1, #1
 800c2ea:	f7ff ff79 	bl	800c1e0 <_Balloc>
 800c2ee:	4680      	mov	r8, r0
 800c2f0:	b928      	cbnz	r0, 800c2fe <__multadd+0x5a>
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	4b0c      	ldr	r3, [pc, #48]	; (800c328 <__multadd+0x84>)
 800c2f6:	480d      	ldr	r0, [pc, #52]	; (800c32c <__multadd+0x88>)
 800c2f8:	21ba      	movs	r1, #186	; 0xba
 800c2fa:	f000 fe5b 	bl	800cfb4 <__assert_func>
 800c2fe:	6922      	ldr	r2, [r4, #16]
 800c300:	3202      	adds	r2, #2
 800c302:	f104 010c 	add.w	r1, r4, #12
 800c306:	0092      	lsls	r2, r2, #2
 800c308:	300c      	adds	r0, #12
 800c30a:	f7fe fc64 	bl	800abd6 <memcpy>
 800c30e:	4621      	mov	r1, r4
 800c310:	4638      	mov	r0, r7
 800c312:	f7ff ffa5 	bl	800c260 <_Bfree>
 800c316:	4644      	mov	r4, r8
 800c318:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c31c:	3501      	adds	r5, #1
 800c31e:	615e      	str	r6, [r3, #20]
 800c320:	6125      	str	r5, [r4, #16]
 800c322:	4620      	mov	r0, r4
 800c324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c328:	0800deae 	.word	0x0800deae
 800c32c:	0800df1f 	.word	0x0800df1f

0800c330 <__s2b>:
 800c330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c334:	460c      	mov	r4, r1
 800c336:	4615      	mov	r5, r2
 800c338:	461f      	mov	r7, r3
 800c33a:	2209      	movs	r2, #9
 800c33c:	3308      	adds	r3, #8
 800c33e:	4606      	mov	r6, r0
 800c340:	fb93 f3f2 	sdiv	r3, r3, r2
 800c344:	2100      	movs	r1, #0
 800c346:	2201      	movs	r2, #1
 800c348:	429a      	cmp	r2, r3
 800c34a:	db09      	blt.n	800c360 <__s2b+0x30>
 800c34c:	4630      	mov	r0, r6
 800c34e:	f7ff ff47 	bl	800c1e0 <_Balloc>
 800c352:	b940      	cbnz	r0, 800c366 <__s2b+0x36>
 800c354:	4602      	mov	r2, r0
 800c356:	4b19      	ldr	r3, [pc, #100]	; (800c3bc <__s2b+0x8c>)
 800c358:	4819      	ldr	r0, [pc, #100]	; (800c3c0 <__s2b+0x90>)
 800c35a:	21d3      	movs	r1, #211	; 0xd3
 800c35c:	f000 fe2a 	bl	800cfb4 <__assert_func>
 800c360:	0052      	lsls	r2, r2, #1
 800c362:	3101      	adds	r1, #1
 800c364:	e7f0      	b.n	800c348 <__s2b+0x18>
 800c366:	9b08      	ldr	r3, [sp, #32]
 800c368:	6143      	str	r3, [r0, #20]
 800c36a:	2d09      	cmp	r5, #9
 800c36c:	f04f 0301 	mov.w	r3, #1
 800c370:	6103      	str	r3, [r0, #16]
 800c372:	dd16      	ble.n	800c3a2 <__s2b+0x72>
 800c374:	f104 0909 	add.w	r9, r4, #9
 800c378:	46c8      	mov	r8, r9
 800c37a:	442c      	add	r4, r5
 800c37c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c380:	4601      	mov	r1, r0
 800c382:	3b30      	subs	r3, #48	; 0x30
 800c384:	220a      	movs	r2, #10
 800c386:	4630      	mov	r0, r6
 800c388:	f7ff ff8c 	bl	800c2a4 <__multadd>
 800c38c:	45a0      	cmp	r8, r4
 800c38e:	d1f5      	bne.n	800c37c <__s2b+0x4c>
 800c390:	f1a5 0408 	sub.w	r4, r5, #8
 800c394:	444c      	add	r4, r9
 800c396:	1b2d      	subs	r5, r5, r4
 800c398:	1963      	adds	r3, r4, r5
 800c39a:	42bb      	cmp	r3, r7
 800c39c:	db04      	blt.n	800c3a8 <__s2b+0x78>
 800c39e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3a2:	340a      	adds	r4, #10
 800c3a4:	2509      	movs	r5, #9
 800c3a6:	e7f6      	b.n	800c396 <__s2b+0x66>
 800c3a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c3ac:	4601      	mov	r1, r0
 800c3ae:	3b30      	subs	r3, #48	; 0x30
 800c3b0:	220a      	movs	r2, #10
 800c3b2:	4630      	mov	r0, r6
 800c3b4:	f7ff ff76 	bl	800c2a4 <__multadd>
 800c3b8:	e7ee      	b.n	800c398 <__s2b+0x68>
 800c3ba:	bf00      	nop
 800c3bc:	0800deae 	.word	0x0800deae
 800c3c0:	0800df1f 	.word	0x0800df1f

0800c3c4 <__hi0bits>:
 800c3c4:	0c03      	lsrs	r3, r0, #16
 800c3c6:	041b      	lsls	r3, r3, #16
 800c3c8:	b9d3      	cbnz	r3, 800c400 <__hi0bits+0x3c>
 800c3ca:	0400      	lsls	r0, r0, #16
 800c3cc:	2310      	movs	r3, #16
 800c3ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c3d2:	bf04      	itt	eq
 800c3d4:	0200      	lsleq	r0, r0, #8
 800c3d6:	3308      	addeq	r3, #8
 800c3d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c3dc:	bf04      	itt	eq
 800c3de:	0100      	lsleq	r0, r0, #4
 800c3e0:	3304      	addeq	r3, #4
 800c3e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c3e6:	bf04      	itt	eq
 800c3e8:	0080      	lsleq	r0, r0, #2
 800c3ea:	3302      	addeq	r3, #2
 800c3ec:	2800      	cmp	r0, #0
 800c3ee:	db05      	blt.n	800c3fc <__hi0bits+0x38>
 800c3f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c3f4:	f103 0301 	add.w	r3, r3, #1
 800c3f8:	bf08      	it	eq
 800c3fa:	2320      	moveq	r3, #32
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	4770      	bx	lr
 800c400:	2300      	movs	r3, #0
 800c402:	e7e4      	b.n	800c3ce <__hi0bits+0xa>

0800c404 <__lo0bits>:
 800c404:	6803      	ldr	r3, [r0, #0]
 800c406:	f013 0207 	ands.w	r2, r3, #7
 800c40a:	d00c      	beq.n	800c426 <__lo0bits+0x22>
 800c40c:	07d9      	lsls	r1, r3, #31
 800c40e:	d422      	bmi.n	800c456 <__lo0bits+0x52>
 800c410:	079a      	lsls	r2, r3, #30
 800c412:	bf49      	itett	mi
 800c414:	085b      	lsrmi	r3, r3, #1
 800c416:	089b      	lsrpl	r3, r3, #2
 800c418:	6003      	strmi	r3, [r0, #0]
 800c41a:	2201      	movmi	r2, #1
 800c41c:	bf5c      	itt	pl
 800c41e:	6003      	strpl	r3, [r0, #0]
 800c420:	2202      	movpl	r2, #2
 800c422:	4610      	mov	r0, r2
 800c424:	4770      	bx	lr
 800c426:	b299      	uxth	r1, r3
 800c428:	b909      	cbnz	r1, 800c42e <__lo0bits+0x2a>
 800c42a:	0c1b      	lsrs	r3, r3, #16
 800c42c:	2210      	movs	r2, #16
 800c42e:	b2d9      	uxtb	r1, r3
 800c430:	b909      	cbnz	r1, 800c436 <__lo0bits+0x32>
 800c432:	3208      	adds	r2, #8
 800c434:	0a1b      	lsrs	r3, r3, #8
 800c436:	0719      	lsls	r1, r3, #28
 800c438:	bf04      	itt	eq
 800c43a:	091b      	lsreq	r3, r3, #4
 800c43c:	3204      	addeq	r2, #4
 800c43e:	0799      	lsls	r1, r3, #30
 800c440:	bf04      	itt	eq
 800c442:	089b      	lsreq	r3, r3, #2
 800c444:	3202      	addeq	r2, #2
 800c446:	07d9      	lsls	r1, r3, #31
 800c448:	d403      	bmi.n	800c452 <__lo0bits+0x4e>
 800c44a:	085b      	lsrs	r3, r3, #1
 800c44c:	f102 0201 	add.w	r2, r2, #1
 800c450:	d003      	beq.n	800c45a <__lo0bits+0x56>
 800c452:	6003      	str	r3, [r0, #0]
 800c454:	e7e5      	b.n	800c422 <__lo0bits+0x1e>
 800c456:	2200      	movs	r2, #0
 800c458:	e7e3      	b.n	800c422 <__lo0bits+0x1e>
 800c45a:	2220      	movs	r2, #32
 800c45c:	e7e1      	b.n	800c422 <__lo0bits+0x1e>
	...

0800c460 <__i2b>:
 800c460:	b510      	push	{r4, lr}
 800c462:	460c      	mov	r4, r1
 800c464:	2101      	movs	r1, #1
 800c466:	f7ff febb 	bl	800c1e0 <_Balloc>
 800c46a:	4602      	mov	r2, r0
 800c46c:	b928      	cbnz	r0, 800c47a <__i2b+0x1a>
 800c46e:	4b05      	ldr	r3, [pc, #20]	; (800c484 <__i2b+0x24>)
 800c470:	4805      	ldr	r0, [pc, #20]	; (800c488 <__i2b+0x28>)
 800c472:	f240 1145 	movw	r1, #325	; 0x145
 800c476:	f000 fd9d 	bl	800cfb4 <__assert_func>
 800c47a:	2301      	movs	r3, #1
 800c47c:	6144      	str	r4, [r0, #20]
 800c47e:	6103      	str	r3, [r0, #16]
 800c480:	bd10      	pop	{r4, pc}
 800c482:	bf00      	nop
 800c484:	0800deae 	.word	0x0800deae
 800c488:	0800df1f 	.word	0x0800df1f

0800c48c <__multiply>:
 800c48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c490:	4691      	mov	r9, r2
 800c492:	690a      	ldr	r2, [r1, #16]
 800c494:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c498:	429a      	cmp	r2, r3
 800c49a:	bfb8      	it	lt
 800c49c:	460b      	movlt	r3, r1
 800c49e:	460c      	mov	r4, r1
 800c4a0:	bfbc      	itt	lt
 800c4a2:	464c      	movlt	r4, r9
 800c4a4:	4699      	movlt	r9, r3
 800c4a6:	6927      	ldr	r7, [r4, #16]
 800c4a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c4ac:	68a3      	ldr	r3, [r4, #8]
 800c4ae:	6861      	ldr	r1, [r4, #4]
 800c4b0:	eb07 060a 	add.w	r6, r7, sl
 800c4b4:	42b3      	cmp	r3, r6
 800c4b6:	b085      	sub	sp, #20
 800c4b8:	bfb8      	it	lt
 800c4ba:	3101      	addlt	r1, #1
 800c4bc:	f7ff fe90 	bl	800c1e0 <_Balloc>
 800c4c0:	b930      	cbnz	r0, 800c4d0 <__multiply+0x44>
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	4b44      	ldr	r3, [pc, #272]	; (800c5d8 <__multiply+0x14c>)
 800c4c6:	4845      	ldr	r0, [pc, #276]	; (800c5dc <__multiply+0x150>)
 800c4c8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c4cc:	f000 fd72 	bl	800cfb4 <__assert_func>
 800c4d0:	f100 0514 	add.w	r5, r0, #20
 800c4d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c4d8:	462b      	mov	r3, r5
 800c4da:	2200      	movs	r2, #0
 800c4dc:	4543      	cmp	r3, r8
 800c4de:	d321      	bcc.n	800c524 <__multiply+0x98>
 800c4e0:	f104 0314 	add.w	r3, r4, #20
 800c4e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c4e8:	f109 0314 	add.w	r3, r9, #20
 800c4ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c4f0:	9202      	str	r2, [sp, #8]
 800c4f2:	1b3a      	subs	r2, r7, r4
 800c4f4:	3a15      	subs	r2, #21
 800c4f6:	f022 0203 	bic.w	r2, r2, #3
 800c4fa:	3204      	adds	r2, #4
 800c4fc:	f104 0115 	add.w	r1, r4, #21
 800c500:	428f      	cmp	r7, r1
 800c502:	bf38      	it	cc
 800c504:	2204      	movcc	r2, #4
 800c506:	9201      	str	r2, [sp, #4]
 800c508:	9a02      	ldr	r2, [sp, #8]
 800c50a:	9303      	str	r3, [sp, #12]
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d80c      	bhi.n	800c52a <__multiply+0x9e>
 800c510:	2e00      	cmp	r6, #0
 800c512:	dd03      	ble.n	800c51c <__multiply+0x90>
 800c514:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d05b      	beq.n	800c5d4 <__multiply+0x148>
 800c51c:	6106      	str	r6, [r0, #16]
 800c51e:	b005      	add	sp, #20
 800c520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c524:	f843 2b04 	str.w	r2, [r3], #4
 800c528:	e7d8      	b.n	800c4dc <__multiply+0x50>
 800c52a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c52e:	f1ba 0f00 	cmp.w	sl, #0
 800c532:	d024      	beq.n	800c57e <__multiply+0xf2>
 800c534:	f104 0e14 	add.w	lr, r4, #20
 800c538:	46a9      	mov	r9, r5
 800c53a:	f04f 0c00 	mov.w	ip, #0
 800c53e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c542:	f8d9 1000 	ldr.w	r1, [r9]
 800c546:	fa1f fb82 	uxth.w	fp, r2
 800c54a:	b289      	uxth	r1, r1
 800c54c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c550:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c554:	f8d9 2000 	ldr.w	r2, [r9]
 800c558:	4461      	add	r1, ip
 800c55a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c55e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c562:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c566:	b289      	uxth	r1, r1
 800c568:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c56c:	4577      	cmp	r7, lr
 800c56e:	f849 1b04 	str.w	r1, [r9], #4
 800c572:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c576:	d8e2      	bhi.n	800c53e <__multiply+0xb2>
 800c578:	9a01      	ldr	r2, [sp, #4]
 800c57a:	f845 c002 	str.w	ip, [r5, r2]
 800c57e:	9a03      	ldr	r2, [sp, #12]
 800c580:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c584:	3304      	adds	r3, #4
 800c586:	f1b9 0f00 	cmp.w	r9, #0
 800c58a:	d021      	beq.n	800c5d0 <__multiply+0x144>
 800c58c:	6829      	ldr	r1, [r5, #0]
 800c58e:	f104 0c14 	add.w	ip, r4, #20
 800c592:	46ae      	mov	lr, r5
 800c594:	f04f 0a00 	mov.w	sl, #0
 800c598:	f8bc b000 	ldrh.w	fp, [ip]
 800c59c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c5a0:	fb09 220b 	mla	r2, r9, fp, r2
 800c5a4:	4452      	add	r2, sl
 800c5a6:	b289      	uxth	r1, r1
 800c5a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c5ac:	f84e 1b04 	str.w	r1, [lr], #4
 800c5b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c5b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c5b8:	f8be 1000 	ldrh.w	r1, [lr]
 800c5bc:	fb09 110a 	mla	r1, r9, sl, r1
 800c5c0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c5c4:	4567      	cmp	r7, ip
 800c5c6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c5ca:	d8e5      	bhi.n	800c598 <__multiply+0x10c>
 800c5cc:	9a01      	ldr	r2, [sp, #4]
 800c5ce:	50a9      	str	r1, [r5, r2]
 800c5d0:	3504      	adds	r5, #4
 800c5d2:	e799      	b.n	800c508 <__multiply+0x7c>
 800c5d4:	3e01      	subs	r6, #1
 800c5d6:	e79b      	b.n	800c510 <__multiply+0x84>
 800c5d8:	0800deae 	.word	0x0800deae
 800c5dc:	0800df1f 	.word	0x0800df1f

0800c5e0 <__pow5mult>:
 800c5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5e4:	4615      	mov	r5, r2
 800c5e6:	f012 0203 	ands.w	r2, r2, #3
 800c5ea:	4606      	mov	r6, r0
 800c5ec:	460f      	mov	r7, r1
 800c5ee:	d007      	beq.n	800c600 <__pow5mult+0x20>
 800c5f0:	4c25      	ldr	r4, [pc, #148]	; (800c688 <__pow5mult+0xa8>)
 800c5f2:	3a01      	subs	r2, #1
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c5fa:	f7ff fe53 	bl	800c2a4 <__multadd>
 800c5fe:	4607      	mov	r7, r0
 800c600:	10ad      	asrs	r5, r5, #2
 800c602:	d03d      	beq.n	800c680 <__pow5mult+0xa0>
 800c604:	69f4      	ldr	r4, [r6, #28]
 800c606:	b97c      	cbnz	r4, 800c628 <__pow5mult+0x48>
 800c608:	2010      	movs	r0, #16
 800c60a:	f7ff fd23 	bl	800c054 <malloc>
 800c60e:	4602      	mov	r2, r0
 800c610:	61f0      	str	r0, [r6, #28]
 800c612:	b928      	cbnz	r0, 800c620 <__pow5mult+0x40>
 800c614:	4b1d      	ldr	r3, [pc, #116]	; (800c68c <__pow5mult+0xac>)
 800c616:	481e      	ldr	r0, [pc, #120]	; (800c690 <__pow5mult+0xb0>)
 800c618:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c61c:	f000 fcca 	bl	800cfb4 <__assert_func>
 800c620:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c624:	6004      	str	r4, [r0, #0]
 800c626:	60c4      	str	r4, [r0, #12]
 800c628:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c62c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c630:	b94c      	cbnz	r4, 800c646 <__pow5mult+0x66>
 800c632:	f240 2171 	movw	r1, #625	; 0x271
 800c636:	4630      	mov	r0, r6
 800c638:	f7ff ff12 	bl	800c460 <__i2b>
 800c63c:	2300      	movs	r3, #0
 800c63e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c642:	4604      	mov	r4, r0
 800c644:	6003      	str	r3, [r0, #0]
 800c646:	f04f 0900 	mov.w	r9, #0
 800c64a:	07eb      	lsls	r3, r5, #31
 800c64c:	d50a      	bpl.n	800c664 <__pow5mult+0x84>
 800c64e:	4639      	mov	r1, r7
 800c650:	4622      	mov	r2, r4
 800c652:	4630      	mov	r0, r6
 800c654:	f7ff ff1a 	bl	800c48c <__multiply>
 800c658:	4639      	mov	r1, r7
 800c65a:	4680      	mov	r8, r0
 800c65c:	4630      	mov	r0, r6
 800c65e:	f7ff fdff 	bl	800c260 <_Bfree>
 800c662:	4647      	mov	r7, r8
 800c664:	106d      	asrs	r5, r5, #1
 800c666:	d00b      	beq.n	800c680 <__pow5mult+0xa0>
 800c668:	6820      	ldr	r0, [r4, #0]
 800c66a:	b938      	cbnz	r0, 800c67c <__pow5mult+0x9c>
 800c66c:	4622      	mov	r2, r4
 800c66e:	4621      	mov	r1, r4
 800c670:	4630      	mov	r0, r6
 800c672:	f7ff ff0b 	bl	800c48c <__multiply>
 800c676:	6020      	str	r0, [r4, #0]
 800c678:	f8c0 9000 	str.w	r9, [r0]
 800c67c:	4604      	mov	r4, r0
 800c67e:	e7e4      	b.n	800c64a <__pow5mult+0x6a>
 800c680:	4638      	mov	r0, r7
 800c682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c686:	bf00      	nop
 800c688:	0800e068 	.word	0x0800e068
 800c68c:	0800de3f 	.word	0x0800de3f
 800c690:	0800df1f 	.word	0x0800df1f

0800c694 <__lshift>:
 800c694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c698:	460c      	mov	r4, r1
 800c69a:	6849      	ldr	r1, [r1, #4]
 800c69c:	6923      	ldr	r3, [r4, #16]
 800c69e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c6a2:	68a3      	ldr	r3, [r4, #8]
 800c6a4:	4607      	mov	r7, r0
 800c6a6:	4691      	mov	r9, r2
 800c6a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c6ac:	f108 0601 	add.w	r6, r8, #1
 800c6b0:	42b3      	cmp	r3, r6
 800c6b2:	db0b      	blt.n	800c6cc <__lshift+0x38>
 800c6b4:	4638      	mov	r0, r7
 800c6b6:	f7ff fd93 	bl	800c1e0 <_Balloc>
 800c6ba:	4605      	mov	r5, r0
 800c6bc:	b948      	cbnz	r0, 800c6d2 <__lshift+0x3e>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	4b28      	ldr	r3, [pc, #160]	; (800c764 <__lshift+0xd0>)
 800c6c2:	4829      	ldr	r0, [pc, #164]	; (800c768 <__lshift+0xd4>)
 800c6c4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c6c8:	f000 fc74 	bl	800cfb4 <__assert_func>
 800c6cc:	3101      	adds	r1, #1
 800c6ce:	005b      	lsls	r3, r3, #1
 800c6d0:	e7ee      	b.n	800c6b0 <__lshift+0x1c>
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	f100 0114 	add.w	r1, r0, #20
 800c6d8:	f100 0210 	add.w	r2, r0, #16
 800c6dc:	4618      	mov	r0, r3
 800c6de:	4553      	cmp	r3, sl
 800c6e0:	db33      	blt.n	800c74a <__lshift+0xb6>
 800c6e2:	6920      	ldr	r0, [r4, #16]
 800c6e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c6e8:	f104 0314 	add.w	r3, r4, #20
 800c6ec:	f019 091f 	ands.w	r9, r9, #31
 800c6f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c6f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c6f8:	d02b      	beq.n	800c752 <__lshift+0xbe>
 800c6fa:	f1c9 0e20 	rsb	lr, r9, #32
 800c6fe:	468a      	mov	sl, r1
 800c700:	2200      	movs	r2, #0
 800c702:	6818      	ldr	r0, [r3, #0]
 800c704:	fa00 f009 	lsl.w	r0, r0, r9
 800c708:	4310      	orrs	r0, r2
 800c70a:	f84a 0b04 	str.w	r0, [sl], #4
 800c70e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c712:	459c      	cmp	ip, r3
 800c714:	fa22 f20e 	lsr.w	r2, r2, lr
 800c718:	d8f3      	bhi.n	800c702 <__lshift+0x6e>
 800c71a:	ebac 0304 	sub.w	r3, ip, r4
 800c71e:	3b15      	subs	r3, #21
 800c720:	f023 0303 	bic.w	r3, r3, #3
 800c724:	3304      	adds	r3, #4
 800c726:	f104 0015 	add.w	r0, r4, #21
 800c72a:	4584      	cmp	ip, r0
 800c72c:	bf38      	it	cc
 800c72e:	2304      	movcc	r3, #4
 800c730:	50ca      	str	r2, [r1, r3]
 800c732:	b10a      	cbz	r2, 800c738 <__lshift+0xa4>
 800c734:	f108 0602 	add.w	r6, r8, #2
 800c738:	3e01      	subs	r6, #1
 800c73a:	4638      	mov	r0, r7
 800c73c:	612e      	str	r6, [r5, #16]
 800c73e:	4621      	mov	r1, r4
 800c740:	f7ff fd8e 	bl	800c260 <_Bfree>
 800c744:	4628      	mov	r0, r5
 800c746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c74a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c74e:	3301      	adds	r3, #1
 800c750:	e7c5      	b.n	800c6de <__lshift+0x4a>
 800c752:	3904      	subs	r1, #4
 800c754:	f853 2b04 	ldr.w	r2, [r3], #4
 800c758:	f841 2f04 	str.w	r2, [r1, #4]!
 800c75c:	459c      	cmp	ip, r3
 800c75e:	d8f9      	bhi.n	800c754 <__lshift+0xc0>
 800c760:	e7ea      	b.n	800c738 <__lshift+0xa4>
 800c762:	bf00      	nop
 800c764:	0800deae 	.word	0x0800deae
 800c768:	0800df1f 	.word	0x0800df1f

0800c76c <__mcmp>:
 800c76c:	b530      	push	{r4, r5, lr}
 800c76e:	6902      	ldr	r2, [r0, #16]
 800c770:	690c      	ldr	r4, [r1, #16]
 800c772:	1b12      	subs	r2, r2, r4
 800c774:	d10e      	bne.n	800c794 <__mcmp+0x28>
 800c776:	f100 0314 	add.w	r3, r0, #20
 800c77a:	3114      	adds	r1, #20
 800c77c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c780:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c784:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c788:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c78c:	42a5      	cmp	r5, r4
 800c78e:	d003      	beq.n	800c798 <__mcmp+0x2c>
 800c790:	d305      	bcc.n	800c79e <__mcmp+0x32>
 800c792:	2201      	movs	r2, #1
 800c794:	4610      	mov	r0, r2
 800c796:	bd30      	pop	{r4, r5, pc}
 800c798:	4283      	cmp	r3, r0
 800c79a:	d3f3      	bcc.n	800c784 <__mcmp+0x18>
 800c79c:	e7fa      	b.n	800c794 <__mcmp+0x28>
 800c79e:	f04f 32ff 	mov.w	r2, #4294967295
 800c7a2:	e7f7      	b.n	800c794 <__mcmp+0x28>

0800c7a4 <__mdiff>:
 800c7a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7a8:	460c      	mov	r4, r1
 800c7aa:	4606      	mov	r6, r0
 800c7ac:	4611      	mov	r1, r2
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	4690      	mov	r8, r2
 800c7b2:	f7ff ffdb 	bl	800c76c <__mcmp>
 800c7b6:	1e05      	subs	r5, r0, #0
 800c7b8:	d110      	bne.n	800c7dc <__mdiff+0x38>
 800c7ba:	4629      	mov	r1, r5
 800c7bc:	4630      	mov	r0, r6
 800c7be:	f7ff fd0f 	bl	800c1e0 <_Balloc>
 800c7c2:	b930      	cbnz	r0, 800c7d2 <__mdiff+0x2e>
 800c7c4:	4b3a      	ldr	r3, [pc, #232]	; (800c8b0 <__mdiff+0x10c>)
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	f240 2137 	movw	r1, #567	; 0x237
 800c7cc:	4839      	ldr	r0, [pc, #228]	; (800c8b4 <__mdiff+0x110>)
 800c7ce:	f000 fbf1 	bl	800cfb4 <__assert_func>
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c7d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7dc:	bfa4      	itt	ge
 800c7de:	4643      	movge	r3, r8
 800c7e0:	46a0      	movge	r8, r4
 800c7e2:	4630      	mov	r0, r6
 800c7e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c7e8:	bfa6      	itte	ge
 800c7ea:	461c      	movge	r4, r3
 800c7ec:	2500      	movge	r5, #0
 800c7ee:	2501      	movlt	r5, #1
 800c7f0:	f7ff fcf6 	bl	800c1e0 <_Balloc>
 800c7f4:	b920      	cbnz	r0, 800c800 <__mdiff+0x5c>
 800c7f6:	4b2e      	ldr	r3, [pc, #184]	; (800c8b0 <__mdiff+0x10c>)
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	f240 2145 	movw	r1, #581	; 0x245
 800c7fe:	e7e5      	b.n	800c7cc <__mdiff+0x28>
 800c800:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c804:	6926      	ldr	r6, [r4, #16]
 800c806:	60c5      	str	r5, [r0, #12]
 800c808:	f104 0914 	add.w	r9, r4, #20
 800c80c:	f108 0514 	add.w	r5, r8, #20
 800c810:	f100 0e14 	add.w	lr, r0, #20
 800c814:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c818:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c81c:	f108 0210 	add.w	r2, r8, #16
 800c820:	46f2      	mov	sl, lr
 800c822:	2100      	movs	r1, #0
 800c824:	f859 3b04 	ldr.w	r3, [r9], #4
 800c828:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c82c:	fa11 f88b 	uxtah	r8, r1, fp
 800c830:	b299      	uxth	r1, r3
 800c832:	0c1b      	lsrs	r3, r3, #16
 800c834:	eba8 0801 	sub.w	r8, r8, r1
 800c838:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c83c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c840:	fa1f f888 	uxth.w	r8, r8
 800c844:	1419      	asrs	r1, r3, #16
 800c846:	454e      	cmp	r6, r9
 800c848:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c84c:	f84a 3b04 	str.w	r3, [sl], #4
 800c850:	d8e8      	bhi.n	800c824 <__mdiff+0x80>
 800c852:	1b33      	subs	r3, r6, r4
 800c854:	3b15      	subs	r3, #21
 800c856:	f023 0303 	bic.w	r3, r3, #3
 800c85a:	3304      	adds	r3, #4
 800c85c:	3415      	adds	r4, #21
 800c85e:	42a6      	cmp	r6, r4
 800c860:	bf38      	it	cc
 800c862:	2304      	movcc	r3, #4
 800c864:	441d      	add	r5, r3
 800c866:	4473      	add	r3, lr
 800c868:	469e      	mov	lr, r3
 800c86a:	462e      	mov	r6, r5
 800c86c:	4566      	cmp	r6, ip
 800c86e:	d30e      	bcc.n	800c88e <__mdiff+0xea>
 800c870:	f10c 0203 	add.w	r2, ip, #3
 800c874:	1b52      	subs	r2, r2, r5
 800c876:	f022 0203 	bic.w	r2, r2, #3
 800c87a:	3d03      	subs	r5, #3
 800c87c:	45ac      	cmp	ip, r5
 800c87e:	bf38      	it	cc
 800c880:	2200      	movcc	r2, #0
 800c882:	4413      	add	r3, r2
 800c884:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c888:	b17a      	cbz	r2, 800c8aa <__mdiff+0x106>
 800c88a:	6107      	str	r7, [r0, #16]
 800c88c:	e7a4      	b.n	800c7d8 <__mdiff+0x34>
 800c88e:	f856 8b04 	ldr.w	r8, [r6], #4
 800c892:	fa11 f288 	uxtah	r2, r1, r8
 800c896:	1414      	asrs	r4, r2, #16
 800c898:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c89c:	b292      	uxth	r2, r2
 800c89e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c8a2:	f84e 2b04 	str.w	r2, [lr], #4
 800c8a6:	1421      	asrs	r1, r4, #16
 800c8a8:	e7e0      	b.n	800c86c <__mdiff+0xc8>
 800c8aa:	3f01      	subs	r7, #1
 800c8ac:	e7ea      	b.n	800c884 <__mdiff+0xe0>
 800c8ae:	bf00      	nop
 800c8b0:	0800deae 	.word	0x0800deae
 800c8b4:	0800df1f 	.word	0x0800df1f

0800c8b8 <__ulp>:
 800c8b8:	b082      	sub	sp, #8
 800c8ba:	ed8d 0b00 	vstr	d0, [sp]
 800c8be:	9a01      	ldr	r2, [sp, #4]
 800c8c0:	4b0f      	ldr	r3, [pc, #60]	; (800c900 <__ulp+0x48>)
 800c8c2:	4013      	ands	r3, r2
 800c8c4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	dc08      	bgt.n	800c8de <__ulp+0x26>
 800c8cc:	425b      	negs	r3, r3
 800c8ce:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c8d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c8d6:	da04      	bge.n	800c8e2 <__ulp+0x2a>
 800c8d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c8dc:	4113      	asrs	r3, r2
 800c8de:	2200      	movs	r2, #0
 800c8e0:	e008      	b.n	800c8f4 <__ulp+0x3c>
 800c8e2:	f1a2 0314 	sub.w	r3, r2, #20
 800c8e6:	2b1e      	cmp	r3, #30
 800c8e8:	bfda      	itte	le
 800c8ea:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c8ee:	40da      	lsrle	r2, r3
 800c8f0:	2201      	movgt	r2, #1
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	4610      	mov	r0, r2
 800c8f8:	ec41 0b10 	vmov	d0, r0, r1
 800c8fc:	b002      	add	sp, #8
 800c8fe:	4770      	bx	lr
 800c900:	7ff00000 	.word	0x7ff00000

0800c904 <__b2d>:
 800c904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c908:	6906      	ldr	r6, [r0, #16]
 800c90a:	f100 0814 	add.w	r8, r0, #20
 800c90e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c912:	1f37      	subs	r7, r6, #4
 800c914:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c918:	4610      	mov	r0, r2
 800c91a:	f7ff fd53 	bl	800c3c4 <__hi0bits>
 800c91e:	f1c0 0320 	rsb	r3, r0, #32
 800c922:	280a      	cmp	r0, #10
 800c924:	600b      	str	r3, [r1, #0]
 800c926:	491b      	ldr	r1, [pc, #108]	; (800c994 <__b2d+0x90>)
 800c928:	dc15      	bgt.n	800c956 <__b2d+0x52>
 800c92a:	f1c0 0c0b 	rsb	ip, r0, #11
 800c92e:	fa22 f30c 	lsr.w	r3, r2, ip
 800c932:	45b8      	cmp	r8, r7
 800c934:	ea43 0501 	orr.w	r5, r3, r1
 800c938:	bf34      	ite	cc
 800c93a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c93e:	2300      	movcs	r3, #0
 800c940:	3015      	adds	r0, #21
 800c942:	fa02 f000 	lsl.w	r0, r2, r0
 800c946:	fa23 f30c 	lsr.w	r3, r3, ip
 800c94a:	4303      	orrs	r3, r0
 800c94c:	461c      	mov	r4, r3
 800c94e:	ec45 4b10 	vmov	d0, r4, r5
 800c952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c956:	45b8      	cmp	r8, r7
 800c958:	bf3a      	itte	cc
 800c95a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c95e:	f1a6 0708 	subcc.w	r7, r6, #8
 800c962:	2300      	movcs	r3, #0
 800c964:	380b      	subs	r0, #11
 800c966:	d012      	beq.n	800c98e <__b2d+0x8a>
 800c968:	f1c0 0120 	rsb	r1, r0, #32
 800c96c:	fa23 f401 	lsr.w	r4, r3, r1
 800c970:	4082      	lsls	r2, r0
 800c972:	4322      	orrs	r2, r4
 800c974:	4547      	cmp	r7, r8
 800c976:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c97a:	bf8c      	ite	hi
 800c97c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c980:	2200      	movls	r2, #0
 800c982:	4083      	lsls	r3, r0
 800c984:	40ca      	lsrs	r2, r1
 800c986:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c98a:	4313      	orrs	r3, r2
 800c98c:	e7de      	b.n	800c94c <__b2d+0x48>
 800c98e:	ea42 0501 	orr.w	r5, r2, r1
 800c992:	e7db      	b.n	800c94c <__b2d+0x48>
 800c994:	3ff00000 	.word	0x3ff00000

0800c998 <__d2b>:
 800c998:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c99c:	460f      	mov	r7, r1
 800c99e:	2101      	movs	r1, #1
 800c9a0:	ec59 8b10 	vmov	r8, r9, d0
 800c9a4:	4616      	mov	r6, r2
 800c9a6:	f7ff fc1b 	bl	800c1e0 <_Balloc>
 800c9aa:	4604      	mov	r4, r0
 800c9ac:	b930      	cbnz	r0, 800c9bc <__d2b+0x24>
 800c9ae:	4602      	mov	r2, r0
 800c9b0:	4b24      	ldr	r3, [pc, #144]	; (800ca44 <__d2b+0xac>)
 800c9b2:	4825      	ldr	r0, [pc, #148]	; (800ca48 <__d2b+0xb0>)
 800c9b4:	f240 310f 	movw	r1, #783	; 0x30f
 800c9b8:	f000 fafc 	bl	800cfb4 <__assert_func>
 800c9bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c9c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c9c4:	bb2d      	cbnz	r5, 800ca12 <__d2b+0x7a>
 800c9c6:	9301      	str	r3, [sp, #4]
 800c9c8:	f1b8 0300 	subs.w	r3, r8, #0
 800c9cc:	d026      	beq.n	800ca1c <__d2b+0x84>
 800c9ce:	4668      	mov	r0, sp
 800c9d0:	9300      	str	r3, [sp, #0]
 800c9d2:	f7ff fd17 	bl	800c404 <__lo0bits>
 800c9d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c9da:	b1e8      	cbz	r0, 800ca18 <__d2b+0x80>
 800c9dc:	f1c0 0320 	rsb	r3, r0, #32
 800c9e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c9e4:	430b      	orrs	r3, r1
 800c9e6:	40c2      	lsrs	r2, r0
 800c9e8:	6163      	str	r3, [r4, #20]
 800c9ea:	9201      	str	r2, [sp, #4]
 800c9ec:	9b01      	ldr	r3, [sp, #4]
 800c9ee:	61a3      	str	r3, [r4, #24]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	bf14      	ite	ne
 800c9f4:	2202      	movne	r2, #2
 800c9f6:	2201      	moveq	r2, #1
 800c9f8:	6122      	str	r2, [r4, #16]
 800c9fa:	b1bd      	cbz	r5, 800ca2c <__d2b+0x94>
 800c9fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ca00:	4405      	add	r5, r0
 800ca02:	603d      	str	r5, [r7, #0]
 800ca04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ca08:	6030      	str	r0, [r6, #0]
 800ca0a:	4620      	mov	r0, r4
 800ca0c:	b003      	add	sp, #12
 800ca0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca16:	e7d6      	b.n	800c9c6 <__d2b+0x2e>
 800ca18:	6161      	str	r1, [r4, #20]
 800ca1a:	e7e7      	b.n	800c9ec <__d2b+0x54>
 800ca1c:	a801      	add	r0, sp, #4
 800ca1e:	f7ff fcf1 	bl	800c404 <__lo0bits>
 800ca22:	9b01      	ldr	r3, [sp, #4]
 800ca24:	6163      	str	r3, [r4, #20]
 800ca26:	3020      	adds	r0, #32
 800ca28:	2201      	movs	r2, #1
 800ca2a:	e7e5      	b.n	800c9f8 <__d2b+0x60>
 800ca2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ca34:	6038      	str	r0, [r7, #0]
 800ca36:	6918      	ldr	r0, [r3, #16]
 800ca38:	f7ff fcc4 	bl	800c3c4 <__hi0bits>
 800ca3c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ca40:	e7e2      	b.n	800ca08 <__d2b+0x70>
 800ca42:	bf00      	nop
 800ca44:	0800deae 	.word	0x0800deae
 800ca48:	0800df1f 	.word	0x0800df1f

0800ca4c <__ratio>:
 800ca4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca50:	4688      	mov	r8, r1
 800ca52:	4669      	mov	r1, sp
 800ca54:	4681      	mov	r9, r0
 800ca56:	f7ff ff55 	bl	800c904 <__b2d>
 800ca5a:	a901      	add	r1, sp, #4
 800ca5c:	4640      	mov	r0, r8
 800ca5e:	ec55 4b10 	vmov	r4, r5, d0
 800ca62:	f7ff ff4f 	bl	800c904 <__b2d>
 800ca66:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ca6a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ca6e:	eba3 0c02 	sub.w	ip, r3, r2
 800ca72:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ca76:	1a9b      	subs	r3, r3, r2
 800ca78:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ca7c:	ec51 0b10 	vmov	r0, r1, d0
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	bfd6      	itet	le
 800ca84:	460a      	movle	r2, r1
 800ca86:	462a      	movgt	r2, r5
 800ca88:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ca8c:	468b      	mov	fp, r1
 800ca8e:	462f      	mov	r7, r5
 800ca90:	bfd4      	ite	le
 800ca92:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ca96:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	ee10 2a10 	vmov	r2, s0
 800caa0:	465b      	mov	r3, fp
 800caa2:	4639      	mov	r1, r7
 800caa4:	f7f3 feda 	bl	800085c <__aeabi_ddiv>
 800caa8:	ec41 0b10 	vmov	d0, r0, r1
 800caac:	b003      	add	sp, #12
 800caae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cab2 <__copybits>:
 800cab2:	3901      	subs	r1, #1
 800cab4:	b570      	push	{r4, r5, r6, lr}
 800cab6:	1149      	asrs	r1, r1, #5
 800cab8:	6914      	ldr	r4, [r2, #16]
 800caba:	3101      	adds	r1, #1
 800cabc:	f102 0314 	add.w	r3, r2, #20
 800cac0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cac4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cac8:	1f05      	subs	r5, r0, #4
 800caca:	42a3      	cmp	r3, r4
 800cacc:	d30c      	bcc.n	800cae8 <__copybits+0x36>
 800cace:	1aa3      	subs	r3, r4, r2
 800cad0:	3b11      	subs	r3, #17
 800cad2:	f023 0303 	bic.w	r3, r3, #3
 800cad6:	3211      	adds	r2, #17
 800cad8:	42a2      	cmp	r2, r4
 800cada:	bf88      	it	hi
 800cadc:	2300      	movhi	r3, #0
 800cade:	4418      	add	r0, r3
 800cae0:	2300      	movs	r3, #0
 800cae2:	4288      	cmp	r0, r1
 800cae4:	d305      	bcc.n	800caf2 <__copybits+0x40>
 800cae6:	bd70      	pop	{r4, r5, r6, pc}
 800cae8:	f853 6b04 	ldr.w	r6, [r3], #4
 800caec:	f845 6f04 	str.w	r6, [r5, #4]!
 800caf0:	e7eb      	b.n	800caca <__copybits+0x18>
 800caf2:	f840 3b04 	str.w	r3, [r0], #4
 800caf6:	e7f4      	b.n	800cae2 <__copybits+0x30>

0800caf8 <__any_on>:
 800caf8:	f100 0214 	add.w	r2, r0, #20
 800cafc:	6900      	ldr	r0, [r0, #16]
 800cafe:	114b      	asrs	r3, r1, #5
 800cb00:	4298      	cmp	r0, r3
 800cb02:	b510      	push	{r4, lr}
 800cb04:	db11      	blt.n	800cb2a <__any_on+0x32>
 800cb06:	dd0a      	ble.n	800cb1e <__any_on+0x26>
 800cb08:	f011 011f 	ands.w	r1, r1, #31
 800cb0c:	d007      	beq.n	800cb1e <__any_on+0x26>
 800cb0e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cb12:	fa24 f001 	lsr.w	r0, r4, r1
 800cb16:	fa00 f101 	lsl.w	r1, r0, r1
 800cb1a:	428c      	cmp	r4, r1
 800cb1c:	d10b      	bne.n	800cb36 <__any_on+0x3e>
 800cb1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d803      	bhi.n	800cb2e <__any_on+0x36>
 800cb26:	2000      	movs	r0, #0
 800cb28:	bd10      	pop	{r4, pc}
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	e7f7      	b.n	800cb1e <__any_on+0x26>
 800cb2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cb32:	2900      	cmp	r1, #0
 800cb34:	d0f5      	beq.n	800cb22 <__any_on+0x2a>
 800cb36:	2001      	movs	r0, #1
 800cb38:	e7f6      	b.n	800cb28 <__any_on+0x30>

0800cb3a <__ascii_wctomb>:
 800cb3a:	b149      	cbz	r1, 800cb50 <__ascii_wctomb+0x16>
 800cb3c:	2aff      	cmp	r2, #255	; 0xff
 800cb3e:	bf85      	ittet	hi
 800cb40:	238a      	movhi	r3, #138	; 0x8a
 800cb42:	6003      	strhi	r3, [r0, #0]
 800cb44:	700a      	strbls	r2, [r1, #0]
 800cb46:	f04f 30ff 	movhi.w	r0, #4294967295
 800cb4a:	bf98      	it	ls
 800cb4c:	2001      	movls	r0, #1
 800cb4e:	4770      	bx	lr
 800cb50:	4608      	mov	r0, r1
 800cb52:	4770      	bx	lr

0800cb54 <__ssputs_r>:
 800cb54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb58:	688e      	ldr	r6, [r1, #8]
 800cb5a:	461f      	mov	r7, r3
 800cb5c:	42be      	cmp	r6, r7
 800cb5e:	680b      	ldr	r3, [r1, #0]
 800cb60:	4682      	mov	sl, r0
 800cb62:	460c      	mov	r4, r1
 800cb64:	4690      	mov	r8, r2
 800cb66:	d82c      	bhi.n	800cbc2 <__ssputs_r+0x6e>
 800cb68:	898a      	ldrh	r2, [r1, #12]
 800cb6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cb6e:	d026      	beq.n	800cbbe <__ssputs_r+0x6a>
 800cb70:	6965      	ldr	r5, [r4, #20]
 800cb72:	6909      	ldr	r1, [r1, #16]
 800cb74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb78:	eba3 0901 	sub.w	r9, r3, r1
 800cb7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb80:	1c7b      	adds	r3, r7, #1
 800cb82:	444b      	add	r3, r9
 800cb84:	106d      	asrs	r5, r5, #1
 800cb86:	429d      	cmp	r5, r3
 800cb88:	bf38      	it	cc
 800cb8a:	461d      	movcc	r5, r3
 800cb8c:	0553      	lsls	r3, r2, #21
 800cb8e:	d527      	bpl.n	800cbe0 <__ssputs_r+0x8c>
 800cb90:	4629      	mov	r1, r5
 800cb92:	f7ff fa87 	bl	800c0a4 <_malloc_r>
 800cb96:	4606      	mov	r6, r0
 800cb98:	b360      	cbz	r0, 800cbf4 <__ssputs_r+0xa0>
 800cb9a:	6921      	ldr	r1, [r4, #16]
 800cb9c:	464a      	mov	r2, r9
 800cb9e:	f7fe f81a 	bl	800abd6 <memcpy>
 800cba2:	89a3      	ldrh	r3, [r4, #12]
 800cba4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbac:	81a3      	strh	r3, [r4, #12]
 800cbae:	6126      	str	r6, [r4, #16]
 800cbb0:	6165      	str	r5, [r4, #20]
 800cbb2:	444e      	add	r6, r9
 800cbb4:	eba5 0509 	sub.w	r5, r5, r9
 800cbb8:	6026      	str	r6, [r4, #0]
 800cbba:	60a5      	str	r5, [r4, #8]
 800cbbc:	463e      	mov	r6, r7
 800cbbe:	42be      	cmp	r6, r7
 800cbc0:	d900      	bls.n	800cbc4 <__ssputs_r+0x70>
 800cbc2:	463e      	mov	r6, r7
 800cbc4:	6820      	ldr	r0, [r4, #0]
 800cbc6:	4632      	mov	r2, r6
 800cbc8:	4641      	mov	r1, r8
 800cbca:	f000 f9c9 	bl	800cf60 <memmove>
 800cbce:	68a3      	ldr	r3, [r4, #8]
 800cbd0:	1b9b      	subs	r3, r3, r6
 800cbd2:	60a3      	str	r3, [r4, #8]
 800cbd4:	6823      	ldr	r3, [r4, #0]
 800cbd6:	4433      	add	r3, r6
 800cbd8:	6023      	str	r3, [r4, #0]
 800cbda:	2000      	movs	r0, #0
 800cbdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbe0:	462a      	mov	r2, r5
 800cbe2:	f000 fa1b 	bl	800d01c <_realloc_r>
 800cbe6:	4606      	mov	r6, r0
 800cbe8:	2800      	cmp	r0, #0
 800cbea:	d1e0      	bne.n	800cbae <__ssputs_r+0x5a>
 800cbec:	6921      	ldr	r1, [r4, #16]
 800cbee:	4650      	mov	r0, sl
 800cbf0:	f7fe fe8c 	bl	800b90c <_free_r>
 800cbf4:	230c      	movs	r3, #12
 800cbf6:	f8ca 3000 	str.w	r3, [sl]
 800cbfa:	89a3      	ldrh	r3, [r4, #12]
 800cbfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc00:	81a3      	strh	r3, [r4, #12]
 800cc02:	f04f 30ff 	mov.w	r0, #4294967295
 800cc06:	e7e9      	b.n	800cbdc <__ssputs_r+0x88>

0800cc08 <_svfiprintf_r>:
 800cc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc0c:	4698      	mov	r8, r3
 800cc0e:	898b      	ldrh	r3, [r1, #12]
 800cc10:	061b      	lsls	r3, r3, #24
 800cc12:	b09d      	sub	sp, #116	; 0x74
 800cc14:	4607      	mov	r7, r0
 800cc16:	460d      	mov	r5, r1
 800cc18:	4614      	mov	r4, r2
 800cc1a:	d50e      	bpl.n	800cc3a <_svfiprintf_r+0x32>
 800cc1c:	690b      	ldr	r3, [r1, #16]
 800cc1e:	b963      	cbnz	r3, 800cc3a <_svfiprintf_r+0x32>
 800cc20:	2140      	movs	r1, #64	; 0x40
 800cc22:	f7ff fa3f 	bl	800c0a4 <_malloc_r>
 800cc26:	6028      	str	r0, [r5, #0]
 800cc28:	6128      	str	r0, [r5, #16]
 800cc2a:	b920      	cbnz	r0, 800cc36 <_svfiprintf_r+0x2e>
 800cc2c:	230c      	movs	r3, #12
 800cc2e:	603b      	str	r3, [r7, #0]
 800cc30:	f04f 30ff 	mov.w	r0, #4294967295
 800cc34:	e0d0      	b.n	800cdd8 <_svfiprintf_r+0x1d0>
 800cc36:	2340      	movs	r3, #64	; 0x40
 800cc38:	616b      	str	r3, [r5, #20]
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	9309      	str	r3, [sp, #36]	; 0x24
 800cc3e:	2320      	movs	r3, #32
 800cc40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc44:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc48:	2330      	movs	r3, #48	; 0x30
 800cc4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cdf0 <_svfiprintf_r+0x1e8>
 800cc4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc52:	f04f 0901 	mov.w	r9, #1
 800cc56:	4623      	mov	r3, r4
 800cc58:	469a      	mov	sl, r3
 800cc5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc5e:	b10a      	cbz	r2, 800cc64 <_svfiprintf_r+0x5c>
 800cc60:	2a25      	cmp	r2, #37	; 0x25
 800cc62:	d1f9      	bne.n	800cc58 <_svfiprintf_r+0x50>
 800cc64:	ebba 0b04 	subs.w	fp, sl, r4
 800cc68:	d00b      	beq.n	800cc82 <_svfiprintf_r+0x7a>
 800cc6a:	465b      	mov	r3, fp
 800cc6c:	4622      	mov	r2, r4
 800cc6e:	4629      	mov	r1, r5
 800cc70:	4638      	mov	r0, r7
 800cc72:	f7ff ff6f 	bl	800cb54 <__ssputs_r>
 800cc76:	3001      	adds	r0, #1
 800cc78:	f000 80a9 	beq.w	800cdce <_svfiprintf_r+0x1c6>
 800cc7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc7e:	445a      	add	r2, fp
 800cc80:	9209      	str	r2, [sp, #36]	; 0x24
 800cc82:	f89a 3000 	ldrb.w	r3, [sl]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	f000 80a1 	beq.w	800cdce <_svfiprintf_r+0x1c6>
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc96:	f10a 0a01 	add.w	sl, sl, #1
 800cc9a:	9304      	str	r3, [sp, #16]
 800cc9c:	9307      	str	r3, [sp, #28]
 800cc9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cca2:	931a      	str	r3, [sp, #104]	; 0x68
 800cca4:	4654      	mov	r4, sl
 800cca6:	2205      	movs	r2, #5
 800cca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccac:	4850      	ldr	r0, [pc, #320]	; (800cdf0 <_svfiprintf_r+0x1e8>)
 800ccae:	f7f3 fa97 	bl	80001e0 <memchr>
 800ccb2:	9a04      	ldr	r2, [sp, #16]
 800ccb4:	b9d8      	cbnz	r0, 800ccee <_svfiprintf_r+0xe6>
 800ccb6:	06d0      	lsls	r0, r2, #27
 800ccb8:	bf44      	itt	mi
 800ccba:	2320      	movmi	r3, #32
 800ccbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccc0:	0711      	lsls	r1, r2, #28
 800ccc2:	bf44      	itt	mi
 800ccc4:	232b      	movmi	r3, #43	; 0x2b
 800ccc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccca:	f89a 3000 	ldrb.w	r3, [sl]
 800ccce:	2b2a      	cmp	r3, #42	; 0x2a
 800ccd0:	d015      	beq.n	800ccfe <_svfiprintf_r+0xf6>
 800ccd2:	9a07      	ldr	r2, [sp, #28]
 800ccd4:	4654      	mov	r4, sl
 800ccd6:	2000      	movs	r0, #0
 800ccd8:	f04f 0c0a 	mov.w	ip, #10
 800ccdc:	4621      	mov	r1, r4
 800ccde:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cce2:	3b30      	subs	r3, #48	; 0x30
 800cce4:	2b09      	cmp	r3, #9
 800cce6:	d94d      	bls.n	800cd84 <_svfiprintf_r+0x17c>
 800cce8:	b1b0      	cbz	r0, 800cd18 <_svfiprintf_r+0x110>
 800ccea:	9207      	str	r2, [sp, #28]
 800ccec:	e014      	b.n	800cd18 <_svfiprintf_r+0x110>
 800ccee:	eba0 0308 	sub.w	r3, r0, r8
 800ccf2:	fa09 f303 	lsl.w	r3, r9, r3
 800ccf6:	4313      	orrs	r3, r2
 800ccf8:	9304      	str	r3, [sp, #16]
 800ccfa:	46a2      	mov	sl, r4
 800ccfc:	e7d2      	b.n	800cca4 <_svfiprintf_r+0x9c>
 800ccfe:	9b03      	ldr	r3, [sp, #12]
 800cd00:	1d19      	adds	r1, r3, #4
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	9103      	str	r1, [sp, #12]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	bfbb      	ittet	lt
 800cd0a:	425b      	neglt	r3, r3
 800cd0c:	f042 0202 	orrlt.w	r2, r2, #2
 800cd10:	9307      	strge	r3, [sp, #28]
 800cd12:	9307      	strlt	r3, [sp, #28]
 800cd14:	bfb8      	it	lt
 800cd16:	9204      	strlt	r2, [sp, #16]
 800cd18:	7823      	ldrb	r3, [r4, #0]
 800cd1a:	2b2e      	cmp	r3, #46	; 0x2e
 800cd1c:	d10c      	bne.n	800cd38 <_svfiprintf_r+0x130>
 800cd1e:	7863      	ldrb	r3, [r4, #1]
 800cd20:	2b2a      	cmp	r3, #42	; 0x2a
 800cd22:	d134      	bne.n	800cd8e <_svfiprintf_r+0x186>
 800cd24:	9b03      	ldr	r3, [sp, #12]
 800cd26:	1d1a      	adds	r2, r3, #4
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	9203      	str	r2, [sp, #12]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	bfb8      	it	lt
 800cd30:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd34:	3402      	adds	r4, #2
 800cd36:	9305      	str	r3, [sp, #20]
 800cd38:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ce00 <_svfiprintf_r+0x1f8>
 800cd3c:	7821      	ldrb	r1, [r4, #0]
 800cd3e:	2203      	movs	r2, #3
 800cd40:	4650      	mov	r0, sl
 800cd42:	f7f3 fa4d 	bl	80001e0 <memchr>
 800cd46:	b138      	cbz	r0, 800cd58 <_svfiprintf_r+0x150>
 800cd48:	9b04      	ldr	r3, [sp, #16]
 800cd4a:	eba0 000a 	sub.w	r0, r0, sl
 800cd4e:	2240      	movs	r2, #64	; 0x40
 800cd50:	4082      	lsls	r2, r0
 800cd52:	4313      	orrs	r3, r2
 800cd54:	3401      	adds	r4, #1
 800cd56:	9304      	str	r3, [sp, #16]
 800cd58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd5c:	4825      	ldr	r0, [pc, #148]	; (800cdf4 <_svfiprintf_r+0x1ec>)
 800cd5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd62:	2206      	movs	r2, #6
 800cd64:	f7f3 fa3c 	bl	80001e0 <memchr>
 800cd68:	2800      	cmp	r0, #0
 800cd6a:	d038      	beq.n	800cdde <_svfiprintf_r+0x1d6>
 800cd6c:	4b22      	ldr	r3, [pc, #136]	; (800cdf8 <_svfiprintf_r+0x1f0>)
 800cd6e:	bb1b      	cbnz	r3, 800cdb8 <_svfiprintf_r+0x1b0>
 800cd70:	9b03      	ldr	r3, [sp, #12]
 800cd72:	3307      	adds	r3, #7
 800cd74:	f023 0307 	bic.w	r3, r3, #7
 800cd78:	3308      	adds	r3, #8
 800cd7a:	9303      	str	r3, [sp, #12]
 800cd7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd7e:	4433      	add	r3, r6
 800cd80:	9309      	str	r3, [sp, #36]	; 0x24
 800cd82:	e768      	b.n	800cc56 <_svfiprintf_r+0x4e>
 800cd84:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd88:	460c      	mov	r4, r1
 800cd8a:	2001      	movs	r0, #1
 800cd8c:	e7a6      	b.n	800ccdc <_svfiprintf_r+0xd4>
 800cd8e:	2300      	movs	r3, #0
 800cd90:	3401      	adds	r4, #1
 800cd92:	9305      	str	r3, [sp, #20]
 800cd94:	4619      	mov	r1, r3
 800cd96:	f04f 0c0a 	mov.w	ip, #10
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cda0:	3a30      	subs	r2, #48	; 0x30
 800cda2:	2a09      	cmp	r2, #9
 800cda4:	d903      	bls.n	800cdae <_svfiprintf_r+0x1a6>
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d0c6      	beq.n	800cd38 <_svfiprintf_r+0x130>
 800cdaa:	9105      	str	r1, [sp, #20]
 800cdac:	e7c4      	b.n	800cd38 <_svfiprintf_r+0x130>
 800cdae:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdb2:	4604      	mov	r4, r0
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	e7f0      	b.n	800cd9a <_svfiprintf_r+0x192>
 800cdb8:	ab03      	add	r3, sp, #12
 800cdba:	9300      	str	r3, [sp, #0]
 800cdbc:	462a      	mov	r2, r5
 800cdbe:	4b0f      	ldr	r3, [pc, #60]	; (800cdfc <_svfiprintf_r+0x1f4>)
 800cdc0:	a904      	add	r1, sp, #16
 800cdc2:	4638      	mov	r0, r7
 800cdc4:	f7fc ff68 	bl	8009c98 <_printf_float>
 800cdc8:	1c42      	adds	r2, r0, #1
 800cdca:	4606      	mov	r6, r0
 800cdcc:	d1d6      	bne.n	800cd7c <_svfiprintf_r+0x174>
 800cdce:	89ab      	ldrh	r3, [r5, #12]
 800cdd0:	065b      	lsls	r3, r3, #25
 800cdd2:	f53f af2d 	bmi.w	800cc30 <_svfiprintf_r+0x28>
 800cdd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cdd8:	b01d      	add	sp, #116	; 0x74
 800cdda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdde:	ab03      	add	r3, sp, #12
 800cde0:	9300      	str	r3, [sp, #0]
 800cde2:	462a      	mov	r2, r5
 800cde4:	4b05      	ldr	r3, [pc, #20]	; (800cdfc <_svfiprintf_r+0x1f4>)
 800cde6:	a904      	add	r1, sp, #16
 800cde8:	4638      	mov	r0, r7
 800cdea:	f7fd f9f9 	bl	800a1e0 <_printf_i>
 800cdee:	e7eb      	b.n	800cdc8 <_svfiprintf_r+0x1c0>
 800cdf0:	0800e074 	.word	0x0800e074
 800cdf4:	0800e07e 	.word	0x0800e07e
 800cdf8:	08009c99 	.word	0x08009c99
 800cdfc:	0800cb55 	.word	0x0800cb55
 800ce00:	0800e07a 	.word	0x0800e07a

0800ce04 <__sflush_r>:
 800ce04:	898a      	ldrh	r2, [r1, #12]
 800ce06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce0a:	4605      	mov	r5, r0
 800ce0c:	0710      	lsls	r0, r2, #28
 800ce0e:	460c      	mov	r4, r1
 800ce10:	d458      	bmi.n	800cec4 <__sflush_r+0xc0>
 800ce12:	684b      	ldr	r3, [r1, #4]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	dc05      	bgt.n	800ce24 <__sflush_r+0x20>
 800ce18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	dc02      	bgt.n	800ce24 <__sflush_r+0x20>
 800ce1e:	2000      	movs	r0, #0
 800ce20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce26:	2e00      	cmp	r6, #0
 800ce28:	d0f9      	beq.n	800ce1e <__sflush_r+0x1a>
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce30:	682f      	ldr	r7, [r5, #0]
 800ce32:	6a21      	ldr	r1, [r4, #32]
 800ce34:	602b      	str	r3, [r5, #0]
 800ce36:	d032      	beq.n	800ce9e <__sflush_r+0x9a>
 800ce38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce3a:	89a3      	ldrh	r3, [r4, #12]
 800ce3c:	075a      	lsls	r2, r3, #29
 800ce3e:	d505      	bpl.n	800ce4c <__sflush_r+0x48>
 800ce40:	6863      	ldr	r3, [r4, #4]
 800ce42:	1ac0      	subs	r0, r0, r3
 800ce44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce46:	b10b      	cbz	r3, 800ce4c <__sflush_r+0x48>
 800ce48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce4a:	1ac0      	subs	r0, r0, r3
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	4602      	mov	r2, r0
 800ce50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce52:	6a21      	ldr	r1, [r4, #32]
 800ce54:	4628      	mov	r0, r5
 800ce56:	47b0      	blx	r6
 800ce58:	1c43      	adds	r3, r0, #1
 800ce5a:	89a3      	ldrh	r3, [r4, #12]
 800ce5c:	d106      	bne.n	800ce6c <__sflush_r+0x68>
 800ce5e:	6829      	ldr	r1, [r5, #0]
 800ce60:	291d      	cmp	r1, #29
 800ce62:	d82b      	bhi.n	800cebc <__sflush_r+0xb8>
 800ce64:	4a29      	ldr	r2, [pc, #164]	; (800cf0c <__sflush_r+0x108>)
 800ce66:	410a      	asrs	r2, r1
 800ce68:	07d6      	lsls	r6, r2, #31
 800ce6a:	d427      	bmi.n	800cebc <__sflush_r+0xb8>
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	6062      	str	r2, [r4, #4]
 800ce70:	04d9      	lsls	r1, r3, #19
 800ce72:	6922      	ldr	r2, [r4, #16]
 800ce74:	6022      	str	r2, [r4, #0]
 800ce76:	d504      	bpl.n	800ce82 <__sflush_r+0x7e>
 800ce78:	1c42      	adds	r2, r0, #1
 800ce7a:	d101      	bne.n	800ce80 <__sflush_r+0x7c>
 800ce7c:	682b      	ldr	r3, [r5, #0]
 800ce7e:	b903      	cbnz	r3, 800ce82 <__sflush_r+0x7e>
 800ce80:	6560      	str	r0, [r4, #84]	; 0x54
 800ce82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce84:	602f      	str	r7, [r5, #0]
 800ce86:	2900      	cmp	r1, #0
 800ce88:	d0c9      	beq.n	800ce1e <__sflush_r+0x1a>
 800ce8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce8e:	4299      	cmp	r1, r3
 800ce90:	d002      	beq.n	800ce98 <__sflush_r+0x94>
 800ce92:	4628      	mov	r0, r5
 800ce94:	f7fe fd3a 	bl	800b90c <_free_r>
 800ce98:	2000      	movs	r0, #0
 800ce9a:	6360      	str	r0, [r4, #52]	; 0x34
 800ce9c:	e7c0      	b.n	800ce20 <__sflush_r+0x1c>
 800ce9e:	2301      	movs	r3, #1
 800cea0:	4628      	mov	r0, r5
 800cea2:	47b0      	blx	r6
 800cea4:	1c41      	adds	r1, r0, #1
 800cea6:	d1c8      	bne.n	800ce3a <__sflush_r+0x36>
 800cea8:	682b      	ldr	r3, [r5, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d0c5      	beq.n	800ce3a <__sflush_r+0x36>
 800ceae:	2b1d      	cmp	r3, #29
 800ceb0:	d001      	beq.n	800ceb6 <__sflush_r+0xb2>
 800ceb2:	2b16      	cmp	r3, #22
 800ceb4:	d101      	bne.n	800ceba <__sflush_r+0xb6>
 800ceb6:	602f      	str	r7, [r5, #0]
 800ceb8:	e7b1      	b.n	800ce1e <__sflush_r+0x1a>
 800ceba:	89a3      	ldrh	r3, [r4, #12]
 800cebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cec0:	81a3      	strh	r3, [r4, #12]
 800cec2:	e7ad      	b.n	800ce20 <__sflush_r+0x1c>
 800cec4:	690f      	ldr	r7, [r1, #16]
 800cec6:	2f00      	cmp	r7, #0
 800cec8:	d0a9      	beq.n	800ce1e <__sflush_r+0x1a>
 800ceca:	0793      	lsls	r3, r2, #30
 800cecc:	680e      	ldr	r6, [r1, #0]
 800cece:	bf08      	it	eq
 800ced0:	694b      	ldreq	r3, [r1, #20]
 800ced2:	600f      	str	r7, [r1, #0]
 800ced4:	bf18      	it	ne
 800ced6:	2300      	movne	r3, #0
 800ced8:	eba6 0807 	sub.w	r8, r6, r7
 800cedc:	608b      	str	r3, [r1, #8]
 800cede:	f1b8 0f00 	cmp.w	r8, #0
 800cee2:	dd9c      	ble.n	800ce1e <__sflush_r+0x1a>
 800cee4:	6a21      	ldr	r1, [r4, #32]
 800cee6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cee8:	4643      	mov	r3, r8
 800ceea:	463a      	mov	r2, r7
 800ceec:	4628      	mov	r0, r5
 800ceee:	47b0      	blx	r6
 800cef0:	2800      	cmp	r0, #0
 800cef2:	dc06      	bgt.n	800cf02 <__sflush_r+0xfe>
 800cef4:	89a3      	ldrh	r3, [r4, #12]
 800cef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cefa:	81a3      	strh	r3, [r4, #12]
 800cefc:	f04f 30ff 	mov.w	r0, #4294967295
 800cf00:	e78e      	b.n	800ce20 <__sflush_r+0x1c>
 800cf02:	4407      	add	r7, r0
 800cf04:	eba8 0800 	sub.w	r8, r8, r0
 800cf08:	e7e9      	b.n	800cede <__sflush_r+0xda>
 800cf0a:	bf00      	nop
 800cf0c:	dfbffffe 	.word	0xdfbffffe

0800cf10 <_fflush_r>:
 800cf10:	b538      	push	{r3, r4, r5, lr}
 800cf12:	690b      	ldr	r3, [r1, #16]
 800cf14:	4605      	mov	r5, r0
 800cf16:	460c      	mov	r4, r1
 800cf18:	b913      	cbnz	r3, 800cf20 <_fflush_r+0x10>
 800cf1a:	2500      	movs	r5, #0
 800cf1c:	4628      	mov	r0, r5
 800cf1e:	bd38      	pop	{r3, r4, r5, pc}
 800cf20:	b118      	cbz	r0, 800cf2a <_fflush_r+0x1a>
 800cf22:	6a03      	ldr	r3, [r0, #32]
 800cf24:	b90b      	cbnz	r3, 800cf2a <_fflush_r+0x1a>
 800cf26:	f7fd fd19 	bl	800a95c <__sinit>
 800cf2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d0f3      	beq.n	800cf1a <_fflush_r+0xa>
 800cf32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cf34:	07d0      	lsls	r0, r2, #31
 800cf36:	d404      	bmi.n	800cf42 <_fflush_r+0x32>
 800cf38:	0599      	lsls	r1, r3, #22
 800cf3a:	d402      	bmi.n	800cf42 <_fflush_r+0x32>
 800cf3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf3e:	f7fd fe48 	bl	800abd2 <__retarget_lock_acquire_recursive>
 800cf42:	4628      	mov	r0, r5
 800cf44:	4621      	mov	r1, r4
 800cf46:	f7ff ff5d 	bl	800ce04 <__sflush_r>
 800cf4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf4c:	07da      	lsls	r2, r3, #31
 800cf4e:	4605      	mov	r5, r0
 800cf50:	d4e4      	bmi.n	800cf1c <_fflush_r+0xc>
 800cf52:	89a3      	ldrh	r3, [r4, #12]
 800cf54:	059b      	lsls	r3, r3, #22
 800cf56:	d4e1      	bmi.n	800cf1c <_fflush_r+0xc>
 800cf58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf5a:	f7fd fe3b 	bl	800abd4 <__retarget_lock_release_recursive>
 800cf5e:	e7dd      	b.n	800cf1c <_fflush_r+0xc>

0800cf60 <memmove>:
 800cf60:	4288      	cmp	r0, r1
 800cf62:	b510      	push	{r4, lr}
 800cf64:	eb01 0402 	add.w	r4, r1, r2
 800cf68:	d902      	bls.n	800cf70 <memmove+0x10>
 800cf6a:	4284      	cmp	r4, r0
 800cf6c:	4623      	mov	r3, r4
 800cf6e:	d807      	bhi.n	800cf80 <memmove+0x20>
 800cf70:	1e43      	subs	r3, r0, #1
 800cf72:	42a1      	cmp	r1, r4
 800cf74:	d008      	beq.n	800cf88 <memmove+0x28>
 800cf76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf7e:	e7f8      	b.n	800cf72 <memmove+0x12>
 800cf80:	4402      	add	r2, r0
 800cf82:	4601      	mov	r1, r0
 800cf84:	428a      	cmp	r2, r1
 800cf86:	d100      	bne.n	800cf8a <memmove+0x2a>
 800cf88:	bd10      	pop	{r4, pc}
 800cf8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf92:	e7f7      	b.n	800cf84 <memmove+0x24>

0800cf94 <_sbrk_r>:
 800cf94:	b538      	push	{r3, r4, r5, lr}
 800cf96:	4d06      	ldr	r5, [pc, #24]	; (800cfb0 <_sbrk_r+0x1c>)
 800cf98:	2300      	movs	r3, #0
 800cf9a:	4604      	mov	r4, r0
 800cf9c:	4608      	mov	r0, r1
 800cf9e:	602b      	str	r3, [r5, #0]
 800cfa0:	f7f7 ff1a 	bl	8004dd8 <_sbrk>
 800cfa4:	1c43      	adds	r3, r0, #1
 800cfa6:	d102      	bne.n	800cfae <_sbrk_r+0x1a>
 800cfa8:	682b      	ldr	r3, [r5, #0]
 800cfaa:	b103      	cbz	r3, 800cfae <_sbrk_r+0x1a>
 800cfac:	6023      	str	r3, [r4, #0]
 800cfae:	bd38      	pop	{r3, r4, r5, pc}
 800cfb0:	200008f0 	.word	0x200008f0

0800cfb4 <__assert_func>:
 800cfb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cfb6:	4614      	mov	r4, r2
 800cfb8:	461a      	mov	r2, r3
 800cfba:	4b09      	ldr	r3, [pc, #36]	; (800cfe0 <__assert_func+0x2c>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	4605      	mov	r5, r0
 800cfc0:	68d8      	ldr	r0, [r3, #12]
 800cfc2:	b14c      	cbz	r4, 800cfd8 <__assert_func+0x24>
 800cfc4:	4b07      	ldr	r3, [pc, #28]	; (800cfe4 <__assert_func+0x30>)
 800cfc6:	9100      	str	r1, [sp, #0]
 800cfc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cfcc:	4906      	ldr	r1, [pc, #24]	; (800cfe8 <__assert_func+0x34>)
 800cfce:	462b      	mov	r3, r5
 800cfd0:	f000 f854 	bl	800d07c <fiprintf>
 800cfd4:	f000 f864 	bl	800d0a0 <abort>
 800cfd8:	4b04      	ldr	r3, [pc, #16]	; (800cfec <__assert_func+0x38>)
 800cfda:	461c      	mov	r4, r3
 800cfdc:	e7f3      	b.n	800cfc6 <__assert_func+0x12>
 800cfde:	bf00      	nop
 800cfe0:	2000023c 	.word	0x2000023c
 800cfe4:	0800e085 	.word	0x0800e085
 800cfe8:	0800e092 	.word	0x0800e092
 800cfec:	0800e0c0 	.word	0x0800e0c0

0800cff0 <_calloc_r>:
 800cff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cff2:	fba1 2402 	umull	r2, r4, r1, r2
 800cff6:	b94c      	cbnz	r4, 800d00c <_calloc_r+0x1c>
 800cff8:	4611      	mov	r1, r2
 800cffa:	9201      	str	r2, [sp, #4]
 800cffc:	f7ff f852 	bl	800c0a4 <_malloc_r>
 800d000:	9a01      	ldr	r2, [sp, #4]
 800d002:	4605      	mov	r5, r0
 800d004:	b930      	cbnz	r0, 800d014 <_calloc_r+0x24>
 800d006:	4628      	mov	r0, r5
 800d008:	b003      	add	sp, #12
 800d00a:	bd30      	pop	{r4, r5, pc}
 800d00c:	220c      	movs	r2, #12
 800d00e:	6002      	str	r2, [r0, #0]
 800d010:	2500      	movs	r5, #0
 800d012:	e7f8      	b.n	800d006 <_calloc_r+0x16>
 800d014:	4621      	mov	r1, r4
 800d016:	f7fd fd3a 	bl	800aa8e <memset>
 800d01a:	e7f4      	b.n	800d006 <_calloc_r+0x16>

0800d01c <_realloc_r>:
 800d01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d020:	4680      	mov	r8, r0
 800d022:	4614      	mov	r4, r2
 800d024:	460e      	mov	r6, r1
 800d026:	b921      	cbnz	r1, 800d032 <_realloc_r+0x16>
 800d028:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d02c:	4611      	mov	r1, r2
 800d02e:	f7ff b839 	b.w	800c0a4 <_malloc_r>
 800d032:	b92a      	cbnz	r2, 800d040 <_realloc_r+0x24>
 800d034:	f7fe fc6a 	bl	800b90c <_free_r>
 800d038:	4625      	mov	r5, r4
 800d03a:	4628      	mov	r0, r5
 800d03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d040:	f000 f835 	bl	800d0ae <_malloc_usable_size_r>
 800d044:	4284      	cmp	r4, r0
 800d046:	4607      	mov	r7, r0
 800d048:	d802      	bhi.n	800d050 <_realloc_r+0x34>
 800d04a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d04e:	d812      	bhi.n	800d076 <_realloc_r+0x5a>
 800d050:	4621      	mov	r1, r4
 800d052:	4640      	mov	r0, r8
 800d054:	f7ff f826 	bl	800c0a4 <_malloc_r>
 800d058:	4605      	mov	r5, r0
 800d05a:	2800      	cmp	r0, #0
 800d05c:	d0ed      	beq.n	800d03a <_realloc_r+0x1e>
 800d05e:	42bc      	cmp	r4, r7
 800d060:	4622      	mov	r2, r4
 800d062:	4631      	mov	r1, r6
 800d064:	bf28      	it	cs
 800d066:	463a      	movcs	r2, r7
 800d068:	f7fd fdb5 	bl	800abd6 <memcpy>
 800d06c:	4631      	mov	r1, r6
 800d06e:	4640      	mov	r0, r8
 800d070:	f7fe fc4c 	bl	800b90c <_free_r>
 800d074:	e7e1      	b.n	800d03a <_realloc_r+0x1e>
 800d076:	4635      	mov	r5, r6
 800d078:	e7df      	b.n	800d03a <_realloc_r+0x1e>
	...

0800d07c <fiprintf>:
 800d07c:	b40e      	push	{r1, r2, r3}
 800d07e:	b503      	push	{r0, r1, lr}
 800d080:	4601      	mov	r1, r0
 800d082:	ab03      	add	r3, sp, #12
 800d084:	4805      	ldr	r0, [pc, #20]	; (800d09c <fiprintf+0x20>)
 800d086:	f853 2b04 	ldr.w	r2, [r3], #4
 800d08a:	6800      	ldr	r0, [r0, #0]
 800d08c:	9301      	str	r3, [sp, #4]
 800d08e:	f000 f83f 	bl	800d110 <_vfiprintf_r>
 800d092:	b002      	add	sp, #8
 800d094:	f85d eb04 	ldr.w	lr, [sp], #4
 800d098:	b003      	add	sp, #12
 800d09a:	4770      	bx	lr
 800d09c:	2000023c 	.word	0x2000023c

0800d0a0 <abort>:
 800d0a0:	b508      	push	{r3, lr}
 800d0a2:	2006      	movs	r0, #6
 800d0a4:	f000 fa0c 	bl	800d4c0 <raise>
 800d0a8:	2001      	movs	r0, #1
 800d0aa:	f7f7 fe1d 	bl	8004ce8 <_exit>

0800d0ae <_malloc_usable_size_r>:
 800d0ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0b2:	1f18      	subs	r0, r3, #4
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	bfbc      	itt	lt
 800d0b8:	580b      	ldrlt	r3, [r1, r0]
 800d0ba:	18c0      	addlt	r0, r0, r3
 800d0bc:	4770      	bx	lr

0800d0be <__sfputc_r>:
 800d0be:	6893      	ldr	r3, [r2, #8]
 800d0c0:	3b01      	subs	r3, #1
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	b410      	push	{r4}
 800d0c6:	6093      	str	r3, [r2, #8]
 800d0c8:	da08      	bge.n	800d0dc <__sfputc_r+0x1e>
 800d0ca:	6994      	ldr	r4, [r2, #24]
 800d0cc:	42a3      	cmp	r3, r4
 800d0ce:	db01      	blt.n	800d0d4 <__sfputc_r+0x16>
 800d0d0:	290a      	cmp	r1, #10
 800d0d2:	d103      	bne.n	800d0dc <__sfputc_r+0x1e>
 800d0d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0d8:	f000 b934 	b.w	800d344 <__swbuf_r>
 800d0dc:	6813      	ldr	r3, [r2, #0]
 800d0de:	1c58      	adds	r0, r3, #1
 800d0e0:	6010      	str	r0, [r2, #0]
 800d0e2:	7019      	strb	r1, [r3, #0]
 800d0e4:	4608      	mov	r0, r1
 800d0e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0ea:	4770      	bx	lr

0800d0ec <__sfputs_r>:
 800d0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ee:	4606      	mov	r6, r0
 800d0f0:	460f      	mov	r7, r1
 800d0f2:	4614      	mov	r4, r2
 800d0f4:	18d5      	adds	r5, r2, r3
 800d0f6:	42ac      	cmp	r4, r5
 800d0f8:	d101      	bne.n	800d0fe <__sfputs_r+0x12>
 800d0fa:	2000      	movs	r0, #0
 800d0fc:	e007      	b.n	800d10e <__sfputs_r+0x22>
 800d0fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d102:	463a      	mov	r2, r7
 800d104:	4630      	mov	r0, r6
 800d106:	f7ff ffda 	bl	800d0be <__sfputc_r>
 800d10a:	1c43      	adds	r3, r0, #1
 800d10c:	d1f3      	bne.n	800d0f6 <__sfputs_r+0xa>
 800d10e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d110 <_vfiprintf_r>:
 800d110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d114:	460d      	mov	r5, r1
 800d116:	b09d      	sub	sp, #116	; 0x74
 800d118:	4614      	mov	r4, r2
 800d11a:	4698      	mov	r8, r3
 800d11c:	4606      	mov	r6, r0
 800d11e:	b118      	cbz	r0, 800d128 <_vfiprintf_r+0x18>
 800d120:	6a03      	ldr	r3, [r0, #32]
 800d122:	b90b      	cbnz	r3, 800d128 <_vfiprintf_r+0x18>
 800d124:	f7fd fc1a 	bl	800a95c <__sinit>
 800d128:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d12a:	07d9      	lsls	r1, r3, #31
 800d12c:	d405      	bmi.n	800d13a <_vfiprintf_r+0x2a>
 800d12e:	89ab      	ldrh	r3, [r5, #12]
 800d130:	059a      	lsls	r2, r3, #22
 800d132:	d402      	bmi.n	800d13a <_vfiprintf_r+0x2a>
 800d134:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d136:	f7fd fd4c 	bl	800abd2 <__retarget_lock_acquire_recursive>
 800d13a:	89ab      	ldrh	r3, [r5, #12]
 800d13c:	071b      	lsls	r3, r3, #28
 800d13e:	d501      	bpl.n	800d144 <_vfiprintf_r+0x34>
 800d140:	692b      	ldr	r3, [r5, #16]
 800d142:	b99b      	cbnz	r3, 800d16c <_vfiprintf_r+0x5c>
 800d144:	4629      	mov	r1, r5
 800d146:	4630      	mov	r0, r6
 800d148:	f000 f93a 	bl	800d3c0 <__swsetup_r>
 800d14c:	b170      	cbz	r0, 800d16c <_vfiprintf_r+0x5c>
 800d14e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d150:	07dc      	lsls	r4, r3, #31
 800d152:	d504      	bpl.n	800d15e <_vfiprintf_r+0x4e>
 800d154:	f04f 30ff 	mov.w	r0, #4294967295
 800d158:	b01d      	add	sp, #116	; 0x74
 800d15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d15e:	89ab      	ldrh	r3, [r5, #12]
 800d160:	0598      	lsls	r0, r3, #22
 800d162:	d4f7      	bmi.n	800d154 <_vfiprintf_r+0x44>
 800d164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d166:	f7fd fd35 	bl	800abd4 <__retarget_lock_release_recursive>
 800d16a:	e7f3      	b.n	800d154 <_vfiprintf_r+0x44>
 800d16c:	2300      	movs	r3, #0
 800d16e:	9309      	str	r3, [sp, #36]	; 0x24
 800d170:	2320      	movs	r3, #32
 800d172:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d176:	f8cd 800c 	str.w	r8, [sp, #12]
 800d17a:	2330      	movs	r3, #48	; 0x30
 800d17c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d330 <_vfiprintf_r+0x220>
 800d180:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d184:	f04f 0901 	mov.w	r9, #1
 800d188:	4623      	mov	r3, r4
 800d18a:	469a      	mov	sl, r3
 800d18c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d190:	b10a      	cbz	r2, 800d196 <_vfiprintf_r+0x86>
 800d192:	2a25      	cmp	r2, #37	; 0x25
 800d194:	d1f9      	bne.n	800d18a <_vfiprintf_r+0x7a>
 800d196:	ebba 0b04 	subs.w	fp, sl, r4
 800d19a:	d00b      	beq.n	800d1b4 <_vfiprintf_r+0xa4>
 800d19c:	465b      	mov	r3, fp
 800d19e:	4622      	mov	r2, r4
 800d1a0:	4629      	mov	r1, r5
 800d1a2:	4630      	mov	r0, r6
 800d1a4:	f7ff ffa2 	bl	800d0ec <__sfputs_r>
 800d1a8:	3001      	adds	r0, #1
 800d1aa:	f000 80a9 	beq.w	800d300 <_vfiprintf_r+0x1f0>
 800d1ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1b0:	445a      	add	r2, fp
 800d1b2:	9209      	str	r2, [sp, #36]	; 0x24
 800d1b4:	f89a 3000 	ldrb.w	r3, [sl]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	f000 80a1 	beq.w	800d300 <_vfiprintf_r+0x1f0>
 800d1be:	2300      	movs	r3, #0
 800d1c0:	f04f 32ff 	mov.w	r2, #4294967295
 800d1c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1c8:	f10a 0a01 	add.w	sl, sl, #1
 800d1cc:	9304      	str	r3, [sp, #16]
 800d1ce:	9307      	str	r3, [sp, #28]
 800d1d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1d4:	931a      	str	r3, [sp, #104]	; 0x68
 800d1d6:	4654      	mov	r4, sl
 800d1d8:	2205      	movs	r2, #5
 800d1da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1de:	4854      	ldr	r0, [pc, #336]	; (800d330 <_vfiprintf_r+0x220>)
 800d1e0:	f7f2 fffe 	bl	80001e0 <memchr>
 800d1e4:	9a04      	ldr	r2, [sp, #16]
 800d1e6:	b9d8      	cbnz	r0, 800d220 <_vfiprintf_r+0x110>
 800d1e8:	06d1      	lsls	r1, r2, #27
 800d1ea:	bf44      	itt	mi
 800d1ec:	2320      	movmi	r3, #32
 800d1ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1f2:	0713      	lsls	r3, r2, #28
 800d1f4:	bf44      	itt	mi
 800d1f6:	232b      	movmi	r3, #43	; 0x2b
 800d1f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1fc:	f89a 3000 	ldrb.w	r3, [sl]
 800d200:	2b2a      	cmp	r3, #42	; 0x2a
 800d202:	d015      	beq.n	800d230 <_vfiprintf_r+0x120>
 800d204:	9a07      	ldr	r2, [sp, #28]
 800d206:	4654      	mov	r4, sl
 800d208:	2000      	movs	r0, #0
 800d20a:	f04f 0c0a 	mov.w	ip, #10
 800d20e:	4621      	mov	r1, r4
 800d210:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d214:	3b30      	subs	r3, #48	; 0x30
 800d216:	2b09      	cmp	r3, #9
 800d218:	d94d      	bls.n	800d2b6 <_vfiprintf_r+0x1a6>
 800d21a:	b1b0      	cbz	r0, 800d24a <_vfiprintf_r+0x13a>
 800d21c:	9207      	str	r2, [sp, #28]
 800d21e:	e014      	b.n	800d24a <_vfiprintf_r+0x13a>
 800d220:	eba0 0308 	sub.w	r3, r0, r8
 800d224:	fa09 f303 	lsl.w	r3, r9, r3
 800d228:	4313      	orrs	r3, r2
 800d22a:	9304      	str	r3, [sp, #16]
 800d22c:	46a2      	mov	sl, r4
 800d22e:	e7d2      	b.n	800d1d6 <_vfiprintf_r+0xc6>
 800d230:	9b03      	ldr	r3, [sp, #12]
 800d232:	1d19      	adds	r1, r3, #4
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	9103      	str	r1, [sp, #12]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	bfbb      	ittet	lt
 800d23c:	425b      	neglt	r3, r3
 800d23e:	f042 0202 	orrlt.w	r2, r2, #2
 800d242:	9307      	strge	r3, [sp, #28]
 800d244:	9307      	strlt	r3, [sp, #28]
 800d246:	bfb8      	it	lt
 800d248:	9204      	strlt	r2, [sp, #16]
 800d24a:	7823      	ldrb	r3, [r4, #0]
 800d24c:	2b2e      	cmp	r3, #46	; 0x2e
 800d24e:	d10c      	bne.n	800d26a <_vfiprintf_r+0x15a>
 800d250:	7863      	ldrb	r3, [r4, #1]
 800d252:	2b2a      	cmp	r3, #42	; 0x2a
 800d254:	d134      	bne.n	800d2c0 <_vfiprintf_r+0x1b0>
 800d256:	9b03      	ldr	r3, [sp, #12]
 800d258:	1d1a      	adds	r2, r3, #4
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	9203      	str	r2, [sp, #12]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	bfb8      	it	lt
 800d262:	f04f 33ff 	movlt.w	r3, #4294967295
 800d266:	3402      	adds	r4, #2
 800d268:	9305      	str	r3, [sp, #20]
 800d26a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d340 <_vfiprintf_r+0x230>
 800d26e:	7821      	ldrb	r1, [r4, #0]
 800d270:	2203      	movs	r2, #3
 800d272:	4650      	mov	r0, sl
 800d274:	f7f2 ffb4 	bl	80001e0 <memchr>
 800d278:	b138      	cbz	r0, 800d28a <_vfiprintf_r+0x17a>
 800d27a:	9b04      	ldr	r3, [sp, #16]
 800d27c:	eba0 000a 	sub.w	r0, r0, sl
 800d280:	2240      	movs	r2, #64	; 0x40
 800d282:	4082      	lsls	r2, r0
 800d284:	4313      	orrs	r3, r2
 800d286:	3401      	adds	r4, #1
 800d288:	9304      	str	r3, [sp, #16]
 800d28a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d28e:	4829      	ldr	r0, [pc, #164]	; (800d334 <_vfiprintf_r+0x224>)
 800d290:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d294:	2206      	movs	r2, #6
 800d296:	f7f2 ffa3 	bl	80001e0 <memchr>
 800d29a:	2800      	cmp	r0, #0
 800d29c:	d03f      	beq.n	800d31e <_vfiprintf_r+0x20e>
 800d29e:	4b26      	ldr	r3, [pc, #152]	; (800d338 <_vfiprintf_r+0x228>)
 800d2a0:	bb1b      	cbnz	r3, 800d2ea <_vfiprintf_r+0x1da>
 800d2a2:	9b03      	ldr	r3, [sp, #12]
 800d2a4:	3307      	adds	r3, #7
 800d2a6:	f023 0307 	bic.w	r3, r3, #7
 800d2aa:	3308      	adds	r3, #8
 800d2ac:	9303      	str	r3, [sp, #12]
 800d2ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2b0:	443b      	add	r3, r7
 800d2b2:	9309      	str	r3, [sp, #36]	; 0x24
 800d2b4:	e768      	b.n	800d188 <_vfiprintf_r+0x78>
 800d2b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2ba:	460c      	mov	r4, r1
 800d2bc:	2001      	movs	r0, #1
 800d2be:	e7a6      	b.n	800d20e <_vfiprintf_r+0xfe>
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	3401      	adds	r4, #1
 800d2c4:	9305      	str	r3, [sp, #20]
 800d2c6:	4619      	mov	r1, r3
 800d2c8:	f04f 0c0a 	mov.w	ip, #10
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2d2:	3a30      	subs	r2, #48	; 0x30
 800d2d4:	2a09      	cmp	r2, #9
 800d2d6:	d903      	bls.n	800d2e0 <_vfiprintf_r+0x1d0>
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d0c6      	beq.n	800d26a <_vfiprintf_r+0x15a>
 800d2dc:	9105      	str	r1, [sp, #20]
 800d2de:	e7c4      	b.n	800d26a <_vfiprintf_r+0x15a>
 800d2e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2e4:	4604      	mov	r4, r0
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	e7f0      	b.n	800d2cc <_vfiprintf_r+0x1bc>
 800d2ea:	ab03      	add	r3, sp, #12
 800d2ec:	9300      	str	r3, [sp, #0]
 800d2ee:	462a      	mov	r2, r5
 800d2f0:	4b12      	ldr	r3, [pc, #72]	; (800d33c <_vfiprintf_r+0x22c>)
 800d2f2:	a904      	add	r1, sp, #16
 800d2f4:	4630      	mov	r0, r6
 800d2f6:	f7fc fccf 	bl	8009c98 <_printf_float>
 800d2fa:	4607      	mov	r7, r0
 800d2fc:	1c78      	adds	r0, r7, #1
 800d2fe:	d1d6      	bne.n	800d2ae <_vfiprintf_r+0x19e>
 800d300:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d302:	07d9      	lsls	r1, r3, #31
 800d304:	d405      	bmi.n	800d312 <_vfiprintf_r+0x202>
 800d306:	89ab      	ldrh	r3, [r5, #12]
 800d308:	059a      	lsls	r2, r3, #22
 800d30a:	d402      	bmi.n	800d312 <_vfiprintf_r+0x202>
 800d30c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d30e:	f7fd fc61 	bl	800abd4 <__retarget_lock_release_recursive>
 800d312:	89ab      	ldrh	r3, [r5, #12]
 800d314:	065b      	lsls	r3, r3, #25
 800d316:	f53f af1d 	bmi.w	800d154 <_vfiprintf_r+0x44>
 800d31a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d31c:	e71c      	b.n	800d158 <_vfiprintf_r+0x48>
 800d31e:	ab03      	add	r3, sp, #12
 800d320:	9300      	str	r3, [sp, #0]
 800d322:	462a      	mov	r2, r5
 800d324:	4b05      	ldr	r3, [pc, #20]	; (800d33c <_vfiprintf_r+0x22c>)
 800d326:	a904      	add	r1, sp, #16
 800d328:	4630      	mov	r0, r6
 800d32a:	f7fc ff59 	bl	800a1e0 <_printf_i>
 800d32e:	e7e4      	b.n	800d2fa <_vfiprintf_r+0x1ea>
 800d330:	0800e074 	.word	0x0800e074
 800d334:	0800e07e 	.word	0x0800e07e
 800d338:	08009c99 	.word	0x08009c99
 800d33c:	0800d0ed 	.word	0x0800d0ed
 800d340:	0800e07a 	.word	0x0800e07a

0800d344 <__swbuf_r>:
 800d344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d346:	460e      	mov	r6, r1
 800d348:	4614      	mov	r4, r2
 800d34a:	4605      	mov	r5, r0
 800d34c:	b118      	cbz	r0, 800d356 <__swbuf_r+0x12>
 800d34e:	6a03      	ldr	r3, [r0, #32]
 800d350:	b90b      	cbnz	r3, 800d356 <__swbuf_r+0x12>
 800d352:	f7fd fb03 	bl	800a95c <__sinit>
 800d356:	69a3      	ldr	r3, [r4, #24]
 800d358:	60a3      	str	r3, [r4, #8]
 800d35a:	89a3      	ldrh	r3, [r4, #12]
 800d35c:	071a      	lsls	r2, r3, #28
 800d35e:	d525      	bpl.n	800d3ac <__swbuf_r+0x68>
 800d360:	6923      	ldr	r3, [r4, #16]
 800d362:	b31b      	cbz	r3, 800d3ac <__swbuf_r+0x68>
 800d364:	6823      	ldr	r3, [r4, #0]
 800d366:	6922      	ldr	r2, [r4, #16]
 800d368:	1a98      	subs	r0, r3, r2
 800d36a:	6963      	ldr	r3, [r4, #20]
 800d36c:	b2f6      	uxtb	r6, r6
 800d36e:	4283      	cmp	r3, r0
 800d370:	4637      	mov	r7, r6
 800d372:	dc04      	bgt.n	800d37e <__swbuf_r+0x3a>
 800d374:	4621      	mov	r1, r4
 800d376:	4628      	mov	r0, r5
 800d378:	f7ff fdca 	bl	800cf10 <_fflush_r>
 800d37c:	b9e0      	cbnz	r0, 800d3b8 <__swbuf_r+0x74>
 800d37e:	68a3      	ldr	r3, [r4, #8]
 800d380:	3b01      	subs	r3, #1
 800d382:	60a3      	str	r3, [r4, #8]
 800d384:	6823      	ldr	r3, [r4, #0]
 800d386:	1c5a      	adds	r2, r3, #1
 800d388:	6022      	str	r2, [r4, #0]
 800d38a:	701e      	strb	r6, [r3, #0]
 800d38c:	6962      	ldr	r2, [r4, #20]
 800d38e:	1c43      	adds	r3, r0, #1
 800d390:	429a      	cmp	r2, r3
 800d392:	d004      	beq.n	800d39e <__swbuf_r+0x5a>
 800d394:	89a3      	ldrh	r3, [r4, #12]
 800d396:	07db      	lsls	r3, r3, #31
 800d398:	d506      	bpl.n	800d3a8 <__swbuf_r+0x64>
 800d39a:	2e0a      	cmp	r6, #10
 800d39c:	d104      	bne.n	800d3a8 <__swbuf_r+0x64>
 800d39e:	4621      	mov	r1, r4
 800d3a0:	4628      	mov	r0, r5
 800d3a2:	f7ff fdb5 	bl	800cf10 <_fflush_r>
 800d3a6:	b938      	cbnz	r0, 800d3b8 <__swbuf_r+0x74>
 800d3a8:	4638      	mov	r0, r7
 800d3aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3ac:	4621      	mov	r1, r4
 800d3ae:	4628      	mov	r0, r5
 800d3b0:	f000 f806 	bl	800d3c0 <__swsetup_r>
 800d3b4:	2800      	cmp	r0, #0
 800d3b6:	d0d5      	beq.n	800d364 <__swbuf_r+0x20>
 800d3b8:	f04f 37ff 	mov.w	r7, #4294967295
 800d3bc:	e7f4      	b.n	800d3a8 <__swbuf_r+0x64>
	...

0800d3c0 <__swsetup_r>:
 800d3c0:	b538      	push	{r3, r4, r5, lr}
 800d3c2:	4b2a      	ldr	r3, [pc, #168]	; (800d46c <__swsetup_r+0xac>)
 800d3c4:	4605      	mov	r5, r0
 800d3c6:	6818      	ldr	r0, [r3, #0]
 800d3c8:	460c      	mov	r4, r1
 800d3ca:	b118      	cbz	r0, 800d3d4 <__swsetup_r+0x14>
 800d3cc:	6a03      	ldr	r3, [r0, #32]
 800d3ce:	b90b      	cbnz	r3, 800d3d4 <__swsetup_r+0x14>
 800d3d0:	f7fd fac4 	bl	800a95c <__sinit>
 800d3d4:	89a3      	ldrh	r3, [r4, #12]
 800d3d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d3da:	0718      	lsls	r0, r3, #28
 800d3dc:	d422      	bmi.n	800d424 <__swsetup_r+0x64>
 800d3de:	06d9      	lsls	r1, r3, #27
 800d3e0:	d407      	bmi.n	800d3f2 <__swsetup_r+0x32>
 800d3e2:	2309      	movs	r3, #9
 800d3e4:	602b      	str	r3, [r5, #0]
 800d3e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d3ea:	81a3      	strh	r3, [r4, #12]
 800d3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f0:	e034      	b.n	800d45c <__swsetup_r+0x9c>
 800d3f2:	0758      	lsls	r0, r3, #29
 800d3f4:	d512      	bpl.n	800d41c <__swsetup_r+0x5c>
 800d3f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3f8:	b141      	cbz	r1, 800d40c <__swsetup_r+0x4c>
 800d3fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d3fe:	4299      	cmp	r1, r3
 800d400:	d002      	beq.n	800d408 <__swsetup_r+0x48>
 800d402:	4628      	mov	r0, r5
 800d404:	f7fe fa82 	bl	800b90c <_free_r>
 800d408:	2300      	movs	r3, #0
 800d40a:	6363      	str	r3, [r4, #52]	; 0x34
 800d40c:	89a3      	ldrh	r3, [r4, #12]
 800d40e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d412:	81a3      	strh	r3, [r4, #12]
 800d414:	2300      	movs	r3, #0
 800d416:	6063      	str	r3, [r4, #4]
 800d418:	6923      	ldr	r3, [r4, #16]
 800d41a:	6023      	str	r3, [r4, #0]
 800d41c:	89a3      	ldrh	r3, [r4, #12]
 800d41e:	f043 0308 	orr.w	r3, r3, #8
 800d422:	81a3      	strh	r3, [r4, #12]
 800d424:	6923      	ldr	r3, [r4, #16]
 800d426:	b94b      	cbnz	r3, 800d43c <__swsetup_r+0x7c>
 800d428:	89a3      	ldrh	r3, [r4, #12]
 800d42a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d42e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d432:	d003      	beq.n	800d43c <__swsetup_r+0x7c>
 800d434:	4621      	mov	r1, r4
 800d436:	4628      	mov	r0, r5
 800d438:	f000 f884 	bl	800d544 <__smakebuf_r>
 800d43c:	89a0      	ldrh	r0, [r4, #12]
 800d43e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d442:	f010 0301 	ands.w	r3, r0, #1
 800d446:	d00a      	beq.n	800d45e <__swsetup_r+0x9e>
 800d448:	2300      	movs	r3, #0
 800d44a:	60a3      	str	r3, [r4, #8]
 800d44c:	6963      	ldr	r3, [r4, #20]
 800d44e:	425b      	negs	r3, r3
 800d450:	61a3      	str	r3, [r4, #24]
 800d452:	6923      	ldr	r3, [r4, #16]
 800d454:	b943      	cbnz	r3, 800d468 <__swsetup_r+0xa8>
 800d456:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d45a:	d1c4      	bne.n	800d3e6 <__swsetup_r+0x26>
 800d45c:	bd38      	pop	{r3, r4, r5, pc}
 800d45e:	0781      	lsls	r1, r0, #30
 800d460:	bf58      	it	pl
 800d462:	6963      	ldrpl	r3, [r4, #20]
 800d464:	60a3      	str	r3, [r4, #8]
 800d466:	e7f4      	b.n	800d452 <__swsetup_r+0x92>
 800d468:	2000      	movs	r0, #0
 800d46a:	e7f7      	b.n	800d45c <__swsetup_r+0x9c>
 800d46c:	2000023c 	.word	0x2000023c

0800d470 <_raise_r>:
 800d470:	291f      	cmp	r1, #31
 800d472:	b538      	push	{r3, r4, r5, lr}
 800d474:	4604      	mov	r4, r0
 800d476:	460d      	mov	r5, r1
 800d478:	d904      	bls.n	800d484 <_raise_r+0x14>
 800d47a:	2316      	movs	r3, #22
 800d47c:	6003      	str	r3, [r0, #0]
 800d47e:	f04f 30ff 	mov.w	r0, #4294967295
 800d482:	bd38      	pop	{r3, r4, r5, pc}
 800d484:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d486:	b112      	cbz	r2, 800d48e <_raise_r+0x1e>
 800d488:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d48c:	b94b      	cbnz	r3, 800d4a2 <_raise_r+0x32>
 800d48e:	4620      	mov	r0, r4
 800d490:	f000 f830 	bl	800d4f4 <_getpid_r>
 800d494:	462a      	mov	r2, r5
 800d496:	4601      	mov	r1, r0
 800d498:	4620      	mov	r0, r4
 800d49a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d49e:	f000 b817 	b.w	800d4d0 <_kill_r>
 800d4a2:	2b01      	cmp	r3, #1
 800d4a4:	d00a      	beq.n	800d4bc <_raise_r+0x4c>
 800d4a6:	1c59      	adds	r1, r3, #1
 800d4a8:	d103      	bne.n	800d4b2 <_raise_r+0x42>
 800d4aa:	2316      	movs	r3, #22
 800d4ac:	6003      	str	r3, [r0, #0]
 800d4ae:	2001      	movs	r0, #1
 800d4b0:	e7e7      	b.n	800d482 <_raise_r+0x12>
 800d4b2:	2400      	movs	r4, #0
 800d4b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d4b8:	4628      	mov	r0, r5
 800d4ba:	4798      	blx	r3
 800d4bc:	2000      	movs	r0, #0
 800d4be:	e7e0      	b.n	800d482 <_raise_r+0x12>

0800d4c0 <raise>:
 800d4c0:	4b02      	ldr	r3, [pc, #8]	; (800d4cc <raise+0xc>)
 800d4c2:	4601      	mov	r1, r0
 800d4c4:	6818      	ldr	r0, [r3, #0]
 800d4c6:	f7ff bfd3 	b.w	800d470 <_raise_r>
 800d4ca:	bf00      	nop
 800d4cc:	2000023c 	.word	0x2000023c

0800d4d0 <_kill_r>:
 800d4d0:	b538      	push	{r3, r4, r5, lr}
 800d4d2:	4d07      	ldr	r5, [pc, #28]	; (800d4f0 <_kill_r+0x20>)
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	4604      	mov	r4, r0
 800d4d8:	4608      	mov	r0, r1
 800d4da:	4611      	mov	r1, r2
 800d4dc:	602b      	str	r3, [r5, #0]
 800d4de:	f7f7 fbf3 	bl	8004cc8 <_kill>
 800d4e2:	1c43      	adds	r3, r0, #1
 800d4e4:	d102      	bne.n	800d4ec <_kill_r+0x1c>
 800d4e6:	682b      	ldr	r3, [r5, #0]
 800d4e8:	b103      	cbz	r3, 800d4ec <_kill_r+0x1c>
 800d4ea:	6023      	str	r3, [r4, #0]
 800d4ec:	bd38      	pop	{r3, r4, r5, pc}
 800d4ee:	bf00      	nop
 800d4f0:	200008f0 	.word	0x200008f0

0800d4f4 <_getpid_r>:
 800d4f4:	f7f7 bbe0 	b.w	8004cb8 <_getpid>

0800d4f8 <__swhatbuf_r>:
 800d4f8:	b570      	push	{r4, r5, r6, lr}
 800d4fa:	460c      	mov	r4, r1
 800d4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d500:	2900      	cmp	r1, #0
 800d502:	b096      	sub	sp, #88	; 0x58
 800d504:	4615      	mov	r5, r2
 800d506:	461e      	mov	r6, r3
 800d508:	da0d      	bge.n	800d526 <__swhatbuf_r+0x2e>
 800d50a:	89a3      	ldrh	r3, [r4, #12]
 800d50c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d510:	f04f 0100 	mov.w	r1, #0
 800d514:	bf0c      	ite	eq
 800d516:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d51a:	2340      	movne	r3, #64	; 0x40
 800d51c:	2000      	movs	r0, #0
 800d51e:	6031      	str	r1, [r6, #0]
 800d520:	602b      	str	r3, [r5, #0]
 800d522:	b016      	add	sp, #88	; 0x58
 800d524:	bd70      	pop	{r4, r5, r6, pc}
 800d526:	466a      	mov	r2, sp
 800d528:	f000 f848 	bl	800d5bc <_fstat_r>
 800d52c:	2800      	cmp	r0, #0
 800d52e:	dbec      	blt.n	800d50a <__swhatbuf_r+0x12>
 800d530:	9901      	ldr	r1, [sp, #4]
 800d532:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d536:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d53a:	4259      	negs	r1, r3
 800d53c:	4159      	adcs	r1, r3
 800d53e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d542:	e7eb      	b.n	800d51c <__swhatbuf_r+0x24>

0800d544 <__smakebuf_r>:
 800d544:	898b      	ldrh	r3, [r1, #12]
 800d546:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d548:	079d      	lsls	r5, r3, #30
 800d54a:	4606      	mov	r6, r0
 800d54c:	460c      	mov	r4, r1
 800d54e:	d507      	bpl.n	800d560 <__smakebuf_r+0x1c>
 800d550:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d554:	6023      	str	r3, [r4, #0]
 800d556:	6123      	str	r3, [r4, #16]
 800d558:	2301      	movs	r3, #1
 800d55a:	6163      	str	r3, [r4, #20]
 800d55c:	b002      	add	sp, #8
 800d55e:	bd70      	pop	{r4, r5, r6, pc}
 800d560:	ab01      	add	r3, sp, #4
 800d562:	466a      	mov	r2, sp
 800d564:	f7ff ffc8 	bl	800d4f8 <__swhatbuf_r>
 800d568:	9900      	ldr	r1, [sp, #0]
 800d56a:	4605      	mov	r5, r0
 800d56c:	4630      	mov	r0, r6
 800d56e:	f7fe fd99 	bl	800c0a4 <_malloc_r>
 800d572:	b948      	cbnz	r0, 800d588 <__smakebuf_r+0x44>
 800d574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d578:	059a      	lsls	r2, r3, #22
 800d57a:	d4ef      	bmi.n	800d55c <__smakebuf_r+0x18>
 800d57c:	f023 0303 	bic.w	r3, r3, #3
 800d580:	f043 0302 	orr.w	r3, r3, #2
 800d584:	81a3      	strh	r3, [r4, #12]
 800d586:	e7e3      	b.n	800d550 <__smakebuf_r+0xc>
 800d588:	89a3      	ldrh	r3, [r4, #12]
 800d58a:	6020      	str	r0, [r4, #0]
 800d58c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d590:	81a3      	strh	r3, [r4, #12]
 800d592:	9b00      	ldr	r3, [sp, #0]
 800d594:	6163      	str	r3, [r4, #20]
 800d596:	9b01      	ldr	r3, [sp, #4]
 800d598:	6120      	str	r0, [r4, #16]
 800d59a:	b15b      	cbz	r3, 800d5b4 <__smakebuf_r+0x70>
 800d59c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5a0:	4630      	mov	r0, r6
 800d5a2:	f000 f81d 	bl	800d5e0 <_isatty_r>
 800d5a6:	b128      	cbz	r0, 800d5b4 <__smakebuf_r+0x70>
 800d5a8:	89a3      	ldrh	r3, [r4, #12]
 800d5aa:	f023 0303 	bic.w	r3, r3, #3
 800d5ae:	f043 0301 	orr.w	r3, r3, #1
 800d5b2:	81a3      	strh	r3, [r4, #12]
 800d5b4:	89a3      	ldrh	r3, [r4, #12]
 800d5b6:	431d      	orrs	r5, r3
 800d5b8:	81a5      	strh	r5, [r4, #12]
 800d5ba:	e7cf      	b.n	800d55c <__smakebuf_r+0x18>

0800d5bc <_fstat_r>:
 800d5bc:	b538      	push	{r3, r4, r5, lr}
 800d5be:	4d07      	ldr	r5, [pc, #28]	; (800d5dc <_fstat_r+0x20>)
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	4604      	mov	r4, r0
 800d5c4:	4608      	mov	r0, r1
 800d5c6:	4611      	mov	r1, r2
 800d5c8:	602b      	str	r3, [r5, #0]
 800d5ca:	f7f7 fbdc 	bl	8004d86 <_fstat>
 800d5ce:	1c43      	adds	r3, r0, #1
 800d5d0:	d102      	bne.n	800d5d8 <_fstat_r+0x1c>
 800d5d2:	682b      	ldr	r3, [r5, #0]
 800d5d4:	b103      	cbz	r3, 800d5d8 <_fstat_r+0x1c>
 800d5d6:	6023      	str	r3, [r4, #0]
 800d5d8:	bd38      	pop	{r3, r4, r5, pc}
 800d5da:	bf00      	nop
 800d5dc:	200008f0 	.word	0x200008f0

0800d5e0 <_isatty_r>:
 800d5e0:	b538      	push	{r3, r4, r5, lr}
 800d5e2:	4d06      	ldr	r5, [pc, #24]	; (800d5fc <_isatty_r+0x1c>)
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	4604      	mov	r4, r0
 800d5e8:	4608      	mov	r0, r1
 800d5ea:	602b      	str	r3, [r5, #0]
 800d5ec:	f7f7 fbdb 	bl	8004da6 <_isatty>
 800d5f0:	1c43      	adds	r3, r0, #1
 800d5f2:	d102      	bne.n	800d5fa <_isatty_r+0x1a>
 800d5f4:	682b      	ldr	r3, [r5, #0]
 800d5f6:	b103      	cbz	r3, 800d5fa <_isatty_r+0x1a>
 800d5f8:	6023      	str	r3, [r4, #0]
 800d5fa:	bd38      	pop	{r3, r4, r5, pc}
 800d5fc:	200008f0 	.word	0x200008f0

0800d600 <_init>:
 800d600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d602:	bf00      	nop
 800d604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d606:	bc08      	pop	{r3}
 800d608:	469e      	mov	lr, r3
 800d60a:	4770      	bx	lr

0800d60c <_fini>:
 800d60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d60e:	bf00      	nop
 800d610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d612:	bc08      	pop	{r3}
 800d614:	469e      	mov	lr, r3
 800d616:	4770      	bx	lr
