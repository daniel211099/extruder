
main-sw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa8  0800d658  0800d658  0001d658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e100  0800e100  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800e100  0800e100  0001e100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e108  0800e108  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e108  0800e108  0001e108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e10c  0800e10c  0001e10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800e110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d4  20000240  0800e350  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000914  0800e350  00020914  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017a37  00000000  00000000  000202b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000394a  00000000  00000000  00037cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001358  00000000  00000000  0003b638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ee1  00000000  00000000  0003c990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019b31  00000000  00000000  0003d871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017b7c  00000000  00000000  000573a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009380f  00000000  00000000  0006ef1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000650c  00000000  00000000  00102730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00108c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000240 	.word	0x20000240
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d640 	.word	0x0800d640

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000244 	.word	0x20000244
 80001dc:	0800d640 	.word	0x0800d640

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <ILI9341_SendCommand>:
};

//***** Functions prototypes *****//
//1. Write Command to LCD
void ILI9341_SendCommand(uint8_t com)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <ILI9341_SendCommand+0x54>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a11      	ldr	r2, [pc, #68]	; (8001058 <ILI9341_SendCommand+0x58>)
 8001014:	8811      	ldrh	r1, [r2, #0]
 8001016:	2200      	movs	r2, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f004 fb2b 	bl	8005674 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 800101e:	4b0f      	ldr	r3, [pc, #60]	; (800105c <ILI9341_SendCommand+0x5c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a0f      	ldr	r2, [pc, #60]	; (8001060 <ILI9341_SendCommand+0x60>)
 8001024:	8811      	ldrh	r1, [r2, #0]
 8001026:	2200      	movs	r2, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f004 fb23 	bl	8005674 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 800102e:	f107 010f 	add.w	r1, r7, #15
 8001032:	2305      	movs	r3, #5
 8001034:	2201      	movs	r2, #1
 8001036:	480b      	ldr	r0, [pc, #44]	; (8001064 <ILI9341_SendCommand+0x64>)
 8001038:	f005 f857 	bl	80060ea <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <ILI9341_SendCommand+0x5c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a07      	ldr	r2, [pc, #28]	; (8001060 <ILI9341_SendCommand+0x60>)
 8001042:	8811      	ldrh	r1, [r2, #0]
 8001044:	2201      	movs	r2, #1
 8001046:	4618      	mov	r0, r3
 8001048:	f004 fb14 	bl	8005674 <HAL_GPIO_WritePin>
}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200002c0 	.word	0x200002c0
 8001058:	200002c4 	.word	0x200002c4
 800105c:	200002b8 	.word	0x200002b8
 8001060:	200002bc 	.word	0x200002bc
 8001064:	20000260 	.word	0x20000260

08001068 <ILI9341_SendData>:

//2. Write data to LCD
void ILI9341_SendData(uint8_t data)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <ILI9341_SendData+0x54>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a11      	ldr	r2, [pc, #68]	; (80010c0 <ILI9341_SendData+0x58>)
 800107c:	8811      	ldrh	r1, [r2, #0]
 800107e:	2201      	movs	r2, #1
 8001080:	4618      	mov	r0, r3
 8001082:	f004 faf7 	bl	8005674 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8001086:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <ILI9341_SendData+0x5c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <ILI9341_SendData+0x60>)
 800108c:	8811      	ldrh	r1, [r2, #0]
 800108e:	2200      	movs	r2, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f004 faef 	bl	8005674 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 8001096:	f107 010f 	add.w	r1, r7, #15
 800109a:	2305      	movs	r3, #5
 800109c:	2201      	movs	r2, #1
 800109e:	480b      	ldr	r0, [pc, #44]	; (80010cc <ILI9341_SendData+0x64>)
 80010a0:	f005 f823 	bl	80060ea <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 80010a4:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <ILI9341_SendData+0x5c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <ILI9341_SendData+0x60>)
 80010aa:	8811      	ldrh	r1, [r2, #0]
 80010ac:	2201      	movs	r2, #1
 80010ae:	4618      	mov	r0, r3
 80010b0:	f004 fae0 	bl	8005674 <HAL_GPIO_WritePin>
}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200002c0 	.word	0x200002c0
 80010c0:	200002c4 	.word	0x200002c4
 80010c4:	200002b8 	.word	0x200002b8
 80010c8:	200002bc 	.word	0x200002bc
 80010cc:	20000260 	.word	0x20000260

080010d0 <ILI9341_SetCursorPosition>:
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}

//3. Set cursor position
void ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4604      	mov	r4, r0
 80010d8:	4608      	mov	r0, r1
 80010da:	4611      	mov	r1, r2
 80010dc:	461a      	mov	r2, r3
 80010de:	4623      	mov	r3, r4
 80010e0:	80fb      	strh	r3, [r7, #6]
 80010e2:	4603      	mov	r3, r0
 80010e4:	80bb      	strh	r3, [r7, #4]
 80010e6:	460b      	mov	r3, r1
 80010e8:	807b      	strh	r3, [r7, #2]
 80010ea:	4613      	mov	r3, r2
 80010ec:	803b      	strh	r3, [r7, #0]

  ILI9341_SendCommand (ILI9341_COLUMN_ADDR);
 80010ee:	202a      	movs	r0, #42	; 0x2a
 80010f0:	f7ff ff86 	bl	8001000 <ILI9341_SendCommand>
  ILI9341_SendData(x1>>8);
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	0a1b      	lsrs	r3, r3, #8
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ffb3 	bl	8001068 <ILI9341_SendData>
  ILI9341_SendData(x1 & 0xFF);
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ffae 	bl	8001068 <ILI9341_SendData>
  ILI9341_SendData(x2>>8);
 800110c:	887b      	ldrh	r3, [r7, #2]
 800110e:	0a1b      	lsrs	r3, r3, #8
 8001110:	b29b      	uxth	r3, r3
 8001112:	b2db      	uxtb	r3, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ffa7 	bl	8001068 <ILI9341_SendData>
  ILI9341_SendData(x2 & 0xFF);
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ffa2 	bl	8001068 <ILI9341_SendData>

  ILI9341_SendCommand (ILI9341_PAGE_ADDR);
 8001124:	202b      	movs	r0, #43	; 0x2b
 8001126:	f7ff ff6b 	bl	8001000 <ILI9341_SendCommand>
  ILI9341_SendData(y1>>8);
 800112a:	88bb      	ldrh	r3, [r7, #4]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	b29b      	uxth	r3, r3
 8001130:	b2db      	uxtb	r3, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff98 	bl	8001068 <ILI9341_SendData>
  ILI9341_SendData(y1 & 0xFF);
 8001138:	88bb      	ldrh	r3, [r7, #4]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff93 	bl	8001068 <ILI9341_SendData>
  ILI9341_SendData(y2>>8);
 8001142:	883b      	ldrh	r3, [r7, #0]
 8001144:	0a1b      	lsrs	r3, r3, #8
 8001146:	b29b      	uxth	r3, r3
 8001148:	b2db      	uxtb	r3, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff8c 	bl	8001068 <ILI9341_SendData>
  ILI9341_SendData(y2 & 0xFF);
 8001150:	883b      	ldrh	r3, [r7, #0]
 8001152:	b2db      	uxtb	r3, r3
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff87 	bl	8001068 <ILI9341_SendData>
  ILI9341_SendCommand (ILI9341_GRAM);
 800115a:	202c      	movs	r0, #44	; 0x2c
 800115c:	f7ff ff50 	bl	8001000 <ILI9341_SendCommand>
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	bd90      	pop	{r4, r7, pc}

08001168 <ILI9341_Init>:
//4. Initialise function
void ILI9341_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
 {
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	4613      	mov	r3, r2
 8001176:	80fb      	strh	r3, [r7, #6]
	 //Copy SPI settings
	 memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 8001178:	2258      	movs	r2, #88	; 0x58
 800117a:	68f9      	ldr	r1, [r7, #12]
 800117c:	4853      	ldr	r0, [pc, #332]	; (80012cc <ILI9341_Init+0x164>)
 800117e:	f009 fcc2 	bl	800ab06 <memcpy>
	 //CS pin
	 tftCS_GPIO = csPORT;
 8001182:	4a53      	ldr	r2, [pc, #332]	; (80012d0 <ILI9341_Init+0x168>)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	6013      	str	r3, [r2, #0]
	 tftCS_PIN = csPIN;
 8001188:	4a52      	ldr	r2, [pc, #328]	; (80012d4 <ILI9341_Init+0x16c>)
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	8013      	strh	r3, [r2, #0]
	 //DC pin
	 tftDC_GPIO = dcPORT;
 800118e:	4a52      	ldr	r2, [pc, #328]	; (80012d8 <ILI9341_Init+0x170>)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	6013      	str	r3, [r2, #0]
	 tftDC_PIN = dcPIN;
 8001194:	4a51      	ldr	r2, [pc, #324]	; (80012dc <ILI9341_Init+0x174>)
 8001196:	8b3b      	ldrh	r3, [r7, #24]
 8001198:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 800119a:	4b4d      	ldr	r3, [pc, #308]	; (80012d0 <ILI9341_Init+0x168>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a4d      	ldr	r2, [pc, #308]	; (80012d4 <ILI9341_Init+0x16c>)
 80011a0:	8811      	ldrh	r1, [r2, #0]
 80011a2:	2201      	movs	r2, #1
 80011a4:	4618      	mov	r0, r3
 80011a6:	f004 fa65 	bl	8005674 <HAL_GPIO_WritePin>
	 //RESET pin
	 tftRESET_GPIO = resetPORT;
 80011aa:	4a4d      	ldr	r2, [pc, #308]	; (80012e0 <ILI9341_Init+0x178>)
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	6013      	str	r3, [r2, #0]
	 tftRESET_PIN = resetPIN;
 80011b0:	4a4c      	ldr	r2, [pc, #304]	; (80012e4 <ILI9341_Init+0x17c>)
 80011b2:	8c3b      	ldrh	r3, [r7, #32]
 80011b4:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);  //Turn LCD ON
 80011b6:	8c3b      	ldrh	r3, [r7, #32]
 80011b8:	2201      	movs	r2, #1
 80011ba:	4619      	mov	r1, r3
 80011bc:	69f8      	ldr	r0, [r7, #28]
 80011be:	f004 fa59 	bl	8005674 <HAL_GPIO_WritePin>
	 
   ILI9341_SendCommand (ILI9341_RESET); // software reset comand
 80011c2:	2001      	movs	r0, #1
 80011c4:	f7ff ff1c 	bl	8001000 <ILI9341_SendCommand>
   HAL_Delay(100);
 80011c8:	2064      	movs	r0, #100	; 0x64
 80011ca:	f003 ff07 	bl	8004fdc <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_OFF); // display off
 80011ce:	2028      	movs	r0, #40	; 0x28
 80011d0:	f7ff ff16 	bl	8001000 <ILI9341_SendCommand>
   //------------power control------------------------------
   ILI9341_SendCommand (ILI9341_POWER1); // power control
 80011d4:	20c0      	movs	r0, #192	; 0xc0
 80011d6:	f7ff ff13 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData   (0x26); // GVDD = 4.75v
 80011da:	2026      	movs	r0, #38	; 0x26
 80011dc:	f7ff ff44 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_POWER2); // power control
 80011e0:	20c1      	movs	r0, #193	; 0xc1
 80011e2:	f7ff ff0d 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData   (0x11); // AVDD=VCIx2, VGH=VCIx7, VGL=-VCIx3
 80011e6:	2011      	movs	r0, #17
 80011e8:	f7ff ff3e 	bl	8001068 <ILI9341_SendData>
   //--------------VCOM-------------------------------------
   ILI9341_SendCommand (ILI9341_VCOM1); // vcom control
 80011ec:	20c5      	movs	r0, #197	; 0xc5
 80011ee:	f7ff ff07 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData   (0x35); // Set the VCOMH voltage (0x35 = 4.025v)
 80011f2:	2035      	movs	r0, #53	; 0x35
 80011f4:	f7ff ff38 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0x3e); // Set the VCOML voltage (0x3E = -0.950v)
 80011f8:	203e      	movs	r0, #62	; 0x3e
 80011fa:	f7ff ff35 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_VCOM2); // vcom control
 80011fe:	20c7      	movs	r0, #199	; 0xc7
 8001200:	f7ff fefe 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData   (0xbe);
 8001204:	20be      	movs	r0, #190	; 0xbe
 8001206:	f7ff ff2f 	bl	8001068 <ILI9341_SendData>

   //------------memory access control------------------------
   ILI9341_SendCommand (ILI9341_MAC); // memory access control
 800120a:	2036      	movs	r0, #54	; 0x36
 800120c:	f7ff fef8 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData(0x48);
 8001210:	2048      	movs	r0, #72	; 0x48
 8001212:	f7ff ff29 	bl	8001068 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_PIXEL_FORMAT); // pixel format set
 8001216:	203a      	movs	r0, #58	; 0x3a
 8001218:	f7ff fef2 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData   (0x55); // 16bit /pixel
 800121c:	2055      	movs	r0, #85	; 0x55
 800121e:	f7ff ff23 	bl	8001068 <ILI9341_SendData>

	 ILI9341_SendCommand(ILI9341_FRC);
 8001222:	20b1      	movs	r0, #177	; 0xb1
 8001224:	f7ff feec 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData(0);
 8001228:	2000      	movs	r0, #0
 800122a:	f7ff ff1d 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData(0x1F);
 800122e:	201f      	movs	r0, #31
 8001230:	f7ff ff1a 	bl	8001068 <ILI9341_SendData>
   //-------------ddram ----------------------------
   ILI9341_SendCommand (ILI9341_COLUMN_ADDR); // column set
 8001234:	202a      	movs	r0, #42	; 0x2a
 8001236:	f7ff fee3 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // x0_HIGH---0
 800123a:	2000      	movs	r0, #0
 800123c:	f7ff ff14 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x0_LOW----0
 8001240:	2000      	movs	r0, #0
 8001242:	f7ff ff11 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x1_HIGH---240
 8001246:	2000      	movs	r0, #0
 8001248:	f7ff ff0e 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0xEF); // x1_LOW----240
 800124c:	20ef      	movs	r0, #239	; 0xef
 800124e:	f7ff ff0b 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_PAGE_ADDR); // page address set
 8001252:	202b      	movs	r0, #43	; 0x2b
 8001254:	f7ff fed4 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // y0_HIGH---0
 8001258:	2000      	movs	r0, #0
 800125a:	f7ff ff05 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // y0_LOW----0
 800125e:	2000      	movs	r0, #0
 8001260:	f7ff ff02 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0x01); // y1_HIGH---320
 8001264:	2001      	movs	r0, #1
 8001266:	f7ff feff 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0x3F); // y1_LOW----320
 800126a:	203f      	movs	r0, #63	; 0x3f
 800126c:	f7ff fefc 	bl	8001068 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_TEARING_OFF); // tearing effect off
 8001270:	2034      	movs	r0, #52	; 0x34
 8001272:	f7ff fec5 	bl	8001000 <ILI9341_SendCommand>
   //LCD_write_cmd(ILI9341_TEARING_ON); // tearing effect on
   //LCD_write_cmd(ILI9341_DISPLAY_INVERSION); // display inversion
   ILI9341_SendCommand (ILI9341_Entry_Mode_Set); // entry mode set
 8001276:	20b7      	movs	r0, #183	; 0xb7
 8001278:	f7ff fec2 	bl	8001000 <ILI9341_SendCommand>
   // Deep Standby Mode: OFF
   // Set the output level of gate driver G1-G320: Normal display
   // Low voltage detection: Disable
   ILI9341_SendData   (0x07);
 800127c:	2007      	movs	r0, #7
 800127e:	f7ff fef3 	bl	8001068 <ILI9341_SendData>
   //-----------------display------------------------
   ILI9341_SendCommand (ILI9341_DFC); // display function control
 8001282:	20b6      	movs	r0, #182	; 0xb6
 8001284:	f7ff febc 	bl	8001000 <ILI9341_SendCommand>
   //Set the scan mode in non-display area
   //Determine source/VCOM output in a non-display area in the partial display mode
   ILI9341_SendData   (0x0a);
 8001288:	200a      	movs	r0, #10
 800128a:	f7ff feed 	bl	8001068 <ILI9341_SendData>
   //Select whether the liquid crystal type is normally white type or normally black type
   //Sets the direction of scan by the gate driver in the range determined by SCN and NL
   //Select the shift direction of outputs from the source driver
   //Sets the gate driver pin arrangement in combination with the GS bit to select the optimal scan mode for the module
   //Specify the scan cycle interval of gate driver in non-display area when PTG to select interval scan
   ILI9341_SendData   (0x82);
 800128e:	2082      	movs	r0, #130	; 0x82
 8001290:	f7ff feea 	bl	8001068 <ILI9341_SendData>
   // Sets the number of lines to drive the LCD at an interval of 8 lines
   ILI9341_SendData   (0x27);
 8001294:	2027      	movs	r0, #39	; 0x27
 8001296:	f7ff fee7 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // clock divisor
 800129a:	2000      	movs	r0, #0
 800129c:	f7ff fee4 	bl	8001068 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_SLEEP_OUT); // sleep out
 80012a0:	2011      	movs	r0, #17
 80012a2:	f7ff fead 	bl	8001000 <ILI9341_SendCommand>
   HAL_Delay(100);
 80012a6:	2064      	movs	r0, #100	; 0x64
 80012a8:	f003 fe98 	bl	8004fdc <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_ON); // display on
 80012ac:	2029      	movs	r0, #41	; 0x29
 80012ae:	f7ff fea7 	bl	8001000 <ILI9341_SendCommand>
   HAL_Delay(100);
 80012b2:	2064      	movs	r0, #100	; 0x64
 80012b4:	f003 fe92 	bl	8004fdc <HAL_Delay>
   ILI9341_SendCommand (ILI9341_GRAM); // memory write
 80012b8:	202c      	movs	r0, #44	; 0x2c
 80012ba:	f7ff fea1 	bl	8001000 <ILI9341_SendCommand>
   HAL_Delay(5);
 80012be:	2005      	movs	r0, #5
 80012c0:	f003 fe8c 	bl	8004fdc <HAL_Delay>
 }
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000260 	.word	0x20000260
 80012d0:	200002b8 	.word	0x200002b8
 80012d4:	200002bc 	.word	0x200002bc
 80012d8:	200002c0 	.word	0x200002c0
 80012dc:	200002c4 	.word	0x200002c4
 80012e0:	200002c8 	.word	0x200002c8
 80012e4:	200002cc 	.word	0x200002cc

080012e8 <ILI9341_DrawPixel>:

//5. Write data to a single pixel
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	80fb      	strh	r3, [r7, #6]
 80012f2:	460b      	mov	r3, r1
 80012f4:	80bb      	strh	r3, [r7, #4]
 80012f6:	4613      	mov	r3, r2
 80012f8:	807b      	strh	r3, [r7, #2]
  ILI9341_SetCursorPosition(x, y, x, y);
 80012fa:	88bb      	ldrh	r3, [r7, #4]
 80012fc:	88fa      	ldrh	r2, [r7, #6]
 80012fe:	88b9      	ldrh	r1, [r7, #4]
 8001300:	88f8      	ldrh	r0, [r7, #6]
 8001302:	f7ff fee5 	bl	80010d0 <ILI9341_SetCursorPosition>
	ILI9341_SendData(color>>8);
 8001306:	887b      	ldrh	r3, [r7, #2]
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	b29b      	uxth	r3, r3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff feaa 	bl	8001068 <ILI9341_SendData>
	ILI9341_SendData(color&0xFF);
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fea5 	bl	8001068 <ILI9341_SendData>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <ILI9341_Fill>:
//6. Fill the entire screen with a background color
void ILI9341_Fill(uint16_t color) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	80fb      	strh	r3, [r7, #6]
	uint32_t n = ILI9341_PIXEL_COUNT;
 8001332:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001336:	60fb      	str	r3, [r7, #12]
	uint16_t myColor = 0xFF;
 8001338:	23ff      	movs	r3, #255	; 0xff
 800133a:	817b      	strh	r3, [r7, #10]
	
	if(rotationNum==1 || rotationNum==3)
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <ILI9341_Fill+0x84>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d003      	beq.n	800134c <ILI9341_Fill+0x24>
 8001344:	4b19      	ldr	r3, [pc, #100]	; (80013ac <ILI9341_Fill+0x84>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b03      	cmp	r3, #3
 800134a:	d107      	bne.n	800135c <ILI9341_Fill+0x34>
	{
		ILI9341_SetCursorPosition(0, 0,   ILI9341_WIDTH -1, ILI9341_HEIGHT -1);
 800134c:	f240 133f 	movw	r3, #319	; 0x13f
 8001350:	22ef      	movs	r2, #239	; 0xef
 8001352:	2100      	movs	r1, #0
 8001354:	2000      	movs	r0, #0
 8001356:	f7ff febb 	bl	80010d0 <ILI9341_SetCursorPosition>
 800135a:	e00e      	b.n	800137a <ILI9341_Fill+0x52>
	}
	else if(rotationNum==2 || rotationNum==4)
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <ILI9341_Fill+0x84>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d003      	beq.n	800136c <ILI9341_Fill+0x44>
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <ILI9341_Fill+0x84>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b04      	cmp	r3, #4
 800136a:	d116      	bne.n	800139a <ILI9341_Fill+0x72>
	{
		ILI9341_SetCursorPosition(0, 0, ILI9341_HEIGHT -1, ILI9341_WIDTH -1);
 800136c:	23ef      	movs	r3, #239	; 0xef
 800136e:	f240 123f 	movw	r2, #319	; 0x13f
 8001372:	2100      	movs	r1, #0
 8001374:	2000      	movs	r0, #0
 8001376:	f7ff feab 	bl	80010d0 <ILI9341_SetCursorPosition>
	}
	
	
	while (n) {
 800137a:	e00e      	b.n	800139a <ILI9341_Fill+0x72>
			n--;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	3b01      	subs	r3, #1
 8001380:	60fb      	str	r3, [r7, #12]
       ILI9341_SendData(color>>8);
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	b29b      	uxth	r3, r3
 8001388:	b2db      	uxtb	r3, r3
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fe6c 	bl	8001068 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fe67 	bl	8001068 <ILI9341_SendData>
	while (n) {
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1ed      	bne.n	800137c <ILI9341_Fill+0x54>
	}
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000000 	.word	0x20000000

080013b0 <ILI9341_Fill_Rect>:
//7. Rectangle drawing functions
void ILI9341_Fill_Rect(unsigned int x0,unsigned int y0, unsigned int x1,unsigned int y1, uint16_t color) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
 80013bc:	603b      	str	r3, [r7, #0]
	uint32_t n = ((x1+1)-x0)*((y1+1)-y0);
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	3301      	adds	r3, #1
 80013c6:	6839      	ldr	r1, [r7, #0]
 80013c8:	68ba      	ldr	r2, [r7, #8]
 80013ca:	1a8a      	subs	r2, r1, r2
 80013cc:	3201      	adds	r2, #1
 80013ce:	fb02 f303 	mul.w	r3, r2, r3
 80013d2:	617b      	str	r3, [r7, #20]
	if (n>ILI9341_PIXEL_COUNT) n=ILI9341_PIXEL_COUNT;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 80013da:	d902      	bls.n	80013e2 <ILI9341_Fill_Rect+0x32>
 80013dc:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80013e0:	617b      	str	r3, [r7, #20]
	ILI9341_SetCursorPosition(x0, y0, x1, y1);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	b298      	uxth	r0, r3
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	b299      	uxth	r1, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	f7ff fe6d 	bl	80010d0 <ILI9341_SetCursorPosition>
	while (n) {
 80013f6:	e00e      	b.n	8001416 <ILI9341_Fill_Rect+0x66>
			n--;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
      ILI9341_SendData(color>>8);
 80013fe:	8c3b      	ldrh	r3, [r7, #32]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	b29b      	uxth	r3, r3
 8001404:	b2db      	uxtb	r3, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fe2e 	bl	8001068 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 800140c:	8c3b      	ldrh	r3, [r7, #32]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fe29 	bl	8001068 <ILI9341_SendData>
	while (n) {
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1ed      	bne.n	80013f8 <ILI9341_Fill_Rect+0x48>
	}
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <fillCircleHelper>:
      ILI9341_DrawPixel(x0 - x, y0 - y, color);
    }
  }
}
static void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 8001426:	b590      	push	{r4, r7, lr}
 8001428:	b087      	sub	sp, #28
 800142a:	af00      	add	r7, sp, #0
 800142c:	4604      	mov	r4, r0
 800142e:	4608      	mov	r0, r1
 8001430:	4611      	mov	r1, r2
 8001432:	461a      	mov	r2, r3
 8001434:	4623      	mov	r3, r4
 8001436:	80fb      	strh	r3, [r7, #6]
 8001438:	4603      	mov	r3, r0
 800143a:	80bb      	strh	r3, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
 8001440:	4613      	mov	r3, r2
 8001442:	707b      	strb	r3, [r7, #1]
	int16_t f     = 1 - r;
 8001444:	887b      	ldrh	r3, [r7, #2]
 8001446:	f1c3 0301 	rsb	r3, r3, #1
 800144a:	b29b      	uxth	r3, r3
 800144c:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 800144e:	2301      	movs	r3, #1
 8001450:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8001452:	887b      	ldrh	r3, [r7, #2]
 8001454:	461a      	mov	r2, r3
 8001456:	03d2      	lsls	r2, r2, #15
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	b29b      	uxth	r3, r3
 800145e:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 8001464:	887b      	ldrh	r3, [r7, #2]
 8001466:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 8001468:	e083      	b.n	8001572 <fillCircleHelper+0x14c>
    if (f >= 0) {
 800146a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800146e:	2b00      	cmp	r3, #0
 8001470:	db0e      	blt.n	8001490 <fillCircleHelper+0x6a>
      y--;
 8001472:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001476:	b29b      	uxth	r3, r3
 8001478:	3b01      	subs	r3, #1
 800147a:	b29b      	uxth	r3, r3
 800147c:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 800147e:	8a7b      	ldrh	r3, [r7, #18]
 8001480:	3302      	adds	r3, #2
 8001482:	b29b      	uxth	r3, r3
 8001484:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 8001486:	8afa      	ldrh	r2, [r7, #22]
 8001488:	8a7b      	ldrh	r3, [r7, #18]
 800148a:	4413      	add	r3, r2
 800148c:	b29b      	uxth	r3, r3
 800148e:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8001490:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001494:	b29b      	uxth	r3, r3
 8001496:	3301      	adds	r3, #1
 8001498:	b29b      	uxth	r3, r3
 800149a:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 800149c:	8abb      	ldrh	r3, [r7, #20]
 800149e:	3302      	adds	r3, #2
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 80014a4:	8afa      	ldrh	r2, [r7, #22]
 80014a6:	8abb      	ldrh	r3, [r7, #20]
 80014a8:	4413      	add	r3, r2
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 80014ae:	787b      	ldrb	r3, [r7, #1]
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d02b      	beq.n	8001510 <fillCircleHelper+0xea>
      ILI9341_drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 80014b8:	88fa      	ldrh	r2, [r7, #6]
 80014ba:	8a3b      	ldrh	r3, [r7, #16]
 80014bc:	4413      	add	r3, r2
 80014be:	b29b      	uxth	r3, r3
 80014c0:	b218      	sxth	r0, r3
 80014c2:	88ba      	ldrh	r2, [r7, #4]
 80014c4:	89fb      	ldrh	r3, [r7, #14]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	b219      	sxth	r1, r3
 80014cc:	89fb      	ldrh	r3, [r7, #14]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014d4:	4413      	add	r3, r2
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	3301      	adds	r3, #1
 80014da:	b29b      	uxth	r3, r3
 80014dc:	b21a      	sxth	r2, r3
 80014de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014e0:	f000 f921 	bl	8001726 <ILI9341_drawFastVLine>
      ILI9341_drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80014e4:	88fa      	ldrh	r2, [r7, #6]
 80014e6:	89fb      	ldrh	r3, [r7, #14]
 80014e8:	4413      	add	r3, r2
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	b218      	sxth	r0, r3
 80014ee:	88ba      	ldrh	r2, [r7, #4]
 80014f0:	8a3b      	ldrh	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	b219      	sxth	r1, r3
 80014f8:	8a3b      	ldrh	r3, [r7, #16]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001500:	4413      	add	r3, r2
 8001502:	b29b      	uxth	r3, r3
 8001504:	3301      	adds	r3, #1
 8001506:	b29b      	uxth	r3, r3
 8001508:	b21a      	sxth	r2, r3
 800150a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800150c:	f000 f90b 	bl	8001726 <ILI9341_drawFastVLine>
    }
    if (cornername & 0x2) {
 8001510:	787b      	ldrb	r3, [r7, #1]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d02b      	beq.n	8001572 <fillCircleHelper+0x14c>
      ILI9341_drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 800151a:	88fa      	ldrh	r2, [r7, #6]
 800151c:	8a3b      	ldrh	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	b29b      	uxth	r3, r3
 8001522:	b218      	sxth	r0, r3
 8001524:	88ba      	ldrh	r2, [r7, #4]
 8001526:	89fb      	ldrh	r3, [r7, #14]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	b29b      	uxth	r3, r3
 800152c:	b219      	sxth	r1, r3
 800152e:	89fb      	ldrh	r3, [r7, #14]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	b29a      	uxth	r2, r3
 8001534:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001536:	4413      	add	r3, r2
 8001538:	b29b      	uxth	r3, r3
 800153a:	3301      	adds	r3, #1
 800153c:	b29b      	uxth	r3, r3
 800153e:	b21a      	sxth	r2, r3
 8001540:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001542:	f000 f8f0 	bl	8001726 <ILI9341_drawFastVLine>
      ILI9341_drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 8001546:	88fa      	ldrh	r2, [r7, #6]
 8001548:	89fb      	ldrh	r3, [r7, #14]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	b29b      	uxth	r3, r3
 800154e:	b218      	sxth	r0, r3
 8001550:	88ba      	ldrh	r2, [r7, #4]
 8001552:	8a3b      	ldrh	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	b29b      	uxth	r3, r3
 8001558:	b219      	sxth	r1, r3
 800155a:	8a3b      	ldrh	r3, [r7, #16]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	b29a      	uxth	r2, r3
 8001560:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001562:	4413      	add	r3, r2
 8001564:	b29b      	uxth	r3, r3
 8001566:	3301      	adds	r3, #1
 8001568:	b29b      	uxth	r3, r3
 800156a:	b21a      	sxth	r2, r3
 800156c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800156e:	f000 f8da 	bl	8001726 <ILI9341_drawFastVLine>
  while (x<y) {
 8001572:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001576:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800157a:	429a      	cmp	r2, r3
 800157c:	f6ff af75 	blt.w	800146a <fillCircleHelper+0x44>
    }
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	371c      	adds	r7, #28
 8001586:	46bd      	mov	sp, r7
 8001588:	bd90      	pop	{r4, r7, pc}

0800158a <ILI9341_fillCircle>:
void ILI9341_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 800158a:	b590      	push	{r4, r7, lr}
 800158c:	b085      	sub	sp, #20
 800158e:	af02      	add	r7, sp, #8
 8001590:	4604      	mov	r4, r0
 8001592:	4608      	mov	r0, r1
 8001594:	4611      	mov	r1, r2
 8001596:	461a      	mov	r2, r3
 8001598:	4623      	mov	r3, r4
 800159a:	80fb      	strh	r3, [r7, #6]
 800159c:	4603      	mov	r3, r0
 800159e:	80bb      	strh	r3, [r7, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	807b      	strh	r3, [r7, #2]
 80015a4:	4613      	mov	r3, r2
 80015a6:	803b      	strh	r3, [r7, #0]
	ILI9341_drawFastVLine(x0, y0-r, 2*r+1, color);
 80015a8:	88ba      	ldrh	r2, [r7, #4]
 80015aa:	887b      	ldrh	r3, [r7, #2]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	b219      	sxth	r1, r3
 80015b2:	887b      	ldrh	r3, [r7, #2]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	3301      	adds	r3, #1
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	b21a      	sxth	r2, r3
 80015be:	883b      	ldrh	r3, [r7, #0]
 80015c0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80015c4:	f000 f8af 	bl	8001726 <ILI9341_drawFastVLine>
  fillCircleHelper(x0, y0, r, 3, 0, color);
 80015c8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80015cc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80015d0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80015d4:	883b      	ldrh	r3, [r7, #0]
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	2300      	movs	r3, #0
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2303      	movs	r3, #3
 80015de:	f7ff ff22 	bl	8001426 <fillCircleHelper>
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd90      	pop	{r4, r7, pc}

080015ea <ILI9341_drawLine>:

//9. Line drawing functions
void ILI9341_drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80015ea:	b590      	push	{r4, r7, lr}
 80015ec:	b089      	sub	sp, #36	; 0x24
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4604      	mov	r4, r0
 80015f2:	4608      	mov	r0, r1
 80015f4:	4611      	mov	r1, r2
 80015f6:	461a      	mov	r2, r3
 80015f8:	4623      	mov	r3, r4
 80015fa:	80fb      	strh	r3, [r7, #6]
 80015fc:	4603      	mov	r3, r0
 80015fe:	80bb      	strh	r3, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	807b      	strh	r3, [r7, #2]
 8001604:	4613      	mov	r3, r2
 8001606:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8001608:	f9b7 2000 	ldrsh.w	r2, [r7]
 800160c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001616:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800161a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800161e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001622:	1acb      	subs	r3, r1, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	bfb8      	it	lt
 8001628:	425b      	neglt	r3, r3
 800162a:	429a      	cmp	r2, r3
 800162c:	bfcc      	ite	gt
 800162e:	2301      	movgt	r3, #1
 8001630:	2300      	movle	r3, #0
 8001632:	b2db      	uxtb	r3, r3
 8001634:	837b      	strh	r3, [r7, #26]
  if (steep) {
 8001636:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00b      	beq.n	8001656 <ILI9341_drawLine+0x6c>
    swap(x0, y0);
 800163e:	88fb      	ldrh	r3, [r7, #6]
 8001640:	833b      	strh	r3, [r7, #24]
 8001642:	88bb      	ldrh	r3, [r7, #4]
 8001644:	80fb      	strh	r3, [r7, #6]
 8001646:	8b3b      	ldrh	r3, [r7, #24]
 8001648:	80bb      	strh	r3, [r7, #4]
    swap(x1, y1);
 800164a:	887b      	ldrh	r3, [r7, #2]
 800164c:	82fb      	strh	r3, [r7, #22]
 800164e:	883b      	ldrh	r3, [r7, #0]
 8001650:	807b      	strh	r3, [r7, #2]
 8001652:	8afb      	ldrh	r3, [r7, #22]
 8001654:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1) {
 8001656:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800165a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800165e:	429a      	cmp	r2, r3
 8001660:	dd0b      	ble.n	800167a <ILI9341_drawLine+0x90>
    swap(x0, x1);
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	82bb      	strh	r3, [r7, #20]
 8001666:	887b      	ldrh	r3, [r7, #2]
 8001668:	80fb      	strh	r3, [r7, #6]
 800166a:	8abb      	ldrh	r3, [r7, #20]
 800166c:	807b      	strh	r3, [r7, #2]
    swap(y0, y1);
 800166e:	88bb      	ldrh	r3, [r7, #4]
 8001670:	827b      	strh	r3, [r7, #18]
 8001672:	883b      	ldrh	r3, [r7, #0]
 8001674:	80bb      	strh	r3, [r7, #4]
 8001676:	8a7b      	ldrh	r3, [r7, #18]
 8001678:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	b29b      	uxth	r3, r3
 8001682:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8001684:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001688:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	bfb8      	it	lt
 8001692:	425b      	neglt	r3, r3
 8001694:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 8001696:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800169a:	0fda      	lsrs	r2, r3, #31
 800169c:	4413      	add	r3, r2
 800169e:	105b      	asrs	r3, r3, #1
 80016a0:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1) {
 80016a2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80016a6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	da02      	bge.n	80016b4 <ILI9341_drawLine+0xca>
    ystep = 1;
 80016ae:	2301      	movs	r3, #1
 80016b0:	83bb      	strh	r3, [r7, #28]
 80016b2:	e02d      	b.n	8001710 <ILI9341_drawLine+0x126>
  } else {
    ystep = -1;
 80016b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016b8:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++) {
 80016ba:	e029      	b.n	8001710 <ILI9341_drawLine+0x126>
    if (steep) {
 80016bc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d006      	beq.n	80016d2 <ILI9341_drawLine+0xe8>
      ILI9341_DrawPixel(y0, x0, color);
 80016c4:	88bb      	ldrh	r3, [r7, #4]
 80016c6:	88f9      	ldrh	r1, [r7, #6]
 80016c8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fe0c 	bl	80012e8 <ILI9341_DrawPixel>
 80016d0:	e005      	b.n	80016de <ILI9341_drawLine+0xf4>
    } else {
      ILI9341_DrawPixel(x0, y0, color);
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	88b9      	ldrh	r1, [r7, #4]
 80016d6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fe05 	bl	80012e8 <ILI9341_DrawPixel>
    }
    err -= dy;
 80016de:	8bfa      	ldrh	r2, [r7, #30]
 80016e0:	89fb      	ldrh	r3, [r7, #14]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	83fb      	strh	r3, [r7, #30]
    if (err < 0) {
 80016e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	da09      	bge.n	8001704 <ILI9341_drawLine+0x11a>
      y0 += ystep;
 80016f0:	88ba      	ldrh	r2, [r7, #4]
 80016f2:	8bbb      	ldrh	r3, [r7, #28]
 80016f4:	4413      	add	r3, r2
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	80bb      	strh	r3, [r7, #4]
      err += dx;
 80016fa:	8bfa      	ldrh	r2, [r7, #30]
 80016fc:	8a3b      	ldrh	r3, [r7, #16]
 80016fe:	4413      	add	r3, r2
 8001700:	b29b      	uxth	r3, r3
 8001702:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++) {
 8001704:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001708:	b29b      	uxth	r3, r3
 800170a:	3301      	adds	r3, #1
 800170c:	b29b      	uxth	r3, r3
 800170e:	80fb      	strh	r3, [r7, #6]
 8001710:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001714:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001718:	429a      	cmp	r2, r3
 800171a:	ddcf      	ble.n	80016bc <ILI9341_drawLine+0xd2>
    }
  }
}	
 800171c:	bf00      	nop
 800171e:	bf00      	nop
 8001720:	3724      	adds	r7, #36	; 0x24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd90      	pop	{r4, r7, pc}

08001726 <ILI9341_drawFastVLine>:
{
	ILI9341_drawLine(x, y, x+w-1, y, color);
}

void ILI9341_drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8001726:	b590      	push	{r4, r7, lr}
 8001728:	b085      	sub	sp, #20
 800172a:	af02      	add	r7, sp, #8
 800172c:	4604      	mov	r4, r0
 800172e:	4608      	mov	r0, r1
 8001730:	4611      	mov	r1, r2
 8001732:	461a      	mov	r2, r3
 8001734:	4623      	mov	r3, r4
 8001736:	80fb      	strh	r3, [r7, #6]
 8001738:	4603      	mov	r3, r0
 800173a:	80bb      	strh	r3, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	807b      	strh	r3, [r7, #2]
 8001740:	4613      	mov	r3, r2
 8001742:	803b      	strh	r3, [r7, #0]
	ILI9341_drawLine(x, y, x, y+h-1, color);
 8001744:	88ba      	ldrh	r2, [r7, #4]
 8001746:	887b      	ldrh	r3, [r7, #2]
 8001748:	4413      	add	r3, r2
 800174a:	b29b      	uxth	r3, r3
 800174c:	3b01      	subs	r3, #1
 800174e:	b29b      	uxth	r3, r3
 8001750:	b21c      	sxth	r4, r3
 8001752:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001756:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800175a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800175e:	883b      	ldrh	r3, [r7, #0]
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	4623      	mov	r3, r4
 8001764:	f7ff ff41 	bl	80015ea <ILI9341_drawLine>
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	bd90      	pop	{r4, r7, pc}

08001770 <ILI9341_drawChar>:
	}
}

//11. Text printing functions
void ILI9341_drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8001770:	b5b0      	push	{r4, r5, r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af02      	add	r7, sp, #8
 8001776:	4604      	mov	r4, r0
 8001778:	4608      	mov	r0, r1
 800177a:	4611      	mov	r1, r2
 800177c:	461a      	mov	r2, r3
 800177e:	4623      	mov	r3, r4
 8001780:	80fb      	strh	r3, [r7, #6]
 8001782:	4603      	mov	r3, r0
 8001784:	80bb      	strh	r3, [r7, #4]
 8001786:	460b      	mov	r3, r1
 8001788:	70fb      	strb	r3, [r7, #3]
 800178a:	4613      	mov	r3, r2
 800178c:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 800178e:	4b98      	ldr	r3, [pc, #608]	; (80019f0 <ILI9341_drawChar+0x280>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d003      	beq.n	800179e <ILI9341_drawChar+0x2e>
 8001796:	4b96      	ldr	r3, [pc, #600]	; (80019f0 <ILI9341_drawChar+0x280>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b03      	cmp	r3, #3
 800179c:	d11f      	bne.n	80017de <ILI9341_drawChar+0x6e>
	{
		if((x >= ILI9341_WIDTH)            || // Clip right
 800179e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017a2:	2bef      	cmp	r3, #239	; 0xef
 80017a4:	f300 811d 	bgt.w	80019e2 <ILI9341_drawChar+0x272>
 80017a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017ac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80017b0:	f280 8117 	bge.w	80019e2 <ILI9341_drawChar+0x272>
     (y >= ILI9341_HEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 80017b4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80017b8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80017bc:	4613      	mov	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4413      	add	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	440b      	add	r3, r1
     (y >= ILI9341_HEIGHT)           || // Clip bottom
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f340 810b 	ble.w	80019e2 <ILI9341_drawChar+0x272>
     ((y + 8 * size - 1) < 0))   // Clip top
 80017cc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80017d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 80017d8:	2b00      	cmp	r3, #0
 80017da:	dc21      	bgt.n	8001820 <ILI9341_drawChar+0xb0>
    return;
 80017dc:	e101      	b.n	80019e2 <ILI9341_drawChar+0x272>
	}
	else
	{
		if((y >= ILI9341_WIDTH)            || // Clip right
 80017de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017e2:	2bef      	cmp	r3, #239	; 0xef
 80017e4:	f300 80ff 	bgt.w	80019e6 <ILI9341_drawChar+0x276>
 80017e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ec:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80017f0:	f280 80f9 	bge.w	80019e6 <ILI9341_drawChar+0x276>
     (x >= ILI9341_HEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 80017f4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80017f8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80017fc:	4613      	mov	r3, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4413      	add	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	440b      	add	r3, r1
     (x >= ILI9341_HEIGHT)           || // Clip bottom
 8001806:	2b00      	cmp	r3, #0
 8001808:	f340 80ed 	ble.w	80019e6 <ILI9341_drawChar+0x276>
     ((x + 8 * size - 1) < 0))   // Clip top
 800180c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001810:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4413      	add	r3, r2
     ((y + 6 * size - 1) < 0) || // Clip left
 8001818:	2b00      	cmp	r3, #0
 800181a:	f340 80e4 	ble.w	80019e6 <ILI9341_drawChar+0x276>
 800181e:	e000      	b.n	8001822 <ILI9341_drawChar+0xb2>
		if((x >= ILI9341_WIDTH)            || // Clip right
 8001820:	bf00      	nop
    return;
	}	
	

  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 8001822:	4b74      	ldr	r3, [pc, #464]	; (80019f4 <ILI9341_drawChar+0x284>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	f083 0301 	eor.w	r3, r3, #1
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <ILI9341_drawChar+0xcc>
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	2baf      	cmp	r3, #175	; 0xaf
 8001834:	d902      	bls.n	800183c <ILI9341_drawChar+0xcc>
 8001836:	78fb      	ldrb	r3, [r7, #3]
 8001838:	3301      	adds	r3, #1
 800183a:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 800183c:	2300      	movs	r3, #0
 800183e:	73fb      	strb	r3, [r7, #15]
 8001840:	e0c9      	b.n	80019d6 <ILI9341_drawChar+0x266>
    uint8_t line;
    if (i == 5) 
 8001842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001846:	2b05      	cmp	r3, #5
 8001848:	d102      	bne.n	8001850 <ILI9341_drawChar+0xe0>
      line = 0x0;
 800184a:	2300      	movs	r3, #0
 800184c:	73bb      	strb	r3, [r7, #14]
 800184e:	e00b      	b.n	8001868 <ILI9341_drawChar+0xf8>
    else 
      line = pgm_read_byte(font1+(c*5)+i);
 8001850:	78fa      	ldrb	r2, [r7, #3]
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	461a      	mov	r2, r3
 800185a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185e:	4413      	add	r3, r2
 8001860:	4a65      	ldr	r2, [pc, #404]	; (80019f8 <ILI9341_drawChar+0x288>)
 8001862:	4413      	add	r3, r2
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8001868:	2300      	movs	r3, #0
 800186a:	737b      	strb	r3, [r7, #13]
 800186c:	e0a8      	b.n	80019c0 <ILI9341_drawChar+0x250>
      if (line & 0x1) {
 800186e:	7bbb      	ldrb	r3, [r7, #14]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	d04b      	beq.n	8001910 <ILI9341_drawChar+0x1a0>
        if (size == 1) // default size
 8001878:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800187c:	2b01      	cmp	r3, #1
 800187e:	d110      	bne.n	80018a2 <ILI9341_drawChar+0x132>
          ILI9341_DrawPixel(x+i, y+j, color);
 8001880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001884:	b29a      	uxth	r2, r3
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	4413      	add	r3, r2
 800188a:	b298      	uxth	r0, r3
 800188c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001890:	b29a      	uxth	r2, r3
 8001892:	88bb      	ldrh	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	b29b      	uxth	r3, r3
 8001898:	883a      	ldrh	r2, [r7, #0]
 800189a:	4619      	mov	r1, r3
 800189c:	f7ff fd24 	bl	80012e8 <ILI9341_DrawPixel>
 80018a0:	e085      	b.n	80019ae <ILI9341_drawChar+0x23e>
        else {  // big size
          ILI9341_Fill_Rect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 80018a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80018a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018aa:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80018ae:	fb01 f303 	mul.w	r3, r1, r3
 80018b2:	4413      	add	r3, r2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80018ba:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018be:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80018c2:	fb01 f303 	mul.w	r3, r1, r3
 80018c6:	4413      	add	r3, r2
 80018c8:	461c      	mov	r4, r3
 80018ca:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80018ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d2:	441a      	add	r2, r3
 80018d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d8:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80018dc:	fb01 f303 	mul.w	r3, r1, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	461d      	mov	r5, r3
 80018e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018ee:	441a      	add	r2, r3
 80018f0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018f4:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80018f8:	fb01 f303 	mul.w	r3, r1, r3
 80018fc:	4413      	add	r3, r2
 80018fe:	461a      	mov	r2, r3
 8001900:	883b      	ldrh	r3, [r7, #0]
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	4613      	mov	r3, r2
 8001906:	462a      	mov	r2, r5
 8001908:	4621      	mov	r1, r4
 800190a:	f7ff fd51 	bl	80013b0 <ILI9341_Fill_Rect>
 800190e:	e04e      	b.n	80019ae <ILI9341_drawChar+0x23e>
        } 
      } else if (bg != color) {
 8001910:	8c3a      	ldrh	r2, [r7, #32]
 8001912:	883b      	ldrh	r3, [r7, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d04a      	beq.n	80019ae <ILI9341_drawChar+0x23e>
        if (size == 1) // default size
 8001918:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800191c:	2b01      	cmp	r3, #1
 800191e:	d110      	bne.n	8001942 <ILI9341_drawChar+0x1d2>
          ILI9341_DrawPixel(x+i, y+j, bg);
 8001920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001924:	b29a      	uxth	r2, r3
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	4413      	add	r3, r2
 800192a:	b298      	uxth	r0, r3
 800192c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001930:	b29a      	uxth	r2, r3
 8001932:	88bb      	ldrh	r3, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	b29b      	uxth	r3, r3
 8001938:	8c3a      	ldrh	r2, [r7, #32]
 800193a:	4619      	mov	r1, r3
 800193c:	f7ff fcd4 	bl	80012e8 <ILI9341_DrawPixel>
 8001940:	e035      	b.n	80019ae <ILI9341_drawChar+0x23e>
        else {  // big size
          ILI9341_Fill_Rect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 8001942:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800194e:	fb01 f303 	mul.w	r3, r1, r3
 8001952:	4413      	add	r3, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800195a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800195e:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001962:	fb01 f303 	mul.w	r3, r1, r3
 8001966:	4413      	add	r3, r2
 8001968:	461c      	mov	r4, r3
 800196a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800196e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001972:	441a      	add	r2, r3
 8001974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001978:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800197c:	fb01 f303 	mul.w	r3, r1, r3
 8001980:	4413      	add	r3, r2
 8001982:	461d      	mov	r5, r3
 8001984:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800198e:	441a      	add	r2, r3
 8001990:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001994:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001998:	fb01 f303 	mul.w	r3, r1, r3
 800199c:	4413      	add	r3, r2
 800199e:	461a      	mov	r2, r3
 80019a0:	8c3b      	ldrh	r3, [r7, #32]
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	4613      	mov	r3, r2
 80019a6:	462a      	mov	r2, r5
 80019a8:	4621      	mov	r1, r4
 80019aa:	f7ff fd01 	bl	80013b0 <ILI9341_Fill_Rect>
        }
      }
      line >>= 1;
 80019ae:	7bbb      	ldrb	r3, [r7, #14]
 80019b0:	085b      	lsrs	r3, r3, #1
 80019b2:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 80019b4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	3301      	adds	r3, #1
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	737b      	strb	r3, [r7, #13]
 80019c0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80019c4:	2b07      	cmp	r3, #7
 80019c6:	f77f af52 	ble.w	800186e <ILI9341_drawChar+0xfe>
  for (int8_t i=0; i<6; i++ ) {
 80019ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	3301      	adds	r3, #1
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	73fb      	strb	r3, [r7, #15]
 80019d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019da:	2b05      	cmp	r3, #5
 80019dc:	f77f af31 	ble.w	8001842 <ILI9341_drawChar+0xd2>
 80019e0:	e002      	b.n	80019e8 <ILI9341_drawChar+0x278>
    return;
 80019e2:	bf00      	nop
 80019e4:	e000      	b.n	80019e8 <ILI9341_drawChar+0x278>
    return;
 80019e6:	bf00      	nop
    }
  }
}
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bdb0      	pop	{r4, r5, r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000000 	.word	0x20000000
 80019f4:	2000025c 	.word	0x2000025c
 80019f8:	0800d7c0 	.word	0x0800d7c0

080019fc <ILI9341_printText>:
void ILI9341_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 80019fc:	b590      	push	{r4, r7, lr}
 80019fe:	b089      	sub	sp, #36	; 0x24
 8001a00:	af02      	add	r7, sp, #8
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	4608      	mov	r0, r1
 8001a06:	4611      	mov	r1, r2
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	817b      	strh	r3, [r7, #10]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	813b      	strh	r3, [r7, #8]
 8001a12:	4613      	mov	r3, r2
 8001a14:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 8001a16:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	0052      	lsls	r2, r2, #1
 8001a20:	4413      	add	r3, r2
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	82fb      	strh	r3, [r7, #22]
 8001a2c:	e01a      	b.n	8001a64 <ILI9341_printText+0x68>
	{
		ILI9341_drawChar(x+(offset*i), y, text[i],color,bg,size);
 8001a2e:	8abb      	ldrh	r3, [r7, #20]
 8001a30:	8afa      	ldrh	r2, [r7, #22]
 8001a32:	fb12 f303 	smulbb	r3, r2, r3
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	897b      	ldrh	r3, [r7, #10]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	b218      	sxth	r0, r3
 8001a40:	8afb      	ldrh	r3, [r7, #22]
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	4413      	add	r3, r2
 8001a46:	781a      	ldrb	r2, [r3, #0]
 8001a48:	88fc      	ldrh	r4, [r7, #6]
 8001a4a:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8001a4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a52:	9301      	str	r3, [sp, #4]
 8001a54:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	4623      	mov	r3, r4
 8001a5a:	f7ff fe89 	bl	8001770 <ILI9341_drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8001a5e:	8afb      	ldrh	r3, [r7, #22]
 8001a60:	3301      	adds	r3, #1
 8001a62:	82fb      	strh	r3, [r7, #22]
 8001a64:	8afb      	ldrh	r3, [r7, #22]
 8001a66:	2b27      	cmp	r3, #39	; 0x27
 8001a68:	d805      	bhi.n	8001a76 <ILI9341_printText+0x7a>
 8001a6a:	8afb      	ldrh	r3, [r7, #22]
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	4413      	add	r3, r2
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1db      	bne.n	8001a2e <ILI9341_printText+0x32>
	}
}
 8001a76:	bf00      	nop
 8001a78:	371c      	adds	r7, #28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd90      	pop	{r4, r7, pc}
	...

08001a80 <ILI9341_setRotation>:
	}
}

//13. Set screen rotation
void ILI9341_setRotation(uint8_t rotate)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
	switch(rotate)
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d832      	bhi.n	8001af8 <ILI9341_setRotation+0x78>
 8001a92:	a201      	add	r2, pc, #4	; (adr r2, 8001a98 <ILI9341_setRotation+0x18>)
 8001a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a98:	08001aa9 	.word	0x08001aa9
 8001a9c:	08001abd 	.word	0x08001abd
 8001aa0:	08001ad1 	.word	0x08001ad1
 8001aa4:	08001ae5 	.word	0x08001ae5
	{
		case 1:
			rotationNum = 1;
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <ILI9341_setRotation+0x94>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001aae:	2036      	movs	r0, #54	; 0x36
 8001ab0:	f7ff faa6 	bl	8001000 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8001ab4:	2088      	movs	r0, #136	; 0x88
 8001ab6:	f7ff fad7 	bl	8001068 <ILI9341_SendData>
			break;
 8001aba:	e027      	b.n	8001b0c <ILI9341_setRotation+0x8c>
		case 2:
			rotationNum = 2;
 8001abc:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <ILI9341_setRotation+0x94>)
 8001abe:	2202      	movs	r2, #2
 8001ac0:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001ac2:	2036      	movs	r0, #54	; 0x36
 8001ac4:	f7ff fa9c 	bl	8001000 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8001ac8:	2028      	movs	r0, #40	; 0x28
 8001aca:	f7ff facd 	bl	8001068 <ILI9341_SendData>
			break;
 8001ace:	e01d      	b.n	8001b0c <ILI9341_setRotation+0x8c>
		case 3:
			rotationNum = 3;
 8001ad0:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <ILI9341_setRotation+0x94>)
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001ad6:	2036      	movs	r0, #54	; 0x36
 8001ad8:	f7ff fa92 	bl	8001000 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 8001adc:	2048      	movs	r0, #72	; 0x48
 8001ade:	f7ff fac3 	bl	8001068 <ILI9341_SendData>
			break;
 8001ae2:	e013      	b.n	8001b0c <ILI9341_setRotation+0x8c>
		case 4:
			rotationNum = 4;
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <ILI9341_setRotation+0x94>)
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001aea:	2036      	movs	r0, #54	; 0x36
 8001aec:	f7ff fa88 	bl	8001000 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8001af0:	20e8      	movs	r0, #232	; 0xe8
 8001af2:	f7ff fab9 	bl	8001068 <ILI9341_SendData>
			break;
 8001af6:	e009      	b.n	8001b0c <ILI9341_setRotation+0x8c>
		default:
			rotationNum = 1;
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <ILI9341_setRotation+0x94>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001afe:	2036      	movs	r0, #54	; 0x36
 8001b00:	f7ff fa7e 	bl	8001000 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8001b04:	2088      	movs	r0, #136	; 0x88
 8001b06:	f7ff faaf 	bl	8001068 <ILI9341_SendData>
			break;
 8001b0a:	bf00      	nop
	}
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000000 	.word	0x20000000

08001b18 <ILI9341_getRotation>:
//14. Get screen rotation
uint8_t ILI9341_getRotation(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
	return rotationNum;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <ILI9341_getRotation+0x14>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000000 	.word	0x20000000

08001b30 <TSC2046_SendCommand>:
#define _TS_CS_DISABLE		HAL_GPIO_WritePin(tsCS_GPIO, tsCS_PIN, GPIO_PIN_SET);

//Functions definitions
//1. Send TSC2046 Command and wait for a response
uint16_t TSC2046_SendCommand(uint8_t cmd)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3] = {0,0,0};
 8001b3a:	4a1e      	ldr	r2, [pc, #120]	; (8001bb4 <TSC2046_SendCommand+0x84>)
 8001b3c:	f107 0308 	add.w	r3, r7, #8
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	4611      	mov	r1, r2
 8001b44:	8019      	strh	r1, [r3, #0]
 8001b46:	3302      	adds	r3, #2
 8001b48:	0c12      	lsrs	r2, r2, #16
 8001b4a:	701a      	strb	r2, [r3, #0]
	uint16_t return16=0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	81fb      	strh	r3, [r7, #14]
	
	_TS_CS_ENBALE;
 8001b50:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <TSC2046_SendCommand+0x88>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a19      	ldr	r2, [pc, #100]	; (8001bbc <TSC2046_SendCommand+0x8c>)
 8001b56:	8811      	ldrh	r1, [r2, #0]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f003 fd8a 	bl	8005674 <HAL_GPIO_WritePin>
	spiBuf[0] = cmd;
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	723b      	strb	r3, [r7, #8]
	HAL_SPI_Transmit(&tsSPIhandle, spiBuf, 1, 10);
 8001b64:	f107 0108 	add.w	r1, r7, #8
 8001b68:	230a      	movs	r3, #10
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	4814      	ldr	r0, [pc, #80]	; (8001bc0 <TSC2046_SendCommand+0x90>)
 8001b6e:	f004 fabc 	bl	80060ea <HAL_SPI_Transmit>
	//Wait for response (3 ms)
	HAL_Delay(3);
 8001b72:	2003      	movs	r0, #3
 8001b74:	f003 fa32 	bl	8004fdc <HAL_Delay>
	if(HAL_SPI_Receive(&tsSPIhandle, &spiBuf[1], 2, 10) == HAL_OK) return16 = (spiBuf[1]<<4) + (spiBuf[2]>>4);
 8001b78:	f107 0308 	add.w	r3, r7, #8
 8001b7c:	1c59      	adds	r1, r3, #1
 8001b7e:	230a      	movs	r3, #10
 8001b80:	2202      	movs	r2, #2
 8001b82:	480f      	ldr	r0, [pc, #60]	; (8001bc0 <TSC2046_SendCommand+0x90>)
 8001b84:	f004 fbed 	bl	8006362 <HAL_SPI_Receive>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10a      	bne.n	8001ba4 <TSC2046_SendCommand+0x74>
 8001b8e:	7a7b      	ldrb	r3, [r7, #9]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	7abb      	ldrb	r3, [r7, #10]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	81fb      	strh	r3, [r7, #14]
 8001ba2:	e001      	b.n	8001ba8 <TSC2046_SendCommand+0x78>
	else return16 = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	81fb      	strh	r3, [r7, #14]
	
	
	return return16;
 8001ba8:	89fb      	ldrh	r3, [r7, #14]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	0800d658 	.word	0x0800d658
 8001bb8:	20000328 	.word	0x20000328
 8001bbc:	2000032c 	.word	0x2000032c
 8001bc0:	200002d0 	.word	0x200002d0
 8001bc4:	00000000 	.word	0x00000000

08001bc8 <TSC2046_Calibrate>:
//2. Calibrate resistive touch panel
void TSC2046_Calibrate(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
	uint16_t watchVar1=0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	80bb      	strh	r3, [r7, #4]
	TS_TOUCH_RAW_Def myRawTouchDef;
	//Get Top-Left corner calibration coordinate
	TSC2046_TL_point();
 8001bd2:	f000 f9f7 	bl	8001fc4 <TSC2046_TL_point>
	myTS_Calibrate.TL_X = 0;
 8001bd6:	4b8c      	ldr	r3, [pc, #560]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	801a      	strh	r2, [r3, #0]
	myTS_Calibrate.TL_Y = 0;
 8001bdc:	4b8a      	ldr	r3, [pc, #552]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	805a      	strh	r2, [r3, #2]
	myTS_Calibrate.BR_X = 0;
 8001be2:	4b89      	ldr	r3, [pc, #548]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	809a      	strh	r2, [r3, #4]
	myTS_Calibrate.BR_Y = 0;
 8001be8:	4b87      	ldr	r3, [pc, #540]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	80da      	strh	r2, [r3, #6]
	
	while(1)
	{
		watchVar1 = TSC2046_getRaw_Z();
 8001bee:	f000 f9d9 	bl	8001fa4 <TSC2046_getRaw_Z>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	80bb      	strh	r3, [r7, #4]
		if(watchVar1>50)
 8001bf6:	88bb      	ldrh	r3, [r7, #4]
 8001bf8:	2b32      	cmp	r3, #50	; 0x32
 8001bfa:	d91b      	bls.n	8001c34 <TSC2046_Calibrate+0x6c>
		{
			for(uint8_t i=0; i<10; i++)
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	71fb      	strb	r3, [r7, #7]
 8001c00:	e014      	b.n	8001c2c <TSC2046_Calibrate+0x64>
			{
				myRawTouchDef = TSC2046_GetRawTouch();
 8001c02:	f000 f905 	bl	8001e10 <TSC2046_GetRawTouch>
 8001c06:	4603      	mov	r3, r0
 8001c08:	603b      	str	r3, [r7, #0]
				myTS_Calibrate.TL_X += myRawTouchDef.x_touch;
 8001c0a:	4b7f      	ldr	r3, [pc, #508]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c0c:	881a      	ldrh	r2, [r3, #0]
 8001c0e:	883b      	ldrh	r3, [r7, #0]
 8001c10:	4413      	add	r3, r2
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	4b7c      	ldr	r3, [pc, #496]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c16:	801a      	strh	r2, [r3, #0]
				myTS_Calibrate.TL_Y += myRawTouchDef.y_touch;
 8001c18:	4b7b      	ldr	r3, [pc, #492]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c1a:	885a      	ldrh	r2, [r3, #2]
 8001c1c:	887b      	ldrh	r3, [r7, #2]
 8001c1e:	4413      	add	r3, r2
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	4b79      	ldr	r3, [pc, #484]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c24:	805a      	strh	r2, [r3, #2]
			for(uint8_t i=0; i<10; i++)
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	71fb      	strb	r3, [r7, #7]
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	2b09      	cmp	r3, #9
 8001c30:	d9e7      	bls.n	8001c02 <TSC2046_Calibrate+0x3a>
			}
			
			break;
 8001c32:	e003      	b.n	8001c3c <TSC2046_Calibrate+0x74>
		}
		HAL_Delay(10);
 8001c34:	200a      	movs	r0, #10
 8001c36:	f003 f9d1 	bl	8004fdc <HAL_Delay>
		watchVar1 = TSC2046_getRaw_Z();
 8001c3a:	e7d8      	b.n	8001bee <TSC2046_Calibrate+0x26>
	}
	HAL_Delay(1000);
 8001c3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c40:	f003 f9cc 	bl	8004fdc <HAL_Delay>
	//Get Bottom-Right corner calibration coordinate
	TSC2046_BR_point();
 8001c44:	f000 f9da 	bl	8001ffc <TSC2046_BR_point>
	while(1)
	{
		watchVar1 = TSC2046_getRaw_Z();
 8001c48:	f000 f9ac 	bl	8001fa4 <TSC2046_getRaw_Z>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	80bb      	strh	r3, [r7, #4]
		if(watchVar1>50)
 8001c50:	88bb      	ldrh	r3, [r7, #4]
 8001c52:	2b32      	cmp	r3, #50	; 0x32
 8001c54:	d91b      	bls.n	8001c8e <TSC2046_Calibrate+0xc6>
		{
			for(uint8_t i=0; i<10; i++)
 8001c56:	2300      	movs	r3, #0
 8001c58:	71bb      	strb	r3, [r7, #6]
 8001c5a:	e014      	b.n	8001c86 <TSC2046_Calibrate+0xbe>
			{
				myRawTouchDef = TSC2046_GetRawTouch();
 8001c5c:	f000 f8d8 	bl	8001e10 <TSC2046_GetRawTouch>
 8001c60:	4603      	mov	r3, r0
 8001c62:	603b      	str	r3, [r7, #0]
				myTS_Calibrate.BR_X += myRawTouchDef.x_touch;
 8001c64:	4b68      	ldr	r3, [pc, #416]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c66:	889a      	ldrh	r2, [r3, #4]
 8001c68:	883b      	ldrh	r3, [r7, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	4b66      	ldr	r3, [pc, #408]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c70:	809a      	strh	r2, [r3, #4]
				myTS_Calibrate.BR_Y += myRawTouchDef.y_touch;
 8001c72:	4b65      	ldr	r3, [pc, #404]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c74:	88da      	ldrh	r2, [r3, #6]
 8001c76:	887b      	ldrh	r3, [r7, #2]
 8001c78:	4413      	add	r3, r2
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	4b62      	ldr	r3, [pc, #392]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c7e:	80da      	strh	r2, [r3, #6]
			for(uint8_t i=0; i<10; i++)
 8001c80:	79bb      	ldrb	r3, [r7, #6]
 8001c82:	3301      	adds	r3, #1
 8001c84:	71bb      	strb	r3, [r7, #6]
 8001c86:	79bb      	ldrb	r3, [r7, #6]
 8001c88:	2b09      	cmp	r3, #9
 8001c8a:	d9e7      	bls.n	8001c5c <TSC2046_Calibrate+0x94>
			}
			break;
 8001c8c:	e003      	b.n	8001c96 <TSC2046_Calibrate+0xce>
		}
		HAL_Delay(10);
 8001c8e:	200a      	movs	r0, #10
 8001c90:	f003 f9a4 	bl	8004fdc <HAL_Delay>
		watchVar1 = TSC2046_getRaw_Z();
 8001c94:	e7d8      	b.n	8001c48 <TSC2046_Calibrate+0x80>
	}
	
	myTS_Calibrate.TL_X *=0.1;
 8001c96:	4b5c      	ldr	r3, [pc, #368]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fc4a 	bl	8000534 <__aeabi_i2d>
 8001ca0:	a357      	add	r3, pc, #348	; (adr r3, 8001e00 <TSC2046_Calibrate+0x238>)
 8001ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca6:	f7fe fcaf 	bl	8000608 <__aeabi_dmul>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4610      	mov	r0, r2
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f7fe ff81 	bl	8000bb8 <__aeabi_d2uiz>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	4b53      	ldr	r3, [pc, #332]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001cbc:	801a      	strh	r2, [r3, #0]
	myTS_Calibrate.TL_Y *=0.1;
 8001cbe:	4b52      	ldr	r3, [pc, #328]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001cc0:	885b      	ldrh	r3, [r3, #2]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fc36 	bl	8000534 <__aeabi_i2d>
 8001cc8:	a34d      	add	r3, pc, #308	; (adr r3, 8001e00 <TSC2046_Calibrate+0x238>)
 8001cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cce:	f7fe fc9b 	bl	8000608 <__aeabi_dmul>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f7fe ff6d 	bl	8000bb8 <__aeabi_d2uiz>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	4b49      	ldr	r3, [pc, #292]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001ce4:	805a      	strh	r2, [r3, #2]
	
	myTS_Calibrate.BR_X *=0.1;
 8001ce6:	4b48      	ldr	r3, [pc, #288]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001ce8:	889b      	ldrh	r3, [r3, #4]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fc22 	bl	8000534 <__aeabi_i2d>
 8001cf0:	a343      	add	r3, pc, #268	; (adr r3, 8001e00 <TSC2046_Calibrate+0x238>)
 8001cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf6:	f7fe fc87 	bl	8000608 <__aeabi_dmul>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4610      	mov	r0, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	f7fe ff59 	bl	8000bb8 <__aeabi_d2uiz>
 8001d06:	4603      	mov	r3, r0
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	4b3f      	ldr	r3, [pc, #252]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d0c:	809a      	strh	r2, [r3, #4]
	myTS_Calibrate.BR_Y *=0.1;
 8001d0e:	4b3e      	ldr	r3, [pc, #248]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d10:	88db      	ldrh	r3, [r3, #6]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fc0e 	bl	8000534 <__aeabi_i2d>
 8001d18:	a339      	add	r3, pc, #228	; (adr r3, 8001e00 <TSC2046_Calibrate+0x238>)
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	f7fe fc73 	bl	8000608 <__aeabi_dmul>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4610      	mov	r0, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f7fe ff45 	bl	8000bb8 <__aeabi_d2uiz>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	4b35      	ldr	r3, [pc, #212]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d34:	80da      	strh	r2, [r3, #6]
	
	//1. Calculate X_Diff, Y_Diff
	myTS_Calibrate.Scale_X = (myTS_Calibrate.Width + 0.0f)/(myTS_Calibrate.BR_X - myTS_Calibrate.TL_X + 0.0f);
 8001d36:	4b34      	ldr	r3, [pc, #208]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d38:	8b1b      	ldrh	r3, [r3, #24]
 8001d3a:	ee07 3a90 	vmov	s15, r3
 8001d3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d42:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001e0c <TSC2046_Calibrate+0x244>
 8001d46:	ee77 6a87 	vadd.f32	s13, s15, s14
 8001d4a:	4b2f      	ldr	r3, [pc, #188]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d4c:	889b      	ldrh	r3, [r3, #4]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b2d      	ldr	r3, [pc, #180]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	ee07 3a90 	vmov	s15, r3
 8001d5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d5e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001e0c <TSC2046_Calibrate+0x244>
 8001d62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001d66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d6a:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d6c:	edc3 7a02 	vstr	s15, [r3, #8]
	myTS_Calibrate.Scale_Y = (myTS_Calibrate.Height + 0.0f)/(myTS_Calibrate.BR_Y - myTS_Calibrate.TL_Y + 0.0f);
 8001d70:	4b25      	ldr	r3, [pc, #148]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d72:	8b5b      	ldrh	r3, [r3, #26]
 8001d74:	ee07 3a90 	vmov	s15, r3
 8001d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d7c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001e0c <TSC2046_Calibrate+0x244>
 8001d80:	ee77 6a87 	vadd.f32	s13, s15, s14
 8001d84:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d86:	88db      	ldrh	r3, [r3, #6]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b1f      	ldr	r3, [pc, #124]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d8c:	885b      	ldrh	r3, [r3, #2]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	ee07 3a90 	vmov	s15, r3
 8001d94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d98:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001e0c <TSC2046_Calibrate+0x244>
 8001d9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001da4:	4b18      	ldr	r3, [pc, #96]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001da6:	edc3 7a03 	vstr	s15, [r3, #12]
	//2. Calculate Scalling ()
	myTS_Calibrate.Bias_X = 10 - myTS_Calibrate.Scale_X*myTS_Calibrate.TL_X;
 8001daa:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001dac:	ed93 7a02 	vldr	s14, [r3, #8]
 8001db0:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	ee07 3a90 	vmov	s15, r3
 8001db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001dca:	edc3 7a04 	vstr	s15, [r3, #16]
	myTS_Calibrate.Bias_Y = 10 - myTS_Calibrate.Scale_Y*myTS_Calibrate.TL_Y;
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001dd0:	ed93 7a03 	vldr	s14, [r3, #12]
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001dd6:	885b      	ldrh	r3, [r3, #2]
 8001dd8:	ee07 3a90 	vmov	s15, r3
 8001ddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001de8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001dee:	edc3 7a05 	vstr	s15, [r3, #20]
	
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	f3af 8000 	nop.w
 8001e00:	9999999a 	.word	0x9999999a
 8001e04:	3fb99999 	.word	0x3fb99999
 8001e08:	20000330 	.word	0x20000330
 8001e0c:	00000000 	.word	0x00000000

08001e10 <TSC2046_GetRawTouch>:
//3. Poll for touch status
TS_TOUCH_RAW_Def TSC2046_GetRawTouch(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
	
	//Assign raw touch based on orientation
	switch (ScreenOrientation)
 8001e16:	4b3d      	ldr	r3, [pc, #244]	; (8001f0c <TSC2046_GetRawTouch+0xfc>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	d867      	bhi.n	8001ef0 <TSC2046_GetRawTouch+0xe0>
 8001e20:	a201      	add	r2, pc, #4	; (adr r2, 8001e28 <TSC2046_GetRawTouch+0x18>)
 8001e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e26:	bf00      	nop
 8001e28:	08001e39 	.word	0x08001e39
 8001e2c:	08001e67 	.word	0x08001e67
 8001e30:	08001e9b 	.word	0x08001e9b
 8001e34:	08001ec9 	.word	0x08001ec9
	{
		case 1:
			localRawTouch.x_touch = 4095 - TSC2046_getRaw_X();
 8001e38:	f000 f894 	bl	8001f64 <TSC2046_getRaw_X>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001e42:	330f      	adds	r3, #15
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	4b32      	ldr	r3, [pc, #200]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001e48:	801a      	strh	r2, [r3, #0]
			localRawTouch.y_touch = TSC2046_getRaw_Y();
 8001e4a:	f000 f89b 	bl	8001f84 <TSC2046_getRaw_Y>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b2f      	ldr	r3, [pc, #188]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001e54:	805a      	strh	r2, [r3, #2]
			myTS_Calibrate.Width = 230;
 8001e56:	4b2f      	ldr	r3, [pc, #188]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001e58:	22e6      	movs	r2, #230	; 0xe6
 8001e5a:	831a      	strh	r2, [r3, #24]
			myTS_Calibrate.Height = 320;
 8001e5c:	4b2d      	ldr	r3, [pc, #180]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001e5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e62:	835a      	strh	r2, [r3, #26]
			break;
 8001e64:	e044      	b.n	8001ef0 <TSC2046_GetRawTouch+0xe0>
		
		case 2:
			localRawTouch.x_touch = 4095 - TSC2046_getRaw_Y();
 8001e66:	f000 f88d 	bl	8001f84 <TSC2046_getRaw_Y>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001e70:	330f      	adds	r3, #15
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	4b26      	ldr	r3, [pc, #152]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001e76:	801a      	strh	r2, [r3, #0]
			localRawTouch.y_touch = 4095 - TSC2046_getRaw_X();
 8001e78:	f000 f874 	bl	8001f64 <TSC2046_getRaw_X>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001e82:	330f      	adds	r3, #15
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001e88:	805a      	strh	r2, [r3, #2]
			myTS_Calibrate.Width = 320;
 8001e8a:	4b22      	ldr	r3, [pc, #136]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001e8c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e90:	831a      	strh	r2, [r3, #24]
			myTS_Calibrate.Height = 240;
 8001e92:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001e94:	22f0      	movs	r2, #240	; 0xf0
 8001e96:	835a      	strh	r2, [r3, #26]
			break;
 8001e98:	e02a      	b.n	8001ef0 <TSC2046_GetRawTouch+0xe0>
		
		case 3:
			localRawTouch.x_touch = TSC2046_getRaw_X();
 8001e9a:	f000 f863 	bl	8001f64 <TSC2046_getRaw_X>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001ea4:	801a      	strh	r2, [r3, #0]
			localRawTouch.y_touch = 4095 - TSC2046_getRaw_Y();
 8001ea6:	f000 f86d 	bl	8001f84 <TSC2046_getRaw_Y>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001eb0:	330f      	adds	r3, #15
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001eb6:	805a      	strh	r2, [r3, #2]
			myTS_Calibrate.Width = 230;
 8001eb8:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001eba:	22e6      	movs	r2, #230	; 0xe6
 8001ebc:	831a      	strh	r2, [r3, #24]
			myTS_Calibrate.Height = 320;
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001ec0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ec4:	835a      	strh	r2, [r3, #26]
			break;
 8001ec6:	e013      	b.n	8001ef0 <TSC2046_GetRawTouch+0xe0>
		
		case 4:
			localRawTouch.x_touch = TSC2046_getRaw_Y();
 8001ec8:	f000 f85c 	bl	8001f84 <TSC2046_getRaw_Y>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001ed2:	801a      	strh	r2, [r3, #0]
			localRawTouch.y_touch = TSC2046_getRaw_X();
 8001ed4:	f000 f846 	bl	8001f64 <TSC2046_getRaw_X>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	461a      	mov	r2, r3
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001ede:	805a      	strh	r2, [r3, #2]
			myTS_Calibrate.Width = 320;
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001ee2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ee6:	831a      	strh	r2, [r3, #24]
			myTS_Calibrate.Height = 240;
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001eea:	22f0      	movs	r2, #240	; 0xf0
 8001eec:	835a      	strh	r2, [r3, #26]
			break;
 8001eee:	bf00      	nop
	}
	
	return localRawTouch;
 8001ef0:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	88ba      	ldrh	r2, [r7, #4]
 8001efa:	f362 030f 	bfi	r3, r2, #0, #16
 8001efe:	88fa      	ldrh	r2, [r7, #6]
 8001f00:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	2000032e 	.word	0x2000032e
 8001f10:	2000034c 	.word	0x2000034c
 8001f14:	20000330 	.word	0x20000330

08001f18 <TSC2046_Begin>:

//4. Begin function
bool  TSC2046_Begin(SPI_HandleTypeDef *touchSPI, GPIO_TypeDef *csPort, uint16_t csPin)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	4613      	mov	r3, r2
 8001f24:	80fb      	strh	r3, [r7, #6]
	//Touch Screen SPI
	memcpy(&tsSPIhandle, touchSPI, sizeof(*touchSPI));
 8001f26:	2258      	movs	r2, #88	; 0x58
 8001f28:	68f9      	ldr	r1, [r7, #12]
 8001f2a:	480a      	ldr	r0, [pc, #40]	; (8001f54 <TSC2046_Begin+0x3c>)
 8001f2c:	f008 fdeb 	bl	800ab06 <memcpy>
	//Chip-Select Port and Pin
	tsCS_GPIO = csPort;
 8001f30:	4a09      	ldr	r2, [pc, #36]	; (8001f58 <TSC2046_Begin+0x40>)
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	6013      	str	r3, [r2, #0]
	tsCS_PIN = csPin;
 8001f36:	4a09      	ldr	r2, [pc, #36]	; (8001f5c <TSC2046_Begin+0x44>)
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	8013      	strh	r3, [r2, #0]
	//Get screen orientation
	ScreenOrientation = TSC2046_getOrientation();
 8001f3c:	f000 f88c 	bl	8002058 <TSC2046_getOrientation>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <TSC2046_Begin+0x48>)
 8001f46:	701a      	strb	r2, [r3, #0]
}
 8001f48:	bf00      	nop
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	200002d0 	.word	0x200002d0
 8001f58:	20000328 	.word	0x20000328
 8001f5c:	2000032c 	.word	0x2000032c
 8001f60:	2000032e 	.word	0x2000032e

08001f64 <TSC2046_getRaw_X>:

//5. Get raw touch data
//i. get x-axis raw touch 12-bit value
uint16_t TSC2046_getRaw_X(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
	return TSC2046_SendCommand(CMD_X_AXIS | CMD_Default);
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <TSC2046_getRaw_X+0x1c>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fddc 	bl	8001b30 <TSC2046_SendCommand>
 8001f78:	4603      	mov	r3, r0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000001 	.word	0x20000001

08001f84 <TSC2046_getRaw_Y>:
//ii. get y-axis raw touch 12-bit value
uint16_t TSC2046_getRaw_Y(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
	return TSC2046_SendCommand(CMD_Y_AXIS | CMD_Default);
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <TSC2046_getRaw_Y+0x1c>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fdcc 	bl	8001b30 <TSC2046_SendCommand>
 8001f98:	4603      	mov	r3, r0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000001 	.word	0x20000001

08001fa4 <TSC2046_getRaw_Z>:
//iii. get z-axis raw touch 12-bit value
uint16_t TSC2046_getRaw_Z(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
	return TSC2046_SendCommand(CMD_Z_AXIS | CMD_Default);
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <TSC2046_getRaw_Z+0x1c>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fdbc 	bl	8001b30 <TSC2046_SendCommand>
 8001fb8:	4603      	mov	r3, r0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000001 	.word	0x20000001

08001fc4 <TSC2046_TL_point>:

//6. Print calibration points
//i. Top-Left corner point
void TSC2046_TL_point(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af02      	add	r7, sp, #8
	ILI9341_fillCircle(10, 10, 3, COLOR_RED);
 8001fca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001fce:	2203      	movs	r2, #3
 8001fd0:	210a      	movs	r1, #10
 8001fd2:	200a      	movs	r0, #10
 8001fd4:	f7ff fad9 	bl	800158a <ILI9341_fillCircle>
	ILI9341_printText("Press here", 20, 30, COLOR_RED, COLOR_RED, 1);
 8001fd8:	2301      	movs	r3, #1
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001fe6:	221e      	movs	r2, #30
 8001fe8:	2114      	movs	r1, #20
 8001fea:	4803      	ldr	r0, [pc, #12]	; (8001ff8 <TSC2046_TL_point+0x34>)
 8001fec:	f7ff fd06 	bl	80019fc <ILI9341_printText>
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	0800d65c 	.word	0x0800d65c

08001ffc <TSC2046_BR_point>:
//ii. Bottom-Right corner point
void TSC2046_BR_point(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af02      	add	r7, sp, #8
	ILI9341_fillCircle(myTS_Calibrate.Width-10, myTS_Calibrate.Height-10, 3, COLOR_RED);
 8002002:	4b13      	ldr	r3, [pc, #76]	; (8002050 <TSC2046_BR_point+0x54>)
 8002004:	8b1b      	ldrh	r3, [r3, #24]
 8002006:	3b0a      	subs	r3, #10
 8002008:	b29b      	uxth	r3, r3
 800200a:	b218      	sxth	r0, r3
 800200c:	4b10      	ldr	r3, [pc, #64]	; (8002050 <TSC2046_BR_point+0x54>)
 800200e:	8b5b      	ldrh	r3, [r3, #26]
 8002010:	3b0a      	subs	r3, #10
 8002012:	b29b      	uxth	r3, r3
 8002014:	b219      	sxth	r1, r3
 8002016:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800201a:	2203      	movs	r2, #3
 800201c:	f7ff fab5 	bl	800158a <ILI9341_fillCircle>
	ILI9341_printText("Press here", myTS_Calibrate.Width-80, myTS_Calibrate.Height-40, COLOR_RED, COLOR_RED, 1);
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <TSC2046_BR_point+0x54>)
 8002022:	8b1b      	ldrh	r3, [r3, #24]
 8002024:	3b50      	subs	r3, #80	; 0x50
 8002026:	b29b      	uxth	r3, r3
 8002028:	b219      	sxth	r1, r3
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <TSC2046_BR_point+0x54>)
 800202c:	8b5b      	ldrh	r3, [r3, #26]
 800202e:	3b28      	subs	r3, #40	; 0x28
 8002030:	b29b      	uxth	r3, r3
 8002032:	b21a      	sxth	r2, r3
 8002034:	2301      	movs	r3, #1
 8002036:	9301      	str	r3, [sp, #4]
 8002038:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002042:	4804      	ldr	r0, [pc, #16]	; (8002054 <TSC2046_BR_point+0x58>)
 8002044:	f7ff fcda 	bl	80019fc <ILI9341_printText>
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000330 	.word	0x20000330
 8002054:	0800d65c 	.word	0x0800d65c

08002058 <TSC2046_getOrientation>:

//7. Get orientation (from LCD driver)
uint8_t TSC2046_getOrientation(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
	return ILI9341_getRotation();
 800205c:	f7ff fd5c 	bl	8001b18 <ILI9341_getRotation>
 8002060:	4603      	mov	r3, r0
}
 8002062:	4618      	mov	r0, r3
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <TSC2046_GetTouchData>:

//8. Get touch sccreen data
TS_TOUCH_DATA_Def TSC2046_GetTouchData(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
	TS_TOUCH_DATA_Def myTsData;
	uint16_t temp16x=0, temp16y=0;
 8002070:	2300      	movs	r3, #0
 8002072:	82fb      	strh	r3, [r7, #22]
 8002074:	2300      	movs	r3, #0
 8002076:	82bb      	strh	r3, [r7, #20]
	//Is screen pressed
	if(TSC2046_getRaw_Z()>50)
 8002078:	f7ff ff94 	bl	8001fa4 <TSC2046_getRaw_Z>
 800207c:	4603      	mov	r3, r0
 800207e:	2b32      	cmp	r3, #50	; 0x32
 8002080:	d920      	bls.n	80020c4 <TSC2046_GetTouchData+0x5c>
	{
		myTsData.isPressed = true;
 8002082:	2301      	movs	r3, #1
 8002084:	733b      	strb	r3, [r7, #12]
		//Read touch data
		for(uint8_t i=0; i<1; i++)
 8002086:	2300      	movs	r3, #0
 8002088:	74fb      	strb	r3, [r7, #19]
 800208a:	e011      	b.n	80020b0 <TSC2046_GetTouchData+0x48>
		{
			localRawTouch = TSC2046_GetRawTouch();
 800208c:	f7ff fec0 	bl	8001e10 <TSC2046_GetRawTouch>
 8002090:	4603      	mov	r3, r0
 8002092:	4a29      	ldr	r2, [pc, #164]	; (8002138 <TSC2046_GetTouchData+0xd0>)
 8002094:	6013      	str	r3, [r2, #0]
			temp16x += localRawTouch.x_touch;
 8002096:	4b28      	ldr	r3, [pc, #160]	; (8002138 <TSC2046_GetTouchData+0xd0>)
 8002098:	881a      	ldrh	r2, [r3, #0]
 800209a:	8afb      	ldrh	r3, [r7, #22]
 800209c:	4413      	add	r3, r2
 800209e:	82fb      	strh	r3, [r7, #22]
			temp16y += localRawTouch.y_touch;
 80020a0:	4b25      	ldr	r3, [pc, #148]	; (8002138 <TSC2046_GetTouchData+0xd0>)
 80020a2:	885a      	ldrh	r2, [r3, #2]
 80020a4:	8abb      	ldrh	r3, [r7, #20]
 80020a6:	4413      	add	r3, r2
 80020a8:	82bb      	strh	r3, [r7, #20]
		for(uint8_t i=0; i<1; i++)
 80020aa:	7cfb      	ldrb	r3, [r7, #19]
 80020ac:	3301      	adds	r3, #1
 80020ae:	74fb      	strb	r3, [r7, #19]
 80020b0:	7cfb      	ldrb	r3, [r7, #19]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0ea      	beq.n	800208c <TSC2046_GetTouchData+0x24>
		}
		localRawTouch.x_touch = temp16x*1;
 80020b6:	4a20      	ldr	r2, [pc, #128]	; (8002138 <TSC2046_GetTouchData+0xd0>)
 80020b8:	8afb      	ldrh	r3, [r7, #22]
 80020ba:	8013      	strh	r3, [r2, #0]
		localRawTouch.y_touch = temp16y*1;
 80020bc:	4a1e      	ldr	r2, [pc, #120]	; (8002138 <TSC2046_GetTouchData+0xd0>)
 80020be:	8abb      	ldrh	r3, [r7, #20]
 80020c0:	8053      	strh	r3, [r2, #2]
 80020c2:	e001      	b.n	80020c8 <TSC2046_GetTouchData+0x60>
	}
	else myTsData.isPressed = false;
 80020c4:	2300      	movs	r3, #0
 80020c6:	733b      	strb	r3, [r7, #12]
	
	
	//X_Touch value
	myTsData.X = myTS_Calibrate.Scale_X*localRawTouch.x_touch + myTS_Calibrate.Bias_X;
 80020c8:	4b1c      	ldr	r3, [pc, #112]	; (800213c <TSC2046_GetTouchData+0xd4>)
 80020ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80020ce:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <TSC2046_GetTouchData+0xd0>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	ee07 3a90 	vmov	s15, r3
 80020d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020de:	4b17      	ldr	r3, [pc, #92]	; (800213c <TSC2046_GetTouchData+0xd4>)
 80020e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80020e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020ec:	ee17 3a90 	vmov	r3, s15
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	81fb      	strh	r3, [r7, #14]
	//Y_Touch value
	myTsData.Y = myTS_Calibrate.Scale_Y*localRawTouch.y_touch + myTS_Calibrate.Bias_Y;
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <TSC2046_GetTouchData+0xd4>)
 80020f6:	ed93 7a03 	vldr	s14, [r3, #12]
 80020fa:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <TSC2046_GetTouchData+0xd0>)
 80020fc:	885b      	ldrh	r3, [r3, #2]
 80020fe:	ee07 3a90 	vmov	s15, r3
 8002102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002106:	ee27 7a27 	vmul.f32	s14, s14, s15
 800210a:	4b0c      	ldr	r3, [pc, #48]	; (800213c <TSC2046_GetTouchData+0xd4>)
 800210c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002118:	ee17 3a90 	vmov	r3, s15
 800211c:	b29b      	uxth	r3, r3
 800211e:	823b      	strh	r3, [r7, #16]
	
	return myTsData;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	461a      	mov	r2, r3
 8002124:	f107 030c 	add.w	r3, r7, #12
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	6010      	str	r0, [r2, #0]
 800212c:	889b      	ldrh	r3, [r3, #4]
 800212e:	8093      	strh	r3, [r2, #4]
}
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	2000034c 	.word	0x2000034c
 800213c:	20000330 	.word	0x20000330

08002140 <HMI_init>:

#include <HMI/hmi_display.h>


Hmi HMI_init(StateMachine* stateMachine, Sensor* sensorExtruder, Sensor* sensorBack)
{
 8002140:	b590      	push	{r4, r7, lr}
 8002142:	b08f      	sub	sp, #60	; 0x3c
 8002144:	af02      	add	r7, sp, #8
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
 800214c:	603b      	str	r3, [r7, #0]
	Hmi hmi;
	hmi.HmiInformation.stateMachine = stateMachine;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
	hmi.HmiInformation.sensorExtruder = sensorExtruder;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	62bb      	str	r3, [r7, #40]	; 0x28
	hmi.HmiInformation.sensorBack = sensorBack;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	62fb      	str	r3, [r7, #44]	; 0x2c

	TSC2046_Calibrate();
 800215a:	f7ff fd35 	bl	8001bc8 <TSC2046_Calibrate>
	ILI9341_Fill(COLOR_WHITE);
 800215e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002162:	f7ff f8e1 	bl	8001328 <ILI9341_Fill>

	ILI9341_Fill_Rect(5, 10, 315, 50, COLOR_ORANGE);
 8002166:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	2332      	movs	r3, #50	; 0x32
 800216e:	f240 123b 	movw	r2, #315	; 0x13b
 8002172:	210a      	movs	r1, #10
 8002174:	2005      	movs	r0, #5
 8002176:	f7ff f91b 	bl	80013b0 <ILI9341_Fill_Rect>
	ILI9341_printText("Sensor1 : 0 mm", 50, 25, COLOR_WHITE, COLOR_ORANGE, 2);
 800217a:	2302      	movs	r3, #2
 800217c:	9301      	str	r3, [sp, #4]
 800217e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002188:	2219      	movs	r2, #25
 800218a:	2132      	movs	r1, #50	; 0x32
 800218c:	4843      	ldr	r0, [pc, #268]	; (800229c <HMI_init+0x15c>)
 800218e:	f7ff fc35 	bl	80019fc <ILI9341_printText>

	ILI9341_Fill_Rect(5, 60, 315, 100, COLOR_ORANGE);
 8002192:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	2364      	movs	r3, #100	; 0x64
 800219a:	f240 123b 	movw	r2, #315	; 0x13b
 800219e:	213c      	movs	r1, #60	; 0x3c
 80021a0:	2005      	movs	r0, #5
 80021a2:	f7ff f905 	bl	80013b0 <ILI9341_Fill_Rect>
	ILI9341_printText("Sensor2 : 0 mm", 50, 75, COLOR_WHITE, COLOR_ORANGE, 2);
 80021a6:	2302      	movs	r3, #2
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021b4:	224b      	movs	r2, #75	; 0x4b
 80021b6:	2132      	movs	r1, #50	; 0x32
 80021b8:	4839      	ldr	r0, [pc, #228]	; (80022a0 <HMI_init+0x160>)
 80021ba:	f7ff fc1f 	bl	80019fc <ILI9341_printText>

	char buf[20];
	sprintf(buf, "Ruhemodus");
 80021be:	f107 0310 	add.w	r3, r7, #16
 80021c2:	4938      	ldr	r1, [pc, #224]	; (80022a4 <HMI_init+0x164>)
 80021c4:	4618      	mov	r0, r3
 80021c6:	f007 fc55 	bl	8009a74 <siprintf>

	ILI9341_Fill_Rect(5, 110, 315, 150, COLOR_BLUE);
 80021ca:	231f      	movs	r3, #31
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	2396      	movs	r3, #150	; 0x96
 80021d0:	f240 123b 	movw	r2, #315	; 0x13b
 80021d4:	216e      	movs	r1, #110	; 0x6e
 80021d6:	2005      	movs	r0, #5
 80021d8:	f7ff f8ea 	bl	80013b0 <ILI9341_Fill_Rect>
	ILI9341_printText(buf, 50, 120, COLOR_WHITE, COLOR_BLUE, 2);
 80021dc:	f107 0010 	add.w	r0, r7, #16
 80021e0:	2302      	movs	r3, #2
 80021e2:	9301      	str	r3, [sp, #4]
 80021e4:	231f      	movs	r3, #31
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021ec:	2278      	movs	r2, #120	; 0x78
 80021ee:	2132      	movs	r1, #50	; 0x32
 80021f0:	f7ff fc04 	bl	80019fc <ILI9341_printText>

	ILI9341_Fill_Rect(30, 160, 70, 200, COLOR_BLUE);
 80021f4:	231f      	movs	r3, #31
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	23c8      	movs	r3, #200	; 0xc8
 80021fa:	2246      	movs	r2, #70	; 0x46
 80021fc:	21a0      	movs	r1, #160	; 0xa0
 80021fe:	201e      	movs	r0, #30
 8002200:	f7ff f8d6 	bl	80013b0 <ILI9341_Fill_Rect>
	ILI9341_printText("UP", 45,  180, COLOR_WHITE, COLOR_BLUE, 1);
 8002204:	2301      	movs	r3, #1
 8002206:	9301      	str	r3, [sp, #4]
 8002208:	231f      	movs	r3, #31
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002210:	22b4      	movs	r2, #180	; 0xb4
 8002212:	212d      	movs	r1, #45	; 0x2d
 8002214:	4824      	ldr	r0, [pc, #144]	; (80022a8 <HMI_init+0x168>)
 8002216:	f7ff fbf1 	bl	80019fc <ILI9341_printText>

	ILI9341_Fill_Rect(80, 160, 120, 200, COLOR_BLUE);
 800221a:	231f      	movs	r3, #31
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	23c8      	movs	r3, #200	; 0xc8
 8002220:	2278      	movs	r2, #120	; 0x78
 8002222:	21a0      	movs	r1, #160	; 0xa0
 8002224:	2050      	movs	r0, #80	; 0x50
 8002226:	f7ff f8c3 	bl	80013b0 <ILI9341_Fill_Rect>
	ILI9341_printText("DOWN", 90,  180, COLOR_WHITE, COLOR_BLUE, 1);
 800222a:	2301      	movs	r3, #1
 800222c:	9301      	str	r3, [sp, #4]
 800222e:	231f      	movs	r3, #31
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002236:	22b4      	movs	r2, #180	; 0xb4
 8002238:	215a      	movs	r1, #90	; 0x5a
 800223a:	481c      	ldr	r0, [pc, #112]	; (80022ac <HMI_init+0x16c>)
 800223c:	f7ff fbde 	bl	80019fc <ILI9341_printText>

	ILI9341_Fill_Rect(180, 190, 300, 230, COLOR_RED);
 8002240:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	23e6      	movs	r3, #230	; 0xe6
 8002248:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800224c:	21be      	movs	r1, #190	; 0xbe
 800224e:	20b4      	movs	r0, #180	; 0xb4
 8002250:	f7ff f8ae 	bl	80013b0 <ILI9341_Fill_Rect>
	ILI9341_printText("IDLE", 230,  205, COLOR_WHITE, COLOR_RED, 2);
 8002254:	2302      	movs	r3, #2
 8002256:	9301      	str	r3, [sp, #4]
 8002258:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002262:	22cd      	movs	r2, #205	; 0xcd
 8002264:	21e6      	movs	r1, #230	; 0xe6
 8002266:	4812      	ldr	r0, [pc, #72]	; (80022b0 <HMI_init+0x170>)
 8002268:	f7ff fbc8 	bl	80019fc <ILI9341_printText>

	ILI9341_printText("REGELUNG", 195,  170, COLOR_BLACK, COLOR_WHITE, 2);
 800226c:	2302      	movs	r3, #2
 800226e:	9301      	str	r3, [sp, #4]
 8002270:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	2300      	movs	r3, #0
 8002278:	22aa      	movs	r2, #170	; 0xaa
 800227a:	21c3      	movs	r1, #195	; 0xc3
 800227c:	480d      	ldr	r0, [pc, #52]	; (80022b4 <HMI_init+0x174>)
 800227e:	f7ff fbbd 	bl	80019fc <ILI9341_printText>

	return hmi;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	461c      	mov	r4, r3
 8002286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800228a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800228e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	3734      	adds	r7, #52	; 0x34
 8002296:	46bd      	mov	sp, r7
 8002298:	bd90      	pop	{r4, r7, pc}
 800229a:	bf00      	nop
 800229c:	0800d668 	.word	0x0800d668
 80022a0:	0800d678 	.word	0x0800d678
 80022a4:	0800d688 	.word	0x0800d688
 80022a8:	0800d694 	.word	0x0800d694
 80022ac:	0800d698 	.word	0x0800d698
 80022b0:	0800d6a0 	.word	0x0800d6a0
 80022b4:	0800d6a8 	.word	0x0800d6a8

080022b8 <HMI_checkBlob>:

int HMI_checkBlob(Hmi *hmi, TS_TOUCH_DATA_Def myTS_Handle,int updateHMI){
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08c      	sub	sp, #48	; 0x30
 80022bc:	af02      	add	r7, sp, #8
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	1d38      	adds	r0, r7, #4
 80022c2:	e880 0006 	stmia.w	r0, {r1, r2}
 80022c6:	603b      	str	r3, [r7, #0]
	if(hmi->HmiInformation.stateMachine->getBlobDetected(hmi->HmiInformation.stateMachine)==1)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	6812      	ldr	r2, [r2, #0]
 80022d2:	4610      	mov	r0, r2
 80022d4:	4798      	blx	r3
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b01      	cmp	r3, #1
 80022da:	f040 80d9 	bne.w	8002490 <HMI_checkBlob+0x1d8>
	{
		if(updateHMI ==1){
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d125      	bne.n	8002330 <HMI_checkBlob+0x78>
		ILI9341_Fill(COLOR_RED);
 80022e4:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80022e8:	f7ff f81e 	bl	8001328 <ILI9341_Fill>
		ILI9341_Fill_Rect(110, 70, 210, 170, COLOR_WHITE);
 80022ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	23aa      	movs	r3, #170	; 0xaa
 80022f4:	22d2      	movs	r2, #210	; 0xd2
 80022f6:	2146      	movs	r1, #70	; 0x46
 80022f8:	206e      	movs	r0, #110	; 0x6e
 80022fa:	f7ff f859 	bl	80013b0 <ILI9341_Fill_Rect>
		ILI9341_printText("BLOB erkannt!", 90, 20, COLOR_WHITE, COLOR_RED, 2);
 80022fe:	2302      	movs	r3, #2
 8002300:	9301      	str	r3, [sp, #4]
 8002302:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800230c:	2214      	movs	r2, #20
 800230e:	215a      	movs	r1, #90	; 0x5a
 8002310:	4862      	ldr	r0, [pc, #392]	; (800249c <HMI_checkBlob+0x1e4>)
 8002312:	f7ff fb73 	bl	80019fc <ILI9341_printText>
		ILI9341_printText("OK", 145, 110, COLOR_BLACK, COLOR_WHITE, 3);
 8002316:	2303      	movs	r3, #3
 8002318:	9301      	str	r3, [sp, #4]
 800231a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	2300      	movs	r3, #0
 8002322:	226e      	movs	r2, #110	; 0x6e
 8002324:	2191      	movs	r1, #145	; 0x91
 8002326:	485e      	ldr	r0, [pc, #376]	; (80024a0 <HMI_checkBlob+0x1e8>)
 8002328:	f7ff fb68 	bl	80019fc <ILI9341_printText>
		updateHMI = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	603b      	str	r3, [r7, #0]
		}
		if(myTS_Handle.isPressed)
 8002330:	793b      	ldrb	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 80ac 	beq.w	8002490 <HMI_checkBlob+0x1d8>
		{
			if(myTS_Handle.X >=110 && myTS_Handle.X<=210 && myTS_Handle.Y>=70 && myTS_Handle.Y<=140)
 8002338:	88fb      	ldrh	r3, [r7, #6]
 800233a:	2b6d      	cmp	r3, #109	; 0x6d
 800233c:	f240 80a8 	bls.w	8002490 <HMI_checkBlob+0x1d8>
 8002340:	88fb      	ldrh	r3, [r7, #6]
 8002342:	2bd2      	cmp	r3, #210	; 0xd2
 8002344:	f200 80a4 	bhi.w	8002490 <HMI_checkBlob+0x1d8>
 8002348:	893b      	ldrh	r3, [r7, #8]
 800234a:	2b45      	cmp	r3, #69	; 0x45
 800234c:	f240 80a0 	bls.w	8002490 <HMI_checkBlob+0x1d8>
 8002350:	893b      	ldrh	r3, [r7, #8]
 8002352:	2b8c      	cmp	r3, #140	; 0x8c
 8002354:	f200 809c 	bhi.w	8002490 <HMI_checkBlob+0x1d8>
						{
						hmi->HmiInformation.stateMachine->setBlobDetected(hmi->HmiInformation.stateMachine,0);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	6812      	ldr	r2, [r2, #0]
 8002362:	2100      	movs	r1, #0
 8002364:	4610      	mov	r0, r2
 8002366:	4798      	blx	r3
						ILI9341_Fill(COLOR_WHITE);
 8002368:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800236c:	f7fe ffdc 	bl	8001328 <ILI9341_Fill>

						ILI9341_Fill_Rect(5, 10, 315, 50, COLOR_ORANGE);
 8002370:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	2332      	movs	r3, #50	; 0x32
 8002378:	f240 123b 	movw	r2, #315	; 0x13b
 800237c:	210a      	movs	r1, #10
 800237e:	2005      	movs	r0, #5
 8002380:	f7ff f816 	bl	80013b0 <ILI9341_Fill_Rect>
						ILI9341_printText("Sensor1: 0 mm", 50, 25, COLOR_WHITE, COLOR_ORANGE, 2);
 8002384:	2302      	movs	r3, #2
 8002386:	9301      	str	r3, [sp, #4]
 8002388:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002392:	2219      	movs	r2, #25
 8002394:	2132      	movs	r1, #50	; 0x32
 8002396:	4843      	ldr	r0, [pc, #268]	; (80024a4 <HMI_checkBlob+0x1ec>)
 8002398:	f7ff fb30 	bl	80019fc <ILI9341_printText>

						ILI9341_Fill_Rect(5, 60, 315, 100, COLOR_ORANGE);
 800239c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	2364      	movs	r3, #100	; 0x64
 80023a4:	f240 123b 	movw	r2, #315	; 0x13b
 80023a8:	213c      	movs	r1, #60	; 0x3c
 80023aa:	2005      	movs	r0, #5
 80023ac:	f7ff f800 	bl	80013b0 <ILI9341_Fill_Rect>
						ILI9341_printText("Sensor2 : 0 mm", 50, 75, COLOR_WHITE, COLOR_ORANGE, 2);
 80023b0:	2302      	movs	r3, #2
 80023b2:	9301      	str	r3, [sp, #4]
 80023b4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023be:	224b      	movs	r2, #75	; 0x4b
 80023c0:	2132      	movs	r1, #50	; 0x32
 80023c2:	4839      	ldr	r0, [pc, #228]	; (80024a8 <HMI_checkBlob+0x1f0>)
 80023c4:	f7ff fb1a 	bl	80019fc <ILI9341_printText>

						char buf[20];
						sprintf(buf, "Ruhemodus");
 80023c8:	f107 0314 	add.w	r3, r7, #20
 80023cc:	4937      	ldr	r1, [pc, #220]	; (80024ac <HMI_checkBlob+0x1f4>)
 80023ce:	4618      	mov	r0, r3
 80023d0:	f007 fb50 	bl	8009a74 <siprintf>
						ILI9341_Fill_Rect(5, 110, 315, 150, COLOR_BLUE);
 80023d4:	231f      	movs	r3, #31
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	2396      	movs	r3, #150	; 0x96
 80023da:	f240 123b 	movw	r2, #315	; 0x13b
 80023de:	216e      	movs	r1, #110	; 0x6e
 80023e0:	2005      	movs	r0, #5
 80023e2:	f7fe ffe5 	bl	80013b0 <ILI9341_Fill_Rect>
						ILI9341_printText(buf, 50, 120, COLOR_WHITE, COLOR_BLUE, 2);
 80023e6:	f107 0014 	add.w	r0, r7, #20
 80023ea:	2302      	movs	r3, #2
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	231f      	movs	r3, #31
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023f6:	2278      	movs	r2, #120	; 0x78
 80023f8:	2132      	movs	r1, #50	; 0x32
 80023fa:	f7ff faff 	bl	80019fc <ILI9341_printText>

						ILI9341_Fill_Rect(30, 160, 70, 200, COLOR_BLUE);
 80023fe:	231f      	movs	r3, #31
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	23c8      	movs	r3, #200	; 0xc8
 8002404:	2246      	movs	r2, #70	; 0x46
 8002406:	21a0      	movs	r1, #160	; 0xa0
 8002408:	201e      	movs	r0, #30
 800240a:	f7fe ffd1 	bl	80013b0 <ILI9341_Fill_Rect>
						ILI9341_printText("UP", 45,  180, COLOR_WHITE, COLOR_BLUE, 1);
 800240e:	2301      	movs	r3, #1
 8002410:	9301      	str	r3, [sp, #4]
 8002412:	231f      	movs	r3, #31
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800241a:	22b4      	movs	r2, #180	; 0xb4
 800241c:	212d      	movs	r1, #45	; 0x2d
 800241e:	4824      	ldr	r0, [pc, #144]	; (80024b0 <HMI_checkBlob+0x1f8>)
 8002420:	f7ff faec 	bl	80019fc <ILI9341_printText>

						ILI9341_Fill_Rect(80, 160, 120, 200, COLOR_BLUE);
 8002424:	231f      	movs	r3, #31
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	23c8      	movs	r3, #200	; 0xc8
 800242a:	2278      	movs	r2, #120	; 0x78
 800242c:	21a0      	movs	r1, #160	; 0xa0
 800242e:	2050      	movs	r0, #80	; 0x50
 8002430:	f7fe ffbe 	bl	80013b0 <ILI9341_Fill_Rect>
						ILI9341_printText("DOWN", 90,  180, COLOR_WHITE, COLOR_BLUE, 1);
 8002434:	2301      	movs	r3, #1
 8002436:	9301      	str	r3, [sp, #4]
 8002438:	231f      	movs	r3, #31
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002440:	22b4      	movs	r2, #180	; 0xb4
 8002442:	215a      	movs	r1, #90	; 0x5a
 8002444:	481b      	ldr	r0, [pc, #108]	; (80024b4 <HMI_checkBlob+0x1fc>)
 8002446:	f7ff fad9 	bl	80019fc <ILI9341_printText>

						ILI9341_printText("REGELUNG", 195,  170, COLOR_BLACK, COLOR_WHITE, 2);
 800244a:	2302      	movs	r3, #2
 800244c:	9301      	str	r3, [sp, #4]
 800244e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	2300      	movs	r3, #0
 8002456:	22aa      	movs	r2, #170	; 0xaa
 8002458:	21c3      	movs	r1, #195	; 0xc3
 800245a:	4817      	ldr	r0, [pc, #92]	; (80024b8 <HMI_checkBlob+0x200>)
 800245c:	f7ff face 	bl	80019fc <ILI9341_printText>


						ILI9341_Fill_Rect(180, 190, 300, 230, COLOR_RED);
 8002460:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	23e6      	movs	r3, #230	; 0xe6
 8002468:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800246c:	21be      	movs	r1, #190	; 0xbe
 800246e:	20b4      	movs	r0, #180	; 0xb4
 8002470:	f7fe ff9e 	bl	80013b0 <ILI9341_Fill_Rect>
						ILI9341_printText("IDLE", 230,  205, COLOR_WHITE, COLOR_RED, 2);
 8002474:	2302      	movs	r3, #2
 8002476:	9301      	str	r3, [sp, #4]
 8002478:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002482:	22cd      	movs	r2, #205	; 0xcd
 8002484:	21e6      	movs	r1, #230	; 0xe6
 8002486:	480d      	ldr	r0, [pc, #52]	; (80024bc <HMI_checkBlob+0x204>)
 8002488:	f7ff fab8 	bl	80019fc <ILI9341_printText>
						updateHMI = 1;
 800248c:	2301      	movs	r3, #1
 800248e:	603b      	str	r3, [r7, #0]
						}
		}

	}
	return updateHMI;
 8002490:	683b      	ldr	r3, [r7, #0]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3728      	adds	r7, #40	; 0x28
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	0800d6b4 	.word	0x0800d6b4
 80024a0:	0800d6c4 	.word	0x0800d6c4
 80024a4:	0800d6c8 	.word	0x0800d6c8
 80024a8:	0800d678 	.word	0x0800d678
 80024ac:	0800d688 	.word	0x0800d688
 80024b0:	0800d694 	.word	0x0800d694
 80024b4:	0800d698 	.word	0x0800d698
 80024b8:	0800d6a8 	.word	0x0800d6a8
 80024bc:	0800d6a0 	.word	0x0800d6a0

080024c0 <HMI_update_soll>:

void HMI_update_soll(Hmi *hmi,Motor *motor, PIDController *pidController, int operation){
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08c      	sub	sp, #48	; 0x30
 80024c4:	af02      	add	r7, sp, #8
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
 80024cc:	603b      	str	r3, [r7, #0]
	float Soll = 0.0;
 80024ce:	f04f 0300 	mov.w	r3, #0
 80024d2:	627b      	str	r3, [r7, #36]	; 0x24
	char buf[20];
	if(hmi->HmiInformation.stateMachine->getState(hmi->HmiInformation.stateMachine) == STATE_IDLE){
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	6812      	ldr	r2, [r2, #0]
 80024de:	4610      	mov	r0, r2
 80024e0:	4798      	blx	r3
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d106      	bne.n	80024f6 <HMI_update_soll+0x36>
		sprintf(buf, "Ruhemodus");
 80024e8:	f107 0310 	add.w	r3, r7, #16
 80024ec:	495c      	ldr	r1, [pc, #368]	; (8002660 <HMI_update_soll+0x1a0>)
 80024ee:	4618      	mov	r0, r3
 80024f0:	f007 fac0 	bl	8009a74 <siprintf>
 80024f4:	e096      	b.n	8002624 <HMI_update_soll+0x164>
	}
	else if(hmi->HmiInformation.stateMachine->getState(hmi->HmiInformation.stateMachine) == STATE_AUTOMATIC_MODE){
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	4610      	mov	r0, r2
 8002502:	4798      	blx	r3
 8002504:	4603      	mov	r3, r0
 8002506:	2b02      	cmp	r3, #2
 8002508:	d13d      	bne.n	8002586 <HMI_update_soll+0xc6>
		Soll = pidController->get_setPoint(pidController);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	4798      	blx	r3
 8002512:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
		if(operation == 1){
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d110      	bne.n	800253e <HMI_update_soll+0x7e>
			Soll = Soll + 0.05;
 800251c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800251e:	f7fe f81b 	bl	8000558 <__aeabi_f2d>
 8002522:	a34d      	add	r3, pc, #308	; (adr r3, 8002658 <HMI_update_soll+0x198>)
 8002524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002528:	f7fd feb8 	bl	800029c <__adddf3>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4610      	mov	r0, r2
 8002532:	4619      	mov	r1, r3
 8002534:	f7fe fb60 	bl	8000bf8 <__aeabi_d2f>
 8002538:	4603      	mov	r3, r0
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
 800253c:	e012      	b.n	8002564 <HMI_update_soll+0xa4>
		}else if(operation == 2)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d10f      	bne.n	8002564 <HMI_update_soll+0xa4>
		{
			Soll = Soll - 0.05;
 8002544:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002546:	f7fe f807 	bl	8000558 <__aeabi_f2d>
 800254a:	a343      	add	r3, pc, #268	; (adr r3, 8002658 <HMI_update_soll+0x198>)
 800254c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002550:	f7fd fea2 	bl	8000298 <__aeabi_dsub>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	f7fe fb4c 	bl	8000bf8 <__aeabi_d2f>
 8002560:	4603      	mov	r3, r0
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
		}
		pidController->set_setPoint(pidController,Soll);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002568:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	4798      	blx	r3
		sprintf(buf, "Soll: %.2f mm", Soll);
 8002570:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002572:	f7fd fff1 	bl	8000558 <__aeabi_f2d>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	f107 0010 	add.w	r0, r7, #16
 800257e:	4939      	ldr	r1, [pc, #228]	; (8002664 <HMI_update_soll+0x1a4>)
 8002580:	f007 fa78 	bl	8009a74 <siprintf>
 8002584:	e04e      	b.n	8002624 <HMI_update_soll+0x164>
	}else if(hmi->HmiInformation.stateMachine->getState(hmi->HmiInformation.stateMachine) == STATE_MANUAL_CONTROL){
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	4610      	mov	r0, r2
 8002592:	4798      	blx	r3
 8002594:	4603      	mov	r3, r0
 8002596:	2b01      	cmp	r3, #1
 8002598:	d144      	bne.n	8002624 <HMI_update_soll+0x164>
		Soll = motor->getSpeed(motor);
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	68b8      	ldr	r0, [r7, #8]
 80025a0:	4798      	blx	r3
 80025a2:	ee07 0a90 	vmov	s15, r0
 80025a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025aa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		if(operation == 1){
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d108      	bne.n	80025c6 <HMI_update_soll+0x106>
			Soll = Soll + 10;
 80025b4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80025b8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80025bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025c0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80025c4:	e00a      	b.n	80025dc <HMI_update_soll+0x11c>
		}else if(operation == 2)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d107      	bne.n	80025dc <HMI_update_soll+0x11c>
		{
			Soll = Soll - 10;
 80025cc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80025d0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80025d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80025d8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		}
		if(Soll > 100 || Soll < 0){
 80025dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80025e0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002668 <HMI_update_soll+0x1a8>
 80025e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ec:	dc30      	bgt.n	8002650 <HMI_update_soll+0x190>
 80025ee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80025f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fa:	d429      	bmi.n	8002650 <HMI_update_soll+0x190>
			return;
		}
		motor->setSpeed(motor,Soll);
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002604:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002608:	ee17 1a90 	vmov	r1, s15
 800260c:	68b8      	ldr	r0, [r7, #8]
 800260e:	4798      	blx	r3
		sprintf(buf, "Drehzahl: %.2f U/min", Soll);
 8002610:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002612:	f7fd ffa1 	bl	8000558 <__aeabi_f2d>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	f107 0010 	add.w	r0, r7, #16
 800261e:	4913      	ldr	r1, [pc, #76]	; (800266c <HMI_update_soll+0x1ac>)
 8002620:	f007 fa28 	bl	8009a74 <siprintf>
	}
	ILI9341_Fill_Rect(5, 110, 315, 150, COLOR_BLUE);
 8002624:	231f      	movs	r3, #31
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	2396      	movs	r3, #150	; 0x96
 800262a:	f240 123b 	movw	r2, #315	; 0x13b
 800262e:	216e      	movs	r1, #110	; 0x6e
 8002630:	2005      	movs	r0, #5
 8002632:	f7fe febd 	bl	80013b0 <ILI9341_Fill_Rect>
	ILI9341_printText(buf, 50, 120, COLOR_WHITE, COLOR_BLUE, 2);
 8002636:	f107 0010 	add.w	r0, r7, #16
 800263a:	2302      	movs	r3, #2
 800263c:	9301      	str	r3, [sp, #4]
 800263e:	231f      	movs	r3, #31
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002646:	2278      	movs	r2, #120	; 0x78
 8002648:	2132      	movs	r1, #50	; 0x32
 800264a:	f7ff f9d7 	bl	80019fc <ILI9341_printText>
 800264e:	e000      	b.n	8002652 <HMI_update_soll+0x192>
			return;
 8002650:	bf00      	nop
}
 8002652:	3728      	adds	r7, #40	; 0x28
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	9999999a 	.word	0x9999999a
 800265c:	3fa99999 	.word	0x3fa99999
 8002660:	0800d688 	.word	0x0800d688
 8002664:	0800d6d8 	.word	0x0800d6d8
 8002668:	42c80000 	.word	0x42c80000
 800266c:	0800d6e8 	.word	0x0800d6e8

08002670 <HMI_getTouch>:

void HMI_getTouch(Hmi *hmi, TS_TOUCH_DATA_Def myTS_Handle,Motor *motor, PIDController *pidController)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af02      	add	r7, sp, #8
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	1d38      	adds	r0, r7, #4
 800267a:	e880 0006 	stmia.w	r0, {r1, r2}
 800267e:	603b      	str	r3, [r7, #0]
	if(myTS_Handle.isPressed)
 8002680:	793b      	ldrb	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 80a7 	beq.w	80027d6 <HMI_getTouch+0x166>
	{
		if(myTS_Handle.X >=30 && myTS_Handle.X<=70 && myTS_Handle.Y>=160 && myTS_Handle.Y<=200)
 8002688:	88fb      	ldrh	r3, [r7, #6]
 800268a:	2b1d      	cmp	r3, #29
 800268c:	d90e      	bls.n	80026ac <HMI_getTouch+0x3c>
 800268e:	88fb      	ldrh	r3, [r7, #6]
 8002690:	2b46      	cmp	r3, #70	; 0x46
 8002692:	d80b      	bhi.n	80026ac <HMI_getTouch+0x3c>
 8002694:	893b      	ldrh	r3, [r7, #8]
 8002696:	2b9f      	cmp	r3, #159	; 0x9f
 8002698:	d908      	bls.n	80026ac <HMI_getTouch+0x3c>
 800269a:	893b      	ldrh	r3, [r7, #8]
 800269c:	2bc8      	cmp	r3, #200	; 0xc8
 800269e:	d805      	bhi.n	80026ac <HMI_getTouch+0x3c>
		{
			HMI_update_soll(hmi,motor, pidController, 1);
 80026a0:	2301      	movs	r3, #1
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	6839      	ldr	r1, [r7, #0]
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f7ff ff0a 	bl	80024c0 <HMI_update_soll>
		}

		if(myTS_Handle.X >=80 && myTS_Handle.X<=120 && myTS_Handle.Y>=160 && myTS_Handle.Y<=200)
 80026ac:	88fb      	ldrh	r3, [r7, #6]
 80026ae:	2b4f      	cmp	r3, #79	; 0x4f
 80026b0:	d90e      	bls.n	80026d0 <HMI_getTouch+0x60>
 80026b2:	88fb      	ldrh	r3, [r7, #6]
 80026b4:	2b78      	cmp	r3, #120	; 0x78
 80026b6:	d80b      	bhi.n	80026d0 <HMI_getTouch+0x60>
 80026b8:	893b      	ldrh	r3, [r7, #8]
 80026ba:	2b9f      	cmp	r3, #159	; 0x9f
 80026bc:	d908      	bls.n	80026d0 <HMI_getTouch+0x60>
 80026be:	893b      	ldrh	r3, [r7, #8]
 80026c0:	2bc8      	cmp	r3, #200	; 0xc8
 80026c2:	d805      	bhi.n	80026d0 <HMI_getTouch+0x60>
		{
			HMI_update_soll(hmi,motor, pidController, 0);
 80026c4:	2300      	movs	r3, #0
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	6839      	ldr	r1, [r7, #0]
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f7ff fef8 	bl	80024c0 <HMI_update_soll>
		}

		if(myTS_Handle.X >=180 && myTS_Handle.X<=300 && myTS_Handle.Y>=190 && myTS_Handle.Y<=230)
 80026d0:	88fb      	ldrh	r3, [r7, #6]
 80026d2:	2bb3      	cmp	r3, #179	; 0xb3
 80026d4:	d97f      	bls.n	80027d6 <HMI_getTouch+0x166>
 80026d6:	88fb      	ldrh	r3, [r7, #6]
 80026d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80026dc:	d87b      	bhi.n	80027d6 <HMI_getTouch+0x166>
 80026de:	893b      	ldrh	r3, [r7, #8]
 80026e0:	2bbd      	cmp	r3, #189	; 0xbd
 80026e2:	d978      	bls.n	80027d6 <HMI_getTouch+0x166>
 80026e4:	893b      	ldrh	r3, [r7, #8]
 80026e6:	2be6      	cmp	r3, #230	; 0xe6
 80026e8:	d875      	bhi.n	80027d6 <HMI_getTouch+0x166>
		{
			if(hmi->HmiInformation.stateMachine->getState(hmi->HmiInformation.stateMachine) == STATE_IDLE){
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	4610      	mov	r0, r2
 80026f6:	4798      	blx	r3
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d11e      	bne.n	800273c <HMI_getTouch+0xcc>
				hmi->HmiInformation.stateMachine->changeState(hmi->HmiInformation.stateMachine, STATE_MANUAL_CONTROL);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	6812      	ldr	r2, [r2, #0]
 8002708:	2101      	movs	r1, #1
 800270a:	4610      	mov	r0, r2
 800270c:	4798      	blx	r3
  				ILI9341_Fill_Rect(180, 190, 300, 230, COLOR_ORANGE);
 800270e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	23e6      	movs	r3, #230	; 0xe6
 8002716:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800271a:	21be      	movs	r1, #190	; 0xbe
 800271c:	20b4      	movs	r0, #180	; 0xb4
 800271e:	f7fe fe47 	bl	80013b0 <ILI9341_Fill_Rect>
  				ILI9341_printText("Manual", 230,  205, COLOR_WHITE, COLOR_ORANGE, 2);
 8002722:	2302      	movs	r3, #2
 8002724:	9301      	str	r3, [sp, #4]
 8002726:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002730:	22cd      	movs	r2, #205	; 0xcd
 8002732:	21e6      	movs	r1, #230	; 0xe6
 8002734:	482a      	ldr	r0, [pc, #168]	; (80027e0 <HMI_getTouch+0x170>)
 8002736:	f7ff f961 	bl	80019fc <ILI9341_printText>
 800273a:	e046      	b.n	80027ca <HMI_getTouch+0x15a>
			}
			else if(hmi->HmiInformation.stateMachine->getState(hmi->HmiInformation.stateMachine) == STATE_MANUAL_CONTROL){
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	4610      	mov	r0, r2
 8002748:	4798      	blx	r3
 800274a:	4603      	mov	r3, r0
 800274c:	2b01      	cmp	r3, #1
 800274e:	d11e      	bne.n	800278e <HMI_getTouch+0x11e>
				hmi->HmiInformation.stateMachine->changeState(hmi->HmiInformation.stateMachine, STATE_AUTOMATIC_MODE);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	2102      	movs	r1, #2
 800275c:	4610      	mov	r0, r2
 800275e:	4798      	blx	r3
  				ILI9341_Fill_Rect(180, 190, 300, 230, COLOR_GREEN);
 8002760:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	23e6      	movs	r3, #230	; 0xe6
 8002768:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800276c:	21be      	movs	r1, #190	; 0xbe
 800276e:	20b4      	movs	r0, #180	; 0xb4
 8002770:	f7fe fe1e 	bl	80013b0 <ILI9341_Fill_Rect>
  				ILI9341_printText("Auto", 230,  205, COLOR_WHITE, COLOR_GREEN, 2);
 8002774:	2302      	movs	r3, #2
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002782:	22cd      	movs	r2, #205	; 0xcd
 8002784:	21e6      	movs	r1, #230	; 0xe6
 8002786:	4817      	ldr	r0, [pc, #92]	; (80027e4 <HMI_getTouch+0x174>)
 8002788:	f7ff f938 	bl	80019fc <ILI9341_printText>
 800278c:	e01d      	b.n	80027ca <HMI_getTouch+0x15a>
			}
			else{
				hmi->HmiInformation.stateMachine->changeState(hmi->HmiInformation.stateMachine, STATE_IDLE);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	2100      	movs	r1, #0
 800279a:	4610      	mov	r0, r2
 800279c:	4798      	blx	r3
  				ILI9341_Fill_Rect(180, 190, 300, 230, COLOR_RED);
 800279e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	23e6      	movs	r3, #230	; 0xe6
 80027a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027aa:	21be      	movs	r1, #190	; 0xbe
 80027ac:	20b4      	movs	r0, #180	; 0xb4
 80027ae:	f7fe fdff 	bl	80013b0 <ILI9341_Fill_Rect>
  				ILI9341_printText("Idle", 230,  205, COLOR_WHITE, COLOR_RED, 2);
 80027b2:	2302      	movs	r3, #2
 80027b4:	9301      	str	r3, [sp, #4]
 80027b6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027c0:	22cd      	movs	r2, #205	; 0xcd
 80027c2:	21e6      	movs	r1, #230	; 0xe6
 80027c4:	4808      	ldr	r0, [pc, #32]	; (80027e8 <HMI_getTouch+0x178>)
 80027c6:	f7ff f919 	bl	80019fc <ILI9341_printText>
			}
			HMI_update_soll(hmi,motor, pidController, 0);
 80027ca:	2300      	movs	r3, #0
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	6839      	ldr	r1, [r7, #0]
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f7ff fe75 	bl	80024c0 <HMI_update_soll>
		}
	}


}
 80027d6:	bf00      	nop
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	0800d700 	.word	0x0800d700
 80027e4:	0800d708 	.word	0x0800d708
 80027e8:	0800d710 	.word	0x0800d710

080027ec <HMI_updateDisplaySensor>:

void HMI_updateDisplaySensor(Hmi *hmi, float extruder, float back)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b090      	sub	sp, #64	; 0x40
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80027f8:	edc7 0a01 	vstr	s1, [r7, #4]
	if(hmi->HmiInformation.stateMachine->getBlobDetected(hmi->HmiInformation.stateMachine) == 1){
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	6812      	ldr	r2, [r2, #0]
 8002806:	4610      	mov	r0, r2
 8002808:	4798      	blx	r3
 800280a:	4603      	mov	r3, r0
 800280c:	2b01      	cmp	r3, #1
 800280e:	d062      	beq.n	80028d6 <HMI_updateDisplaySensor+0xea>
		return;
	}
	if(extruder >= 0 && extruder <5){
 8002810:	edd7 7a02 	vldr	s15, [r7, #8]
 8002814:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800281c:	db29      	blt.n	8002872 <HMI_updateDisplaySensor+0x86>
 800281e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002822:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002826:	eef4 7ac7 	vcmpe.f32	s15, s14
 800282a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800282e:	d520      	bpl.n	8002872 <HMI_updateDisplaySensor+0x86>
		//float value1 = sensorExtruder->getDiameter(sensorExtruder);
		char buf1[20];
		sprintf(buf1, "Sensor Ext: %.2f mm", extruder);
 8002830:	68b8      	ldr	r0, [r7, #8]
 8002832:	f7fd fe91 	bl	8000558 <__aeabi_f2d>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800283e:	4928      	ldr	r1, [pc, #160]	; (80028e0 <HMI_updateDisplaySensor+0xf4>)
 8002840:	f007 f918 	bl	8009a74 <siprintf>


		ILI9341_Fill_Rect(5, 10, 315, 50, COLOR_ORANGE);
 8002844:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	2332      	movs	r3, #50	; 0x32
 800284c:	f240 123b 	movw	r2, #315	; 0x13b
 8002850:	210a      	movs	r1, #10
 8002852:	2005      	movs	r0, #5
 8002854:	f7fe fdac 	bl	80013b0 <ILI9341_Fill_Rect>
		ILI9341_printText(buf1, 50, 25, COLOR_WHITE, COLOR_ORANGE, 2);
 8002858:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800285c:	2302      	movs	r3, #2
 800285e:	9301      	str	r3, [sp, #4]
 8002860:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800286a:	2219      	movs	r2, #25
 800286c:	2132      	movs	r1, #50	; 0x32
 800286e:	f7ff f8c5 	bl	80019fc <ILI9341_printText>
	}
	if (back >= 0 && back <5){
 8002872:	edd7 7a01 	vldr	s15, [r7, #4]
 8002876:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800287a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800287e:	db2b      	blt.n	80028d8 <HMI_updateDisplaySensor+0xec>
 8002880:	edd7 7a01 	vldr	s15, [r7, #4]
 8002884:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002888:	eef4 7ac7 	vcmpe.f32	s15, s14
 800288c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002890:	d522      	bpl.n	80028d8 <HMI_updateDisplaySensor+0xec>
		//float value2 = sensorBack->getDiameter(sensorBack);
		char buf2[20];
		sprintf(buf2, "Sensor B: %.2f mm", back);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7fd fe60 	bl	8000558 <__aeabi_f2d>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	f107 0010 	add.w	r0, r7, #16
 80028a0:	4910      	ldr	r1, [pc, #64]	; (80028e4 <HMI_updateDisplaySensor+0xf8>)
 80028a2:	f007 f8e7 	bl	8009a74 <siprintf>

		ILI9341_Fill_Rect(5, 60, 315, 100, COLOR_ORANGE);
 80028a6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	2364      	movs	r3, #100	; 0x64
 80028ae:	f240 123b 	movw	r2, #315	; 0x13b
 80028b2:	213c      	movs	r1, #60	; 0x3c
 80028b4:	2005      	movs	r0, #5
 80028b6:	f7fe fd7b 	bl	80013b0 <ILI9341_Fill_Rect>
		ILI9341_printText(buf2, 50, 75, COLOR_WHITE, COLOR_ORANGE, 2);
 80028ba:	f107 0010 	add.w	r0, r7, #16
 80028be:	2302      	movs	r3, #2
 80028c0:	9301      	str	r3, [sp, #4]
 80028c2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028cc:	224b      	movs	r2, #75	; 0x4b
 80028ce:	2132      	movs	r1, #50	; 0x32
 80028d0:	f7ff f894 	bl	80019fc <ILI9341_printText>
 80028d4:	e000      	b.n	80028d8 <HMI_updateDisplaySensor+0xec>
		return;
 80028d6:	bf00      	nop
	}

}
 80028d8:	3738      	adds	r7, #56	; 0x38
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	0800d718 	.word	0x0800d718
 80028e4:	0800d72c 	.word	0x0800d72c

080028e8 <HMI_signallight_check_blob>:
// TODO: ADD IMPLEMENTATION FOR SIGNALLIGHT

// HMI_signallight_check_blob.c
#include "HMI/signallight_control.h"

void HMI_signallight_check_blob(StateMachine* stateMachine, uint16_t pin) {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	807b      	strh	r3, [r7, #2]
	if (stateMachine->getBlobDetected(stateMachine) == 1) {
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	4798      	blx	r3
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d106      	bne.n	8002910 <HMI_signallight_check_blob+0x28>
        HAL_GPIO_WritePin(GPIOC, pin, GPIO_PIN_SET);
 8002902:	887b      	ldrh	r3, [r7, #2]
 8002904:	2201      	movs	r2, #1
 8002906:	4619      	mov	r1, r3
 8002908:	4806      	ldr	r0, [pc, #24]	; (8002924 <HMI_signallight_check_blob+0x3c>)
 800290a:	f002 feb3 	bl	8005674 <HAL_GPIO_WritePin>
    }
	else {
        HAL_GPIO_WritePin(GPIOC, pin, GPIO_PIN_RESET);
    }
}
 800290e:	e005      	b.n	800291c <HMI_signallight_check_blob+0x34>
        HAL_GPIO_WritePin(GPIOC, pin, GPIO_PIN_RESET);
 8002910:	887b      	ldrh	r3, [r7, #2]
 8002912:	2200      	movs	r2, #0
 8002914:	4619      	mov	r1, r3
 8002916:	4803      	ldr	r0, [pc, #12]	; (8002924 <HMI_signallight_check_blob+0x3c>)
 8002918:	f002 feac 	bl	8005674 <HAL_GPIO_WritePin>
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40020800 	.word	0x40020800

08002928 <createPcReceiveHandler>:
PcReceiveHandler createPcReceiveHandler(StateMachine*  stateMachine,
										PIDController* controller,
		   								Motor* motor,
		   								PcSendHandler* sender,
		   								UART_HandleTypeDef* uart3)
{
 8002928:	b5b0      	push	{r4, r5, r7, lr}
 800292a:	b08a      	sub	sp, #40	; 0x28
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
 8002934:	603b      	str	r3, [r7, #0]
    PcReceiveHandler handler;
    handler.stateMachine	= stateMachine;
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	613b      	str	r3, [r7, #16]
    handler.pidController 	= controller;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	617b      	str	r3, [r7, #20]
    handler.motor 			= motor;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	61bb      	str	r3, [r7, #24]
    handler.sender 			= sender;
 8002942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002944:	61fb      	str	r3, [r7, #28]
    handler.uart3 			= uart3;
 8002946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002948:	623b      	str	r3, [r7, #32]

    // Zuweisung der globalen Variable
    gPcHandler = handler;
 800294a:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <createPcReceiveHandler+0x5c>)
 800294c:	461d      	mov	r5, r3
 800294e:	f107 0410 	add.w	r4, r7, #16
 8002952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002956:	e894 0003 	ldmia.w	r4, {r0, r1}
 800295a:	e885 0003 	stmia.w	r5, {r0, r1}

    handler.uartProcessor = createUartProcessor(pc_interface_dictionary);
 800295e:	480a      	ldr	r0, [pc, #40]	; (8002988 <createPcReceiveHandler+0x60>)
 8002960:	f000 fe9e 	bl	80036a0 <createUartProcessor>
 8002964:	6278      	str	r0, [r7, #36]	; 0x24
    return handler;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	461d      	mov	r5, r3
 800296a:	f107 0410 	add.w	r4, r7, #16
 800296e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002972:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002976:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	3728      	adds	r7, #40	; 0x28
 800297e:	46bd      	mov	sp, r7
 8002980:	bdb0      	pop	{r4, r5, r7, pc}
 8002982:	bf00      	nop
 8002984:	20000350 	.word	0x20000350
 8002988:	20000004 	.word	0x20000004

0800298c <handleSetSpeed>:

// Handle-Methods
void handleSetSpeed(uint8_t uartNr, const char* value){
 800298c:	b5b0      	push	{r4, r5, r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	6039      	str	r1, [r7, #0]
 8002996:	71fb      	strb	r3, [r7, #7]
	if(gPcHandler.stateMachine->getState(gPcHandler.stateMachine) == STATE_MANUAL_CONTROL){
 8002998:	4b0f      	ldr	r3, [pc, #60]	; (80029d8 <handleSetSpeed+0x4c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	4a0e      	ldr	r2, [pc, #56]	; (80029d8 <handleSetSpeed+0x4c>)
 80029a0:	6812      	ldr	r2, [r2, #0]
 80029a2:	4610      	mov	r0, r2
 80029a4:	4798      	blx	r3
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d110      	bne.n	80029ce <handleSetSpeed+0x42>
		gPcHandler.motor->setSpeed(gPcHandler.motor,extractFloatValue(3,value));
 80029ac:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <handleSetSpeed+0x4c>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	68dc      	ldr	r4, [r3, #12]
 80029b2:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <handleSetSpeed+0x4c>)
 80029b4:	689d      	ldr	r5, [r3, #8]
 80029b6:	6839      	ldr	r1, [r7, #0]
 80029b8:	2003      	movs	r0, #3
 80029ba:	f000 f933 	bl	8002c24 <extractFloatValue>
 80029be:	eef0 7a40 	vmov.f32	s15, s0
 80029c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029c6:	ee17 1a90 	vmov	r1, s15
 80029ca:	4628      	mov	r0, r5
 80029cc:	47a0      	blx	r4
	}

}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bdb0      	pop	{r4, r5, r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000350 	.word	0x20000350

080029dc <handleSetState>:


void handleSetState(uint8_t uartNr, const char* value){
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	6039      	str	r1, [r7, #0]
 80029e6:	71fb      	strb	r3, [r7, #7]
	int state = extractIntValue(3, value);
 80029e8:	6839      	ldr	r1, [r7, #0]
 80029ea:	2003      	movs	r0, #3
 80029ec:	f000 f9a6 	bl	8002d3c <extractIntValue>
 80029f0:	60b8      	str	r0, [r7, #8]
	State s = STATE_IDLE;
 80029f2:	2300      	movs	r3, #0
 80029f4:	73fb      	strb	r3, [r7, #15]
	if(state == 1){
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d102      	bne.n	8002a02 <handleSetState+0x26>
		s = STATE_MANUAL_CONTROL;
 80029fc:	2301      	movs	r3, #1
 80029fe:	73fb      	strb	r3, [r7, #15]
 8002a00:	e004      	b.n	8002a0c <handleSetState+0x30>
	}else if(state ==2){
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d101      	bne.n	8002a0c <handleSetState+0x30>
		s = STATE_AUTOMATIC_MODE;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	73fb      	strb	r3, [r7, #15]
	}

	gPcHandler.stateMachine->changeState(gPcHandler.stateMachine,s);
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <handleSetState+0x48>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	4a04      	ldr	r2, [pc, #16]	; (8002a24 <handleSetState+0x48>)
 8002a14:	6812      	ldr	r2, [r2, #0]
 8002a16:	7bf9      	ldrb	r1, [r7, #15]
 8002a18:	4610      	mov	r0, r2
 8002a1a:	4798      	blx	r3
}
 8002a1c:	bf00      	nop
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20000350 	.word	0x20000350

08002a28 <handleSetCP>:

void handleSetCP(uint8_t uartNr, const char* value){
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	6039      	str	r1, [r7, #0]
 8002a32:	71fb      	strb	r3, [r7, #7]
	float kp = extractFloatValue(3, value);
 8002a34:	6839      	ldr	r1, [r7, #0]
 8002a36:	2003      	movs	r0, #3
 8002a38:	f000 f8f4 	bl	8002c24 <extractFloatValue>
 8002a3c:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.pidController->set_kp(gPcHandler.pidController,kp);
 8002a40:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <handleSetCP+0x34>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	4a05      	ldr	r2, [pc, #20]	; (8002a5c <handleSetCP+0x34>)
 8002a48:	6852      	ldr	r2, [r2, #4]
 8002a4a:	ed97 0a03 	vldr	s0, [r7, #12]
 8002a4e:	4610      	mov	r0, r2
 8002a50:	4798      	blx	r3
}
 8002a52:	bf00      	nop
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000350 	.word	0x20000350

08002a60 <handleSetCI>:
void handleSetCI(uint8_t uartNr, const char* value){
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	6039      	str	r1, [r7, #0]
 8002a6a:	71fb      	strb	r3, [r7, #7]
	float ki = extractFloatValue(3, value);
 8002a6c:	6839      	ldr	r1, [r7, #0]
 8002a6e:	2003      	movs	r0, #3
 8002a70:	f000 f8d8 	bl	8002c24 <extractFloatValue>
 8002a74:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.pidController->set_ki(gPcHandler.pidController,ki);
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <handleSetCI+0x34>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7e:	4a05      	ldr	r2, [pc, #20]	; (8002a94 <handleSetCI+0x34>)
 8002a80:	6852      	ldr	r2, [r2, #4]
 8002a82:	ed97 0a03 	vldr	s0, [r7, #12]
 8002a86:	4610      	mov	r0, r2
 8002a88:	4798      	blx	r3
}
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000350 	.word	0x20000350

08002a98 <handleSetCD>:
void handleSetCD(uint8_t uartNr, const char* value){
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	6039      	str	r1, [r7, #0]
 8002aa2:	71fb      	strb	r3, [r7, #7]
	float kd = extractFloatValue(3, value);
 8002aa4:	6839      	ldr	r1, [r7, #0]
 8002aa6:	2003      	movs	r0, #3
 8002aa8:	f000 f8bc 	bl	8002c24 <extractFloatValue>
 8002aac:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.pidController->set_kd(gPcHandler.pidController,kd);
 8002ab0:	4b06      	ldr	r3, [pc, #24]	; (8002acc <handleSetCD+0x34>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	4a05      	ldr	r2, [pc, #20]	; (8002acc <handleSetCD+0x34>)
 8002ab8:	6852      	ldr	r2, [r2, #4]
 8002aba:	ed97 0a03 	vldr	s0, [r7, #12]
 8002abe:	4610      	mov	r0, r2
 8002ac0:	4798      	blx	r3
}
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000350 	.word	0x20000350

08002ad0 <handleGetState>:

void handleGetState(uint8_t uartNr, const char* value){
 8002ad0:	b5b0      	push	{r4, r5, r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	6039      	str	r1, [r7, #0]
 8002ada:	71fb      	strb	r3, [r7, #7]
	gPcHandler.sender->interface.sendState(gPcHandler.uart3,gPcHandler.stateMachine->getState(gPcHandler.stateMachine));
 8002adc:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <handleGetState+0x34>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	689c      	ldr	r4, [r3, #8]
 8002ae2:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <handleGetState+0x34>)
 8002ae4:	691d      	ldr	r5, [r3, #16]
 8002ae6:	4b07      	ldr	r3, [pc, #28]	; (8002b04 <handleGetState+0x34>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	4a05      	ldr	r2, [pc, #20]	; (8002b04 <handleGetState+0x34>)
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	4610      	mov	r0, r2
 8002af2:	4798      	blx	r3
 8002af4:	4603      	mov	r3, r0
 8002af6:	4619      	mov	r1, r3
 8002af8:	4628      	mov	r0, r5
 8002afa:	47a0      	blx	r4
}
 8002afc:	bf00      	nop
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bdb0      	pop	{r4, r5, r7, pc}
 8002b04:	20000350 	.word	0x20000350

08002b08 <handleGetSpeed>:
void handleGetSpeed(uint8_t uartNr, const char* value){
 8002b08:	b5b0      	push	{r4, r5, r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	6039      	str	r1, [r7, #0]
 8002b12:	71fb      	strb	r3, [r7, #7]
	gPcHandler.sender->interface.sendSpeed(gPcHandler.uart3,gPcHandler.motor->getSpeed(gPcHandler.motor));
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <handleGetSpeed+0x3c>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	68dc      	ldr	r4, [r3, #12]
 8002b1a:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <handleGetSpeed+0x3c>)
 8002b1c:	691d      	ldr	r5, [r3, #16]
 8002b1e:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <handleGetSpeed+0x3c>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <handleGetSpeed+0x3c>)
 8002b26:	6892      	ldr	r2, [r2, #8]
 8002b28:	4610      	mov	r0, r2
 8002b2a:	4798      	blx	r3
 8002b2c:	ee07 0a90 	vmov	s15, r0
 8002b30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b34:	eeb0 0a67 	vmov.f32	s0, s15
 8002b38:	4628      	mov	r0, r5
 8002b3a:	47a0      	blx	r4
}
 8002b3c:	bf00      	nop
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bdb0      	pop	{r4, r5, r7, pc}
 8002b44:	20000350 	.word	0x20000350

08002b48 <handleGetCP>:
void handleGetCP(uint8_t uartNr, const char* value){
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	6039      	str	r1, [r7, #0]
 8002b52:	71fb      	strb	r3, [r7, #7]
	float kp = gPcHandler.pidController->get_kp(gPcHandler.pidController);
 8002b54:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <handleGetCP+0x38>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	4a09      	ldr	r2, [pc, #36]	; (8002b80 <handleGetCP+0x38>)
 8002b5c:	6852      	ldr	r2, [r2, #4]
 8002b5e:	4610      	mov	r0, r2
 8002b60:	4798      	blx	r3
 8002b62:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.sender->interface.sendCPvalue(gPcHandler.uart3,kp);
 8002b66:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <handleGetCP+0x38>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	4a04      	ldr	r2, [pc, #16]	; (8002b80 <handleGetCP+0x38>)
 8002b6e:	6912      	ldr	r2, [r2, #16]
 8002b70:	ed97 0a03 	vldr	s0, [r7, #12]
 8002b74:	4610      	mov	r0, r2
 8002b76:	4798      	blx	r3
}
 8002b78:	bf00      	nop
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20000350 	.word	0x20000350

08002b84 <handleGetCI>:
void handleGetCI(uint8_t uartNr, const char* value){
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	6039      	str	r1, [r7, #0]
 8002b8e:	71fb      	strb	r3, [r7, #7]
	float ki = gPcHandler.pidController->get_ki(gPcHandler.pidController);
 8002b90:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <handleGetCI+0x38>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	4a09      	ldr	r2, [pc, #36]	; (8002bbc <handleGetCI+0x38>)
 8002b98:	6852      	ldr	r2, [r2, #4]
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	4798      	blx	r3
 8002b9e:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.sender->interface.sendCIvalue(gPcHandler.uart3,ki);
 8002ba2:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <handleGetCI+0x38>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	4a04      	ldr	r2, [pc, #16]	; (8002bbc <handleGetCI+0x38>)
 8002baa:	6912      	ldr	r2, [r2, #16]
 8002bac:	ed97 0a03 	vldr	s0, [r7, #12]
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4798      	blx	r3
}
 8002bb4:	bf00      	nop
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20000350 	.word	0x20000350

08002bc0 <handleGetCD>:
void handleGetCD(uint8_t uartNr, const char* value){
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	6039      	str	r1, [r7, #0]
 8002bca:	71fb      	strb	r3, [r7, #7]
	float kd = gPcHandler.pidController->get_kd(gPcHandler.pidController);
 8002bcc:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <handleGetCD+0x38>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	4a09      	ldr	r2, [pc, #36]	; (8002bf8 <handleGetCD+0x38>)
 8002bd4:	6852      	ldr	r2, [r2, #4]
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	4798      	blx	r3
 8002bda:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.sender->interface.sendCDvalue(gPcHandler.uart3,kd);
 8002bde:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <handleGetCD+0x38>)
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	4a04      	ldr	r2, [pc, #16]	; (8002bf8 <handleGetCD+0x38>)
 8002be6:	6912      	ldr	r2, [r2, #16]
 8002be8:	ed97 0a03 	vldr	s0, [r7, #12]
 8002bec:	4610      	mov	r0, r2
 8002bee:	4798      	blx	r3
}
 8002bf0:	bf00      	nop
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	20000350 	.word	0x20000350

08002bfc <processPcInterfaceMessage>:

void processPcInterfaceMessage(PcReceiveHandler* handler,uint8_t* receivedData, uint8_t receivedDataIndex){
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	4613      	mov	r3, r2
 8002c08:	71fb      	strb	r3, [r7, #7]
	processCommand(3, &(handler->uartProcessor), receivedData, receivedDataIndex);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f103 0114 	add.w	r1, r3, #20
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	2003      	movs	r0, #3
 8002c16:	f000 fd81 	bl	800371c <processCommand>
}
 8002c1a:	bf00      	nop
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <extractFloatValue>:

float extractFloatValue(uint8_t uartNr, const char* value) {
 8002c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c28:	b089      	sub	sp, #36	; 0x24
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	6039      	str	r1, [r7, #0]
 8002c30:	71fb      	strb	r3, [r7, #7]
    int length = strlen(value);
 8002c32:	6838      	ldr	r0, [r7, #0]
 8002c34:	f7fd fb24 	bl	8000280 <strlen>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	613b      	str	r3, [r7, #16]
    int startIndex = -1;  // Index des ersten Leerzeichens
 8002c3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c40:	61fb      	str	r3, [r7, #28]
    int endIndex = -1;    // Index des zweiten Leerzeichens
 8002c42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c46:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < length; i++) {
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	e019      	b.n	8002c82 <extractFloatValue+0x5e>
        if (value[i] == ' ' || value[i] == '\r') {
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	4413      	add	r3, r2
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	d005      	beq.n	8002c66 <extractFloatValue+0x42>
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	4413      	add	r3, r2
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b0d      	cmp	r3, #13
 8002c64:	d10a      	bne.n	8002c7c <extractFloatValue+0x58>
            if (startIndex == -1) {
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c6c:	d103      	bne.n	8002c76 <extractFloatValue+0x52>
                startIndex = i + 1;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	3301      	adds	r3, #1
 8002c72:	61fb      	str	r3, [r7, #28]
 8002c74:	e002      	b.n	8002c7c <extractFloatValue+0x58>
            } else {
                endIndex = i;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	61bb      	str	r3, [r7, #24]
                break;
 8002c7a:	e006      	b.n	8002c8a <extractFloatValue+0x66>
    for (int i = 0; i < length; i++) {
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	dbe1      	blt.n	8002c4e <extractFloatValue+0x2a>
            }
        }
    }
    if (startIndex != -1 && endIndex != -1 && startIndex < endIndex) {
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c90:	d04a      	beq.n	8002d28 <extractFloatValue+0x104>
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c98:	d046      	beq.n	8002d28 <extractFloatValue+0x104>
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	da42      	bge.n	8002d28 <extractFloatValue+0x104>
 8002ca2:	466b      	mov	r3, sp
 8002ca4:	461e      	mov	r6, r3
        char floatStr[endIndex - startIndex + 1];
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	1c59      	adds	r1, r3, #1
 8002cae:	1e4b      	subs	r3, r1, #1
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	460a      	mov	r2, r1
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	4690      	mov	r8, r2
 8002cb8:	4699      	mov	r9, r3
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cce:	460a      	mov	r2, r1
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	4614      	mov	r4, r2
 8002cd4:	461d      	mov	r5, r3
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	f04f 0300 	mov.w	r3, #0
 8002cde:	00eb      	lsls	r3, r5, #3
 8002ce0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ce4:	00e2      	lsls	r2, r4, #3
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	3307      	adds	r3, #7
 8002cea:	08db      	lsrs	r3, r3, #3
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	ebad 0d03 	sub.w	sp, sp, r3
 8002cf2:	466b      	mov	r3, sp
 8002cf4:	3300      	adds	r3, #0
 8002cf6:	60bb      	str	r3, [r7, #8]
        strncpy(floatStr, value + startIndex, endIndex - startIndex);
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	18d1      	adds	r1, r2, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	68b8      	ldr	r0, [r7, #8]
 8002d08:	f007 feb0 	bl	800aa6c <strncpy>
        floatStr[endIndex - startIndex] = '\0';
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	2100      	movs	r1, #0
 8002d16:	54d1      	strb	r1, [r2, r3]
        return strtof(floatStr, NULL);
 8002d18:	2100      	movs	r1, #0
 8002d1a:	68b8      	ldr	r0, [r7, #8]
 8002d1c:	f007 fd82 	bl	800a824 <strtof>
 8002d20:	eef0 7a40 	vmov.f32	s15, s0
 8002d24:	46b5      	mov	sp, r6
 8002d26:	e001      	b.n	8002d2c <extractFloatValue+0x108>
    }
    return 0.00;
 8002d28:	eddf 7a03 	vldr	s15, [pc, #12]	; 8002d38 <extractFloatValue+0x114>
}
 8002d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d30:	3724      	adds	r7, #36	; 0x24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d38:	00000000 	.word	0x00000000

08002d3c <extractIntValue>:
int extractIntValue(uint8_t uartNr, const char* value) {
 8002d3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d40:	b089      	sub	sp, #36	; 0x24
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	4603      	mov	r3, r0
 8002d46:	6039      	str	r1, [r7, #0]
 8002d48:	71fb      	strb	r3, [r7, #7]
    int length = strlen(value);
 8002d4a:	6838      	ldr	r0, [r7, #0]
 8002d4c:	f7fd fa98 	bl	8000280 <strlen>
 8002d50:	4603      	mov	r3, r0
 8002d52:	613b      	str	r3, [r7, #16]
    int startIndex = -1;  // Index des ersten Leerzeichens
 8002d54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d58:	61fb      	str	r3, [r7, #28]
    int endIndex = -1;    // Index des zweiten Leerzeichens
 8002d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d5e:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < length; i++) {
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	e019      	b.n	8002d9a <extractIntValue+0x5e>
        if (value[i] == ' ' || value[i] == '\r') {
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b20      	cmp	r3, #32
 8002d70:	d005      	beq.n	8002d7e <extractIntValue+0x42>
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	4413      	add	r3, r2
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b0d      	cmp	r3, #13
 8002d7c:	d10a      	bne.n	8002d94 <extractIntValue+0x58>
            if (startIndex == -1) {
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d84:	d103      	bne.n	8002d8e <extractIntValue+0x52>
                startIndex = i + 1;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	61fb      	str	r3, [r7, #28]
 8002d8c:	e002      	b.n	8002d94 <extractIntValue+0x58>
            } else {
                endIndex = i;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	61bb      	str	r3, [r7, #24]
                break;
 8002d92:	e006      	b.n	8002da2 <extractIntValue+0x66>
    for (int i = 0; i < length; i++) {
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	3301      	adds	r3, #1
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	dbe1      	blt.n	8002d66 <extractIntValue+0x2a>
            }
        }
    }
    if (startIndex != -1 && endIndex != -1 && startIndex < endIndex) {
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002da8:	d048      	beq.n	8002e3c <extractIntValue+0x100>
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002db0:	d044      	beq.n	8002e3c <extractIntValue+0x100>
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	da40      	bge.n	8002e3c <extractIntValue+0x100>
 8002dba:	466b      	mov	r3, sp
 8002dbc:	461e      	mov	r6, r3
        char intStr[endIndex - startIndex + 1];
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	1c59      	adds	r1, r3, #1
 8002dc6:	1e4b      	subs	r3, r1, #1
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	460a      	mov	r2, r1
 8002dcc:	2300      	movs	r3, #0
 8002dce:	4690      	mov	r8, r2
 8002dd0:	4699      	mov	r9, r3
 8002dd2:	f04f 0200 	mov.w	r2, #0
 8002dd6:	f04f 0300 	mov.w	r3, #0
 8002dda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002de2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002de6:	460a      	mov	r2, r1
 8002de8:	2300      	movs	r3, #0
 8002dea:	4614      	mov	r4, r2
 8002dec:	461d      	mov	r5, r3
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	00eb      	lsls	r3, r5, #3
 8002df8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dfc:	00e2      	lsls	r2, r4, #3
 8002dfe:	460b      	mov	r3, r1
 8002e00:	3307      	adds	r3, #7
 8002e02:	08db      	lsrs	r3, r3, #3
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	ebad 0d03 	sub.w	sp, sp, r3
 8002e0a:	466b      	mov	r3, sp
 8002e0c:	3300      	adds	r3, #0
 8002e0e:	60bb      	str	r3, [r7, #8]
        strncpy(intStr, value + startIndex, endIndex - startIndex);
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	18d1      	adds	r1, r2, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	68b8      	ldr	r0, [r7, #8]
 8002e20:	f007 fe24 	bl	800aa6c <strncpy>
        intStr[endIndex - startIndex] = '\0';
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	54d1      	strb	r1, [r2, r3]
        return atoi(intStr);
 8002e30:	68b8      	ldr	r0, [r7, #8]
 8002e32:	f005 ff9b 	bl	8008d6c <atoi>
 8002e36:	4603      	mov	r3, r0
 8002e38:	46b5      	mov	sp, r6
 8002e3a:	e000      	b.n	8002e3e <extractIntValue+0x102>
    }
    return 0;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3724      	adds	r7, #36	; 0x24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002e48 <sendDiamExt_impl>:
#include <stdio.h>
#include <string.h>


// Implementierung der Interface methoden
void sendDiamExt_impl(UART_HandleTypeDef *huart,float value) {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08a      	sub	sp, #40	; 0x28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	ed87 0a00 	vstr	s0, [r7]
	uint8_t tag[] = "DIAMEXT ";
 8002e54:	4a21      	ldr	r2, [pc, #132]	; (8002edc <sendDiamExt_impl+0x94>)
 8002e56:	f107 031c 	add.w	r3, r7, #28
 8002e5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e5c:	c303      	stmia	r3!, {r0, r1}
 8002e5e:	701a      	strb	r2, [r3, #0]
	uint8_t diameter[10];
	uint8_t endTag[] = " /r/n";
 8002e60:	4a1f      	ldr	r2, [pc, #124]	; (8002ee0 <sendDiamExt_impl+0x98>)
 8002e62:	f107 0308 	add.w	r3, r7, #8
 8002e66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e6a:	6018      	str	r0, [r3, #0]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	8019      	strh	r1, [r3, #0]

	sprintf((char *)diameter, "%.2f", value);
 8002e70:	6838      	ldr	r0, [r7, #0]
 8002e72:	f7fd fb71 	bl	8000558 <__aeabi_f2d>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	f107 0010 	add.w	r0, r7, #16
 8002e7e:	4919      	ldr	r1, [pc, #100]	; (8002ee4 <sendDiamExt_impl+0x9c>)
 8002e80:	f006 fdf8 	bl	8009a74 <siprintf>

	HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 8002e84:	f107 031c 	add.w	r3, r7, #28
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fd f9f9 	bl	8000280 <strlen>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	f107 011c 	add.w	r1, r7, #28
 8002e96:	230a      	movs	r3, #10
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f004 ff3c 	bl	8007d16 <HAL_UART_Transmit>
   	HAL_UART_Transmit(huart, diameter, strlen((char*)diameter), 10);
 8002e9e:	f107 0310 	add.w	r3, r7, #16
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fd f9ec 	bl	8000280 <strlen>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	f107 0110 	add.w	r1, r7, #16
 8002eb0:	230a      	movs	r3, #10
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f004 ff2f 	bl	8007d16 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 8002eb8:	f107 0308 	add.w	r3, r7, #8
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fd f9df 	bl	8000280 <strlen>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	f107 0108 	add.w	r1, r7, #8
 8002eca:	230a      	movs	r3, #10
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f004 ff22 	bl	8007d16 <HAL_UART_Transmit>
}
 8002ed2:	bf00      	nop
 8002ed4:	3728      	adds	r7, #40	; 0x28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	0800d780 	.word	0x0800d780
 8002ee0:	0800d78c 	.word	0x0800d78c
 8002ee4:	0800d778 	.word	0x0800d778

08002ee8 <sendDiamBack_impl>:
void sendDiamBack_impl(UART_HandleTypeDef *huart,float value) {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08a      	sub	sp, #40	; 0x28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	ed87 0a00 	vstr	s0, [r7]
	uint8_t tag[] = "DIAMBACK ";
 8002ef4:	4a21      	ldr	r2, [pc, #132]	; (8002f7c <sendDiamBack_impl+0x94>)
 8002ef6:	f107 031c 	add.w	r3, r7, #28
 8002efa:	ca07      	ldmia	r2, {r0, r1, r2}
 8002efc:	c303      	stmia	r3!, {r0, r1}
 8002efe:	801a      	strh	r2, [r3, #0]
	uint8_t diameter[10];
	uint8_t endTag[] = " /r/n";
 8002f00:	4a1f      	ldr	r2, [pc, #124]	; (8002f80 <sendDiamBack_impl+0x98>)
 8002f02:	f107 0308 	add.w	r3, r7, #8
 8002f06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f0a:	6018      	str	r0, [r3, #0]
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	8019      	strh	r1, [r3, #0]

	sprintf((char *)diameter, "%.2f", value);
 8002f10:	6838      	ldr	r0, [r7, #0]
 8002f12:	f7fd fb21 	bl	8000558 <__aeabi_f2d>
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	f107 0010 	add.w	r0, r7, #16
 8002f1e:	4919      	ldr	r1, [pc, #100]	; (8002f84 <sendDiamBack_impl+0x9c>)
 8002f20:	f006 fda8 	bl	8009a74 <siprintf>

	HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 8002f24:	f107 031c 	add.w	r3, r7, #28
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fd f9a9 	bl	8000280 <strlen>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	f107 011c 	add.w	r1, r7, #28
 8002f36:	230a      	movs	r3, #10
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f004 feec 	bl	8007d16 <HAL_UART_Transmit>
   	HAL_UART_Transmit(huart, diameter, strlen((char*)diameter), 10);
 8002f3e:	f107 0310 	add.w	r3, r7, #16
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fd f99c 	bl	8000280 <strlen>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	f107 0110 	add.w	r1, r7, #16
 8002f50:	230a      	movs	r3, #10
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f004 fedf 	bl	8007d16 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 8002f58:	f107 0308 	add.w	r3, r7, #8
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fd f98f 	bl	8000280 <strlen>
 8002f62:	4603      	mov	r3, r0
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	f107 0108 	add.w	r1, r7, #8
 8002f6a:	230a      	movs	r3, #10
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f004 fed2 	bl	8007d16 <HAL_UART_Transmit>
}
 8002f72:	bf00      	nop
 8002f74:	3728      	adds	r7, #40	; 0x28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	0800d794 	.word	0x0800d794
 8002f80:	0800d78c 	.word	0x0800d78c
 8002f84:	0800d778 	.word	0x0800d778

08002f88 <sendState_impl>:

void sendState_impl(UART_HandleTypeDef *huart, State state) {
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	70fb      	strb	r3, [r7, #3]
    uint8_t tag[] = "STATE ";
 8002f94:	4a22      	ldr	r2, [pc, #136]	; (8003020 <sendState_impl+0x98>)
 8002f96:	f107 0318 	add.w	r3, r7, #24
 8002f9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f9e:	6018      	str	r0, [r3, #0]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	8019      	strh	r1, [r3, #0]
 8002fa4:	3302      	adds	r3, #2
 8002fa6:	0c0a      	lsrs	r2, r1, #16
 8002fa8:	701a      	strb	r2, [r3, #0]
    uint8_t stateStr[10];
    uint8_t endTag[] = "\r\n";
 8002faa:	4a1e      	ldr	r2, [pc, #120]	; (8003024 <sendState_impl+0x9c>)
 8002fac:	f107 0308 	add.w	r3, r7, #8
 8002fb0:	6812      	ldr	r2, [r2, #0]
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	8019      	strh	r1, [r3, #0]
 8002fb6:	3302      	adds	r3, #2
 8002fb8:	0c12      	lsrs	r2, r2, #16
 8002fba:	701a      	strb	r2, [r3, #0]

    sprintf((char *)stateStr, "%d", state);
 8002fbc:	78fa      	ldrb	r2, [r7, #3]
 8002fbe:	f107 030c 	add.w	r3, r7, #12
 8002fc2:	4919      	ldr	r1, [pc, #100]	; (8003028 <sendState_impl+0xa0>)
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f006 fd55 	bl	8009a74 <siprintf>

    HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 8002fca:	f107 0318 	add.w	r3, r7, #24
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fd f956 	bl	8000280 <strlen>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	f107 0118 	add.w	r1, r7, #24
 8002fdc:	230a      	movs	r3, #10
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f004 fe99 	bl	8007d16 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, stateStr, strlen((char*)stateStr), 10);
 8002fe4:	f107 030c 	add.w	r3, r7, #12
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fd f949 	bl	8000280 <strlen>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	f107 010c 	add.w	r1, r7, #12
 8002ff6:	230a      	movs	r3, #10
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f004 fe8c 	bl	8007d16 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 8002ffe:	f107 0308 	add.w	r3, r7, #8
 8003002:	4618      	mov	r0, r3
 8003004:	f7fd f93c 	bl	8000280 <strlen>
 8003008:	4603      	mov	r3, r0
 800300a:	b29a      	uxth	r2, r3
 800300c:	f107 0108 	add.w	r1, r7, #8
 8003010:	230a      	movs	r3, #10
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f004 fe7f 	bl	8007d16 <HAL_UART_Transmit>
}
 8003018:	bf00      	nop
 800301a:	3720      	adds	r7, #32
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	0800d7a4 	.word	0x0800d7a4
 8003024:	0800d7ac 	.word	0x0800d7ac
 8003028:	0800d7a0 	.word	0x0800d7a0

0800302c <sendSpeed_impl>:
void sendSpeed_impl(UART_HandleTypeDef *huart, float speed){
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	ed87 0a00 	vstr	s0, [r7]
    uint8_t tag[] = "SPEED ";
 8003038:	4a24      	ldr	r2, [pc, #144]	; (80030cc <sendSpeed_impl+0xa0>)
 800303a:	f107 0318 	add.w	r3, r7, #24
 800303e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003042:	6018      	str	r0, [r3, #0]
 8003044:	3304      	adds	r3, #4
 8003046:	8019      	strh	r1, [r3, #0]
 8003048:	3302      	adds	r3, #2
 800304a:	0c0a      	lsrs	r2, r1, #16
 800304c:	701a      	strb	r2, [r3, #0]
    uint8_t value[10];
    uint8_t endTag[] = "\r\n";
 800304e:	4a20      	ldr	r2, [pc, #128]	; (80030d0 <sendSpeed_impl+0xa4>)
 8003050:	f107 0308 	add.w	r3, r7, #8
 8003054:	6812      	ldr	r2, [r2, #0]
 8003056:	4611      	mov	r1, r2
 8003058:	8019      	strh	r1, [r3, #0]
 800305a:	3302      	adds	r3, #2
 800305c:	0c12      	lsrs	r2, r2, #16
 800305e:	701a      	strb	r2, [r3, #0]

    sprintf((char *)value, "%.2f", speed);
 8003060:	6838      	ldr	r0, [r7, #0]
 8003062:	f7fd fa79 	bl	8000558 <__aeabi_f2d>
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	f107 000c 	add.w	r0, r7, #12
 800306e:	4919      	ldr	r1, [pc, #100]	; (80030d4 <sendSpeed_impl+0xa8>)
 8003070:	f006 fd00 	bl	8009a74 <siprintf>

    HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 8003074:	f107 0318 	add.w	r3, r7, #24
 8003078:	4618      	mov	r0, r3
 800307a:	f7fd f901 	bl	8000280 <strlen>
 800307e:	4603      	mov	r3, r0
 8003080:	b29a      	uxth	r2, r3
 8003082:	f107 0118 	add.w	r1, r7, #24
 8003086:	230a      	movs	r3, #10
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f004 fe44 	bl	8007d16 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, value, strlen((char*)value), 10);
 800308e:	f107 030c 	add.w	r3, r7, #12
 8003092:	4618      	mov	r0, r3
 8003094:	f7fd f8f4 	bl	8000280 <strlen>
 8003098:	4603      	mov	r3, r0
 800309a:	b29a      	uxth	r2, r3
 800309c:	f107 010c 	add.w	r1, r7, #12
 80030a0:	230a      	movs	r3, #10
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f004 fe37 	bl	8007d16 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 80030a8:	f107 0308 	add.w	r3, r7, #8
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fd f8e7 	bl	8000280 <strlen>
 80030b2:	4603      	mov	r3, r0
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	f107 0108 	add.w	r1, r7, #8
 80030ba:	230a      	movs	r3, #10
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f004 fe2a 	bl	8007d16 <HAL_UART_Transmit>

}
 80030c2:	bf00      	nop
 80030c4:	3720      	adds	r7, #32
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	0800d7b0 	.word	0x0800d7b0
 80030d0:	0800d7ac 	.word	0x0800d7ac
 80030d4:	0800d778 	.word	0x0800d778

080030d8 <sendCPvalue_impl>:
void sendCPvalue_impl(UART_HandleTypeDef *huart, float cp){
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	ed87 0a00 	vstr	s0, [r7]
    uint8_t tag[] = "CP ";
 80030e4:	4b1f      	ldr	r3, [pc, #124]	; (8003164 <sendCPvalue_impl+0x8c>)
 80030e6:	61fb      	str	r3, [r7, #28]
    uint8_t value[10];
    uint8_t endTag[] = "\r\n";
 80030e8:	4a1f      	ldr	r2, [pc, #124]	; (8003168 <sendCPvalue_impl+0x90>)
 80030ea:	f107 030c 	add.w	r3, r7, #12
 80030ee:	6812      	ldr	r2, [r2, #0]
 80030f0:	4611      	mov	r1, r2
 80030f2:	8019      	strh	r1, [r3, #0]
 80030f4:	3302      	adds	r3, #2
 80030f6:	0c12      	lsrs	r2, r2, #16
 80030f8:	701a      	strb	r2, [r3, #0]

    sprintf((char *)value, "%.2f", cp);
 80030fa:	6838      	ldr	r0, [r7, #0]
 80030fc:	f7fd fa2c 	bl	8000558 <__aeabi_f2d>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	f107 0010 	add.w	r0, r7, #16
 8003108:	4918      	ldr	r1, [pc, #96]	; (800316c <sendCPvalue_impl+0x94>)
 800310a:	f006 fcb3 	bl	8009a74 <siprintf>

    HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 800310e:	f107 031c 	add.w	r3, r7, #28
 8003112:	4618      	mov	r0, r3
 8003114:	f7fd f8b4 	bl	8000280 <strlen>
 8003118:	4603      	mov	r3, r0
 800311a:	b29a      	uxth	r2, r3
 800311c:	f107 011c 	add.w	r1, r7, #28
 8003120:	230a      	movs	r3, #10
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f004 fdf7 	bl	8007d16 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, value, strlen((char*)value), 10);
 8003128:	f107 0310 	add.w	r3, r7, #16
 800312c:	4618      	mov	r0, r3
 800312e:	f7fd f8a7 	bl	8000280 <strlen>
 8003132:	4603      	mov	r3, r0
 8003134:	b29a      	uxth	r2, r3
 8003136:	f107 0110 	add.w	r1, r7, #16
 800313a:	230a      	movs	r3, #10
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f004 fdea 	bl	8007d16 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 8003142:	f107 030c 	add.w	r3, r7, #12
 8003146:	4618      	mov	r0, r3
 8003148:	f7fd f89a 	bl	8000280 <strlen>
 800314c:	4603      	mov	r3, r0
 800314e:	b29a      	uxth	r2, r3
 8003150:	f107 010c 	add.w	r1, r7, #12
 8003154:	230a      	movs	r3, #10
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f004 fddd 	bl	8007d16 <HAL_UART_Transmit>
}
 800315c:	bf00      	nop
 800315e:	3720      	adds	r7, #32
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	00205043 	.word	0x00205043
 8003168:	0800d7ac 	.word	0x0800d7ac
 800316c:	0800d778 	.word	0x0800d778

08003170 <sendCIvalue_impl>:
void sendCIvalue_impl(UART_HandleTypeDef *huart, float ci){
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	ed87 0a00 	vstr	s0, [r7]
    uint8_t tag[] = "CI ";
 800317c:	4b1f      	ldr	r3, [pc, #124]	; (80031fc <sendCIvalue_impl+0x8c>)
 800317e:	61fb      	str	r3, [r7, #28]
    uint8_t value[10];
    uint8_t endTag[] = "\r\n";
 8003180:	4a1f      	ldr	r2, [pc, #124]	; (8003200 <sendCIvalue_impl+0x90>)
 8003182:	f107 030c 	add.w	r3, r7, #12
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	4611      	mov	r1, r2
 800318a:	8019      	strh	r1, [r3, #0]
 800318c:	3302      	adds	r3, #2
 800318e:	0c12      	lsrs	r2, r2, #16
 8003190:	701a      	strb	r2, [r3, #0]

    sprintf((char *)value, "%.2f", ci);
 8003192:	6838      	ldr	r0, [r7, #0]
 8003194:	f7fd f9e0 	bl	8000558 <__aeabi_f2d>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	f107 0010 	add.w	r0, r7, #16
 80031a0:	4918      	ldr	r1, [pc, #96]	; (8003204 <sendCIvalue_impl+0x94>)
 80031a2:	f006 fc67 	bl	8009a74 <siprintf>

    HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 80031a6:	f107 031c 	add.w	r3, r7, #28
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fd f868 	bl	8000280 <strlen>
 80031b0:	4603      	mov	r3, r0
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	f107 011c 	add.w	r1, r7, #28
 80031b8:	230a      	movs	r3, #10
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f004 fdab 	bl	8007d16 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, value, strlen((char*)value), 10);
 80031c0:	f107 0310 	add.w	r3, r7, #16
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fd f85b 	bl	8000280 <strlen>
 80031ca:	4603      	mov	r3, r0
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	f107 0110 	add.w	r1, r7, #16
 80031d2:	230a      	movs	r3, #10
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f004 fd9e 	bl	8007d16 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 80031da:	f107 030c 	add.w	r3, r7, #12
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fd f84e 	bl	8000280 <strlen>
 80031e4:	4603      	mov	r3, r0
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	f107 010c 	add.w	r1, r7, #12
 80031ec:	230a      	movs	r3, #10
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f004 fd91 	bl	8007d16 <HAL_UART_Transmit>
}
 80031f4:	bf00      	nop
 80031f6:	3720      	adds	r7, #32
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	00204943 	.word	0x00204943
 8003200:	0800d7ac 	.word	0x0800d7ac
 8003204:	0800d778 	.word	0x0800d778

08003208 <sendCDvalue_impl>:
void sendCDvalue_impl(UART_HandleTypeDef *huart, float cd){
 8003208:	b580      	push	{r7, lr}
 800320a:	b088      	sub	sp, #32
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	ed87 0a00 	vstr	s0, [r7]
    uint8_t tag[] = "CD ";
 8003214:	4b1f      	ldr	r3, [pc, #124]	; (8003294 <sendCDvalue_impl+0x8c>)
 8003216:	61fb      	str	r3, [r7, #28]
    uint8_t value[10];
    uint8_t endTag[] = "\r\n";
 8003218:	4a1f      	ldr	r2, [pc, #124]	; (8003298 <sendCDvalue_impl+0x90>)
 800321a:	f107 030c 	add.w	r3, r7, #12
 800321e:	6812      	ldr	r2, [r2, #0]
 8003220:	4611      	mov	r1, r2
 8003222:	8019      	strh	r1, [r3, #0]
 8003224:	3302      	adds	r3, #2
 8003226:	0c12      	lsrs	r2, r2, #16
 8003228:	701a      	strb	r2, [r3, #0]

    sprintf((char *)value, "%.2f", cd);
 800322a:	6838      	ldr	r0, [r7, #0]
 800322c:	f7fd f994 	bl	8000558 <__aeabi_f2d>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	f107 0010 	add.w	r0, r7, #16
 8003238:	4918      	ldr	r1, [pc, #96]	; (800329c <sendCDvalue_impl+0x94>)
 800323a:	f006 fc1b 	bl	8009a74 <siprintf>

    HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 800323e:	f107 031c 	add.w	r3, r7, #28
 8003242:	4618      	mov	r0, r3
 8003244:	f7fd f81c 	bl	8000280 <strlen>
 8003248:	4603      	mov	r3, r0
 800324a:	b29a      	uxth	r2, r3
 800324c:	f107 011c 	add.w	r1, r7, #28
 8003250:	230a      	movs	r3, #10
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f004 fd5f 	bl	8007d16 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, value, strlen((char*)value), 10);
 8003258:	f107 0310 	add.w	r3, r7, #16
 800325c:	4618      	mov	r0, r3
 800325e:	f7fd f80f 	bl	8000280 <strlen>
 8003262:	4603      	mov	r3, r0
 8003264:	b29a      	uxth	r2, r3
 8003266:	f107 0110 	add.w	r1, r7, #16
 800326a:	230a      	movs	r3, #10
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f004 fd52 	bl	8007d16 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 8003272:	f107 030c 	add.w	r3, r7, #12
 8003276:	4618      	mov	r0, r3
 8003278:	f7fd f802 	bl	8000280 <strlen>
 800327c:	4603      	mov	r3, r0
 800327e:	b29a      	uxth	r2, r3
 8003280:	f107 010c 	add.w	r1, r7, #12
 8003284:	230a      	movs	r3, #10
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f004 fd45 	bl	8007d16 <HAL_UART_Transmit>
}
 800328c:	bf00      	nop
 800328e:	3720      	adds	r7, #32
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	00204443 	.word	0x00204443
 8003298:	0800d7ac 	.word	0x0800d7ac
 800329c:	0800d778 	.word	0x0800d778

080032a0 <createPcSendHandler>:
PcSendHandler createPcSendHandler(uint32_t timeout) {
 80032a0:	b4b0      	push	{r4, r5, r7}
 80032a2:	b08b      	sub	sp, #44	; 0x2c
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
	PcSendHandler handler;
    handler.interface.sendDiamExt	= sendDiamExt_impl;
 80032aa:	4b0f      	ldr	r3, [pc, #60]	; (80032e8 <createPcSendHandler+0x48>)
 80032ac:	60bb      	str	r3, [r7, #8]
    handler.interface.sendDiamBack	= sendDiamBack_impl;
 80032ae:	4b0f      	ldr	r3, [pc, #60]	; (80032ec <createPcSendHandler+0x4c>)
 80032b0:	60fb      	str	r3, [r7, #12]
    handler.interface.sendState		= sendState_impl;
 80032b2:	4b0f      	ldr	r3, [pc, #60]	; (80032f0 <createPcSendHandler+0x50>)
 80032b4:	613b      	str	r3, [r7, #16]
    handler.interface.sendSpeed		= sendSpeed_impl;
 80032b6:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <createPcSendHandler+0x54>)
 80032b8:	617b      	str	r3, [r7, #20]
    handler.interface.sendCPvalue	= sendCPvalue_impl;
 80032ba:	4b0f      	ldr	r3, [pc, #60]	; (80032f8 <createPcSendHandler+0x58>)
 80032bc:	61bb      	str	r3, [r7, #24]
    handler.interface.sendCIvalue	= sendCIvalue_impl;
 80032be:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <createPcSendHandler+0x5c>)
 80032c0:	61fb      	str	r3, [r7, #28]
    handler.interface.sendCDvalue	= sendCDvalue_impl;
 80032c2:	4b0f      	ldr	r3, [pc, #60]	; (8003300 <createPcSendHandler+0x60>)
 80032c4:	623b      	str	r3, [r7, #32]

    handler.interface.timeout = timeout;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
    return handler;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	461d      	mov	r5, r3
 80032ce:	f107 0408 	add.w	r4, r7, #8
 80032d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80032da:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	372c      	adds	r7, #44	; 0x2c
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bcb0      	pop	{r4, r5, r7}
 80032e6:	4770      	bx	lr
 80032e8:	08002e49 	.word	0x08002e49
 80032ec:	08002ee9 	.word	0x08002ee9
 80032f0:	08002f89 	.word	0x08002f89
 80032f4:	0800302d 	.word	0x0800302d
 80032f8:	080030d9 	.word	0x080030d9
 80032fc:	08003171 	.word	0x08003171
 8003300:	08003209 	.word	0x08003209

08003304 <createSensorReceiveHandler>:
// Konstruktor
SensorReceiveHandler createSensorReceiveHandler(Sensor* sensorExtruder,
												Sensor* sensorBack,
												StateMachine* stateMachine,
												Hmi* hmi)
{
 8003304:	b5b0      	push	{r4, r5, r7, lr}
 8003306:	b08a      	sub	sp, #40	; 0x28
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
 8003310:	603b      	str	r3, [r7, #0]
	SensorReceiveHandler handler;
    handler.sensorExtruder = sensorExtruder;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	617b      	str	r3, [r7, #20]
    handler.sensorBack = sensorBack;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	61bb      	str	r3, [r7, #24]
    handler.stateMachine = stateMachine;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	61fb      	str	r3, [r7, #28]
    handler.hmi = hmi;
 800331e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003320:	623b      	str	r3, [r7, #32]

    // Zuweisung der globalen Variable
    gHandler = handler;
 8003322:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <createSensorReceiveHandler+0x50>)
 8003324:	461d      	mov	r5, r3
 8003326:	f107 0414 	add.w	r4, r7, #20
 800332a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800332c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800332e:	6823      	ldr	r3, [r4, #0]
 8003330:	602b      	str	r3, [r5, #0]

    handler.uartProcessor = createUartProcessor(sensor_interface_dictionary);
 8003332:	4809      	ldr	r0, [pc, #36]	; (8003358 <createSensorReceiveHandler+0x54>)
 8003334:	f000 f9b4 	bl	80036a0 <createUartProcessor>
 8003338:	6278      	str	r0, [r7, #36]	; 0x24
    return handler;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	461d      	mov	r5, r3
 800333e:	f107 0414 	add.w	r4, r7, #20
 8003342:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003344:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	602b      	str	r3, [r5, #0]
}
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	3728      	adds	r7, #40	; 0x28
 800334e:	46bd      	mov	sp, r7
 8003350:	bdb0      	pop	{r4, r5, r7, pc}
 8003352:	bf00      	nop
 8003354:	20000368 	.word	0x20000368
 8003358:	2000005c 	.word	0x2000005c

0800335c <handleDiamRecieved>:

// Methoden
void handleDiamRecieved(uint8_t uartNr, const char* value){
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	6039      	str	r1, [r7, #0]
 8003366:	71fb      	strb	r3, [r7, #7]
	uint8_t ext = gHandler.sensorExtruder->getUartPort(gHandler.sensorExtruder);
 8003368:	4b2f      	ldr	r3, [pc, #188]	; (8003428 <handleDiamRecieved+0xcc>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	4a2e      	ldr	r2, [pc, #184]	; (8003428 <handleDiamRecieved+0xcc>)
 8003370:	6812      	ldr	r2, [r2, #0]
 8003372:	4610      	mov	r0, r2
 8003374:	4798      	blx	r3
 8003376:	4603      	mov	r3, r0
 8003378:	77fb      	strb	r3, [r7, #31]
	uint8_t back = gHandler.sensorBack->getUartPort(gHandler.sensorBack);
 800337a:	4b2b      	ldr	r3, [pc, #172]	; (8003428 <handleDiamRecieved+0xcc>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	4a29      	ldr	r2, [pc, #164]	; (8003428 <handleDiamRecieved+0xcc>)
 8003382:	6852      	ldr	r2, [r2, #4]
 8003384:	4610      	mov	r0, r2
 8003386:	4798      	blx	r3
 8003388:	4603      	mov	r3, r0
 800338a:	77bb      	strb	r3, [r7, #30]
	if(ext == uartNr){
 800338c:	7ffa      	ldrb	r2, [r7, #31]
 800338e:	79fb      	ldrb	r3, [r7, #7]
 8003390:	429a      	cmp	r2, r3
 8003392:	d10e      	bne.n	80033b2 <handleDiamRecieved+0x56>
		float diam = getFloatFromMessage(value);
 8003394:	6838      	ldr	r0, [r7, #0]
 8003396:	f000 f849 	bl	800342c <getFloatFromMessage>
 800339a:	ed87 0a05 	vstr	s0, [r7, #20]
		gHandler.sensorExtruder->setDiameter(gHandler.sensorExtruder,diam);
 800339e:	4b22      	ldr	r3, [pc, #136]	; (8003428 <handleDiamRecieved+0xcc>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	4a20      	ldr	r2, [pc, #128]	; (8003428 <handleDiamRecieved+0xcc>)
 80033a6:	6812      	ldr	r2, [r2, #0]
 80033a8:	ed97 0a05 	vldr	s0, [r7, #20]
 80033ac:	4610      	mov	r0, r2
 80033ae:	4798      	blx	r3
 80033b0:	e011      	b.n	80033d6 <handleDiamRecieved+0x7a>
	}
	else if(back == uartNr){
 80033b2:	7fba      	ldrb	r2, [r7, #30]
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d10d      	bne.n	80033d6 <handleDiamRecieved+0x7a>
		float diam = getFloatFromMessage(value);
 80033ba:	6838      	ldr	r0, [r7, #0]
 80033bc:	f000 f836 	bl	800342c <getFloatFromMessage>
 80033c0:	ed87 0a06 	vstr	s0, [r7, #24]
		gHandler.sensorBack->setDiameter(gHandler.sensorBack,diam);
 80033c4:	4b18      	ldr	r3, [pc, #96]	; (8003428 <handleDiamRecieved+0xcc>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	4a17      	ldr	r2, [pc, #92]	; (8003428 <handleDiamRecieved+0xcc>)
 80033cc:	6852      	ldr	r2, [r2, #4]
 80033ce:	ed97 0a06 	vldr	s0, [r7, #24]
 80033d2:	4610      	mov	r0, r2
 80033d4:	4798      	blx	r3
	}
	float extruder  = gHandler.sensorExtruder->getDiameter(gHandler.sensorExtruder);
 80033d6:	4b14      	ldr	r3, [pc, #80]	; (8003428 <handleDiamRecieved+0xcc>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	4a12      	ldr	r2, [pc, #72]	; (8003428 <handleDiamRecieved+0xcc>)
 80033de:	6812      	ldr	r2, [r2, #0]
 80033e0:	4610      	mov	r0, r2
 80033e2:	4798      	blx	r3
 80033e4:	ed87 0a04 	vstr	s0, [r7, #16]
	float backValue = gHandler.sensorBack->getDiameter(gHandler.sensorBack);
 80033e8:	4b0f      	ldr	r3, [pc, #60]	; (8003428 <handleDiamRecieved+0xcc>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	4a0e      	ldr	r2, [pc, #56]	; (8003428 <handleDiamRecieved+0xcc>)
 80033f0:	6852      	ldr	r2, [r2, #4]
 80033f2:	4610      	mov	r0, r2
 80033f4:	4798      	blx	r3
 80033f6:	ed87 0a03 	vstr	s0, [r7, #12]
	gHandler.stateMachine->checkBlobDetected(gHandler.stateMachine,backValue);
 80033fa:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <handleDiamRecieved+0xcc>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	4a09      	ldr	r2, [pc, #36]	; (8003428 <handleDiamRecieved+0xcc>)
 8003402:	6892      	ldr	r2, [r2, #8]
 8003404:	ed97 0a03 	vldr	s0, [r7, #12]
 8003408:	4610      	mov	r0, r2
 800340a:	4798      	blx	r3
	HMI_updateDisplaySensor(gHandler.hmi, extruder,backValue);
 800340c:	4b06      	ldr	r3, [pc, #24]	; (8003428 <handleDiamRecieved+0xcc>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	edd7 0a03 	vldr	s1, [r7, #12]
 8003414:	ed97 0a04 	vldr	s0, [r7, #16]
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff f9e7 	bl	80027ec <HMI_updateDisplaySensor>
}
 800341e:	bf00      	nop
 8003420:	3720      	adds	r7, #32
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20000368 	.word	0x20000368

0800342c <getFloatFromMessage>:
float getFloatFromMessage(const char* value) {
 800342c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003430:	b089      	sub	sp, #36	; 0x24
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
    int length = strlen(value);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fc ff22 	bl	8000280 <strlen>
 800343c:	4603      	mov	r3, r0
 800343e:	613b      	str	r3, [r7, #16]
    int startIndex = -1;  // Index des ersten Leerzeichens
 8003440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003444:	61fb      	str	r3, [r7, #28]
    int endIndex = -1;    // Index des zweiten Leerzeichens
 8003446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800344a:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < length; i++) {
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	e019      	b.n	8003486 <getFloatFromMessage+0x5a>
        if (value[i] == ' ' || value[i] == '\r') {
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	4413      	add	r3, r2
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b20      	cmp	r3, #32
 800345c:	d005      	beq.n	800346a <getFloatFromMessage+0x3e>
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	4413      	add	r3, r2
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b0d      	cmp	r3, #13
 8003468:	d10a      	bne.n	8003480 <getFloatFromMessage+0x54>
            if (startIndex == -1) {
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003470:	d103      	bne.n	800347a <getFloatFromMessage+0x4e>
                startIndex = i + 1;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	3301      	adds	r3, #1
 8003476:	61fb      	str	r3, [r7, #28]
 8003478:	e002      	b.n	8003480 <getFloatFromMessage+0x54>
            } else {
                endIndex = i;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	61bb      	str	r3, [r7, #24]
                break;
 800347e:	e006      	b.n	800348e <getFloatFromMessage+0x62>
    for (int i = 0; i < length; i++) {
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	3301      	adds	r3, #1
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	429a      	cmp	r2, r3
 800348c:	dbe1      	blt.n	8003452 <getFloatFromMessage+0x26>
            }
        }
    }
    if (startIndex != -1 && endIndex != -1 && startIndex < endIndex) {
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003494:	d04a      	beq.n	800352c <getFloatFromMessage+0x100>
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800349c:	d046      	beq.n	800352c <getFloatFromMessage+0x100>
 800349e:	69fa      	ldr	r2, [r7, #28]
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	da42      	bge.n	800352c <getFloatFromMessage+0x100>
 80034a6:	466b      	mov	r3, sp
 80034a8:	461e      	mov	r6, r3
        char floatStr[endIndex - startIndex + 1];
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	1c59      	adds	r1, r3, #1
 80034b2:	1e4b      	subs	r3, r1, #1
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	460a      	mov	r2, r1
 80034b8:	2300      	movs	r3, #0
 80034ba:	4690      	mov	r8, r2
 80034bc:	4699      	mov	r9, r3
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034d2:	460a      	mov	r2, r1
 80034d4:	2300      	movs	r3, #0
 80034d6:	4614      	mov	r4, r2
 80034d8:	461d      	mov	r5, r3
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	f04f 0300 	mov.w	r3, #0
 80034e2:	00eb      	lsls	r3, r5, #3
 80034e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034e8:	00e2      	lsls	r2, r4, #3
 80034ea:	460b      	mov	r3, r1
 80034ec:	3307      	adds	r3, #7
 80034ee:	08db      	lsrs	r3, r3, #3
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	ebad 0d03 	sub.w	sp, sp, r3
 80034f6:	466b      	mov	r3, sp
 80034f8:	3300      	adds	r3, #0
 80034fa:	60bb      	str	r3, [r7, #8]
        strncpy(floatStr, value + startIndex, endIndex - startIndex);
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	18d1      	adds	r1, r2, r3
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	461a      	mov	r2, r3
 800350a:	68b8      	ldr	r0, [r7, #8]
 800350c:	f007 faae 	bl	800aa6c <strncpy>
        floatStr[endIndex - startIndex] = '\0';
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	2100      	movs	r1, #0
 800351a:	54d1      	strb	r1, [r2, r3]
        return strtof(floatStr, NULL);
 800351c:	2100      	movs	r1, #0
 800351e:	68b8      	ldr	r0, [r7, #8]
 8003520:	f007 f980 	bl	800a824 <strtof>
 8003524:	eef0 7a40 	vmov.f32	s15, s0
 8003528:	46b5      	mov	sp, r6
 800352a:	e001      	b.n	8003530 <getFloatFromMessage+0x104>
    }
    return 0.00;
 800352c:	eddf 7a03 	vldr	s15, [pc, #12]	; 800353c <getFloatFromMessage+0x110>
}
 8003530:	eeb0 0a67 	vmov.f32	s0, s15
 8003534:	3724      	adds	r7, #36	; 0x24
 8003536:	46bd      	mov	sp, r7
 8003538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800353c:	00000000 	.word	0x00000000

08003540 <processSensorInterfaceMessage>:


void processSensorInterfaceMessage(uint8_t uartNr,SensorReceiveHandler* handler,uint8_t* receivedData, uint8_t receivedDataIndex){
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
 800354a:	461a      	mov	r2, r3
 800354c:	4603      	mov	r3, r0
 800354e:	73fb      	strb	r3, [r7, #15]
 8003550:	4613      	mov	r3, r2
 8003552:	73bb      	strb	r3, [r7, #14]
	processCommand(uartNr, &(handler->uartProcessor), receivedData, receivedDataIndex);
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f103 0110 	add.w	r1, r3, #16
 800355a:	7bbb      	ldrb	r3, [r7, #14]
 800355c:	7bf8      	ldrb	r0, [r7, #15]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	f000 f8dc 	bl	800371c <processCommand>
}
 8003564:	bf00      	nop
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <getReceivedData>:


#include <Kommunikation/uart_data.h>

// Getter-Methoden
const uint8_t* getReceivedData(const UartData* uartData) {
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
    return uartData->receivedData;
 8003574:	687b      	ldr	r3, [r7, #4]
}
 8003576:	4618      	mov	r0, r3
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <getDataIndex>:

int getDataIndex(const UartData* uartData) {
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
    return uartData->dataIndex;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800358e:	4618      	mov	r0, r3
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <getMessageComplete>:

int getMessageComplete(const UartData* uartData) {
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
    return uartData->messageComplete;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <setReceivedData>:

// Setter-Methoden
void setReceivedData(UartData* uartData, const uint8_t* receivedData) {
 80035b2:	b480      	push	{r7}
 80035b4:	b085      	sub	sp, #20
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	6039      	str	r1, [r7, #0]
    // Kopiere die Daten
    for (int i = 0; i < 64; i++) {
 80035bc:	2300      	movs	r3, #0
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	e00b      	b.n	80035da <setReceivedData+0x28>
        uartData->receivedData[i] = receivedData[i];
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	4413      	add	r3, r2
 80035c8:	7819      	ldrb	r1, [r3, #0]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4413      	add	r3, r2
 80035d0:	460a      	mov	r2, r1
 80035d2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 64; i++) {
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	3301      	adds	r3, #1
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b3f      	cmp	r3, #63	; 0x3f
 80035de:	ddf0      	ble.n	80035c2 <setReceivedData+0x10>
    }
}
 80035e0:	bf00      	nop
 80035e2:	bf00      	nop
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <setDataIndex>:

void setDataIndex(UartData* uartData, int dataIndex) {
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	6039      	str	r1, [r7, #0]
    uartData->dataIndex = dataIndex;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <setMessageComplete>:

void setMessageComplete(UartData* uartData, int messageComplete) {
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	6039      	str	r1, [r7, #0]
    uartData->messageComplete = messageComplete;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	645a      	str	r2, [r3, #68]	; 0x44
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
	...

08003628 <createUartDataObject>:

// Konstruktor
UartDataObject createUartDataObject() {
 8003628:	b580      	push	{r7, lr}
 800362a:	b09c      	sub	sp, #112	; 0x70
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
    UartDataObject uartDataObject;
    uartDataObject.getReceivedData = &getReceivedData;
 8003630:	4b15      	ldr	r3, [pc, #84]	; (8003688 <createUartDataObject+0x60>)
 8003632:	657b      	str	r3, [r7, #84]	; 0x54
    uartDataObject.getDataIndex = &getDataIndex;
 8003634:	4b15      	ldr	r3, [pc, #84]	; (800368c <createUartDataObject+0x64>)
 8003636:	65bb      	str	r3, [r7, #88]	; 0x58
    uartDataObject.getMessageComplete = &getMessageComplete;
 8003638:	4b15      	ldr	r3, [pc, #84]	; (8003690 <createUartDataObject+0x68>)
 800363a:	65fb      	str	r3, [r7, #92]	; 0x5c
    uartDataObject.setReceivedData = &setReceivedData;
 800363c:	4b15      	ldr	r3, [pc, #84]	; (8003694 <createUartDataObject+0x6c>)
 800363e:	663b      	str	r3, [r7, #96]	; 0x60
    uartDataObject.setDataIndex = &setDataIndex;
 8003640:	4b15      	ldr	r3, [pc, #84]	; (8003698 <createUartDataObject+0x70>)
 8003642:	667b      	str	r3, [r7, #100]	; 0x64
    uartDataObject.setMessageComplete = &setMessageComplete;
 8003644:	4b15      	ldr	r3, [pc, #84]	; (800369c <createUartDataObject+0x74>)
 8003646:	66bb      	str	r3, [r7, #104]	; 0x68

    // Initialisiere die Daten
    for (int i = 0; i < 64; i++) {
 8003648:	2300      	movs	r3, #0
 800364a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800364c:	e008      	b.n	8003660 <createUartDataObject+0x38>
        uartDataObject.data.receivedData[i] = 0;
 800364e:	f107 020c 	add.w	r2, r7, #12
 8003652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003654:	4413      	add	r3, r2
 8003656:	2200      	movs	r2, #0
 8003658:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 64; i++) {
 800365a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800365c:	3301      	adds	r3, #1
 800365e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003662:	2b3f      	cmp	r3, #63	; 0x3f
 8003664:	ddf3      	ble.n	800364e <createUartDataObject+0x26>
    }
    uartDataObject.data.dataIndex = 0;
 8003666:	2300      	movs	r3, #0
 8003668:	64fb      	str	r3, [r7, #76]	; 0x4c
    uartDataObject.data.messageComplete = 0;
 800366a:	2300      	movs	r3, #0
 800366c:	653b      	str	r3, [r7, #80]	; 0x50

    return uartDataObject;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4618      	mov	r0, r3
 8003672:	f107 030c 	add.w	r3, r7, #12
 8003676:	2260      	movs	r2, #96	; 0x60
 8003678:	4619      	mov	r1, r3
 800367a:	f007 fa44 	bl	800ab06 <memcpy>
}
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	3770      	adds	r7, #112	; 0x70
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	0800356d 	.word	0x0800356d
 800368c:	08003583 	.word	0x08003583
 8003690:	0800359b 	.word	0x0800359b
 8003694:	080035b3 	.word	0x080035b3
 8003698:	080035ef 	.word	0x080035ef
 800369c:	0800360b 	.word	0x0800360b

080036a0 <createUartProcessor>:
#include <string.h>



// Funktion zur Initialisierung des UART-Prozessors
UartProcessor createUartProcessor(CommandEntry* dictionary) {
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
    UartProcessor uartProcessor;
    uartProcessor.commandDictionary = dictionary;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	60fb      	str	r3, [r7, #12]
    return uartProcessor;
 80036ac:	68fb      	ldr	r3, [r7, #12]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <strncasecmp>:

// Case-insensitive String-Vergleich
int strnicmp(const char *s1, const char *s2, size_t n) {
 80036ba:	b590      	push	{r4, r7, lr}
 80036bc:	b085      	sub	sp, #20
 80036be:	af00      	add	r7, sp, #0
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
    while (*s1 && *s2 && n > 0) {
 80036c6:	e019      	b.n	80036fc <strncasecmp+0x42>
        if (tolower(*s1) != tolower(*s2))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f005 fb51 	bl	8008d74 <tolower>
 80036d2:	4604      	mov	r4, r0
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f005 fb4b 	bl	8008d74 <tolower>
 80036de:	4603      	mov	r3, r0
 80036e0:	429c      	cmp	r4, r3
 80036e2:	d002      	beq.n	80036ea <strncasecmp+0x30>
            return -1;
 80036e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036e8:	e014      	b.n	8003714 <strncasecmp+0x5a>
        s1++;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	3301      	adds	r3, #1
 80036ee:	60fb      	str	r3, [r7, #12]
        s2++;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	3301      	adds	r3, #1
 80036f4:	60bb      	str	r3, [r7, #8]
        n--;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3b01      	subs	r3, #1
 80036fa:	607b      	str	r3, [r7, #4]
    while (*s1 && *s2 && n > 0) {
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d006      	beq.n	8003712 <strncasecmp+0x58>
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <strncasecmp+0x58>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1da      	bne.n	80036c8 <strncasecmp+0xe>
    }
    return 0;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	bd90      	pop	{r4, r7, pc}

0800371c <processCommand>:

void processCommand(uint8_t uartNr, UartProcessor* uartProcessor,uint8_t* receivedData,uint8_t receivedDataIndex) {
 800371c:	b590      	push	{r4, r7, lr}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	607a      	str	r2, [r7, #4]
 8003726:	461a      	mov	r2, r3
 8003728:	4603      	mov	r3, r0
 800372a:	73fb      	strb	r3, [r7, #15]
 800372c:	4613      	mov	r3, r2
 800372e:	73bb      	strb	r3, [r7, #14]
    for (int i = 0; uartProcessor->commandDictionary[i].command != NULL; ++i) {
 8003730:	2300      	movs	r3, #0
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	e025      	b.n	8003782 <processCommand+0x66>
    	if (strnicmp((char*)receivedData, uartProcessor->commandDictionary[i].command, strlen(uartProcessor->commandDictionary[i].command)) == 0) {
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	4413      	add	r3, r2
 8003740:	681c      	ldr	r4, [r3, #0]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	4413      	add	r3, r2
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fc fd96 	bl	8000280 <strlen>
 8003754:	4603      	mov	r3, r0
 8003756:	461a      	mov	r2, r3
 8003758:	4621      	mov	r1, r4
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff ffad 	bl	80036ba <strncasecmp>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10a      	bne.n	800377c <processCommand+0x60>
            // Rufe den entsprechenden Handler auf
    		uartProcessor->commandDictionary[i].functionPointer(uartNr, (char*)receivedData);
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	4413      	add	r3, r2
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	7bfa      	ldrb	r2, [r7, #15]
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	4610      	mov	r0, r2
 8003778:	4798      	blx	r3
            return;
 800377a:	e00a      	b.n	8003792 <processCommand+0x76>
    for (int i = 0; uartProcessor->commandDictionary[i].command != NULL; ++i) {
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	3301      	adds	r3, #1
 8003780:	617b      	str	r3, [r7, #20]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	4413      	add	r3, r2
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1d1      	bne.n	8003736 <processCommand+0x1a>
        }
    }
}
 8003792:	371c      	adds	r7, #28
 8003794:	46bd      	mov	sp, r7
 8003796:	bd90      	pop	{r4, r7, pc}

08003798 <changeState>:
 */

#include <Management/global_state_machine.h>

// Change the state of the State Machine
static void changeState(StateMachine *machine, State newState) {
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	70fb      	strb	r3, [r7, #3]
    switch (newState) {
 80037a4:	78fb      	ldrb	r3, [r7, #3]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d01a      	beq.n	80037e0 <changeState+0x48>
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	dc26      	bgt.n	80037fc <changeState+0x64>
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <changeState+0x20>
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d00e      	beq.n	80037d4 <changeState+0x3c>
        	machine->info.motor->setSpeed(machine->info.motor, 25);
        	HAL_TIM_Base_Start_IT(machine->info.timer);
            break;
        default:
            // Handle unknown state
            break;
 80037b6:	e021      	b.n	80037fc <changeState+0x64>
            machine->info.motor->setSpeed(machine->info.motor, 0);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6852      	ldr	r2, [r2, #4]
 80037c2:	2100      	movs	r1, #0
 80037c4:	4610      	mov	r0, r2
 80037c6:	4798      	blx	r3
            HAL_TIM_Base_Stop(machine->info.timer);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f003 f9fa 	bl	8006bc6 <HAL_TIM_Base_Stop>
            break;
 80037d2:	e014      	b.n	80037fe <changeState+0x66>
            HAL_TIM_Base_Stop(machine->info.timer);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	4618      	mov	r0, r3
 80037da:	f003 f9f4 	bl	8006bc6 <HAL_TIM_Base_Stop>
            break;
 80037de:	e00e      	b.n	80037fe <changeState+0x66>
        	machine->info.motor->setSpeed(machine->info.motor, 25);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6852      	ldr	r2, [r2, #4]
 80037ea:	2119      	movs	r1, #25
 80037ec:	4610      	mov	r0, r2
 80037ee:	4798      	blx	r3
        	HAL_TIM_Base_Start_IT(machine->info.timer);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f003 fa0d 	bl	8006c14 <HAL_TIM_Base_Start_IT>
            break;
 80037fa:	e000      	b.n	80037fe <changeState+0x66>
            break;
 80037fc:	bf00      	nop
    }
    machine->info.currentState = newState;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	78fa      	ldrb	r2, [r7, #3]
 8003802:	701a      	strb	r2, [r3, #0]
}
 8003804:	bf00      	nop
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <getState>:
// Get the current state of the State Machine
static State getState(const StateMachine *machine) {
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
    return machine->info.currentState;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	781b      	ldrb	r3, [r3, #0]
}
 8003818:	4618      	mov	r0, r3
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <checkBlobDetected>:

void checkBlobDetected(struct StateMachine *machine, float diameter){
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	ed87 0a00 	vstr	s0, [r7]
    if (diameter >= machine->info.upBound) {
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	edd3 7a05 	vldr	s15, [r3, #20]
 8003836:	ed97 7a00 	vldr	s14, [r7]
 800383a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800383e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003842:	da00      	bge.n	8003846 <checkBlobDetected+0x22>
        machine->setBlobDetected(machine,1);
    }
}
 8003844:	e004      	b.n	8003850 <checkBlobDetected+0x2c>
        machine->setBlobDetected(machine,1);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	2101      	movs	r1, #1
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	4798      	blx	r3
}
 8003850:	bf00      	nop
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <setBlobDetected>:

void setBlobDetected(struct StateMachine *machine, int blobDetected){
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
	machine->info.blobDetected = blobDetected;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	609a      	str	r2, [r3, #8]
	if(blobDetected == 1){
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d102      	bne.n	8003874 <setBlobDetected+0x1c>
		machine->info.currentState = STATE_IDLE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	701a      	strb	r2, [r3, #0]
	}
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <getBlobDetected>:
static int getBlobDetected(const struct StateMachine *machine){
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
	return machine->info.blobDetected;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
}
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <initStateMachine>:



// Initialization function for the State Machine
StateMachine initStateMachine(Motor* motor, TIM_HandleTypeDef* timer, float upBound){
 8003898:	b4b0      	push	{r4, r5, r7}
 800389a:	b091      	sub	sp, #68	; 0x44
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
 80038a4:	ed87 0a00 	vstr	s0, [r7]
    StateMachine machine;

    machine.info.motor = motor;
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	61bb      	str	r3, [r7, #24]
    machine.info.timer = timer;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	623b      	str	r3, [r7, #32]

    machine.changeState = changeState;
 80038b0:	4b10      	ldr	r3, [pc, #64]	; (80038f4 <initStateMachine+0x5c>)
 80038b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    machine.getState = getState;
 80038b4:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <initStateMachine+0x60>)
 80038b6:	633b      	str	r3, [r7, #48]	; 0x30
    machine.setBlobDetected = setBlobDetected;
 80038b8:	4b10      	ldr	r3, [pc, #64]	; (80038fc <initStateMachine+0x64>)
 80038ba:	63bb      	str	r3, [r7, #56]	; 0x38
    machine.getBlobDetected = getBlobDetected;
 80038bc:	4b10      	ldr	r3, [pc, #64]	; (8003900 <initStateMachine+0x68>)
 80038be:	637b      	str	r3, [r7, #52]	; 0x34
    machine.checkBlobDetected = checkBlobDetected;
 80038c0:	4b10      	ldr	r3, [pc, #64]	; (8003904 <initStateMachine+0x6c>)
 80038c2:	63fb      	str	r3, [r7, #60]	; 0x3c

    // Set initial state and initialize motor
    machine.info.currentState = STATE_IDLE;
 80038c4:	2300      	movs	r3, #0
 80038c6:	753b      	strb	r3, [r7, #20]
    machine.info.blobDetected = 0;
 80038c8:	2300      	movs	r3, #0
 80038ca:	61fb      	str	r3, [r7, #28]
    machine.info.upBound = upBound;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	62bb      	str	r3, [r7, #40]	; 0x28


    return machine;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	461d      	mov	r5, r3
 80038d4:	f107 0414 	add.w	r4, r7, #20
 80038d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038e0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80038e4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	3744      	adds	r7, #68	; 0x44
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bcb0      	pop	{r4, r5, r7}
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	08003799 	.word	0x08003799
 80038f8:	0800380d 	.word	0x0800380d
 80038fc:	08003859 	.word	0x08003859
 8003900:	08003881 	.word	0x08003881
 8003904:	08003825 	.word	0x08003825

08003908 <set_kp>:
 *  Created on: Jan 3, 2024
 *      Author: Daniel Alf
 */
#include "Regelung/pid_controller.h"

void set_kp(PIDController *pid, float kp) {
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	ed87 0a00 	vstr	s0, [r7]
    pid->data.kp = kp;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	601a      	str	r2, [r3, #0]
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <get_kp>:

float get_kp(const PIDController *pid) {
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
    return pid->data.kp;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	ee07 3a90 	vmov	s15, r3
}
 8003936:	eeb0 0a67 	vmov.f32	s0, s15
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <set_ki>:

void set_ki(PIDController *pid, float ki) {
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	ed87 0a00 	vstr	s0, [r7]
	pid->data.ki = ki;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	605a      	str	r2, [r3, #4]
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <get_ki>:

float get_ki(const PIDController *pid) {
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
    return pid->data.ki;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	ee07 3a90 	vmov	s15, r3
}
 8003972:	eeb0 0a67 	vmov.f32	s0, s15
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <set_kd>:

void set_kd(PIDController *pid, float kd) {
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	ed87 0a00 	vstr	s0, [r7]
	pid->data.kd = kd;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	609a      	str	r2, [r3, #8]
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <get_kd>:

float get_kd(const PIDController *pid) {
 800399e:	b480      	push	{r7}
 80039a0:	b083      	sub	sp, #12
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
    return pid->data.kd;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	ee07 3a90 	vmov	s15, r3
}
 80039ae:	eeb0 0a67 	vmov.f32	s0, s15
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <set_setPoint>:
void set_setPoint(PIDController *pid, float setPoint) {
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	ed87 0a00 	vstr	s0, [r7]
	pid->data.setpoint = setPoint;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	60da      	str	r2, [r3, #12]
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <get_setPoint>:

float get_setPoint(const PIDController *pid) {
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
    return pid->data.setpoint;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	ee07 3a90 	vmov	s15, r3
}
 80039ea:	eeb0 0a67 	vmov.f32	s0, s15
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <pid_update>:
float pid_update(PIDController *pid, float current_value) {
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	ed87 0a00 	vstr	s0, [r7]
    // Berechne den Fehler
    float error = pid->data.setpoint - current_value;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	ed93 7a03 	vldr	s14, [r3, #12]
 8003a0a:	edd7 7a00 	vldr	s15, [r7]
 8003a0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a12:	edc7 7a05 	vstr	s15, [r7, #20]

    // Berechne den Proportionalanteil
    float p_term = pid->data.kp * error;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	edd3 7a00 	vldr	s15, [r3]
 8003a1c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a24:	edc7 7a04 	vstr	s15, [r7, #16]

    // Summe der Anteile für die Ausgabe
    float output = p_term;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	60fb      	str	r3, [r7, #12]

    return output;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	ee07 3a90 	vmov	s15, r3
}
 8003a32:	eeb0 0a67 	vmov.f32	s0, s15
 8003a36:	371c      	adds	r7, #28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <pid_init>:

PIDController pid_init(float kp, float ki, float kd, float setpoint) {
 8003a40:	b4b0      	push	{r4, r5, r7}
 8003a42:	b097      	sub	sp, #92	; 0x5c
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6178      	str	r0, [r7, #20]
 8003a48:	ed87 0a04 	vstr	s0, [r7, #16]
 8003a4c:	edc7 0a03 	vstr	s1, [r7, #12]
 8003a50:	ed87 1a02 	vstr	s2, [r7, #8]
 8003a54:	edc7 1a01 	vstr	s3, [r7, #4]
    PIDController pidController;
    pidController.data.kp = kp;
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	61fb      	str	r3, [r7, #28]
    pidController.data.ki = ki;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	623b      	str	r3, [r7, #32]
    pidController.data.kd = kd;
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
    pidController.data.setpoint = 0.0;
 8003a64:	f04f 0300 	mov.w	r3, #0
 8003a68:	62bb      	str	r3, [r7, #40]	; 0x28
    pidController.data.last_error = 0.0;
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    pidController.data.integral = 0.0;
 8003a70:	f04f 0300 	mov.w	r3, #0
 8003a74:	633b      	str	r3, [r7, #48]	; 0x30
    pidController.data.setpoint = setpoint;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	62bb      	str	r3, [r7, #40]	; 0x28

    //Initialisierung der getter FUnktionen
    pidController.get_kp = get_kp;
 8003a7a:	4b12      	ldr	r3, [pc, #72]	; (8003ac4 <pid_init+0x84>)
 8003a7c:	637b      	str	r3, [r7, #52]	; 0x34
    pidController.get_ki = get_ki;
 8003a7e:	4b12      	ldr	r3, [pc, #72]	; (8003ac8 <pid_init+0x88>)
 8003a80:	63bb      	str	r3, [r7, #56]	; 0x38
    pidController.get_kd = get_kd;
 8003a82:	4b12      	ldr	r3, [pc, #72]	; (8003acc <pid_init+0x8c>)
 8003a84:	63fb      	str	r3, [r7, #60]	; 0x3c
    pidController.get_setPoint = get_setPoint;
 8003a86:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <pid_init+0x90>)
 8003a88:	643b      	str	r3, [r7, #64]	; 0x40

    //Initialisierung der setter Funktionen
    pidController.set_kp = set_kp;
 8003a8a:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <pid_init+0x94>)
 8003a8c:	647b      	str	r3, [r7, #68]	; 0x44
    pidController.set_ki = set_ki;
 8003a8e:	4b12      	ldr	r3, [pc, #72]	; (8003ad8 <pid_init+0x98>)
 8003a90:	64bb      	str	r3, [r7, #72]	; 0x48
    pidController.set_kd = set_kd;
 8003a92:	4b12      	ldr	r3, [pc, #72]	; (8003adc <pid_init+0x9c>)
 8003a94:	64fb      	str	r3, [r7, #76]	; 0x4c
    pidController.set_setPoint = set_setPoint;
 8003a96:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <pid_init+0xa0>)
 8003a98:	653b      	str	r3, [r7, #80]	; 0x50

    pidController.pid_update = pid_update;
 8003a9a:	4b12      	ldr	r3, [pc, #72]	; (8003ae4 <pid_init+0xa4>)
 8003a9c:	657b      	str	r3, [r7, #84]	; 0x54

    return pidController;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	461d      	mov	r5, r3
 8003aa2:	f107 041c 	add.w	r4, r7, #28
 8003aa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ab0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ab2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003ab6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8003aba:	6978      	ldr	r0, [r7, #20]
 8003abc:	375c      	adds	r7, #92	; 0x5c
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bcb0      	pop	{r4, r5, r7}
 8003ac2:	4770      	bx	lr
 8003ac4:	08003927 	.word	0x08003927
 8003ac8:	08003963 	.word	0x08003963
 8003acc:	0800399f 	.word	0x0800399f
 8003ad0:	080039db 	.word	0x080039db
 8003ad4:	08003909 	.word	0x08003909
 8003ad8:	08003945 	.word	0x08003945
 8003adc:	08003981 	.word	0x08003981
 8003ae0:	080039bd 	.word	0x080039bd
 8003ae4:	080039f9 	.word	0x080039f9

08003ae8 <getSpeed>:
 */

#include <SensorActuators/motor.h>
#include "stm32f4xx_hal.h"
// Implementierung der Getter-Methode für die Geschwindigkeit des Motors
int getSpeed(const Motor *motor) {
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
    return motor->info.speed;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <setSpeed>:

// Implementierung der Setter-Methode für die Geschwindigkeit des Motors
void setSpeed(Motor *motor, int speed) {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
	if(speed <= 0){
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	dc09      	bgt.n	8003b24 <setSpeed+0x24>
		HAL_TIM_PWM_Stop(motor->info.timer, 0);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2100      	movs	r1, #0
 8003b16:	4618      	mov	r0, r3
 8003b18:	f003 f9e8 	bl	8006eec <HAL_TIM_PWM_Stop>
	    motor->info.speed = 0;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
		return;
 8003b22:	e01e      	b.n	8003b62 <setSpeed+0x62>
	}

	if(speed > 100){
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2b64      	cmp	r3, #100	; 0x64
 8003b28:	dc1a      	bgt.n	8003b60 <setSpeed+0x60>
		return;
	}
    motor->info.speed = speed;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	601a      	str	r2, [r3, #0]
	  // Geschwindigkeit in Frequenz umrechnen
	int frequency = (speed * 3200) / 60;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8003b36:	fb02 f303 	mul.w	r3, r2, r3
 8003b3a:	4a0b      	ldr	r2, [pc, #44]	; (8003b68 <setSpeed+0x68>)
 8003b3c:	fb82 1203 	smull	r1, r2, r2, r3
 8003b40:	441a      	add	r2, r3
 8003b42:	1152      	asrs	r2, r2, #5
 8003b44:	17db      	asrs	r3, r3, #31
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	60fb      	str	r3, [r7, #12]

	      // PWM-Signal generieren
	generatePWM(motor,frequency);
 8003b4a:	68f9      	ldr	r1, [r7, #12]
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f80d 	bl	8003b6c <generatePWM>
	HAL_TIM_PWM_Start(motor->info.timer, 0);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2100      	movs	r1, #0
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f003 f917 	bl	8006d8c <HAL_TIM_PWM_Start>
 8003b5e:	e000      	b.n	8003b62 <setSpeed+0x62>
		return;
 8003b60:	bf00      	nop

}
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	88888889 	.word	0x88888889

08003b6c <generatePWM>:

void generatePWM(Motor *motor, int frequency) {
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b090      	sub	sp, #64	; 0x40
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
	  uint32_t period = (HAL_RCC_GetHCLKFreq() / ((motor->info.timer->Init.Prescaler + 1)* frequency)) - 1;
 8003b76:	f002 f9fb 	bl	8005f70 <HAL_RCC_GetHCLKFreq>
 8003b7a:	4601      	mov	r1, r0
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	3301      	adds	r3, #1
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	fb02 f303 	mul.w	r3, r2, r3
 8003b8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	63fb      	str	r3, [r7, #60]	; 0x3c

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	605a      	str	r2, [r3, #4]
 8003b9c:	609a      	str	r2, [r3, #8]
 8003b9e:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8003baa:	f107 0308 	add.w	r3, r7, #8
 8003bae:	2200      	movs	r2, #0
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	605a      	str	r2, [r3, #4]
 8003bb4:	609a      	str	r2, [r3, #8]
 8003bb6:	60da      	str	r2, [r3, #12]
 8003bb8:	611a      	str	r2, [r3, #16]
 8003bba:	615a      	str	r2, [r3, #20]
 8003bbc:	619a      	str	r2, [r3, #24]

	  motor->info.timer->Init.Period = period; //26250-1
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bc4:	60da      	str	r2, [r3, #12]
	  HAL_TIM_Base_Init(motor->info.timer);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f002 ffac 	bl	8006b28 <HAL_TIM_Base_Init>
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  HAL_TIM_ConfigClockSource(motor->info.timer, &sClockSourceConfig);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003bde:	4611      	mov	r1, r2
 8003be0:	4618      	mov	r0, r3
 8003be2:	f003 fbb1 	bl	8007348 <HAL_TIM_ConfigClockSource>
	  HAL_TIM_PWM_Init(motor->info.timer);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f003 f874 	bl	8006cd8 <HAL_TIM_PWM_Init>
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_TIMEx_MasterConfigSynchronization(motor->info.timer, &sMasterConfig);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003c00:	4611      	mov	r1, r2
 8003c02:	4618      	mov	r0, r3
 8003c04:	f003 ff66 	bl	8007ad4 <HAL_TIMEx_MasterConfigSynchronization>
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c08:	2360      	movs	r3, #96	; 0x60
 8003c0a:	60bb      	str	r3, [r7, #8]
	  sConfigOC.Pulse = motor->info.timer->Init.Period / 2; //13125-1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	085b      	lsrs	r3, r3, #1
 8003c14:	60fb      	str	r3, [r7, #12]
	  HAL_TIM_PWM_ConfigChannel(motor->info.timer, &sConfigOC, TIM_CHANNEL_1);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f107 0108 	add.w	r1, r7, #8
 8003c1e:	2200      	movs	r2, #0
 8003c20:	4618      	mov	r0, r3
 8003c22:	f003 facf 	bl	80071c4 <HAL_TIM_PWM_ConfigChannel>
	  HAL_TIM_MspPostInit(motor->info.timer);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fed6 	bl	80049dc <HAL_TIM_MspPostInit>


}
 8003c30:	bf00      	nop
 8003c32:	3740      	adds	r7, #64	; 0x40
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <initMotor>:

// Implementierung des Konstruktors für den Motor
Motor initMotor(TIM_HandleTypeDef *timer) {
 8003c38:	b490      	push	{r4, r7}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
    Motor newMotor;
    newMotor.info.speed = 0;
 8003c42:	2300      	movs	r3, #0
 8003c44:	60bb      	str	r3, [r7, #8]
    newMotor.info.timer = timer;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	60fb      	str	r3, [r7, #12]
    newMotor.getSpeed = &getSpeed;
 8003c4a:	4b08      	ldr	r3, [pc, #32]	; (8003c6c <initMotor+0x34>)
 8003c4c:	613b      	str	r3, [r7, #16]
    newMotor.setSpeed = &setSpeed;
 8003c4e:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <initMotor+0x38>)
 8003c50:	617b      	str	r3, [r7, #20]
    return newMotor;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	461c      	mov	r4, r3
 8003c56:	f107 0308 	add.w	r3, r7, #8
 8003c5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bc90      	pop	{r4, r7}
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	08003ae9 	.word	0x08003ae9
 8003c70:	08003b01 	.word	0x08003b01

08003c74 <getDiameter>:
#include <stdlib.h>
#include <stdint.h>
#include <SensorActuators/sensor.h>

// Getter-Methoden
float getDiameter(const Sensor* sensor) {
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
    return sensor->info.diameter;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	ee07 3a90 	vmov	s15, r3
}
 8003c84:	eeb0 0a67 	vmov.f32	s0, s15
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <getUartPort>:
char getPosition(const Sensor* sensor) {
	return sensor->info.position;
}
uint8_t getUartPort(const Sensor* sensor) {
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
	return sensor->info.uartPort;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	795b      	ldrb	r3, [r3, #5]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <setDiameter>:

// Setter-Methoden
void setDiameter(Sensor* sensor, float diameter) {
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
 8003cb2:	ed87 0a00 	vstr	s0, [r7]
    sensor->info.diameter = diameter;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	601a      	str	r2, [r3, #0]
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <initSensor>:
}
void setUartPort(Sensor* sensor, uint8_t port){
	sensor->info.uartPort = port;
}
// Konstruktor
Sensor initSensor(float diameter, uint8_t port) {
 8003cc8:	b4b0      	push	{r4, r5, r7}
 8003cca:	b08d      	sub	sp, #52	; 0x34
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	71fb      	strb	r3, [r7, #7]
    Sensor sensor;
    sensor.info.diameter = diameter;
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	613b      	str	r3, [r7, #16]
    sensor.info.uartPort = port;
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	757b      	strb	r3, [r7, #21]

    // Initialisiere die Getter-Funktionen
    sensor.getDiameter = getDiameter;
 8003ce0:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <initSensor+0x44>)
 8003ce2:	61bb      	str	r3, [r7, #24]
    sensor.getUartPort = getUartPort;
 8003ce4:	4b0a      	ldr	r3, [pc, #40]	; (8003d10 <initSensor+0x48>)
 8003ce6:	623b      	str	r3, [r7, #32]

    // Initialisiere die Setter-Funktionen
    sensor.setDiameter = setDiameter;
 8003ce8:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <initSensor+0x4c>)
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24

    return sensor;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	461d      	mov	r5, r3
 8003cf0:	f107 0410 	add.w	r4, r7, #16
 8003cf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cf8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003cfc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	3734      	adds	r7, #52	; 0x34
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bcb0      	pop	{r4, r5, r7}
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	08003c75 	.word	0x08003c75
 8003d10:	08003c93 	.word	0x08003c93
 8003d14:	08003cab 	.word	0x08003cab

08003d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d18:	b5b0      	push	{r4, r5, r7, lr}
 8003d1a:	b0b2      	sub	sp, #200	; 0xc8
 8003d1c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d1e:	f001 f8eb 	bl	8004ef8 <HAL_Init>

  /* USER CODE BEGIN Init */
  sensorExtruder = initSensor(1.57, 1);
 8003d22:	4cb4      	ldr	r4, [pc, #720]	; (8003ff4 <main+0x2dc>)
 8003d24:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003d28:	2101      	movs	r1, #1
 8003d2a:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8003ff8 <main+0x2e0>
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff ffca 	bl	8003cc8 <initSensor>
 8003d34:	4625      	mov	r5, r4
 8003d36:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8003d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003d42:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  sensorBack 	 = initSensor(1.58, 6);
 8003d46:	4cad      	ldr	r4, [pc, #692]	; (8003ffc <main+0x2e4>)
 8003d48:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003d4c:	2106      	movs	r1, #6
 8003d4e:	ed9f 0aac 	vldr	s0, [pc, #688]	; 8004000 <main+0x2e8>
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff ffb8 	bl	8003cc8 <initSensor>
 8003d58:	4625      	mov	r5, r4
 8003d5a:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8003d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d62:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003d66:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  motor 		 = initMotor(&htim1);
 8003d6a:	4ca6      	ldr	r4, [pc, #664]	; (8004004 <main+0x2ec>)
 8003d6c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003d70:	49a5      	ldr	r1, [pc, #660]	; (8004008 <main+0x2f0>)
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff ff60 	bl	8003c38 <initMotor>
 8003d78:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003d7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  int updateFaultHMI = 1;
 8003d82:	2301      	movs	r3, #1
 8003d84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d88:	f000 f968 	bl	800405c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d8c:	f000 fbaa 	bl	80044e4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003d90:	f000 f9ce 	bl	8004130 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003d94:	f000 fa02 	bl	800419c <MX_SPI2_Init>
  MX_TIM1_Init();
 8003d98:	f000 fa36 	bl	8004208 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8003d9c:	f000 fb24 	bl	80043e8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003da0:	f000 fb4c 	bl	800443c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8003da4:	f000 fb74 	bl	8004490 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8003da8:	f000 fad0 	bl	800434c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init(&hspi1, LCD_CS_GPIO_Port, LCD_CS_Pin, LCD_DC_GPIO_Port, LCD_DC_Pin, LCD_RST_GPIO_Port, LCD_RST_Pin);
 8003dac:	2380      	movs	r3, #128	; 0x80
 8003dae:	9302      	str	r3, [sp, #8]
 8003db0:	4b96      	ldr	r3, [pc, #600]	; (800400c <main+0x2f4>)
 8003db2:	9301      	str	r3, [sp, #4]
 8003db4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	4b95      	ldr	r3, [pc, #596]	; (8004010 <main+0x2f8>)
 8003dbc:	2240      	movs	r2, #64	; 0x40
 8003dbe:	4995      	ldr	r1, [pc, #596]	; (8004014 <main+0x2fc>)
 8003dc0:	4895      	ldr	r0, [pc, #596]	; (8004018 <main+0x300>)
 8003dc2:	f7fd f9d1 	bl	8001168 <ILI9341_Init>
  ILI9341_setRotation(2);
 8003dc6:	2002      	movs	r0, #2
 8003dc8:	f7fd fe5a 	bl	8001a80 <ILI9341_setRotation>
  ILI9341_Fill(COLOR_NAVY);
 8003dcc:	200f      	movs	r0, #15
 8003dce:	f7fd faab 	bl	8001328 <ILI9341_Fill>
  TSC2046_Begin(&hspi2, TS_CS_GPIO_Port, TS_CS_Pin);
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	498f      	ldr	r1, [pc, #572]	; (8004014 <main+0x2fc>)
 8003dd6:	4891      	ldr	r0, [pc, #580]	; (800401c <main+0x304>)
 8003dd8:	f7fe f89e 	bl	8001f18 <TSC2046_Begin>



  HAL_TIM_PWM_Start(&htim1, 0);
 8003ddc:	2100      	movs	r1, #0
 8003dde:	488a      	ldr	r0, [pc, #552]	; (8004008 <main+0x2f0>)
 8003de0:	f002 ffd4 	bl	8006d8c <HAL_TIM_PWM_Start>
  stateMachine = initStateMachine(&motor,&htim3,2.5);
 8003de4:	4c8e      	ldr	r4, [pc, #568]	; (8004020 <main+0x308>)
 8003de6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003dea:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 8003dee:	4a8d      	ldr	r2, [pc, #564]	; (8004024 <main+0x30c>)
 8003df0:	4984      	ldr	r1, [pc, #528]	; (8004004 <main+0x2ec>)
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff fd50 	bl	8003898 <initStateMachine>
 8003df8:	4625      	mov	r5, r4
 8003dfa:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8003dfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e06:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003e0a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  pidController = pid_init(1.0, 0.0,0.0, 1.75);
 8003e0e:	4c86      	ldr	r4, [pc, #536]	; (8004028 <main+0x310>)
 8003e10:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003e14:	eef7 1a0c 	vmov.f32	s3, #124	; 0x3fe00000  1.750
 8003e18:	ed9f 1a84 	vldr	s2, [pc, #528]	; 800402c <main+0x314>
 8003e1c:	eddf 0a83 	vldr	s1, [pc, #524]	; 800402c <main+0x314>
 8003e20:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff fe0b 	bl	8003a40 <pid_init>
 8003e2a:	4625      	mov	r5, r4
 8003e2c:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8003e30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e3c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003e40:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  uartDataPc 		     = createUartDataObject();
 8003e44:	4c7a      	ldr	r4, [pc, #488]	; (8004030 <main+0x318>)
 8003e46:	463b      	mov	r3, r7
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff fbed 	bl	8003628 <createUartDataObject>
 8003e4e:	4620      	mov	r0, r4
 8003e50:	463b      	mov	r3, r7
 8003e52:	2260      	movs	r2, #96	; 0x60
 8003e54:	4619      	mov	r1, r3
 8003e56:	f006 fe56 	bl	800ab06 <memcpy>
  uartDataSensorExtruder = createUartDataObject();
 8003e5a:	4c76      	ldr	r4, [pc, #472]	; (8004034 <main+0x31c>)
 8003e5c:	463b      	mov	r3, r7
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff fbe2 	bl	8003628 <createUartDataObject>
 8003e64:	4620      	mov	r0, r4
 8003e66:	463b      	mov	r3, r7
 8003e68:	2260      	movs	r2, #96	; 0x60
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	f006 fe4b 	bl	800ab06 <memcpy>
  uartDataSensorBack	 = createUartDataObject();
 8003e70:	4c71      	ldr	r4, [pc, #452]	; (8004038 <main+0x320>)
 8003e72:	463b      	mov	r3, r7
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff fbd7 	bl	8003628 <createUartDataObject>
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	463b      	mov	r3, r7
 8003e7e:	2260      	movs	r2, #96	; 0x60
 8003e80:	4619      	mov	r1, r3
 8003e82:	f006 fe40 	bl	800ab06 <memcpy>
  pcSender 		= createPcSendHandler(10);
 8003e86:	4c6d      	ldr	r4, [pc, #436]	; (800403c <main+0x324>)
 8003e88:	463b      	mov	r3, r7
 8003e8a:	210a      	movs	r1, #10
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff fa07 	bl	80032a0 <createPcSendHandler>
 8003e92:	4625      	mov	r5, r4
 8003e94:	463c      	mov	r4, r7
 8003e96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e9a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003e9e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  pcReciever 	= createPcReceiveHandler(&stateMachine,&pidController, &motor, &pcSender, &huart2);
 8003ea2:	4c67      	ldr	r4, [pc, #412]	; (8004040 <main+0x328>)
 8003ea4:	4638      	mov	r0, r7
 8003ea6:	4b67      	ldr	r3, [pc, #412]	; (8004044 <main+0x32c>)
 8003ea8:	9301      	str	r3, [sp, #4]
 8003eaa:	4b64      	ldr	r3, [pc, #400]	; (800403c <main+0x324>)
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	4b55      	ldr	r3, [pc, #340]	; (8004004 <main+0x2ec>)
 8003eb0:	4a5d      	ldr	r2, [pc, #372]	; (8004028 <main+0x310>)
 8003eb2:	495b      	ldr	r1, [pc, #364]	; (8004020 <main+0x308>)
 8003eb4:	f7fe fd38 	bl	8002928 <createPcReceiveHandler>
 8003eb8:	4625      	mov	r5, r4
 8003eba:	463c      	mov	r4, r7
 8003ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ec0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ec4:	e885 0003 	stmia.w	r5, {r0, r1}
  sensorReciever = createSensorReceiveHandler(&sensorExtruder, &sensorBack,&stateMachine, &hmi);
 8003ec8:	4c5f      	ldr	r4, [pc, #380]	; (8004048 <main+0x330>)
 8003eca:	4638      	mov	r0, r7
 8003ecc:	4b5f      	ldr	r3, [pc, #380]	; (800404c <main+0x334>)
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	4b53      	ldr	r3, [pc, #332]	; (8004020 <main+0x308>)
 8003ed2:	4a4a      	ldr	r2, [pc, #296]	; (8003ffc <main+0x2e4>)
 8003ed4:	4947      	ldr	r1, [pc, #284]	; (8003ff4 <main+0x2dc>)
 8003ed6:	f7ff fa15 	bl	8003304 <createSensorReceiveHandler>
 8003eda:	4625      	mov	r5, r4
 8003edc:	463c      	mov	r4, r7
 8003ede:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ee0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ee2:	6823      	ldr	r3, [r4, #0]
 8003ee4:	602b      	str	r3, [r5, #0]
  HAL_UART_Receive_IT(&huart1, (uint8_t *)uartDataSensorExtruder.data.receivedData, 1);
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	4952      	ldr	r1, [pc, #328]	; (8004034 <main+0x31c>)
 8003eea:	4859      	ldr	r0, [pc, #356]	; (8004050 <main+0x338>)
 8003eec:	f003 ffa5 	bl	8007e3a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, (uint8_t *)uartDataSensorBack.data.receivedData, 1);
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	4951      	ldr	r1, [pc, #324]	; (8004038 <main+0x320>)
 8003ef4:	4857      	ldr	r0, [pc, #348]	; (8004054 <main+0x33c>)
 8003ef6:	f003 ffa0 	bl	8007e3a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *)uartDataPc.data.receivedData, 1);
 8003efa:	2201      	movs	r2, #1
 8003efc:	494c      	ldr	r1, [pc, #304]	; (8004030 <main+0x318>)
 8003efe:	4851      	ldr	r0, [pc, #324]	; (8004044 <main+0x32c>)
 8003f00:	f003 ff9b 	bl	8007e3a <HAL_UART_Receive_IT>

  hmi = HMI_init(&stateMachine, &sensorExtruder, &sensorBack);
 8003f04:	4c51      	ldr	r4, [pc, #324]	; (800404c <main+0x334>)
 8003f06:	4638      	mov	r0, r7
 8003f08:	4b3c      	ldr	r3, [pc, #240]	; (8003ffc <main+0x2e4>)
 8003f0a:	4a3a      	ldr	r2, [pc, #232]	; (8003ff4 <main+0x2dc>)
 8003f0c:	4944      	ldr	r1, [pc, #272]	; (8004020 <main+0x308>)
 8003f0e:	f7fe f917 	bl	8002140 <HMI_init>
 8003f12:	463b      	mov	r3, r7
 8003f14:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003f18:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  HAL_GPIO_WritePin(GPIOB, MOTOR_GND_Pin, GPIO_PIN_RESET);
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f22:	483c      	ldr	r0, [pc, #240]	; (8004014 <main+0x2fc>)
 8003f24:	f001 fba6 	bl	8005674 <HAL_GPIO_WritePin>

    /* USER CODE BEGIN 3 */
	  // Check Blob Detected
	  //stateMachine.checkBlobDetected(&stateMachine,sensorBack.getDiameter(&sensorBack));

	  myTS_Handle = TSC2046_GetTouchData();
 8003f28:	4c4b      	ldr	r4, [pc, #300]	; (8004058 <main+0x340>)
 8003f2a:	463b      	mov	r3, r7
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fe f89b 	bl	8002068 <TSC2046_GetTouchData>
 8003f32:	4622      	mov	r2, r4
 8003f34:	463b      	mov	r3, r7
 8003f36:	6818      	ldr	r0, [r3, #0]
 8003f38:	6010      	str	r0, [r2, #0]
 8003f3a:	889b      	ldrh	r3, [r3, #4]
 8003f3c:	8093      	strh	r3, [r2, #4]
	  HMI_getTouch(&hmi, myTS_Handle,&motor, &pidController);
 8003f3e:	4a46      	ldr	r2, [pc, #280]	; (8004058 <main+0x340>)
 8003f40:	4b39      	ldr	r3, [pc, #228]	; (8004028 <main+0x310>)
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	4b2f      	ldr	r3, [pc, #188]	; (8004004 <main+0x2ec>)
 8003f46:	ca06      	ldmia	r2, {r1, r2}
 8003f48:	4840      	ldr	r0, [pc, #256]	; (800404c <main+0x334>)
 8003f4a:	f7fe fb91 	bl	8002670 <HMI_getTouch>
	  updateFaultHMI = HMI_checkBlob(&hmi, myTS_Handle, updateFaultHMI);
 8003f4e:	4a42      	ldr	r2, [pc, #264]	; (8004058 <main+0x340>)
 8003f50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f54:	ca06      	ldmia	r2, {r1, r2}
 8003f56:	483d      	ldr	r0, [pc, #244]	; (800404c <main+0x334>)
 8003f58:	f7fe f9ae 	bl	80022b8 <HMI_checkBlob>
 8003f5c:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
	  HMI_signallight_check_blob(&stateMachine, fault_Pin);
 8003f60:	2120      	movs	r1, #32
 8003f62:	482f      	ldr	r0, [pc, #188]	; (8004020 <main+0x308>)
 8003f64:	f7fe fcc0 	bl	80028e8 <HMI_signallight_check_blob>



	  if(uartDataPc.data.messageComplete){
 8003f68:	4b31      	ldr	r3, [pc, #196]	; (8004030 <main+0x318>)
 8003f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d012      	beq.n	8003f96 <main+0x27e>
		processPcInterfaceMessage(&pcReciever, uartDataPc.data.receivedData, uartDataPc.data.dataIndex);
 8003f70:	4b2f      	ldr	r3, [pc, #188]	; (8004030 <main+0x318>)
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	461a      	mov	r2, r3
 8003f78:	492d      	ldr	r1, [pc, #180]	; (8004030 <main+0x318>)
 8003f7a:	4831      	ldr	r0, [pc, #196]	; (8004040 <main+0x328>)
 8003f7c:	f7fe fe3e 	bl	8002bfc <processPcInterfaceMessage>
		// Zurücksetzen für die nächste Nachricht
		uartDataPc.data.messageComplete = 0;
 8003f80:	4b2b      	ldr	r3, [pc, #172]	; (8004030 <main+0x318>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	645a      	str	r2, [r3, #68]	; 0x44
		uartDataPc.data.dataIndex = 0;
 8003f86:	4b2a      	ldr	r3, [pc, #168]	; (8004030 <main+0x318>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_UART_Receive_IT(&huart2, (uint8_t *)uartDataPc.data.receivedData, 1);
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	4928      	ldr	r1, [pc, #160]	; (8004030 <main+0x318>)
 8003f90:	482c      	ldr	r0, [pc, #176]	; (8004044 <main+0x32c>)
 8003f92:	f003 ff52 	bl	8007e3a <HAL_UART_Receive_IT>

	  }
	  if(uartDataSensorExtruder.data.messageComplete){
 8003f96:	4b27      	ldr	r3, [pc, #156]	; (8004034 <main+0x31c>)
 8003f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d012      	beq.n	8003fc4 <main+0x2ac>
		processSensorInterfaceMessage(1,&sensorReciever, uartDataSensorExtruder.data.receivedData, uartDataSensorExtruder.data.dataIndex);
 8003f9e:	4b25      	ldr	r3, [pc, #148]	; (8004034 <main+0x31c>)
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	4a23      	ldr	r2, [pc, #140]	; (8004034 <main+0x31c>)
 8003fa6:	4928      	ldr	r1, [pc, #160]	; (8004048 <main+0x330>)
 8003fa8:	2001      	movs	r0, #1
 8003faa:	f7ff fac9 	bl	8003540 <processSensorInterfaceMessage>
		// Zurücksetzen für die nächste Nachricht
		uartDataSensorExtruder.data.messageComplete = 0;
 8003fae:	4b21      	ldr	r3, [pc, #132]	; (8004034 <main+0x31c>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	645a      	str	r2, [r3, #68]	; 0x44
		uartDataSensorExtruder.data.dataIndex = 0;
 8003fb4:	4b1f      	ldr	r3, [pc, #124]	; (8004034 <main+0x31c>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_UART_Receive_IT(&huart1, (uint8_t *)uartDataSensorExtruder.data.receivedData, 1);
 8003fba:	2201      	movs	r2, #1
 8003fbc:	491d      	ldr	r1, [pc, #116]	; (8004034 <main+0x31c>)
 8003fbe:	4824      	ldr	r0, [pc, #144]	; (8004050 <main+0x338>)
 8003fc0:	f003 ff3b 	bl	8007e3a <HAL_UART_Receive_IT>
	  }
	  if(uartDataSensorBack.data.messageComplete){
 8003fc4:	4b1c      	ldr	r3, [pc, #112]	; (8004038 <main+0x320>)
 8003fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0ad      	beq.n	8003f28 <main+0x210>
		processSensorInterfaceMessage(6,&sensorReciever, uartDataSensorBack.data.receivedData, uartDataSensorBack.data.dataIndex);
 8003fcc:	4b1a      	ldr	r3, [pc, #104]	; (8004038 <main+0x320>)
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	4a19      	ldr	r2, [pc, #100]	; (8004038 <main+0x320>)
 8003fd4:	491c      	ldr	r1, [pc, #112]	; (8004048 <main+0x330>)
 8003fd6:	2006      	movs	r0, #6
 8003fd8:	f7ff fab2 	bl	8003540 <processSensorInterfaceMessage>
		// Zurücksetzen für die nächste Nachricht
		uartDataSensorBack.data.messageComplete = 0;
 8003fdc:	4b16      	ldr	r3, [pc, #88]	; (8004038 <main+0x320>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	645a      	str	r2, [r3, #68]	; 0x44
		uartDataSensorBack.data.dataIndex = 0;
 8003fe2:	4b15      	ldr	r3, [pc, #84]	; (8004038 <main+0x320>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_UART_Receive_IT(&huart6, (uint8_t *)uartDataSensorBack.data.receivedData, 1);
 8003fe8:	2201      	movs	r2, #1
 8003fea:	4913      	ldr	r1, [pc, #76]	; (8004038 <main+0x320>)
 8003fec:	4819      	ldr	r0, [pc, #100]	; (8004054 <main+0x33c>)
 8003fee:	f003 ff24 	bl	8007e3a <HAL_UART_Receive_IT>
	  myTS_Handle = TSC2046_GetTouchData();
 8003ff2:	e799      	b.n	8003f28 <main+0x210>
 8003ff4:	20000588 	.word	0x20000588
 8003ff8:	3fc8f5c3 	.word	0x3fc8f5c3
 8003ffc:	200005a8 	.word	0x200005a8
 8004000:	3fca3d71 	.word	0x3fca3d71
 8004004:	200005c8 	.word	0x200005c8
 8004008:	2000042c 	.word	0x2000042c
 800400c:	40020800 	.word	0x40020800
 8004010:	40020000 	.word	0x40020000
 8004014:	40020400 	.word	0x40020400
 8004018:	2000037c 	.word	0x2000037c
 800401c:	200003d4 	.word	0x200003d4
 8004020:	200005d8 	.word	0x200005d8
 8004024:	20000474 	.word	0x20000474
 8004028:	20000604 	.word	0x20000604
 800402c:	00000000 	.word	0x00000000
 8004030:	2000068c 	.word	0x2000068c
 8004034:	200006ec 	.word	0x200006ec
 8004038:	2000074c 	.word	0x2000074c
 800403c:	2000066c 	.word	0x2000066c
 8004040:	20000654 	.word	0x20000654
 8004044:	20000500 	.word	0x20000500
 8004048:	20000640 	.word	0x20000640
 800404c:	200007ac 	.word	0x200007ac
 8004050:	200004bc 	.word	0x200004bc
 8004054:	20000544 	.word	0x20000544
 8004058:	200007b8 	.word	0x200007b8

0800405c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b094      	sub	sp, #80	; 0x50
 8004060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004062:	f107 0320 	add.w	r3, r7, #32
 8004066:	2230      	movs	r2, #48	; 0x30
 8004068:	2100      	movs	r1, #0
 800406a:	4618      	mov	r0, r3
 800406c:	f006 fd11 	bl	800aa92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004070:	f107 030c 	add.w	r3, r7, #12
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	605a      	str	r2, [r3, #4]
 800407a:	609a      	str	r2, [r3, #8]
 800407c:	60da      	str	r2, [r3, #12]
 800407e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004080:	2300      	movs	r3, #0
 8004082:	60bb      	str	r3, [r7, #8]
 8004084:	4b28      	ldr	r3, [pc, #160]	; (8004128 <SystemClock_Config+0xcc>)
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	4a27      	ldr	r2, [pc, #156]	; (8004128 <SystemClock_Config+0xcc>)
 800408a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800408e:	6413      	str	r3, [r2, #64]	; 0x40
 8004090:	4b25      	ldr	r3, [pc, #148]	; (8004128 <SystemClock_Config+0xcc>)
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004098:	60bb      	str	r3, [r7, #8]
 800409a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800409c:	2300      	movs	r3, #0
 800409e:	607b      	str	r3, [r7, #4]
 80040a0:	4b22      	ldr	r3, [pc, #136]	; (800412c <SystemClock_Config+0xd0>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a21      	ldr	r2, [pc, #132]	; (800412c <SystemClock_Config+0xd0>)
 80040a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040aa:	6013      	str	r3, [r2, #0]
 80040ac:	4b1f      	ldr	r3, [pc, #124]	; (800412c <SystemClock_Config+0xd0>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80040b4:	607b      	str	r3, [r7, #4]
 80040b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80040b8:	2302      	movs	r3, #2
 80040ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80040bc:	2301      	movs	r3, #1
 80040be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80040c0:	2310      	movs	r3, #16
 80040c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040c4:	2302      	movs	r3, #2
 80040c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80040c8:	2300      	movs	r3, #0
 80040ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80040cc:	2310      	movs	r3, #16
 80040ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80040d0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80040d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80040d6:	2304      	movs	r3, #4
 80040d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80040da:	2304      	movs	r3, #4
 80040dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040de:	f107 0320 	add.w	r3, r7, #32
 80040e2:	4618      	mov	r0, r3
 80040e4:	f001 fae0 	bl	80056a8 <HAL_RCC_OscConfig>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80040ee:	f000 fb4d 	bl	800478c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040f2:	230f      	movs	r3, #15
 80040f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040f6:	2302      	movs	r3, #2
 80040f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040fa:	2300      	movs	r3, #0
 80040fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80040fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004102:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004104:	2300      	movs	r3, #0
 8004106:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004108:	f107 030c 	add.w	r3, r7, #12
 800410c:	2102      	movs	r1, #2
 800410e:	4618      	mov	r0, r3
 8004110:	f001 fd42 	bl	8005b98 <HAL_RCC_ClockConfig>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800411a:	f000 fb37 	bl	800478c <Error_Handler>
  }
}
 800411e:	bf00      	nop
 8004120:	3750      	adds	r7, #80	; 0x50
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40023800 	.word	0x40023800
 800412c:	40007000 	.word	0x40007000

08004130 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004134:	4b17      	ldr	r3, [pc, #92]	; (8004194 <MX_SPI1_Init+0x64>)
 8004136:	4a18      	ldr	r2, [pc, #96]	; (8004198 <MX_SPI1_Init+0x68>)
 8004138:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800413a:	4b16      	ldr	r3, [pc, #88]	; (8004194 <MX_SPI1_Init+0x64>)
 800413c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004140:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004142:	4b14      	ldr	r3, [pc, #80]	; (8004194 <MX_SPI1_Init+0x64>)
 8004144:	2200      	movs	r2, #0
 8004146:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004148:	4b12      	ldr	r3, [pc, #72]	; (8004194 <MX_SPI1_Init+0x64>)
 800414a:	2200      	movs	r2, #0
 800414c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800414e:	4b11      	ldr	r3, [pc, #68]	; (8004194 <MX_SPI1_Init+0x64>)
 8004150:	2200      	movs	r2, #0
 8004152:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004154:	4b0f      	ldr	r3, [pc, #60]	; (8004194 <MX_SPI1_Init+0x64>)
 8004156:	2200      	movs	r2, #0
 8004158:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800415a:	4b0e      	ldr	r3, [pc, #56]	; (8004194 <MX_SPI1_Init+0x64>)
 800415c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004160:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004162:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <MX_SPI1_Init+0x64>)
 8004164:	2200      	movs	r2, #0
 8004166:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <MX_SPI1_Init+0x64>)
 800416a:	2200      	movs	r2, #0
 800416c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800416e:	4b09      	ldr	r3, [pc, #36]	; (8004194 <MX_SPI1_Init+0x64>)
 8004170:	2200      	movs	r2, #0
 8004172:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004174:	4b07      	ldr	r3, [pc, #28]	; (8004194 <MX_SPI1_Init+0x64>)
 8004176:	2200      	movs	r2, #0
 8004178:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800417a:	4b06      	ldr	r3, [pc, #24]	; (8004194 <MX_SPI1_Init+0x64>)
 800417c:	220a      	movs	r2, #10
 800417e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004180:	4804      	ldr	r0, [pc, #16]	; (8004194 <MX_SPI1_Init+0x64>)
 8004182:	f001 ff29 	bl	8005fd8 <HAL_SPI_Init>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800418c:	f000 fafe 	bl	800478c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004190:	bf00      	nop
 8004192:	bd80      	pop	{r7, pc}
 8004194:	2000037c 	.word	0x2000037c
 8004198:	40013000 	.word	0x40013000

0800419c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80041a0:	4b17      	ldr	r3, [pc, #92]	; (8004200 <MX_SPI2_Init+0x64>)
 80041a2:	4a18      	ldr	r2, [pc, #96]	; (8004204 <MX_SPI2_Init+0x68>)
 80041a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80041a6:	4b16      	ldr	r3, [pc, #88]	; (8004200 <MX_SPI2_Init+0x64>)
 80041a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80041ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80041ae:	4b14      	ldr	r3, [pc, #80]	; (8004200 <MX_SPI2_Init+0x64>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80041b4:	4b12      	ldr	r3, [pc, #72]	; (8004200 <MX_SPI2_Init+0x64>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80041ba:	4b11      	ldr	r3, [pc, #68]	; (8004200 <MX_SPI2_Init+0x64>)
 80041bc:	2200      	movs	r2, #0
 80041be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80041c0:	4b0f      	ldr	r3, [pc, #60]	; (8004200 <MX_SPI2_Init+0x64>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80041c6:	4b0e      	ldr	r3, [pc, #56]	; (8004200 <MX_SPI2_Init+0x64>)
 80041c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041cc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80041ce:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <MX_SPI2_Init+0x64>)
 80041d0:	2210      	movs	r2, #16
 80041d2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80041d4:	4b0a      	ldr	r3, [pc, #40]	; (8004200 <MX_SPI2_Init+0x64>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80041da:	4b09      	ldr	r3, [pc, #36]	; (8004200 <MX_SPI2_Init+0x64>)
 80041dc:	2200      	movs	r2, #0
 80041de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041e0:	4b07      	ldr	r3, [pc, #28]	; (8004200 <MX_SPI2_Init+0x64>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80041e6:	4b06      	ldr	r3, [pc, #24]	; (8004200 <MX_SPI2_Init+0x64>)
 80041e8:	220a      	movs	r2, #10
 80041ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80041ec:	4804      	ldr	r0, [pc, #16]	; (8004200 <MX_SPI2_Init+0x64>)
 80041ee:	f001 fef3 	bl	8005fd8 <HAL_SPI_Init>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80041f8:	f000 fac8 	bl	800478c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80041fc:	bf00      	nop
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	200003d4 	.word	0x200003d4
 8004204:	40003800 	.word	0x40003800

08004208 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b096      	sub	sp, #88	; 0x58
 800420c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800420e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	605a      	str	r2, [r3, #4]
 8004218:	609a      	str	r2, [r3, #8]
 800421a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800421c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	605a      	str	r2, [r3, #4]
 8004230:	609a      	str	r2, [r3, #8]
 8004232:	60da      	str	r2, [r3, #12]
 8004234:	611a      	str	r2, [r3, #16]
 8004236:	615a      	str	r2, [r3, #20]
 8004238:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800423a:	1d3b      	adds	r3, r7, #4
 800423c:	2220      	movs	r2, #32
 800423e:	2100      	movs	r1, #0
 8004240:	4618      	mov	r0, r3
 8004242:	f006 fc26 	bl	800aa92 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004246:	4b3f      	ldr	r3, [pc, #252]	; (8004344 <MX_TIM1_Init+0x13c>)
 8004248:	4a3f      	ldr	r2, [pc, #252]	; (8004348 <MX_TIM1_Init+0x140>)
 800424a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 800424c:	4b3d      	ldr	r3, [pc, #244]	; (8004344 <MX_TIM1_Init+0x13c>)
 800424e:	2204      	movs	r2, #4
 8004250:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004252:	4b3c      	ldr	r3, [pc, #240]	; (8004344 <MX_TIM1_Init+0x13c>)
 8004254:	2200      	movs	r2, #0
 8004256:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004258:	4b3a      	ldr	r3, [pc, #232]	; (8004344 <MX_TIM1_Init+0x13c>)
 800425a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800425e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004260:	4b38      	ldr	r3, [pc, #224]	; (8004344 <MX_TIM1_Init+0x13c>)
 8004262:	2200      	movs	r2, #0
 8004264:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004266:	4b37      	ldr	r3, [pc, #220]	; (8004344 <MX_TIM1_Init+0x13c>)
 8004268:	2200      	movs	r2, #0
 800426a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800426c:	4b35      	ldr	r3, [pc, #212]	; (8004344 <MX_TIM1_Init+0x13c>)
 800426e:	2200      	movs	r2, #0
 8004270:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004272:	4834      	ldr	r0, [pc, #208]	; (8004344 <MX_TIM1_Init+0x13c>)
 8004274:	f002 fc58 	bl	8006b28 <HAL_TIM_Base_Init>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800427e:	f000 fa85 	bl	800478c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004286:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004288:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800428c:	4619      	mov	r1, r3
 800428e:	482d      	ldr	r0, [pc, #180]	; (8004344 <MX_TIM1_Init+0x13c>)
 8004290:	f003 f85a 	bl	8007348 <HAL_TIM_ConfigClockSource>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800429a:	f000 fa77 	bl	800478c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800429e:	4829      	ldr	r0, [pc, #164]	; (8004344 <MX_TIM1_Init+0x13c>)
 80042a0:	f002 fd1a 	bl	8006cd8 <HAL_TIM_PWM_Init>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80042aa:	f000 fa6f 	bl	800478c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042ae:	2300      	movs	r3, #0
 80042b0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042b2:	2300      	movs	r3, #0
 80042b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80042b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80042ba:	4619      	mov	r1, r3
 80042bc:	4821      	ldr	r0, [pc, #132]	; (8004344 <MX_TIM1_Init+0x13c>)
 80042be:	f003 fc09 	bl	8007ad4 <HAL_TIMEx_MasterConfigSynchronization>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80042c8:	f000 fa60 	bl	800478c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042cc:	2360      	movs	r3, #96	; 0x60
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 13125-1;
 80042d0:	f243 3344 	movw	r3, #13124	; 0x3344
 80042d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042d6:	2300      	movs	r3, #0
 80042d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80042da:	2300      	movs	r3, #0
 80042dc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042de:	2300      	movs	r3, #0
 80042e0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80042e2:	2300      	movs	r3, #0
 80042e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80042e6:	2300      	movs	r3, #0
 80042e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042ee:	2200      	movs	r2, #0
 80042f0:	4619      	mov	r1, r3
 80042f2:	4814      	ldr	r0, [pc, #80]	; (8004344 <MX_TIM1_Init+0x13c>)
 80042f4:	f002 ff66 	bl	80071c4 <HAL_TIM_PWM_ConfigChannel>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80042fe:	f000 fa45 	bl	800478c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004302:	2300      	movs	r3, #0
 8004304:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004306:	2300      	movs	r3, #0
 8004308:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800430e:	2300      	movs	r3, #0
 8004310:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004312:	2300      	movs	r3, #0
 8004314:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004316:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800431a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800431c:	2300      	movs	r3, #0
 800431e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004320:	1d3b      	adds	r3, r7, #4
 8004322:	4619      	mov	r1, r3
 8004324:	4807      	ldr	r0, [pc, #28]	; (8004344 <MX_TIM1_Init+0x13c>)
 8004326:	f003 fc43 	bl	8007bb0 <HAL_TIMEx_ConfigBreakDeadTime>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8004330:	f000 fa2c 	bl	800478c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004334:	4803      	ldr	r0, [pc, #12]	; (8004344 <MX_TIM1_Init+0x13c>)
 8004336:	f000 fb51 	bl	80049dc <HAL_TIM_MspPostInit>

}
 800433a:	bf00      	nop
 800433c:	3758      	adds	r7, #88	; 0x58
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	2000042c 	.word	0x2000042c
 8004348:	40010000 	.word	0x40010000

0800434c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004352:	f107 0308 	add.w	r3, r7, #8
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	605a      	str	r2, [r3, #4]
 800435c:	609a      	str	r2, [r3, #8]
 800435e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004360:	463b      	mov	r3, r7
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004368:	4b1d      	ldr	r3, [pc, #116]	; (80043e0 <MX_TIM3_Init+0x94>)
 800436a:	4a1e      	ldr	r2, [pc, #120]	; (80043e4 <MX_TIM3_Init+0x98>)
 800436c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 800436e:	4b1c      	ldr	r3, [pc, #112]	; (80043e0 <MX_TIM3_Init+0x94>)
 8004370:	2204      	movs	r2, #4
 8004372:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004374:	4b1a      	ldr	r3, [pc, #104]	; (80043e0 <MX_TIM3_Init+0x94>)
 8004376:	2200      	movs	r2, #0
 8004378:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800437a:	4b19      	ldr	r3, [pc, #100]	; (80043e0 <MX_TIM3_Init+0x94>)
 800437c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004380:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004382:	4b17      	ldr	r3, [pc, #92]	; (80043e0 <MX_TIM3_Init+0x94>)
 8004384:	2200      	movs	r2, #0
 8004386:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004388:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <MX_TIM3_Init+0x94>)
 800438a:	2200      	movs	r2, #0
 800438c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800438e:	4814      	ldr	r0, [pc, #80]	; (80043e0 <MX_TIM3_Init+0x94>)
 8004390:	f002 fbca 	bl	8006b28 <HAL_TIM_Base_Init>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800439a:	f000 f9f7 	bl	800478c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800439e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80043a4:	f107 0308 	add.w	r3, r7, #8
 80043a8:	4619      	mov	r1, r3
 80043aa:	480d      	ldr	r0, [pc, #52]	; (80043e0 <MX_TIM3_Init+0x94>)
 80043ac:	f002 ffcc 	bl	8007348 <HAL_TIM_ConfigClockSource>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80043b6:	f000 f9e9 	bl	800478c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043ba:	2300      	movs	r3, #0
 80043bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043be:	2300      	movs	r3, #0
 80043c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80043c2:	463b      	mov	r3, r7
 80043c4:	4619      	mov	r1, r3
 80043c6:	4806      	ldr	r0, [pc, #24]	; (80043e0 <MX_TIM3_Init+0x94>)
 80043c8:	f003 fb84 	bl	8007ad4 <HAL_TIMEx_MasterConfigSynchronization>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80043d2:	f000 f9db 	bl	800478c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80043d6:	bf00      	nop
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	20000474 	.word	0x20000474
 80043e4:	40000400 	.word	0x40000400

080043e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80043ec:	4b11      	ldr	r3, [pc, #68]	; (8004434 <MX_USART1_UART_Init+0x4c>)
 80043ee:	4a12      	ldr	r2, [pc, #72]	; (8004438 <MX_USART1_UART_Init+0x50>)
 80043f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80043f2:	4b10      	ldr	r3, [pc, #64]	; (8004434 <MX_USART1_UART_Init+0x4c>)
 80043f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80043f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80043fa:	4b0e      	ldr	r3, [pc, #56]	; (8004434 <MX_USART1_UART_Init+0x4c>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004400:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <MX_USART1_UART_Init+0x4c>)
 8004402:	2200      	movs	r2, #0
 8004404:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004406:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <MX_USART1_UART_Init+0x4c>)
 8004408:	2200      	movs	r2, #0
 800440a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800440c:	4b09      	ldr	r3, [pc, #36]	; (8004434 <MX_USART1_UART_Init+0x4c>)
 800440e:	220c      	movs	r2, #12
 8004410:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004412:	4b08      	ldr	r3, [pc, #32]	; (8004434 <MX_USART1_UART_Init+0x4c>)
 8004414:	2200      	movs	r2, #0
 8004416:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004418:	4b06      	ldr	r3, [pc, #24]	; (8004434 <MX_USART1_UART_Init+0x4c>)
 800441a:	2200      	movs	r2, #0
 800441c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800441e:	4805      	ldr	r0, [pc, #20]	; (8004434 <MX_USART1_UART_Init+0x4c>)
 8004420:	f003 fc2c 	bl	8007c7c <HAL_UART_Init>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800442a:	f000 f9af 	bl	800478c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800442e:	bf00      	nop
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	200004bc 	.word	0x200004bc
 8004438:	40011000 	.word	0x40011000

0800443c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004440:	4b11      	ldr	r3, [pc, #68]	; (8004488 <MX_USART2_UART_Init+0x4c>)
 8004442:	4a12      	ldr	r2, [pc, #72]	; (800448c <MX_USART2_UART_Init+0x50>)
 8004444:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004446:	4b10      	ldr	r3, [pc, #64]	; (8004488 <MX_USART2_UART_Init+0x4c>)
 8004448:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800444c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800444e:	4b0e      	ldr	r3, [pc, #56]	; (8004488 <MX_USART2_UART_Init+0x4c>)
 8004450:	2200      	movs	r2, #0
 8004452:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004454:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <MX_USART2_UART_Init+0x4c>)
 8004456:	2200      	movs	r2, #0
 8004458:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800445a:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <MX_USART2_UART_Init+0x4c>)
 800445c:	2200      	movs	r2, #0
 800445e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004460:	4b09      	ldr	r3, [pc, #36]	; (8004488 <MX_USART2_UART_Init+0x4c>)
 8004462:	220c      	movs	r2, #12
 8004464:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004466:	4b08      	ldr	r3, [pc, #32]	; (8004488 <MX_USART2_UART_Init+0x4c>)
 8004468:	2200      	movs	r2, #0
 800446a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800446c:	4b06      	ldr	r3, [pc, #24]	; (8004488 <MX_USART2_UART_Init+0x4c>)
 800446e:	2200      	movs	r2, #0
 8004470:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004472:	4805      	ldr	r0, [pc, #20]	; (8004488 <MX_USART2_UART_Init+0x4c>)
 8004474:	f003 fc02 	bl	8007c7c <HAL_UART_Init>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800447e:	f000 f985 	bl	800478c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004482:	bf00      	nop
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20000500 	.word	0x20000500
 800448c:	40004400 	.word	0x40004400

08004490 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004494:	4b11      	ldr	r3, [pc, #68]	; (80044dc <MX_USART6_UART_Init+0x4c>)
 8004496:	4a12      	ldr	r2, [pc, #72]	; (80044e0 <MX_USART6_UART_Init+0x50>)
 8004498:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800449a:	4b10      	ldr	r3, [pc, #64]	; (80044dc <MX_USART6_UART_Init+0x4c>)
 800449c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80044a0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80044a2:	4b0e      	ldr	r3, [pc, #56]	; (80044dc <MX_USART6_UART_Init+0x4c>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80044a8:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <MX_USART6_UART_Init+0x4c>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80044ae:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <MX_USART6_UART_Init+0x4c>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80044b4:	4b09      	ldr	r3, [pc, #36]	; (80044dc <MX_USART6_UART_Init+0x4c>)
 80044b6:	220c      	movs	r2, #12
 80044b8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044ba:	4b08      	ldr	r3, [pc, #32]	; (80044dc <MX_USART6_UART_Init+0x4c>)
 80044bc:	2200      	movs	r2, #0
 80044be:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80044c0:	4b06      	ldr	r3, [pc, #24]	; (80044dc <MX_USART6_UART_Init+0x4c>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80044c6:	4805      	ldr	r0, [pc, #20]	; (80044dc <MX_USART6_UART_Init+0x4c>)
 80044c8:	f003 fbd8 	bl	8007c7c <HAL_UART_Init>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80044d2:	f000 f95b 	bl	800478c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80044d6:	bf00      	nop
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20000544 	.word	0x20000544
 80044e0:	40011400 	.word	0x40011400

080044e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08a      	sub	sp, #40	; 0x28
 80044e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ea:	f107 0314 	add.w	r3, r7, #20
 80044ee:	2200      	movs	r2, #0
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	605a      	str	r2, [r3, #4]
 80044f4:	609a      	str	r2, [r3, #8]
 80044f6:	60da      	str	r2, [r3, #12]
 80044f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044fa:	2300      	movs	r3, #0
 80044fc:	613b      	str	r3, [r7, #16]
 80044fe:	4b42      	ldr	r3, [pc, #264]	; (8004608 <MX_GPIO_Init+0x124>)
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	4a41      	ldr	r2, [pc, #260]	; (8004608 <MX_GPIO_Init+0x124>)
 8004504:	f043 0304 	orr.w	r3, r3, #4
 8004508:	6313      	str	r3, [r2, #48]	; 0x30
 800450a:	4b3f      	ldr	r3, [pc, #252]	; (8004608 <MX_GPIO_Init+0x124>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	f003 0304 	and.w	r3, r3, #4
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004516:	2300      	movs	r3, #0
 8004518:	60fb      	str	r3, [r7, #12]
 800451a:	4b3b      	ldr	r3, [pc, #236]	; (8004608 <MX_GPIO_Init+0x124>)
 800451c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451e:	4a3a      	ldr	r2, [pc, #232]	; (8004608 <MX_GPIO_Init+0x124>)
 8004520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004524:	6313      	str	r3, [r2, #48]	; 0x30
 8004526:	4b38      	ldr	r3, [pc, #224]	; (8004608 <MX_GPIO_Init+0x124>)
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004532:	2300      	movs	r3, #0
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	4b34      	ldr	r3, [pc, #208]	; (8004608 <MX_GPIO_Init+0x124>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	4a33      	ldr	r2, [pc, #204]	; (8004608 <MX_GPIO_Init+0x124>)
 800453c:	f043 0301 	orr.w	r3, r3, #1
 8004540:	6313      	str	r3, [r2, #48]	; 0x30
 8004542:	4b31      	ldr	r3, [pc, #196]	; (8004608 <MX_GPIO_Init+0x124>)
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	60bb      	str	r3, [r7, #8]
 800454c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800454e:	2300      	movs	r3, #0
 8004550:	607b      	str	r3, [r7, #4]
 8004552:	4b2d      	ldr	r3, [pc, #180]	; (8004608 <MX_GPIO_Init+0x124>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	4a2c      	ldr	r2, [pc, #176]	; (8004608 <MX_GPIO_Init+0x124>)
 8004558:	f043 0302 	orr.w	r3, r3, #2
 800455c:	6313      	str	r3, [r2, #48]	; 0x30
 800455e:	4b2a      	ldr	r3, [pc, #168]	; (8004608 <MX_GPIO_Init+0x124>)
 8004560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	607b      	str	r3, [r7, #4]
 8004568:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 800456a:	2200      	movs	r2, #0
 800456c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8004570:	4826      	ldr	r0, [pc, #152]	; (800460c <MX_GPIO_Init+0x128>)
 8004572:	f001 f87f 	bl	8005674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, fault_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8004576:	2200      	movs	r2, #0
 8004578:	21a0      	movs	r1, #160	; 0xa0
 800457a:	4825      	ldr	r0, [pc, #148]	; (8004610 <MX_GPIO_Init+0x12c>)
 800457c:	f001 f87a 	bl	8005674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TS_CS_Pin|LCD_CS_Pin|MOTOR_GND_Pin, GPIO_PIN_RESET);
 8004580:	2200      	movs	r2, #0
 8004582:	f44f 7118 	mov.w	r1, #608	; 0x260
 8004586:	4823      	ldr	r0, [pc, #140]	; (8004614 <MX_GPIO_Init+0x130>)
 8004588:	f001 f874 	bl	8005674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800458c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004592:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004598:	2300      	movs	r3, #0
 800459a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800459c:	f107 0314 	add.w	r3, r7, #20
 80045a0:	4619      	mov	r1, r3
 80045a2:	481b      	ldr	r0, [pc, #108]	; (8004610 <MX_GPIO_Init+0x12c>)
 80045a4:	f000 fee2 	bl	800536c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LCD_DC_Pin;
 80045a8:	f44f 7308 	mov.w	r3, #544	; 0x220
 80045ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045ae:	2301      	movs	r3, #1
 80045b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045b6:	2300      	movs	r3, #0
 80045b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045ba:	f107 0314 	add.w	r3, r7, #20
 80045be:	4619      	mov	r1, r3
 80045c0:	4812      	ldr	r0, [pc, #72]	; (800460c <MX_GPIO_Init+0x128>)
 80045c2:	f000 fed3 	bl	800536c <HAL_GPIO_Init>

  /*Configure GPIO pins : fault_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = fault_Pin|LCD_RST_Pin;
 80045c6:	23a0      	movs	r3, #160	; 0xa0
 80045c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045ca:	2301      	movs	r3, #1
 80045cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ce:	2300      	movs	r3, #0
 80045d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045d2:	2300      	movs	r3, #0
 80045d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045d6:	f107 0314 	add.w	r3, r7, #20
 80045da:	4619      	mov	r1, r3
 80045dc:	480c      	ldr	r0, [pc, #48]	; (8004610 <MX_GPIO_Init+0x12c>)
 80045de:	f000 fec5 	bl	800536c <HAL_GPIO_Init>

  /*Configure GPIO pins : TS_CS_Pin LCD_CS_Pin MOTOR_GND_Pin */
  GPIO_InitStruct.Pin = TS_CS_Pin|LCD_CS_Pin|MOTOR_GND_Pin;
 80045e2:	f44f 7318 	mov.w	r3, #608	; 0x260
 80045e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045e8:	2301      	movs	r3, #1
 80045ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ec:	2300      	movs	r3, #0
 80045ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045f0:	2300      	movs	r3, #0
 80045f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045f4:	f107 0314 	add.w	r3, r7, #20
 80045f8:	4619      	mov	r1, r3
 80045fa:	4806      	ldr	r0, [pc, #24]	; (8004614 <MX_GPIO_Init+0x130>)
 80045fc:	f000 feb6 	bl	800536c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004600:	bf00      	nop
 8004602:	3728      	adds	r7, #40	; 0x28
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40023800 	.word	0x40023800
 800460c:	40020000 	.word	0x40020000
 8004610:	40020800 	.word	0x40020800
 8004614:	40020400 	.word	0x40020400

08004618 <processUartData>:

/* USER CODE BEGIN 4 */
void processUartData(UART_HandleTypeDef *huart, UartDataObject *uartData) {
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  if (uartData->data.dataIndex == 0 && uartData->data.receivedData[0] != '?' && uartData->data.receivedData[0] != '!') {
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	2b00      	cmp	r3, #0
 8004628:	d111      	bne.n	800464e <processUartData+0x36>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	2b3f      	cmp	r3, #63	; 0x3f
 8004630:	d00d      	beq.n	800464e <processUartData+0x36>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b21      	cmp	r3, #33	; 0x21
 8004638:	d009      	beq.n	800464e <processUartData+0x36>
    // Fehlerhafte Startbyte, Nachricht ignorieren
    uartData->data.dataIndex = 0;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2200      	movs	r2, #0
 800463e:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_UART_Receive_IT(huart, &uartData->data.receivedData[0], 1);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2201      	movs	r2, #1
 8004644:	4619      	mov	r1, r3
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f003 fbf7 	bl	8007e3a <HAL_UART_Receive_IT>
    HAL_UART_Receive_IT(huart, &uartData->data.receivedData[0], 1);
  } else {
    uartData->data.dataIndex++;
    HAL_UART_Receive_IT(huart, (uint8_t *)&uartData->data.receivedData[uartData->data.dataIndex], 1);
  }
}
 800464c:	e02b      	b.n	80046a6 <processUartData+0x8e>
  } else if (uartData->data.receivedData[uartData->data.dataIndex] == '\r' ) {
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	5cd3      	ldrb	r3, [r2, r3]
 8004656:	2b0d      	cmp	r3, #13
 8004658:	d109      	bne.n	800466e <processUartData+0x56>
    uartData->data.receivedData[uartData->data.dataIndex + 1] = '\0';  // Null-Terminierung hinzufügen
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	3301      	adds	r3, #1
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	2100      	movs	r1, #0
 8004664:	54d1      	strb	r1, [r2, r3]
    uartData->data.messageComplete = 1;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2201      	movs	r2, #1
 800466a:	645a      	str	r2, [r3, #68]	; 0x44
}
 800466c:	e01b      	b.n	80046a6 <processUartData+0x8e>
  } else if (uartData->data.dataIndex >= sizeof(uartData->data.receivedData) - 1) {
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	2b3e      	cmp	r3, #62	; 0x3e
 8004674:	d909      	bls.n	800468a <processUartData+0x72>
    uartData->data.dataIndex = 0;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2200      	movs	r2, #0
 800467a:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_UART_Receive_IT(huart, &uartData->data.receivedData[0], 1);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	2201      	movs	r2, #1
 8004680:	4619      	mov	r1, r3
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f003 fbd9 	bl	8007e3a <HAL_UART_Receive_IT>
}
 8004688:	e00d      	b.n	80046a6 <processUartData+0x8e>
    uartData->data.dataIndex++;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	1c5a      	adds	r2, r3, #1
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_UART_Receive_IT(huart, (uint8_t *)&uartData->data.receivedData[uartData->data.dataIndex], 1);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	4413      	add	r3, r2
 800469c:	2201      	movs	r2, #1
 800469e:	4619      	mov	r1, r3
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f003 fbca 	bl	8007e3a <HAL_UART_Receive_IT>
}
 80046a6:	bf00      	nop
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  if (huart == &huart2) {
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a0e      	ldr	r2, [pc, #56]	; (80046f4 <HAL_UART_RxCpltCallback+0x44>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d104      	bne.n	80046ca <HAL_UART_RxCpltCallback+0x1a>
    processUartData(&huart2, &uartDataPc);
 80046c0:	490d      	ldr	r1, [pc, #52]	; (80046f8 <HAL_UART_RxCpltCallback+0x48>)
 80046c2:	480c      	ldr	r0, [pc, #48]	; (80046f4 <HAL_UART_RxCpltCallback+0x44>)
 80046c4:	f7ff ffa8 	bl	8004618 <processUartData>
  }else if (huart == &huart1){
	processUartData(&huart1, &uartDataSensorExtruder);
  }else if (huart == &huart6){
	  processUartData(&huart6, &uartDataSensorBack);
  }
}
 80046c8:	e010      	b.n	80046ec <HAL_UART_RxCpltCallback+0x3c>
  }else if (huart == &huart1){
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a0b      	ldr	r2, [pc, #44]	; (80046fc <HAL_UART_RxCpltCallback+0x4c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d104      	bne.n	80046dc <HAL_UART_RxCpltCallback+0x2c>
	processUartData(&huart1, &uartDataSensorExtruder);
 80046d2:	490b      	ldr	r1, [pc, #44]	; (8004700 <HAL_UART_RxCpltCallback+0x50>)
 80046d4:	4809      	ldr	r0, [pc, #36]	; (80046fc <HAL_UART_RxCpltCallback+0x4c>)
 80046d6:	f7ff ff9f 	bl	8004618 <processUartData>
}
 80046da:	e007      	b.n	80046ec <HAL_UART_RxCpltCallback+0x3c>
  }else if (huart == &huart6){
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a09      	ldr	r2, [pc, #36]	; (8004704 <HAL_UART_RxCpltCallback+0x54>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d103      	bne.n	80046ec <HAL_UART_RxCpltCallback+0x3c>
	  processUartData(&huart6, &uartDataSensorBack);
 80046e4:	4908      	ldr	r1, [pc, #32]	; (8004708 <HAL_UART_RxCpltCallback+0x58>)
 80046e6:	4807      	ldr	r0, [pc, #28]	; (8004704 <HAL_UART_RxCpltCallback+0x54>)
 80046e8:	f7ff ff96 	bl	8004618 <processUartData>
}
 80046ec:	bf00      	nop
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	20000500 	.word	0x20000500
 80046f8:	2000068c 	.word	0x2000068c
 80046fc:	200004bc 	.word	0x200004bc
 8004700:	200006ec 	.word	0x200006ec
 8004704:	20000544 	.word	0x20000544
 8004708:	2000074c 	.word	0x2000074c

0800470c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
  float diameter = sensorBack.getDiameter(&sensorBack);
 8004712:	4b1a      	ldr	r3, [pc, #104]	; (800477c <TIM3_IRQHandler+0x70>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	4819      	ldr	r0, [pc, #100]	; (800477c <TIM3_IRQHandler+0x70>)
 8004718:	4798      	blx	r3
 800471a:	ed87 0a03 	vstr	s0, [r7, #12]
  float cValue   = pidController.pid_update(&pidController,diameter);
 800471e:	4b18      	ldr	r3, [pc, #96]	; (8004780 <TIM3_IRQHandler+0x74>)
 8004720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004722:	ed97 0a03 	vldr	s0, [r7, #12]
 8004726:	4816      	ldr	r0, [pc, #88]	; (8004780 <TIM3_IRQHandler+0x74>)
 8004728:	4798      	blx	r3
 800472a:	ed87 0a02 	vstr	s0, [r7, #8]

  float speed = motor.getSpeed(&motor);
 800472e:	4b15      	ldr	r3, [pc, #84]	; (8004784 <TIM3_IRQHandler+0x78>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	4814      	ldr	r0, [pc, #80]	; (8004784 <TIM3_IRQHandler+0x78>)
 8004734:	4798      	blx	r3
 8004736:	ee07 0a90 	vmov	s15, r0
 800473a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800473e:	edc7 7a01 	vstr	s15, [r7, #4]

  speed = speed + cValue * speed;
 8004742:	ed97 7a02 	vldr	s14, [r7, #8]
 8004746:	edd7 7a01 	vldr	s15, [r7, #4]
 800474a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800474e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004756:	edc7 7a01 	vstr	s15, [r7, #4]
  motor.setSpeed(&motor,speed);
 800475a:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <TIM3_IRQHandler+0x78>)
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004762:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004766:	ee17 1a90 	vmov	r1, s15
 800476a:	4806      	ldr	r0, [pc, #24]	; (8004784 <TIM3_IRQHandler+0x78>)
 800476c:	4798      	blx	r3
  HAL_TIM_IRQHandler(&htim3);
 800476e:	4806      	ldr	r0, [pc, #24]	; (8004788 <TIM3_IRQHandler+0x7c>)
 8004770:	f002 fc20 	bl	8006fb4 <HAL_TIM_IRQHandler>
}
 8004774:	bf00      	nop
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	200005a8 	.word	0x200005a8
 8004780:	20000604 	.word	0x20000604
 8004784:	200005c8 	.word	0x200005c8
 8004788:	20000474 	.word	0x20000474

0800478c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004790:	b672      	cpsid	i
}
 8004792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004794:	e7fe      	b.n	8004794 <Error_Handler+0x8>
	...

08004798 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800479e:	2300      	movs	r3, #0
 80047a0:	607b      	str	r3, [r7, #4]
 80047a2:	4b10      	ldr	r3, [pc, #64]	; (80047e4 <HAL_MspInit+0x4c>)
 80047a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a6:	4a0f      	ldr	r2, [pc, #60]	; (80047e4 <HAL_MspInit+0x4c>)
 80047a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047ac:	6453      	str	r3, [r2, #68]	; 0x44
 80047ae:	4b0d      	ldr	r3, [pc, #52]	; (80047e4 <HAL_MspInit+0x4c>)
 80047b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047b6:	607b      	str	r3, [r7, #4]
 80047b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047ba:	2300      	movs	r3, #0
 80047bc:	603b      	str	r3, [r7, #0]
 80047be:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <HAL_MspInit+0x4c>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	4a08      	ldr	r2, [pc, #32]	; (80047e4 <HAL_MspInit+0x4c>)
 80047c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c8:	6413      	str	r3, [r2, #64]	; 0x40
 80047ca:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <HAL_MspInit+0x4c>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d2:	603b      	str	r3, [r7, #0]
 80047d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80047d6:	2007      	movs	r0, #7
 80047d8:	f000 fcf4 	bl	80051c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047dc:	bf00      	nop
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40023800 	.word	0x40023800

080047e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b08e      	sub	sp, #56	; 0x38
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	605a      	str	r2, [r3, #4]
 80047fa:	609a      	str	r2, [r3, #8]
 80047fc:	60da      	str	r2, [r3, #12]
 80047fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a50      	ldr	r2, [pc, #320]	; (8004948 <HAL_SPI_MspInit+0x160>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d14a      	bne.n	80048a0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800480a:	2300      	movs	r3, #0
 800480c:	623b      	str	r3, [r7, #32]
 800480e:	4b4f      	ldr	r3, [pc, #316]	; (800494c <HAL_SPI_MspInit+0x164>)
 8004810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004812:	4a4e      	ldr	r2, [pc, #312]	; (800494c <HAL_SPI_MspInit+0x164>)
 8004814:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004818:	6453      	str	r3, [r2, #68]	; 0x44
 800481a:	4b4c      	ldr	r3, [pc, #304]	; (800494c <HAL_SPI_MspInit+0x164>)
 800481c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004822:	623b      	str	r3, [r7, #32]
 8004824:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004826:	2300      	movs	r3, #0
 8004828:	61fb      	str	r3, [r7, #28]
 800482a:	4b48      	ldr	r3, [pc, #288]	; (800494c <HAL_SPI_MspInit+0x164>)
 800482c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482e:	4a47      	ldr	r2, [pc, #284]	; (800494c <HAL_SPI_MspInit+0x164>)
 8004830:	f043 0301 	orr.w	r3, r3, #1
 8004834:	6313      	str	r3, [r2, #48]	; 0x30
 8004836:	4b45      	ldr	r3, [pc, #276]	; (800494c <HAL_SPI_MspInit+0x164>)
 8004838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	61fb      	str	r3, [r7, #28]
 8004840:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004842:	2300      	movs	r3, #0
 8004844:	61bb      	str	r3, [r7, #24]
 8004846:	4b41      	ldr	r3, [pc, #260]	; (800494c <HAL_SPI_MspInit+0x164>)
 8004848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484a:	4a40      	ldr	r2, [pc, #256]	; (800494c <HAL_SPI_MspInit+0x164>)
 800484c:	f043 0302 	orr.w	r3, r3, #2
 8004850:	6313      	str	r3, [r2, #48]	; 0x30
 8004852:	4b3e      	ldr	r3, [pc, #248]	; (800494c <HAL_SPI_MspInit+0x164>)
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	61bb      	str	r3, [r7, #24]
 800485c:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800485e:	23c0      	movs	r3, #192	; 0xc0
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004862:	2302      	movs	r3, #2
 8004864:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004866:	2300      	movs	r3, #0
 8004868:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800486a:	2303      	movs	r3, #3
 800486c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800486e:	2305      	movs	r3, #5
 8004870:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004876:	4619      	mov	r1, r3
 8004878:	4835      	ldr	r0, [pc, #212]	; (8004950 <HAL_SPI_MspInit+0x168>)
 800487a:	f000 fd77 	bl	800536c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800487e:	2308      	movs	r3, #8
 8004880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004882:	2302      	movs	r3, #2
 8004884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004886:	2300      	movs	r3, #0
 8004888:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800488a:	2303      	movs	r3, #3
 800488c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800488e:	2305      	movs	r3, #5
 8004890:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004896:	4619      	mov	r1, r3
 8004898:	482e      	ldr	r0, [pc, #184]	; (8004954 <HAL_SPI_MspInit+0x16c>)
 800489a:	f000 fd67 	bl	800536c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800489e:	e04f      	b.n	8004940 <HAL_SPI_MspInit+0x158>
  else if(hspi->Instance==SPI2)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a2c      	ldr	r2, [pc, #176]	; (8004958 <HAL_SPI_MspInit+0x170>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d14a      	bne.n	8004940 <HAL_SPI_MspInit+0x158>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80048aa:	2300      	movs	r3, #0
 80048ac:	617b      	str	r3, [r7, #20]
 80048ae:	4b27      	ldr	r3, [pc, #156]	; (800494c <HAL_SPI_MspInit+0x164>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	4a26      	ldr	r2, [pc, #152]	; (800494c <HAL_SPI_MspInit+0x164>)
 80048b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048b8:	6413      	str	r3, [r2, #64]	; 0x40
 80048ba:	4b24      	ldr	r3, [pc, #144]	; (800494c <HAL_SPI_MspInit+0x164>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048c2:	617b      	str	r3, [r7, #20]
 80048c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048c6:	2300      	movs	r3, #0
 80048c8:	613b      	str	r3, [r7, #16]
 80048ca:	4b20      	ldr	r3, [pc, #128]	; (800494c <HAL_SPI_MspInit+0x164>)
 80048cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ce:	4a1f      	ldr	r2, [pc, #124]	; (800494c <HAL_SPI_MspInit+0x164>)
 80048d0:	f043 0304 	orr.w	r3, r3, #4
 80048d4:	6313      	str	r3, [r2, #48]	; 0x30
 80048d6:	4b1d      	ldr	r3, [pc, #116]	; (800494c <HAL_SPI_MspInit+0x164>)
 80048d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048da:	f003 0304 	and.w	r3, r3, #4
 80048de:	613b      	str	r3, [r7, #16]
 80048e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048e2:	2300      	movs	r3, #0
 80048e4:	60fb      	str	r3, [r7, #12]
 80048e6:	4b19      	ldr	r3, [pc, #100]	; (800494c <HAL_SPI_MspInit+0x164>)
 80048e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ea:	4a18      	ldr	r2, [pc, #96]	; (800494c <HAL_SPI_MspInit+0x164>)
 80048ec:	f043 0302 	orr.w	r3, r3, #2
 80048f0:	6313      	str	r3, [r2, #48]	; 0x30
 80048f2:	4b16      	ldr	r3, [pc, #88]	; (800494c <HAL_SPI_MspInit+0x164>)
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TS_DO_Pin|T_DIN_Pin;
 80048fe:	230c      	movs	r3, #12
 8004900:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004902:	2302      	movs	r3, #2
 8004904:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004906:	2300      	movs	r3, #0
 8004908:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800490a:	2303      	movs	r3, #3
 800490c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800490e:	2305      	movs	r3, #5
 8004910:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004916:	4619      	mov	r1, r3
 8004918:	4810      	ldr	r0, [pc, #64]	; (800495c <HAL_SPI_MspInit+0x174>)
 800491a:	f000 fd27 	bl	800536c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800491e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004922:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004924:	2302      	movs	r3, #2
 8004926:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004928:	2300      	movs	r3, #0
 800492a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800492c:	2303      	movs	r3, #3
 800492e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004930:	2305      	movs	r3, #5
 8004932:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004938:	4619      	mov	r1, r3
 800493a:	4806      	ldr	r0, [pc, #24]	; (8004954 <HAL_SPI_MspInit+0x16c>)
 800493c:	f000 fd16 	bl	800536c <HAL_GPIO_Init>
}
 8004940:	bf00      	nop
 8004942:	3738      	adds	r7, #56	; 0x38
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40013000 	.word	0x40013000
 800494c:	40023800 	.word	0x40023800
 8004950:	40020000 	.word	0x40020000
 8004954:	40020400 	.word	0x40020400
 8004958:	40003800 	.word	0x40003800
 800495c:	40020800 	.word	0x40020800

08004960 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a18      	ldr	r2, [pc, #96]	; (80049d0 <HAL_TIM_Base_MspInit+0x70>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d10e      	bne.n	8004990 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	4b17      	ldr	r3, [pc, #92]	; (80049d4 <HAL_TIM_Base_MspInit+0x74>)
 8004978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497a:	4a16      	ldr	r2, [pc, #88]	; (80049d4 <HAL_TIM_Base_MspInit+0x74>)
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	6453      	str	r3, [r2, #68]	; 0x44
 8004982:	4b14      	ldr	r3, [pc, #80]	; (80049d4 <HAL_TIM_Base_MspInit+0x74>)
 8004984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800498e:	e01a      	b.n	80049c6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a10      	ldr	r2, [pc, #64]	; (80049d8 <HAL_TIM_Base_MspInit+0x78>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d115      	bne.n	80049c6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800499a:	2300      	movs	r3, #0
 800499c:	60bb      	str	r3, [r7, #8]
 800499e:	4b0d      	ldr	r3, [pc, #52]	; (80049d4 <HAL_TIM_Base_MspInit+0x74>)
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	4a0c      	ldr	r2, [pc, #48]	; (80049d4 <HAL_TIM_Base_MspInit+0x74>)
 80049a4:	f043 0302 	orr.w	r3, r3, #2
 80049a8:	6413      	str	r3, [r2, #64]	; 0x40
 80049aa:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <HAL_TIM_Base_MspInit+0x74>)
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	60bb      	str	r3, [r7, #8]
 80049b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80049b6:	2200      	movs	r2, #0
 80049b8:	2100      	movs	r1, #0
 80049ba:	201d      	movs	r0, #29
 80049bc:	f000 fc0d 	bl	80051da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80049c0:	201d      	movs	r0, #29
 80049c2:	f000 fc26 	bl	8005212 <HAL_NVIC_EnableIRQ>
}
 80049c6:	bf00      	nop
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40010000 	.word	0x40010000
 80049d4:	40023800 	.word	0x40023800
 80049d8:	40000400 	.word	0x40000400

080049dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b088      	sub	sp, #32
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049e4:	f107 030c 	add.w	r3, r7, #12
 80049e8:	2200      	movs	r2, #0
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	605a      	str	r2, [r3, #4]
 80049ee:	609a      	str	r2, [r3, #8]
 80049f0:	60da      	str	r2, [r3, #12]
 80049f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a12      	ldr	r2, [pc, #72]	; (8004a44 <HAL_TIM_MspPostInit+0x68>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d11e      	bne.n	8004a3c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049fe:	2300      	movs	r3, #0
 8004a00:	60bb      	str	r3, [r7, #8]
 8004a02:	4b11      	ldr	r3, [pc, #68]	; (8004a48 <HAL_TIM_MspPostInit+0x6c>)
 8004a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a06:	4a10      	ldr	r2, [pc, #64]	; (8004a48 <HAL_TIM_MspPostInit+0x6c>)
 8004a08:	f043 0301 	orr.w	r3, r3, #1
 8004a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a0e:	4b0e      	ldr	r3, [pc, #56]	; (8004a48 <HAL_TIM_MspPostInit+0x6c>)
 8004a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	60bb      	str	r3, [r7, #8]
 8004a18:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004a1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a20:	2302      	movs	r3, #2
 8004a22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a24:	2300      	movs	r3, #0
 8004a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a30:	f107 030c 	add.w	r3, r7, #12
 8004a34:	4619      	mov	r1, r3
 8004a36:	4805      	ldr	r0, [pc, #20]	; (8004a4c <HAL_TIM_MspPostInit+0x70>)
 8004a38:	f000 fc98 	bl	800536c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004a3c:	bf00      	nop
 8004a3e:	3720      	adds	r7, #32
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40010000 	.word	0x40010000
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	40020000 	.word	0x40020000

08004a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b090      	sub	sp, #64	; 0x40
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	605a      	str	r2, [r3, #4]
 8004a62:	609a      	str	r2, [r3, #8]
 8004a64:	60da      	str	r2, [r3, #12]
 8004a66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a76      	ldr	r2, [pc, #472]	; (8004c48 <HAL_UART_MspInit+0x1f8>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d153      	bne.n	8004b1a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a72:	2300      	movs	r3, #0
 8004a74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a76:	4b75      	ldr	r3, [pc, #468]	; (8004c4c <HAL_UART_MspInit+0x1fc>)
 8004a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7a:	4a74      	ldr	r2, [pc, #464]	; (8004c4c <HAL_UART_MspInit+0x1fc>)
 8004a7c:	f043 0310 	orr.w	r3, r3, #16
 8004a80:	6453      	str	r3, [r2, #68]	; 0x44
 8004a82:	4b72      	ldr	r3, [pc, #456]	; (8004c4c <HAL_UART_MspInit+0x1fc>)
 8004a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a86:	f003 0310 	and.w	r3, r3, #16
 8004a8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a8e:	2300      	movs	r3, #0
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24
 8004a92:	4b6e      	ldr	r3, [pc, #440]	; (8004c4c <HAL_UART_MspInit+0x1fc>)
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	4a6d      	ldr	r2, [pc, #436]	; (8004c4c <HAL_UART_MspInit+0x1fc>)
 8004a98:	f043 0301 	orr.w	r3, r3, #1
 8004a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a9e:	4b6b      	ldr	r3, [pc, #428]	; (8004c4c <HAL_UART_MspInit+0x1fc>)
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004aaa:	2300      	movs	r3, #0
 8004aac:	623b      	str	r3, [r7, #32]
 8004aae:	4b67      	ldr	r3, [pc, #412]	; (8004c4c <HAL_UART_MspInit+0x1fc>)
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab2:	4a66      	ldr	r2, [pc, #408]	; (8004c4c <HAL_UART_MspInit+0x1fc>)
 8004ab4:	f043 0302 	orr.w	r3, r3, #2
 8004ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8004aba:	4b64      	ldr	r3, [pc, #400]	; (8004c4c <HAL_UART_MspInit+0x1fc>)
 8004abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	623b      	str	r3, [r7, #32]
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004acc:	2302      	movs	r3, #2
 8004ace:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004ad8:	2307      	movs	r3, #7
 8004ada:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004adc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	485b      	ldr	r0, [pc, #364]	; (8004c50 <HAL_UART_MspInit+0x200>)
 8004ae4:	f000 fc42 	bl	800536c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004ae8:	2380      	movs	r3, #128	; 0x80
 8004aea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aec:	2302      	movs	r3, #2
 8004aee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af0:	2300      	movs	r3, #0
 8004af2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004af4:	2303      	movs	r3, #3
 8004af6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004af8:	2307      	movs	r3, #7
 8004afa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004afc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b00:	4619      	mov	r1, r3
 8004b02:	4854      	ldr	r0, [pc, #336]	; (8004c54 <HAL_UART_MspInit+0x204>)
 8004b04:	f000 fc32 	bl	800536c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004b08:	2200      	movs	r2, #0
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	2025      	movs	r0, #37	; 0x25
 8004b0e:	f000 fb64 	bl	80051da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004b12:	2025      	movs	r0, #37	; 0x25
 8004b14:	f000 fb7d 	bl	8005212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004b18:	e091      	b.n	8004c3e <HAL_UART_MspInit+0x1ee>
  else if(huart->Instance==USART2)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a4e      	ldr	r2, [pc, #312]	; (8004c58 <HAL_UART_MspInit+0x208>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d134      	bne.n	8004b8e <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b24:	2300      	movs	r3, #0
 8004b26:	61fb      	str	r3, [r7, #28]
 8004b28:	4b48      	ldr	r3, [pc, #288]	; (8004c4c <HAL_UART_MspInit+0x1fc>)
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2c:	4a47      	ldr	r2, [pc, #284]	; (8004c4c <HAL_UART_MspInit+0x1fc>)
 8004b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b32:	6413      	str	r3, [r2, #64]	; 0x40
 8004b34:	4b45      	ldr	r3, [pc, #276]	; (8004c4c <HAL_UART_MspInit+0x1fc>)
 8004b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3c:	61fb      	str	r3, [r7, #28]
 8004b3e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b40:	2300      	movs	r3, #0
 8004b42:	61bb      	str	r3, [r7, #24]
 8004b44:	4b41      	ldr	r3, [pc, #260]	; (8004c4c <HAL_UART_MspInit+0x1fc>)
 8004b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b48:	4a40      	ldr	r2, [pc, #256]	; (8004c4c <HAL_UART_MspInit+0x1fc>)
 8004b4a:	f043 0301 	orr.w	r3, r3, #1
 8004b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8004b50:	4b3e      	ldr	r3, [pc, #248]	; (8004c4c <HAL_UART_MspInit+0x1fc>)
 8004b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	61bb      	str	r3, [r7, #24]
 8004b5a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004b5c:	230c      	movs	r3, #12
 8004b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b60:	2302      	movs	r3, #2
 8004b62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b64:	2300      	movs	r3, #0
 8004b66:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004b6c:	2307      	movs	r3, #7
 8004b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b74:	4619      	mov	r1, r3
 8004b76:	4836      	ldr	r0, [pc, #216]	; (8004c50 <HAL_UART_MspInit+0x200>)
 8004b78:	f000 fbf8 	bl	800536c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	2100      	movs	r1, #0
 8004b80:	2026      	movs	r0, #38	; 0x26
 8004b82:	f000 fb2a 	bl	80051da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004b86:	2026      	movs	r0, #38	; 0x26
 8004b88:	f000 fb43 	bl	8005212 <HAL_NVIC_EnableIRQ>
}
 8004b8c:	e057      	b.n	8004c3e <HAL_UART_MspInit+0x1ee>
  else if(huart->Instance==USART6)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a32      	ldr	r2, [pc, #200]	; (8004c5c <HAL_UART_MspInit+0x20c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d152      	bne.n	8004c3e <HAL_UART_MspInit+0x1ee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004b98:	2300      	movs	r3, #0
 8004b9a:	617b      	str	r3, [r7, #20]
 8004b9c:	4b2b      	ldr	r3, [pc, #172]	; (8004c4c <HAL_UART_MspInit+0x1fc>)
 8004b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba0:	4a2a      	ldr	r2, [pc, #168]	; (8004c4c <HAL_UART_MspInit+0x1fc>)
 8004ba2:	f043 0320 	orr.w	r3, r3, #32
 8004ba6:	6453      	str	r3, [r2, #68]	; 0x44
 8004ba8:	4b28      	ldr	r3, [pc, #160]	; (8004c4c <HAL_UART_MspInit+0x1fc>)
 8004baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bac:	f003 0320 	and.w	r3, r3, #32
 8004bb0:	617b      	str	r3, [r7, #20]
 8004bb2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	613b      	str	r3, [r7, #16]
 8004bb8:	4b24      	ldr	r3, [pc, #144]	; (8004c4c <HAL_UART_MspInit+0x1fc>)
 8004bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbc:	4a23      	ldr	r2, [pc, #140]	; (8004c4c <HAL_UART_MspInit+0x1fc>)
 8004bbe:	f043 0304 	orr.w	r3, r3, #4
 8004bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8004bc4:	4b21      	ldr	r3, [pc, #132]	; (8004c4c <HAL_UART_MspInit+0x1fc>)
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	613b      	str	r3, [r7, #16]
 8004bce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	4b1d      	ldr	r3, [pc, #116]	; (8004c4c <HAL_UART_MspInit+0x1fc>)
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd8:	4a1c      	ldr	r2, [pc, #112]	; (8004c4c <HAL_UART_MspInit+0x1fc>)
 8004bda:	f043 0301 	orr.w	r3, r3, #1
 8004bde:	6313      	str	r3, [r2, #48]	; 0x30
 8004be0:	4b1a      	ldr	r3, [pc, #104]	; (8004c4c <HAL_UART_MspInit+0x1fc>)
 8004be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004bec:	2340      	movs	r3, #64	; 0x40
 8004bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004bfc:	2308      	movs	r3, #8
 8004bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c04:	4619      	mov	r1, r3
 8004c06:	4816      	ldr	r0, [pc, #88]	; (8004c60 <HAL_UART_MspInit+0x210>)
 8004c08:	f000 fbb0 	bl	800536c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c12:	2302      	movs	r3, #2
 8004c14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c16:	2300      	movs	r3, #0
 8004c18:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004c1e:	2308      	movs	r3, #8
 8004c20:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c26:	4619      	mov	r1, r3
 8004c28:	4809      	ldr	r0, [pc, #36]	; (8004c50 <HAL_UART_MspInit+0x200>)
 8004c2a:	f000 fb9f 	bl	800536c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004c2e:	2200      	movs	r2, #0
 8004c30:	2100      	movs	r1, #0
 8004c32:	2047      	movs	r0, #71	; 0x47
 8004c34:	f000 fad1 	bl	80051da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004c38:	2047      	movs	r0, #71	; 0x47
 8004c3a:	f000 faea 	bl	8005212 <HAL_NVIC_EnableIRQ>
}
 8004c3e:	bf00      	nop
 8004c40:	3740      	adds	r7, #64	; 0x40
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	40011000 	.word	0x40011000
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	40020000 	.word	0x40020000
 8004c54:	40020400 	.word	0x40020400
 8004c58:	40004400 	.word	0x40004400
 8004c5c:	40011400 	.word	0x40011400
 8004c60:	40020800 	.word	0x40020800

08004c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004c68:	e7fe      	b.n	8004c68 <NMI_Handler+0x4>

08004c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c6e:	e7fe      	b.n	8004c6e <HardFault_Handler+0x4>

08004c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c74:	e7fe      	b.n	8004c74 <MemManage_Handler+0x4>

08004c76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c76:	b480      	push	{r7}
 8004c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c7a:	e7fe      	b.n	8004c7a <BusFault_Handler+0x4>

08004c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c80:	e7fe      	b.n	8004c80 <UsageFault_Handler+0x4>

08004c82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c82:	b480      	push	{r7}
 8004c84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c86:	bf00      	nop
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c94:	bf00      	nop
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ca2:	bf00      	nop
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004cb0:	f000 f974 	bl	8004f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004cb4:	bf00      	nop
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004cbc:	4802      	ldr	r0, [pc, #8]	; (8004cc8 <USART1_IRQHandler+0x10>)
 8004cbe:	f003 f8ed 	bl	8007e9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004cc2:	bf00      	nop
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	200004bc 	.word	0x200004bc

08004ccc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004cd0:	4802      	ldr	r0, [pc, #8]	; (8004cdc <USART2_IRQHandler+0x10>)
 8004cd2:	f003 f8e3 	bl	8007e9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004cd6:	bf00      	nop
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	20000500 	.word	0x20000500

08004ce0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004ce4:	4802      	ldr	r0, [pc, #8]	; (8004cf0 <USART6_IRQHandler+0x10>)
 8004ce6:	f003 f8d9 	bl	8007e9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004cea:	bf00      	nop
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	20000544 	.word	0x20000544

08004cf4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  return 1;
 8004cf8:	2301      	movs	r3, #1
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <_kill>:

int _kill(int pid, int sig)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004d0e:	f005 fecd 	bl	800aaac <__errno>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2216      	movs	r2, #22
 8004d16:	601a      	str	r2, [r3, #0]
  return -1;
 8004d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3708      	adds	r7, #8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <_exit>:

void _exit (int status)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004d2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7ff ffe7 	bl	8004d04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004d36:	e7fe      	b.n	8004d36 <_exit+0x12>

08004d38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d44:	2300      	movs	r3, #0
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	e00a      	b.n	8004d60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004d4a:	f3af 8000 	nop.w
 8004d4e:	4601      	mov	r1, r0
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	60ba      	str	r2, [r7, #8]
 8004d56:	b2ca      	uxtb	r2, r1
 8004d58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	dbf0      	blt.n	8004d4a <_read+0x12>
  }

  return len;
 8004d68:	687b      	ldr	r3, [r7, #4]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b086      	sub	sp, #24
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	60f8      	str	r0, [r7, #12]
 8004d7a:	60b9      	str	r1, [r7, #8]
 8004d7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d7e:	2300      	movs	r3, #0
 8004d80:	617b      	str	r3, [r7, #20]
 8004d82:	e009      	b.n	8004d98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	1c5a      	adds	r2, r3, #1
 8004d88:	60ba      	str	r2, [r7, #8]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	3301      	adds	r3, #1
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	dbf1      	blt.n	8004d84 <_write+0x12>
  }
  return len;
 8004da0:	687b      	ldr	r3, [r7, #4]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3718      	adds	r7, #24
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <_close>:

int _close(int file)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004db2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004dd2:	605a      	str	r2, [r3, #4]
  return 0;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <_isatty>:

int _isatty(int file)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004dea:	2301      	movs	r3, #1
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
	...

08004e14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e1c:	4a14      	ldr	r2, [pc, #80]	; (8004e70 <_sbrk+0x5c>)
 8004e1e:	4b15      	ldr	r3, [pc, #84]	; (8004e74 <_sbrk+0x60>)
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e28:	4b13      	ldr	r3, [pc, #76]	; (8004e78 <_sbrk+0x64>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d102      	bne.n	8004e36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e30:	4b11      	ldr	r3, [pc, #68]	; (8004e78 <_sbrk+0x64>)
 8004e32:	4a12      	ldr	r2, [pc, #72]	; (8004e7c <_sbrk+0x68>)
 8004e34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e36:	4b10      	ldr	r3, [pc, #64]	; (8004e78 <_sbrk+0x64>)
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d207      	bcs.n	8004e54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e44:	f005 fe32 	bl	800aaac <__errno>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	220c      	movs	r2, #12
 8004e4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e52:	e009      	b.n	8004e68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e54:	4b08      	ldr	r3, [pc, #32]	; (8004e78 <_sbrk+0x64>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e5a:	4b07      	ldr	r3, [pc, #28]	; (8004e78 <_sbrk+0x64>)
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4413      	add	r3, r2
 8004e62:	4a05      	ldr	r2, [pc, #20]	; (8004e78 <_sbrk+0x64>)
 8004e64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e66:	68fb      	ldr	r3, [r7, #12]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	20020000 	.word	0x20020000
 8004e74:	00000400 	.word	0x00000400
 8004e78:	200007c0 	.word	0x200007c0
 8004e7c:	20000918 	.word	0x20000918

08004e80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e84:	4b06      	ldr	r3, [pc, #24]	; (8004ea0 <SystemInit+0x20>)
 8004e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8a:	4a05      	ldr	r2, [pc, #20]	; (8004ea0 <SystemInit+0x20>)
 8004e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e94:	bf00      	nop
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	e000ed00 	.word	0xe000ed00

08004ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004edc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ea8:	480d      	ldr	r0, [pc, #52]	; (8004ee0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004eaa:	490e      	ldr	r1, [pc, #56]	; (8004ee4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004eac:	4a0e      	ldr	r2, [pc, #56]	; (8004ee8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004eb0:	e002      	b.n	8004eb8 <LoopCopyDataInit>

08004eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004eb6:	3304      	adds	r3, #4

08004eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ebc:	d3f9      	bcc.n	8004eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ebe:	4a0b      	ldr	r2, [pc, #44]	; (8004eec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004ec0:	4c0b      	ldr	r4, [pc, #44]	; (8004ef0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ec4:	e001      	b.n	8004eca <LoopFillZerobss>

08004ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ec8:	3204      	adds	r2, #4

08004eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ecc:	d3fb      	bcc.n	8004ec6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004ece:	f7ff ffd7 	bl	8004e80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ed2:	f005 fdf1 	bl	800aab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ed6:	f7fe ff1f 	bl	8003d18 <main>
  bx  lr    
 8004eda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004edc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ee4:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8004ee8:	0800e110 	.word	0x0800e110
  ldr r2, =_sbss
 8004eec:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8004ef0:	20000914 	.word	0x20000914

08004ef4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ef4:	e7fe      	b.n	8004ef4 <ADC_IRQHandler>
	...

08004ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004efc:	4b0e      	ldr	r3, [pc, #56]	; (8004f38 <HAL_Init+0x40>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a0d      	ldr	r2, [pc, #52]	; (8004f38 <HAL_Init+0x40>)
 8004f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f08:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <HAL_Init+0x40>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a0a      	ldr	r2, [pc, #40]	; (8004f38 <HAL_Init+0x40>)
 8004f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f14:	4b08      	ldr	r3, [pc, #32]	; (8004f38 <HAL_Init+0x40>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a07      	ldr	r2, [pc, #28]	; (8004f38 <HAL_Init+0x40>)
 8004f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f20:	2003      	movs	r0, #3
 8004f22:	f000 f94f 	bl	80051c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f26:	2000      	movs	r0, #0
 8004f28:	f000 f808 	bl	8004f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f2c:	f7ff fc34 	bl	8004798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	40023c00 	.word	0x40023c00

08004f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f44:	4b12      	ldr	r3, [pc, #72]	; (8004f90 <HAL_InitTick+0x54>)
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	4b12      	ldr	r3, [pc, #72]	; (8004f94 <HAL_InitTick+0x58>)
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 f967 	bl	800522e <HAL_SYSTICK_Config>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e00e      	b.n	8004f88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b0f      	cmp	r3, #15
 8004f6e:	d80a      	bhi.n	8004f86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f70:	2200      	movs	r2, #0
 8004f72:	6879      	ldr	r1, [r7, #4]
 8004f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f78:	f000 f92f 	bl	80051da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f7c:	4a06      	ldr	r2, [pc, #24]	; (8004f98 <HAL_InitTick+0x5c>)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	e000      	b.n	8004f88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	2000006c 	.word	0x2000006c
 8004f94:	20000074 	.word	0x20000074
 8004f98:	20000070 	.word	0x20000070

08004f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004fa0:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <HAL_IncTick+0x20>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <HAL_IncTick+0x24>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4413      	add	r3, r2
 8004fac:	4a04      	ldr	r2, [pc, #16]	; (8004fc0 <HAL_IncTick+0x24>)
 8004fae:	6013      	str	r3, [r2, #0]
}
 8004fb0:	bf00      	nop
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	20000074 	.word	0x20000074
 8004fc0:	200007c4 	.word	0x200007c4

08004fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8004fc8:	4b03      	ldr	r3, [pc, #12]	; (8004fd8 <HAL_GetTick+0x14>)
 8004fca:	681b      	ldr	r3, [r3, #0]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	200007c4 	.word	0x200007c4

08004fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004fe4:	f7ff ffee 	bl	8004fc4 <HAL_GetTick>
 8004fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ff4:	d005      	beq.n	8005002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ff6:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <HAL_Delay+0x44>)
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4413      	add	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005002:	bf00      	nop
 8005004:	f7ff ffde 	bl	8004fc4 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	429a      	cmp	r2, r3
 8005012:	d8f7      	bhi.n	8005004 <HAL_Delay+0x28>
  {
  }
}
 8005014:	bf00      	nop
 8005016:	bf00      	nop
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	20000074 	.word	0x20000074

08005024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f003 0307 	and.w	r3, r3, #7
 8005032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005034:	4b0c      	ldr	r3, [pc, #48]	; (8005068 <__NVIC_SetPriorityGrouping+0x44>)
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005040:	4013      	ands	r3, r2
 8005042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800504c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005056:	4a04      	ldr	r2, [pc, #16]	; (8005068 <__NVIC_SetPriorityGrouping+0x44>)
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	60d3      	str	r3, [r2, #12]
}
 800505c:	bf00      	nop
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	e000ed00 	.word	0xe000ed00

0800506c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005070:	4b04      	ldr	r3, [pc, #16]	; (8005084 <__NVIC_GetPriorityGrouping+0x18>)
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	0a1b      	lsrs	r3, r3, #8
 8005076:	f003 0307 	and.w	r3, r3, #7
}
 800507a:	4618      	mov	r0, r3
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	e000ed00 	.word	0xe000ed00

08005088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	4603      	mov	r3, r0
 8005090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005096:	2b00      	cmp	r3, #0
 8005098:	db0b      	blt.n	80050b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800509a:	79fb      	ldrb	r3, [r7, #7]
 800509c:	f003 021f 	and.w	r2, r3, #31
 80050a0:	4907      	ldr	r1, [pc, #28]	; (80050c0 <__NVIC_EnableIRQ+0x38>)
 80050a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a6:	095b      	lsrs	r3, r3, #5
 80050a8:	2001      	movs	r0, #1
 80050aa:	fa00 f202 	lsl.w	r2, r0, r2
 80050ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	e000e100 	.word	0xe000e100

080050c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	4603      	mov	r3, r0
 80050cc:	6039      	str	r1, [r7, #0]
 80050ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	db0a      	blt.n	80050ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	b2da      	uxtb	r2, r3
 80050dc:	490c      	ldr	r1, [pc, #48]	; (8005110 <__NVIC_SetPriority+0x4c>)
 80050de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e2:	0112      	lsls	r2, r2, #4
 80050e4:	b2d2      	uxtb	r2, r2
 80050e6:	440b      	add	r3, r1
 80050e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050ec:	e00a      	b.n	8005104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	4908      	ldr	r1, [pc, #32]	; (8005114 <__NVIC_SetPriority+0x50>)
 80050f4:	79fb      	ldrb	r3, [r7, #7]
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	3b04      	subs	r3, #4
 80050fc:	0112      	lsls	r2, r2, #4
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	440b      	add	r3, r1
 8005102:	761a      	strb	r2, [r3, #24]
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	e000e100 	.word	0xe000e100
 8005114:	e000ed00 	.word	0xe000ed00

08005118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005118:	b480      	push	{r7}
 800511a:	b089      	sub	sp, #36	; 0x24
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f003 0307 	and.w	r3, r3, #7
 800512a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	f1c3 0307 	rsb	r3, r3, #7
 8005132:	2b04      	cmp	r3, #4
 8005134:	bf28      	it	cs
 8005136:	2304      	movcs	r3, #4
 8005138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	3304      	adds	r3, #4
 800513e:	2b06      	cmp	r3, #6
 8005140:	d902      	bls.n	8005148 <NVIC_EncodePriority+0x30>
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	3b03      	subs	r3, #3
 8005146:	e000      	b.n	800514a <NVIC_EncodePriority+0x32>
 8005148:	2300      	movs	r3, #0
 800514a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800514c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	fa02 f303 	lsl.w	r3, r2, r3
 8005156:	43da      	mvns	r2, r3
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	401a      	ands	r2, r3
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005160:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	fa01 f303 	lsl.w	r3, r1, r3
 800516a:	43d9      	mvns	r1, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005170:	4313      	orrs	r3, r2
         );
}
 8005172:	4618      	mov	r0, r3
 8005174:	3724      	adds	r7, #36	; 0x24
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
	...

08005180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3b01      	subs	r3, #1
 800518c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005190:	d301      	bcc.n	8005196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005192:	2301      	movs	r3, #1
 8005194:	e00f      	b.n	80051b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005196:	4a0a      	ldr	r2, [pc, #40]	; (80051c0 <SysTick_Config+0x40>)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3b01      	subs	r3, #1
 800519c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800519e:	210f      	movs	r1, #15
 80051a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051a4:	f7ff ff8e 	bl	80050c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051a8:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <SysTick_Config+0x40>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051ae:	4b04      	ldr	r3, [pc, #16]	; (80051c0 <SysTick_Config+0x40>)
 80051b0:	2207      	movs	r2, #7
 80051b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	e000e010 	.word	0xe000e010

080051c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7ff ff29 	bl	8005024 <__NVIC_SetPriorityGrouping>
}
 80051d2:	bf00      	nop
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80051da:	b580      	push	{r7, lr}
 80051dc:	b086      	sub	sp, #24
 80051de:	af00      	add	r7, sp, #0
 80051e0:	4603      	mov	r3, r0
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	607a      	str	r2, [r7, #4]
 80051e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80051ec:	f7ff ff3e 	bl	800506c <__NVIC_GetPriorityGrouping>
 80051f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	68b9      	ldr	r1, [r7, #8]
 80051f6:	6978      	ldr	r0, [r7, #20]
 80051f8:	f7ff ff8e 	bl	8005118 <NVIC_EncodePriority>
 80051fc:	4602      	mov	r2, r0
 80051fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005202:	4611      	mov	r1, r2
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff ff5d 	bl	80050c4 <__NVIC_SetPriority>
}
 800520a:	bf00      	nop
 800520c:	3718      	adds	r7, #24
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b082      	sub	sp, #8
 8005216:	af00      	add	r7, sp, #0
 8005218:	4603      	mov	r3, r0
 800521a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800521c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005220:	4618      	mov	r0, r3
 8005222:	f7ff ff31 	bl	8005088 <__NVIC_EnableIRQ>
}
 8005226:	bf00      	nop
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b082      	sub	sp, #8
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7ff ffa2 	bl	8005180 <SysTick_Config>
 800523c:	4603      	mov	r3, r0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b084      	sub	sp, #16
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005252:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005254:	f7ff feb6 	bl	8004fc4 <HAL_GetTick>
 8005258:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d008      	beq.n	8005278 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2280      	movs	r2, #128	; 0x80
 800526a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e052      	b.n	800531e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 0216 	bic.w	r2, r2, #22
 8005286:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695a      	ldr	r2, [r3, #20]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005296:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529c:	2b00      	cmp	r3, #0
 800529e:	d103      	bne.n	80052a8 <HAL_DMA_Abort+0x62>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d007      	beq.n	80052b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 0208 	bic.w	r2, r2, #8
 80052b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0201 	bic.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052c8:	e013      	b.n	80052f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80052ca:	f7ff fe7b 	bl	8004fc4 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	2b05      	cmp	r3, #5
 80052d6:	d90c      	bls.n	80052f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2220      	movs	r2, #32
 80052dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2203      	movs	r2, #3
 80052e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e015      	b.n	800531e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1e4      	bne.n	80052ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005304:	223f      	movs	r2, #63	; 0x3f
 8005306:	409a      	lsls	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d004      	beq.n	8005344 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2280      	movs	r2, #128	; 0x80
 800533e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e00c      	b.n	800535e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2205      	movs	r2, #5
 8005348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0201 	bic.w	r2, r2, #1
 800535a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800536c:	b480      	push	{r7}
 800536e:	b089      	sub	sp, #36	; 0x24
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005376:	2300      	movs	r3, #0
 8005378:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800537a:	2300      	movs	r3, #0
 800537c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800537e:	2300      	movs	r3, #0
 8005380:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005382:	2300      	movs	r3, #0
 8005384:	61fb      	str	r3, [r7, #28]
 8005386:	e159      	b.n	800563c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005388:	2201      	movs	r2, #1
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	fa02 f303 	lsl.w	r3, r2, r3
 8005390:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	4013      	ands	r3, r2
 800539a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	f040 8148 	bne.w	8005636 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d005      	beq.n	80053be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d130      	bne.n	8005420 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	2203      	movs	r2, #3
 80053ca:	fa02 f303 	lsl.w	r3, r2, r3
 80053ce:	43db      	mvns	r3, r3
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	4013      	ands	r3, r2
 80053d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	68da      	ldr	r2, [r3, #12]
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	fa02 f303 	lsl.w	r3, r2, r3
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053f4:	2201      	movs	r2, #1
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	43db      	mvns	r3, r3
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	4013      	ands	r3, r2
 8005402:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	091b      	lsrs	r3, r3, #4
 800540a:	f003 0201 	and.w	r2, r3, #1
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	fa02 f303 	lsl.w	r3, r2, r3
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	4313      	orrs	r3, r2
 8005418:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f003 0303 	and.w	r3, r3, #3
 8005428:	2b03      	cmp	r3, #3
 800542a:	d017      	beq.n	800545c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	2203      	movs	r2, #3
 8005438:	fa02 f303 	lsl.w	r3, r2, r3
 800543c:	43db      	mvns	r3, r3
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	4013      	ands	r3, r2
 8005442:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	fa02 f303 	lsl.w	r3, r2, r3
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	4313      	orrs	r3, r2
 8005454:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f003 0303 	and.w	r3, r3, #3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d123      	bne.n	80054b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	08da      	lsrs	r2, r3, #3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	3208      	adds	r2, #8
 8005470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005474:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	220f      	movs	r2, #15
 8005480:	fa02 f303 	lsl.w	r3, r2, r3
 8005484:	43db      	mvns	r3, r3
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	4013      	ands	r3, r2
 800548a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	691a      	ldr	r2, [r3, #16]
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	fa02 f303 	lsl.w	r3, r2, r3
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	4313      	orrs	r3, r2
 80054a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	08da      	lsrs	r2, r3, #3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	3208      	adds	r2, #8
 80054aa:	69b9      	ldr	r1, [r7, #24]
 80054ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	2203      	movs	r2, #3
 80054bc:	fa02 f303 	lsl.w	r3, r2, r3
 80054c0:	43db      	mvns	r3, r3
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	4013      	ands	r3, r2
 80054c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f003 0203 	and.w	r2, r3, #3
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	fa02 f303 	lsl.w	r3, r2, r3
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	4313      	orrs	r3, r2
 80054dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 80a2 	beq.w	8005636 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054f2:	2300      	movs	r3, #0
 80054f4:	60fb      	str	r3, [r7, #12]
 80054f6:	4b57      	ldr	r3, [pc, #348]	; (8005654 <HAL_GPIO_Init+0x2e8>)
 80054f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fa:	4a56      	ldr	r2, [pc, #344]	; (8005654 <HAL_GPIO_Init+0x2e8>)
 80054fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005500:	6453      	str	r3, [r2, #68]	; 0x44
 8005502:	4b54      	ldr	r3, [pc, #336]	; (8005654 <HAL_GPIO_Init+0x2e8>)
 8005504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800550e:	4a52      	ldr	r2, [pc, #328]	; (8005658 <HAL_GPIO_Init+0x2ec>)
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	089b      	lsrs	r3, r3, #2
 8005514:	3302      	adds	r3, #2
 8005516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800551a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	f003 0303 	and.w	r3, r3, #3
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	220f      	movs	r2, #15
 8005526:	fa02 f303 	lsl.w	r3, r2, r3
 800552a:	43db      	mvns	r3, r3
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	4013      	ands	r3, r2
 8005530:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a49      	ldr	r2, [pc, #292]	; (800565c <HAL_GPIO_Init+0x2f0>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d019      	beq.n	800556e <HAL_GPIO_Init+0x202>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a48      	ldr	r2, [pc, #288]	; (8005660 <HAL_GPIO_Init+0x2f4>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d013      	beq.n	800556a <HAL_GPIO_Init+0x1fe>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a47      	ldr	r2, [pc, #284]	; (8005664 <HAL_GPIO_Init+0x2f8>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d00d      	beq.n	8005566 <HAL_GPIO_Init+0x1fa>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a46      	ldr	r2, [pc, #280]	; (8005668 <HAL_GPIO_Init+0x2fc>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d007      	beq.n	8005562 <HAL_GPIO_Init+0x1f6>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a45      	ldr	r2, [pc, #276]	; (800566c <HAL_GPIO_Init+0x300>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d101      	bne.n	800555e <HAL_GPIO_Init+0x1f2>
 800555a:	2304      	movs	r3, #4
 800555c:	e008      	b.n	8005570 <HAL_GPIO_Init+0x204>
 800555e:	2307      	movs	r3, #7
 8005560:	e006      	b.n	8005570 <HAL_GPIO_Init+0x204>
 8005562:	2303      	movs	r3, #3
 8005564:	e004      	b.n	8005570 <HAL_GPIO_Init+0x204>
 8005566:	2302      	movs	r3, #2
 8005568:	e002      	b.n	8005570 <HAL_GPIO_Init+0x204>
 800556a:	2301      	movs	r3, #1
 800556c:	e000      	b.n	8005570 <HAL_GPIO_Init+0x204>
 800556e:	2300      	movs	r3, #0
 8005570:	69fa      	ldr	r2, [r7, #28]
 8005572:	f002 0203 	and.w	r2, r2, #3
 8005576:	0092      	lsls	r2, r2, #2
 8005578:	4093      	lsls	r3, r2
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	4313      	orrs	r3, r2
 800557e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005580:	4935      	ldr	r1, [pc, #212]	; (8005658 <HAL_GPIO_Init+0x2ec>)
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	089b      	lsrs	r3, r3, #2
 8005586:	3302      	adds	r3, #2
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800558e:	4b38      	ldr	r3, [pc, #224]	; (8005670 <HAL_GPIO_Init+0x304>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	43db      	mvns	r3, r3
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	4013      	ands	r3, r2
 800559c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80055b2:	4a2f      	ldr	r2, [pc, #188]	; (8005670 <HAL_GPIO_Init+0x304>)
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80055b8:	4b2d      	ldr	r3, [pc, #180]	; (8005670 <HAL_GPIO_Init+0x304>)
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	43db      	mvns	r3, r3
 80055c2:	69ba      	ldr	r2, [r7, #24]
 80055c4:	4013      	ands	r3, r2
 80055c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	4313      	orrs	r3, r2
 80055da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80055dc:	4a24      	ldr	r2, [pc, #144]	; (8005670 <HAL_GPIO_Init+0x304>)
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80055e2:	4b23      	ldr	r3, [pc, #140]	; (8005670 <HAL_GPIO_Init+0x304>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	43db      	mvns	r3, r3
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	4013      	ands	r3, r2
 80055f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	4313      	orrs	r3, r2
 8005604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005606:	4a1a      	ldr	r2, [pc, #104]	; (8005670 <HAL_GPIO_Init+0x304>)
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800560c:	4b18      	ldr	r3, [pc, #96]	; (8005670 <HAL_GPIO_Init+0x304>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	43db      	mvns	r3, r3
 8005616:	69ba      	ldr	r2, [r7, #24]
 8005618:	4013      	ands	r3, r2
 800561a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d003      	beq.n	8005630 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	4313      	orrs	r3, r2
 800562e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005630:	4a0f      	ldr	r2, [pc, #60]	; (8005670 <HAL_GPIO_Init+0x304>)
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	3301      	adds	r3, #1
 800563a:	61fb      	str	r3, [r7, #28]
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	2b0f      	cmp	r3, #15
 8005640:	f67f aea2 	bls.w	8005388 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005644:	bf00      	nop
 8005646:	bf00      	nop
 8005648:	3724      	adds	r7, #36	; 0x24
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	40023800 	.word	0x40023800
 8005658:	40013800 	.word	0x40013800
 800565c:	40020000 	.word	0x40020000
 8005660:	40020400 	.word	0x40020400
 8005664:	40020800 	.word	0x40020800
 8005668:	40020c00 	.word	0x40020c00
 800566c:	40021000 	.word	0x40021000
 8005670:	40013c00 	.word	0x40013c00

08005674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	460b      	mov	r3, r1
 800567e:	807b      	strh	r3, [r7, #2]
 8005680:	4613      	mov	r3, r2
 8005682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005684:	787b      	ldrb	r3, [r7, #1]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800568a:	887a      	ldrh	r2, [r7, #2]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005690:	e003      	b.n	800569a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005692:	887b      	ldrh	r3, [r7, #2]
 8005694:	041a      	lsls	r2, r3, #16
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	619a      	str	r2, [r3, #24]
}
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
	...

080056a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e267      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d075      	beq.n	80057b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056c6:	4b88      	ldr	r3, [pc, #544]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 030c 	and.w	r3, r3, #12
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d00c      	beq.n	80056ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056d2:	4b85      	ldr	r3, [pc, #532]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056da:	2b08      	cmp	r3, #8
 80056dc:	d112      	bne.n	8005704 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056de:	4b82      	ldr	r3, [pc, #520]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056ea:	d10b      	bne.n	8005704 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056ec:	4b7e      	ldr	r3, [pc, #504]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d05b      	beq.n	80057b0 <HAL_RCC_OscConfig+0x108>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d157      	bne.n	80057b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e242      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800570c:	d106      	bne.n	800571c <HAL_RCC_OscConfig+0x74>
 800570e:	4b76      	ldr	r3, [pc, #472]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a75      	ldr	r2, [pc, #468]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 8005714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	e01d      	b.n	8005758 <HAL_RCC_OscConfig+0xb0>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005724:	d10c      	bne.n	8005740 <HAL_RCC_OscConfig+0x98>
 8005726:	4b70      	ldr	r3, [pc, #448]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a6f      	ldr	r2, [pc, #444]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 800572c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	4b6d      	ldr	r3, [pc, #436]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a6c      	ldr	r2, [pc, #432]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 8005738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800573c:	6013      	str	r3, [r2, #0]
 800573e:	e00b      	b.n	8005758 <HAL_RCC_OscConfig+0xb0>
 8005740:	4b69      	ldr	r3, [pc, #420]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a68      	ldr	r2, [pc, #416]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 8005746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800574a:	6013      	str	r3, [r2, #0]
 800574c:	4b66      	ldr	r3, [pc, #408]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a65      	ldr	r2, [pc, #404]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 8005752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d013      	beq.n	8005788 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005760:	f7ff fc30 	bl	8004fc4 <HAL_GetTick>
 8005764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005766:	e008      	b.n	800577a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005768:	f7ff fc2c 	bl	8004fc4 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b64      	cmp	r3, #100	; 0x64
 8005774:	d901      	bls.n	800577a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e207      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800577a:	4b5b      	ldr	r3, [pc, #364]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d0f0      	beq.n	8005768 <HAL_RCC_OscConfig+0xc0>
 8005786:	e014      	b.n	80057b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005788:	f7ff fc1c 	bl	8004fc4 <HAL_GetTick>
 800578c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800578e:	e008      	b.n	80057a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005790:	f7ff fc18 	bl	8004fc4 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b64      	cmp	r3, #100	; 0x64
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e1f3      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057a2:	4b51      	ldr	r3, [pc, #324]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1f0      	bne.n	8005790 <HAL_RCC_OscConfig+0xe8>
 80057ae:	e000      	b.n	80057b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d063      	beq.n	8005886 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057be:	4b4a      	ldr	r3, [pc, #296]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 030c 	and.w	r3, r3, #12
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00b      	beq.n	80057e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057ca:	4b47      	ldr	r3, [pc, #284]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057d2:	2b08      	cmp	r3, #8
 80057d4:	d11c      	bne.n	8005810 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057d6:	4b44      	ldr	r3, [pc, #272]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d116      	bne.n	8005810 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057e2:	4b41      	ldr	r3, [pc, #260]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d005      	beq.n	80057fa <HAL_RCC_OscConfig+0x152>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d001      	beq.n	80057fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e1c7      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057fa:	4b3b      	ldr	r3, [pc, #236]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	4937      	ldr	r1, [pc, #220]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 800580a:	4313      	orrs	r3, r2
 800580c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800580e:	e03a      	b.n	8005886 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d020      	beq.n	800585a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005818:	4b34      	ldr	r3, [pc, #208]	; (80058ec <HAL_RCC_OscConfig+0x244>)
 800581a:	2201      	movs	r2, #1
 800581c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581e:	f7ff fbd1 	bl	8004fc4 <HAL_GetTick>
 8005822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005824:	e008      	b.n	8005838 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005826:	f7ff fbcd 	bl	8004fc4 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d901      	bls.n	8005838 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e1a8      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005838:	4b2b      	ldr	r3, [pc, #172]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d0f0      	beq.n	8005826 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005844:	4b28      	ldr	r3, [pc, #160]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	4925      	ldr	r1, [pc, #148]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 8005854:	4313      	orrs	r3, r2
 8005856:	600b      	str	r3, [r1, #0]
 8005858:	e015      	b.n	8005886 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800585a:	4b24      	ldr	r3, [pc, #144]	; (80058ec <HAL_RCC_OscConfig+0x244>)
 800585c:	2200      	movs	r2, #0
 800585e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005860:	f7ff fbb0 	bl	8004fc4 <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005868:	f7ff fbac 	bl	8004fc4 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e187      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800587a:	4b1b      	ldr	r3, [pc, #108]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1f0      	bne.n	8005868 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0308 	and.w	r3, r3, #8
 800588e:	2b00      	cmp	r3, #0
 8005890:	d036      	beq.n	8005900 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d016      	beq.n	80058c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800589a:	4b15      	ldr	r3, [pc, #84]	; (80058f0 <HAL_RCC_OscConfig+0x248>)
 800589c:	2201      	movs	r2, #1
 800589e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058a0:	f7ff fb90 	bl	8004fc4 <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058a8:	f7ff fb8c 	bl	8004fc4 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e167      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ba:	4b0b      	ldr	r3, [pc, #44]	; (80058e8 <HAL_RCC_OscConfig+0x240>)
 80058bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d0f0      	beq.n	80058a8 <HAL_RCC_OscConfig+0x200>
 80058c6:	e01b      	b.n	8005900 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058c8:	4b09      	ldr	r3, [pc, #36]	; (80058f0 <HAL_RCC_OscConfig+0x248>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058ce:	f7ff fb79 	bl	8004fc4 <HAL_GetTick>
 80058d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058d4:	e00e      	b.n	80058f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058d6:	f7ff fb75 	bl	8004fc4 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d907      	bls.n	80058f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e150      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
 80058e8:	40023800 	.word	0x40023800
 80058ec:	42470000 	.word	0x42470000
 80058f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058f4:	4b88      	ldr	r3, [pc, #544]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 80058f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1ea      	bne.n	80058d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0304 	and.w	r3, r3, #4
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 8097 	beq.w	8005a3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800590e:	2300      	movs	r3, #0
 8005910:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005912:	4b81      	ldr	r3, [pc, #516]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10f      	bne.n	800593e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800591e:	2300      	movs	r3, #0
 8005920:	60bb      	str	r3, [r7, #8]
 8005922:	4b7d      	ldr	r3, [pc, #500]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 8005924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005926:	4a7c      	ldr	r2, [pc, #496]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 8005928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800592c:	6413      	str	r3, [r2, #64]	; 0x40
 800592e:	4b7a      	ldr	r3, [pc, #488]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005936:	60bb      	str	r3, [r7, #8]
 8005938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800593a:	2301      	movs	r3, #1
 800593c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800593e:	4b77      	ldr	r3, [pc, #476]	; (8005b1c <HAL_RCC_OscConfig+0x474>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005946:	2b00      	cmp	r3, #0
 8005948:	d118      	bne.n	800597c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800594a:	4b74      	ldr	r3, [pc, #464]	; (8005b1c <HAL_RCC_OscConfig+0x474>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a73      	ldr	r2, [pc, #460]	; (8005b1c <HAL_RCC_OscConfig+0x474>)
 8005950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005956:	f7ff fb35 	bl	8004fc4 <HAL_GetTick>
 800595a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800595c:	e008      	b.n	8005970 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800595e:	f7ff fb31 	bl	8004fc4 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b02      	cmp	r3, #2
 800596a:	d901      	bls.n	8005970 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e10c      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005970:	4b6a      	ldr	r3, [pc, #424]	; (8005b1c <HAL_RCC_OscConfig+0x474>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0f0      	beq.n	800595e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d106      	bne.n	8005992 <HAL_RCC_OscConfig+0x2ea>
 8005984:	4b64      	ldr	r3, [pc, #400]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 8005986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005988:	4a63      	ldr	r2, [pc, #396]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 800598a:	f043 0301 	orr.w	r3, r3, #1
 800598e:	6713      	str	r3, [r2, #112]	; 0x70
 8005990:	e01c      	b.n	80059cc <HAL_RCC_OscConfig+0x324>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	2b05      	cmp	r3, #5
 8005998:	d10c      	bne.n	80059b4 <HAL_RCC_OscConfig+0x30c>
 800599a:	4b5f      	ldr	r3, [pc, #380]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 800599c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599e:	4a5e      	ldr	r2, [pc, #376]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 80059a0:	f043 0304 	orr.w	r3, r3, #4
 80059a4:	6713      	str	r3, [r2, #112]	; 0x70
 80059a6:	4b5c      	ldr	r3, [pc, #368]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 80059a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059aa:	4a5b      	ldr	r2, [pc, #364]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 80059ac:	f043 0301 	orr.w	r3, r3, #1
 80059b0:	6713      	str	r3, [r2, #112]	; 0x70
 80059b2:	e00b      	b.n	80059cc <HAL_RCC_OscConfig+0x324>
 80059b4:	4b58      	ldr	r3, [pc, #352]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 80059b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b8:	4a57      	ldr	r2, [pc, #348]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 80059ba:	f023 0301 	bic.w	r3, r3, #1
 80059be:	6713      	str	r3, [r2, #112]	; 0x70
 80059c0:	4b55      	ldr	r3, [pc, #340]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 80059c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c4:	4a54      	ldr	r2, [pc, #336]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 80059c6:	f023 0304 	bic.w	r3, r3, #4
 80059ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d015      	beq.n	8005a00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d4:	f7ff faf6 	bl	8004fc4 <HAL_GetTick>
 80059d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059da:	e00a      	b.n	80059f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059dc:	f7ff faf2 	bl	8004fc4 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e0cb      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059f2:	4b49      	ldr	r3, [pc, #292]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 80059f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d0ee      	beq.n	80059dc <HAL_RCC_OscConfig+0x334>
 80059fe:	e014      	b.n	8005a2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a00:	f7ff fae0 	bl	8004fc4 <HAL_GetTick>
 8005a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a06:	e00a      	b.n	8005a1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a08:	f7ff fadc 	bl	8004fc4 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e0b5      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a1e:	4b3e      	ldr	r3, [pc, #248]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 8005a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1ee      	bne.n	8005a08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a2a:	7dfb      	ldrb	r3, [r7, #23]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d105      	bne.n	8005a3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a30:	4b39      	ldr	r3, [pc, #228]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 8005a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a34:	4a38      	ldr	r2, [pc, #224]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 8005a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 80a1 	beq.w	8005b88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a46:	4b34      	ldr	r3, [pc, #208]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 030c 	and.w	r3, r3, #12
 8005a4e:	2b08      	cmp	r3, #8
 8005a50:	d05c      	beq.n	8005b0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d141      	bne.n	8005ade <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a5a:	4b31      	ldr	r3, [pc, #196]	; (8005b20 <HAL_RCC_OscConfig+0x478>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a60:	f7ff fab0 	bl	8004fc4 <HAL_GetTick>
 8005a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a66:	e008      	b.n	8005a7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a68:	f7ff faac 	bl	8004fc4 <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e087      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a7a:	4b27      	ldr	r3, [pc, #156]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1f0      	bne.n	8005a68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	69da      	ldr	r2, [r3, #28]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	019b      	lsls	r3, r3, #6
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9c:	085b      	lsrs	r3, r3, #1
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	041b      	lsls	r3, r3, #16
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa8:	061b      	lsls	r3, r3, #24
 8005aaa:	491b      	ldr	r1, [pc, #108]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ab0:	4b1b      	ldr	r3, [pc, #108]	; (8005b20 <HAL_RCC_OscConfig+0x478>)
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ab6:	f7ff fa85 	bl	8004fc4 <HAL_GetTick>
 8005aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005abc:	e008      	b.n	8005ad0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005abe:	f7ff fa81 	bl	8004fc4 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d901      	bls.n	8005ad0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e05c      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ad0:	4b11      	ldr	r3, [pc, #68]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0f0      	beq.n	8005abe <HAL_RCC_OscConfig+0x416>
 8005adc:	e054      	b.n	8005b88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ade:	4b10      	ldr	r3, [pc, #64]	; (8005b20 <HAL_RCC_OscConfig+0x478>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae4:	f7ff fa6e 	bl	8004fc4 <HAL_GetTick>
 8005ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aea:	e008      	b.n	8005afe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aec:	f7ff fa6a 	bl	8004fc4 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e045      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005afe:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <HAL_RCC_OscConfig+0x470>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1f0      	bne.n	8005aec <HAL_RCC_OscConfig+0x444>
 8005b0a:	e03d      	b.n	8005b88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d107      	bne.n	8005b24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e038      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
 8005b18:	40023800 	.word	0x40023800
 8005b1c:	40007000 	.word	0x40007000
 8005b20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b24:	4b1b      	ldr	r3, [pc, #108]	; (8005b94 <HAL_RCC_OscConfig+0x4ec>)
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d028      	beq.n	8005b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d121      	bne.n	8005b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d11a      	bne.n	8005b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b54:	4013      	ands	r3, r2
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d111      	bne.n	8005b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6a:	085b      	lsrs	r3, r3, #1
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d107      	bne.n	8005b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d001      	beq.n	8005b88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e000      	b.n	8005b8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3718      	adds	r7, #24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	40023800 	.word	0x40023800

08005b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e0cc      	b.n	8005d46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bac:	4b68      	ldr	r3, [pc, #416]	; (8005d50 <HAL_RCC_ClockConfig+0x1b8>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0307 	and.w	r3, r3, #7
 8005bb4:	683a      	ldr	r2, [r7, #0]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d90c      	bls.n	8005bd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bba:	4b65      	ldr	r3, [pc, #404]	; (8005d50 <HAL_RCC_ClockConfig+0x1b8>)
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	b2d2      	uxtb	r2, r2
 8005bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bc2:	4b63      	ldr	r3, [pc, #396]	; (8005d50 <HAL_RCC_ClockConfig+0x1b8>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0307 	and.w	r3, r3, #7
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d001      	beq.n	8005bd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e0b8      	b.n	8005d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d020      	beq.n	8005c22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d005      	beq.n	8005bf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bec:	4b59      	ldr	r3, [pc, #356]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	4a58      	ldr	r2, [pc, #352]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005bf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005bf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0308 	and.w	r3, r3, #8
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d005      	beq.n	8005c10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c04:	4b53      	ldr	r3, [pc, #332]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	4a52      	ldr	r2, [pc, #328]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005c0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c10:	4b50      	ldr	r3, [pc, #320]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	494d      	ldr	r1, [pc, #308]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d044      	beq.n	8005cb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d107      	bne.n	8005c46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c36:	4b47      	ldr	r3, [pc, #284]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d119      	bne.n	8005c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e07f      	b.n	8005d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d003      	beq.n	8005c56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c52:	2b03      	cmp	r3, #3
 8005c54:	d107      	bne.n	8005c66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c56:	4b3f      	ldr	r3, [pc, #252]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d109      	bne.n	8005c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e06f      	b.n	8005d46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c66:	4b3b      	ldr	r3, [pc, #236]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e067      	b.n	8005d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c76:	4b37      	ldr	r3, [pc, #220]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f023 0203 	bic.w	r2, r3, #3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	4934      	ldr	r1, [pc, #208]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c88:	f7ff f99c 	bl	8004fc4 <HAL_GetTick>
 8005c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c8e:	e00a      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c90:	f7ff f998 	bl	8004fc4 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e04f      	b.n	8005d46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ca6:	4b2b      	ldr	r3, [pc, #172]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f003 020c 	and.w	r2, r3, #12
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d1eb      	bne.n	8005c90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cb8:	4b25      	ldr	r3, [pc, #148]	; (8005d50 <HAL_RCC_ClockConfig+0x1b8>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0307 	and.w	r3, r3, #7
 8005cc0:	683a      	ldr	r2, [r7, #0]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d20c      	bcs.n	8005ce0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cc6:	4b22      	ldr	r3, [pc, #136]	; (8005d50 <HAL_RCC_ClockConfig+0x1b8>)
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	b2d2      	uxtb	r2, r2
 8005ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cce:	4b20      	ldr	r3, [pc, #128]	; (8005d50 <HAL_RCC_ClockConfig+0x1b8>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0307 	and.w	r3, r3, #7
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d001      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e032      	b.n	8005d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d008      	beq.n	8005cfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cec:	4b19      	ldr	r3, [pc, #100]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	4916      	ldr	r1, [pc, #88]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0308 	and.w	r3, r3, #8
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d009      	beq.n	8005d1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d0a:	4b12      	ldr	r3, [pc, #72]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	490e      	ldr	r1, [pc, #56]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d1e:	f000 f821 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 8005d22:	4602      	mov	r2, r0
 8005d24:	4b0b      	ldr	r3, [pc, #44]	; (8005d54 <HAL_RCC_ClockConfig+0x1bc>)
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	091b      	lsrs	r3, r3, #4
 8005d2a:	f003 030f 	and.w	r3, r3, #15
 8005d2e:	490a      	ldr	r1, [pc, #40]	; (8005d58 <HAL_RCC_ClockConfig+0x1c0>)
 8005d30:	5ccb      	ldrb	r3, [r1, r3]
 8005d32:	fa22 f303 	lsr.w	r3, r2, r3
 8005d36:	4a09      	ldr	r2, [pc, #36]	; (8005d5c <HAL_RCC_ClockConfig+0x1c4>)
 8005d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d3a:	4b09      	ldr	r3, [pc, #36]	; (8005d60 <HAL_RCC_ClockConfig+0x1c8>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7ff f8fc 	bl	8004f3c <HAL_InitTick>

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	40023c00 	.word	0x40023c00
 8005d54:	40023800 	.word	0x40023800
 8005d58:	0800dcc0 	.word	0x0800dcc0
 8005d5c:	2000006c 	.word	0x2000006c
 8005d60:	20000070 	.word	0x20000070

08005d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d68:	b094      	sub	sp, #80	; 0x50
 8005d6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8005d70:	2300      	movs	r3, #0
 8005d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d74:	2300      	movs	r3, #0
 8005d76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d7c:	4b79      	ldr	r3, [pc, #484]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f003 030c 	and.w	r3, r3, #12
 8005d84:	2b08      	cmp	r3, #8
 8005d86:	d00d      	beq.n	8005da4 <HAL_RCC_GetSysClockFreq+0x40>
 8005d88:	2b08      	cmp	r3, #8
 8005d8a:	f200 80e1 	bhi.w	8005f50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d002      	beq.n	8005d98 <HAL_RCC_GetSysClockFreq+0x34>
 8005d92:	2b04      	cmp	r3, #4
 8005d94:	d003      	beq.n	8005d9e <HAL_RCC_GetSysClockFreq+0x3a>
 8005d96:	e0db      	b.n	8005f50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d98:	4b73      	ldr	r3, [pc, #460]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005d9c:	e0db      	b.n	8005f56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d9e:	4b73      	ldr	r3, [pc, #460]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x208>)
 8005da0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005da2:	e0d8      	b.n	8005f56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005da4:	4b6f      	ldr	r3, [pc, #444]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005dae:	4b6d      	ldr	r3, [pc, #436]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d063      	beq.n	8005e82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dba:	4b6a      	ldr	r3, [pc, #424]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	099b      	lsrs	r3, r3, #6
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dc4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8005dce:	2300      	movs	r3, #0
 8005dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8005dd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005dd6:	4622      	mov	r2, r4
 8005dd8:	462b      	mov	r3, r5
 8005dda:	f04f 0000 	mov.w	r0, #0
 8005dde:	f04f 0100 	mov.w	r1, #0
 8005de2:	0159      	lsls	r1, r3, #5
 8005de4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005de8:	0150      	lsls	r0, r2, #5
 8005dea:	4602      	mov	r2, r0
 8005dec:	460b      	mov	r3, r1
 8005dee:	4621      	mov	r1, r4
 8005df0:	1a51      	subs	r1, r2, r1
 8005df2:	6139      	str	r1, [r7, #16]
 8005df4:	4629      	mov	r1, r5
 8005df6:	eb63 0301 	sbc.w	r3, r3, r1
 8005dfa:	617b      	str	r3, [r7, #20]
 8005dfc:	f04f 0200 	mov.w	r2, #0
 8005e00:	f04f 0300 	mov.w	r3, #0
 8005e04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e08:	4659      	mov	r1, fp
 8005e0a:	018b      	lsls	r3, r1, #6
 8005e0c:	4651      	mov	r1, sl
 8005e0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e12:	4651      	mov	r1, sl
 8005e14:	018a      	lsls	r2, r1, #6
 8005e16:	4651      	mov	r1, sl
 8005e18:	ebb2 0801 	subs.w	r8, r2, r1
 8005e1c:	4659      	mov	r1, fp
 8005e1e:	eb63 0901 	sbc.w	r9, r3, r1
 8005e22:	f04f 0200 	mov.w	r2, #0
 8005e26:	f04f 0300 	mov.w	r3, #0
 8005e2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e36:	4690      	mov	r8, r2
 8005e38:	4699      	mov	r9, r3
 8005e3a:	4623      	mov	r3, r4
 8005e3c:	eb18 0303 	adds.w	r3, r8, r3
 8005e40:	60bb      	str	r3, [r7, #8]
 8005e42:	462b      	mov	r3, r5
 8005e44:	eb49 0303 	adc.w	r3, r9, r3
 8005e48:	60fb      	str	r3, [r7, #12]
 8005e4a:	f04f 0200 	mov.w	r2, #0
 8005e4e:	f04f 0300 	mov.w	r3, #0
 8005e52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e56:	4629      	mov	r1, r5
 8005e58:	024b      	lsls	r3, r1, #9
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e60:	4621      	mov	r1, r4
 8005e62:	024a      	lsls	r2, r1, #9
 8005e64:	4610      	mov	r0, r2
 8005e66:	4619      	mov	r1, r3
 8005e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e74:	f7fa ff10 	bl	8000c98 <__aeabi_uldivmod>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e80:	e058      	b.n	8005f34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e82:	4b38      	ldr	r3, [pc, #224]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	099b      	lsrs	r3, r3, #6
 8005e88:	2200      	movs	r2, #0
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	4611      	mov	r1, r2
 8005e8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e92:	623b      	str	r3, [r7, #32]
 8005e94:	2300      	movs	r3, #0
 8005e96:	627b      	str	r3, [r7, #36]	; 0x24
 8005e98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e9c:	4642      	mov	r2, r8
 8005e9e:	464b      	mov	r3, r9
 8005ea0:	f04f 0000 	mov.w	r0, #0
 8005ea4:	f04f 0100 	mov.w	r1, #0
 8005ea8:	0159      	lsls	r1, r3, #5
 8005eaa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005eae:	0150      	lsls	r0, r2, #5
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4641      	mov	r1, r8
 8005eb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005eba:	4649      	mov	r1, r9
 8005ebc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ec0:	f04f 0200 	mov.w	r2, #0
 8005ec4:	f04f 0300 	mov.w	r3, #0
 8005ec8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ecc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ed0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ed4:	ebb2 040a 	subs.w	r4, r2, sl
 8005ed8:	eb63 050b 	sbc.w	r5, r3, fp
 8005edc:	f04f 0200 	mov.w	r2, #0
 8005ee0:	f04f 0300 	mov.w	r3, #0
 8005ee4:	00eb      	lsls	r3, r5, #3
 8005ee6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005eea:	00e2      	lsls	r2, r4, #3
 8005eec:	4614      	mov	r4, r2
 8005eee:	461d      	mov	r5, r3
 8005ef0:	4643      	mov	r3, r8
 8005ef2:	18e3      	adds	r3, r4, r3
 8005ef4:	603b      	str	r3, [r7, #0]
 8005ef6:	464b      	mov	r3, r9
 8005ef8:	eb45 0303 	adc.w	r3, r5, r3
 8005efc:	607b      	str	r3, [r7, #4]
 8005efe:	f04f 0200 	mov.w	r2, #0
 8005f02:	f04f 0300 	mov.w	r3, #0
 8005f06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	028b      	lsls	r3, r1, #10
 8005f0e:	4621      	mov	r1, r4
 8005f10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f14:	4621      	mov	r1, r4
 8005f16:	028a      	lsls	r2, r1, #10
 8005f18:	4610      	mov	r0, r2
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f1e:	2200      	movs	r2, #0
 8005f20:	61bb      	str	r3, [r7, #24]
 8005f22:	61fa      	str	r2, [r7, #28]
 8005f24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f28:	f7fa feb6 	bl	8000c98 <__aeabi_uldivmod>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	4613      	mov	r3, r2
 8005f32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f34:	4b0b      	ldr	r3, [pc, #44]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	0c1b      	lsrs	r3, r3, #16
 8005f3a:	f003 0303 	and.w	r3, r3, #3
 8005f3e:	3301      	adds	r3, #1
 8005f40:	005b      	lsls	r3, r3, #1
 8005f42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005f44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f4e:	e002      	b.n	8005f56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f50:	4b05      	ldr	r3, [pc, #20]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3750      	adds	r7, #80	; 0x50
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f62:	bf00      	nop
 8005f64:	40023800 	.word	0x40023800
 8005f68:	00f42400 	.word	0x00f42400
 8005f6c:	007a1200 	.word	0x007a1200

08005f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f70:	b480      	push	{r7}
 8005f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f74:	4b03      	ldr	r3, [pc, #12]	; (8005f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f76:	681b      	ldr	r3, [r3, #0]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	2000006c 	.word	0x2000006c

08005f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f8c:	f7ff fff0 	bl	8005f70 <HAL_RCC_GetHCLKFreq>
 8005f90:	4602      	mov	r2, r0
 8005f92:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	0a9b      	lsrs	r3, r3, #10
 8005f98:	f003 0307 	and.w	r3, r3, #7
 8005f9c:	4903      	ldr	r1, [pc, #12]	; (8005fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f9e:	5ccb      	ldrb	r3, [r1, r3]
 8005fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	40023800 	.word	0x40023800
 8005fac:	0800dcd0 	.word	0x0800dcd0

08005fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005fb4:	f7ff ffdc 	bl	8005f70 <HAL_RCC_GetHCLKFreq>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	4b05      	ldr	r3, [pc, #20]	; (8005fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	0b5b      	lsrs	r3, r3, #13
 8005fc0:	f003 0307 	and.w	r3, r3, #7
 8005fc4:	4903      	ldr	r1, [pc, #12]	; (8005fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fc6:	5ccb      	ldrb	r3, [r1, r3]
 8005fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40023800 	.word	0x40023800
 8005fd4:	0800dcd0 	.word	0x0800dcd0

08005fd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e07b      	b.n	80060e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d108      	bne.n	8006004 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ffa:	d009      	beq.n	8006010 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	61da      	str	r2, [r3, #28]
 8006002:	e005      	b.n	8006010 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d106      	bne.n	8006030 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7fe fbdc 	bl	80047e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006046:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006058:	431a      	orrs	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006062:	431a      	orrs	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	431a      	orrs	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	431a      	orrs	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006080:	431a      	orrs	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800608a:	431a      	orrs	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006094:	ea42 0103 	orr.w	r1, r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	0c1b      	lsrs	r3, r3, #16
 80060ae:	f003 0104 	and.w	r1, r3, #4
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b6:	f003 0210 	and.w	r2, r3, #16
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	69da      	ldr	r2, [r3, #28]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b088      	sub	sp, #32
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	60f8      	str	r0, [r7, #12]
 80060f2:	60b9      	str	r1, [r7, #8]
 80060f4:	603b      	str	r3, [r7, #0]
 80060f6:	4613      	mov	r3, r2
 80060f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060fa:	2300      	movs	r3, #0
 80060fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006104:	2b01      	cmp	r3, #1
 8006106:	d101      	bne.n	800610c <HAL_SPI_Transmit+0x22>
 8006108:	2302      	movs	r3, #2
 800610a:	e126      	b.n	800635a <HAL_SPI_Transmit+0x270>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006114:	f7fe ff56 	bl	8004fc4 <HAL_GetTick>
 8006118:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800611a:	88fb      	ldrh	r3, [r7, #6]
 800611c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b01      	cmp	r3, #1
 8006128:	d002      	beq.n	8006130 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800612a:	2302      	movs	r3, #2
 800612c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800612e:	e10b      	b.n	8006348 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d002      	beq.n	800613c <HAL_SPI_Transmit+0x52>
 8006136:	88fb      	ldrh	r3, [r7, #6]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d102      	bne.n	8006142 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006140:	e102      	b.n	8006348 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2203      	movs	r2, #3
 8006146:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	88fa      	ldrh	r2, [r7, #6]
 800615a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	88fa      	ldrh	r2, [r7, #6]
 8006160:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006188:	d10f      	bne.n	80061aa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006198:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b4:	2b40      	cmp	r3, #64	; 0x40
 80061b6:	d007      	beq.n	80061c8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061d0:	d14b      	bne.n	800626a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d002      	beq.n	80061e0 <HAL_SPI_Transmit+0xf6>
 80061da:	8afb      	ldrh	r3, [r7, #22]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d13e      	bne.n	800625e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e4:	881a      	ldrh	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f0:	1c9a      	adds	r2, r3, #2
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	3b01      	subs	r3, #1
 80061fe:	b29a      	uxth	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006204:	e02b      	b.n	800625e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f003 0302 	and.w	r3, r3, #2
 8006210:	2b02      	cmp	r3, #2
 8006212:	d112      	bne.n	800623a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006218:	881a      	ldrh	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006224:	1c9a      	adds	r2, r3, #2
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800622e:	b29b      	uxth	r3, r3
 8006230:	3b01      	subs	r3, #1
 8006232:	b29a      	uxth	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	86da      	strh	r2, [r3, #54]	; 0x36
 8006238:	e011      	b.n	800625e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800623a:	f7fe fec3 	bl	8004fc4 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	429a      	cmp	r2, r3
 8006248:	d803      	bhi.n	8006252 <HAL_SPI_Transmit+0x168>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006250:	d102      	bne.n	8006258 <HAL_SPI_Transmit+0x16e>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d102      	bne.n	800625e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800625c:	e074      	b.n	8006348 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006262:	b29b      	uxth	r3, r3
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1ce      	bne.n	8006206 <HAL_SPI_Transmit+0x11c>
 8006268:	e04c      	b.n	8006304 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <HAL_SPI_Transmit+0x18e>
 8006272:	8afb      	ldrh	r3, [r7, #22]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d140      	bne.n	80062fa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	330c      	adds	r3, #12
 8006282:	7812      	ldrb	r2, [r2, #0]
 8006284:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006294:	b29b      	uxth	r3, r3
 8006296:	3b01      	subs	r3, #1
 8006298:	b29a      	uxth	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800629e:	e02c      	b.n	80062fa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d113      	bne.n	80062d6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	330c      	adds	r3, #12
 80062b8:	7812      	ldrb	r2, [r2, #0]
 80062ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c0:	1c5a      	adds	r2, r3, #1
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	3b01      	subs	r3, #1
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80062d4:	e011      	b.n	80062fa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062d6:	f7fe fe75 	bl	8004fc4 <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d803      	bhi.n	80062ee <HAL_SPI_Transmit+0x204>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062ec:	d102      	bne.n	80062f4 <HAL_SPI_Transmit+0x20a>
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d102      	bne.n	80062fa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80062f8:	e026      	b.n	8006348 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062fe:	b29b      	uxth	r3, r3
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1cd      	bne.n	80062a0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f000 fbcb 	bl	8006aa4 <SPI_EndRxTxTransaction>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d002      	beq.n	800631a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2220      	movs	r2, #32
 8006318:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10a      	bne.n	8006338 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006322:	2300      	movs	r3, #0
 8006324:	613b      	str	r3, [r7, #16]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	613b      	str	r3, [r7, #16]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	613b      	str	r3, [r7, #16]
 8006336:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633c:	2b00      	cmp	r3, #0
 800633e:	d002      	beq.n	8006346 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	77fb      	strb	r3, [r7, #31]
 8006344:	e000      	b.n	8006348 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006346:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006358:	7ffb      	ldrb	r3, [r7, #31]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3720      	adds	r7, #32
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b088      	sub	sp, #32
 8006366:	af02      	add	r7, sp, #8
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	603b      	str	r3, [r7, #0]
 800636e:	4613      	mov	r3, r2
 8006370:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006372:	2300      	movs	r3, #0
 8006374:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800637e:	d112      	bne.n	80063a6 <HAL_SPI_Receive+0x44>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10e      	bne.n	80063a6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2204      	movs	r2, #4
 800638c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006390:	88fa      	ldrh	r2, [r7, #6]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	4613      	mov	r3, r2
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	68b9      	ldr	r1, [r7, #8]
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f000 f8f1 	bl	8006584 <HAL_SPI_TransmitReceive>
 80063a2:	4603      	mov	r3, r0
 80063a4:	e0ea      	b.n	800657c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d101      	bne.n	80063b4 <HAL_SPI_Receive+0x52>
 80063b0:	2302      	movs	r3, #2
 80063b2:	e0e3      	b.n	800657c <HAL_SPI_Receive+0x21a>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063bc:	f7fe fe02 	bl	8004fc4 <HAL_GetTick>
 80063c0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d002      	beq.n	80063d4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80063ce:	2302      	movs	r3, #2
 80063d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063d2:	e0ca      	b.n	800656a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <HAL_SPI_Receive+0x7e>
 80063da:	88fb      	ldrh	r3, [r7, #6]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d102      	bne.n	80063e6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063e4:	e0c1      	b.n	800656a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2204      	movs	r2, #4
 80063ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	88fa      	ldrh	r2, [r7, #6]
 80063fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	88fa      	ldrh	r2, [r7, #6]
 8006404:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800642c:	d10f      	bne.n	800644e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800643c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800644c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006458:	2b40      	cmp	r3, #64	; 0x40
 800645a:	d007      	beq.n	800646c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800646a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d162      	bne.n	800653a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006474:	e02e      	b.n	80064d4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b01      	cmp	r3, #1
 8006482:	d115      	bne.n	80064b0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f103 020c 	add.w	r2, r3, #12
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006490:	7812      	ldrb	r2, [r2, #0]
 8006492:	b2d2      	uxtb	r2, r2
 8006494:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649a:	1c5a      	adds	r2, r3, #1
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	3b01      	subs	r3, #1
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064ae:	e011      	b.n	80064d4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064b0:	f7fe fd88 	bl	8004fc4 <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d803      	bhi.n	80064c8 <HAL_SPI_Receive+0x166>
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064c6:	d102      	bne.n	80064ce <HAL_SPI_Receive+0x16c>
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d102      	bne.n	80064d4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80064d2:	e04a      	b.n	800656a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064d8:	b29b      	uxth	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1cb      	bne.n	8006476 <HAL_SPI_Receive+0x114>
 80064de:	e031      	b.n	8006544 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d113      	bne.n	8006516 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68da      	ldr	r2, [r3, #12]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f8:	b292      	uxth	r2, r2
 80064fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006500:	1c9a      	adds	r2, r3, #2
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800650a:	b29b      	uxth	r3, r3
 800650c:	3b01      	subs	r3, #1
 800650e:	b29a      	uxth	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006514:	e011      	b.n	800653a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006516:	f7fe fd55 	bl	8004fc4 <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	429a      	cmp	r2, r3
 8006524:	d803      	bhi.n	800652e <HAL_SPI_Receive+0x1cc>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800652c:	d102      	bne.n	8006534 <HAL_SPI_Receive+0x1d2>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d102      	bne.n	800653a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006538:	e017      	b.n	800656a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800653e:	b29b      	uxth	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1cd      	bne.n	80064e0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	6839      	ldr	r1, [r7, #0]
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f000 fa45 	bl	80069d8 <SPI_EndRxTransaction>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2220      	movs	r2, #32
 8006558:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655e:	2b00      	cmp	r3, #0
 8006560:	d002      	beq.n	8006568 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	75fb      	strb	r3, [r7, #23]
 8006566:	e000      	b.n	800656a <HAL_SPI_Receive+0x208>
  }

error :
 8006568:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800657a:	7dfb      	ldrb	r3, [r7, #23]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b08c      	sub	sp, #48	; 0x30
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006592:	2301      	movs	r3, #1
 8006594:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d101      	bne.n	80065aa <HAL_SPI_TransmitReceive+0x26>
 80065a6:	2302      	movs	r3, #2
 80065a8:	e18a      	b.n	80068c0 <HAL_SPI_TransmitReceive+0x33c>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065b2:	f7fe fd07 	bl	8004fc4 <HAL_GetTick>
 80065b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80065c8:	887b      	ldrh	r3, [r7, #2]
 80065ca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d00f      	beq.n	80065f4 <HAL_SPI_TransmitReceive+0x70>
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065da:	d107      	bne.n	80065ec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d103      	bne.n	80065ec <HAL_SPI_TransmitReceive+0x68>
 80065e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065e8:	2b04      	cmp	r3, #4
 80065ea:	d003      	beq.n	80065f4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80065ec:	2302      	movs	r3, #2
 80065ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80065f2:	e15b      	b.n	80068ac <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d005      	beq.n	8006606 <HAL_SPI_TransmitReceive+0x82>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <HAL_SPI_TransmitReceive+0x82>
 8006600:	887b      	ldrh	r3, [r7, #2]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d103      	bne.n	800660e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800660c:	e14e      	b.n	80068ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b04      	cmp	r3, #4
 8006618:	d003      	beq.n	8006622 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2205      	movs	r2, #5
 800661e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	887a      	ldrh	r2, [r7, #2]
 8006632:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	887a      	ldrh	r2, [r7, #2]
 8006638:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	887a      	ldrh	r2, [r7, #2]
 8006644:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	887a      	ldrh	r2, [r7, #2]
 800664a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006662:	2b40      	cmp	r3, #64	; 0x40
 8006664:	d007      	beq.n	8006676 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006674:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800667e:	d178      	bne.n	8006772 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d002      	beq.n	800668e <HAL_SPI_TransmitReceive+0x10a>
 8006688:	8b7b      	ldrh	r3, [r7, #26]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d166      	bne.n	800675c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006692:	881a      	ldrh	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669e:	1c9a      	adds	r2, r3, #2
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	3b01      	subs	r3, #1
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066b2:	e053      	b.n	800675c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d11b      	bne.n	80066fa <HAL_SPI_TransmitReceive+0x176>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d016      	beq.n	80066fa <HAL_SPI_TransmitReceive+0x176>
 80066cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d113      	bne.n	80066fa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d6:	881a      	ldrh	r2, [r3, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e2:	1c9a      	adds	r2, r3, #2
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	3b01      	subs	r3, #1
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	2b01      	cmp	r3, #1
 8006706:	d119      	bne.n	800673c <HAL_SPI_TransmitReceive+0x1b8>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d014      	beq.n	800673c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671c:	b292      	uxth	r2, r2
 800671e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006724:	1c9a      	adds	r2, r3, #2
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800672e:	b29b      	uxth	r3, r3
 8006730:	3b01      	subs	r3, #1
 8006732:	b29a      	uxth	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006738:	2301      	movs	r3, #1
 800673a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800673c:	f7fe fc42 	bl	8004fc4 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006748:	429a      	cmp	r2, r3
 800674a:	d807      	bhi.n	800675c <HAL_SPI_TransmitReceive+0x1d8>
 800674c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006752:	d003      	beq.n	800675c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800675a:	e0a7      	b.n	80068ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006760:	b29b      	uxth	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1a6      	bne.n	80066b4 <HAL_SPI_TransmitReceive+0x130>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800676a:	b29b      	uxth	r3, r3
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1a1      	bne.n	80066b4 <HAL_SPI_TransmitReceive+0x130>
 8006770:	e07c      	b.n	800686c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d002      	beq.n	8006780 <HAL_SPI_TransmitReceive+0x1fc>
 800677a:	8b7b      	ldrh	r3, [r7, #26]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d16b      	bne.n	8006858 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	330c      	adds	r3, #12
 800678a:	7812      	ldrb	r2, [r2, #0]
 800678c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800679c:	b29b      	uxth	r3, r3
 800679e:	3b01      	subs	r3, #1
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067a6:	e057      	b.n	8006858 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d11c      	bne.n	80067f0 <HAL_SPI_TransmitReceive+0x26c>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d017      	beq.n	80067f0 <HAL_SPI_TransmitReceive+0x26c>
 80067c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d114      	bne.n	80067f0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	330c      	adds	r3, #12
 80067d0:	7812      	ldrb	r2, [r2, #0]
 80067d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d8:	1c5a      	adds	r2, r3, #1
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	3b01      	subs	r3, #1
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d119      	bne.n	8006832 <HAL_SPI_TransmitReceive+0x2ae>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006802:	b29b      	uxth	r3, r3
 8006804:	2b00      	cmp	r3, #0
 8006806:	d014      	beq.n	8006832 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68da      	ldr	r2, [r3, #12]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006812:	b2d2      	uxtb	r2, r2
 8006814:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006824:	b29b      	uxth	r3, r3
 8006826:	3b01      	subs	r3, #1
 8006828:	b29a      	uxth	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800682e:	2301      	movs	r3, #1
 8006830:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006832:	f7fe fbc7 	bl	8004fc4 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800683e:	429a      	cmp	r2, r3
 8006840:	d803      	bhi.n	800684a <HAL_SPI_TransmitReceive+0x2c6>
 8006842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006848:	d102      	bne.n	8006850 <HAL_SPI_TransmitReceive+0x2cc>
 800684a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684c:	2b00      	cmp	r3, #0
 800684e:	d103      	bne.n	8006858 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006856:	e029      	b.n	80068ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800685c:	b29b      	uxth	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1a2      	bne.n	80067a8 <HAL_SPI_TransmitReceive+0x224>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006866:	b29b      	uxth	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	d19d      	bne.n	80067a8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800686c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800686e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f000 f917 	bl	8006aa4 <SPI_EndRxTxTransaction>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d006      	beq.n	800688a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2220      	movs	r2, #32
 8006886:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006888:	e010      	b.n	80068ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10b      	bne.n	80068aa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006892:	2300      	movs	r3, #0
 8006894:	617b      	str	r3, [r7, #20]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	617b      	str	r3, [r7, #20]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	617b      	str	r3, [r7, #20]
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	e000      	b.n	80068ac <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80068aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80068bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3730      	adds	r7, #48	; 0x30
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b088      	sub	sp, #32
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	603b      	str	r3, [r7, #0]
 80068d4:	4613      	mov	r3, r2
 80068d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80068d8:	f7fe fb74 	bl	8004fc4 <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e0:	1a9b      	subs	r3, r3, r2
 80068e2:	683a      	ldr	r2, [r7, #0]
 80068e4:	4413      	add	r3, r2
 80068e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80068e8:	f7fe fb6c 	bl	8004fc4 <HAL_GetTick>
 80068ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80068ee:	4b39      	ldr	r3, [pc, #228]	; (80069d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	015b      	lsls	r3, r3, #5
 80068f4:	0d1b      	lsrs	r3, r3, #20
 80068f6:	69fa      	ldr	r2, [r7, #28]
 80068f8:	fb02 f303 	mul.w	r3, r2, r3
 80068fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068fe:	e054      	b.n	80069aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006906:	d050      	beq.n	80069aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006908:	f7fe fb5c 	bl	8004fc4 <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	69fa      	ldr	r2, [r7, #28]
 8006914:	429a      	cmp	r2, r3
 8006916:	d902      	bls.n	800691e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d13d      	bne.n	800699a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800692c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006936:	d111      	bne.n	800695c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006940:	d004      	beq.n	800694c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800694a:	d107      	bne.n	800695c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800695a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006964:	d10f      	bne.n	8006986 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006974:	601a      	str	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006984:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e017      	b.n	80069ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	3b01      	subs	r3, #1
 80069a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	4013      	ands	r3, r2
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	bf0c      	ite	eq
 80069ba:	2301      	moveq	r3, #1
 80069bc:	2300      	movne	r3, #0
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	461a      	mov	r2, r3
 80069c2:	79fb      	ldrb	r3, [r7, #7]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d19b      	bne.n	8006900 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3720      	adds	r7, #32
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	2000006c 	.word	0x2000006c

080069d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af02      	add	r7, sp, #8
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069ec:	d111      	bne.n	8006a12 <SPI_EndRxTransaction+0x3a>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069f6:	d004      	beq.n	8006a02 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a00:	d107      	bne.n	8006a12 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a10:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a1a:	d12a      	bne.n	8006a72 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a24:	d012      	beq.n	8006a4c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	2180      	movs	r1, #128	; 0x80
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f7ff ff49 	bl	80068c8 <SPI_WaitFlagStateUntilTimeout>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d02d      	beq.n	8006a98 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a40:	f043 0220 	orr.w	r2, r3, #32
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e026      	b.n	8006a9a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	2200      	movs	r2, #0
 8006a54:	2101      	movs	r1, #1
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f7ff ff36 	bl	80068c8 <SPI_WaitFlagStateUntilTimeout>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d01a      	beq.n	8006a98 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a66:	f043 0220 	orr.w	r2, r3, #32
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e013      	b.n	8006a9a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	2101      	movs	r1, #1
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f7ff ff23 	bl	80068c8 <SPI_WaitFlagStateUntilTimeout>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d007      	beq.n	8006a98 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a8c:	f043 0220 	orr.w	r2, r3, #32
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e000      	b.n	8006a9a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
	...

08006aa4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b088      	sub	sp, #32
 8006aa8:	af02      	add	r7, sp, #8
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ab0:	4b1b      	ldr	r3, [pc, #108]	; (8006b20 <SPI_EndRxTxTransaction+0x7c>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a1b      	ldr	r2, [pc, #108]	; (8006b24 <SPI_EndRxTxTransaction+0x80>)
 8006ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aba:	0d5b      	lsrs	r3, r3, #21
 8006abc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006ac0:	fb02 f303 	mul.w	r3, r2, r3
 8006ac4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ace:	d112      	bne.n	8006af6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	2180      	movs	r1, #128	; 0x80
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f7ff fef4 	bl	80068c8 <SPI_WaitFlagStateUntilTimeout>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d016      	beq.n	8006b14 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aea:	f043 0220 	orr.w	r2, r3, #32
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e00f      	b.n	8006b16 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00a      	beq.n	8006b12 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	3b01      	subs	r3, #1
 8006b00:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b0c:	2b80      	cmp	r3, #128	; 0x80
 8006b0e:	d0f2      	beq.n	8006af6 <SPI_EndRxTxTransaction+0x52>
 8006b10:	e000      	b.n	8006b14 <SPI_EndRxTxTransaction+0x70>
        break;
 8006b12:	bf00      	nop
  }

  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3718      	adds	r7, #24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	2000006c 	.word	0x2000006c
 8006b24:	165e9f81 	.word	0x165e9f81

08006b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e041      	b.n	8006bbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d106      	bne.n	8006b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7fd ff06 	bl	8004960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2202      	movs	r2, #2
 8006b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	3304      	adds	r3, #4
 8006b64:	4619      	mov	r1, r3
 8006b66:	4610      	mov	r0, r2
 8006b68:	f000 fce8 	bl	800753c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b083      	sub	sp, #12
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6a1a      	ldr	r2, [r3, #32]
 8006bd4:	f241 1311 	movw	r3, #4369	; 0x1111
 8006bd8:	4013      	ands	r3, r2
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10f      	bne.n	8006bfe <HAL_TIM_Base_Stop+0x38>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6a1a      	ldr	r2, [r3, #32]
 8006be4:	f240 4344 	movw	r3, #1092	; 0x444
 8006be8:	4013      	ands	r3, r2
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d107      	bne.n	8006bfe <HAL_TIM_Base_Stop+0x38>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f022 0201 	bic.w	r2, r2, #1
 8006bfc:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d001      	beq.n	8006c2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e044      	b.n	8006cb6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68da      	ldr	r2, [r3, #12]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f042 0201 	orr.w	r2, r2, #1
 8006c42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a1e      	ldr	r2, [pc, #120]	; (8006cc4 <HAL_TIM_Base_Start_IT+0xb0>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d018      	beq.n	8006c80 <HAL_TIM_Base_Start_IT+0x6c>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c56:	d013      	beq.n	8006c80 <HAL_TIM_Base_Start_IT+0x6c>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a1a      	ldr	r2, [pc, #104]	; (8006cc8 <HAL_TIM_Base_Start_IT+0xb4>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d00e      	beq.n	8006c80 <HAL_TIM_Base_Start_IT+0x6c>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a19      	ldr	r2, [pc, #100]	; (8006ccc <HAL_TIM_Base_Start_IT+0xb8>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d009      	beq.n	8006c80 <HAL_TIM_Base_Start_IT+0x6c>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a17      	ldr	r2, [pc, #92]	; (8006cd0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d004      	beq.n	8006c80 <HAL_TIM_Base_Start_IT+0x6c>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a16      	ldr	r2, [pc, #88]	; (8006cd4 <HAL_TIM_Base_Start_IT+0xc0>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d111      	bne.n	8006ca4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f003 0307 	and.w	r3, r3, #7
 8006c8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2b06      	cmp	r3, #6
 8006c90:	d010      	beq.n	8006cb4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f042 0201 	orr.w	r2, r2, #1
 8006ca0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ca2:	e007      	b.n	8006cb4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f042 0201 	orr.w	r2, r2, #1
 8006cb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	40010000 	.word	0x40010000
 8006cc8:	40000400 	.word	0x40000400
 8006ccc:	40000800 	.word	0x40000800
 8006cd0:	40000c00 	.word	0x40000c00
 8006cd4:	40014000 	.word	0x40014000

08006cd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e041      	b.n	8006d6e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d106      	bne.n	8006d04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f839 	bl	8006d76 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	3304      	adds	r3, #4
 8006d14:	4619      	mov	r1, r3
 8006d16:	4610      	mov	r0, r2
 8006d18:	f000 fc10 	bl	800753c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b083      	sub	sp, #12
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d7e:	bf00      	nop
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
	...

08006d8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d109      	bne.n	8006db0 <HAL_TIM_PWM_Start+0x24>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	bf14      	ite	ne
 8006da8:	2301      	movne	r3, #1
 8006daa:	2300      	moveq	r3, #0
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	e022      	b.n	8006df6 <HAL_TIM_PWM_Start+0x6a>
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	2b04      	cmp	r3, #4
 8006db4:	d109      	bne.n	8006dca <HAL_TIM_PWM_Start+0x3e>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	bf14      	ite	ne
 8006dc2:	2301      	movne	r3, #1
 8006dc4:	2300      	moveq	r3, #0
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	e015      	b.n	8006df6 <HAL_TIM_PWM_Start+0x6a>
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	2b08      	cmp	r3, #8
 8006dce:	d109      	bne.n	8006de4 <HAL_TIM_PWM_Start+0x58>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	bf14      	ite	ne
 8006ddc:	2301      	movne	r3, #1
 8006dde:	2300      	moveq	r3, #0
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	e008      	b.n	8006df6 <HAL_TIM_PWM_Start+0x6a>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	bf14      	ite	ne
 8006df0:	2301      	movne	r3, #1
 8006df2:	2300      	moveq	r3, #0
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d001      	beq.n	8006dfe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e068      	b.n	8006ed0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d104      	bne.n	8006e0e <HAL_TIM_PWM_Start+0x82>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2202      	movs	r2, #2
 8006e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e0c:	e013      	b.n	8006e36 <HAL_TIM_PWM_Start+0xaa>
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2b04      	cmp	r3, #4
 8006e12:	d104      	bne.n	8006e1e <HAL_TIM_PWM_Start+0x92>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2202      	movs	r2, #2
 8006e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e1c:	e00b      	b.n	8006e36 <HAL_TIM_PWM_Start+0xaa>
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	2b08      	cmp	r3, #8
 8006e22:	d104      	bne.n	8006e2e <HAL_TIM_PWM_Start+0xa2>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2202      	movs	r2, #2
 8006e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e2c:	e003      	b.n	8006e36 <HAL_TIM_PWM_Start+0xaa>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2202      	movs	r2, #2
 8006e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	6839      	ldr	r1, [r7, #0]
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 fe22 	bl	8007a88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a23      	ldr	r2, [pc, #140]	; (8006ed8 <HAL_TIM_PWM_Start+0x14c>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d107      	bne.n	8006e5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a1d      	ldr	r2, [pc, #116]	; (8006ed8 <HAL_TIM_PWM_Start+0x14c>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d018      	beq.n	8006e9a <HAL_TIM_PWM_Start+0x10e>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e70:	d013      	beq.n	8006e9a <HAL_TIM_PWM_Start+0x10e>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a19      	ldr	r2, [pc, #100]	; (8006edc <HAL_TIM_PWM_Start+0x150>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d00e      	beq.n	8006e9a <HAL_TIM_PWM_Start+0x10e>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a17      	ldr	r2, [pc, #92]	; (8006ee0 <HAL_TIM_PWM_Start+0x154>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d009      	beq.n	8006e9a <HAL_TIM_PWM_Start+0x10e>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a16      	ldr	r2, [pc, #88]	; (8006ee4 <HAL_TIM_PWM_Start+0x158>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d004      	beq.n	8006e9a <HAL_TIM_PWM_Start+0x10e>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a14      	ldr	r2, [pc, #80]	; (8006ee8 <HAL_TIM_PWM_Start+0x15c>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d111      	bne.n	8006ebe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f003 0307 	and.w	r3, r3, #7
 8006ea4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2b06      	cmp	r3, #6
 8006eaa:	d010      	beq.n	8006ece <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f042 0201 	orr.w	r2, r2, #1
 8006eba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ebc:	e007      	b.n	8006ece <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f042 0201 	orr.w	r2, r2, #1
 8006ecc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	40010000 	.word	0x40010000
 8006edc:	40000400 	.word	0x40000400
 8006ee0:	40000800 	.word	0x40000800
 8006ee4:	40000c00 	.word	0x40000c00
 8006ee8:	40014000 	.word	0x40014000

08006eec <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2200      	movs	r2, #0
 8006efc:	6839      	ldr	r1, [r7, #0]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 fdc2 	bl	8007a88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a29      	ldr	r2, [pc, #164]	; (8006fb0 <HAL_TIM_PWM_Stop+0xc4>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d117      	bne.n	8006f3e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	6a1a      	ldr	r2, [r3, #32]
 8006f14:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f18:	4013      	ands	r3, r2
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10f      	bne.n	8006f3e <HAL_TIM_PWM_Stop+0x52>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	6a1a      	ldr	r2, [r3, #32]
 8006f24:	f240 4344 	movw	r3, #1092	; 0x444
 8006f28:	4013      	ands	r3, r2
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d107      	bne.n	8006f3e <HAL_TIM_PWM_Stop+0x52>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	6a1a      	ldr	r2, [r3, #32]
 8006f44:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f48:	4013      	ands	r3, r2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10f      	bne.n	8006f6e <HAL_TIM_PWM_Stop+0x82>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6a1a      	ldr	r2, [r3, #32]
 8006f54:	f240 4344 	movw	r3, #1092	; 0x444
 8006f58:	4013      	ands	r3, r2
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d107      	bne.n	8006f6e <HAL_TIM_PWM_Stop+0x82>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f022 0201 	bic.w	r2, r2, #1
 8006f6c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d104      	bne.n	8006f7e <HAL_TIM_PWM_Stop+0x92>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f7c:	e013      	b.n	8006fa6 <HAL_TIM_PWM_Stop+0xba>
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2b04      	cmp	r3, #4
 8006f82:	d104      	bne.n	8006f8e <HAL_TIM_PWM_Stop+0xa2>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f8c:	e00b      	b.n	8006fa6 <HAL_TIM_PWM_Stop+0xba>
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	2b08      	cmp	r3, #8
 8006f92:	d104      	bne.n	8006f9e <HAL_TIM_PWM_Stop+0xb2>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f9c:	e003      	b.n	8006fa6 <HAL_TIM_PWM_Stop+0xba>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	40010000 	.word	0x40010000

08006fb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	f003 0302 	and.w	r3, r3, #2
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d122      	bne.n	8007010 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	f003 0302 	and.w	r3, r3, #2
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d11b      	bne.n	8007010 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f06f 0202 	mvn.w	r2, #2
 8006fe0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	f003 0303 	and.w	r3, r3, #3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d003      	beq.n	8006ffe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fa81 	bl	80074fe <HAL_TIM_IC_CaptureCallback>
 8006ffc:	e005      	b.n	800700a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fa73 	bl	80074ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 fa84 	bl	8007512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	f003 0304 	and.w	r3, r3, #4
 800701a:	2b04      	cmp	r3, #4
 800701c:	d122      	bne.n	8007064 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	f003 0304 	and.w	r3, r3, #4
 8007028:	2b04      	cmp	r3, #4
 800702a:	d11b      	bne.n	8007064 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f06f 0204 	mvn.w	r2, #4
 8007034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2202      	movs	r2, #2
 800703a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007046:	2b00      	cmp	r3, #0
 8007048:	d003      	beq.n	8007052 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 fa57 	bl	80074fe <HAL_TIM_IC_CaptureCallback>
 8007050:	e005      	b.n	800705e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fa49 	bl	80074ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fa5a 	bl	8007512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	f003 0308 	and.w	r3, r3, #8
 800706e:	2b08      	cmp	r3, #8
 8007070:	d122      	bne.n	80070b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	f003 0308 	and.w	r3, r3, #8
 800707c:	2b08      	cmp	r3, #8
 800707e:	d11b      	bne.n	80070b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f06f 0208 	mvn.w	r2, #8
 8007088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2204      	movs	r2, #4
 800708e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	69db      	ldr	r3, [r3, #28]
 8007096:	f003 0303 	and.w	r3, r3, #3
 800709a:	2b00      	cmp	r3, #0
 800709c:	d003      	beq.n	80070a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fa2d 	bl	80074fe <HAL_TIM_IC_CaptureCallback>
 80070a4:	e005      	b.n	80070b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fa1f 	bl	80074ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 fa30 	bl	8007512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	f003 0310 	and.w	r3, r3, #16
 80070c2:	2b10      	cmp	r3, #16
 80070c4:	d122      	bne.n	800710c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	f003 0310 	and.w	r3, r3, #16
 80070d0:	2b10      	cmp	r3, #16
 80070d2:	d11b      	bne.n	800710c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f06f 0210 	mvn.w	r2, #16
 80070dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2208      	movs	r2, #8
 80070e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	69db      	ldr	r3, [r3, #28]
 80070ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 fa03 	bl	80074fe <HAL_TIM_IC_CaptureCallback>
 80070f8:	e005      	b.n	8007106 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f9f5 	bl	80074ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fa06 	bl	8007512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	2b01      	cmp	r3, #1
 8007118:	d10e      	bne.n	8007138 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	2b01      	cmp	r3, #1
 8007126:	d107      	bne.n	8007138 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f06f 0201 	mvn.w	r2, #1
 8007130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f9cf 	bl	80074d6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007142:	2b80      	cmp	r3, #128	; 0x80
 8007144:	d10e      	bne.n	8007164 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007150:	2b80      	cmp	r3, #128	; 0x80
 8007152:	d107      	bne.n	8007164 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800715c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fd82 	bl	8007c68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800716e:	2b40      	cmp	r3, #64	; 0x40
 8007170:	d10e      	bne.n	8007190 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800717c:	2b40      	cmp	r3, #64	; 0x40
 800717e:	d107      	bne.n	8007190 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f9cb 	bl	8007526 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	f003 0320 	and.w	r3, r3, #32
 800719a:	2b20      	cmp	r3, #32
 800719c:	d10e      	bne.n	80071bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f003 0320 	and.w	r3, r3, #32
 80071a8:	2b20      	cmp	r3, #32
 80071aa:	d107      	bne.n	80071bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f06f 0220 	mvn.w	r2, #32
 80071b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fd4c 	bl	8007c54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071bc:	bf00      	nop
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071d0:	2300      	movs	r3, #0
 80071d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d101      	bne.n	80071e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071de:	2302      	movs	r3, #2
 80071e0:	e0ae      	b.n	8007340 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b0c      	cmp	r3, #12
 80071ee:	f200 809f 	bhi.w	8007330 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80071f2:	a201      	add	r2, pc, #4	; (adr r2, 80071f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f8:	0800722d 	.word	0x0800722d
 80071fc:	08007331 	.word	0x08007331
 8007200:	08007331 	.word	0x08007331
 8007204:	08007331 	.word	0x08007331
 8007208:	0800726d 	.word	0x0800726d
 800720c:	08007331 	.word	0x08007331
 8007210:	08007331 	.word	0x08007331
 8007214:	08007331 	.word	0x08007331
 8007218:	080072af 	.word	0x080072af
 800721c:	08007331 	.word	0x08007331
 8007220:	08007331 	.word	0x08007331
 8007224:	08007331 	.word	0x08007331
 8007228:	080072ef 	.word	0x080072ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68b9      	ldr	r1, [r7, #8]
 8007232:	4618      	mov	r0, r3
 8007234:	f000 fa02 	bl	800763c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	699a      	ldr	r2, [r3, #24]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f042 0208 	orr.w	r2, r2, #8
 8007246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	699a      	ldr	r2, [r3, #24]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f022 0204 	bic.w	r2, r2, #4
 8007256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6999      	ldr	r1, [r3, #24]
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	691a      	ldr	r2, [r3, #16]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	430a      	orrs	r2, r1
 8007268:	619a      	str	r2, [r3, #24]
      break;
 800726a:	e064      	b.n	8007336 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68b9      	ldr	r1, [r7, #8]
 8007272:	4618      	mov	r0, r3
 8007274:	f000 fa48 	bl	8007708 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	699a      	ldr	r2, [r3, #24]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	699a      	ldr	r2, [r3, #24]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	6999      	ldr	r1, [r3, #24]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	021a      	lsls	r2, r3, #8
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	430a      	orrs	r2, r1
 80072aa:	619a      	str	r2, [r3, #24]
      break;
 80072ac:	e043      	b.n	8007336 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68b9      	ldr	r1, [r7, #8]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 fa93 	bl	80077e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	69da      	ldr	r2, [r3, #28]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f042 0208 	orr.w	r2, r2, #8
 80072c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	69da      	ldr	r2, [r3, #28]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f022 0204 	bic.w	r2, r2, #4
 80072d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	69d9      	ldr	r1, [r3, #28]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	691a      	ldr	r2, [r3, #16]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	430a      	orrs	r2, r1
 80072ea:	61da      	str	r2, [r3, #28]
      break;
 80072ec:	e023      	b.n	8007336 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68b9      	ldr	r1, [r7, #8]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f000 fadd 	bl	80078b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	69da      	ldr	r2, [r3, #28]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	69da      	ldr	r2, [r3, #28]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	69d9      	ldr	r1, [r3, #28]
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	021a      	lsls	r2, r3, #8
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	430a      	orrs	r2, r1
 800732c:	61da      	str	r2, [r3, #28]
      break;
 800732e:	e002      	b.n	8007336 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	75fb      	strb	r3, [r7, #23]
      break;
 8007334:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800733e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007340:	4618      	mov	r0, r3
 8007342:	3718      	adds	r7, #24
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007352:	2300      	movs	r3, #0
 8007354:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800735c:	2b01      	cmp	r3, #1
 800735e:	d101      	bne.n	8007364 <HAL_TIM_ConfigClockSource+0x1c>
 8007360:	2302      	movs	r3, #2
 8007362:	e0b4      	b.n	80074ce <HAL_TIM_ConfigClockSource+0x186>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2202      	movs	r2, #2
 8007370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800738a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800739c:	d03e      	beq.n	800741c <HAL_TIM_ConfigClockSource+0xd4>
 800739e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073a2:	f200 8087 	bhi.w	80074b4 <HAL_TIM_ConfigClockSource+0x16c>
 80073a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073aa:	f000 8086 	beq.w	80074ba <HAL_TIM_ConfigClockSource+0x172>
 80073ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073b2:	d87f      	bhi.n	80074b4 <HAL_TIM_ConfigClockSource+0x16c>
 80073b4:	2b70      	cmp	r3, #112	; 0x70
 80073b6:	d01a      	beq.n	80073ee <HAL_TIM_ConfigClockSource+0xa6>
 80073b8:	2b70      	cmp	r3, #112	; 0x70
 80073ba:	d87b      	bhi.n	80074b4 <HAL_TIM_ConfigClockSource+0x16c>
 80073bc:	2b60      	cmp	r3, #96	; 0x60
 80073be:	d050      	beq.n	8007462 <HAL_TIM_ConfigClockSource+0x11a>
 80073c0:	2b60      	cmp	r3, #96	; 0x60
 80073c2:	d877      	bhi.n	80074b4 <HAL_TIM_ConfigClockSource+0x16c>
 80073c4:	2b50      	cmp	r3, #80	; 0x50
 80073c6:	d03c      	beq.n	8007442 <HAL_TIM_ConfigClockSource+0xfa>
 80073c8:	2b50      	cmp	r3, #80	; 0x50
 80073ca:	d873      	bhi.n	80074b4 <HAL_TIM_ConfigClockSource+0x16c>
 80073cc:	2b40      	cmp	r3, #64	; 0x40
 80073ce:	d058      	beq.n	8007482 <HAL_TIM_ConfigClockSource+0x13a>
 80073d0:	2b40      	cmp	r3, #64	; 0x40
 80073d2:	d86f      	bhi.n	80074b4 <HAL_TIM_ConfigClockSource+0x16c>
 80073d4:	2b30      	cmp	r3, #48	; 0x30
 80073d6:	d064      	beq.n	80074a2 <HAL_TIM_ConfigClockSource+0x15a>
 80073d8:	2b30      	cmp	r3, #48	; 0x30
 80073da:	d86b      	bhi.n	80074b4 <HAL_TIM_ConfigClockSource+0x16c>
 80073dc:	2b20      	cmp	r3, #32
 80073de:	d060      	beq.n	80074a2 <HAL_TIM_ConfigClockSource+0x15a>
 80073e0:	2b20      	cmp	r3, #32
 80073e2:	d867      	bhi.n	80074b4 <HAL_TIM_ConfigClockSource+0x16c>
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d05c      	beq.n	80074a2 <HAL_TIM_ConfigClockSource+0x15a>
 80073e8:	2b10      	cmp	r3, #16
 80073ea:	d05a      	beq.n	80074a2 <HAL_TIM_ConfigClockSource+0x15a>
 80073ec:	e062      	b.n	80074b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6818      	ldr	r0, [r3, #0]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	6899      	ldr	r1, [r3, #8]
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	685a      	ldr	r2, [r3, #4]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	f000 fb23 	bl	8007a48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007410:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	609a      	str	r2, [r3, #8]
      break;
 800741a:	e04f      	b.n	80074bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6818      	ldr	r0, [r3, #0]
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	6899      	ldr	r1, [r3, #8]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	685a      	ldr	r2, [r3, #4]
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	f000 fb0c 	bl	8007a48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	689a      	ldr	r2, [r3, #8]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800743e:	609a      	str	r2, [r3, #8]
      break;
 8007440:	e03c      	b.n	80074bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6818      	ldr	r0, [r3, #0]
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	6859      	ldr	r1, [r3, #4]
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	461a      	mov	r2, r3
 8007450:	f000 fa80 	bl	8007954 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2150      	movs	r1, #80	; 0x50
 800745a:	4618      	mov	r0, r3
 800745c:	f000 fad9 	bl	8007a12 <TIM_ITRx_SetConfig>
      break;
 8007460:	e02c      	b.n	80074bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6818      	ldr	r0, [r3, #0]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	6859      	ldr	r1, [r3, #4]
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	461a      	mov	r2, r3
 8007470:	f000 fa9f 	bl	80079b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2160      	movs	r1, #96	; 0x60
 800747a:	4618      	mov	r0, r3
 800747c:	f000 fac9 	bl	8007a12 <TIM_ITRx_SetConfig>
      break;
 8007480:	e01c      	b.n	80074bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6818      	ldr	r0, [r3, #0]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	6859      	ldr	r1, [r3, #4]
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	461a      	mov	r2, r3
 8007490:	f000 fa60 	bl	8007954 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2140      	movs	r1, #64	; 0x40
 800749a:	4618      	mov	r0, r3
 800749c:	f000 fab9 	bl	8007a12 <TIM_ITRx_SetConfig>
      break;
 80074a0:	e00c      	b.n	80074bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4619      	mov	r1, r3
 80074ac:	4610      	mov	r0, r2
 80074ae:	f000 fab0 	bl	8007a12 <TIM_ITRx_SetConfig>
      break;
 80074b2:	e003      	b.n	80074bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	73fb      	strb	r3, [r7, #15]
      break;
 80074b8:	e000      	b.n	80074bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80074ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b083      	sub	sp, #12
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80074de:	bf00      	nop
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074f2:	bf00      	nop
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074fe:	b480      	push	{r7}
 8007500:	b083      	sub	sp, #12
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007506:	bf00      	nop
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007512:	b480      	push	{r7}
 8007514:	b083      	sub	sp, #12
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800751a:	bf00      	nop
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr

08007526 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007526:	b480      	push	{r7}
 8007528:	b083      	sub	sp, #12
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800752e:	bf00      	nop
 8007530:	370c      	adds	r7, #12
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
	...

0800753c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a34      	ldr	r2, [pc, #208]	; (8007620 <TIM_Base_SetConfig+0xe4>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d00f      	beq.n	8007574 <TIM_Base_SetConfig+0x38>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800755a:	d00b      	beq.n	8007574 <TIM_Base_SetConfig+0x38>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a31      	ldr	r2, [pc, #196]	; (8007624 <TIM_Base_SetConfig+0xe8>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d007      	beq.n	8007574 <TIM_Base_SetConfig+0x38>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a30      	ldr	r2, [pc, #192]	; (8007628 <TIM_Base_SetConfig+0xec>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d003      	beq.n	8007574 <TIM_Base_SetConfig+0x38>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a2f      	ldr	r2, [pc, #188]	; (800762c <TIM_Base_SetConfig+0xf0>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d108      	bne.n	8007586 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800757a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	4313      	orrs	r3, r2
 8007584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a25      	ldr	r2, [pc, #148]	; (8007620 <TIM_Base_SetConfig+0xe4>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d01b      	beq.n	80075c6 <TIM_Base_SetConfig+0x8a>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007594:	d017      	beq.n	80075c6 <TIM_Base_SetConfig+0x8a>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a22      	ldr	r2, [pc, #136]	; (8007624 <TIM_Base_SetConfig+0xe8>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d013      	beq.n	80075c6 <TIM_Base_SetConfig+0x8a>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a21      	ldr	r2, [pc, #132]	; (8007628 <TIM_Base_SetConfig+0xec>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d00f      	beq.n	80075c6 <TIM_Base_SetConfig+0x8a>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a20      	ldr	r2, [pc, #128]	; (800762c <TIM_Base_SetConfig+0xf0>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d00b      	beq.n	80075c6 <TIM_Base_SetConfig+0x8a>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a1f      	ldr	r2, [pc, #124]	; (8007630 <TIM_Base_SetConfig+0xf4>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d007      	beq.n	80075c6 <TIM_Base_SetConfig+0x8a>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a1e      	ldr	r2, [pc, #120]	; (8007634 <TIM_Base_SetConfig+0xf8>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d003      	beq.n	80075c6 <TIM_Base_SetConfig+0x8a>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a1d      	ldr	r2, [pc, #116]	; (8007638 <TIM_Base_SetConfig+0xfc>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d108      	bne.n	80075d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	689a      	ldr	r2, [r3, #8]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a08      	ldr	r2, [pc, #32]	; (8007620 <TIM_Base_SetConfig+0xe4>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d103      	bne.n	800760c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	691a      	ldr	r2, [r3, #16]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	615a      	str	r2, [r3, #20]
}
 8007612:	bf00      	nop
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	40010000 	.word	0x40010000
 8007624:	40000400 	.word	0x40000400
 8007628:	40000800 	.word	0x40000800
 800762c:	40000c00 	.word	0x40000c00
 8007630:	40014000 	.word	0x40014000
 8007634:	40014400 	.word	0x40014400
 8007638:	40014800 	.word	0x40014800

0800763c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800763c:	b480      	push	{r7}
 800763e:	b087      	sub	sp, #28
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a1b      	ldr	r3, [r3, #32]
 800764a:	f023 0201 	bic.w	r2, r3, #1
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800766a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f023 0303 	bic.w	r3, r3, #3
 8007672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	4313      	orrs	r3, r2
 800767c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f023 0302 	bic.w	r3, r3, #2
 8007684:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	4313      	orrs	r3, r2
 800768e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a1c      	ldr	r2, [pc, #112]	; (8007704 <TIM_OC1_SetConfig+0xc8>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d10c      	bne.n	80076b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	f023 0308 	bic.w	r3, r3, #8
 800769e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f023 0304 	bic.w	r3, r3, #4
 80076b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a13      	ldr	r2, [pc, #76]	; (8007704 <TIM_OC1_SetConfig+0xc8>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d111      	bne.n	80076de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	4313      	orrs	r3, r2
 80076dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	693a      	ldr	r2, [r7, #16]
 80076e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	621a      	str	r2, [r3, #32]
}
 80076f8:	bf00      	nop
 80076fa:	371c      	adds	r7, #28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	40010000 	.word	0x40010000

08007708 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007708:	b480      	push	{r7}
 800770a:	b087      	sub	sp, #28
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a1b      	ldr	r3, [r3, #32]
 8007716:	f023 0210 	bic.w	r2, r3, #16
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a1b      	ldr	r3, [r3, #32]
 8007722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800773e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	021b      	lsls	r3, r3, #8
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	4313      	orrs	r3, r2
 800774a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	f023 0320 	bic.w	r3, r3, #32
 8007752:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	011b      	lsls	r3, r3, #4
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	4313      	orrs	r3, r2
 800775e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a1e      	ldr	r2, [pc, #120]	; (80077dc <TIM_OC2_SetConfig+0xd4>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d10d      	bne.n	8007784 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800776e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	011b      	lsls	r3, r3, #4
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	4313      	orrs	r3, r2
 800777a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007782:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a15      	ldr	r2, [pc, #84]	; (80077dc <TIM_OC2_SetConfig+0xd4>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d113      	bne.n	80077b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007792:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800779a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	695b      	ldr	r3, [r3, #20]
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	621a      	str	r2, [r3, #32]
}
 80077ce:	bf00      	nop
 80077d0:	371c      	adds	r7, #28
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	40010000 	.word	0x40010000

080077e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b087      	sub	sp, #28
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800780e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f023 0303 	bic.w	r3, r3, #3
 8007816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	4313      	orrs	r3, r2
 8007820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	021b      	lsls	r3, r3, #8
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	4313      	orrs	r3, r2
 8007834:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a1d      	ldr	r2, [pc, #116]	; (80078b0 <TIM_OC3_SetConfig+0xd0>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d10d      	bne.n	800785a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007844:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	021b      	lsls	r3, r3, #8
 800784c:	697a      	ldr	r2, [r7, #20]
 800784e:	4313      	orrs	r3, r2
 8007850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a14      	ldr	r2, [pc, #80]	; (80078b0 <TIM_OC3_SetConfig+0xd0>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d113      	bne.n	800788a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	011b      	lsls	r3, r3, #4
 8007878:	693a      	ldr	r2, [r7, #16]
 800787a:	4313      	orrs	r3, r2
 800787c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	011b      	lsls	r3, r3, #4
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	4313      	orrs	r3, r2
 8007888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	693a      	ldr	r2, [r7, #16]
 800788e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	685a      	ldr	r2, [r3, #4]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	621a      	str	r2, [r3, #32]
}
 80078a4:	bf00      	nop
 80078a6:	371c      	adds	r7, #28
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr
 80078b0:	40010000 	.word	0x40010000

080078b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b087      	sub	sp, #28
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a1b      	ldr	r3, [r3, #32]
 80078c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a1b      	ldr	r3, [r3, #32]
 80078ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	021b      	lsls	r3, r3, #8
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	031b      	lsls	r3, r3, #12
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	4313      	orrs	r3, r2
 800790a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a10      	ldr	r2, [pc, #64]	; (8007950 <TIM_OC4_SetConfig+0x9c>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d109      	bne.n	8007928 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800791a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	695b      	ldr	r3, [r3, #20]
 8007920:	019b      	lsls	r3, r3, #6
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	4313      	orrs	r3, r2
 8007926:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	697a      	ldr	r2, [r7, #20]
 800792c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	685a      	ldr	r2, [r3, #4]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	621a      	str	r2, [r3, #32]
}
 8007942:	bf00      	nop
 8007944:	371c      	adds	r7, #28
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	40010000 	.word	0x40010000

08007954 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007954:	b480      	push	{r7}
 8007956:	b087      	sub	sp, #28
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6a1b      	ldr	r3, [r3, #32]
 8007964:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	f023 0201 	bic.w	r2, r3, #1
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800797e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	011b      	lsls	r3, r3, #4
 8007984:	693a      	ldr	r2, [r7, #16]
 8007986:	4313      	orrs	r3, r2
 8007988:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	f023 030a 	bic.w	r3, r3, #10
 8007990:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	4313      	orrs	r3, r2
 8007998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	697a      	ldr	r2, [r7, #20]
 80079a4:	621a      	str	r2, [r3, #32]
}
 80079a6:	bf00      	nop
 80079a8:	371c      	adds	r7, #28
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr

080079b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079b2:	b480      	push	{r7}
 80079b4:	b087      	sub	sp, #28
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	60f8      	str	r0, [r7, #12]
 80079ba:	60b9      	str	r1, [r7, #8]
 80079bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	f023 0210 	bic.w	r2, r3, #16
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6a1b      	ldr	r3, [r3, #32]
 80079d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	031b      	lsls	r3, r3, #12
 80079e2:	697a      	ldr	r2, [r7, #20]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80079ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	011b      	lsls	r3, r3, #4
 80079f4:	693a      	ldr	r2, [r7, #16]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	621a      	str	r2, [r3, #32]
}
 8007a06:	bf00      	nop
 8007a08:	371c      	adds	r7, #28
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a12:	b480      	push	{r7}
 8007a14:	b085      	sub	sp, #20
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
 8007a1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a2a:	683a      	ldr	r2, [r7, #0]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	f043 0307 	orr.w	r3, r3, #7
 8007a34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	609a      	str	r2, [r3, #8]
}
 8007a3c:	bf00      	nop
 8007a3e:	3714      	adds	r7, #20
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b087      	sub	sp, #28
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
 8007a54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	021a      	lsls	r2, r3, #8
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	431a      	orrs	r2, r3
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	697a      	ldr	r2, [r7, #20]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	609a      	str	r2, [r3, #8]
}
 8007a7c:	bf00      	nop
 8007a7e:	371c      	adds	r7, #28
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b087      	sub	sp, #28
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f003 031f 	and.w	r3, r3, #31
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6a1a      	ldr	r2, [r3, #32]
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	43db      	mvns	r3, r3
 8007aaa:	401a      	ands	r2, r3
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6a1a      	ldr	r2, [r3, #32]
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f003 031f 	and.w	r3, r3, #31
 8007aba:	6879      	ldr	r1, [r7, #4]
 8007abc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ac0:	431a      	orrs	r2, r3
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	621a      	str	r2, [r3, #32]
}
 8007ac6:	bf00      	nop
 8007ac8:	371c      	adds	r7, #28
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
	...

08007ad4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d101      	bne.n	8007aec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ae8:	2302      	movs	r3, #2
 8007aea:	e050      	b.n	8007b8e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2202      	movs	r2, #2
 8007af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a1c      	ldr	r2, [pc, #112]	; (8007b9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d018      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b38:	d013      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a18      	ldr	r2, [pc, #96]	; (8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d00e      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a16      	ldr	r2, [pc, #88]	; (8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d009      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a15      	ldr	r2, [pc, #84]	; (8007ba8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d004      	beq.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a13      	ldr	r2, [pc, #76]	; (8007bac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d10c      	bne.n	8007b7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3714      	adds	r7, #20
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	40010000 	.word	0x40010000
 8007ba0:	40000400 	.word	0x40000400
 8007ba4:	40000800 	.word	0x40000800
 8007ba8:	40000c00 	.word	0x40000c00
 8007bac:	40014000 	.word	0x40014000

08007bb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d101      	bne.n	8007bcc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007bc8:	2302      	movs	r3, #2
 8007bca:	e03d      	b.n	8007c48 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	69db      	ldr	r3, [r3, #28]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d101      	bne.n	8007c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e03f      	b.n	8007d0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d106      	bne.n	8007ca8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f7fc fed4 	bl	8004a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2224      	movs	r2, #36	; 0x24
 8007cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68da      	ldr	r2, [r3, #12]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fddf 	bl	8008884 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	691a      	ldr	r2, [r3, #16]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007cd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	695a      	ldr	r2, [r3, #20]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ce4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68da      	ldr	r2, [r3, #12]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2220      	movs	r2, #32
 8007d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2220      	movs	r2, #32
 8007d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3708      	adds	r7, #8
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b08a      	sub	sp, #40	; 0x28
 8007d1a:	af02      	add	r7, sp, #8
 8007d1c:	60f8      	str	r0, [r7, #12]
 8007d1e:	60b9      	str	r1, [r7, #8]
 8007d20:	603b      	str	r3, [r7, #0]
 8007d22:	4613      	mov	r3, r2
 8007d24:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007d26:	2300      	movs	r3, #0
 8007d28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b20      	cmp	r3, #32
 8007d34:	d17c      	bne.n	8007e30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d002      	beq.n	8007d42 <HAL_UART_Transmit+0x2c>
 8007d3c:	88fb      	ldrh	r3, [r7, #6]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d101      	bne.n	8007d46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e075      	b.n	8007e32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d101      	bne.n	8007d54 <HAL_UART_Transmit+0x3e>
 8007d50:	2302      	movs	r3, #2
 8007d52:	e06e      	b.n	8007e32 <HAL_UART_Transmit+0x11c>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2221      	movs	r2, #33	; 0x21
 8007d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d6a:	f7fd f92b 	bl	8004fc4 <HAL_GetTick>
 8007d6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	88fa      	ldrh	r2, [r7, #6]
 8007d74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	88fa      	ldrh	r2, [r7, #6]
 8007d7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d84:	d108      	bne.n	8007d98 <HAL_UART_Transmit+0x82>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d104      	bne.n	8007d98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	61bb      	str	r3, [r7, #24]
 8007d96:	e003      	b.n	8007da0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007da8:	e02a      	b.n	8007e00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	2200      	movs	r2, #0
 8007db2:	2180      	movs	r1, #128	; 0x80
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f000 fb1f 	bl	80083f8 <UART_WaitOnFlagUntilTimeout>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e036      	b.n	8007e32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10b      	bne.n	8007de2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	881b      	ldrh	r3, [r3, #0]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007dd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	3302      	adds	r3, #2
 8007dde:	61bb      	str	r3, [r7, #24]
 8007de0:	e007      	b.n	8007df2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	781a      	ldrb	r2, [r3, #0]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	3301      	adds	r3, #1
 8007df0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1cf      	bne.n	8007daa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	2200      	movs	r2, #0
 8007e12:	2140      	movs	r1, #64	; 0x40
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f000 faef 	bl	80083f8 <UART_WaitOnFlagUntilTimeout>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d001      	beq.n	8007e24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007e20:	2303      	movs	r3, #3
 8007e22:	e006      	b.n	8007e32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2220      	movs	r2, #32
 8007e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	e000      	b.n	8007e32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007e30:	2302      	movs	r3, #2
  }
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3720      	adds	r7, #32
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b084      	sub	sp, #16
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	60f8      	str	r0, [r7, #12]
 8007e42:	60b9      	str	r1, [r7, #8]
 8007e44:	4613      	mov	r3, r2
 8007e46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	2b20      	cmp	r3, #32
 8007e52:	d11d      	bne.n	8007e90 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d002      	beq.n	8007e60 <HAL_UART_Receive_IT+0x26>
 8007e5a:	88fb      	ldrh	r3, [r7, #6]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d101      	bne.n	8007e64 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e016      	b.n	8007e92 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d101      	bne.n	8007e72 <HAL_UART_Receive_IT+0x38>
 8007e6e:	2302      	movs	r3, #2
 8007e70:	e00f      	b.n	8007e92 <HAL_UART_Receive_IT+0x58>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007e80:	88fb      	ldrh	r3, [r7, #6]
 8007e82:	461a      	mov	r2, r3
 8007e84:	68b9      	ldr	r1, [r7, #8]
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f000 fb24 	bl	80084d4 <UART_Start_Receive_IT>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	e000      	b.n	8007e92 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007e90:	2302      	movs	r3, #2
  }
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
	...

08007e9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b0ba      	sub	sp, #232	; 0xe8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ed2:	f003 030f 	and.w	r3, r3, #15
 8007ed6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007eda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d10f      	bne.n	8007f02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee6:	f003 0320 	and.w	r3, r3, #32
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d009      	beq.n	8007f02 <HAL_UART_IRQHandler+0x66>
 8007eee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ef2:	f003 0320 	and.w	r3, r3, #32
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d003      	beq.n	8007f02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fc07 	bl	800870e <UART_Receive_IT>
      return;
 8007f00:	e256      	b.n	80083b0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007f02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f000 80de 	beq.w	80080c8 <HAL_UART_IRQHandler+0x22c>
 8007f0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f10:	f003 0301 	and.w	r3, r3, #1
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d106      	bne.n	8007f26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 80d1 	beq.w	80080c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f2a:	f003 0301 	and.w	r3, r3, #1
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00b      	beq.n	8007f4a <HAL_UART_IRQHandler+0xae>
 8007f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d005      	beq.n	8007f4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f42:	f043 0201 	orr.w	r2, r3, #1
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f4e:	f003 0304 	and.w	r3, r3, #4
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00b      	beq.n	8007f6e <HAL_UART_IRQHandler+0xd2>
 8007f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f5a:	f003 0301 	and.w	r3, r3, #1
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d005      	beq.n	8007f6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f66:	f043 0202 	orr.w	r2, r3, #2
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f72:	f003 0302 	and.w	r3, r3, #2
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00b      	beq.n	8007f92 <HAL_UART_IRQHandler+0xf6>
 8007f7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f7e:	f003 0301 	and.w	r3, r3, #1
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d005      	beq.n	8007f92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8a:	f043 0204 	orr.w	r2, r3, #4
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f96:	f003 0308 	and.w	r3, r3, #8
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d011      	beq.n	8007fc2 <HAL_UART_IRQHandler+0x126>
 8007f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fa2:	f003 0320 	and.w	r3, r3, #32
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d105      	bne.n	8007fb6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007faa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d005      	beq.n	8007fc2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fba:	f043 0208 	orr.w	r2, r3, #8
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f000 81ed 	beq.w	80083a6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fd0:	f003 0320 	and.w	r3, r3, #32
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d008      	beq.n	8007fea <HAL_UART_IRQHandler+0x14e>
 8007fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fdc:	f003 0320 	and.w	r3, r3, #32
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d002      	beq.n	8007fea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 fb92 	bl	800870e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	695b      	ldr	r3, [r3, #20]
 8007ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ff4:	2b40      	cmp	r3, #64	; 0x40
 8007ff6:	bf0c      	ite	eq
 8007ff8:	2301      	moveq	r3, #1
 8007ffa:	2300      	movne	r3, #0
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008006:	f003 0308 	and.w	r3, r3, #8
 800800a:	2b00      	cmp	r3, #0
 800800c:	d103      	bne.n	8008016 <HAL_UART_IRQHandler+0x17a>
 800800e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008012:	2b00      	cmp	r3, #0
 8008014:	d04f      	beq.n	80080b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fa9a 	bl	8008550 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	695b      	ldr	r3, [r3, #20]
 8008022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008026:	2b40      	cmp	r3, #64	; 0x40
 8008028:	d141      	bne.n	80080ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	3314      	adds	r3, #20
 8008030:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008034:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008038:	e853 3f00 	ldrex	r3, [r3]
 800803c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008040:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008048:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	3314      	adds	r3, #20
 8008052:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008056:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800805a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008062:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008066:	e841 2300 	strex	r3, r2, [r1]
 800806a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800806e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1d9      	bne.n	800802a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807a:	2b00      	cmp	r3, #0
 800807c:	d013      	beq.n	80080a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008082:	4a7d      	ldr	r2, [pc, #500]	; (8008278 <HAL_UART_IRQHandler+0x3dc>)
 8008084:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808a:	4618      	mov	r0, r3
 800808c:	f7fd f94b 	bl	8005326 <HAL_DMA_Abort_IT>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d016      	beq.n	80080c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80080a0:	4610      	mov	r0, r2
 80080a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080a4:	e00e      	b.n	80080c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f990 	bl	80083cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080ac:	e00a      	b.n	80080c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f98c 	bl	80083cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080b4:	e006      	b.n	80080c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f988 	bl	80083cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80080c2:	e170      	b.n	80083a6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080c4:	bf00      	nop
    return;
 80080c6:	e16e      	b.n	80083a6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	f040 814a 	bne.w	8008366 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80080d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080d6:	f003 0310 	and.w	r3, r3, #16
 80080da:	2b00      	cmp	r3, #0
 80080dc:	f000 8143 	beq.w	8008366 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80080e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080e4:	f003 0310 	and.w	r3, r3, #16
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f000 813c 	beq.w	8008366 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080ee:	2300      	movs	r3, #0
 80080f0:	60bb      	str	r3, [r7, #8]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	60bb      	str	r3, [r7, #8]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	60bb      	str	r3, [r7, #8]
 8008102:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	695b      	ldr	r3, [r3, #20]
 800810a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800810e:	2b40      	cmp	r3, #64	; 0x40
 8008110:	f040 80b4 	bne.w	800827c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008120:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008124:	2b00      	cmp	r3, #0
 8008126:	f000 8140 	beq.w	80083aa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800812e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008132:	429a      	cmp	r2, r3
 8008134:	f080 8139 	bcs.w	80083aa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800813e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008144:	69db      	ldr	r3, [r3, #28]
 8008146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800814a:	f000 8088 	beq.w	800825e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	330c      	adds	r3, #12
 8008154:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008158:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800815c:	e853 3f00 	ldrex	r3, [r3]
 8008160:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008164:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800816c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	330c      	adds	r3, #12
 8008176:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800817a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800817e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008182:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008186:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800818a:	e841 2300 	strex	r3, r2, [r1]
 800818e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008192:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1d9      	bne.n	800814e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	3314      	adds	r3, #20
 80081a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081a4:	e853 3f00 	ldrex	r3, [r3]
 80081a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80081aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081ac:	f023 0301 	bic.w	r3, r3, #1
 80081b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	3314      	adds	r3, #20
 80081ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80081be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80081c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80081c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80081ca:	e841 2300 	strex	r3, r2, [r1]
 80081ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80081d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1e1      	bne.n	800819a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3314      	adds	r3, #20
 80081dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081e0:	e853 3f00 	ldrex	r3, [r3]
 80081e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80081e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	3314      	adds	r3, #20
 80081f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80081fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80081fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008200:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008202:	e841 2300 	strex	r3, r2, [r1]
 8008206:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008208:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1e3      	bne.n	80081d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2220      	movs	r2, #32
 8008212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	330c      	adds	r3, #12
 8008222:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008226:	e853 3f00 	ldrex	r3, [r3]
 800822a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800822c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800822e:	f023 0310 	bic.w	r3, r3, #16
 8008232:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	330c      	adds	r3, #12
 800823c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008240:	65ba      	str	r2, [r7, #88]	; 0x58
 8008242:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008244:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008246:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008248:	e841 2300 	strex	r3, r2, [r1]
 800824c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800824e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008250:	2b00      	cmp	r3, #0
 8008252:	d1e3      	bne.n	800821c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008258:	4618      	mov	r0, r3
 800825a:	f7fc fff4 	bl	8005246 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008266:	b29b      	uxth	r3, r3
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	b29b      	uxth	r3, r3
 800826c:	4619      	mov	r1, r3
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 f8b6 	bl	80083e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008274:	e099      	b.n	80083aa <HAL_UART_IRQHandler+0x50e>
 8008276:	bf00      	nop
 8008278:	08008617 	.word	0x08008617
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008284:	b29b      	uxth	r3, r3
 8008286:	1ad3      	subs	r3, r2, r3
 8008288:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008290:	b29b      	uxth	r3, r3
 8008292:	2b00      	cmp	r3, #0
 8008294:	f000 808b 	beq.w	80083ae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008298:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800829c:	2b00      	cmp	r3, #0
 800829e:	f000 8086 	beq.w	80083ae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	330c      	adds	r3, #12
 80082a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ac:	e853 3f00 	ldrex	r3, [r3]
 80082b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80082b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	330c      	adds	r3, #12
 80082c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80082c6:	647a      	str	r2, [r7, #68]	; 0x44
 80082c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80082cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082ce:	e841 2300 	strex	r3, r2, [r1]
 80082d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1e3      	bne.n	80082a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	3314      	adds	r3, #20
 80082e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e4:	e853 3f00 	ldrex	r3, [r3]
 80082e8:	623b      	str	r3, [r7, #32]
   return(result);
 80082ea:	6a3b      	ldr	r3, [r7, #32]
 80082ec:	f023 0301 	bic.w	r3, r3, #1
 80082f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	3314      	adds	r3, #20
 80082fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80082fe:	633a      	str	r2, [r7, #48]	; 0x30
 8008300:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008302:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008306:	e841 2300 	strex	r3, r2, [r1]
 800830a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800830c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1e3      	bne.n	80082da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2220      	movs	r2, #32
 8008316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	330c      	adds	r3, #12
 8008326:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	e853 3f00 	ldrex	r3, [r3]
 800832e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f023 0310 	bic.w	r3, r3, #16
 8008336:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	330c      	adds	r3, #12
 8008340:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008344:	61fa      	str	r2, [r7, #28]
 8008346:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008348:	69b9      	ldr	r1, [r7, #24]
 800834a:	69fa      	ldr	r2, [r7, #28]
 800834c:	e841 2300 	strex	r3, r2, [r1]
 8008350:	617b      	str	r3, [r7, #20]
   return(result);
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1e3      	bne.n	8008320 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008358:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800835c:	4619      	mov	r1, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f83e 	bl	80083e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008364:	e023      	b.n	80083ae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800836a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800836e:	2b00      	cmp	r3, #0
 8008370:	d009      	beq.n	8008386 <HAL_UART_IRQHandler+0x4ea>
 8008372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800837a:	2b00      	cmp	r3, #0
 800837c:	d003      	beq.n	8008386 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f95d 	bl	800863e <UART_Transmit_IT>
    return;
 8008384:	e014      	b.n	80083b0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800838a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00e      	beq.n	80083b0 <HAL_UART_IRQHandler+0x514>
 8008392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800839a:	2b00      	cmp	r3, #0
 800839c:	d008      	beq.n	80083b0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f99d 	bl	80086de <UART_EndTransmit_IT>
    return;
 80083a4:	e004      	b.n	80083b0 <HAL_UART_IRQHandler+0x514>
    return;
 80083a6:	bf00      	nop
 80083a8:	e002      	b.n	80083b0 <HAL_UART_IRQHandler+0x514>
      return;
 80083aa:	bf00      	nop
 80083ac:	e000      	b.n	80083b0 <HAL_UART_IRQHandler+0x514>
      return;
 80083ae:	bf00      	nop
  }
}
 80083b0:	37e8      	adds	r7, #232	; 0xe8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop

080083b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80083c0:	bf00      	nop
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80083d4:	bf00      	nop
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	460b      	mov	r3, r1
 80083ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083ec:	bf00      	nop
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b090      	sub	sp, #64	; 0x40
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	603b      	str	r3, [r7, #0]
 8008404:	4613      	mov	r3, r2
 8008406:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008408:	e050      	b.n	80084ac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800840a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800840c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008410:	d04c      	beq.n	80084ac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008414:	2b00      	cmp	r3, #0
 8008416:	d007      	beq.n	8008428 <UART_WaitOnFlagUntilTimeout+0x30>
 8008418:	f7fc fdd4 	bl	8004fc4 <HAL_GetTick>
 800841c:	4602      	mov	r2, r0
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008424:	429a      	cmp	r2, r3
 8008426:	d241      	bcs.n	80084ac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	330c      	adds	r3, #12
 800842e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008432:	e853 3f00 	ldrex	r3, [r3]
 8008436:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800843e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	330c      	adds	r3, #12
 8008446:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008448:	637a      	str	r2, [r7, #52]	; 0x34
 800844a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800844e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008450:	e841 2300 	strex	r3, r2, [r1]
 8008454:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008458:	2b00      	cmp	r3, #0
 800845a:	d1e5      	bne.n	8008428 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	3314      	adds	r3, #20
 8008462:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	e853 3f00 	ldrex	r3, [r3]
 800846a:	613b      	str	r3, [r7, #16]
   return(result);
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	f023 0301 	bic.w	r3, r3, #1
 8008472:	63bb      	str	r3, [r7, #56]	; 0x38
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	3314      	adds	r3, #20
 800847a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800847c:	623a      	str	r2, [r7, #32]
 800847e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008480:	69f9      	ldr	r1, [r7, #28]
 8008482:	6a3a      	ldr	r2, [r7, #32]
 8008484:	e841 2300 	strex	r3, r2, [r1]
 8008488:	61bb      	str	r3, [r7, #24]
   return(result);
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1e5      	bne.n	800845c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2220      	movs	r2, #32
 8008494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2220      	movs	r2, #32
 800849c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e00f      	b.n	80084cc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	4013      	ands	r3, r2
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	bf0c      	ite	eq
 80084bc:	2301      	moveq	r3, #1
 80084be:	2300      	movne	r3, #0
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	461a      	mov	r2, r3
 80084c4:	79fb      	ldrb	r3, [r7, #7]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d09f      	beq.n	800840a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3740      	adds	r7, #64	; 0x40
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b085      	sub	sp, #20
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	4613      	mov	r3, r2
 80084e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	88fa      	ldrh	r2, [r7, #6]
 80084ec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	88fa      	ldrh	r2, [r7, #6]
 80084f2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2222      	movs	r2, #34	; 0x22
 80084fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2200      	movs	r2, #0
 8008506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d007      	beq.n	8008522 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68da      	ldr	r2, [r3, #12]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008520:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	695a      	ldr	r2, [r3, #20]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f042 0201 	orr.w	r2, r2, #1
 8008530:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	68da      	ldr	r2, [r3, #12]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f042 0220 	orr.w	r2, r2, #32
 8008540:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3714      	adds	r7, #20
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008550:	b480      	push	{r7}
 8008552:	b095      	sub	sp, #84	; 0x54
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	330c      	adds	r3, #12
 800855e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008562:	e853 3f00 	ldrex	r3, [r3]
 8008566:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800856e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	330c      	adds	r3, #12
 8008576:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008578:	643a      	str	r2, [r7, #64]	; 0x40
 800857a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800857e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008580:	e841 2300 	strex	r3, r2, [r1]
 8008584:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1e5      	bne.n	8008558 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	3314      	adds	r3, #20
 8008592:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008594:	6a3b      	ldr	r3, [r7, #32]
 8008596:	e853 3f00 	ldrex	r3, [r3]
 800859a:	61fb      	str	r3, [r7, #28]
   return(result);
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	f023 0301 	bic.w	r3, r3, #1
 80085a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	3314      	adds	r3, #20
 80085aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085b4:	e841 2300 	strex	r3, r2, [r1]
 80085b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d1e5      	bne.n	800858c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d119      	bne.n	80085fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	330c      	adds	r3, #12
 80085ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	e853 3f00 	ldrex	r3, [r3]
 80085d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	f023 0310 	bic.w	r3, r3, #16
 80085de:	647b      	str	r3, [r7, #68]	; 0x44
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	330c      	adds	r3, #12
 80085e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085e8:	61ba      	str	r2, [r7, #24]
 80085ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ec:	6979      	ldr	r1, [r7, #20]
 80085ee:	69ba      	ldr	r2, [r7, #24]
 80085f0:	e841 2300 	strex	r3, r2, [r1]
 80085f4:	613b      	str	r3, [r7, #16]
   return(result);
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1e5      	bne.n	80085c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2220      	movs	r2, #32
 8008600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	631a      	str	r2, [r3, #48]	; 0x30
}
 800860a:	bf00      	nop
 800860c:	3754      	adds	r7, #84	; 0x54
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr

08008616 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b084      	sub	sp, #16
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008622:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2200      	movs	r2, #0
 8008628:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f7ff fecb 	bl	80083cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008636:	bf00      	nop
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800863e:	b480      	push	{r7}
 8008640:	b085      	sub	sp, #20
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800864c:	b2db      	uxtb	r3, r3
 800864e:	2b21      	cmp	r3, #33	; 0x21
 8008650:	d13e      	bne.n	80086d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800865a:	d114      	bne.n	8008686 <UART_Transmit_IT+0x48>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d110      	bne.n	8008686 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6a1b      	ldr	r3, [r3, #32]
 8008668:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	881b      	ldrh	r3, [r3, #0]
 800866e:	461a      	mov	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008678:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a1b      	ldr	r3, [r3, #32]
 800867e:	1c9a      	adds	r2, r3, #2
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	621a      	str	r2, [r3, #32]
 8008684:	e008      	b.n	8008698 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a1b      	ldr	r3, [r3, #32]
 800868a:	1c59      	adds	r1, r3, #1
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	6211      	str	r1, [r2, #32]
 8008690:	781a      	ldrb	r2, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800869c:	b29b      	uxth	r3, r3
 800869e:	3b01      	subs	r3, #1
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	4619      	mov	r1, r3
 80086a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d10f      	bne.n	80086cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68da      	ldr	r2, [r3, #12]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68da      	ldr	r2, [r3, #12]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80086cc:	2300      	movs	r3, #0
 80086ce:	e000      	b.n	80086d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80086d0:	2302      	movs	r3, #2
  }
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr

080086de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b082      	sub	sp, #8
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68da      	ldr	r2, [r3, #12]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2220      	movs	r2, #32
 80086fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f7ff fe5a 	bl	80083b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b08c      	sub	sp, #48	; 0x30
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800871c:	b2db      	uxtb	r3, r3
 800871e:	2b22      	cmp	r3, #34	; 0x22
 8008720:	f040 80ab 	bne.w	800887a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800872c:	d117      	bne.n	800875e <UART_Receive_IT+0x50>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d113      	bne.n	800875e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008736:	2300      	movs	r3, #0
 8008738:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	b29b      	uxth	r3, r3
 8008748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800874c:	b29a      	uxth	r2, r3
 800874e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008750:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008756:	1c9a      	adds	r2, r3, #2
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	629a      	str	r2, [r3, #40]	; 0x28
 800875c:	e026      	b.n	80087ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008762:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008764:	2300      	movs	r3, #0
 8008766:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008770:	d007      	beq.n	8008782 <UART_Receive_IT+0x74>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d10a      	bne.n	8008790 <UART_Receive_IT+0x82>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d106      	bne.n	8008790 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	b2da      	uxtb	r2, r3
 800878a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878c:	701a      	strb	r2, [r3, #0]
 800878e:	e008      	b.n	80087a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	b2db      	uxtb	r3, r3
 8008798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800879c:	b2da      	uxtb	r2, r3
 800879e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a6:	1c5a      	adds	r2, r3, #1
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	3b01      	subs	r3, #1
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	4619      	mov	r1, r3
 80087ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d15a      	bne.n	8008876 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	68da      	ldr	r2, [r3, #12]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f022 0220 	bic.w	r2, r2, #32
 80087ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68da      	ldr	r2, [r3, #12]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	695a      	ldr	r2, [r3, #20]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f022 0201 	bic.w	r2, r2, #1
 80087ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2220      	movs	r2, #32
 80087f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d135      	bne.n	800886c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	330c      	adds	r3, #12
 800880c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	e853 3f00 	ldrex	r3, [r3]
 8008814:	613b      	str	r3, [r7, #16]
   return(result);
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	f023 0310 	bic.w	r3, r3, #16
 800881c:	627b      	str	r3, [r7, #36]	; 0x24
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	330c      	adds	r3, #12
 8008824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008826:	623a      	str	r2, [r7, #32]
 8008828:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882a:	69f9      	ldr	r1, [r7, #28]
 800882c:	6a3a      	ldr	r2, [r7, #32]
 800882e:	e841 2300 	strex	r3, r2, [r1]
 8008832:	61bb      	str	r3, [r7, #24]
   return(result);
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1e5      	bne.n	8008806 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 0310 	and.w	r3, r3, #16
 8008844:	2b10      	cmp	r3, #16
 8008846:	d10a      	bne.n	800885e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008848:	2300      	movs	r3, #0
 800884a:	60fb      	str	r3, [r7, #12]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	60fb      	str	r3, [r7, #12]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	60fb      	str	r3, [r7, #12]
 800885c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008862:	4619      	mov	r1, r3
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f7ff fdbb 	bl	80083e0 <HAL_UARTEx_RxEventCallback>
 800886a:	e002      	b.n	8008872 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f7fb ff1f 	bl	80046b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	e002      	b.n	800887c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008876:	2300      	movs	r3, #0
 8008878:	e000      	b.n	800887c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800887a:	2302      	movs	r3, #2
  }
}
 800887c:	4618      	mov	r0, r3
 800887e:	3730      	adds	r7, #48	; 0x30
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008888:	b0c0      	sub	sp, #256	; 0x100
 800888a:	af00      	add	r7, sp, #0
 800888c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800889c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088a0:	68d9      	ldr	r1, [r3, #12]
 80088a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	ea40 0301 	orr.w	r3, r0, r1
 80088ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80088ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088b2:	689a      	ldr	r2, [r3, #8]
 80088b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	431a      	orrs	r2, r3
 80088bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088c0:	695b      	ldr	r3, [r3, #20]
 80088c2:	431a      	orrs	r2, r3
 80088c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088c8:	69db      	ldr	r3, [r3, #28]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80088d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80088dc:	f021 010c 	bic.w	r1, r1, #12
 80088e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80088ea:	430b      	orrs	r3, r1
 80088ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80088ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	695b      	ldr	r3, [r3, #20]
 80088f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80088fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088fe:	6999      	ldr	r1, [r3, #24]
 8008900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	ea40 0301 	orr.w	r3, r0, r1
 800890a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800890c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	4b8f      	ldr	r3, [pc, #572]	; (8008b50 <UART_SetConfig+0x2cc>)
 8008914:	429a      	cmp	r2, r3
 8008916:	d005      	beq.n	8008924 <UART_SetConfig+0xa0>
 8008918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	4b8d      	ldr	r3, [pc, #564]	; (8008b54 <UART_SetConfig+0x2d0>)
 8008920:	429a      	cmp	r2, r3
 8008922:	d104      	bne.n	800892e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008924:	f7fd fb44 	bl	8005fb0 <HAL_RCC_GetPCLK2Freq>
 8008928:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800892c:	e003      	b.n	8008936 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800892e:	f7fd fb2b 	bl	8005f88 <HAL_RCC_GetPCLK1Freq>
 8008932:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800893a:	69db      	ldr	r3, [r3, #28]
 800893c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008940:	f040 810c 	bne.w	8008b5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008944:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008948:	2200      	movs	r2, #0
 800894a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800894e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008952:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008956:	4622      	mov	r2, r4
 8008958:	462b      	mov	r3, r5
 800895a:	1891      	adds	r1, r2, r2
 800895c:	65b9      	str	r1, [r7, #88]	; 0x58
 800895e:	415b      	adcs	r3, r3
 8008960:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008962:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008966:	4621      	mov	r1, r4
 8008968:	eb12 0801 	adds.w	r8, r2, r1
 800896c:	4629      	mov	r1, r5
 800896e:	eb43 0901 	adc.w	r9, r3, r1
 8008972:	f04f 0200 	mov.w	r2, #0
 8008976:	f04f 0300 	mov.w	r3, #0
 800897a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800897e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008982:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008986:	4690      	mov	r8, r2
 8008988:	4699      	mov	r9, r3
 800898a:	4623      	mov	r3, r4
 800898c:	eb18 0303 	adds.w	r3, r8, r3
 8008990:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008994:	462b      	mov	r3, r5
 8008996:	eb49 0303 	adc.w	r3, r9, r3
 800899a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800899e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80089aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80089ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80089b2:	460b      	mov	r3, r1
 80089b4:	18db      	adds	r3, r3, r3
 80089b6:	653b      	str	r3, [r7, #80]	; 0x50
 80089b8:	4613      	mov	r3, r2
 80089ba:	eb42 0303 	adc.w	r3, r2, r3
 80089be:	657b      	str	r3, [r7, #84]	; 0x54
 80089c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80089c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80089c8:	f7f8 f966 	bl	8000c98 <__aeabi_uldivmod>
 80089cc:	4602      	mov	r2, r0
 80089ce:	460b      	mov	r3, r1
 80089d0:	4b61      	ldr	r3, [pc, #388]	; (8008b58 <UART_SetConfig+0x2d4>)
 80089d2:	fba3 2302 	umull	r2, r3, r3, r2
 80089d6:	095b      	lsrs	r3, r3, #5
 80089d8:	011c      	lsls	r4, r3, #4
 80089da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089de:	2200      	movs	r2, #0
 80089e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80089e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80089e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80089ec:	4642      	mov	r2, r8
 80089ee:	464b      	mov	r3, r9
 80089f0:	1891      	adds	r1, r2, r2
 80089f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80089f4:	415b      	adcs	r3, r3
 80089f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80089fc:	4641      	mov	r1, r8
 80089fe:	eb12 0a01 	adds.w	sl, r2, r1
 8008a02:	4649      	mov	r1, r9
 8008a04:	eb43 0b01 	adc.w	fp, r3, r1
 8008a08:	f04f 0200 	mov.w	r2, #0
 8008a0c:	f04f 0300 	mov.w	r3, #0
 8008a10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008a14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008a18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a1c:	4692      	mov	sl, r2
 8008a1e:	469b      	mov	fp, r3
 8008a20:	4643      	mov	r3, r8
 8008a22:	eb1a 0303 	adds.w	r3, sl, r3
 8008a26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a2a:	464b      	mov	r3, r9
 8008a2c:	eb4b 0303 	adc.w	r3, fp, r3
 8008a30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a40:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008a44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008a48:	460b      	mov	r3, r1
 8008a4a:	18db      	adds	r3, r3, r3
 8008a4c:	643b      	str	r3, [r7, #64]	; 0x40
 8008a4e:	4613      	mov	r3, r2
 8008a50:	eb42 0303 	adc.w	r3, r2, r3
 8008a54:	647b      	str	r3, [r7, #68]	; 0x44
 8008a56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008a5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008a5e:	f7f8 f91b 	bl	8000c98 <__aeabi_uldivmod>
 8008a62:	4602      	mov	r2, r0
 8008a64:	460b      	mov	r3, r1
 8008a66:	4611      	mov	r1, r2
 8008a68:	4b3b      	ldr	r3, [pc, #236]	; (8008b58 <UART_SetConfig+0x2d4>)
 8008a6a:	fba3 2301 	umull	r2, r3, r3, r1
 8008a6e:	095b      	lsrs	r3, r3, #5
 8008a70:	2264      	movs	r2, #100	; 0x64
 8008a72:	fb02 f303 	mul.w	r3, r2, r3
 8008a76:	1acb      	subs	r3, r1, r3
 8008a78:	00db      	lsls	r3, r3, #3
 8008a7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008a7e:	4b36      	ldr	r3, [pc, #216]	; (8008b58 <UART_SetConfig+0x2d4>)
 8008a80:	fba3 2302 	umull	r2, r3, r3, r2
 8008a84:	095b      	lsrs	r3, r3, #5
 8008a86:	005b      	lsls	r3, r3, #1
 8008a88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008a8c:	441c      	add	r4, r3
 8008a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a92:	2200      	movs	r2, #0
 8008a94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a98:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008a9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008aa0:	4642      	mov	r2, r8
 8008aa2:	464b      	mov	r3, r9
 8008aa4:	1891      	adds	r1, r2, r2
 8008aa6:	63b9      	str	r1, [r7, #56]	; 0x38
 8008aa8:	415b      	adcs	r3, r3
 8008aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008aac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008ab0:	4641      	mov	r1, r8
 8008ab2:	1851      	adds	r1, r2, r1
 8008ab4:	6339      	str	r1, [r7, #48]	; 0x30
 8008ab6:	4649      	mov	r1, r9
 8008ab8:	414b      	adcs	r3, r1
 8008aba:	637b      	str	r3, [r7, #52]	; 0x34
 8008abc:	f04f 0200 	mov.w	r2, #0
 8008ac0:	f04f 0300 	mov.w	r3, #0
 8008ac4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008ac8:	4659      	mov	r1, fp
 8008aca:	00cb      	lsls	r3, r1, #3
 8008acc:	4651      	mov	r1, sl
 8008ace:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ad2:	4651      	mov	r1, sl
 8008ad4:	00ca      	lsls	r2, r1, #3
 8008ad6:	4610      	mov	r0, r2
 8008ad8:	4619      	mov	r1, r3
 8008ada:	4603      	mov	r3, r0
 8008adc:	4642      	mov	r2, r8
 8008ade:	189b      	adds	r3, r3, r2
 8008ae0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ae4:	464b      	mov	r3, r9
 8008ae6:	460a      	mov	r2, r1
 8008ae8:	eb42 0303 	adc.w	r3, r2, r3
 8008aec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008afc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008b00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008b04:	460b      	mov	r3, r1
 8008b06:	18db      	adds	r3, r3, r3
 8008b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	eb42 0303 	adc.w	r3, r2, r3
 8008b10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008b16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008b1a:	f7f8 f8bd 	bl	8000c98 <__aeabi_uldivmod>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	460b      	mov	r3, r1
 8008b22:	4b0d      	ldr	r3, [pc, #52]	; (8008b58 <UART_SetConfig+0x2d4>)
 8008b24:	fba3 1302 	umull	r1, r3, r3, r2
 8008b28:	095b      	lsrs	r3, r3, #5
 8008b2a:	2164      	movs	r1, #100	; 0x64
 8008b2c:	fb01 f303 	mul.w	r3, r1, r3
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	00db      	lsls	r3, r3, #3
 8008b34:	3332      	adds	r3, #50	; 0x32
 8008b36:	4a08      	ldr	r2, [pc, #32]	; (8008b58 <UART_SetConfig+0x2d4>)
 8008b38:	fba2 2303 	umull	r2, r3, r2, r3
 8008b3c:	095b      	lsrs	r3, r3, #5
 8008b3e:	f003 0207 	and.w	r2, r3, #7
 8008b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4422      	add	r2, r4
 8008b4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008b4c:	e106      	b.n	8008d5c <UART_SetConfig+0x4d8>
 8008b4e:	bf00      	nop
 8008b50:	40011000 	.word	0x40011000
 8008b54:	40011400 	.word	0x40011400
 8008b58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b60:	2200      	movs	r2, #0
 8008b62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008b66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008b6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008b6e:	4642      	mov	r2, r8
 8008b70:	464b      	mov	r3, r9
 8008b72:	1891      	adds	r1, r2, r2
 8008b74:	6239      	str	r1, [r7, #32]
 8008b76:	415b      	adcs	r3, r3
 8008b78:	627b      	str	r3, [r7, #36]	; 0x24
 8008b7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b7e:	4641      	mov	r1, r8
 8008b80:	1854      	adds	r4, r2, r1
 8008b82:	4649      	mov	r1, r9
 8008b84:	eb43 0501 	adc.w	r5, r3, r1
 8008b88:	f04f 0200 	mov.w	r2, #0
 8008b8c:	f04f 0300 	mov.w	r3, #0
 8008b90:	00eb      	lsls	r3, r5, #3
 8008b92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b96:	00e2      	lsls	r2, r4, #3
 8008b98:	4614      	mov	r4, r2
 8008b9a:	461d      	mov	r5, r3
 8008b9c:	4643      	mov	r3, r8
 8008b9e:	18e3      	adds	r3, r4, r3
 8008ba0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008ba4:	464b      	mov	r3, r9
 8008ba6:	eb45 0303 	adc.w	r3, r5, r3
 8008baa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008bba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008bbe:	f04f 0200 	mov.w	r2, #0
 8008bc2:	f04f 0300 	mov.w	r3, #0
 8008bc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008bca:	4629      	mov	r1, r5
 8008bcc:	008b      	lsls	r3, r1, #2
 8008bce:	4621      	mov	r1, r4
 8008bd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bd4:	4621      	mov	r1, r4
 8008bd6:	008a      	lsls	r2, r1, #2
 8008bd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008bdc:	f7f8 f85c 	bl	8000c98 <__aeabi_uldivmod>
 8008be0:	4602      	mov	r2, r0
 8008be2:	460b      	mov	r3, r1
 8008be4:	4b60      	ldr	r3, [pc, #384]	; (8008d68 <UART_SetConfig+0x4e4>)
 8008be6:	fba3 2302 	umull	r2, r3, r3, r2
 8008bea:	095b      	lsrs	r3, r3, #5
 8008bec:	011c      	lsls	r4, r3, #4
 8008bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008bf8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008bfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008c00:	4642      	mov	r2, r8
 8008c02:	464b      	mov	r3, r9
 8008c04:	1891      	adds	r1, r2, r2
 8008c06:	61b9      	str	r1, [r7, #24]
 8008c08:	415b      	adcs	r3, r3
 8008c0a:	61fb      	str	r3, [r7, #28]
 8008c0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c10:	4641      	mov	r1, r8
 8008c12:	1851      	adds	r1, r2, r1
 8008c14:	6139      	str	r1, [r7, #16]
 8008c16:	4649      	mov	r1, r9
 8008c18:	414b      	adcs	r3, r1
 8008c1a:	617b      	str	r3, [r7, #20]
 8008c1c:	f04f 0200 	mov.w	r2, #0
 8008c20:	f04f 0300 	mov.w	r3, #0
 8008c24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c28:	4659      	mov	r1, fp
 8008c2a:	00cb      	lsls	r3, r1, #3
 8008c2c:	4651      	mov	r1, sl
 8008c2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c32:	4651      	mov	r1, sl
 8008c34:	00ca      	lsls	r2, r1, #3
 8008c36:	4610      	mov	r0, r2
 8008c38:	4619      	mov	r1, r3
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	4642      	mov	r2, r8
 8008c3e:	189b      	adds	r3, r3, r2
 8008c40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c44:	464b      	mov	r3, r9
 8008c46:	460a      	mov	r2, r1
 8008c48:	eb42 0303 	adc.w	r3, r2, r3
 8008c4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008c5c:	f04f 0200 	mov.w	r2, #0
 8008c60:	f04f 0300 	mov.w	r3, #0
 8008c64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008c68:	4649      	mov	r1, r9
 8008c6a:	008b      	lsls	r3, r1, #2
 8008c6c:	4641      	mov	r1, r8
 8008c6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c72:	4641      	mov	r1, r8
 8008c74:	008a      	lsls	r2, r1, #2
 8008c76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008c7a:	f7f8 f80d 	bl	8000c98 <__aeabi_uldivmod>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	460b      	mov	r3, r1
 8008c82:	4611      	mov	r1, r2
 8008c84:	4b38      	ldr	r3, [pc, #224]	; (8008d68 <UART_SetConfig+0x4e4>)
 8008c86:	fba3 2301 	umull	r2, r3, r3, r1
 8008c8a:	095b      	lsrs	r3, r3, #5
 8008c8c:	2264      	movs	r2, #100	; 0x64
 8008c8e:	fb02 f303 	mul.w	r3, r2, r3
 8008c92:	1acb      	subs	r3, r1, r3
 8008c94:	011b      	lsls	r3, r3, #4
 8008c96:	3332      	adds	r3, #50	; 0x32
 8008c98:	4a33      	ldr	r2, [pc, #204]	; (8008d68 <UART_SetConfig+0x4e4>)
 8008c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c9e:	095b      	lsrs	r3, r3, #5
 8008ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ca4:	441c      	add	r4, r3
 8008ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008caa:	2200      	movs	r2, #0
 8008cac:	673b      	str	r3, [r7, #112]	; 0x70
 8008cae:	677a      	str	r2, [r7, #116]	; 0x74
 8008cb0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008cb4:	4642      	mov	r2, r8
 8008cb6:	464b      	mov	r3, r9
 8008cb8:	1891      	adds	r1, r2, r2
 8008cba:	60b9      	str	r1, [r7, #8]
 8008cbc:	415b      	adcs	r3, r3
 8008cbe:	60fb      	str	r3, [r7, #12]
 8008cc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008cc4:	4641      	mov	r1, r8
 8008cc6:	1851      	adds	r1, r2, r1
 8008cc8:	6039      	str	r1, [r7, #0]
 8008cca:	4649      	mov	r1, r9
 8008ccc:	414b      	adcs	r3, r1
 8008cce:	607b      	str	r3, [r7, #4]
 8008cd0:	f04f 0200 	mov.w	r2, #0
 8008cd4:	f04f 0300 	mov.w	r3, #0
 8008cd8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008cdc:	4659      	mov	r1, fp
 8008cde:	00cb      	lsls	r3, r1, #3
 8008ce0:	4651      	mov	r1, sl
 8008ce2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ce6:	4651      	mov	r1, sl
 8008ce8:	00ca      	lsls	r2, r1, #3
 8008cea:	4610      	mov	r0, r2
 8008cec:	4619      	mov	r1, r3
 8008cee:	4603      	mov	r3, r0
 8008cf0:	4642      	mov	r2, r8
 8008cf2:	189b      	adds	r3, r3, r2
 8008cf4:	66bb      	str	r3, [r7, #104]	; 0x68
 8008cf6:	464b      	mov	r3, r9
 8008cf8:	460a      	mov	r2, r1
 8008cfa:	eb42 0303 	adc.w	r3, r2, r3
 8008cfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	663b      	str	r3, [r7, #96]	; 0x60
 8008d0a:	667a      	str	r2, [r7, #100]	; 0x64
 8008d0c:	f04f 0200 	mov.w	r2, #0
 8008d10:	f04f 0300 	mov.w	r3, #0
 8008d14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008d18:	4649      	mov	r1, r9
 8008d1a:	008b      	lsls	r3, r1, #2
 8008d1c:	4641      	mov	r1, r8
 8008d1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d22:	4641      	mov	r1, r8
 8008d24:	008a      	lsls	r2, r1, #2
 8008d26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008d2a:	f7f7 ffb5 	bl	8000c98 <__aeabi_uldivmod>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	460b      	mov	r3, r1
 8008d32:	4b0d      	ldr	r3, [pc, #52]	; (8008d68 <UART_SetConfig+0x4e4>)
 8008d34:	fba3 1302 	umull	r1, r3, r3, r2
 8008d38:	095b      	lsrs	r3, r3, #5
 8008d3a:	2164      	movs	r1, #100	; 0x64
 8008d3c:	fb01 f303 	mul.w	r3, r1, r3
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	011b      	lsls	r3, r3, #4
 8008d44:	3332      	adds	r3, #50	; 0x32
 8008d46:	4a08      	ldr	r2, [pc, #32]	; (8008d68 <UART_SetConfig+0x4e4>)
 8008d48:	fba2 2303 	umull	r2, r3, r2, r3
 8008d4c:	095b      	lsrs	r3, r3, #5
 8008d4e:	f003 020f 	and.w	r2, r3, #15
 8008d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4422      	add	r2, r4
 8008d5a:	609a      	str	r2, [r3, #8]
}
 8008d5c:	bf00      	nop
 8008d5e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008d62:	46bd      	mov	sp, r7
 8008d64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d68:	51eb851f 	.word	0x51eb851f

08008d6c <atoi>:
 8008d6c:	220a      	movs	r2, #10
 8008d6e:	2100      	movs	r1, #0
 8008d70:	f001 be42 	b.w	800a9f8 <strtol>

08008d74 <tolower>:
 8008d74:	4b03      	ldr	r3, [pc, #12]	; (8008d84 <tolower+0x10>)
 8008d76:	5c1b      	ldrb	r3, [r3, r0]
 8008d78:	f003 0303 	and.w	r3, r3, #3
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	bf08      	it	eq
 8008d80:	3020      	addeq	r0, #32
 8008d82:	4770      	bx	lr
 8008d84:	0800dd71 	.word	0x0800dd71

08008d88 <__cvt>:
 8008d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d8c:	ec55 4b10 	vmov	r4, r5, d0
 8008d90:	2d00      	cmp	r5, #0
 8008d92:	460e      	mov	r6, r1
 8008d94:	4619      	mov	r1, r3
 8008d96:	462b      	mov	r3, r5
 8008d98:	bfbb      	ittet	lt
 8008d9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008d9e:	461d      	movlt	r5, r3
 8008da0:	2300      	movge	r3, #0
 8008da2:	232d      	movlt	r3, #45	; 0x2d
 8008da4:	700b      	strb	r3, [r1, #0]
 8008da6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008da8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008dac:	4691      	mov	r9, r2
 8008dae:	f023 0820 	bic.w	r8, r3, #32
 8008db2:	bfbc      	itt	lt
 8008db4:	4622      	movlt	r2, r4
 8008db6:	4614      	movlt	r4, r2
 8008db8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008dbc:	d005      	beq.n	8008dca <__cvt+0x42>
 8008dbe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008dc2:	d100      	bne.n	8008dc6 <__cvt+0x3e>
 8008dc4:	3601      	adds	r6, #1
 8008dc6:	2102      	movs	r1, #2
 8008dc8:	e000      	b.n	8008dcc <__cvt+0x44>
 8008dca:	2103      	movs	r1, #3
 8008dcc:	ab03      	add	r3, sp, #12
 8008dce:	9301      	str	r3, [sp, #4]
 8008dd0:	ab02      	add	r3, sp, #8
 8008dd2:	9300      	str	r3, [sp, #0]
 8008dd4:	ec45 4b10 	vmov	d0, r4, r5
 8008dd8:	4653      	mov	r3, sl
 8008dda:	4632      	mov	r2, r6
 8008ddc:	f001 ff3c 	bl	800ac58 <_dtoa_r>
 8008de0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008de4:	4607      	mov	r7, r0
 8008de6:	d102      	bne.n	8008dee <__cvt+0x66>
 8008de8:	f019 0f01 	tst.w	r9, #1
 8008dec:	d022      	beq.n	8008e34 <__cvt+0xac>
 8008dee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008df2:	eb07 0906 	add.w	r9, r7, r6
 8008df6:	d110      	bne.n	8008e1a <__cvt+0x92>
 8008df8:	783b      	ldrb	r3, [r7, #0]
 8008dfa:	2b30      	cmp	r3, #48	; 0x30
 8008dfc:	d10a      	bne.n	8008e14 <__cvt+0x8c>
 8008dfe:	2200      	movs	r2, #0
 8008e00:	2300      	movs	r3, #0
 8008e02:	4620      	mov	r0, r4
 8008e04:	4629      	mov	r1, r5
 8008e06:	f7f7 fe67 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e0a:	b918      	cbnz	r0, 8008e14 <__cvt+0x8c>
 8008e0c:	f1c6 0601 	rsb	r6, r6, #1
 8008e10:	f8ca 6000 	str.w	r6, [sl]
 8008e14:	f8da 3000 	ldr.w	r3, [sl]
 8008e18:	4499      	add	r9, r3
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	4620      	mov	r0, r4
 8008e20:	4629      	mov	r1, r5
 8008e22:	f7f7 fe59 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e26:	b108      	cbz	r0, 8008e2c <__cvt+0xa4>
 8008e28:	f8cd 900c 	str.w	r9, [sp, #12]
 8008e2c:	2230      	movs	r2, #48	; 0x30
 8008e2e:	9b03      	ldr	r3, [sp, #12]
 8008e30:	454b      	cmp	r3, r9
 8008e32:	d307      	bcc.n	8008e44 <__cvt+0xbc>
 8008e34:	9b03      	ldr	r3, [sp, #12]
 8008e36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e38:	1bdb      	subs	r3, r3, r7
 8008e3a:	4638      	mov	r0, r7
 8008e3c:	6013      	str	r3, [r2, #0]
 8008e3e:	b004      	add	sp, #16
 8008e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e44:	1c59      	adds	r1, r3, #1
 8008e46:	9103      	str	r1, [sp, #12]
 8008e48:	701a      	strb	r2, [r3, #0]
 8008e4a:	e7f0      	b.n	8008e2e <__cvt+0xa6>

08008e4c <__exponent>:
 8008e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2900      	cmp	r1, #0
 8008e52:	bfb8      	it	lt
 8008e54:	4249      	neglt	r1, r1
 8008e56:	f803 2b02 	strb.w	r2, [r3], #2
 8008e5a:	bfb4      	ite	lt
 8008e5c:	222d      	movlt	r2, #45	; 0x2d
 8008e5e:	222b      	movge	r2, #43	; 0x2b
 8008e60:	2909      	cmp	r1, #9
 8008e62:	7042      	strb	r2, [r0, #1]
 8008e64:	dd2a      	ble.n	8008ebc <__exponent+0x70>
 8008e66:	f10d 0207 	add.w	r2, sp, #7
 8008e6a:	4617      	mov	r7, r2
 8008e6c:	260a      	movs	r6, #10
 8008e6e:	4694      	mov	ip, r2
 8008e70:	fb91 f5f6 	sdiv	r5, r1, r6
 8008e74:	fb06 1415 	mls	r4, r6, r5, r1
 8008e78:	3430      	adds	r4, #48	; 0x30
 8008e7a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008e7e:	460c      	mov	r4, r1
 8008e80:	2c63      	cmp	r4, #99	; 0x63
 8008e82:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8008e86:	4629      	mov	r1, r5
 8008e88:	dcf1      	bgt.n	8008e6e <__exponent+0x22>
 8008e8a:	3130      	adds	r1, #48	; 0x30
 8008e8c:	f1ac 0402 	sub.w	r4, ip, #2
 8008e90:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008e94:	1c41      	adds	r1, r0, #1
 8008e96:	4622      	mov	r2, r4
 8008e98:	42ba      	cmp	r2, r7
 8008e9a:	d30a      	bcc.n	8008eb2 <__exponent+0x66>
 8008e9c:	f10d 0209 	add.w	r2, sp, #9
 8008ea0:	eba2 020c 	sub.w	r2, r2, ip
 8008ea4:	42bc      	cmp	r4, r7
 8008ea6:	bf88      	it	hi
 8008ea8:	2200      	movhi	r2, #0
 8008eaa:	4413      	add	r3, r2
 8008eac:	1a18      	subs	r0, r3, r0
 8008eae:	b003      	add	sp, #12
 8008eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eb2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008eb6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008eba:	e7ed      	b.n	8008e98 <__exponent+0x4c>
 8008ebc:	2330      	movs	r3, #48	; 0x30
 8008ebe:	3130      	adds	r1, #48	; 0x30
 8008ec0:	7083      	strb	r3, [r0, #2]
 8008ec2:	70c1      	strb	r1, [r0, #3]
 8008ec4:	1d03      	adds	r3, r0, #4
 8008ec6:	e7f1      	b.n	8008eac <__exponent+0x60>

08008ec8 <_printf_float>:
 8008ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ecc:	ed2d 8b02 	vpush	{d8}
 8008ed0:	b08d      	sub	sp, #52	; 0x34
 8008ed2:	460c      	mov	r4, r1
 8008ed4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008ed8:	4616      	mov	r6, r2
 8008eda:	461f      	mov	r7, r3
 8008edc:	4605      	mov	r5, r0
 8008ede:	f001 fde1 	bl	800aaa4 <_localeconv_r>
 8008ee2:	f8d0 a000 	ldr.w	sl, [r0]
 8008ee6:	4650      	mov	r0, sl
 8008ee8:	f7f7 f9ca 	bl	8000280 <strlen>
 8008eec:	2300      	movs	r3, #0
 8008eee:	930a      	str	r3, [sp, #40]	; 0x28
 8008ef0:	6823      	ldr	r3, [r4, #0]
 8008ef2:	9305      	str	r3, [sp, #20]
 8008ef4:	f8d8 3000 	ldr.w	r3, [r8]
 8008ef8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008efc:	3307      	adds	r3, #7
 8008efe:	f023 0307 	bic.w	r3, r3, #7
 8008f02:	f103 0208 	add.w	r2, r3, #8
 8008f06:	f8c8 2000 	str.w	r2, [r8]
 8008f0a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008f12:	9307      	str	r3, [sp, #28]
 8008f14:	f8cd 8018 	str.w	r8, [sp, #24]
 8008f18:	ee08 0a10 	vmov	s16, r0
 8008f1c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008f20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f24:	4b9e      	ldr	r3, [pc, #632]	; (80091a0 <_printf_float+0x2d8>)
 8008f26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f2a:	f7f7 fe07 	bl	8000b3c <__aeabi_dcmpun>
 8008f2e:	bb88      	cbnz	r0, 8008f94 <_printf_float+0xcc>
 8008f30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f34:	4b9a      	ldr	r3, [pc, #616]	; (80091a0 <_printf_float+0x2d8>)
 8008f36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f3a:	f7f7 fde1 	bl	8000b00 <__aeabi_dcmple>
 8008f3e:	bb48      	cbnz	r0, 8008f94 <_printf_float+0xcc>
 8008f40:	2200      	movs	r2, #0
 8008f42:	2300      	movs	r3, #0
 8008f44:	4640      	mov	r0, r8
 8008f46:	4649      	mov	r1, r9
 8008f48:	f7f7 fdd0 	bl	8000aec <__aeabi_dcmplt>
 8008f4c:	b110      	cbz	r0, 8008f54 <_printf_float+0x8c>
 8008f4e:	232d      	movs	r3, #45	; 0x2d
 8008f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f54:	4a93      	ldr	r2, [pc, #588]	; (80091a4 <_printf_float+0x2dc>)
 8008f56:	4b94      	ldr	r3, [pc, #592]	; (80091a8 <_printf_float+0x2e0>)
 8008f58:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008f5c:	bf94      	ite	ls
 8008f5e:	4690      	movls	r8, r2
 8008f60:	4698      	movhi	r8, r3
 8008f62:	2303      	movs	r3, #3
 8008f64:	6123      	str	r3, [r4, #16]
 8008f66:	9b05      	ldr	r3, [sp, #20]
 8008f68:	f023 0304 	bic.w	r3, r3, #4
 8008f6c:	6023      	str	r3, [r4, #0]
 8008f6e:	f04f 0900 	mov.w	r9, #0
 8008f72:	9700      	str	r7, [sp, #0]
 8008f74:	4633      	mov	r3, r6
 8008f76:	aa0b      	add	r2, sp, #44	; 0x2c
 8008f78:	4621      	mov	r1, r4
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	f000 f9da 	bl	8009334 <_printf_common>
 8008f80:	3001      	adds	r0, #1
 8008f82:	f040 8090 	bne.w	80090a6 <_printf_float+0x1de>
 8008f86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f8a:	b00d      	add	sp, #52	; 0x34
 8008f8c:	ecbd 8b02 	vpop	{d8}
 8008f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f94:	4642      	mov	r2, r8
 8008f96:	464b      	mov	r3, r9
 8008f98:	4640      	mov	r0, r8
 8008f9a:	4649      	mov	r1, r9
 8008f9c:	f7f7 fdce 	bl	8000b3c <__aeabi_dcmpun>
 8008fa0:	b140      	cbz	r0, 8008fb4 <_printf_float+0xec>
 8008fa2:	464b      	mov	r3, r9
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	bfbc      	itt	lt
 8008fa8:	232d      	movlt	r3, #45	; 0x2d
 8008faa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008fae:	4a7f      	ldr	r2, [pc, #508]	; (80091ac <_printf_float+0x2e4>)
 8008fb0:	4b7f      	ldr	r3, [pc, #508]	; (80091b0 <_printf_float+0x2e8>)
 8008fb2:	e7d1      	b.n	8008f58 <_printf_float+0x90>
 8008fb4:	6863      	ldr	r3, [r4, #4]
 8008fb6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008fba:	9206      	str	r2, [sp, #24]
 8008fbc:	1c5a      	adds	r2, r3, #1
 8008fbe:	d13f      	bne.n	8009040 <_printf_float+0x178>
 8008fc0:	2306      	movs	r3, #6
 8008fc2:	6063      	str	r3, [r4, #4]
 8008fc4:	9b05      	ldr	r3, [sp, #20]
 8008fc6:	6861      	ldr	r1, [r4, #4]
 8008fc8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008fcc:	2300      	movs	r3, #0
 8008fce:	9303      	str	r3, [sp, #12]
 8008fd0:	ab0a      	add	r3, sp, #40	; 0x28
 8008fd2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008fd6:	ab09      	add	r3, sp, #36	; 0x24
 8008fd8:	ec49 8b10 	vmov	d0, r8, r9
 8008fdc:	9300      	str	r3, [sp, #0]
 8008fde:	6022      	str	r2, [r4, #0]
 8008fe0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008fe4:	4628      	mov	r0, r5
 8008fe6:	f7ff fecf 	bl	8008d88 <__cvt>
 8008fea:	9b06      	ldr	r3, [sp, #24]
 8008fec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fee:	2b47      	cmp	r3, #71	; 0x47
 8008ff0:	4680      	mov	r8, r0
 8008ff2:	d108      	bne.n	8009006 <_printf_float+0x13e>
 8008ff4:	1cc8      	adds	r0, r1, #3
 8008ff6:	db02      	blt.n	8008ffe <_printf_float+0x136>
 8008ff8:	6863      	ldr	r3, [r4, #4]
 8008ffa:	4299      	cmp	r1, r3
 8008ffc:	dd41      	ble.n	8009082 <_printf_float+0x1ba>
 8008ffe:	f1ab 0302 	sub.w	r3, fp, #2
 8009002:	fa5f fb83 	uxtb.w	fp, r3
 8009006:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800900a:	d820      	bhi.n	800904e <_printf_float+0x186>
 800900c:	3901      	subs	r1, #1
 800900e:	465a      	mov	r2, fp
 8009010:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009014:	9109      	str	r1, [sp, #36]	; 0x24
 8009016:	f7ff ff19 	bl	8008e4c <__exponent>
 800901a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800901c:	1813      	adds	r3, r2, r0
 800901e:	2a01      	cmp	r2, #1
 8009020:	4681      	mov	r9, r0
 8009022:	6123      	str	r3, [r4, #16]
 8009024:	dc02      	bgt.n	800902c <_printf_float+0x164>
 8009026:	6822      	ldr	r2, [r4, #0]
 8009028:	07d2      	lsls	r2, r2, #31
 800902a:	d501      	bpl.n	8009030 <_printf_float+0x168>
 800902c:	3301      	adds	r3, #1
 800902e:	6123      	str	r3, [r4, #16]
 8009030:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009034:	2b00      	cmp	r3, #0
 8009036:	d09c      	beq.n	8008f72 <_printf_float+0xaa>
 8009038:	232d      	movs	r3, #45	; 0x2d
 800903a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800903e:	e798      	b.n	8008f72 <_printf_float+0xaa>
 8009040:	9a06      	ldr	r2, [sp, #24]
 8009042:	2a47      	cmp	r2, #71	; 0x47
 8009044:	d1be      	bne.n	8008fc4 <_printf_float+0xfc>
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1bc      	bne.n	8008fc4 <_printf_float+0xfc>
 800904a:	2301      	movs	r3, #1
 800904c:	e7b9      	b.n	8008fc2 <_printf_float+0xfa>
 800904e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009052:	d118      	bne.n	8009086 <_printf_float+0x1be>
 8009054:	2900      	cmp	r1, #0
 8009056:	6863      	ldr	r3, [r4, #4]
 8009058:	dd0b      	ble.n	8009072 <_printf_float+0x1aa>
 800905a:	6121      	str	r1, [r4, #16]
 800905c:	b913      	cbnz	r3, 8009064 <_printf_float+0x19c>
 800905e:	6822      	ldr	r2, [r4, #0]
 8009060:	07d0      	lsls	r0, r2, #31
 8009062:	d502      	bpl.n	800906a <_printf_float+0x1a2>
 8009064:	3301      	adds	r3, #1
 8009066:	440b      	add	r3, r1
 8009068:	6123      	str	r3, [r4, #16]
 800906a:	65a1      	str	r1, [r4, #88]	; 0x58
 800906c:	f04f 0900 	mov.w	r9, #0
 8009070:	e7de      	b.n	8009030 <_printf_float+0x168>
 8009072:	b913      	cbnz	r3, 800907a <_printf_float+0x1b2>
 8009074:	6822      	ldr	r2, [r4, #0]
 8009076:	07d2      	lsls	r2, r2, #31
 8009078:	d501      	bpl.n	800907e <_printf_float+0x1b6>
 800907a:	3302      	adds	r3, #2
 800907c:	e7f4      	b.n	8009068 <_printf_float+0x1a0>
 800907e:	2301      	movs	r3, #1
 8009080:	e7f2      	b.n	8009068 <_printf_float+0x1a0>
 8009082:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009088:	4299      	cmp	r1, r3
 800908a:	db05      	blt.n	8009098 <_printf_float+0x1d0>
 800908c:	6823      	ldr	r3, [r4, #0]
 800908e:	6121      	str	r1, [r4, #16]
 8009090:	07d8      	lsls	r0, r3, #31
 8009092:	d5ea      	bpl.n	800906a <_printf_float+0x1a2>
 8009094:	1c4b      	adds	r3, r1, #1
 8009096:	e7e7      	b.n	8009068 <_printf_float+0x1a0>
 8009098:	2900      	cmp	r1, #0
 800909a:	bfd4      	ite	le
 800909c:	f1c1 0202 	rsble	r2, r1, #2
 80090a0:	2201      	movgt	r2, #1
 80090a2:	4413      	add	r3, r2
 80090a4:	e7e0      	b.n	8009068 <_printf_float+0x1a0>
 80090a6:	6823      	ldr	r3, [r4, #0]
 80090a8:	055a      	lsls	r2, r3, #21
 80090aa:	d407      	bmi.n	80090bc <_printf_float+0x1f4>
 80090ac:	6923      	ldr	r3, [r4, #16]
 80090ae:	4642      	mov	r2, r8
 80090b0:	4631      	mov	r1, r6
 80090b2:	4628      	mov	r0, r5
 80090b4:	47b8      	blx	r7
 80090b6:	3001      	adds	r0, #1
 80090b8:	d12c      	bne.n	8009114 <_printf_float+0x24c>
 80090ba:	e764      	b.n	8008f86 <_printf_float+0xbe>
 80090bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80090c0:	f240 80e0 	bls.w	8009284 <_printf_float+0x3bc>
 80090c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80090c8:	2200      	movs	r2, #0
 80090ca:	2300      	movs	r3, #0
 80090cc:	f7f7 fd04 	bl	8000ad8 <__aeabi_dcmpeq>
 80090d0:	2800      	cmp	r0, #0
 80090d2:	d034      	beq.n	800913e <_printf_float+0x276>
 80090d4:	4a37      	ldr	r2, [pc, #220]	; (80091b4 <_printf_float+0x2ec>)
 80090d6:	2301      	movs	r3, #1
 80090d8:	4631      	mov	r1, r6
 80090da:	4628      	mov	r0, r5
 80090dc:	47b8      	blx	r7
 80090de:	3001      	adds	r0, #1
 80090e0:	f43f af51 	beq.w	8008f86 <_printf_float+0xbe>
 80090e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090e8:	429a      	cmp	r2, r3
 80090ea:	db02      	blt.n	80090f2 <_printf_float+0x22a>
 80090ec:	6823      	ldr	r3, [r4, #0]
 80090ee:	07d8      	lsls	r0, r3, #31
 80090f0:	d510      	bpl.n	8009114 <_printf_float+0x24c>
 80090f2:	ee18 3a10 	vmov	r3, s16
 80090f6:	4652      	mov	r2, sl
 80090f8:	4631      	mov	r1, r6
 80090fa:	4628      	mov	r0, r5
 80090fc:	47b8      	blx	r7
 80090fe:	3001      	adds	r0, #1
 8009100:	f43f af41 	beq.w	8008f86 <_printf_float+0xbe>
 8009104:	f04f 0800 	mov.w	r8, #0
 8009108:	f104 091a 	add.w	r9, r4, #26
 800910c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800910e:	3b01      	subs	r3, #1
 8009110:	4543      	cmp	r3, r8
 8009112:	dc09      	bgt.n	8009128 <_printf_float+0x260>
 8009114:	6823      	ldr	r3, [r4, #0]
 8009116:	079b      	lsls	r3, r3, #30
 8009118:	f100 8107 	bmi.w	800932a <_printf_float+0x462>
 800911c:	68e0      	ldr	r0, [r4, #12]
 800911e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009120:	4298      	cmp	r0, r3
 8009122:	bfb8      	it	lt
 8009124:	4618      	movlt	r0, r3
 8009126:	e730      	b.n	8008f8a <_printf_float+0xc2>
 8009128:	2301      	movs	r3, #1
 800912a:	464a      	mov	r2, r9
 800912c:	4631      	mov	r1, r6
 800912e:	4628      	mov	r0, r5
 8009130:	47b8      	blx	r7
 8009132:	3001      	adds	r0, #1
 8009134:	f43f af27 	beq.w	8008f86 <_printf_float+0xbe>
 8009138:	f108 0801 	add.w	r8, r8, #1
 800913c:	e7e6      	b.n	800910c <_printf_float+0x244>
 800913e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009140:	2b00      	cmp	r3, #0
 8009142:	dc39      	bgt.n	80091b8 <_printf_float+0x2f0>
 8009144:	4a1b      	ldr	r2, [pc, #108]	; (80091b4 <_printf_float+0x2ec>)
 8009146:	2301      	movs	r3, #1
 8009148:	4631      	mov	r1, r6
 800914a:	4628      	mov	r0, r5
 800914c:	47b8      	blx	r7
 800914e:	3001      	adds	r0, #1
 8009150:	f43f af19 	beq.w	8008f86 <_printf_float+0xbe>
 8009154:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009158:	4313      	orrs	r3, r2
 800915a:	d102      	bne.n	8009162 <_printf_float+0x29a>
 800915c:	6823      	ldr	r3, [r4, #0]
 800915e:	07d9      	lsls	r1, r3, #31
 8009160:	d5d8      	bpl.n	8009114 <_printf_float+0x24c>
 8009162:	ee18 3a10 	vmov	r3, s16
 8009166:	4652      	mov	r2, sl
 8009168:	4631      	mov	r1, r6
 800916a:	4628      	mov	r0, r5
 800916c:	47b8      	blx	r7
 800916e:	3001      	adds	r0, #1
 8009170:	f43f af09 	beq.w	8008f86 <_printf_float+0xbe>
 8009174:	f04f 0900 	mov.w	r9, #0
 8009178:	f104 0a1a 	add.w	sl, r4, #26
 800917c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800917e:	425b      	negs	r3, r3
 8009180:	454b      	cmp	r3, r9
 8009182:	dc01      	bgt.n	8009188 <_printf_float+0x2c0>
 8009184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009186:	e792      	b.n	80090ae <_printf_float+0x1e6>
 8009188:	2301      	movs	r3, #1
 800918a:	4652      	mov	r2, sl
 800918c:	4631      	mov	r1, r6
 800918e:	4628      	mov	r0, r5
 8009190:	47b8      	blx	r7
 8009192:	3001      	adds	r0, #1
 8009194:	f43f aef7 	beq.w	8008f86 <_printf_float+0xbe>
 8009198:	f109 0901 	add.w	r9, r9, #1
 800919c:	e7ee      	b.n	800917c <_printf_float+0x2b4>
 800919e:	bf00      	nop
 80091a0:	7fefffff 	.word	0x7fefffff
 80091a4:	0800dcd8 	.word	0x0800dcd8
 80091a8:	0800dcdc 	.word	0x0800dcdc
 80091ac:	0800dce0 	.word	0x0800dce0
 80091b0:	0800dce4 	.word	0x0800dce4
 80091b4:	0800dce8 	.word	0x0800dce8
 80091b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80091bc:	429a      	cmp	r2, r3
 80091be:	bfa8      	it	ge
 80091c0:	461a      	movge	r2, r3
 80091c2:	2a00      	cmp	r2, #0
 80091c4:	4691      	mov	r9, r2
 80091c6:	dc37      	bgt.n	8009238 <_printf_float+0x370>
 80091c8:	f04f 0b00 	mov.w	fp, #0
 80091cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091d0:	f104 021a 	add.w	r2, r4, #26
 80091d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80091d6:	9305      	str	r3, [sp, #20]
 80091d8:	eba3 0309 	sub.w	r3, r3, r9
 80091dc:	455b      	cmp	r3, fp
 80091de:	dc33      	bgt.n	8009248 <_printf_float+0x380>
 80091e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091e4:	429a      	cmp	r2, r3
 80091e6:	db3b      	blt.n	8009260 <_printf_float+0x398>
 80091e8:	6823      	ldr	r3, [r4, #0]
 80091ea:	07da      	lsls	r2, r3, #31
 80091ec:	d438      	bmi.n	8009260 <_printf_float+0x398>
 80091ee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80091f2:	eba2 0903 	sub.w	r9, r2, r3
 80091f6:	9b05      	ldr	r3, [sp, #20]
 80091f8:	1ad2      	subs	r2, r2, r3
 80091fa:	4591      	cmp	r9, r2
 80091fc:	bfa8      	it	ge
 80091fe:	4691      	movge	r9, r2
 8009200:	f1b9 0f00 	cmp.w	r9, #0
 8009204:	dc35      	bgt.n	8009272 <_printf_float+0x3aa>
 8009206:	f04f 0800 	mov.w	r8, #0
 800920a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800920e:	f104 0a1a 	add.w	sl, r4, #26
 8009212:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009216:	1a9b      	subs	r3, r3, r2
 8009218:	eba3 0309 	sub.w	r3, r3, r9
 800921c:	4543      	cmp	r3, r8
 800921e:	f77f af79 	ble.w	8009114 <_printf_float+0x24c>
 8009222:	2301      	movs	r3, #1
 8009224:	4652      	mov	r2, sl
 8009226:	4631      	mov	r1, r6
 8009228:	4628      	mov	r0, r5
 800922a:	47b8      	blx	r7
 800922c:	3001      	adds	r0, #1
 800922e:	f43f aeaa 	beq.w	8008f86 <_printf_float+0xbe>
 8009232:	f108 0801 	add.w	r8, r8, #1
 8009236:	e7ec      	b.n	8009212 <_printf_float+0x34a>
 8009238:	4613      	mov	r3, r2
 800923a:	4631      	mov	r1, r6
 800923c:	4642      	mov	r2, r8
 800923e:	4628      	mov	r0, r5
 8009240:	47b8      	blx	r7
 8009242:	3001      	adds	r0, #1
 8009244:	d1c0      	bne.n	80091c8 <_printf_float+0x300>
 8009246:	e69e      	b.n	8008f86 <_printf_float+0xbe>
 8009248:	2301      	movs	r3, #1
 800924a:	4631      	mov	r1, r6
 800924c:	4628      	mov	r0, r5
 800924e:	9205      	str	r2, [sp, #20]
 8009250:	47b8      	blx	r7
 8009252:	3001      	adds	r0, #1
 8009254:	f43f ae97 	beq.w	8008f86 <_printf_float+0xbe>
 8009258:	9a05      	ldr	r2, [sp, #20]
 800925a:	f10b 0b01 	add.w	fp, fp, #1
 800925e:	e7b9      	b.n	80091d4 <_printf_float+0x30c>
 8009260:	ee18 3a10 	vmov	r3, s16
 8009264:	4652      	mov	r2, sl
 8009266:	4631      	mov	r1, r6
 8009268:	4628      	mov	r0, r5
 800926a:	47b8      	blx	r7
 800926c:	3001      	adds	r0, #1
 800926e:	d1be      	bne.n	80091ee <_printf_float+0x326>
 8009270:	e689      	b.n	8008f86 <_printf_float+0xbe>
 8009272:	9a05      	ldr	r2, [sp, #20]
 8009274:	464b      	mov	r3, r9
 8009276:	4442      	add	r2, r8
 8009278:	4631      	mov	r1, r6
 800927a:	4628      	mov	r0, r5
 800927c:	47b8      	blx	r7
 800927e:	3001      	adds	r0, #1
 8009280:	d1c1      	bne.n	8009206 <_printf_float+0x33e>
 8009282:	e680      	b.n	8008f86 <_printf_float+0xbe>
 8009284:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009286:	2a01      	cmp	r2, #1
 8009288:	dc01      	bgt.n	800928e <_printf_float+0x3c6>
 800928a:	07db      	lsls	r3, r3, #31
 800928c:	d53a      	bpl.n	8009304 <_printf_float+0x43c>
 800928e:	2301      	movs	r3, #1
 8009290:	4642      	mov	r2, r8
 8009292:	4631      	mov	r1, r6
 8009294:	4628      	mov	r0, r5
 8009296:	47b8      	blx	r7
 8009298:	3001      	adds	r0, #1
 800929a:	f43f ae74 	beq.w	8008f86 <_printf_float+0xbe>
 800929e:	ee18 3a10 	vmov	r3, s16
 80092a2:	4652      	mov	r2, sl
 80092a4:	4631      	mov	r1, r6
 80092a6:	4628      	mov	r0, r5
 80092a8:	47b8      	blx	r7
 80092aa:	3001      	adds	r0, #1
 80092ac:	f43f ae6b 	beq.w	8008f86 <_printf_float+0xbe>
 80092b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80092b4:	2200      	movs	r2, #0
 80092b6:	2300      	movs	r3, #0
 80092b8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80092bc:	f7f7 fc0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80092c0:	b9d8      	cbnz	r0, 80092fa <_printf_float+0x432>
 80092c2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80092c6:	f108 0201 	add.w	r2, r8, #1
 80092ca:	4631      	mov	r1, r6
 80092cc:	4628      	mov	r0, r5
 80092ce:	47b8      	blx	r7
 80092d0:	3001      	adds	r0, #1
 80092d2:	d10e      	bne.n	80092f2 <_printf_float+0x42a>
 80092d4:	e657      	b.n	8008f86 <_printf_float+0xbe>
 80092d6:	2301      	movs	r3, #1
 80092d8:	4652      	mov	r2, sl
 80092da:	4631      	mov	r1, r6
 80092dc:	4628      	mov	r0, r5
 80092de:	47b8      	blx	r7
 80092e0:	3001      	adds	r0, #1
 80092e2:	f43f ae50 	beq.w	8008f86 <_printf_float+0xbe>
 80092e6:	f108 0801 	add.w	r8, r8, #1
 80092ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092ec:	3b01      	subs	r3, #1
 80092ee:	4543      	cmp	r3, r8
 80092f0:	dcf1      	bgt.n	80092d6 <_printf_float+0x40e>
 80092f2:	464b      	mov	r3, r9
 80092f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80092f8:	e6da      	b.n	80090b0 <_printf_float+0x1e8>
 80092fa:	f04f 0800 	mov.w	r8, #0
 80092fe:	f104 0a1a 	add.w	sl, r4, #26
 8009302:	e7f2      	b.n	80092ea <_printf_float+0x422>
 8009304:	2301      	movs	r3, #1
 8009306:	4642      	mov	r2, r8
 8009308:	e7df      	b.n	80092ca <_printf_float+0x402>
 800930a:	2301      	movs	r3, #1
 800930c:	464a      	mov	r2, r9
 800930e:	4631      	mov	r1, r6
 8009310:	4628      	mov	r0, r5
 8009312:	47b8      	blx	r7
 8009314:	3001      	adds	r0, #1
 8009316:	f43f ae36 	beq.w	8008f86 <_printf_float+0xbe>
 800931a:	f108 0801 	add.w	r8, r8, #1
 800931e:	68e3      	ldr	r3, [r4, #12]
 8009320:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009322:	1a5b      	subs	r3, r3, r1
 8009324:	4543      	cmp	r3, r8
 8009326:	dcf0      	bgt.n	800930a <_printf_float+0x442>
 8009328:	e6f8      	b.n	800911c <_printf_float+0x254>
 800932a:	f04f 0800 	mov.w	r8, #0
 800932e:	f104 0919 	add.w	r9, r4, #25
 8009332:	e7f4      	b.n	800931e <_printf_float+0x456>

08009334 <_printf_common>:
 8009334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009338:	4616      	mov	r6, r2
 800933a:	4699      	mov	r9, r3
 800933c:	688a      	ldr	r2, [r1, #8]
 800933e:	690b      	ldr	r3, [r1, #16]
 8009340:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009344:	4293      	cmp	r3, r2
 8009346:	bfb8      	it	lt
 8009348:	4613      	movlt	r3, r2
 800934a:	6033      	str	r3, [r6, #0]
 800934c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009350:	4607      	mov	r7, r0
 8009352:	460c      	mov	r4, r1
 8009354:	b10a      	cbz	r2, 800935a <_printf_common+0x26>
 8009356:	3301      	adds	r3, #1
 8009358:	6033      	str	r3, [r6, #0]
 800935a:	6823      	ldr	r3, [r4, #0]
 800935c:	0699      	lsls	r1, r3, #26
 800935e:	bf42      	ittt	mi
 8009360:	6833      	ldrmi	r3, [r6, #0]
 8009362:	3302      	addmi	r3, #2
 8009364:	6033      	strmi	r3, [r6, #0]
 8009366:	6825      	ldr	r5, [r4, #0]
 8009368:	f015 0506 	ands.w	r5, r5, #6
 800936c:	d106      	bne.n	800937c <_printf_common+0x48>
 800936e:	f104 0a19 	add.w	sl, r4, #25
 8009372:	68e3      	ldr	r3, [r4, #12]
 8009374:	6832      	ldr	r2, [r6, #0]
 8009376:	1a9b      	subs	r3, r3, r2
 8009378:	42ab      	cmp	r3, r5
 800937a:	dc26      	bgt.n	80093ca <_printf_common+0x96>
 800937c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009380:	1e13      	subs	r3, r2, #0
 8009382:	6822      	ldr	r2, [r4, #0]
 8009384:	bf18      	it	ne
 8009386:	2301      	movne	r3, #1
 8009388:	0692      	lsls	r2, r2, #26
 800938a:	d42b      	bmi.n	80093e4 <_printf_common+0xb0>
 800938c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009390:	4649      	mov	r1, r9
 8009392:	4638      	mov	r0, r7
 8009394:	47c0      	blx	r8
 8009396:	3001      	adds	r0, #1
 8009398:	d01e      	beq.n	80093d8 <_printf_common+0xa4>
 800939a:	6823      	ldr	r3, [r4, #0]
 800939c:	6922      	ldr	r2, [r4, #16]
 800939e:	f003 0306 	and.w	r3, r3, #6
 80093a2:	2b04      	cmp	r3, #4
 80093a4:	bf02      	ittt	eq
 80093a6:	68e5      	ldreq	r5, [r4, #12]
 80093a8:	6833      	ldreq	r3, [r6, #0]
 80093aa:	1aed      	subeq	r5, r5, r3
 80093ac:	68a3      	ldr	r3, [r4, #8]
 80093ae:	bf0c      	ite	eq
 80093b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093b4:	2500      	movne	r5, #0
 80093b6:	4293      	cmp	r3, r2
 80093b8:	bfc4      	itt	gt
 80093ba:	1a9b      	subgt	r3, r3, r2
 80093bc:	18ed      	addgt	r5, r5, r3
 80093be:	2600      	movs	r6, #0
 80093c0:	341a      	adds	r4, #26
 80093c2:	42b5      	cmp	r5, r6
 80093c4:	d11a      	bne.n	80093fc <_printf_common+0xc8>
 80093c6:	2000      	movs	r0, #0
 80093c8:	e008      	b.n	80093dc <_printf_common+0xa8>
 80093ca:	2301      	movs	r3, #1
 80093cc:	4652      	mov	r2, sl
 80093ce:	4649      	mov	r1, r9
 80093d0:	4638      	mov	r0, r7
 80093d2:	47c0      	blx	r8
 80093d4:	3001      	adds	r0, #1
 80093d6:	d103      	bne.n	80093e0 <_printf_common+0xac>
 80093d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093e0:	3501      	adds	r5, #1
 80093e2:	e7c6      	b.n	8009372 <_printf_common+0x3e>
 80093e4:	18e1      	adds	r1, r4, r3
 80093e6:	1c5a      	adds	r2, r3, #1
 80093e8:	2030      	movs	r0, #48	; 0x30
 80093ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093ee:	4422      	add	r2, r4
 80093f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093f8:	3302      	adds	r3, #2
 80093fa:	e7c7      	b.n	800938c <_printf_common+0x58>
 80093fc:	2301      	movs	r3, #1
 80093fe:	4622      	mov	r2, r4
 8009400:	4649      	mov	r1, r9
 8009402:	4638      	mov	r0, r7
 8009404:	47c0      	blx	r8
 8009406:	3001      	adds	r0, #1
 8009408:	d0e6      	beq.n	80093d8 <_printf_common+0xa4>
 800940a:	3601      	adds	r6, #1
 800940c:	e7d9      	b.n	80093c2 <_printf_common+0x8e>
	...

08009410 <_printf_i>:
 8009410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009414:	7e0f      	ldrb	r7, [r1, #24]
 8009416:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009418:	2f78      	cmp	r7, #120	; 0x78
 800941a:	4691      	mov	r9, r2
 800941c:	4680      	mov	r8, r0
 800941e:	460c      	mov	r4, r1
 8009420:	469a      	mov	sl, r3
 8009422:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009426:	d807      	bhi.n	8009438 <_printf_i+0x28>
 8009428:	2f62      	cmp	r7, #98	; 0x62
 800942a:	d80a      	bhi.n	8009442 <_printf_i+0x32>
 800942c:	2f00      	cmp	r7, #0
 800942e:	f000 80d4 	beq.w	80095da <_printf_i+0x1ca>
 8009432:	2f58      	cmp	r7, #88	; 0x58
 8009434:	f000 80c0 	beq.w	80095b8 <_printf_i+0x1a8>
 8009438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800943c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009440:	e03a      	b.n	80094b8 <_printf_i+0xa8>
 8009442:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009446:	2b15      	cmp	r3, #21
 8009448:	d8f6      	bhi.n	8009438 <_printf_i+0x28>
 800944a:	a101      	add	r1, pc, #4	; (adr r1, 8009450 <_printf_i+0x40>)
 800944c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009450:	080094a9 	.word	0x080094a9
 8009454:	080094bd 	.word	0x080094bd
 8009458:	08009439 	.word	0x08009439
 800945c:	08009439 	.word	0x08009439
 8009460:	08009439 	.word	0x08009439
 8009464:	08009439 	.word	0x08009439
 8009468:	080094bd 	.word	0x080094bd
 800946c:	08009439 	.word	0x08009439
 8009470:	08009439 	.word	0x08009439
 8009474:	08009439 	.word	0x08009439
 8009478:	08009439 	.word	0x08009439
 800947c:	080095c1 	.word	0x080095c1
 8009480:	080094e9 	.word	0x080094e9
 8009484:	0800957b 	.word	0x0800957b
 8009488:	08009439 	.word	0x08009439
 800948c:	08009439 	.word	0x08009439
 8009490:	080095e3 	.word	0x080095e3
 8009494:	08009439 	.word	0x08009439
 8009498:	080094e9 	.word	0x080094e9
 800949c:	08009439 	.word	0x08009439
 80094a0:	08009439 	.word	0x08009439
 80094a4:	08009583 	.word	0x08009583
 80094a8:	682b      	ldr	r3, [r5, #0]
 80094aa:	1d1a      	adds	r2, r3, #4
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	602a      	str	r2, [r5, #0]
 80094b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094b8:	2301      	movs	r3, #1
 80094ba:	e09f      	b.n	80095fc <_printf_i+0x1ec>
 80094bc:	6820      	ldr	r0, [r4, #0]
 80094be:	682b      	ldr	r3, [r5, #0]
 80094c0:	0607      	lsls	r7, r0, #24
 80094c2:	f103 0104 	add.w	r1, r3, #4
 80094c6:	6029      	str	r1, [r5, #0]
 80094c8:	d501      	bpl.n	80094ce <_printf_i+0xbe>
 80094ca:	681e      	ldr	r6, [r3, #0]
 80094cc:	e003      	b.n	80094d6 <_printf_i+0xc6>
 80094ce:	0646      	lsls	r6, r0, #25
 80094d0:	d5fb      	bpl.n	80094ca <_printf_i+0xba>
 80094d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80094d6:	2e00      	cmp	r6, #0
 80094d8:	da03      	bge.n	80094e2 <_printf_i+0xd2>
 80094da:	232d      	movs	r3, #45	; 0x2d
 80094dc:	4276      	negs	r6, r6
 80094de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094e2:	485a      	ldr	r0, [pc, #360]	; (800964c <_printf_i+0x23c>)
 80094e4:	230a      	movs	r3, #10
 80094e6:	e012      	b.n	800950e <_printf_i+0xfe>
 80094e8:	682b      	ldr	r3, [r5, #0]
 80094ea:	6820      	ldr	r0, [r4, #0]
 80094ec:	1d19      	adds	r1, r3, #4
 80094ee:	6029      	str	r1, [r5, #0]
 80094f0:	0605      	lsls	r5, r0, #24
 80094f2:	d501      	bpl.n	80094f8 <_printf_i+0xe8>
 80094f4:	681e      	ldr	r6, [r3, #0]
 80094f6:	e002      	b.n	80094fe <_printf_i+0xee>
 80094f8:	0641      	lsls	r1, r0, #25
 80094fa:	d5fb      	bpl.n	80094f4 <_printf_i+0xe4>
 80094fc:	881e      	ldrh	r6, [r3, #0]
 80094fe:	4853      	ldr	r0, [pc, #332]	; (800964c <_printf_i+0x23c>)
 8009500:	2f6f      	cmp	r7, #111	; 0x6f
 8009502:	bf0c      	ite	eq
 8009504:	2308      	moveq	r3, #8
 8009506:	230a      	movne	r3, #10
 8009508:	2100      	movs	r1, #0
 800950a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800950e:	6865      	ldr	r5, [r4, #4]
 8009510:	60a5      	str	r5, [r4, #8]
 8009512:	2d00      	cmp	r5, #0
 8009514:	bfa2      	ittt	ge
 8009516:	6821      	ldrge	r1, [r4, #0]
 8009518:	f021 0104 	bicge.w	r1, r1, #4
 800951c:	6021      	strge	r1, [r4, #0]
 800951e:	b90e      	cbnz	r6, 8009524 <_printf_i+0x114>
 8009520:	2d00      	cmp	r5, #0
 8009522:	d04b      	beq.n	80095bc <_printf_i+0x1ac>
 8009524:	4615      	mov	r5, r2
 8009526:	fbb6 f1f3 	udiv	r1, r6, r3
 800952a:	fb03 6711 	mls	r7, r3, r1, r6
 800952e:	5dc7      	ldrb	r7, [r0, r7]
 8009530:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009534:	4637      	mov	r7, r6
 8009536:	42bb      	cmp	r3, r7
 8009538:	460e      	mov	r6, r1
 800953a:	d9f4      	bls.n	8009526 <_printf_i+0x116>
 800953c:	2b08      	cmp	r3, #8
 800953e:	d10b      	bne.n	8009558 <_printf_i+0x148>
 8009540:	6823      	ldr	r3, [r4, #0]
 8009542:	07de      	lsls	r6, r3, #31
 8009544:	d508      	bpl.n	8009558 <_printf_i+0x148>
 8009546:	6923      	ldr	r3, [r4, #16]
 8009548:	6861      	ldr	r1, [r4, #4]
 800954a:	4299      	cmp	r1, r3
 800954c:	bfde      	ittt	le
 800954e:	2330      	movle	r3, #48	; 0x30
 8009550:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009554:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009558:	1b52      	subs	r2, r2, r5
 800955a:	6122      	str	r2, [r4, #16]
 800955c:	f8cd a000 	str.w	sl, [sp]
 8009560:	464b      	mov	r3, r9
 8009562:	aa03      	add	r2, sp, #12
 8009564:	4621      	mov	r1, r4
 8009566:	4640      	mov	r0, r8
 8009568:	f7ff fee4 	bl	8009334 <_printf_common>
 800956c:	3001      	adds	r0, #1
 800956e:	d14a      	bne.n	8009606 <_printf_i+0x1f6>
 8009570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009574:	b004      	add	sp, #16
 8009576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800957a:	6823      	ldr	r3, [r4, #0]
 800957c:	f043 0320 	orr.w	r3, r3, #32
 8009580:	6023      	str	r3, [r4, #0]
 8009582:	4833      	ldr	r0, [pc, #204]	; (8009650 <_printf_i+0x240>)
 8009584:	2778      	movs	r7, #120	; 0x78
 8009586:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800958a:	6823      	ldr	r3, [r4, #0]
 800958c:	6829      	ldr	r1, [r5, #0]
 800958e:	061f      	lsls	r7, r3, #24
 8009590:	f851 6b04 	ldr.w	r6, [r1], #4
 8009594:	d402      	bmi.n	800959c <_printf_i+0x18c>
 8009596:	065f      	lsls	r7, r3, #25
 8009598:	bf48      	it	mi
 800959a:	b2b6      	uxthmi	r6, r6
 800959c:	07df      	lsls	r7, r3, #31
 800959e:	bf48      	it	mi
 80095a0:	f043 0320 	orrmi.w	r3, r3, #32
 80095a4:	6029      	str	r1, [r5, #0]
 80095a6:	bf48      	it	mi
 80095a8:	6023      	strmi	r3, [r4, #0]
 80095aa:	b91e      	cbnz	r6, 80095b4 <_printf_i+0x1a4>
 80095ac:	6823      	ldr	r3, [r4, #0]
 80095ae:	f023 0320 	bic.w	r3, r3, #32
 80095b2:	6023      	str	r3, [r4, #0]
 80095b4:	2310      	movs	r3, #16
 80095b6:	e7a7      	b.n	8009508 <_printf_i+0xf8>
 80095b8:	4824      	ldr	r0, [pc, #144]	; (800964c <_printf_i+0x23c>)
 80095ba:	e7e4      	b.n	8009586 <_printf_i+0x176>
 80095bc:	4615      	mov	r5, r2
 80095be:	e7bd      	b.n	800953c <_printf_i+0x12c>
 80095c0:	682b      	ldr	r3, [r5, #0]
 80095c2:	6826      	ldr	r6, [r4, #0]
 80095c4:	6961      	ldr	r1, [r4, #20]
 80095c6:	1d18      	adds	r0, r3, #4
 80095c8:	6028      	str	r0, [r5, #0]
 80095ca:	0635      	lsls	r5, r6, #24
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	d501      	bpl.n	80095d4 <_printf_i+0x1c4>
 80095d0:	6019      	str	r1, [r3, #0]
 80095d2:	e002      	b.n	80095da <_printf_i+0x1ca>
 80095d4:	0670      	lsls	r0, r6, #25
 80095d6:	d5fb      	bpl.n	80095d0 <_printf_i+0x1c0>
 80095d8:	8019      	strh	r1, [r3, #0]
 80095da:	2300      	movs	r3, #0
 80095dc:	6123      	str	r3, [r4, #16]
 80095de:	4615      	mov	r5, r2
 80095e0:	e7bc      	b.n	800955c <_printf_i+0x14c>
 80095e2:	682b      	ldr	r3, [r5, #0]
 80095e4:	1d1a      	adds	r2, r3, #4
 80095e6:	602a      	str	r2, [r5, #0]
 80095e8:	681d      	ldr	r5, [r3, #0]
 80095ea:	6862      	ldr	r2, [r4, #4]
 80095ec:	2100      	movs	r1, #0
 80095ee:	4628      	mov	r0, r5
 80095f0:	f7f6 fdf6 	bl	80001e0 <memchr>
 80095f4:	b108      	cbz	r0, 80095fa <_printf_i+0x1ea>
 80095f6:	1b40      	subs	r0, r0, r5
 80095f8:	6060      	str	r0, [r4, #4]
 80095fa:	6863      	ldr	r3, [r4, #4]
 80095fc:	6123      	str	r3, [r4, #16]
 80095fe:	2300      	movs	r3, #0
 8009600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009604:	e7aa      	b.n	800955c <_printf_i+0x14c>
 8009606:	6923      	ldr	r3, [r4, #16]
 8009608:	462a      	mov	r2, r5
 800960a:	4649      	mov	r1, r9
 800960c:	4640      	mov	r0, r8
 800960e:	47d0      	blx	sl
 8009610:	3001      	adds	r0, #1
 8009612:	d0ad      	beq.n	8009570 <_printf_i+0x160>
 8009614:	6823      	ldr	r3, [r4, #0]
 8009616:	079b      	lsls	r3, r3, #30
 8009618:	d413      	bmi.n	8009642 <_printf_i+0x232>
 800961a:	68e0      	ldr	r0, [r4, #12]
 800961c:	9b03      	ldr	r3, [sp, #12]
 800961e:	4298      	cmp	r0, r3
 8009620:	bfb8      	it	lt
 8009622:	4618      	movlt	r0, r3
 8009624:	e7a6      	b.n	8009574 <_printf_i+0x164>
 8009626:	2301      	movs	r3, #1
 8009628:	4632      	mov	r2, r6
 800962a:	4649      	mov	r1, r9
 800962c:	4640      	mov	r0, r8
 800962e:	47d0      	blx	sl
 8009630:	3001      	adds	r0, #1
 8009632:	d09d      	beq.n	8009570 <_printf_i+0x160>
 8009634:	3501      	adds	r5, #1
 8009636:	68e3      	ldr	r3, [r4, #12]
 8009638:	9903      	ldr	r1, [sp, #12]
 800963a:	1a5b      	subs	r3, r3, r1
 800963c:	42ab      	cmp	r3, r5
 800963e:	dcf2      	bgt.n	8009626 <_printf_i+0x216>
 8009640:	e7eb      	b.n	800961a <_printf_i+0x20a>
 8009642:	2500      	movs	r5, #0
 8009644:	f104 0619 	add.w	r6, r4, #25
 8009648:	e7f5      	b.n	8009636 <_printf_i+0x226>
 800964a:	bf00      	nop
 800964c:	0800dcea 	.word	0x0800dcea
 8009650:	0800dcfb 	.word	0x0800dcfb

08009654 <_scanf_float>:
 8009654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009658:	b087      	sub	sp, #28
 800965a:	4617      	mov	r7, r2
 800965c:	9303      	str	r3, [sp, #12]
 800965e:	688b      	ldr	r3, [r1, #8]
 8009660:	1e5a      	subs	r2, r3, #1
 8009662:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009666:	bf83      	ittte	hi
 8009668:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800966c:	195b      	addhi	r3, r3, r5
 800966e:	9302      	strhi	r3, [sp, #8]
 8009670:	2300      	movls	r3, #0
 8009672:	bf86      	itte	hi
 8009674:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009678:	608b      	strhi	r3, [r1, #8]
 800967a:	9302      	strls	r3, [sp, #8]
 800967c:	680b      	ldr	r3, [r1, #0]
 800967e:	468b      	mov	fp, r1
 8009680:	2500      	movs	r5, #0
 8009682:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009686:	f84b 3b1c 	str.w	r3, [fp], #28
 800968a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800968e:	4680      	mov	r8, r0
 8009690:	460c      	mov	r4, r1
 8009692:	465e      	mov	r6, fp
 8009694:	46aa      	mov	sl, r5
 8009696:	46a9      	mov	r9, r5
 8009698:	9501      	str	r5, [sp, #4]
 800969a:	68a2      	ldr	r2, [r4, #8]
 800969c:	b152      	cbz	r2, 80096b4 <_scanf_float+0x60>
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	2b4e      	cmp	r3, #78	; 0x4e
 80096a4:	d864      	bhi.n	8009770 <_scanf_float+0x11c>
 80096a6:	2b40      	cmp	r3, #64	; 0x40
 80096a8:	d83c      	bhi.n	8009724 <_scanf_float+0xd0>
 80096aa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80096ae:	b2c8      	uxtb	r0, r1
 80096b0:	280e      	cmp	r0, #14
 80096b2:	d93a      	bls.n	800972a <_scanf_float+0xd6>
 80096b4:	f1b9 0f00 	cmp.w	r9, #0
 80096b8:	d003      	beq.n	80096c2 <_scanf_float+0x6e>
 80096ba:	6823      	ldr	r3, [r4, #0]
 80096bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096c0:	6023      	str	r3, [r4, #0]
 80096c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80096c6:	f1ba 0f01 	cmp.w	sl, #1
 80096ca:	f200 8113 	bhi.w	80098f4 <_scanf_float+0x2a0>
 80096ce:	455e      	cmp	r6, fp
 80096d0:	f200 8105 	bhi.w	80098de <_scanf_float+0x28a>
 80096d4:	2501      	movs	r5, #1
 80096d6:	4628      	mov	r0, r5
 80096d8:	b007      	add	sp, #28
 80096da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096de:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80096e2:	2a0d      	cmp	r2, #13
 80096e4:	d8e6      	bhi.n	80096b4 <_scanf_float+0x60>
 80096e6:	a101      	add	r1, pc, #4	; (adr r1, 80096ec <_scanf_float+0x98>)
 80096e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80096ec:	0800982b 	.word	0x0800982b
 80096f0:	080096b5 	.word	0x080096b5
 80096f4:	080096b5 	.word	0x080096b5
 80096f8:	080096b5 	.word	0x080096b5
 80096fc:	0800988b 	.word	0x0800988b
 8009700:	08009863 	.word	0x08009863
 8009704:	080096b5 	.word	0x080096b5
 8009708:	080096b5 	.word	0x080096b5
 800970c:	08009839 	.word	0x08009839
 8009710:	080096b5 	.word	0x080096b5
 8009714:	080096b5 	.word	0x080096b5
 8009718:	080096b5 	.word	0x080096b5
 800971c:	080096b5 	.word	0x080096b5
 8009720:	080097f1 	.word	0x080097f1
 8009724:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009728:	e7db      	b.n	80096e2 <_scanf_float+0x8e>
 800972a:	290e      	cmp	r1, #14
 800972c:	d8c2      	bhi.n	80096b4 <_scanf_float+0x60>
 800972e:	a001      	add	r0, pc, #4	; (adr r0, 8009734 <_scanf_float+0xe0>)
 8009730:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009734:	080097e3 	.word	0x080097e3
 8009738:	080096b5 	.word	0x080096b5
 800973c:	080097e3 	.word	0x080097e3
 8009740:	08009877 	.word	0x08009877
 8009744:	080096b5 	.word	0x080096b5
 8009748:	08009791 	.word	0x08009791
 800974c:	080097cd 	.word	0x080097cd
 8009750:	080097cd 	.word	0x080097cd
 8009754:	080097cd 	.word	0x080097cd
 8009758:	080097cd 	.word	0x080097cd
 800975c:	080097cd 	.word	0x080097cd
 8009760:	080097cd 	.word	0x080097cd
 8009764:	080097cd 	.word	0x080097cd
 8009768:	080097cd 	.word	0x080097cd
 800976c:	080097cd 	.word	0x080097cd
 8009770:	2b6e      	cmp	r3, #110	; 0x6e
 8009772:	d809      	bhi.n	8009788 <_scanf_float+0x134>
 8009774:	2b60      	cmp	r3, #96	; 0x60
 8009776:	d8b2      	bhi.n	80096de <_scanf_float+0x8a>
 8009778:	2b54      	cmp	r3, #84	; 0x54
 800977a:	d077      	beq.n	800986c <_scanf_float+0x218>
 800977c:	2b59      	cmp	r3, #89	; 0x59
 800977e:	d199      	bne.n	80096b4 <_scanf_float+0x60>
 8009780:	2d07      	cmp	r5, #7
 8009782:	d197      	bne.n	80096b4 <_scanf_float+0x60>
 8009784:	2508      	movs	r5, #8
 8009786:	e029      	b.n	80097dc <_scanf_float+0x188>
 8009788:	2b74      	cmp	r3, #116	; 0x74
 800978a:	d06f      	beq.n	800986c <_scanf_float+0x218>
 800978c:	2b79      	cmp	r3, #121	; 0x79
 800978e:	e7f6      	b.n	800977e <_scanf_float+0x12a>
 8009790:	6821      	ldr	r1, [r4, #0]
 8009792:	05c8      	lsls	r0, r1, #23
 8009794:	d51a      	bpl.n	80097cc <_scanf_float+0x178>
 8009796:	9b02      	ldr	r3, [sp, #8]
 8009798:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800979c:	6021      	str	r1, [r4, #0]
 800979e:	f109 0901 	add.w	r9, r9, #1
 80097a2:	b11b      	cbz	r3, 80097ac <_scanf_float+0x158>
 80097a4:	3b01      	subs	r3, #1
 80097a6:	3201      	adds	r2, #1
 80097a8:	9302      	str	r3, [sp, #8]
 80097aa:	60a2      	str	r2, [r4, #8]
 80097ac:	68a3      	ldr	r3, [r4, #8]
 80097ae:	3b01      	subs	r3, #1
 80097b0:	60a3      	str	r3, [r4, #8]
 80097b2:	6923      	ldr	r3, [r4, #16]
 80097b4:	3301      	adds	r3, #1
 80097b6:	6123      	str	r3, [r4, #16]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	3b01      	subs	r3, #1
 80097bc:	2b00      	cmp	r3, #0
 80097be:	607b      	str	r3, [r7, #4]
 80097c0:	f340 8084 	ble.w	80098cc <_scanf_float+0x278>
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	3301      	adds	r3, #1
 80097c8:	603b      	str	r3, [r7, #0]
 80097ca:	e766      	b.n	800969a <_scanf_float+0x46>
 80097cc:	eb1a 0f05 	cmn.w	sl, r5
 80097d0:	f47f af70 	bne.w	80096b4 <_scanf_float+0x60>
 80097d4:	6822      	ldr	r2, [r4, #0]
 80097d6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80097da:	6022      	str	r2, [r4, #0]
 80097dc:	f806 3b01 	strb.w	r3, [r6], #1
 80097e0:	e7e4      	b.n	80097ac <_scanf_float+0x158>
 80097e2:	6822      	ldr	r2, [r4, #0]
 80097e4:	0610      	lsls	r0, r2, #24
 80097e6:	f57f af65 	bpl.w	80096b4 <_scanf_float+0x60>
 80097ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80097ee:	e7f4      	b.n	80097da <_scanf_float+0x186>
 80097f0:	f1ba 0f00 	cmp.w	sl, #0
 80097f4:	d10e      	bne.n	8009814 <_scanf_float+0x1c0>
 80097f6:	f1b9 0f00 	cmp.w	r9, #0
 80097fa:	d10e      	bne.n	800981a <_scanf_float+0x1c6>
 80097fc:	6822      	ldr	r2, [r4, #0]
 80097fe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009802:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009806:	d108      	bne.n	800981a <_scanf_float+0x1c6>
 8009808:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800980c:	6022      	str	r2, [r4, #0]
 800980e:	f04f 0a01 	mov.w	sl, #1
 8009812:	e7e3      	b.n	80097dc <_scanf_float+0x188>
 8009814:	f1ba 0f02 	cmp.w	sl, #2
 8009818:	d055      	beq.n	80098c6 <_scanf_float+0x272>
 800981a:	2d01      	cmp	r5, #1
 800981c:	d002      	beq.n	8009824 <_scanf_float+0x1d0>
 800981e:	2d04      	cmp	r5, #4
 8009820:	f47f af48 	bne.w	80096b4 <_scanf_float+0x60>
 8009824:	3501      	adds	r5, #1
 8009826:	b2ed      	uxtb	r5, r5
 8009828:	e7d8      	b.n	80097dc <_scanf_float+0x188>
 800982a:	f1ba 0f01 	cmp.w	sl, #1
 800982e:	f47f af41 	bne.w	80096b4 <_scanf_float+0x60>
 8009832:	f04f 0a02 	mov.w	sl, #2
 8009836:	e7d1      	b.n	80097dc <_scanf_float+0x188>
 8009838:	b97d      	cbnz	r5, 800985a <_scanf_float+0x206>
 800983a:	f1b9 0f00 	cmp.w	r9, #0
 800983e:	f47f af3c 	bne.w	80096ba <_scanf_float+0x66>
 8009842:	6822      	ldr	r2, [r4, #0]
 8009844:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009848:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800984c:	f47f af39 	bne.w	80096c2 <_scanf_float+0x6e>
 8009850:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009854:	6022      	str	r2, [r4, #0]
 8009856:	2501      	movs	r5, #1
 8009858:	e7c0      	b.n	80097dc <_scanf_float+0x188>
 800985a:	2d03      	cmp	r5, #3
 800985c:	d0e2      	beq.n	8009824 <_scanf_float+0x1d0>
 800985e:	2d05      	cmp	r5, #5
 8009860:	e7de      	b.n	8009820 <_scanf_float+0x1cc>
 8009862:	2d02      	cmp	r5, #2
 8009864:	f47f af26 	bne.w	80096b4 <_scanf_float+0x60>
 8009868:	2503      	movs	r5, #3
 800986a:	e7b7      	b.n	80097dc <_scanf_float+0x188>
 800986c:	2d06      	cmp	r5, #6
 800986e:	f47f af21 	bne.w	80096b4 <_scanf_float+0x60>
 8009872:	2507      	movs	r5, #7
 8009874:	e7b2      	b.n	80097dc <_scanf_float+0x188>
 8009876:	6822      	ldr	r2, [r4, #0]
 8009878:	0591      	lsls	r1, r2, #22
 800987a:	f57f af1b 	bpl.w	80096b4 <_scanf_float+0x60>
 800987e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009882:	6022      	str	r2, [r4, #0]
 8009884:	f8cd 9004 	str.w	r9, [sp, #4]
 8009888:	e7a8      	b.n	80097dc <_scanf_float+0x188>
 800988a:	6822      	ldr	r2, [r4, #0]
 800988c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009890:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009894:	d006      	beq.n	80098a4 <_scanf_float+0x250>
 8009896:	0550      	lsls	r0, r2, #21
 8009898:	f57f af0c 	bpl.w	80096b4 <_scanf_float+0x60>
 800989c:	f1b9 0f00 	cmp.w	r9, #0
 80098a0:	f43f af0f 	beq.w	80096c2 <_scanf_float+0x6e>
 80098a4:	0591      	lsls	r1, r2, #22
 80098a6:	bf58      	it	pl
 80098a8:	9901      	ldrpl	r1, [sp, #4]
 80098aa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80098ae:	bf58      	it	pl
 80098b0:	eba9 0101 	subpl.w	r1, r9, r1
 80098b4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80098b8:	bf58      	it	pl
 80098ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80098be:	6022      	str	r2, [r4, #0]
 80098c0:	f04f 0900 	mov.w	r9, #0
 80098c4:	e78a      	b.n	80097dc <_scanf_float+0x188>
 80098c6:	f04f 0a03 	mov.w	sl, #3
 80098ca:	e787      	b.n	80097dc <_scanf_float+0x188>
 80098cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80098d0:	4639      	mov	r1, r7
 80098d2:	4640      	mov	r0, r8
 80098d4:	4798      	blx	r3
 80098d6:	2800      	cmp	r0, #0
 80098d8:	f43f aedf 	beq.w	800969a <_scanf_float+0x46>
 80098dc:	e6ea      	b.n	80096b4 <_scanf_float+0x60>
 80098de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80098e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80098e6:	463a      	mov	r2, r7
 80098e8:	4640      	mov	r0, r8
 80098ea:	4798      	blx	r3
 80098ec:	6923      	ldr	r3, [r4, #16]
 80098ee:	3b01      	subs	r3, #1
 80098f0:	6123      	str	r3, [r4, #16]
 80098f2:	e6ec      	b.n	80096ce <_scanf_float+0x7a>
 80098f4:	1e6b      	subs	r3, r5, #1
 80098f6:	2b06      	cmp	r3, #6
 80098f8:	d825      	bhi.n	8009946 <_scanf_float+0x2f2>
 80098fa:	2d02      	cmp	r5, #2
 80098fc:	d836      	bhi.n	800996c <_scanf_float+0x318>
 80098fe:	455e      	cmp	r6, fp
 8009900:	f67f aee8 	bls.w	80096d4 <_scanf_float+0x80>
 8009904:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009908:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800990c:	463a      	mov	r2, r7
 800990e:	4640      	mov	r0, r8
 8009910:	4798      	blx	r3
 8009912:	6923      	ldr	r3, [r4, #16]
 8009914:	3b01      	subs	r3, #1
 8009916:	6123      	str	r3, [r4, #16]
 8009918:	e7f1      	b.n	80098fe <_scanf_float+0x2aa>
 800991a:	9802      	ldr	r0, [sp, #8]
 800991c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009920:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009924:	9002      	str	r0, [sp, #8]
 8009926:	463a      	mov	r2, r7
 8009928:	4640      	mov	r0, r8
 800992a:	4798      	blx	r3
 800992c:	6923      	ldr	r3, [r4, #16]
 800992e:	3b01      	subs	r3, #1
 8009930:	6123      	str	r3, [r4, #16]
 8009932:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009936:	fa5f fa8a 	uxtb.w	sl, sl
 800993a:	f1ba 0f02 	cmp.w	sl, #2
 800993e:	d1ec      	bne.n	800991a <_scanf_float+0x2c6>
 8009940:	3d03      	subs	r5, #3
 8009942:	b2ed      	uxtb	r5, r5
 8009944:	1b76      	subs	r6, r6, r5
 8009946:	6823      	ldr	r3, [r4, #0]
 8009948:	05da      	lsls	r2, r3, #23
 800994a:	d52f      	bpl.n	80099ac <_scanf_float+0x358>
 800994c:	055b      	lsls	r3, r3, #21
 800994e:	d510      	bpl.n	8009972 <_scanf_float+0x31e>
 8009950:	455e      	cmp	r6, fp
 8009952:	f67f aebf 	bls.w	80096d4 <_scanf_float+0x80>
 8009956:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800995a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800995e:	463a      	mov	r2, r7
 8009960:	4640      	mov	r0, r8
 8009962:	4798      	blx	r3
 8009964:	6923      	ldr	r3, [r4, #16]
 8009966:	3b01      	subs	r3, #1
 8009968:	6123      	str	r3, [r4, #16]
 800996a:	e7f1      	b.n	8009950 <_scanf_float+0x2fc>
 800996c:	46aa      	mov	sl, r5
 800996e:	9602      	str	r6, [sp, #8]
 8009970:	e7df      	b.n	8009932 <_scanf_float+0x2de>
 8009972:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009976:	6923      	ldr	r3, [r4, #16]
 8009978:	2965      	cmp	r1, #101	; 0x65
 800997a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800997e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8009982:	6123      	str	r3, [r4, #16]
 8009984:	d00c      	beq.n	80099a0 <_scanf_float+0x34c>
 8009986:	2945      	cmp	r1, #69	; 0x45
 8009988:	d00a      	beq.n	80099a0 <_scanf_float+0x34c>
 800998a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800998e:	463a      	mov	r2, r7
 8009990:	4640      	mov	r0, r8
 8009992:	4798      	blx	r3
 8009994:	6923      	ldr	r3, [r4, #16]
 8009996:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800999a:	3b01      	subs	r3, #1
 800999c:	1eb5      	subs	r5, r6, #2
 800999e:	6123      	str	r3, [r4, #16]
 80099a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80099a4:	463a      	mov	r2, r7
 80099a6:	4640      	mov	r0, r8
 80099a8:	4798      	blx	r3
 80099aa:	462e      	mov	r6, r5
 80099ac:	6825      	ldr	r5, [r4, #0]
 80099ae:	f015 0510 	ands.w	r5, r5, #16
 80099b2:	d158      	bne.n	8009a66 <_scanf_float+0x412>
 80099b4:	7035      	strb	r5, [r6, #0]
 80099b6:	6823      	ldr	r3, [r4, #0]
 80099b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80099bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099c0:	d11c      	bne.n	80099fc <_scanf_float+0x3a8>
 80099c2:	9b01      	ldr	r3, [sp, #4]
 80099c4:	454b      	cmp	r3, r9
 80099c6:	eba3 0209 	sub.w	r2, r3, r9
 80099ca:	d124      	bne.n	8009a16 <_scanf_float+0x3c2>
 80099cc:	2200      	movs	r2, #0
 80099ce:	4659      	mov	r1, fp
 80099d0:	4640      	mov	r0, r8
 80099d2:	f000 ff21 	bl	800a818 <_strtod_r>
 80099d6:	9b03      	ldr	r3, [sp, #12]
 80099d8:	6821      	ldr	r1, [r4, #0]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f011 0f02 	tst.w	r1, #2
 80099e0:	ec57 6b10 	vmov	r6, r7, d0
 80099e4:	f103 0204 	add.w	r2, r3, #4
 80099e8:	d020      	beq.n	8009a2c <_scanf_float+0x3d8>
 80099ea:	9903      	ldr	r1, [sp, #12]
 80099ec:	600a      	str	r2, [r1, #0]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	e9c3 6700 	strd	r6, r7, [r3]
 80099f4:	68e3      	ldr	r3, [r4, #12]
 80099f6:	3301      	adds	r3, #1
 80099f8:	60e3      	str	r3, [r4, #12]
 80099fa:	e66c      	b.n	80096d6 <_scanf_float+0x82>
 80099fc:	9b04      	ldr	r3, [sp, #16]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d0e4      	beq.n	80099cc <_scanf_float+0x378>
 8009a02:	9905      	ldr	r1, [sp, #20]
 8009a04:	230a      	movs	r3, #10
 8009a06:	462a      	mov	r2, r5
 8009a08:	3101      	adds	r1, #1
 8009a0a:	4640      	mov	r0, r8
 8009a0c:	f000 fff2 	bl	800a9f4 <_strtol_r>
 8009a10:	9b04      	ldr	r3, [sp, #16]
 8009a12:	9e05      	ldr	r6, [sp, #20]
 8009a14:	1ac2      	subs	r2, r0, r3
 8009a16:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009a1a:	429e      	cmp	r6, r3
 8009a1c:	bf28      	it	cs
 8009a1e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009a22:	4912      	ldr	r1, [pc, #72]	; (8009a6c <_scanf_float+0x418>)
 8009a24:	4630      	mov	r0, r6
 8009a26:	f000 f825 	bl	8009a74 <siprintf>
 8009a2a:	e7cf      	b.n	80099cc <_scanf_float+0x378>
 8009a2c:	f011 0f04 	tst.w	r1, #4
 8009a30:	9903      	ldr	r1, [sp, #12]
 8009a32:	600a      	str	r2, [r1, #0]
 8009a34:	d1db      	bne.n	80099ee <_scanf_float+0x39a>
 8009a36:	f8d3 8000 	ldr.w	r8, [r3]
 8009a3a:	ee10 2a10 	vmov	r2, s0
 8009a3e:	ee10 0a10 	vmov	r0, s0
 8009a42:	463b      	mov	r3, r7
 8009a44:	4639      	mov	r1, r7
 8009a46:	f7f7 f879 	bl	8000b3c <__aeabi_dcmpun>
 8009a4a:	b128      	cbz	r0, 8009a58 <_scanf_float+0x404>
 8009a4c:	4808      	ldr	r0, [pc, #32]	; (8009a70 <_scanf_float+0x41c>)
 8009a4e:	f001 f873 	bl	800ab38 <nanf>
 8009a52:	ed88 0a00 	vstr	s0, [r8]
 8009a56:	e7cd      	b.n	80099f4 <_scanf_float+0x3a0>
 8009a58:	4630      	mov	r0, r6
 8009a5a:	4639      	mov	r1, r7
 8009a5c:	f7f7 f8cc 	bl	8000bf8 <__aeabi_d2f>
 8009a60:	f8c8 0000 	str.w	r0, [r8]
 8009a64:	e7c6      	b.n	80099f4 <_scanf_float+0x3a0>
 8009a66:	2500      	movs	r5, #0
 8009a68:	e635      	b.n	80096d6 <_scanf_float+0x82>
 8009a6a:	bf00      	nop
 8009a6c:	0800dd0c 	.word	0x0800dd0c
 8009a70:	0800e0ff 	.word	0x0800e0ff

08009a74 <siprintf>:
 8009a74:	b40e      	push	{r1, r2, r3}
 8009a76:	b500      	push	{lr}
 8009a78:	b09c      	sub	sp, #112	; 0x70
 8009a7a:	ab1d      	add	r3, sp, #116	; 0x74
 8009a7c:	9002      	str	r0, [sp, #8]
 8009a7e:	9006      	str	r0, [sp, #24]
 8009a80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a84:	4809      	ldr	r0, [pc, #36]	; (8009aac <siprintf+0x38>)
 8009a86:	9107      	str	r1, [sp, #28]
 8009a88:	9104      	str	r1, [sp, #16]
 8009a8a:	4909      	ldr	r1, [pc, #36]	; (8009ab0 <siprintf+0x3c>)
 8009a8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a90:	9105      	str	r1, [sp, #20]
 8009a92:	6800      	ldr	r0, [r0, #0]
 8009a94:	9301      	str	r3, [sp, #4]
 8009a96:	a902      	add	r1, sp, #8
 8009a98:	f002 fa82 	bl	800bfa0 <_svfiprintf_r>
 8009a9c:	9b02      	ldr	r3, [sp, #8]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	701a      	strb	r2, [r3, #0]
 8009aa2:	b01c      	add	sp, #112	; 0x70
 8009aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009aa8:	b003      	add	sp, #12
 8009aaa:	4770      	bx	lr
 8009aac:	2000023c 	.word	0x2000023c
 8009ab0:	ffff0208 	.word	0xffff0208

08009ab4 <std>:
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	b510      	push	{r4, lr}
 8009ab8:	4604      	mov	r4, r0
 8009aba:	e9c0 3300 	strd	r3, r3, [r0]
 8009abe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ac2:	6083      	str	r3, [r0, #8]
 8009ac4:	8181      	strh	r1, [r0, #12]
 8009ac6:	6643      	str	r3, [r0, #100]	; 0x64
 8009ac8:	81c2      	strh	r2, [r0, #14]
 8009aca:	6183      	str	r3, [r0, #24]
 8009acc:	4619      	mov	r1, r3
 8009ace:	2208      	movs	r2, #8
 8009ad0:	305c      	adds	r0, #92	; 0x5c
 8009ad2:	f000 ffde 	bl	800aa92 <memset>
 8009ad6:	4b0d      	ldr	r3, [pc, #52]	; (8009b0c <std+0x58>)
 8009ad8:	6263      	str	r3, [r4, #36]	; 0x24
 8009ada:	4b0d      	ldr	r3, [pc, #52]	; (8009b10 <std+0x5c>)
 8009adc:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ade:	4b0d      	ldr	r3, [pc, #52]	; (8009b14 <std+0x60>)
 8009ae0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ae2:	4b0d      	ldr	r3, [pc, #52]	; (8009b18 <std+0x64>)
 8009ae4:	6323      	str	r3, [r4, #48]	; 0x30
 8009ae6:	4b0d      	ldr	r3, [pc, #52]	; (8009b1c <std+0x68>)
 8009ae8:	6224      	str	r4, [r4, #32]
 8009aea:	429c      	cmp	r4, r3
 8009aec:	d006      	beq.n	8009afc <std+0x48>
 8009aee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009af2:	4294      	cmp	r4, r2
 8009af4:	d002      	beq.n	8009afc <std+0x48>
 8009af6:	33d0      	adds	r3, #208	; 0xd0
 8009af8:	429c      	cmp	r4, r3
 8009afa:	d105      	bne.n	8009b08 <std+0x54>
 8009afc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b04:	f000 bffc 	b.w	800ab00 <__retarget_lock_init_recursive>
 8009b08:	bd10      	pop	{r4, pc}
 8009b0a:	bf00      	nop
 8009b0c:	0800cddf 	.word	0x0800cddf
 8009b10:	0800ce01 	.word	0x0800ce01
 8009b14:	0800ce39 	.word	0x0800ce39
 8009b18:	0800ce5d 	.word	0x0800ce5d
 8009b1c:	200007c8 	.word	0x200007c8

08009b20 <stdio_exit_handler>:
 8009b20:	4a02      	ldr	r2, [pc, #8]	; (8009b2c <stdio_exit_handler+0xc>)
 8009b22:	4903      	ldr	r1, [pc, #12]	; (8009b30 <stdio_exit_handler+0x10>)
 8009b24:	4803      	ldr	r0, [pc, #12]	; (8009b34 <stdio_exit_handler+0x14>)
 8009b26:	f000 bf71 	b.w	800aa0c <_fwalk_sglue>
 8009b2a:	bf00      	nop
 8009b2c:	20000078 	.word	0x20000078
 8009b30:	0800c41d 	.word	0x0800c41d
 8009b34:	200001f0 	.word	0x200001f0

08009b38 <cleanup_stdio>:
 8009b38:	6841      	ldr	r1, [r0, #4]
 8009b3a:	4b0c      	ldr	r3, [pc, #48]	; (8009b6c <cleanup_stdio+0x34>)
 8009b3c:	4299      	cmp	r1, r3
 8009b3e:	b510      	push	{r4, lr}
 8009b40:	4604      	mov	r4, r0
 8009b42:	d001      	beq.n	8009b48 <cleanup_stdio+0x10>
 8009b44:	f002 fc6a 	bl	800c41c <_fflush_r>
 8009b48:	68a1      	ldr	r1, [r4, #8]
 8009b4a:	4b09      	ldr	r3, [pc, #36]	; (8009b70 <cleanup_stdio+0x38>)
 8009b4c:	4299      	cmp	r1, r3
 8009b4e:	d002      	beq.n	8009b56 <cleanup_stdio+0x1e>
 8009b50:	4620      	mov	r0, r4
 8009b52:	f002 fc63 	bl	800c41c <_fflush_r>
 8009b56:	68e1      	ldr	r1, [r4, #12]
 8009b58:	4b06      	ldr	r3, [pc, #24]	; (8009b74 <cleanup_stdio+0x3c>)
 8009b5a:	4299      	cmp	r1, r3
 8009b5c:	d004      	beq.n	8009b68 <cleanup_stdio+0x30>
 8009b5e:	4620      	mov	r0, r4
 8009b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b64:	f002 bc5a 	b.w	800c41c <_fflush_r>
 8009b68:	bd10      	pop	{r4, pc}
 8009b6a:	bf00      	nop
 8009b6c:	200007c8 	.word	0x200007c8
 8009b70:	20000830 	.word	0x20000830
 8009b74:	20000898 	.word	0x20000898

08009b78 <global_stdio_init.part.0>:
 8009b78:	b510      	push	{r4, lr}
 8009b7a:	4b0b      	ldr	r3, [pc, #44]	; (8009ba8 <global_stdio_init.part.0+0x30>)
 8009b7c:	4c0b      	ldr	r4, [pc, #44]	; (8009bac <global_stdio_init.part.0+0x34>)
 8009b7e:	4a0c      	ldr	r2, [pc, #48]	; (8009bb0 <global_stdio_init.part.0+0x38>)
 8009b80:	601a      	str	r2, [r3, #0]
 8009b82:	4620      	mov	r0, r4
 8009b84:	2200      	movs	r2, #0
 8009b86:	2104      	movs	r1, #4
 8009b88:	f7ff ff94 	bl	8009ab4 <std>
 8009b8c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009b90:	2201      	movs	r2, #1
 8009b92:	2109      	movs	r1, #9
 8009b94:	f7ff ff8e 	bl	8009ab4 <std>
 8009b98:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009b9c:	2202      	movs	r2, #2
 8009b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ba2:	2112      	movs	r1, #18
 8009ba4:	f7ff bf86 	b.w	8009ab4 <std>
 8009ba8:	20000900 	.word	0x20000900
 8009bac:	200007c8 	.word	0x200007c8
 8009bb0:	08009b21 	.word	0x08009b21

08009bb4 <__sfp_lock_acquire>:
 8009bb4:	4801      	ldr	r0, [pc, #4]	; (8009bbc <__sfp_lock_acquire+0x8>)
 8009bb6:	f000 bfa4 	b.w	800ab02 <__retarget_lock_acquire_recursive>
 8009bba:	bf00      	nop
 8009bbc:	20000905 	.word	0x20000905

08009bc0 <__sfp_lock_release>:
 8009bc0:	4801      	ldr	r0, [pc, #4]	; (8009bc8 <__sfp_lock_release+0x8>)
 8009bc2:	f000 bf9f 	b.w	800ab04 <__retarget_lock_release_recursive>
 8009bc6:	bf00      	nop
 8009bc8:	20000905 	.word	0x20000905

08009bcc <__sinit>:
 8009bcc:	b510      	push	{r4, lr}
 8009bce:	4604      	mov	r4, r0
 8009bd0:	f7ff fff0 	bl	8009bb4 <__sfp_lock_acquire>
 8009bd4:	6a23      	ldr	r3, [r4, #32]
 8009bd6:	b11b      	cbz	r3, 8009be0 <__sinit+0x14>
 8009bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bdc:	f7ff bff0 	b.w	8009bc0 <__sfp_lock_release>
 8009be0:	4b04      	ldr	r3, [pc, #16]	; (8009bf4 <__sinit+0x28>)
 8009be2:	6223      	str	r3, [r4, #32]
 8009be4:	4b04      	ldr	r3, [pc, #16]	; (8009bf8 <__sinit+0x2c>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d1f5      	bne.n	8009bd8 <__sinit+0xc>
 8009bec:	f7ff ffc4 	bl	8009b78 <global_stdio_init.part.0>
 8009bf0:	e7f2      	b.n	8009bd8 <__sinit+0xc>
 8009bf2:	bf00      	nop
 8009bf4:	08009b39 	.word	0x08009b39
 8009bf8:	20000900 	.word	0x20000900

08009bfc <sulp>:
 8009bfc:	b570      	push	{r4, r5, r6, lr}
 8009bfe:	4604      	mov	r4, r0
 8009c00:	460d      	mov	r5, r1
 8009c02:	ec45 4b10 	vmov	d0, r4, r5
 8009c06:	4616      	mov	r6, r2
 8009c08:	f002 ffa8 	bl	800cb5c <__ulp>
 8009c0c:	ec51 0b10 	vmov	r0, r1, d0
 8009c10:	b17e      	cbz	r6, 8009c32 <sulp+0x36>
 8009c12:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009c16:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	dd09      	ble.n	8009c32 <sulp+0x36>
 8009c1e:	051b      	lsls	r3, r3, #20
 8009c20:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009c24:	2400      	movs	r4, #0
 8009c26:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009c2a:	4622      	mov	r2, r4
 8009c2c:	462b      	mov	r3, r5
 8009c2e:	f7f6 fceb 	bl	8000608 <__aeabi_dmul>
 8009c32:	bd70      	pop	{r4, r5, r6, pc}
 8009c34:	0000      	movs	r0, r0
	...

08009c38 <_strtod_l>:
 8009c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3c:	ed2d 8b02 	vpush	{d8}
 8009c40:	b09b      	sub	sp, #108	; 0x6c
 8009c42:	4604      	mov	r4, r0
 8009c44:	9213      	str	r2, [sp, #76]	; 0x4c
 8009c46:	2200      	movs	r2, #0
 8009c48:	9216      	str	r2, [sp, #88]	; 0x58
 8009c4a:	460d      	mov	r5, r1
 8009c4c:	f04f 0800 	mov.w	r8, #0
 8009c50:	f04f 0900 	mov.w	r9, #0
 8009c54:	460a      	mov	r2, r1
 8009c56:	9215      	str	r2, [sp, #84]	; 0x54
 8009c58:	7811      	ldrb	r1, [r2, #0]
 8009c5a:	292b      	cmp	r1, #43	; 0x2b
 8009c5c:	d04c      	beq.n	8009cf8 <_strtod_l+0xc0>
 8009c5e:	d83a      	bhi.n	8009cd6 <_strtod_l+0x9e>
 8009c60:	290d      	cmp	r1, #13
 8009c62:	d834      	bhi.n	8009cce <_strtod_l+0x96>
 8009c64:	2908      	cmp	r1, #8
 8009c66:	d834      	bhi.n	8009cd2 <_strtod_l+0x9a>
 8009c68:	2900      	cmp	r1, #0
 8009c6a:	d03d      	beq.n	8009ce8 <_strtod_l+0xb0>
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	920a      	str	r2, [sp, #40]	; 0x28
 8009c70:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009c72:	7832      	ldrb	r2, [r6, #0]
 8009c74:	2a30      	cmp	r2, #48	; 0x30
 8009c76:	f040 80b4 	bne.w	8009de2 <_strtod_l+0x1aa>
 8009c7a:	7872      	ldrb	r2, [r6, #1]
 8009c7c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009c80:	2a58      	cmp	r2, #88	; 0x58
 8009c82:	d170      	bne.n	8009d66 <_strtod_l+0x12e>
 8009c84:	9302      	str	r3, [sp, #8]
 8009c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c88:	9301      	str	r3, [sp, #4]
 8009c8a:	ab16      	add	r3, sp, #88	; 0x58
 8009c8c:	9300      	str	r3, [sp, #0]
 8009c8e:	4a8e      	ldr	r2, [pc, #568]	; (8009ec8 <_strtod_l+0x290>)
 8009c90:	ab17      	add	r3, sp, #92	; 0x5c
 8009c92:	a915      	add	r1, sp, #84	; 0x54
 8009c94:	4620      	mov	r0, r4
 8009c96:	f001 fe39 	bl	800b90c <__gethex>
 8009c9a:	f010 070f 	ands.w	r7, r0, #15
 8009c9e:	4605      	mov	r5, r0
 8009ca0:	d005      	beq.n	8009cae <_strtod_l+0x76>
 8009ca2:	2f06      	cmp	r7, #6
 8009ca4:	d12a      	bne.n	8009cfc <_strtod_l+0xc4>
 8009ca6:	3601      	adds	r6, #1
 8009ca8:	2300      	movs	r3, #0
 8009caa:	9615      	str	r6, [sp, #84]	; 0x54
 8009cac:	930a      	str	r3, [sp, #40]	; 0x28
 8009cae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	f040 857f 	bne.w	800a7b4 <_strtod_l+0xb7c>
 8009cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cb8:	b1db      	cbz	r3, 8009cf2 <_strtod_l+0xba>
 8009cba:	4642      	mov	r2, r8
 8009cbc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009cc0:	ec43 2b10 	vmov	d0, r2, r3
 8009cc4:	b01b      	add	sp, #108	; 0x6c
 8009cc6:	ecbd 8b02 	vpop	{d8}
 8009cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cce:	2920      	cmp	r1, #32
 8009cd0:	d1cc      	bne.n	8009c6c <_strtod_l+0x34>
 8009cd2:	3201      	adds	r2, #1
 8009cd4:	e7bf      	b.n	8009c56 <_strtod_l+0x1e>
 8009cd6:	292d      	cmp	r1, #45	; 0x2d
 8009cd8:	d1c8      	bne.n	8009c6c <_strtod_l+0x34>
 8009cda:	2101      	movs	r1, #1
 8009cdc:	910a      	str	r1, [sp, #40]	; 0x28
 8009cde:	1c51      	adds	r1, r2, #1
 8009ce0:	9115      	str	r1, [sp, #84]	; 0x54
 8009ce2:	7852      	ldrb	r2, [r2, #1]
 8009ce4:	2a00      	cmp	r2, #0
 8009ce6:	d1c3      	bne.n	8009c70 <_strtod_l+0x38>
 8009ce8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009cea:	9515      	str	r5, [sp, #84]	; 0x54
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	f040 855f 	bne.w	800a7b0 <_strtod_l+0xb78>
 8009cf2:	4642      	mov	r2, r8
 8009cf4:	464b      	mov	r3, r9
 8009cf6:	e7e3      	b.n	8009cc0 <_strtod_l+0x88>
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	e7ef      	b.n	8009cdc <_strtod_l+0xa4>
 8009cfc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009cfe:	b13a      	cbz	r2, 8009d10 <_strtod_l+0xd8>
 8009d00:	2135      	movs	r1, #53	; 0x35
 8009d02:	a818      	add	r0, sp, #96	; 0x60
 8009d04:	f003 f827 	bl	800cd56 <__copybits>
 8009d08:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f002 fbfa 	bl	800c504 <_Bfree>
 8009d10:	3f01      	subs	r7, #1
 8009d12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d14:	2f04      	cmp	r7, #4
 8009d16:	d806      	bhi.n	8009d26 <_strtod_l+0xee>
 8009d18:	e8df f007 	tbb	[pc, r7]
 8009d1c:	201d0314 	.word	0x201d0314
 8009d20:	14          	.byte	0x14
 8009d21:	00          	.byte	0x00
 8009d22:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8009d26:	05e9      	lsls	r1, r5, #23
 8009d28:	bf48      	it	mi
 8009d2a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009d2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d32:	0d1b      	lsrs	r3, r3, #20
 8009d34:	051b      	lsls	r3, r3, #20
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d1b9      	bne.n	8009cae <_strtod_l+0x76>
 8009d3a:	f000 feb7 	bl	800aaac <__errno>
 8009d3e:	2322      	movs	r3, #34	; 0x22
 8009d40:	6003      	str	r3, [r0, #0]
 8009d42:	e7b4      	b.n	8009cae <_strtod_l+0x76>
 8009d44:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009d48:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009d4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009d50:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009d54:	e7e7      	b.n	8009d26 <_strtod_l+0xee>
 8009d56:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009ed0 <_strtod_l+0x298>
 8009d5a:	e7e4      	b.n	8009d26 <_strtod_l+0xee>
 8009d5c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009d60:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009d64:	e7df      	b.n	8009d26 <_strtod_l+0xee>
 8009d66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d68:	1c5a      	adds	r2, r3, #1
 8009d6a:	9215      	str	r2, [sp, #84]	; 0x54
 8009d6c:	785b      	ldrb	r3, [r3, #1]
 8009d6e:	2b30      	cmp	r3, #48	; 0x30
 8009d70:	d0f9      	beq.n	8009d66 <_strtod_l+0x12e>
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d09b      	beq.n	8009cae <_strtod_l+0x76>
 8009d76:	2301      	movs	r3, #1
 8009d78:	f04f 0a00 	mov.w	sl, #0
 8009d7c:	9304      	str	r3, [sp, #16]
 8009d7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d80:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d82:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009d86:	46d3      	mov	fp, sl
 8009d88:	220a      	movs	r2, #10
 8009d8a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009d8c:	7806      	ldrb	r6, [r0, #0]
 8009d8e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009d92:	b2d9      	uxtb	r1, r3
 8009d94:	2909      	cmp	r1, #9
 8009d96:	d926      	bls.n	8009de6 <_strtod_l+0x1ae>
 8009d98:	494c      	ldr	r1, [pc, #304]	; (8009ecc <_strtod_l+0x294>)
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	f000 fe54 	bl	800aa48 <strncmp>
 8009da0:	2800      	cmp	r0, #0
 8009da2:	d030      	beq.n	8009e06 <_strtod_l+0x1ce>
 8009da4:	2000      	movs	r0, #0
 8009da6:	4632      	mov	r2, r6
 8009da8:	9005      	str	r0, [sp, #20]
 8009daa:	465e      	mov	r6, fp
 8009dac:	4603      	mov	r3, r0
 8009dae:	2a65      	cmp	r2, #101	; 0x65
 8009db0:	d001      	beq.n	8009db6 <_strtod_l+0x17e>
 8009db2:	2a45      	cmp	r2, #69	; 0x45
 8009db4:	d113      	bne.n	8009dde <_strtod_l+0x1a6>
 8009db6:	b91e      	cbnz	r6, 8009dc0 <_strtod_l+0x188>
 8009db8:	9a04      	ldr	r2, [sp, #16]
 8009dba:	4302      	orrs	r2, r0
 8009dbc:	d094      	beq.n	8009ce8 <_strtod_l+0xb0>
 8009dbe:	2600      	movs	r6, #0
 8009dc0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009dc2:	1c6a      	adds	r2, r5, #1
 8009dc4:	9215      	str	r2, [sp, #84]	; 0x54
 8009dc6:	786a      	ldrb	r2, [r5, #1]
 8009dc8:	2a2b      	cmp	r2, #43	; 0x2b
 8009dca:	d074      	beq.n	8009eb6 <_strtod_l+0x27e>
 8009dcc:	2a2d      	cmp	r2, #45	; 0x2d
 8009dce:	d078      	beq.n	8009ec2 <_strtod_l+0x28a>
 8009dd0:	f04f 0c00 	mov.w	ip, #0
 8009dd4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009dd8:	2909      	cmp	r1, #9
 8009dda:	d97f      	bls.n	8009edc <_strtod_l+0x2a4>
 8009ddc:	9515      	str	r5, [sp, #84]	; 0x54
 8009dde:	2700      	movs	r7, #0
 8009de0:	e09e      	b.n	8009f20 <_strtod_l+0x2e8>
 8009de2:	2300      	movs	r3, #0
 8009de4:	e7c8      	b.n	8009d78 <_strtod_l+0x140>
 8009de6:	f1bb 0f08 	cmp.w	fp, #8
 8009dea:	bfd8      	it	le
 8009dec:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009dee:	f100 0001 	add.w	r0, r0, #1
 8009df2:	bfda      	itte	le
 8009df4:	fb02 3301 	mlale	r3, r2, r1, r3
 8009df8:	9309      	strle	r3, [sp, #36]	; 0x24
 8009dfa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009dfe:	f10b 0b01 	add.w	fp, fp, #1
 8009e02:	9015      	str	r0, [sp, #84]	; 0x54
 8009e04:	e7c1      	b.n	8009d8a <_strtod_l+0x152>
 8009e06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e08:	1c5a      	adds	r2, r3, #1
 8009e0a:	9215      	str	r2, [sp, #84]	; 0x54
 8009e0c:	785a      	ldrb	r2, [r3, #1]
 8009e0e:	f1bb 0f00 	cmp.w	fp, #0
 8009e12:	d037      	beq.n	8009e84 <_strtod_l+0x24c>
 8009e14:	9005      	str	r0, [sp, #20]
 8009e16:	465e      	mov	r6, fp
 8009e18:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009e1c:	2b09      	cmp	r3, #9
 8009e1e:	d912      	bls.n	8009e46 <_strtod_l+0x20e>
 8009e20:	2301      	movs	r3, #1
 8009e22:	e7c4      	b.n	8009dae <_strtod_l+0x176>
 8009e24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e26:	1c5a      	adds	r2, r3, #1
 8009e28:	9215      	str	r2, [sp, #84]	; 0x54
 8009e2a:	785a      	ldrb	r2, [r3, #1]
 8009e2c:	3001      	adds	r0, #1
 8009e2e:	2a30      	cmp	r2, #48	; 0x30
 8009e30:	d0f8      	beq.n	8009e24 <_strtod_l+0x1ec>
 8009e32:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009e36:	2b08      	cmp	r3, #8
 8009e38:	f200 84c1 	bhi.w	800a7be <_strtod_l+0xb86>
 8009e3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e3e:	9005      	str	r0, [sp, #20]
 8009e40:	2000      	movs	r0, #0
 8009e42:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e44:	4606      	mov	r6, r0
 8009e46:	3a30      	subs	r2, #48	; 0x30
 8009e48:	f100 0301 	add.w	r3, r0, #1
 8009e4c:	d014      	beq.n	8009e78 <_strtod_l+0x240>
 8009e4e:	9905      	ldr	r1, [sp, #20]
 8009e50:	4419      	add	r1, r3
 8009e52:	9105      	str	r1, [sp, #20]
 8009e54:	4633      	mov	r3, r6
 8009e56:	eb00 0c06 	add.w	ip, r0, r6
 8009e5a:	210a      	movs	r1, #10
 8009e5c:	4563      	cmp	r3, ip
 8009e5e:	d113      	bne.n	8009e88 <_strtod_l+0x250>
 8009e60:	1833      	adds	r3, r6, r0
 8009e62:	2b08      	cmp	r3, #8
 8009e64:	f106 0601 	add.w	r6, r6, #1
 8009e68:	4406      	add	r6, r0
 8009e6a:	dc1a      	bgt.n	8009ea2 <_strtod_l+0x26a>
 8009e6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e6e:	230a      	movs	r3, #10
 8009e70:	fb03 2301 	mla	r3, r3, r1, r2
 8009e74:	9309      	str	r3, [sp, #36]	; 0x24
 8009e76:	2300      	movs	r3, #0
 8009e78:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009e7a:	1c51      	adds	r1, r2, #1
 8009e7c:	9115      	str	r1, [sp, #84]	; 0x54
 8009e7e:	7852      	ldrb	r2, [r2, #1]
 8009e80:	4618      	mov	r0, r3
 8009e82:	e7c9      	b.n	8009e18 <_strtod_l+0x1e0>
 8009e84:	4658      	mov	r0, fp
 8009e86:	e7d2      	b.n	8009e2e <_strtod_l+0x1f6>
 8009e88:	2b08      	cmp	r3, #8
 8009e8a:	f103 0301 	add.w	r3, r3, #1
 8009e8e:	dc03      	bgt.n	8009e98 <_strtod_l+0x260>
 8009e90:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009e92:	434f      	muls	r7, r1
 8009e94:	9709      	str	r7, [sp, #36]	; 0x24
 8009e96:	e7e1      	b.n	8009e5c <_strtod_l+0x224>
 8009e98:	2b10      	cmp	r3, #16
 8009e9a:	bfd8      	it	le
 8009e9c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009ea0:	e7dc      	b.n	8009e5c <_strtod_l+0x224>
 8009ea2:	2e10      	cmp	r6, #16
 8009ea4:	bfdc      	itt	le
 8009ea6:	230a      	movle	r3, #10
 8009ea8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009eac:	e7e3      	b.n	8009e76 <_strtod_l+0x23e>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	9305      	str	r3, [sp, #20]
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e780      	b.n	8009db8 <_strtod_l+0x180>
 8009eb6:	f04f 0c00 	mov.w	ip, #0
 8009eba:	1caa      	adds	r2, r5, #2
 8009ebc:	9215      	str	r2, [sp, #84]	; 0x54
 8009ebe:	78aa      	ldrb	r2, [r5, #2]
 8009ec0:	e788      	b.n	8009dd4 <_strtod_l+0x19c>
 8009ec2:	f04f 0c01 	mov.w	ip, #1
 8009ec6:	e7f8      	b.n	8009eba <_strtod_l+0x282>
 8009ec8:	0800dd14 	.word	0x0800dd14
 8009ecc:	0800dd11 	.word	0x0800dd11
 8009ed0:	7ff00000 	.word	0x7ff00000
 8009ed4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009ed6:	1c51      	adds	r1, r2, #1
 8009ed8:	9115      	str	r1, [sp, #84]	; 0x54
 8009eda:	7852      	ldrb	r2, [r2, #1]
 8009edc:	2a30      	cmp	r2, #48	; 0x30
 8009ede:	d0f9      	beq.n	8009ed4 <_strtod_l+0x29c>
 8009ee0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009ee4:	2908      	cmp	r1, #8
 8009ee6:	f63f af7a 	bhi.w	8009dde <_strtod_l+0x1a6>
 8009eea:	3a30      	subs	r2, #48	; 0x30
 8009eec:	9208      	str	r2, [sp, #32]
 8009eee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009ef0:	920c      	str	r2, [sp, #48]	; 0x30
 8009ef2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009ef4:	1c57      	adds	r7, r2, #1
 8009ef6:	9715      	str	r7, [sp, #84]	; 0x54
 8009ef8:	7852      	ldrb	r2, [r2, #1]
 8009efa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009efe:	f1be 0f09 	cmp.w	lr, #9
 8009f02:	d938      	bls.n	8009f76 <_strtod_l+0x33e>
 8009f04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009f06:	1a7f      	subs	r7, r7, r1
 8009f08:	2f08      	cmp	r7, #8
 8009f0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009f0e:	dc03      	bgt.n	8009f18 <_strtod_l+0x2e0>
 8009f10:	9908      	ldr	r1, [sp, #32]
 8009f12:	428f      	cmp	r7, r1
 8009f14:	bfa8      	it	ge
 8009f16:	460f      	movge	r7, r1
 8009f18:	f1bc 0f00 	cmp.w	ip, #0
 8009f1c:	d000      	beq.n	8009f20 <_strtod_l+0x2e8>
 8009f1e:	427f      	negs	r7, r7
 8009f20:	2e00      	cmp	r6, #0
 8009f22:	d14f      	bne.n	8009fc4 <_strtod_l+0x38c>
 8009f24:	9904      	ldr	r1, [sp, #16]
 8009f26:	4301      	orrs	r1, r0
 8009f28:	f47f aec1 	bne.w	8009cae <_strtod_l+0x76>
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	f47f aedb 	bne.w	8009ce8 <_strtod_l+0xb0>
 8009f32:	2a69      	cmp	r2, #105	; 0x69
 8009f34:	d029      	beq.n	8009f8a <_strtod_l+0x352>
 8009f36:	dc26      	bgt.n	8009f86 <_strtod_l+0x34e>
 8009f38:	2a49      	cmp	r2, #73	; 0x49
 8009f3a:	d026      	beq.n	8009f8a <_strtod_l+0x352>
 8009f3c:	2a4e      	cmp	r2, #78	; 0x4e
 8009f3e:	f47f aed3 	bne.w	8009ce8 <_strtod_l+0xb0>
 8009f42:	499b      	ldr	r1, [pc, #620]	; (800a1b0 <_strtod_l+0x578>)
 8009f44:	a815      	add	r0, sp, #84	; 0x54
 8009f46:	f001 ff21 	bl	800bd8c <__match>
 8009f4a:	2800      	cmp	r0, #0
 8009f4c:	f43f aecc 	beq.w	8009ce8 <_strtod_l+0xb0>
 8009f50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	2b28      	cmp	r3, #40	; 0x28
 8009f56:	d12f      	bne.n	8009fb8 <_strtod_l+0x380>
 8009f58:	4996      	ldr	r1, [pc, #600]	; (800a1b4 <_strtod_l+0x57c>)
 8009f5a:	aa18      	add	r2, sp, #96	; 0x60
 8009f5c:	a815      	add	r0, sp, #84	; 0x54
 8009f5e:	f001 ff29 	bl	800bdb4 <__hexnan>
 8009f62:	2805      	cmp	r0, #5
 8009f64:	d128      	bne.n	8009fb8 <_strtod_l+0x380>
 8009f66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009f68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009f6c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009f70:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009f74:	e69b      	b.n	8009cae <_strtod_l+0x76>
 8009f76:	9f08      	ldr	r7, [sp, #32]
 8009f78:	210a      	movs	r1, #10
 8009f7a:	fb01 2107 	mla	r1, r1, r7, r2
 8009f7e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009f82:	9208      	str	r2, [sp, #32]
 8009f84:	e7b5      	b.n	8009ef2 <_strtod_l+0x2ba>
 8009f86:	2a6e      	cmp	r2, #110	; 0x6e
 8009f88:	e7d9      	b.n	8009f3e <_strtod_l+0x306>
 8009f8a:	498b      	ldr	r1, [pc, #556]	; (800a1b8 <_strtod_l+0x580>)
 8009f8c:	a815      	add	r0, sp, #84	; 0x54
 8009f8e:	f001 fefd 	bl	800bd8c <__match>
 8009f92:	2800      	cmp	r0, #0
 8009f94:	f43f aea8 	beq.w	8009ce8 <_strtod_l+0xb0>
 8009f98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f9a:	4988      	ldr	r1, [pc, #544]	; (800a1bc <_strtod_l+0x584>)
 8009f9c:	3b01      	subs	r3, #1
 8009f9e:	a815      	add	r0, sp, #84	; 0x54
 8009fa0:	9315      	str	r3, [sp, #84]	; 0x54
 8009fa2:	f001 fef3 	bl	800bd8c <__match>
 8009fa6:	b910      	cbnz	r0, 8009fae <_strtod_l+0x376>
 8009fa8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009faa:	3301      	adds	r3, #1
 8009fac:	9315      	str	r3, [sp, #84]	; 0x54
 8009fae:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a1cc <_strtod_l+0x594>
 8009fb2:	f04f 0800 	mov.w	r8, #0
 8009fb6:	e67a      	b.n	8009cae <_strtod_l+0x76>
 8009fb8:	4881      	ldr	r0, [pc, #516]	; (800a1c0 <_strtod_l+0x588>)
 8009fba:	f000 fdb5 	bl	800ab28 <nan>
 8009fbe:	ec59 8b10 	vmov	r8, r9, d0
 8009fc2:	e674      	b.n	8009cae <_strtod_l+0x76>
 8009fc4:	9b05      	ldr	r3, [sp, #20]
 8009fc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fc8:	1afb      	subs	r3, r7, r3
 8009fca:	f1bb 0f00 	cmp.w	fp, #0
 8009fce:	bf08      	it	eq
 8009fd0:	46b3      	moveq	fp, r6
 8009fd2:	2e10      	cmp	r6, #16
 8009fd4:	9308      	str	r3, [sp, #32]
 8009fd6:	4635      	mov	r5, r6
 8009fd8:	bfa8      	it	ge
 8009fda:	2510      	movge	r5, #16
 8009fdc:	f7f6 fa9a 	bl	8000514 <__aeabi_ui2d>
 8009fe0:	2e09      	cmp	r6, #9
 8009fe2:	4680      	mov	r8, r0
 8009fe4:	4689      	mov	r9, r1
 8009fe6:	dd13      	ble.n	800a010 <_strtod_l+0x3d8>
 8009fe8:	4b76      	ldr	r3, [pc, #472]	; (800a1c4 <_strtod_l+0x58c>)
 8009fea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009fee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009ff2:	f7f6 fb09 	bl	8000608 <__aeabi_dmul>
 8009ff6:	4680      	mov	r8, r0
 8009ff8:	4650      	mov	r0, sl
 8009ffa:	4689      	mov	r9, r1
 8009ffc:	f7f6 fa8a 	bl	8000514 <__aeabi_ui2d>
 800a000:	4602      	mov	r2, r0
 800a002:	460b      	mov	r3, r1
 800a004:	4640      	mov	r0, r8
 800a006:	4649      	mov	r1, r9
 800a008:	f7f6 f948 	bl	800029c <__adddf3>
 800a00c:	4680      	mov	r8, r0
 800a00e:	4689      	mov	r9, r1
 800a010:	2e0f      	cmp	r6, #15
 800a012:	dc38      	bgt.n	800a086 <_strtod_l+0x44e>
 800a014:	9b08      	ldr	r3, [sp, #32]
 800a016:	2b00      	cmp	r3, #0
 800a018:	f43f ae49 	beq.w	8009cae <_strtod_l+0x76>
 800a01c:	dd24      	ble.n	800a068 <_strtod_l+0x430>
 800a01e:	2b16      	cmp	r3, #22
 800a020:	dc0b      	bgt.n	800a03a <_strtod_l+0x402>
 800a022:	4968      	ldr	r1, [pc, #416]	; (800a1c4 <_strtod_l+0x58c>)
 800a024:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a028:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a02c:	4642      	mov	r2, r8
 800a02e:	464b      	mov	r3, r9
 800a030:	f7f6 faea 	bl	8000608 <__aeabi_dmul>
 800a034:	4680      	mov	r8, r0
 800a036:	4689      	mov	r9, r1
 800a038:	e639      	b.n	8009cae <_strtod_l+0x76>
 800a03a:	9a08      	ldr	r2, [sp, #32]
 800a03c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a040:	4293      	cmp	r3, r2
 800a042:	db20      	blt.n	800a086 <_strtod_l+0x44e>
 800a044:	4c5f      	ldr	r4, [pc, #380]	; (800a1c4 <_strtod_l+0x58c>)
 800a046:	f1c6 060f 	rsb	r6, r6, #15
 800a04a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a04e:	4642      	mov	r2, r8
 800a050:	464b      	mov	r3, r9
 800a052:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a056:	f7f6 fad7 	bl	8000608 <__aeabi_dmul>
 800a05a:	9b08      	ldr	r3, [sp, #32]
 800a05c:	1b9e      	subs	r6, r3, r6
 800a05e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a062:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a066:	e7e3      	b.n	800a030 <_strtod_l+0x3f8>
 800a068:	9b08      	ldr	r3, [sp, #32]
 800a06a:	3316      	adds	r3, #22
 800a06c:	db0b      	blt.n	800a086 <_strtod_l+0x44e>
 800a06e:	9b05      	ldr	r3, [sp, #20]
 800a070:	1bdf      	subs	r7, r3, r7
 800a072:	4b54      	ldr	r3, [pc, #336]	; (800a1c4 <_strtod_l+0x58c>)
 800a074:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a07c:	4640      	mov	r0, r8
 800a07e:	4649      	mov	r1, r9
 800a080:	f7f6 fbec 	bl	800085c <__aeabi_ddiv>
 800a084:	e7d6      	b.n	800a034 <_strtod_l+0x3fc>
 800a086:	9b08      	ldr	r3, [sp, #32]
 800a088:	1b75      	subs	r5, r6, r5
 800a08a:	441d      	add	r5, r3
 800a08c:	2d00      	cmp	r5, #0
 800a08e:	dd70      	ble.n	800a172 <_strtod_l+0x53a>
 800a090:	f015 030f 	ands.w	r3, r5, #15
 800a094:	d00a      	beq.n	800a0ac <_strtod_l+0x474>
 800a096:	494b      	ldr	r1, [pc, #300]	; (800a1c4 <_strtod_l+0x58c>)
 800a098:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a09c:	4642      	mov	r2, r8
 800a09e:	464b      	mov	r3, r9
 800a0a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0a4:	f7f6 fab0 	bl	8000608 <__aeabi_dmul>
 800a0a8:	4680      	mov	r8, r0
 800a0aa:	4689      	mov	r9, r1
 800a0ac:	f035 050f 	bics.w	r5, r5, #15
 800a0b0:	d04d      	beq.n	800a14e <_strtod_l+0x516>
 800a0b2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a0b6:	dd22      	ble.n	800a0fe <_strtod_l+0x4c6>
 800a0b8:	2500      	movs	r5, #0
 800a0ba:	46ab      	mov	fp, r5
 800a0bc:	9509      	str	r5, [sp, #36]	; 0x24
 800a0be:	9505      	str	r5, [sp, #20]
 800a0c0:	2322      	movs	r3, #34	; 0x22
 800a0c2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a1cc <_strtod_l+0x594>
 800a0c6:	6023      	str	r3, [r4, #0]
 800a0c8:	f04f 0800 	mov.w	r8, #0
 800a0cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f43f aded 	beq.w	8009cae <_strtod_l+0x76>
 800a0d4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	f002 fa14 	bl	800c504 <_Bfree>
 800a0dc:	9905      	ldr	r1, [sp, #20]
 800a0de:	4620      	mov	r0, r4
 800a0e0:	f002 fa10 	bl	800c504 <_Bfree>
 800a0e4:	4659      	mov	r1, fp
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	f002 fa0c 	bl	800c504 <_Bfree>
 800a0ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	f002 fa08 	bl	800c504 <_Bfree>
 800a0f4:	4629      	mov	r1, r5
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f002 fa04 	bl	800c504 <_Bfree>
 800a0fc:	e5d7      	b.n	8009cae <_strtod_l+0x76>
 800a0fe:	4b32      	ldr	r3, [pc, #200]	; (800a1c8 <_strtod_l+0x590>)
 800a100:	9304      	str	r3, [sp, #16]
 800a102:	2300      	movs	r3, #0
 800a104:	112d      	asrs	r5, r5, #4
 800a106:	4640      	mov	r0, r8
 800a108:	4649      	mov	r1, r9
 800a10a:	469a      	mov	sl, r3
 800a10c:	2d01      	cmp	r5, #1
 800a10e:	dc21      	bgt.n	800a154 <_strtod_l+0x51c>
 800a110:	b10b      	cbz	r3, 800a116 <_strtod_l+0x4de>
 800a112:	4680      	mov	r8, r0
 800a114:	4689      	mov	r9, r1
 800a116:	492c      	ldr	r1, [pc, #176]	; (800a1c8 <_strtod_l+0x590>)
 800a118:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a11c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a120:	4642      	mov	r2, r8
 800a122:	464b      	mov	r3, r9
 800a124:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a128:	f7f6 fa6e 	bl	8000608 <__aeabi_dmul>
 800a12c:	4b27      	ldr	r3, [pc, #156]	; (800a1cc <_strtod_l+0x594>)
 800a12e:	460a      	mov	r2, r1
 800a130:	400b      	ands	r3, r1
 800a132:	4927      	ldr	r1, [pc, #156]	; (800a1d0 <_strtod_l+0x598>)
 800a134:	428b      	cmp	r3, r1
 800a136:	4680      	mov	r8, r0
 800a138:	d8be      	bhi.n	800a0b8 <_strtod_l+0x480>
 800a13a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a13e:	428b      	cmp	r3, r1
 800a140:	bf86      	itte	hi
 800a142:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a1d4 <_strtod_l+0x59c>
 800a146:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800a14a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a14e:	2300      	movs	r3, #0
 800a150:	9304      	str	r3, [sp, #16]
 800a152:	e07b      	b.n	800a24c <_strtod_l+0x614>
 800a154:	07ea      	lsls	r2, r5, #31
 800a156:	d505      	bpl.n	800a164 <_strtod_l+0x52c>
 800a158:	9b04      	ldr	r3, [sp, #16]
 800a15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15e:	f7f6 fa53 	bl	8000608 <__aeabi_dmul>
 800a162:	2301      	movs	r3, #1
 800a164:	9a04      	ldr	r2, [sp, #16]
 800a166:	3208      	adds	r2, #8
 800a168:	f10a 0a01 	add.w	sl, sl, #1
 800a16c:	106d      	asrs	r5, r5, #1
 800a16e:	9204      	str	r2, [sp, #16]
 800a170:	e7cc      	b.n	800a10c <_strtod_l+0x4d4>
 800a172:	d0ec      	beq.n	800a14e <_strtod_l+0x516>
 800a174:	426d      	negs	r5, r5
 800a176:	f015 020f 	ands.w	r2, r5, #15
 800a17a:	d00a      	beq.n	800a192 <_strtod_l+0x55a>
 800a17c:	4b11      	ldr	r3, [pc, #68]	; (800a1c4 <_strtod_l+0x58c>)
 800a17e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a182:	4640      	mov	r0, r8
 800a184:	4649      	mov	r1, r9
 800a186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18a:	f7f6 fb67 	bl	800085c <__aeabi_ddiv>
 800a18e:	4680      	mov	r8, r0
 800a190:	4689      	mov	r9, r1
 800a192:	112d      	asrs	r5, r5, #4
 800a194:	d0db      	beq.n	800a14e <_strtod_l+0x516>
 800a196:	2d1f      	cmp	r5, #31
 800a198:	dd1e      	ble.n	800a1d8 <_strtod_l+0x5a0>
 800a19a:	2500      	movs	r5, #0
 800a19c:	46ab      	mov	fp, r5
 800a19e:	9509      	str	r5, [sp, #36]	; 0x24
 800a1a0:	9505      	str	r5, [sp, #20]
 800a1a2:	2322      	movs	r3, #34	; 0x22
 800a1a4:	f04f 0800 	mov.w	r8, #0
 800a1a8:	f04f 0900 	mov.w	r9, #0
 800a1ac:	6023      	str	r3, [r4, #0]
 800a1ae:	e78d      	b.n	800a0cc <_strtod_l+0x494>
 800a1b0:	0800dce5 	.word	0x0800dce5
 800a1b4:	0800dd28 	.word	0x0800dd28
 800a1b8:	0800dcdd 	.word	0x0800dcdd
 800a1bc:	0800de74 	.word	0x0800de74
 800a1c0:	0800e0ff 	.word	0x0800e0ff
 800a1c4:	0800dff0 	.word	0x0800dff0
 800a1c8:	0800dfc8 	.word	0x0800dfc8
 800a1cc:	7ff00000 	.word	0x7ff00000
 800a1d0:	7ca00000 	.word	0x7ca00000
 800a1d4:	7fefffff 	.word	0x7fefffff
 800a1d8:	f015 0310 	ands.w	r3, r5, #16
 800a1dc:	bf18      	it	ne
 800a1de:	236a      	movne	r3, #106	; 0x6a
 800a1e0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800a584 <_strtod_l+0x94c>
 800a1e4:	9304      	str	r3, [sp, #16]
 800a1e6:	4640      	mov	r0, r8
 800a1e8:	4649      	mov	r1, r9
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	07ea      	lsls	r2, r5, #31
 800a1ee:	d504      	bpl.n	800a1fa <_strtod_l+0x5c2>
 800a1f0:	e9da 2300 	ldrd	r2, r3, [sl]
 800a1f4:	f7f6 fa08 	bl	8000608 <__aeabi_dmul>
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	106d      	asrs	r5, r5, #1
 800a1fc:	f10a 0a08 	add.w	sl, sl, #8
 800a200:	d1f4      	bne.n	800a1ec <_strtod_l+0x5b4>
 800a202:	b10b      	cbz	r3, 800a208 <_strtod_l+0x5d0>
 800a204:	4680      	mov	r8, r0
 800a206:	4689      	mov	r9, r1
 800a208:	9b04      	ldr	r3, [sp, #16]
 800a20a:	b1bb      	cbz	r3, 800a23c <_strtod_l+0x604>
 800a20c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a210:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a214:	2b00      	cmp	r3, #0
 800a216:	4649      	mov	r1, r9
 800a218:	dd10      	ble.n	800a23c <_strtod_l+0x604>
 800a21a:	2b1f      	cmp	r3, #31
 800a21c:	f340 811e 	ble.w	800a45c <_strtod_l+0x824>
 800a220:	2b34      	cmp	r3, #52	; 0x34
 800a222:	bfde      	ittt	le
 800a224:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800a228:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a22c:	4093      	lslle	r3, r2
 800a22e:	f04f 0800 	mov.w	r8, #0
 800a232:	bfcc      	ite	gt
 800a234:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a238:	ea03 0901 	andle.w	r9, r3, r1
 800a23c:	2200      	movs	r2, #0
 800a23e:	2300      	movs	r3, #0
 800a240:	4640      	mov	r0, r8
 800a242:	4649      	mov	r1, r9
 800a244:	f7f6 fc48 	bl	8000ad8 <__aeabi_dcmpeq>
 800a248:	2800      	cmp	r0, #0
 800a24a:	d1a6      	bne.n	800a19a <_strtod_l+0x562>
 800a24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a24e:	9300      	str	r3, [sp, #0]
 800a250:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a252:	4633      	mov	r3, r6
 800a254:	465a      	mov	r2, fp
 800a256:	4620      	mov	r0, r4
 800a258:	f002 f9bc 	bl	800c5d4 <__s2b>
 800a25c:	9009      	str	r0, [sp, #36]	; 0x24
 800a25e:	2800      	cmp	r0, #0
 800a260:	f43f af2a 	beq.w	800a0b8 <_strtod_l+0x480>
 800a264:	9a08      	ldr	r2, [sp, #32]
 800a266:	9b05      	ldr	r3, [sp, #20]
 800a268:	2a00      	cmp	r2, #0
 800a26a:	eba3 0307 	sub.w	r3, r3, r7
 800a26e:	bfa8      	it	ge
 800a270:	2300      	movge	r3, #0
 800a272:	930c      	str	r3, [sp, #48]	; 0x30
 800a274:	2500      	movs	r5, #0
 800a276:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a27a:	9312      	str	r3, [sp, #72]	; 0x48
 800a27c:	46ab      	mov	fp, r5
 800a27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a280:	4620      	mov	r0, r4
 800a282:	6859      	ldr	r1, [r3, #4]
 800a284:	f002 f8fe 	bl	800c484 <_Balloc>
 800a288:	9005      	str	r0, [sp, #20]
 800a28a:	2800      	cmp	r0, #0
 800a28c:	f43f af18 	beq.w	800a0c0 <_strtod_l+0x488>
 800a290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a292:	691a      	ldr	r2, [r3, #16]
 800a294:	3202      	adds	r2, #2
 800a296:	f103 010c 	add.w	r1, r3, #12
 800a29a:	0092      	lsls	r2, r2, #2
 800a29c:	300c      	adds	r0, #12
 800a29e:	f000 fc32 	bl	800ab06 <memcpy>
 800a2a2:	ec49 8b10 	vmov	d0, r8, r9
 800a2a6:	aa18      	add	r2, sp, #96	; 0x60
 800a2a8:	a917      	add	r1, sp, #92	; 0x5c
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	f002 fcc6 	bl	800cc3c <__d2b>
 800a2b0:	ec49 8b18 	vmov	d8, r8, r9
 800a2b4:	9016      	str	r0, [sp, #88]	; 0x58
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	f43f af02 	beq.w	800a0c0 <_strtod_l+0x488>
 800a2bc:	2101      	movs	r1, #1
 800a2be:	4620      	mov	r0, r4
 800a2c0:	f002 fa20 	bl	800c704 <__i2b>
 800a2c4:	4683      	mov	fp, r0
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	f43f aefa 	beq.w	800a0c0 <_strtod_l+0x488>
 800a2cc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a2ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a2d0:	2e00      	cmp	r6, #0
 800a2d2:	bfab      	itete	ge
 800a2d4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a2d6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a2d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a2da:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a2de:	bfac      	ite	ge
 800a2e0:	eb06 0a03 	addge.w	sl, r6, r3
 800a2e4:	1b9f      	sublt	r7, r3, r6
 800a2e6:	9b04      	ldr	r3, [sp, #16]
 800a2e8:	1af6      	subs	r6, r6, r3
 800a2ea:	4416      	add	r6, r2
 800a2ec:	4ba0      	ldr	r3, [pc, #640]	; (800a570 <_strtod_l+0x938>)
 800a2ee:	3e01      	subs	r6, #1
 800a2f0:	429e      	cmp	r6, r3
 800a2f2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a2f6:	f280 80c4 	bge.w	800a482 <_strtod_l+0x84a>
 800a2fa:	1b9b      	subs	r3, r3, r6
 800a2fc:	2b1f      	cmp	r3, #31
 800a2fe:	eba2 0203 	sub.w	r2, r2, r3
 800a302:	f04f 0101 	mov.w	r1, #1
 800a306:	f300 80b0 	bgt.w	800a46a <_strtod_l+0x832>
 800a30a:	fa01 f303 	lsl.w	r3, r1, r3
 800a30e:	930e      	str	r3, [sp, #56]	; 0x38
 800a310:	2300      	movs	r3, #0
 800a312:	930d      	str	r3, [sp, #52]	; 0x34
 800a314:	eb0a 0602 	add.w	r6, sl, r2
 800a318:	9b04      	ldr	r3, [sp, #16]
 800a31a:	45b2      	cmp	sl, r6
 800a31c:	4417      	add	r7, r2
 800a31e:	441f      	add	r7, r3
 800a320:	4653      	mov	r3, sl
 800a322:	bfa8      	it	ge
 800a324:	4633      	movge	r3, r6
 800a326:	42bb      	cmp	r3, r7
 800a328:	bfa8      	it	ge
 800a32a:	463b      	movge	r3, r7
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	bfc2      	ittt	gt
 800a330:	1af6      	subgt	r6, r6, r3
 800a332:	1aff      	subgt	r7, r7, r3
 800a334:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	dd17      	ble.n	800a36e <_strtod_l+0x736>
 800a33e:	4659      	mov	r1, fp
 800a340:	461a      	mov	r2, r3
 800a342:	4620      	mov	r0, r4
 800a344:	f002 fa9e 	bl	800c884 <__pow5mult>
 800a348:	4683      	mov	fp, r0
 800a34a:	2800      	cmp	r0, #0
 800a34c:	f43f aeb8 	beq.w	800a0c0 <_strtod_l+0x488>
 800a350:	4601      	mov	r1, r0
 800a352:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a354:	4620      	mov	r0, r4
 800a356:	f002 f9eb 	bl	800c730 <__multiply>
 800a35a:	900b      	str	r0, [sp, #44]	; 0x2c
 800a35c:	2800      	cmp	r0, #0
 800a35e:	f43f aeaf 	beq.w	800a0c0 <_strtod_l+0x488>
 800a362:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a364:	4620      	mov	r0, r4
 800a366:	f002 f8cd 	bl	800c504 <_Bfree>
 800a36a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a36c:	9316      	str	r3, [sp, #88]	; 0x58
 800a36e:	2e00      	cmp	r6, #0
 800a370:	f300 808c 	bgt.w	800a48c <_strtod_l+0x854>
 800a374:	9b08      	ldr	r3, [sp, #32]
 800a376:	2b00      	cmp	r3, #0
 800a378:	dd08      	ble.n	800a38c <_strtod_l+0x754>
 800a37a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a37c:	9905      	ldr	r1, [sp, #20]
 800a37e:	4620      	mov	r0, r4
 800a380:	f002 fa80 	bl	800c884 <__pow5mult>
 800a384:	9005      	str	r0, [sp, #20]
 800a386:	2800      	cmp	r0, #0
 800a388:	f43f ae9a 	beq.w	800a0c0 <_strtod_l+0x488>
 800a38c:	2f00      	cmp	r7, #0
 800a38e:	dd08      	ble.n	800a3a2 <_strtod_l+0x76a>
 800a390:	9905      	ldr	r1, [sp, #20]
 800a392:	463a      	mov	r2, r7
 800a394:	4620      	mov	r0, r4
 800a396:	f002 facf 	bl	800c938 <__lshift>
 800a39a:	9005      	str	r0, [sp, #20]
 800a39c:	2800      	cmp	r0, #0
 800a39e:	f43f ae8f 	beq.w	800a0c0 <_strtod_l+0x488>
 800a3a2:	f1ba 0f00 	cmp.w	sl, #0
 800a3a6:	dd08      	ble.n	800a3ba <_strtod_l+0x782>
 800a3a8:	4659      	mov	r1, fp
 800a3aa:	4652      	mov	r2, sl
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	f002 fac3 	bl	800c938 <__lshift>
 800a3b2:	4683      	mov	fp, r0
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	f43f ae83 	beq.w	800a0c0 <_strtod_l+0x488>
 800a3ba:	9a05      	ldr	r2, [sp, #20]
 800a3bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a3be:	4620      	mov	r0, r4
 800a3c0:	f002 fb42 	bl	800ca48 <__mdiff>
 800a3c4:	4605      	mov	r5, r0
 800a3c6:	2800      	cmp	r0, #0
 800a3c8:	f43f ae7a 	beq.w	800a0c0 <_strtod_l+0x488>
 800a3cc:	68c3      	ldr	r3, [r0, #12]
 800a3ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	60c3      	str	r3, [r0, #12]
 800a3d4:	4659      	mov	r1, fp
 800a3d6:	f002 fb1b 	bl	800ca10 <__mcmp>
 800a3da:	2800      	cmp	r0, #0
 800a3dc:	da60      	bge.n	800a4a0 <_strtod_l+0x868>
 800a3de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3e0:	ea53 0308 	orrs.w	r3, r3, r8
 800a3e4:	f040 8084 	bne.w	800a4f0 <_strtod_l+0x8b8>
 800a3e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d17f      	bne.n	800a4f0 <_strtod_l+0x8b8>
 800a3f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a3f4:	0d1b      	lsrs	r3, r3, #20
 800a3f6:	051b      	lsls	r3, r3, #20
 800a3f8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a3fc:	d978      	bls.n	800a4f0 <_strtod_l+0x8b8>
 800a3fe:	696b      	ldr	r3, [r5, #20]
 800a400:	b913      	cbnz	r3, 800a408 <_strtod_l+0x7d0>
 800a402:	692b      	ldr	r3, [r5, #16]
 800a404:	2b01      	cmp	r3, #1
 800a406:	dd73      	ble.n	800a4f0 <_strtod_l+0x8b8>
 800a408:	4629      	mov	r1, r5
 800a40a:	2201      	movs	r2, #1
 800a40c:	4620      	mov	r0, r4
 800a40e:	f002 fa93 	bl	800c938 <__lshift>
 800a412:	4659      	mov	r1, fp
 800a414:	4605      	mov	r5, r0
 800a416:	f002 fafb 	bl	800ca10 <__mcmp>
 800a41a:	2800      	cmp	r0, #0
 800a41c:	dd68      	ble.n	800a4f0 <_strtod_l+0x8b8>
 800a41e:	9904      	ldr	r1, [sp, #16]
 800a420:	4a54      	ldr	r2, [pc, #336]	; (800a574 <_strtod_l+0x93c>)
 800a422:	464b      	mov	r3, r9
 800a424:	2900      	cmp	r1, #0
 800a426:	f000 8084 	beq.w	800a532 <_strtod_l+0x8fa>
 800a42a:	ea02 0109 	and.w	r1, r2, r9
 800a42e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a432:	dc7e      	bgt.n	800a532 <_strtod_l+0x8fa>
 800a434:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a438:	f77f aeb3 	ble.w	800a1a2 <_strtod_l+0x56a>
 800a43c:	4b4e      	ldr	r3, [pc, #312]	; (800a578 <_strtod_l+0x940>)
 800a43e:	4640      	mov	r0, r8
 800a440:	4649      	mov	r1, r9
 800a442:	2200      	movs	r2, #0
 800a444:	f7f6 f8e0 	bl	8000608 <__aeabi_dmul>
 800a448:	4b4a      	ldr	r3, [pc, #296]	; (800a574 <_strtod_l+0x93c>)
 800a44a:	400b      	ands	r3, r1
 800a44c:	4680      	mov	r8, r0
 800a44e:	4689      	mov	r9, r1
 800a450:	2b00      	cmp	r3, #0
 800a452:	f47f ae3f 	bne.w	800a0d4 <_strtod_l+0x49c>
 800a456:	2322      	movs	r3, #34	; 0x22
 800a458:	6023      	str	r3, [r4, #0]
 800a45a:	e63b      	b.n	800a0d4 <_strtod_l+0x49c>
 800a45c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a460:	fa02 f303 	lsl.w	r3, r2, r3
 800a464:	ea03 0808 	and.w	r8, r3, r8
 800a468:	e6e8      	b.n	800a23c <_strtod_l+0x604>
 800a46a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a46e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a472:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a476:	36e2      	adds	r6, #226	; 0xe2
 800a478:	fa01 f306 	lsl.w	r3, r1, r6
 800a47c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800a480:	e748      	b.n	800a314 <_strtod_l+0x6dc>
 800a482:	2100      	movs	r1, #0
 800a484:	2301      	movs	r3, #1
 800a486:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800a48a:	e743      	b.n	800a314 <_strtod_l+0x6dc>
 800a48c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a48e:	4632      	mov	r2, r6
 800a490:	4620      	mov	r0, r4
 800a492:	f002 fa51 	bl	800c938 <__lshift>
 800a496:	9016      	str	r0, [sp, #88]	; 0x58
 800a498:	2800      	cmp	r0, #0
 800a49a:	f47f af6b 	bne.w	800a374 <_strtod_l+0x73c>
 800a49e:	e60f      	b.n	800a0c0 <_strtod_l+0x488>
 800a4a0:	46ca      	mov	sl, r9
 800a4a2:	d171      	bne.n	800a588 <_strtod_l+0x950>
 800a4a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a4a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4aa:	b352      	cbz	r2, 800a502 <_strtod_l+0x8ca>
 800a4ac:	4a33      	ldr	r2, [pc, #204]	; (800a57c <_strtod_l+0x944>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d12a      	bne.n	800a508 <_strtod_l+0x8d0>
 800a4b2:	9b04      	ldr	r3, [sp, #16]
 800a4b4:	4641      	mov	r1, r8
 800a4b6:	b1fb      	cbz	r3, 800a4f8 <_strtod_l+0x8c0>
 800a4b8:	4b2e      	ldr	r3, [pc, #184]	; (800a574 <_strtod_l+0x93c>)
 800a4ba:	ea09 0303 	and.w	r3, r9, r3
 800a4be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a4c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4c6:	d81a      	bhi.n	800a4fe <_strtod_l+0x8c6>
 800a4c8:	0d1b      	lsrs	r3, r3, #20
 800a4ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a4ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a4d2:	4299      	cmp	r1, r3
 800a4d4:	d118      	bne.n	800a508 <_strtod_l+0x8d0>
 800a4d6:	4b2a      	ldr	r3, [pc, #168]	; (800a580 <_strtod_l+0x948>)
 800a4d8:	459a      	cmp	sl, r3
 800a4da:	d102      	bne.n	800a4e2 <_strtod_l+0x8aa>
 800a4dc:	3101      	adds	r1, #1
 800a4de:	f43f adef 	beq.w	800a0c0 <_strtod_l+0x488>
 800a4e2:	4b24      	ldr	r3, [pc, #144]	; (800a574 <_strtod_l+0x93c>)
 800a4e4:	ea0a 0303 	and.w	r3, sl, r3
 800a4e8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a4ec:	f04f 0800 	mov.w	r8, #0
 800a4f0:	9b04      	ldr	r3, [sp, #16]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d1a2      	bne.n	800a43c <_strtod_l+0x804>
 800a4f6:	e5ed      	b.n	800a0d4 <_strtod_l+0x49c>
 800a4f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a4fc:	e7e9      	b.n	800a4d2 <_strtod_l+0x89a>
 800a4fe:	4613      	mov	r3, r2
 800a500:	e7e7      	b.n	800a4d2 <_strtod_l+0x89a>
 800a502:	ea53 0308 	orrs.w	r3, r3, r8
 800a506:	d08a      	beq.n	800a41e <_strtod_l+0x7e6>
 800a508:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a50a:	b1e3      	cbz	r3, 800a546 <_strtod_l+0x90e>
 800a50c:	ea13 0f0a 	tst.w	r3, sl
 800a510:	d0ee      	beq.n	800a4f0 <_strtod_l+0x8b8>
 800a512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a514:	9a04      	ldr	r2, [sp, #16]
 800a516:	4640      	mov	r0, r8
 800a518:	4649      	mov	r1, r9
 800a51a:	b1c3      	cbz	r3, 800a54e <_strtod_l+0x916>
 800a51c:	f7ff fb6e 	bl	8009bfc <sulp>
 800a520:	4602      	mov	r2, r0
 800a522:	460b      	mov	r3, r1
 800a524:	ec51 0b18 	vmov	r0, r1, d8
 800a528:	f7f5 feb8 	bl	800029c <__adddf3>
 800a52c:	4680      	mov	r8, r0
 800a52e:	4689      	mov	r9, r1
 800a530:	e7de      	b.n	800a4f0 <_strtod_l+0x8b8>
 800a532:	4013      	ands	r3, r2
 800a534:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a538:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a53c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a540:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800a544:	e7d4      	b.n	800a4f0 <_strtod_l+0x8b8>
 800a546:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a548:	ea13 0f08 	tst.w	r3, r8
 800a54c:	e7e0      	b.n	800a510 <_strtod_l+0x8d8>
 800a54e:	f7ff fb55 	bl	8009bfc <sulp>
 800a552:	4602      	mov	r2, r0
 800a554:	460b      	mov	r3, r1
 800a556:	ec51 0b18 	vmov	r0, r1, d8
 800a55a:	f7f5 fe9d 	bl	8000298 <__aeabi_dsub>
 800a55e:	2200      	movs	r2, #0
 800a560:	2300      	movs	r3, #0
 800a562:	4680      	mov	r8, r0
 800a564:	4689      	mov	r9, r1
 800a566:	f7f6 fab7 	bl	8000ad8 <__aeabi_dcmpeq>
 800a56a:	2800      	cmp	r0, #0
 800a56c:	d0c0      	beq.n	800a4f0 <_strtod_l+0x8b8>
 800a56e:	e618      	b.n	800a1a2 <_strtod_l+0x56a>
 800a570:	fffffc02 	.word	0xfffffc02
 800a574:	7ff00000 	.word	0x7ff00000
 800a578:	39500000 	.word	0x39500000
 800a57c:	000fffff 	.word	0x000fffff
 800a580:	7fefffff 	.word	0x7fefffff
 800a584:	0800dd40 	.word	0x0800dd40
 800a588:	4659      	mov	r1, fp
 800a58a:	4628      	mov	r0, r5
 800a58c:	f002 fbb0 	bl	800ccf0 <__ratio>
 800a590:	ec57 6b10 	vmov	r6, r7, d0
 800a594:	ee10 0a10 	vmov	r0, s0
 800a598:	2200      	movs	r2, #0
 800a59a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a59e:	4639      	mov	r1, r7
 800a5a0:	f7f6 faae 	bl	8000b00 <__aeabi_dcmple>
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	d071      	beq.n	800a68c <_strtod_l+0xa54>
 800a5a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d17c      	bne.n	800a6a8 <_strtod_l+0xa70>
 800a5ae:	f1b8 0f00 	cmp.w	r8, #0
 800a5b2:	d15a      	bne.n	800a66a <_strtod_l+0xa32>
 800a5b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d15d      	bne.n	800a678 <_strtod_l+0xa40>
 800a5bc:	4b90      	ldr	r3, [pc, #576]	; (800a800 <_strtod_l+0xbc8>)
 800a5be:	2200      	movs	r2, #0
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	4639      	mov	r1, r7
 800a5c4:	f7f6 fa92 	bl	8000aec <__aeabi_dcmplt>
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	d15c      	bne.n	800a686 <_strtod_l+0xa4e>
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	4639      	mov	r1, r7
 800a5d0:	4b8c      	ldr	r3, [pc, #560]	; (800a804 <_strtod_l+0xbcc>)
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	f7f6 f818 	bl	8000608 <__aeabi_dmul>
 800a5d8:	4606      	mov	r6, r0
 800a5da:	460f      	mov	r7, r1
 800a5dc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a5e0:	9606      	str	r6, [sp, #24]
 800a5e2:	9307      	str	r3, [sp, #28]
 800a5e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a5e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a5ec:	4b86      	ldr	r3, [pc, #536]	; (800a808 <_strtod_l+0xbd0>)
 800a5ee:	ea0a 0303 	and.w	r3, sl, r3
 800a5f2:	930d      	str	r3, [sp, #52]	; 0x34
 800a5f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a5f6:	4b85      	ldr	r3, [pc, #532]	; (800a80c <_strtod_l+0xbd4>)
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	f040 8090 	bne.w	800a71e <_strtod_l+0xae6>
 800a5fe:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a602:	ec49 8b10 	vmov	d0, r8, r9
 800a606:	f002 faa9 	bl	800cb5c <__ulp>
 800a60a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a60e:	ec51 0b10 	vmov	r0, r1, d0
 800a612:	f7f5 fff9 	bl	8000608 <__aeabi_dmul>
 800a616:	4642      	mov	r2, r8
 800a618:	464b      	mov	r3, r9
 800a61a:	f7f5 fe3f 	bl	800029c <__adddf3>
 800a61e:	460b      	mov	r3, r1
 800a620:	4979      	ldr	r1, [pc, #484]	; (800a808 <_strtod_l+0xbd0>)
 800a622:	4a7b      	ldr	r2, [pc, #492]	; (800a810 <_strtod_l+0xbd8>)
 800a624:	4019      	ands	r1, r3
 800a626:	4291      	cmp	r1, r2
 800a628:	4680      	mov	r8, r0
 800a62a:	d944      	bls.n	800a6b6 <_strtod_l+0xa7e>
 800a62c:	ee18 2a90 	vmov	r2, s17
 800a630:	4b78      	ldr	r3, [pc, #480]	; (800a814 <_strtod_l+0xbdc>)
 800a632:	429a      	cmp	r2, r3
 800a634:	d104      	bne.n	800a640 <_strtod_l+0xa08>
 800a636:	ee18 3a10 	vmov	r3, s16
 800a63a:	3301      	adds	r3, #1
 800a63c:	f43f ad40 	beq.w	800a0c0 <_strtod_l+0x488>
 800a640:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800a814 <_strtod_l+0xbdc>
 800a644:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800a648:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a64a:	4620      	mov	r0, r4
 800a64c:	f001 ff5a 	bl	800c504 <_Bfree>
 800a650:	9905      	ldr	r1, [sp, #20]
 800a652:	4620      	mov	r0, r4
 800a654:	f001 ff56 	bl	800c504 <_Bfree>
 800a658:	4659      	mov	r1, fp
 800a65a:	4620      	mov	r0, r4
 800a65c:	f001 ff52 	bl	800c504 <_Bfree>
 800a660:	4629      	mov	r1, r5
 800a662:	4620      	mov	r0, r4
 800a664:	f001 ff4e 	bl	800c504 <_Bfree>
 800a668:	e609      	b.n	800a27e <_strtod_l+0x646>
 800a66a:	f1b8 0f01 	cmp.w	r8, #1
 800a66e:	d103      	bne.n	800a678 <_strtod_l+0xa40>
 800a670:	f1b9 0f00 	cmp.w	r9, #0
 800a674:	f43f ad95 	beq.w	800a1a2 <_strtod_l+0x56a>
 800a678:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800a7d0 <_strtod_l+0xb98>
 800a67c:	4f60      	ldr	r7, [pc, #384]	; (800a800 <_strtod_l+0xbc8>)
 800a67e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a682:	2600      	movs	r6, #0
 800a684:	e7ae      	b.n	800a5e4 <_strtod_l+0x9ac>
 800a686:	4f5f      	ldr	r7, [pc, #380]	; (800a804 <_strtod_l+0xbcc>)
 800a688:	2600      	movs	r6, #0
 800a68a:	e7a7      	b.n	800a5dc <_strtod_l+0x9a4>
 800a68c:	4b5d      	ldr	r3, [pc, #372]	; (800a804 <_strtod_l+0xbcc>)
 800a68e:	4630      	mov	r0, r6
 800a690:	4639      	mov	r1, r7
 800a692:	2200      	movs	r2, #0
 800a694:	f7f5 ffb8 	bl	8000608 <__aeabi_dmul>
 800a698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a69a:	4606      	mov	r6, r0
 800a69c:	460f      	mov	r7, r1
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d09c      	beq.n	800a5dc <_strtod_l+0x9a4>
 800a6a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a6a6:	e79d      	b.n	800a5e4 <_strtod_l+0x9ac>
 800a6a8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800a7d8 <_strtod_l+0xba0>
 800a6ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a6b0:	ec57 6b17 	vmov	r6, r7, d7
 800a6b4:	e796      	b.n	800a5e4 <_strtod_l+0x9ac>
 800a6b6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a6ba:	9b04      	ldr	r3, [sp, #16]
 800a6bc:	46ca      	mov	sl, r9
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d1c2      	bne.n	800a648 <_strtod_l+0xa10>
 800a6c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a6c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a6c8:	0d1b      	lsrs	r3, r3, #20
 800a6ca:	051b      	lsls	r3, r3, #20
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d1bb      	bne.n	800a648 <_strtod_l+0xa10>
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	4639      	mov	r1, r7
 800a6d4:	f7f6 faf8 	bl	8000cc8 <__aeabi_d2lz>
 800a6d8:	f7f5 ff68 	bl	80005ac <__aeabi_l2d>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	460b      	mov	r3, r1
 800a6e0:	4630      	mov	r0, r6
 800a6e2:	4639      	mov	r1, r7
 800a6e4:	f7f5 fdd8 	bl	8000298 <__aeabi_dsub>
 800a6e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a6ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a6ee:	ea43 0308 	orr.w	r3, r3, r8
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	4606      	mov	r6, r0
 800a6f6:	460f      	mov	r7, r1
 800a6f8:	d054      	beq.n	800a7a4 <_strtod_l+0xb6c>
 800a6fa:	a339      	add	r3, pc, #228	; (adr r3, 800a7e0 <_strtod_l+0xba8>)
 800a6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a700:	f7f6 f9f4 	bl	8000aec <__aeabi_dcmplt>
 800a704:	2800      	cmp	r0, #0
 800a706:	f47f ace5 	bne.w	800a0d4 <_strtod_l+0x49c>
 800a70a:	a337      	add	r3, pc, #220	; (adr r3, 800a7e8 <_strtod_l+0xbb0>)
 800a70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a710:	4630      	mov	r0, r6
 800a712:	4639      	mov	r1, r7
 800a714:	f7f6 fa08 	bl	8000b28 <__aeabi_dcmpgt>
 800a718:	2800      	cmp	r0, #0
 800a71a:	d095      	beq.n	800a648 <_strtod_l+0xa10>
 800a71c:	e4da      	b.n	800a0d4 <_strtod_l+0x49c>
 800a71e:	9b04      	ldr	r3, [sp, #16]
 800a720:	b333      	cbz	r3, 800a770 <_strtod_l+0xb38>
 800a722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a724:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a728:	d822      	bhi.n	800a770 <_strtod_l+0xb38>
 800a72a:	a331      	add	r3, pc, #196	; (adr r3, 800a7f0 <_strtod_l+0xbb8>)
 800a72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a730:	4630      	mov	r0, r6
 800a732:	4639      	mov	r1, r7
 800a734:	f7f6 f9e4 	bl	8000b00 <__aeabi_dcmple>
 800a738:	b1a0      	cbz	r0, 800a764 <_strtod_l+0xb2c>
 800a73a:	4639      	mov	r1, r7
 800a73c:	4630      	mov	r0, r6
 800a73e:	f7f6 fa3b 	bl	8000bb8 <__aeabi_d2uiz>
 800a742:	2801      	cmp	r0, #1
 800a744:	bf38      	it	cc
 800a746:	2001      	movcc	r0, #1
 800a748:	f7f5 fee4 	bl	8000514 <__aeabi_ui2d>
 800a74c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a74e:	4606      	mov	r6, r0
 800a750:	460f      	mov	r7, r1
 800a752:	bb23      	cbnz	r3, 800a79e <_strtod_l+0xb66>
 800a754:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a758:	9010      	str	r0, [sp, #64]	; 0x40
 800a75a:	9311      	str	r3, [sp, #68]	; 0x44
 800a75c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a760:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a766:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a768:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a76c:	1a9b      	subs	r3, r3, r2
 800a76e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a770:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a774:	eeb0 0a48 	vmov.f32	s0, s16
 800a778:	eef0 0a68 	vmov.f32	s1, s17
 800a77c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a780:	f002 f9ec 	bl	800cb5c <__ulp>
 800a784:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a788:	ec53 2b10 	vmov	r2, r3, d0
 800a78c:	f7f5 ff3c 	bl	8000608 <__aeabi_dmul>
 800a790:	ec53 2b18 	vmov	r2, r3, d8
 800a794:	f7f5 fd82 	bl	800029c <__adddf3>
 800a798:	4680      	mov	r8, r0
 800a79a:	4689      	mov	r9, r1
 800a79c:	e78d      	b.n	800a6ba <_strtod_l+0xa82>
 800a79e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a7a2:	e7db      	b.n	800a75c <_strtod_l+0xb24>
 800a7a4:	a314      	add	r3, pc, #80	; (adr r3, 800a7f8 <_strtod_l+0xbc0>)
 800a7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7aa:	f7f6 f99f 	bl	8000aec <__aeabi_dcmplt>
 800a7ae:	e7b3      	b.n	800a718 <_strtod_l+0xae0>
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	930a      	str	r3, [sp, #40]	; 0x28
 800a7b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a7b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7b8:	6013      	str	r3, [r2, #0]
 800a7ba:	f7ff ba7c 	b.w	8009cb6 <_strtod_l+0x7e>
 800a7be:	2a65      	cmp	r2, #101	; 0x65
 800a7c0:	f43f ab75 	beq.w	8009eae <_strtod_l+0x276>
 800a7c4:	2a45      	cmp	r2, #69	; 0x45
 800a7c6:	f43f ab72 	beq.w	8009eae <_strtod_l+0x276>
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	f7ff bbaa 	b.w	8009f24 <_strtod_l+0x2ec>
 800a7d0:	00000000 	.word	0x00000000
 800a7d4:	bff00000 	.word	0xbff00000
 800a7d8:	00000000 	.word	0x00000000
 800a7dc:	3ff00000 	.word	0x3ff00000
 800a7e0:	94a03595 	.word	0x94a03595
 800a7e4:	3fdfffff 	.word	0x3fdfffff
 800a7e8:	35afe535 	.word	0x35afe535
 800a7ec:	3fe00000 	.word	0x3fe00000
 800a7f0:	ffc00000 	.word	0xffc00000
 800a7f4:	41dfffff 	.word	0x41dfffff
 800a7f8:	94a03595 	.word	0x94a03595
 800a7fc:	3fcfffff 	.word	0x3fcfffff
 800a800:	3ff00000 	.word	0x3ff00000
 800a804:	3fe00000 	.word	0x3fe00000
 800a808:	7ff00000 	.word	0x7ff00000
 800a80c:	7fe00000 	.word	0x7fe00000
 800a810:	7c9fffff 	.word	0x7c9fffff
 800a814:	7fefffff 	.word	0x7fefffff

0800a818 <_strtod_r>:
 800a818:	4b01      	ldr	r3, [pc, #4]	; (800a820 <_strtod_r+0x8>)
 800a81a:	f7ff ba0d 	b.w	8009c38 <_strtod_l>
 800a81e:	bf00      	nop
 800a820:	20000084 	.word	0x20000084

0800a824 <strtof>:
 800a824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a828:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800a8ec <strtof+0xc8>
 800a82c:	4b2a      	ldr	r3, [pc, #168]	; (800a8d8 <strtof+0xb4>)
 800a82e:	460a      	mov	r2, r1
 800a830:	ed2d 8b02 	vpush	{d8}
 800a834:	4601      	mov	r1, r0
 800a836:	f8d8 0000 	ldr.w	r0, [r8]
 800a83a:	f7ff f9fd 	bl	8009c38 <_strtod_l>
 800a83e:	ec55 4b10 	vmov	r4, r5, d0
 800a842:	ee10 2a10 	vmov	r2, s0
 800a846:	ee10 0a10 	vmov	r0, s0
 800a84a:	462b      	mov	r3, r5
 800a84c:	4629      	mov	r1, r5
 800a84e:	f7f6 f975 	bl	8000b3c <__aeabi_dcmpun>
 800a852:	b190      	cbz	r0, 800a87a <strtof+0x56>
 800a854:	2d00      	cmp	r5, #0
 800a856:	4821      	ldr	r0, [pc, #132]	; (800a8dc <strtof+0xb8>)
 800a858:	da09      	bge.n	800a86e <strtof+0x4a>
 800a85a:	f000 f96d 	bl	800ab38 <nanf>
 800a85e:	eeb1 8a40 	vneg.f32	s16, s0
 800a862:	eeb0 0a48 	vmov.f32	s0, s16
 800a866:	ecbd 8b02 	vpop	{d8}
 800a86a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a86e:	ecbd 8b02 	vpop	{d8}
 800a872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a876:	f000 b95f 	b.w	800ab38 <nanf>
 800a87a:	4620      	mov	r0, r4
 800a87c:	4629      	mov	r1, r5
 800a87e:	f7f6 f9bb 	bl	8000bf8 <__aeabi_d2f>
 800a882:	ee08 0a10 	vmov	s16, r0
 800a886:	eddf 7a16 	vldr	s15, [pc, #88]	; 800a8e0 <strtof+0xbc>
 800a88a:	eeb0 7ac8 	vabs.f32	s14, s16
 800a88e:	eeb4 7a67 	vcmp.f32	s14, s15
 800a892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a896:	dd11      	ble.n	800a8bc <strtof+0x98>
 800a898:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800a89c:	4b11      	ldr	r3, [pc, #68]	; (800a8e4 <strtof+0xc0>)
 800a89e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	4639      	mov	r1, r7
 800a8a6:	f7f6 f949 	bl	8000b3c <__aeabi_dcmpun>
 800a8aa:	b980      	cbnz	r0, 800a8ce <strtof+0xaa>
 800a8ac:	4b0d      	ldr	r3, [pc, #52]	; (800a8e4 <strtof+0xc0>)
 800a8ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	4639      	mov	r1, r7
 800a8b6:	f7f6 f923 	bl	8000b00 <__aeabi_dcmple>
 800a8ba:	b940      	cbnz	r0, 800a8ce <strtof+0xaa>
 800a8bc:	ee18 3a10 	vmov	r3, s16
 800a8c0:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800a8c4:	d1cd      	bne.n	800a862 <strtof+0x3e>
 800a8c6:	4b08      	ldr	r3, [pc, #32]	; (800a8e8 <strtof+0xc4>)
 800a8c8:	402b      	ands	r3, r5
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d0c9      	beq.n	800a862 <strtof+0x3e>
 800a8ce:	f8d8 3000 	ldr.w	r3, [r8]
 800a8d2:	2222      	movs	r2, #34	; 0x22
 800a8d4:	601a      	str	r2, [r3, #0]
 800a8d6:	e7c4      	b.n	800a862 <strtof+0x3e>
 800a8d8:	20000084 	.word	0x20000084
 800a8dc:	0800e0ff 	.word	0x0800e0ff
 800a8e0:	7f7fffff 	.word	0x7f7fffff
 800a8e4:	7fefffff 	.word	0x7fefffff
 800a8e8:	7ff00000 	.word	0x7ff00000
 800a8ec:	2000023c 	.word	0x2000023c

0800a8f0 <_strtol_l.constprop.0>:
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8f6:	d001      	beq.n	800a8fc <_strtol_l.constprop.0+0xc>
 800a8f8:	2b24      	cmp	r3, #36	; 0x24
 800a8fa:	d906      	bls.n	800a90a <_strtol_l.constprop.0+0x1a>
 800a8fc:	f000 f8d6 	bl	800aaac <__errno>
 800a900:	2316      	movs	r3, #22
 800a902:	6003      	str	r3, [r0, #0]
 800a904:	2000      	movs	r0, #0
 800a906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a90a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a9f0 <_strtol_l.constprop.0+0x100>
 800a90e:	460d      	mov	r5, r1
 800a910:	462e      	mov	r6, r5
 800a912:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a916:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a91a:	f017 0708 	ands.w	r7, r7, #8
 800a91e:	d1f7      	bne.n	800a910 <_strtol_l.constprop.0+0x20>
 800a920:	2c2d      	cmp	r4, #45	; 0x2d
 800a922:	d132      	bne.n	800a98a <_strtol_l.constprop.0+0x9a>
 800a924:	782c      	ldrb	r4, [r5, #0]
 800a926:	2701      	movs	r7, #1
 800a928:	1cb5      	adds	r5, r6, #2
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d05b      	beq.n	800a9e6 <_strtol_l.constprop.0+0xf6>
 800a92e:	2b10      	cmp	r3, #16
 800a930:	d109      	bne.n	800a946 <_strtol_l.constprop.0+0x56>
 800a932:	2c30      	cmp	r4, #48	; 0x30
 800a934:	d107      	bne.n	800a946 <_strtol_l.constprop.0+0x56>
 800a936:	782c      	ldrb	r4, [r5, #0]
 800a938:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a93c:	2c58      	cmp	r4, #88	; 0x58
 800a93e:	d14d      	bne.n	800a9dc <_strtol_l.constprop.0+0xec>
 800a940:	786c      	ldrb	r4, [r5, #1]
 800a942:	2310      	movs	r3, #16
 800a944:	3502      	adds	r5, #2
 800a946:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a94a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a94e:	f04f 0e00 	mov.w	lr, #0
 800a952:	fbb8 f9f3 	udiv	r9, r8, r3
 800a956:	4676      	mov	r6, lr
 800a958:	fb03 8a19 	mls	sl, r3, r9, r8
 800a95c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a960:	f1bc 0f09 	cmp.w	ip, #9
 800a964:	d816      	bhi.n	800a994 <_strtol_l.constprop.0+0xa4>
 800a966:	4664      	mov	r4, ip
 800a968:	42a3      	cmp	r3, r4
 800a96a:	dd24      	ble.n	800a9b6 <_strtol_l.constprop.0+0xc6>
 800a96c:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800a970:	d008      	beq.n	800a984 <_strtol_l.constprop.0+0x94>
 800a972:	45b1      	cmp	r9, r6
 800a974:	d31c      	bcc.n	800a9b0 <_strtol_l.constprop.0+0xc0>
 800a976:	d101      	bne.n	800a97c <_strtol_l.constprop.0+0x8c>
 800a978:	45a2      	cmp	sl, r4
 800a97a:	db19      	blt.n	800a9b0 <_strtol_l.constprop.0+0xc0>
 800a97c:	fb06 4603 	mla	r6, r6, r3, r4
 800a980:	f04f 0e01 	mov.w	lr, #1
 800a984:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a988:	e7e8      	b.n	800a95c <_strtol_l.constprop.0+0x6c>
 800a98a:	2c2b      	cmp	r4, #43	; 0x2b
 800a98c:	bf04      	itt	eq
 800a98e:	782c      	ldrbeq	r4, [r5, #0]
 800a990:	1cb5      	addeq	r5, r6, #2
 800a992:	e7ca      	b.n	800a92a <_strtol_l.constprop.0+0x3a>
 800a994:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a998:	f1bc 0f19 	cmp.w	ip, #25
 800a99c:	d801      	bhi.n	800a9a2 <_strtol_l.constprop.0+0xb2>
 800a99e:	3c37      	subs	r4, #55	; 0x37
 800a9a0:	e7e2      	b.n	800a968 <_strtol_l.constprop.0+0x78>
 800a9a2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a9a6:	f1bc 0f19 	cmp.w	ip, #25
 800a9aa:	d804      	bhi.n	800a9b6 <_strtol_l.constprop.0+0xc6>
 800a9ac:	3c57      	subs	r4, #87	; 0x57
 800a9ae:	e7db      	b.n	800a968 <_strtol_l.constprop.0+0x78>
 800a9b0:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800a9b4:	e7e6      	b.n	800a984 <_strtol_l.constprop.0+0x94>
 800a9b6:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800a9ba:	d105      	bne.n	800a9c8 <_strtol_l.constprop.0+0xd8>
 800a9bc:	2322      	movs	r3, #34	; 0x22
 800a9be:	6003      	str	r3, [r0, #0]
 800a9c0:	4646      	mov	r6, r8
 800a9c2:	b942      	cbnz	r2, 800a9d6 <_strtol_l.constprop.0+0xe6>
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	e79e      	b.n	800a906 <_strtol_l.constprop.0+0x16>
 800a9c8:	b107      	cbz	r7, 800a9cc <_strtol_l.constprop.0+0xdc>
 800a9ca:	4276      	negs	r6, r6
 800a9cc:	2a00      	cmp	r2, #0
 800a9ce:	d0f9      	beq.n	800a9c4 <_strtol_l.constprop.0+0xd4>
 800a9d0:	f1be 0f00 	cmp.w	lr, #0
 800a9d4:	d000      	beq.n	800a9d8 <_strtol_l.constprop.0+0xe8>
 800a9d6:	1e69      	subs	r1, r5, #1
 800a9d8:	6011      	str	r1, [r2, #0]
 800a9da:	e7f3      	b.n	800a9c4 <_strtol_l.constprop.0+0xd4>
 800a9dc:	2430      	movs	r4, #48	; 0x30
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d1b1      	bne.n	800a946 <_strtol_l.constprop.0+0x56>
 800a9e2:	2308      	movs	r3, #8
 800a9e4:	e7af      	b.n	800a946 <_strtol_l.constprop.0+0x56>
 800a9e6:	2c30      	cmp	r4, #48	; 0x30
 800a9e8:	d0a5      	beq.n	800a936 <_strtol_l.constprop.0+0x46>
 800a9ea:	230a      	movs	r3, #10
 800a9ec:	e7ab      	b.n	800a946 <_strtol_l.constprop.0+0x56>
 800a9ee:	bf00      	nop
 800a9f0:	0800dd71 	.word	0x0800dd71

0800a9f4 <_strtol_r>:
 800a9f4:	f7ff bf7c 	b.w	800a8f0 <_strtol_l.constprop.0>

0800a9f8 <strtol>:
 800a9f8:	4613      	mov	r3, r2
 800a9fa:	460a      	mov	r2, r1
 800a9fc:	4601      	mov	r1, r0
 800a9fe:	4802      	ldr	r0, [pc, #8]	; (800aa08 <strtol+0x10>)
 800aa00:	6800      	ldr	r0, [r0, #0]
 800aa02:	f7ff bf75 	b.w	800a8f0 <_strtol_l.constprop.0>
 800aa06:	bf00      	nop
 800aa08:	2000023c 	.word	0x2000023c

0800aa0c <_fwalk_sglue>:
 800aa0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa10:	4607      	mov	r7, r0
 800aa12:	4688      	mov	r8, r1
 800aa14:	4614      	mov	r4, r2
 800aa16:	2600      	movs	r6, #0
 800aa18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa1c:	f1b9 0901 	subs.w	r9, r9, #1
 800aa20:	d505      	bpl.n	800aa2e <_fwalk_sglue+0x22>
 800aa22:	6824      	ldr	r4, [r4, #0]
 800aa24:	2c00      	cmp	r4, #0
 800aa26:	d1f7      	bne.n	800aa18 <_fwalk_sglue+0xc>
 800aa28:	4630      	mov	r0, r6
 800aa2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa2e:	89ab      	ldrh	r3, [r5, #12]
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d907      	bls.n	800aa44 <_fwalk_sglue+0x38>
 800aa34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa38:	3301      	adds	r3, #1
 800aa3a:	d003      	beq.n	800aa44 <_fwalk_sglue+0x38>
 800aa3c:	4629      	mov	r1, r5
 800aa3e:	4638      	mov	r0, r7
 800aa40:	47c0      	blx	r8
 800aa42:	4306      	orrs	r6, r0
 800aa44:	3568      	adds	r5, #104	; 0x68
 800aa46:	e7e9      	b.n	800aa1c <_fwalk_sglue+0x10>

0800aa48 <strncmp>:
 800aa48:	b510      	push	{r4, lr}
 800aa4a:	b16a      	cbz	r2, 800aa68 <strncmp+0x20>
 800aa4c:	3901      	subs	r1, #1
 800aa4e:	1884      	adds	r4, r0, r2
 800aa50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa54:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d103      	bne.n	800aa64 <strncmp+0x1c>
 800aa5c:	42a0      	cmp	r0, r4
 800aa5e:	d001      	beq.n	800aa64 <strncmp+0x1c>
 800aa60:	2a00      	cmp	r2, #0
 800aa62:	d1f5      	bne.n	800aa50 <strncmp+0x8>
 800aa64:	1ad0      	subs	r0, r2, r3
 800aa66:	bd10      	pop	{r4, pc}
 800aa68:	4610      	mov	r0, r2
 800aa6a:	e7fc      	b.n	800aa66 <strncmp+0x1e>

0800aa6c <strncpy>:
 800aa6c:	b510      	push	{r4, lr}
 800aa6e:	3901      	subs	r1, #1
 800aa70:	4603      	mov	r3, r0
 800aa72:	b132      	cbz	r2, 800aa82 <strncpy+0x16>
 800aa74:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800aa78:	f803 4b01 	strb.w	r4, [r3], #1
 800aa7c:	3a01      	subs	r2, #1
 800aa7e:	2c00      	cmp	r4, #0
 800aa80:	d1f7      	bne.n	800aa72 <strncpy+0x6>
 800aa82:	441a      	add	r2, r3
 800aa84:	2100      	movs	r1, #0
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d100      	bne.n	800aa8c <strncpy+0x20>
 800aa8a:	bd10      	pop	{r4, pc}
 800aa8c:	f803 1b01 	strb.w	r1, [r3], #1
 800aa90:	e7f9      	b.n	800aa86 <strncpy+0x1a>

0800aa92 <memset>:
 800aa92:	4402      	add	r2, r0
 800aa94:	4603      	mov	r3, r0
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d100      	bne.n	800aa9c <memset+0xa>
 800aa9a:	4770      	bx	lr
 800aa9c:	f803 1b01 	strb.w	r1, [r3], #1
 800aaa0:	e7f9      	b.n	800aa96 <memset+0x4>
	...

0800aaa4 <_localeconv_r>:
 800aaa4:	4800      	ldr	r0, [pc, #0]	; (800aaa8 <_localeconv_r+0x4>)
 800aaa6:	4770      	bx	lr
 800aaa8:	20000174 	.word	0x20000174

0800aaac <__errno>:
 800aaac:	4b01      	ldr	r3, [pc, #4]	; (800aab4 <__errno+0x8>)
 800aaae:	6818      	ldr	r0, [r3, #0]
 800aab0:	4770      	bx	lr
 800aab2:	bf00      	nop
 800aab4:	2000023c 	.word	0x2000023c

0800aab8 <__libc_init_array>:
 800aab8:	b570      	push	{r4, r5, r6, lr}
 800aaba:	4d0d      	ldr	r5, [pc, #52]	; (800aaf0 <__libc_init_array+0x38>)
 800aabc:	4c0d      	ldr	r4, [pc, #52]	; (800aaf4 <__libc_init_array+0x3c>)
 800aabe:	1b64      	subs	r4, r4, r5
 800aac0:	10a4      	asrs	r4, r4, #2
 800aac2:	2600      	movs	r6, #0
 800aac4:	42a6      	cmp	r6, r4
 800aac6:	d109      	bne.n	800aadc <__libc_init_array+0x24>
 800aac8:	4d0b      	ldr	r5, [pc, #44]	; (800aaf8 <__libc_init_array+0x40>)
 800aaca:	4c0c      	ldr	r4, [pc, #48]	; (800aafc <__libc_init_array+0x44>)
 800aacc:	f002 fdb8 	bl	800d640 <_init>
 800aad0:	1b64      	subs	r4, r4, r5
 800aad2:	10a4      	asrs	r4, r4, #2
 800aad4:	2600      	movs	r6, #0
 800aad6:	42a6      	cmp	r6, r4
 800aad8:	d105      	bne.n	800aae6 <__libc_init_array+0x2e>
 800aada:	bd70      	pop	{r4, r5, r6, pc}
 800aadc:	f855 3b04 	ldr.w	r3, [r5], #4
 800aae0:	4798      	blx	r3
 800aae2:	3601      	adds	r6, #1
 800aae4:	e7ee      	b.n	800aac4 <__libc_init_array+0xc>
 800aae6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaea:	4798      	blx	r3
 800aaec:	3601      	adds	r6, #1
 800aaee:	e7f2      	b.n	800aad6 <__libc_init_array+0x1e>
 800aaf0:	0800e108 	.word	0x0800e108
 800aaf4:	0800e108 	.word	0x0800e108
 800aaf8:	0800e108 	.word	0x0800e108
 800aafc:	0800e10c 	.word	0x0800e10c

0800ab00 <__retarget_lock_init_recursive>:
 800ab00:	4770      	bx	lr

0800ab02 <__retarget_lock_acquire_recursive>:
 800ab02:	4770      	bx	lr

0800ab04 <__retarget_lock_release_recursive>:
 800ab04:	4770      	bx	lr

0800ab06 <memcpy>:
 800ab06:	440a      	add	r2, r1
 800ab08:	4291      	cmp	r1, r2
 800ab0a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ab0e:	d100      	bne.n	800ab12 <memcpy+0xc>
 800ab10:	4770      	bx	lr
 800ab12:	b510      	push	{r4, lr}
 800ab14:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab18:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab1c:	4291      	cmp	r1, r2
 800ab1e:	d1f9      	bne.n	800ab14 <memcpy+0xe>
 800ab20:	bd10      	pop	{r4, pc}
 800ab22:	0000      	movs	r0, r0
 800ab24:	0000      	movs	r0, r0
	...

0800ab28 <nan>:
 800ab28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ab30 <nan+0x8>
 800ab2c:	4770      	bx	lr
 800ab2e:	bf00      	nop
 800ab30:	00000000 	.word	0x00000000
 800ab34:	7ff80000 	.word	0x7ff80000

0800ab38 <nanf>:
 800ab38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ab40 <nanf+0x8>
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	7fc00000 	.word	0x7fc00000

0800ab44 <quorem>:
 800ab44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab48:	6903      	ldr	r3, [r0, #16]
 800ab4a:	690c      	ldr	r4, [r1, #16]
 800ab4c:	42a3      	cmp	r3, r4
 800ab4e:	4607      	mov	r7, r0
 800ab50:	db7e      	blt.n	800ac50 <quorem+0x10c>
 800ab52:	3c01      	subs	r4, #1
 800ab54:	f101 0814 	add.w	r8, r1, #20
 800ab58:	f100 0514 	add.w	r5, r0, #20
 800ab5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab60:	9301      	str	r3, [sp, #4]
 800ab62:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ab66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ab72:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ab76:	fbb2 f6f3 	udiv	r6, r2, r3
 800ab7a:	d331      	bcc.n	800abe0 <quorem+0x9c>
 800ab7c:	f04f 0e00 	mov.w	lr, #0
 800ab80:	4640      	mov	r0, r8
 800ab82:	46ac      	mov	ip, r5
 800ab84:	46f2      	mov	sl, lr
 800ab86:	f850 2b04 	ldr.w	r2, [r0], #4
 800ab8a:	b293      	uxth	r3, r2
 800ab8c:	fb06 e303 	mla	r3, r6, r3, lr
 800ab90:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ab94:	0c1a      	lsrs	r2, r3, #16
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	ebaa 0303 	sub.w	r3, sl, r3
 800ab9c:	f8dc a000 	ldr.w	sl, [ip]
 800aba0:	fa13 f38a 	uxtah	r3, r3, sl
 800aba4:	fb06 220e 	mla	r2, r6, lr, r2
 800aba8:	9300      	str	r3, [sp, #0]
 800abaa:	9b00      	ldr	r3, [sp, #0]
 800abac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800abb0:	b292      	uxth	r2, r2
 800abb2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800abb6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800abba:	f8bd 3000 	ldrh.w	r3, [sp]
 800abbe:	4581      	cmp	r9, r0
 800abc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800abc4:	f84c 3b04 	str.w	r3, [ip], #4
 800abc8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800abcc:	d2db      	bcs.n	800ab86 <quorem+0x42>
 800abce:	f855 300b 	ldr.w	r3, [r5, fp]
 800abd2:	b92b      	cbnz	r3, 800abe0 <quorem+0x9c>
 800abd4:	9b01      	ldr	r3, [sp, #4]
 800abd6:	3b04      	subs	r3, #4
 800abd8:	429d      	cmp	r5, r3
 800abda:	461a      	mov	r2, r3
 800abdc:	d32c      	bcc.n	800ac38 <quorem+0xf4>
 800abde:	613c      	str	r4, [r7, #16]
 800abe0:	4638      	mov	r0, r7
 800abe2:	f001 ff15 	bl	800ca10 <__mcmp>
 800abe6:	2800      	cmp	r0, #0
 800abe8:	db22      	blt.n	800ac30 <quorem+0xec>
 800abea:	3601      	adds	r6, #1
 800abec:	4629      	mov	r1, r5
 800abee:	2000      	movs	r0, #0
 800abf0:	f858 2b04 	ldr.w	r2, [r8], #4
 800abf4:	f8d1 c000 	ldr.w	ip, [r1]
 800abf8:	b293      	uxth	r3, r2
 800abfa:	1ac3      	subs	r3, r0, r3
 800abfc:	0c12      	lsrs	r2, r2, #16
 800abfe:	fa13 f38c 	uxtah	r3, r3, ip
 800ac02:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ac06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac10:	45c1      	cmp	r9, r8
 800ac12:	f841 3b04 	str.w	r3, [r1], #4
 800ac16:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ac1a:	d2e9      	bcs.n	800abf0 <quorem+0xac>
 800ac1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac24:	b922      	cbnz	r2, 800ac30 <quorem+0xec>
 800ac26:	3b04      	subs	r3, #4
 800ac28:	429d      	cmp	r5, r3
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	d30a      	bcc.n	800ac44 <quorem+0x100>
 800ac2e:	613c      	str	r4, [r7, #16]
 800ac30:	4630      	mov	r0, r6
 800ac32:	b003      	add	sp, #12
 800ac34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac38:	6812      	ldr	r2, [r2, #0]
 800ac3a:	3b04      	subs	r3, #4
 800ac3c:	2a00      	cmp	r2, #0
 800ac3e:	d1ce      	bne.n	800abde <quorem+0x9a>
 800ac40:	3c01      	subs	r4, #1
 800ac42:	e7c9      	b.n	800abd8 <quorem+0x94>
 800ac44:	6812      	ldr	r2, [r2, #0]
 800ac46:	3b04      	subs	r3, #4
 800ac48:	2a00      	cmp	r2, #0
 800ac4a:	d1f0      	bne.n	800ac2e <quorem+0xea>
 800ac4c:	3c01      	subs	r4, #1
 800ac4e:	e7eb      	b.n	800ac28 <quorem+0xe4>
 800ac50:	2000      	movs	r0, #0
 800ac52:	e7ee      	b.n	800ac32 <quorem+0xee>
 800ac54:	0000      	movs	r0, r0
	...

0800ac58 <_dtoa_r>:
 800ac58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac5c:	ed2d 8b04 	vpush	{d8-d9}
 800ac60:	69c5      	ldr	r5, [r0, #28]
 800ac62:	b093      	sub	sp, #76	; 0x4c
 800ac64:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ac68:	ec57 6b10 	vmov	r6, r7, d0
 800ac6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ac70:	9107      	str	r1, [sp, #28]
 800ac72:	4604      	mov	r4, r0
 800ac74:	920a      	str	r2, [sp, #40]	; 0x28
 800ac76:	930d      	str	r3, [sp, #52]	; 0x34
 800ac78:	b975      	cbnz	r5, 800ac98 <_dtoa_r+0x40>
 800ac7a:	2010      	movs	r0, #16
 800ac7c:	f001 fa8e 	bl	800c19c <malloc>
 800ac80:	4602      	mov	r2, r0
 800ac82:	61e0      	str	r0, [r4, #28]
 800ac84:	b920      	cbnz	r0, 800ac90 <_dtoa_r+0x38>
 800ac86:	4bae      	ldr	r3, [pc, #696]	; (800af40 <_dtoa_r+0x2e8>)
 800ac88:	21ef      	movs	r1, #239	; 0xef
 800ac8a:	48ae      	ldr	r0, [pc, #696]	; (800af44 <_dtoa_r+0x2ec>)
 800ac8c:	f002 f996 	bl	800cfbc <__assert_func>
 800ac90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ac94:	6005      	str	r5, [r0, #0]
 800ac96:	60c5      	str	r5, [r0, #12]
 800ac98:	69e3      	ldr	r3, [r4, #28]
 800ac9a:	6819      	ldr	r1, [r3, #0]
 800ac9c:	b151      	cbz	r1, 800acb4 <_dtoa_r+0x5c>
 800ac9e:	685a      	ldr	r2, [r3, #4]
 800aca0:	604a      	str	r2, [r1, #4]
 800aca2:	2301      	movs	r3, #1
 800aca4:	4093      	lsls	r3, r2
 800aca6:	608b      	str	r3, [r1, #8]
 800aca8:	4620      	mov	r0, r4
 800acaa:	f001 fc2b 	bl	800c504 <_Bfree>
 800acae:	69e3      	ldr	r3, [r4, #28]
 800acb0:	2200      	movs	r2, #0
 800acb2:	601a      	str	r2, [r3, #0]
 800acb4:	1e3b      	subs	r3, r7, #0
 800acb6:	bfbb      	ittet	lt
 800acb8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800acbc:	9303      	strlt	r3, [sp, #12]
 800acbe:	2300      	movge	r3, #0
 800acc0:	2201      	movlt	r2, #1
 800acc2:	bfac      	ite	ge
 800acc4:	f8c8 3000 	strge.w	r3, [r8]
 800acc8:	f8c8 2000 	strlt.w	r2, [r8]
 800accc:	4b9e      	ldr	r3, [pc, #632]	; (800af48 <_dtoa_r+0x2f0>)
 800acce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800acd2:	ea33 0308 	bics.w	r3, r3, r8
 800acd6:	d11b      	bne.n	800ad10 <_dtoa_r+0xb8>
 800acd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800acda:	f242 730f 	movw	r3, #9999	; 0x270f
 800acde:	6013      	str	r3, [r2, #0]
 800ace0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ace4:	4333      	orrs	r3, r6
 800ace6:	f000 8593 	beq.w	800b810 <_dtoa_r+0xbb8>
 800acea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800acec:	b963      	cbnz	r3, 800ad08 <_dtoa_r+0xb0>
 800acee:	4b97      	ldr	r3, [pc, #604]	; (800af4c <_dtoa_r+0x2f4>)
 800acf0:	e027      	b.n	800ad42 <_dtoa_r+0xea>
 800acf2:	4b97      	ldr	r3, [pc, #604]	; (800af50 <_dtoa_r+0x2f8>)
 800acf4:	9300      	str	r3, [sp, #0]
 800acf6:	3308      	adds	r3, #8
 800acf8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800acfa:	6013      	str	r3, [r2, #0]
 800acfc:	9800      	ldr	r0, [sp, #0]
 800acfe:	b013      	add	sp, #76	; 0x4c
 800ad00:	ecbd 8b04 	vpop	{d8-d9}
 800ad04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad08:	4b90      	ldr	r3, [pc, #576]	; (800af4c <_dtoa_r+0x2f4>)
 800ad0a:	9300      	str	r3, [sp, #0]
 800ad0c:	3303      	adds	r3, #3
 800ad0e:	e7f3      	b.n	800acf8 <_dtoa_r+0xa0>
 800ad10:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad14:	2200      	movs	r2, #0
 800ad16:	ec51 0b17 	vmov	r0, r1, d7
 800ad1a:	eeb0 8a47 	vmov.f32	s16, s14
 800ad1e:	eef0 8a67 	vmov.f32	s17, s15
 800ad22:	2300      	movs	r3, #0
 800ad24:	f7f5 fed8 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad28:	4681      	mov	r9, r0
 800ad2a:	b160      	cbz	r0, 800ad46 <_dtoa_r+0xee>
 800ad2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad2e:	2301      	movs	r3, #1
 800ad30:	6013      	str	r3, [r2, #0]
 800ad32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	f000 8568 	beq.w	800b80a <_dtoa_r+0xbb2>
 800ad3a:	4b86      	ldr	r3, [pc, #536]	; (800af54 <_dtoa_r+0x2fc>)
 800ad3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ad3e:	6013      	str	r3, [r2, #0]
 800ad40:	3b01      	subs	r3, #1
 800ad42:	9300      	str	r3, [sp, #0]
 800ad44:	e7da      	b.n	800acfc <_dtoa_r+0xa4>
 800ad46:	aa10      	add	r2, sp, #64	; 0x40
 800ad48:	a911      	add	r1, sp, #68	; 0x44
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	eeb0 0a48 	vmov.f32	s0, s16
 800ad50:	eef0 0a68 	vmov.f32	s1, s17
 800ad54:	f001 ff72 	bl	800cc3c <__d2b>
 800ad58:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ad5c:	4682      	mov	sl, r0
 800ad5e:	2d00      	cmp	r5, #0
 800ad60:	d07f      	beq.n	800ae62 <_dtoa_r+0x20a>
 800ad62:	ee18 3a90 	vmov	r3, s17
 800ad66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad6a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ad6e:	ec51 0b18 	vmov	r0, r1, d8
 800ad72:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ad76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ad7a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ad7e:	4619      	mov	r1, r3
 800ad80:	2200      	movs	r2, #0
 800ad82:	4b75      	ldr	r3, [pc, #468]	; (800af58 <_dtoa_r+0x300>)
 800ad84:	f7f5 fa88 	bl	8000298 <__aeabi_dsub>
 800ad88:	a367      	add	r3, pc, #412	; (adr r3, 800af28 <_dtoa_r+0x2d0>)
 800ad8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8e:	f7f5 fc3b 	bl	8000608 <__aeabi_dmul>
 800ad92:	a367      	add	r3, pc, #412	; (adr r3, 800af30 <_dtoa_r+0x2d8>)
 800ad94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad98:	f7f5 fa80 	bl	800029c <__adddf3>
 800ad9c:	4606      	mov	r6, r0
 800ad9e:	4628      	mov	r0, r5
 800ada0:	460f      	mov	r7, r1
 800ada2:	f7f5 fbc7 	bl	8000534 <__aeabi_i2d>
 800ada6:	a364      	add	r3, pc, #400	; (adr r3, 800af38 <_dtoa_r+0x2e0>)
 800ada8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adac:	f7f5 fc2c 	bl	8000608 <__aeabi_dmul>
 800adb0:	4602      	mov	r2, r0
 800adb2:	460b      	mov	r3, r1
 800adb4:	4630      	mov	r0, r6
 800adb6:	4639      	mov	r1, r7
 800adb8:	f7f5 fa70 	bl	800029c <__adddf3>
 800adbc:	4606      	mov	r6, r0
 800adbe:	460f      	mov	r7, r1
 800adc0:	f7f5 fed2 	bl	8000b68 <__aeabi_d2iz>
 800adc4:	2200      	movs	r2, #0
 800adc6:	4683      	mov	fp, r0
 800adc8:	2300      	movs	r3, #0
 800adca:	4630      	mov	r0, r6
 800adcc:	4639      	mov	r1, r7
 800adce:	f7f5 fe8d 	bl	8000aec <__aeabi_dcmplt>
 800add2:	b148      	cbz	r0, 800ade8 <_dtoa_r+0x190>
 800add4:	4658      	mov	r0, fp
 800add6:	f7f5 fbad 	bl	8000534 <__aeabi_i2d>
 800adda:	4632      	mov	r2, r6
 800addc:	463b      	mov	r3, r7
 800adde:	f7f5 fe7b 	bl	8000ad8 <__aeabi_dcmpeq>
 800ade2:	b908      	cbnz	r0, 800ade8 <_dtoa_r+0x190>
 800ade4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ade8:	f1bb 0f16 	cmp.w	fp, #22
 800adec:	d857      	bhi.n	800ae9e <_dtoa_r+0x246>
 800adee:	4b5b      	ldr	r3, [pc, #364]	; (800af5c <_dtoa_r+0x304>)
 800adf0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800adf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf8:	ec51 0b18 	vmov	r0, r1, d8
 800adfc:	f7f5 fe76 	bl	8000aec <__aeabi_dcmplt>
 800ae00:	2800      	cmp	r0, #0
 800ae02:	d04e      	beq.n	800aea2 <_dtoa_r+0x24a>
 800ae04:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ae08:	2300      	movs	r3, #0
 800ae0a:	930c      	str	r3, [sp, #48]	; 0x30
 800ae0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae0e:	1b5b      	subs	r3, r3, r5
 800ae10:	1e5a      	subs	r2, r3, #1
 800ae12:	bf45      	ittet	mi
 800ae14:	f1c3 0301 	rsbmi	r3, r3, #1
 800ae18:	9305      	strmi	r3, [sp, #20]
 800ae1a:	2300      	movpl	r3, #0
 800ae1c:	2300      	movmi	r3, #0
 800ae1e:	9206      	str	r2, [sp, #24]
 800ae20:	bf54      	ite	pl
 800ae22:	9305      	strpl	r3, [sp, #20]
 800ae24:	9306      	strmi	r3, [sp, #24]
 800ae26:	f1bb 0f00 	cmp.w	fp, #0
 800ae2a:	db3c      	blt.n	800aea6 <_dtoa_r+0x24e>
 800ae2c:	9b06      	ldr	r3, [sp, #24]
 800ae2e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ae32:	445b      	add	r3, fp
 800ae34:	9306      	str	r3, [sp, #24]
 800ae36:	2300      	movs	r3, #0
 800ae38:	9308      	str	r3, [sp, #32]
 800ae3a:	9b07      	ldr	r3, [sp, #28]
 800ae3c:	2b09      	cmp	r3, #9
 800ae3e:	d868      	bhi.n	800af12 <_dtoa_r+0x2ba>
 800ae40:	2b05      	cmp	r3, #5
 800ae42:	bfc4      	itt	gt
 800ae44:	3b04      	subgt	r3, #4
 800ae46:	9307      	strgt	r3, [sp, #28]
 800ae48:	9b07      	ldr	r3, [sp, #28]
 800ae4a:	f1a3 0302 	sub.w	r3, r3, #2
 800ae4e:	bfcc      	ite	gt
 800ae50:	2500      	movgt	r5, #0
 800ae52:	2501      	movle	r5, #1
 800ae54:	2b03      	cmp	r3, #3
 800ae56:	f200 8085 	bhi.w	800af64 <_dtoa_r+0x30c>
 800ae5a:	e8df f003 	tbb	[pc, r3]
 800ae5e:	3b2e      	.short	0x3b2e
 800ae60:	5839      	.short	0x5839
 800ae62:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ae66:	441d      	add	r5, r3
 800ae68:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ae6c:	2b20      	cmp	r3, #32
 800ae6e:	bfc1      	itttt	gt
 800ae70:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ae74:	fa08 f803 	lslgt.w	r8, r8, r3
 800ae78:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ae7c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ae80:	bfd6      	itet	le
 800ae82:	f1c3 0320 	rsble	r3, r3, #32
 800ae86:	ea48 0003 	orrgt.w	r0, r8, r3
 800ae8a:	fa06 f003 	lslle.w	r0, r6, r3
 800ae8e:	f7f5 fb41 	bl	8000514 <__aeabi_ui2d>
 800ae92:	2201      	movs	r2, #1
 800ae94:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ae98:	3d01      	subs	r5, #1
 800ae9a:	920e      	str	r2, [sp, #56]	; 0x38
 800ae9c:	e76f      	b.n	800ad7e <_dtoa_r+0x126>
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e7b3      	b.n	800ae0a <_dtoa_r+0x1b2>
 800aea2:	900c      	str	r0, [sp, #48]	; 0x30
 800aea4:	e7b2      	b.n	800ae0c <_dtoa_r+0x1b4>
 800aea6:	9b05      	ldr	r3, [sp, #20]
 800aea8:	eba3 030b 	sub.w	r3, r3, fp
 800aeac:	9305      	str	r3, [sp, #20]
 800aeae:	f1cb 0300 	rsb	r3, fp, #0
 800aeb2:	9308      	str	r3, [sp, #32]
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	930b      	str	r3, [sp, #44]	; 0x2c
 800aeb8:	e7bf      	b.n	800ae3a <_dtoa_r+0x1e2>
 800aeba:	2300      	movs	r3, #0
 800aebc:	9309      	str	r3, [sp, #36]	; 0x24
 800aebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	dc52      	bgt.n	800af6a <_dtoa_r+0x312>
 800aec4:	2301      	movs	r3, #1
 800aec6:	9301      	str	r3, [sp, #4]
 800aec8:	9304      	str	r3, [sp, #16]
 800aeca:	461a      	mov	r2, r3
 800aecc:	920a      	str	r2, [sp, #40]	; 0x28
 800aece:	e00b      	b.n	800aee8 <_dtoa_r+0x290>
 800aed0:	2301      	movs	r3, #1
 800aed2:	e7f3      	b.n	800aebc <_dtoa_r+0x264>
 800aed4:	2300      	movs	r3, #0
 800aed6:	9309      	str	r3, [sp, #36]	; 0x24
 800aed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeda:	445b      	add	r3, fp
 800aedc:	9301      	str	r3, [sp, #4]
 800aede:	3301      	adds	r3, #1
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	9304      	str	r3, [sp, #16]
 800aee4:	bfb8      	it	lt
 800aee6:	2301      	movlt	r3, #1
 800aee8:	69e0      	ldr	r0, [r4, #28]
 800aeea:	2100      	movs	r1, #0
 800aeec:	2204      	movs	r2, #4
 800aeee:	f102 0614 	add.w	r6, r2, #20
 800aef2:	429e      	cmp	r6, r3
 800aef4:	d93d      	bls.n	800af72 <_dtoa_r+0x31a>
 800aef6:	6041      	str	r1, [r0, #4]
 800aef8:	4620      	mov	r0, r4
 800aefa:	f001 fac3 	bl	800c484 <_Balloc>
 800aefe:	9000      	str	r0, [sp, #0]
 800af00:	2800      	cmp	r0, #0
 800af02:	d139      	bne.n	800af78 <_dtoa_r+0x320>
 800af04:	4b16      	ldr	r3, [pc, #88]	; (800af60 <_dtoa_r+0x308>)
 800af06:	4602      	mov	r2, r0
 800af08:	f240 11af 	movw	r1, #431	; 0x1af
 800af0c:	e6bd      	b.n	800ac8a <_dtoa_r+0x32>
 800af0e:	2301      	movs	r3, #1
 800af10:	e7e1      	b.n	800aed6 <_dtoa_r+0x27e>
 800af12:	2501      	movs	r5, #1
 800af14:	2300      	movs	r3, #0
 800af16:	9307      	str	r3, [sp, #28]
 800af18:	9509      	str	r5, [sp, #36]	; 0x24
 800af1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af1e:	9301      	str	r3, [sp, #4]
 800af20:	9304      	str	r3, [sp, #16]
 800af22:	2200      	movs	r2, #0
 800af24:	2312      	movs	r3, #18
 800af26:	e7d1      	b.n	800aecc <_dtoa_r+0x274>
 800af28:	636f4361 	.word	0x636f4361
 800af2c:	3fd287a7 	.word	0x3fd287a7
 800af30:	8b60c8b3 	.word	0x8b60c8b3
 800af34:	3fc68a28 	.word	0x3fc68a28
 800af38:	509f79fb 	.word	0x509f79fb
 800af3c:	3fd34413 	.word	0x3fd34413
 800af40:	0800de7e 	.word	0x0800de7e
 800af44:	0800de95 	.word	0x0800de95
 800af48:	7ff00000 	.word	0x7ff00000
 800af4c:	0800de7a 	.word	0x0800de7a
 800af50:	0800de71 	.word	0x0800de71
 800af54:	0800dce9 	.word	0x0800dce9
 800af58:	3ff80000 	.word	0x3ff80000
 800af5c:	0800dff0 	.word	0x0800dff0
 800af60:	0800deed 	.word	0x0800deed
 800af64:	2301      	movs	r3, #1
 800af66:	9309      	str	r3, [sp, #36]	; 0x24
 800af68:	e7d7      	b.n	800af1a <_dtoa_r+0x2c2>
 800af6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af6c:	9301      	str	r3, [sp, #4]
 800af6e:	9304      	str	r3, [sp, #16]
 800af70:	e7ba      	b.n	800aee8 <_dtoa_r+0x290>
 800af72:	3101      	adds	r1, #1
 800af74:	0052      	lsls	r2, r2, #1
 800af76:	e7ba      	b.n	800aeee <_dtoa_r+0x296>
 800af78:	69e3      	ldr	r3, [r4, #28]
 800af7a:	9a00      	ldr	r2, [sp, #0]
 800af7c:	601a      	str	r2, [r3, #0]
 800af7e:	9b04      	ldr	r3, [sp, #16]
 800af80:	2b0e      	cmp	r3, #14
 800af82:	f200 80a8 	bhi.w	800b0d6 <_dtoa_r+0x47e>
 800af86:	2d00      	cmp	r5, #0
 800af88:	f000 80a5 	beq.w	800b0d6 <_dtoa_r+0x47e>
 800af8c:	f1bb 0f00 	cmp.w	fp, #0
 800af90:	dd38      	ble.n	800b004 <_dtoa_r+0x3ac>
 800af92:	4bc0      	ldr	r3, [pc, #768]	; (800b294 <_dtoa_r+0x63c>)
 800af94:	f00b 020f 	and.w	r2, fp, #15
 800af98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af9c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800afa0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800afa4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800afa8:	d019      	beq.n	800afde <_dtoa_r+0x386>
 800afaa:	4bbb      	ldr	r3, [pc, #748]	; (800b298 <_dtoa_r+0x640>)
 800afac:	ec51 0b18 	vmov	r0, r1, d8
 800afb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800afb4:	f7f5 fc52 	bl	800085c <__aeabi_ddiv>
 800afb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afbc:	f008 080f 	and.w	r8, r8, #15
 800afc0:	2503      	movs	r5, #3
 800afc2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b298 <_dtoa_r+0x640>
 800afc6:	f1b8 0f00 	cmp.w	r8, #0
 800afca:	d10a      	bne.n	800afe2 <_dtoa_r+0x38a>
 800afcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afd0:	4632      	mov	r2, r6
 800afd2:	463b      	mov	r3, r7
 800afd4:	f7f5 fc42 	bl	800085c <__aeabi_ddiv>
 800afd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afdc:	e02b      	b.n	800b036 <_dtoa_r+0x3de>
 800afde:	2502      	movs	r5, #2
 800afe0:	e7ef      	b.n	800afc2 <_dtoa_r+0x36a>
 800afe2:	f018 0f01 	tst.w	r8, #1
 800afe6:	d008      	beq.n	800affa <_dtoa_r+0x3a2>
 800afe8:	4630      	mov	r0, r6
 800afea:	4639      	mov	r1, r7
 800afec:	e9d9 2300 	ldrd	r2, r3, [r9]
 800aff0:	f7f5 fb0a 	bl	8000608 <__aeabi_dmul>
 800aff4:	3501      	adds	r5, #1
 800aff6:	4606      	mov	r6, r0
 800aff8:	460f      	mov	r7, r1
 800affa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800affe:	f109 0908 	add.w	r9, r9, #8
 800b002:	e7e0      	b.n	800afc6 <_dtoa_r+0x36e>
 800b004:	f000 809f 	beq.w	800b146 <_dtoa_r+0x4ee>
 800b008:	f1cb 0600 	rsb	r6, fp, #0
 800b00c:	4ba1      	ldr	r3, [pc, #644]	; (800b294 <_dtoa_r+0x63c>)
 800b00e:	4fa2      	ldr	r7, [pc, #648]	; (800b298 <_dtoa_r+0x640>)
 800b010:	f006 020f 	and.w	r2, r6, #15
 800b014:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01c:	ec51 0b18 	vmov	r0, r1, d8
 800b020:	f7f5 faf2 	bl	8000608 <__aeabi_dmul>
 800b024:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b028:	1136      	asrs	r6, r6, #4
 800b02a:	2300      	movs	r3, #0
 800b02c:	2502      	movs	r5, #2
 800b02e:	2e00      	cmp	r6, #0
 800b030:	d17e      	bne.n	800b130 <_dtoa_r+0x4d8>
 800b032:	2b00      	cmp	r3, #0
 800b034:	d1d0      	bne.n	800afd8 <_dtoa_r+0x380>
 800b036:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b038:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	f000 8084 	beq.w	800b14a <_dtoa_r+0x4f2>
 800b042:	4b96      	ldr	r3, [pc, #600]	; (800b29c <_dtoa_r+0x644>)
 800b044:	2200      	movs	r2, #0
 800b046:	4640      	mov	r0, r8
 800b048:	4649      	mov	r1, r9
 800b04a:	f7f5 fd4f 	bl	8000aec <__aeabi_dcmplt>
 800b04e:	2800      	cmp	r0, #0
 800b050:	d07b      	beq.n	800b14a <_dtoa_r+0x4f2>
 800b052:	9b04      	ldr	r3, [sp, #16]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d078      	beq.n	800b14a <_dtoa_r+0x4f2>
 800b058:	9b01      	ldr	r3, [sp, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	dd39      	ble.n	800b0d2 <_dtoa_r+0x47a>
 800b05e:	4b90      	ldr	r3, [pc, #576]	; (800b2a0 <_dtoa_r+0x648>)
 800b060:	2200      	movs	r2, #0
 800b062:	4640      	mov	r0, r8
 800b064:	4649      	mov	r1, r9
 800b066:	f7f5 facf 	bl	8000608 <__aeabi_dmul>
 800b06a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b06e:	9e01      	ldr	r6, [sp, #4]
 800b070:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800b074:	3501      	adds	r5, #1
 800b076:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b07a:	4628      	mov	r0, r5
 800b07c:	f7f5 fa5a 	bl	8000534 <__aeabi_i2d>
 800b080:	4642      	mov	r2, r8
 800b082:	464b      	mov	r3, r9
 800b084:	f7f5 fac0 	bl	8000608 <__aeabi_dmul>
 800b088:	4b86      	ldr	r3, [pc, #536]	; (800b2a4 <_dtoa_r+0x64c>)
 800b08a:	2200      	movs	r2, #0
 800b08c:	f7f5 f906 	bl	800029c <__adddf3>
 800b090:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b094:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b098:	9303      	str	r3, [sp, #12]
 800b09a:	2e00      	cmp	r6, #0
 800b09c:	d158      	bne.n	800b150 <_dtoa_r+0x4f8>
 800b09e:	4b82      	ldr	r3, [pc, #520]	; (800b2a8 <_dtoa_r+0x650>)
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	4640      	mov	r0, r8
 800b0a4:	4649      	mov	r1, r9
 800b0a6:	f7f5 f8f7 	bl	8000298 <__aeabi_dsub>
 800b0aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b0ae:	4680      	mov	r8, r0
 800b0b0:	4689      	mov	r9, r1
 800b0b2:	f7f5 fd39 	bl	8000b28 <__aeabi_dcmpgt>
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	f040 8296 	bne.w	800b5e8 <_dtoa_r+0x990>
 800b0bc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b0c0:	4640      	mov	r0, r8
 800b0c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0c6:	4649      	mov	r1, r9
 800b0c8:	f7f5 fd10 	bl	8000aec <__aeabi_dcmplt>
 800b0cc:	2800      	cmp	r0, #0
 800b0ce:	f040 8289 	bne.w	800b5e4 <_dtoa_r+0x98c>
 800b0d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b0d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	f2c0 814e 	blt.w	800b37a <_dtoa_r+0x722>
 800b0de:	f1bb 0f0e 	cmp.w	fp, #14
 800b0e2:	f300 814a 	bgt.w	800b37a <_dtoa_r+0x722>
 800b0e6:	4b6b      	ldr	r3, [pc, #428]	; (800b294 <_dtoa_r+0x63c>)
 800b0e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b0ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b0f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f280 80dc 	bge.w	800b2b0 <_dtoa_r+0x658>
 800b0f8:	9b04      	ldr	r3, [sp, #16]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	f300 80d8 	bgt.w	800b2b0 <_dtoa_r+0x658>
 800b100:	f040 826f 	bne.w	800b5e2 <_dtoa_r+0x98a>
 800b104:	4b68      	ldr	r3, [pc, #416]	; (800b2a8 <_dtoa_r+0x650>)
 800b106:	2200      	movs	r2, #0
 800b108:	4640      	mov	r0, r8
 800b10a:	4649      	mov	r1, r9
 800b10c:	f7f5 fa7c 	bl	8000608 <__aeabi_dmul>
 800b110:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b114:	f7f5 fcfe 	bl	8000b14 <__aeabi_dcmpge>
 800b118:	9e04      	ldr	r6, [sp, #16]
 800b11a:	4637      	mov	r7, r6
 800b11c:	2800      	cmp	r0, #0
 800b11e:	f040 8245 	bne.w	800b5ac <_dtoa_r+0x954>
 800b122:	9d00      	ldr	r5, [sp, #0]
 800b124:	2331      	movs	r3, #49	; 0x31
 800b126:	f805 3b01 	strb.w	r3, [r5], #1
 800b12a:	f10b 0b01 	add.w	fp, fp, #1
 800b12e:	e241      	b.n	800b5b4 <_dtoa_r+0x95c>
 800b130:	07f2      	lsls	r2, r6, #31
 800b132:	d505      	bpl.n	800b140 <_dtoa_r+0x4e8>
 800b134:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b138:	f7f5 fa66 	bl	8000608 <__aeabi_dmul>
 800b13c:	3501      	adds	r5, #1
 800b13e:	2301      	movs	r3, #1
 800b140:	1076      	asrs	r6, r6, #1
 800b142:	3708      	adds	r7, #8
 800b144:	e773      	b.n	800b02e <_dtoa_r+0x3d6>
 800b146:	2502      	movs	r5, #2
 800b148:	e775      	b.n	800b036 <_dtoa_r+0x3de>
 800b14a:	9e04      	ldr	r6, [sp, #16]
 800b14c:	465f      	mov	r7, fp
 800b14e:	e792      	b.n	800b076 <_dtoa_r+0x41e>
 800b150:	9900      	ldr	r1, [sp, #0]
 800b152:	4b50      	ldr	r3, [pc, #320]	; (800b294 <_dtoa_r+0x63c>)
 800b154:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b158:	4431      	add	r1, r6
 800b15a:	9102      	str	r1, [sp, #8]
 800b15c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b15e:	eeb0 9a47 	vmov.f32	s18, s14
 800b162:	eef0 9a67 	vmov.f32	s19, s15
 800b166:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b16a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b16e:	2900      	cmp	r1, #0
 800b170:	d044      	beq.n	800b1fc <_dtoa_r+0x5a4>
 800b172:	494e      	ldr	r1, [pc, #312]	; (800b2ac <_dtoa_r+0x654>)
 800b174:	2000      	movs	r0, #0
 800b176:	f7f5 fb71 	bl	800085c <__aeabi_ddiv>
 800b17a:	ec53 2b19 	vmov	r2, r3, d9
 800b17e:	f7f5 f88b 	bl	8000298 <__aeabi_dsub>
 800b182:	9d00      	ldr	r5, [sp, #0]
 800b184:	ec41 0b19 	vmov	d9, r0, r1
 800b188:	4649      	mov	r1, r9
 800b18a:	4640      	mov	r0, r8
 800b18c:	f7f5 fcec 	bl	8000b68 <__aeabi_d2iz>
 800b190:	4606      	mov	r6, r0
 800b192:	f7f5 f9cf 	bl	8000534 <__aeabi_i2d>
 800b196:	4602      	mov	r2, r0
 800b198:	460b      	mov	r3, r1
 800b19a:	4640      	mov	r0, r8
 800b19c:	4649      	mov	r1, r9
 800b19e:	f7f5 f87b 	bl	8000298 <__aeabi_dsub>
 800b1a2:	3630      	adds	r6, #48	; 0x30
 800b1a4:	f805 6b01 	strb.w	r6, [r5], #1
 800b1a8:	ec53 2b19 	vmov	r2, r3, d9
 800b1ac:	4680      	mov	r8, r0
 800b1ae:	4689      	mov	r9, r1
 800b1b0:	f7f5 fc9c 	bl	8000aec <__aeabi_dcmplt>
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	d164      	bne.n	800b282 <_dtoa_r+0x62a>
 800b1b8:	4642      	mov	r2, r8
 800b1ba:	464b      	mov	r3, r9
 800b1bc:	4937      	ldr	r1, [pc, #220]	; (800b29c <_dtoa_r+0x644>)
 800b1be:	2000      	movs	r0, #0
 800b1c0:	f7f5 f86a 	bl	8000298 <__aeabi_dsub>
 800b1c4:	ec53 2b19 	vmov	r2, r3, d9
 800b1c8:	f7f5 fc90 	bl	8000aec <__aeabi_dcmplt>
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	f040 80b6 	bne.w	800b33e <_dtoa_r+0x6e6>
 800b1d2:	9b02      	ldr	r3, [sp, #8]
 800b1d4:	429d      	cmp	r5, r3
 800b1d6:	f43f af7c 	beq.w	800b0d2 <_dtoa_r+0x47a>
 800b1da:	4b31      	ldr	r3, [pc, #196]	; (800b2a0 <_dtoa_r+0x648>)
 800b1dc:	ec51 0b19 	vmov	r0, r1, d9
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	f7f5 fa11 	bl	8000608 <__aeabi_dmul>
 800b1e6:	4b2e      	ldr	r3, [pc, #184]	; (800b2a0 <_dtoa_r+0x648>)
 800b1e8:	ec41 0b19 	vmov	d9, r0, r1
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	4640      	mov	r0, r8
 800b1f0:	4649      	mov	r1, r9
 800b1f2:	f7f5 fa09 	bl	8000608 <__aeabi_dmul>
 800b1f6:	4680      	mov	r8, r0
 800b1f8:	4689      	mov	r9, r1
 800b1fa:	e7c5      	b.n	800b188 <_dtoa_r+0x530>
 800b1fc:	ec51 0b17 	vmov	r0, r1, d7
 800b200:	f7f5 fa02 	bl	8000608 <__aeabi_dmul>
 800b204:	9b02      	ldr	r3, [sp, #8]
 800b206:	9d00      	ldr	r5, [sp, #0]
 800b208:	930f      	str	r3, [sp, #60]	; 0x3c
 800b20a:	ec41 0b19 	vmov	d9, r0, r1
 800b20e:	4649      	mov	r1, r9
 800b210:	4640      	mov	r0, r8
 800b212:	f7f5 fca9 	bl	8000b68 <__aeabi_d2iz>
 800b216:	4606      	mov	r6, r0
 800b218:	f7f5 f98c 	bl	8000534 <__aeabi_i2d>
 800b21c:	3630      	adds	r6, #48	; 0x30
 800b21e:	4602      	mov	r2, r0
 800b220:	460b      	mov	r3, r1
 800b222:	4640      	mov	r0, r8
 800b224:	4649      	mov	r1, r9
 800b226:	f7f5 f837 	bl	8000298 <__aeabi_dsub>
 800b22a:	f805 6b01 	strb.w	r6, [r5], #1
 800b22e:	9b02      	ldr	r3, [sp, #8]
 800b230:	429d      	cmp	r5, r3
 800b232:	4680      	mov	r8, r0
 800b234:	4689      	mov	r9, r1
 800b236:	f04f 0200 	mov.w	r2, #0
 800b23a:	d124      	bne.n	800b286 <_dtoa_r+0x62e>
 800b23c:	4b1b      	ldr	r3, [pc, #108]	; (800b2ac <_dtoa_r+0x654>)
 800b23e:	ec51 0b19 	vmov	r0, r1, d9
 800b242:	f7f5 f82b 	bl	800029c <__adddf3>
 800b246:	4602      	mov	r2, r0
 800b248:	460b      	mov	r3, r1
 800b24a:	4640      	mov	r0, r8
 800b24c:	4649      	mov	r1, r9
 800b24e:	f7f5 fc6b 	bl	8000b28 <__aeabi_dcmpgt>
 800b252:	2800      	cmp	r0, #0
 800b254:	d173      	bne.n	800b33e <_dtoa_r+0x6e6>
 800b256:	ec53 2b19 	vmov	r2, r3, d9
 800b25a:	4914      	ldr	r1, [pc, #80]	; (800b2ac <_dtoa_r+0x654>)
 800b25c:	2000      	movs	r0, #0
 800b25e:	f7f5 f81b 	bl	8000298 <__aeabi_dsub>
 800b262:	4602      	mov	r2, r0
 800b264:	460b      	mov	r3, r1
 800b266:	4640      	mov	r0, r8
 800b268:	4649      	mov	r1, r9
 800b26a:	f7f5 fc3f 	bl	8000aec <__aeabi_dcmplt>
 800b26e:	2800      	cmp	r0, #0
 800b270:	f43f af2f 	beq.w	800b0d2 <_dtoa_r+0x47a>
 800b274:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b276:	1e6b      	subs	r3, r5, #1
 800b278:	930f      	str	r3, [sp, #60]	; 0x3c
 800b27a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b27e:	2b30      	cmp	r3, #48	; 0x30
 800b280:	d0f8      	beq.n	800b274 <_dtoa_r+0x61c>
 800b282:	46bb      	mov	fp, r7
 800b284:	e04a      	b.n	800b31c <_dtoa_r+0x6c4>
 800b286:	4b06      	ldr	r3, [pc, #24]	; (800b2a0 <_dtoa_r+0x648>)
 800b288:	f7f5 f9be 	bl	8000608 <__aeabi_dmul>
 800b28c:	4680      	mov	r8, r0
 800b28e:	4689      	mov	r9, r1
 800b290:	e7bd      	b.n	800b20e <_dtoa_r+0x5b6>
 800b292:	bf00      	nop
 800b294:	0800dff0 	.word	0x0800dff0
 800b298:	0800dfc8 	.word	0x0800dfc8
 800b29c:	3ff00000 	.word	0x3ff00000
 800b2a0:	40240000 	.word	0x40240000
 800b2a4:	401c0000 	.word	0x401c0000
 800b2a8:	40140000 	.word	0x40140000
 800b2ac:	3fe00000 	.word	0x3fe00000
 800b2b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b2b4:	9d00      	ldr	r5, [sp, #0]
 800b2b6:	4642      	mov	r2, r8
 800b2b8:	464b      	mov	r3, r9
 800b2ba:	4630      	mov	r0, r6
 800b2bc:	4639      	mov	r1, r7
 800b2be:	f7f5 facd 	bl	800085c <__aeabi_ddiv>
 800b2c2:	f7f5 fc51 	bl	8000b68 <__aeabi_d2iz>
 800b2c6:	9001      	str	r0, [sp, #4]
 800b2c8:	f7f5 f934 	bl	8000534 <__aeabi_i2d>
 800b2cc:	4642      	mov	r2, r8
 800b2ce:	464b      	mov	r3, r9
 800b2d0:	f7f5 f99a 	bl	8000608 <__aeabi_dmul>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	460b      	mov	r3, r1
 800b2d8:	4630      	mov	r0, r6
 800b2da:	4639      	mov	r1, r7
 800b2dc:	f7f4 ffdc 	bl	8000298 <__aeabi_dsub>
 800b2e0:	9e01      	ldr	r6, [sp, #4]
 800b2e2:	9f04      	ldr	r7, [sp, #16]
 800b2e4:	3630      	adds	r6, #48	; 0x30
 800b2e6:	f805 6b01 	strb.w	r6, [r5], #1
 800b2ea:	9e00      	ldr	r6, [sp, #0]
 800b2ec:	1bae      	subs	r6, r5, r6
 800b2ee:	42b7      	cmp	r7, r6
 800b2f0:	4602      	mov	r2, r0
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	d134      	bne.n	800b360 <_dtoa_r+0x708>
 800b2f6:	f7f4 ffd1 	bl	800029c <__adddf3>
 800b2fa:	4642      	mov	r2, r8
 800b2fc:	464b      	mov	r3, r9
 800b2fe:	4606      	mov	r6, r0
 800b300:	460f      	mov	r7, r1
 800b302:	f7f5 fc11 	bl	8000b28 <__aeabi_dcmpgt>
 800b306:	b9c8      	cbnz	r0, 800b33c <_dtoa_r+0x6e4>
 800b308:	4642      	mov	r2, r8
 800b30a:	464b      	mov	r3, r9
 800b30c:	4630      	mov	r0, r6
 800b30e:	4639      	mov	r1, r7
 800b310:	f7f5 fbe2 	bl	8000ad8 <__aeabi_dcmpeq>
 800b314:	b110      	cbz	r0, 800b31c <_dtoa_r+0x6c4>
 800b316:	9b01      	ldr	r3, [sp, #4]
 800b318:	07db      	lsls	r3, r3, #31
 800b31a:	d40f      	bmi.n	800b33c <_dtoa_r+0x6e4>
 800b31c:	4651      	mov	r1, sl
 800b31e:	4620      	mov	r0, r4
 800b320:	f001 f8f0 	bl	800c504 <_Bfree>
 800b324:	2300      	movs	r3, #0
 800b326:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b328:	702b      	strb	r3, [r5, #0]
 800b32a:	f10b 0301 	add.w	r3, fp, #1
 800b32e:	6013      	str	r3, [r2, #0]
 800b330:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b332:	2b00      	cmp	r3, #0
 800b334:	f43f ace2 	beq.w	800acfc <_dtoa_r+0xa4>
 800b338:	601d      	str	r5, [r3, #0]
 800b33a:	e4df      	b.n	800acfc <_dtoa_r+0xa4>
 800b33c:	465f      	mov	r7, fp
 800b33e:	462b      	mov	r3, r5
 800b340:	461d      	mov	r5, r3
 800b342:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b346:	2a39      	cmp	r2, #57	; 0x39
 800b348:	d106      	bne.n	800b358 <_dtoa_r+0x700>
 800b34a:	9a00      	ldr	r2, [sp, #0]
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d1f7      	bne.n	800b340 <_dtoa_r+0x6e8>
 800b350:	9900      	ldr	r1, [sp, #0]
 800b352:	2230      	movs	r2, #48	; 0x30
 800b354:	3701      	adds	r7, #1
 800b356:	700a      	strb	r2, [r1, #0]
 800b358:	781a      	ldrb	r2, [r3, #0]
 800b35a:	3201      	adds	r2, #1
 800b35c:	701a      	strb	r2, [r3, #0]
 800b35e:	e790      	b.n	800b282 <_dtoa_r+0x62a>
 800b360:	4ba3      	ldr	r3, [pc, #652]	; (800b5f0 <_dtoa_r+0x998>)
 800b362:	2200      	movs	r2, #0
 800b364:	f7f5 f950 	bl	8000608 <__aeabi_dmul>
 800b368:	2200      	movs	r2, #0
 800b36a:	2300      	movs	r3, #0
 800b36c:	4606      	mov	r6, r0
 800b36e:	460f      	mov	r7, r1
 800b370:	f7f5 fbb2 	bl	8000ad8 <__aeabi_dcmpeq>
 800b374:	2800      	cmp	r0, #0
 800b376:	d09e      	beq.n	800b2b6 <_dtoa_r+0x65e>
 800b378:	e7d0      	b.n	800b31c <_dtoa_r+0x6c4>
 800b37a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b37c:	2a00      	cmp	r2, #0
 800b37e:	f000 80ca 	beq.w	800b516 <_dtoa_r+0x8be>
 800b382:	9a07      	ldr	r2, [sp, #28]
 800b384:	2a01      	cmp	r2, #1
 800b386:	f300 80ad 	bgt.w	800b4e4 <_dtoa_r+0x88c>
 800b38a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b38c:	2a00      	cmp	r2, #0
 800b38e:	f000 80a5 	beq.w	800b4dc <_dtoa_r+0x884>
 800b392:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b396:	9e08      	ldr	r6, [sp, #32]
 800b398:	9d05      	ldr	r5, [sp, #20]
 800b39a:	9a05      	ldr	r2, [sp, #20]
 800b39c:	441a      	add	r2, r3
 800b39e:	9205      	str	r2, [sp, #20]
 800b3a0:	9a06      	ldr	r2, [sp, #24]
 800b3a2:	2101      	movs	r1, #1
 800b3a4:	441a      	add	r2, r3
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	9206      	str	r2, [sp, #24]
 800b3aa:	f001 f9ab 	bl	800c704 <__i2b>
 800b3ae:	4607      	mov	r7, r0
 800b3b0:	b165      	cbz	r5, 800b3cc <_dtoa_r+0x774>
 800b3b2:	9b06      	ldr	r3, [sp, #24]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	dd09      	ble.n	800b3cc <_dtoa_r+0x774>
 800b3b8:	42ab      	cmp	r3, r5
 800b3ba:	9a05      	ldr	r2, [sp, #20]
 800b3bc:	bfa8      	it	ge
 800b3be:	462b      	movge	r3, r5
 800b3c0:	1ad2      	subs	r2, r2, r3
 800b3c2:	9205      	str	r2, [sp, #20]
 800b3c4:	9a06      	ldr	r2, [sp, #24]
 800b3c6:	1aed      	subs	r5, r5, r3
 800b3c8:	1ad3      	subs	r3, r2, r3
 800b3ca:	9306      	str	r3, [sp, #24]
 800b3cc:	9b08      	ldr	r3, [sp, #32]
 800b3ce:	b1f3      	cbz	r3, 800b40e <_dtoa_r+0x7b6>
 800b3d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	f000 80a3 	beq.w	800b51e <_dtoa_r+0x8c6>
 800b3d8:	2e00      	cmp	r6, #0
 800b3da:	dd10      	ble.n	800b3fe <_dtoa_r+0x7a6>
 800b3dc:	4639      	mov	r1, r7
 800b3de:	4632      	mov	r2, r6
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	f001 fa4f 	bl	800c884 <__pow5mult>
 800b3e6:	4652      	mov	r2, sl
 800b3e8:	4601      	mov	r1, r0
 800b3ea:	4607      	mov	r7, r0
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	f001 f99f 	bl	800c730 <__multiply>
 800b3f2:	4651      	mov	r1, sl
 800b3f4:	4680      	mov	r8, r0
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	f001 f884 	bl	800c504 <_Bfree>
 800b3fc:	46c2      	mov	sl, r8
 800b3fe:	9b08      	ldr	r3, [sp, #32]
 800b400:	1b9a      	subs	r2, r3, r6
 800b402:	d004      	beq.n	800b40e <_dtoa_r+0x7b6>
 800b404:	4651      	mov	r1, sl
 800b406:	4620      	mov	r0, r4
 800b408:	f001 fa3c 	bl	800c884 <__pow5mult>
 800b40c:	4682      	mov	sl, r0
 800b40e:	2101      	movs	r1, #1
 800b410:	4620      	mov	r0, r4
 800b412:	f001 f977 	bl	800c704 <__i2b>
 800b416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b418:	2b00      	cmp	r3, #0
 800b41a:	4606      	mov	r6, r0
 800b41c:	f340 8081 	ble.w	800b522 <_dtoa_r+0x8ca>
 800b420:	461a      	mov	r2, r3
 800b422:	4601      	mov	r1, r0
 800b424:	4620      	mov	r0, r4
 800b426:	f001 fa2d 	bl	800c884 <__pow5mult>
 800b42a:	9b07      	ldr	r3, [sp, #28]
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	4606      	mov	r6, r0
 800b430:	dd7a      	ble.n	800b528 <_dtoa_r+0x8d0>
 800b432:	f04f 0800 	mov.w	r8, #0
 800b436:	6933      	ldr	r3, [r6, #16]
 800b438:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b43c:	6918      	ldr	r0, [r3, #16]
 800b43e:	f001 f913 	bl	800c668 <__hi0bits>
 800b442:	f1c0 0020 	rsb	r0, r0, #32
 800b446:	9b06      	ldr	r3, [sp, #24]
 800b448:	4418      	add	r0, r3
 800b44a:	f010 001f 	ands.w	r0, r0, #31
 800b44e:	f000 8094 	beq.w	800b57a <_dtoa_r+0x922>
 800b452:	f1c0 0320 	rsb	r3, r0, #32
 800b456:	2b04      	cmp	r3, #4
 800b458:	f340 8085 	ble.w	800b566 <_dtoa_r+0x90e>
 800b45c:	9b05      	ldr	r3, [sp, #20]
 800b45e:	f1c0 001c 	rsb	r0, r0, #28
 800b462:	4403      	add	r3, r0
 800b464:	9305      	str	r3, [sp, #20]
 800b466:	9b06      	ldr	r3, [sp, #24]
 800b468:	4403      	add	r3, r0
 800b46a:	4405      	add	r5, r0
 800b46c:	9306      	str	r3, [sp, #24]
 800b46e:	9b05      	ldr	r3, [sp, #20]
 800b470:	2b00      	cmp	r3, #0
 800b472:	dd05      	ble.n	800b480 <_dtoa_r+0x828>
 800b474:	4651      	mov	r1, sl
 800b476:	461a      	mov	r2, r3
 800b478:	4620      	mov	r0, r4
 800b47a:	f001 fa5d 	bl	800c938 <__lshift>
 800b47e:	4682      	mov	sl, r0
 800b480:	9b06      	ldr	r3, [sp, #24]
 800b482:	2b00      	cmp	r3, #0
 800b484:	dd05      	ble.n	800b492 <_dtoa_r+0x83a>
 800b486:	4631      	mov	r1, r6
 800b488:	461a      	mov	r2, r3
 800b48a:	4620      	mov	r0, r4
 800b48c:	f001 fa54 	bl	800c938 <__lshift>
 800b490:	4606      	mov	r6, r0
 800b492:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b494:	2b00      	cmp	r3, #0
 800b496:	d072      	beq.n	800b57e <_dtoa_r+0x926>
 800b498:	4631      	mov	r1, r6
 800b49a:	4650      	mov	r0, sl
 800b49c:	f001 fab8 	bl	800ca10 <__mcmp>
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	da6c      	bge.n	800b57e <_dtoa_r+0x926>
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	4651      	mov	r1, sl
 800b4a8:	220a      	movs	r2, #10
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	f001 f84c 	bl	800c548 <__multadd>
 800b4b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4b2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b4b6:	4682      	mov	sl, r0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	f000 81b0 	beq.w	800b81e <_dtoa_r+0xbc6>
 800b4be:	2300      	movs	r3, #0
 800b4c0:	4639      	mov	r1, r7
 800b4c2:	220a      	movs	r2, #10
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	f001 f83f 	bl	800c548 <__multadd>
 800b4ca:	9b01      	ldr	r3, [sp, #4]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	4607      	mov	r7, r0
 800b4d0:	f300 8096 	bgt.w	800b600 <_dtoa_r+0x9a8>
 800b4d4:	9b07      	ldr	r3, [sp, #28]
 800b4d6:	2b02      	cmp	r3, #2
 800b4d8:	dc59      	bgt.n	800b58e <_dtoa_r+0x936>
 800b4da:	e091      	b.n	800b600 <_dtoa_r+0x9a8>
 800b4dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b4de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b4e2:	e758      	b.n	800b396 <_dtoa_r+0x73e>
 800b4e4:	9b04      	ldr	r3, [sp, #16]
 800b4e6:	1e5e      	subs	r6, r3, #1
 800b4e8:	9b08      	ldr	r3, [sp, #32]
 800b4ea:	42b3      	cmp	r3, r6
 800b4ec:	bfbf      	itttt	lt
 800b4ee:	9b08      	ldrlt	r3, [sp, #32]
 800b4f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b4f2:	9608      	strlt	r6, [sp, #32]
 800b4f4:	1af3      	sublt	r3, r6, r3
 800b4f6:	bfb4      	ite	lt
 800b4f8:	18d2      	addlt	r2, r2, r3
 800b4fa:	1b9e      	subge	r6, r3, r6
 800b4fc:	9b04      	ldr	r3, [sp, #16]
 800b4fe:	bfbc      	itt	lt
 800b500:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b502:	2600      	movlt	r6, #0
 800b504:	2b00      	cmp	r3, #0
 800b506:	bfb7      	itett	lt
 800b508:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b50c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b510:	1a9d      	sublt	r5, r3, r2
 800b512:	2300      	movlt	r3, #0
 800b514:	e741      	b.n	800b39a <_dtoa_r+0x742>
 800b516:	9e08      	ldr	r6, [sp, #32]
 800b518:	9d05      	ldr	r5, [sp, #20]
 800b51a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b51c:	e748      	b.n	800b3b0 <_dtoa_r+0x758>
 800b51e:	9a08      	ldr	r2, [sp, #32]
 800b520:	e770      	b.n	800b404 <_dtoa_r+0x7ac>
 800b522:	9b07      	ldr	r3, [sp, #28]
 800b524:	2b01      	cmp	r3, #1
 800b526:	dc19      	bgt.n	800b55c <_dtoa_r+0x904>
 800b528:	9b02      	ldr	r3, [sp, #8]
 800b52a:	b9bb      	cbnz	r3, 800b55c <_dtoa_r+0x904>
 800b52c:	9b03      	ldr	r3, [sp, #12]
 800b52e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b532:	b99b      	cbnz	r3, 800b55c <_dtoa_r+0x904>
 800b534:	9b03      	ldr	r3, [sp, #12]
 800b536:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b53a:	0d1b      	lsrs	r3, r3, #20
 800b53c:	051b      	lsls	r3, r3, #20
 800b53e:	b183      	cbz	r3, 800b562 <_dtoa_r+0x90a>
 800b540:	9b05      	ldr	r3, [sp, #20]
 800b542:	3301      	adds	r3, #1
 800b544:	9305      	str	r3, [sp, #20]
 800b546:	9b06      	ldr	r3, [sp, #24]
 800b548:	3301      	adds	r3, #1
 800b54a:	9306      	str	r3, [sp, #24]
 800b54c:	f04f 0801 	mov.w	r8, #1
 800b550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b552:	2b00      	cmp	r3, #0
 800b554:	f47f af6f 	bne.w	800b436 <_dtoa_r+0x7de>
 800b558:	2001      	movs	r0, #1
 800b55a:	e774      	b.n	800b446 <_dtoa_r+0x7ee>
 800b55c:	f04f 0800 	mov.w	r8, #0
 800b560:	e7f6      	b.n	800b550 <_dtoa_r+0x8f8>
 800b562:	4698      	mov	r8, r3
 800b564:	e7f4      	b.n	800b550 <_dtoa_r+0x8f8>
 800b566:	d082      	beq.n	800b46e <_dtoa_r+0x816>
 800b568:	9a05      	ldr	r2, [sp, #20]
 800b56a:	331c      	adds	r3, #28
 800b56c:	441a      	add	r2, r3
 800b56e:	9205      	str	r2, [sp, #20]
 800b570:	9a06      	ldr	r2, [sp, #24]
 800b572:	441a      	add	r2, r3
 800b574:	441d      	add	r5, r3
 800b576:	9206      	str	r2, [sp, #24]
 800b578:	e779      	b.n	800b46e <_dtoa_r+0x816>
 800b57a:	4603      	mov	r3, r0
 800b57c:	e7f4      	b.n	800b568 <_dtoa_r+0x910>
 800b57e:	9b04      	ldr	r3, [sp, #16]
 800b580:	2b00      	cmp	r3, #0
 800b582:	dc37      	bgt.n	800b5f4 <_dtoa_r+0x99c>
 800b584:	9b07      	ldr	r3, [sp, #28]
 800b586:	2b02      	cmp	r3, #2
 800b588:	dd34      	ble.n	800b5f4 <_dtoa_r+0x99c>
 800b58a:	9b04      	ldr	r3, [sp, #16]
 800b58c:	9301      	str	r3, [sp, #4]
 800b58e:	9b01      	ldr	r3, [sp, #4]
 800b590:	b963      	cbnz	r3, 800b5ac <_dtoa_r+0x954>
 800b592:	4631      	mov	r1, r6
 800b594:	2205      	movs	r2, #5
 800b596:	4620      	mov	r0, r4
 800b598:	f000 ffd6 	bl	800c548 <__multadd>
 800b59c:	4601      	mov	r1, r0
 800b59e:	4606      	mov	r6, r0
 800b5a0:	4650      	mov	r0, sl
 800b5a2:	f001 fa35 	bl	800ca10 <__mcmp>
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	f73f adbb 	bgt.w	800b122 <_dtoa_r+0x4ca>
 800b5ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5ae:	9d00      	ldr	r5, [sp, #0]
 800b5b0:	ea6f 0b03 	mvn.w	fp, r3
 800b5b4:	f04f 0800 	mov.w	r8, #0
 800b5b8:	4631      	mov	r1, r6
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	f000 ffa2 	bl	800c504 <_Bfree>
 800b5c0:	2f00      	cmp	r7, #0
 800b5c2:	f43f aeab 	beq.w	800b31c <_dtoa_r+0x6c4>
 800b5c6:	f1b8 0f00 	cmp.w	r8, #0
 800b5ca:	d005      	beq.n	800b5d8 <_dtoa_r+0x980>
 800b5cc:	45b8      	cmp	r8, r7
 800b5ce:	d003      	beq.n	800b5d8 <_dtoa_r+0x980>
 800b5d0:	4641      	mov	r1, r8
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	f000 ff96 	bl	800c504 <_Bfree>
 800b5d8:	4639      	mov	r1, r7
 800b5da:	4620      	mov	r0, r4
 800b5dc:	f000 ff92 	bl	800c504 <_Bfree>
 800b5e0:	e69c      	b.n	800b31c <_dtoa_r+0x6c4>
 800b5e2:	2600      	movs	r6, #0
 800b5e4:	4637      	mov	r7, r6
 800b5e6:	e7e1      	b.n	800b5ac <_dtoa_r+0x954>
 800b5e8:	46bb      	mov	fp, r7
 800b5ea:	4637      	mov	r7, r6
 800b5ec:	e599      	b.n	800b122 <_dtoa_r+0x4ca>
 800b5ee:	bf00      	nop
 800b5f0:	40240000 	.word	0x40240000
 800b5f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	f000 80c8 	beq.w	800b78c <_dtoa_r+0xb34>
 800b5fc:	9b04      	ldr	r3, [sp, #16]
 800b5fe:	9301      	str	r3, [sp, #4]
 800b600:	2d00      	cmp	r5, #0
 800b602:	dd05      	ble.n	800b610 <_dtoa_r+0x9b8>
 800b604:	4639      	mov	r1, r7
 800b606:	462a      	mov	r2, r5
 800b608:	4620      	mov	r0, r4
 800b60a:	f001 f995 	bl	800c938 <__lshift>
 800b60e:	4607      	mov	r7, r0
 800b610:	f1b8 0f00 	cmp.w	r8, #0
 800b614:	d05b      	beq.n	800b6ce <_dtoa_r+0xa76>
 800b616:	6879      	ldr	r1, [r7, #4]
 800b618:	4620      	mov	r0, r4
 800b61a:	f000 ff33 	bl	800c484 <_Balloc>
 800b61e:	4605      	mov	r5, r0
 800b620:	b928      	cbnz	r0, 800b62e <_dtoa_r+0x9d6>
 800b622:	4b83      	ldr	r3, [pc, #524]	; (800b830 <_dtoa_r+0xbd8>)
 800b624:	4602      	mov	r2, r0
 800b626:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b62a:	f7ff bb2e 	b.w	800ac8a <_dtoa_r+0x32>
 800b62e:	693a      	ldr	r2, [r7, #16]
 800b630:	3202      	adds	r2, #2
 800b632:	0092      	lsls	r2, r2, #2
 800b634:	f107 010c 	add.w	r1, r7, #12
 800b638:	300c      	adds	r0, #12
 800b63a:	f7ff fa64 	bl	800ab06 <memcpy>
 800b63e:	2201      	movs	r2, #1
 800b640:	4629      	mov	r1, r5
 800b642:	4620      	mov	r0, r4
 800b644:	f001 f978 	bl	800c938 <__lshift>
 800b648:	9b00      	ldr	r3, [sp, #0]
 800b64a:	3301      	adds	r3, #1
 800b64c:	9304      	str	r3, [sp, #16]
 800b64e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b652:	4413      	add	r3, r2
 800b654:	9308      	str	r3, [sp, #32]
 800b656:	9b02      	ldr	r3, [sp, #8]
 800b658:	f003 0301 	and.w	r3, r3, #1
 800b65c:	46b8      	mov	r8, r7
 800b65e:	9306      	str	r3, [sp, #24]
 800b660:	4607      	mov	r7, r0
 800b662:	9b04      	ldr	r3, [sp, #16]
 800b664:	4631      	mov	r1, r6
 800b666:	3b01      	subs	r3, #1
 800b668:	4650      	mov	r0, sl
 800b66a:	9301      	str	r3, [sp, #4]
 800b66c:	f7ff fa6a 	bl	800ab44 <quorem>
 800b670:	4641      	mov	r1, r8
 800b672:	9002      	str	r0, [sp, #8]
 800b674:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b678:	4650      	mov	r0, sl
 800b67a:	f001 f9c9 	bl	800ca10 <__mcmp>
 800b67e:	463a      	mov	r2, r7
 800b680:	9005      	str	r0, [sp, #20]
 800b682:	4631      	mov	r1, r6
 800b684:	4620      	mov	r0, r4
 800b686:	f001 f9df 	bl	800ca48 <__mdiff>
 800b68a:	68c2      	ldr	r2, [r0, #12]
 800b68c:	4605      	mov	r5, r0
 800b68e:	bb02      	cbnz	r2, 800b6d2 <_dtoa_r+0xa7a>
 800b690:	4601      	mov	r1, r0
 800b692:	4650      	mov	r0, sl
 800b694:	f001 f9bc 	bl	800ca10 <__mcmp>
 800b698:	4602      	mov	r2, r0
 800b69a:	4629      	mov	r1, r5
 800b69c:	4620      	mov	r0, r4
 800b69e:	9209      	str	r2, [sp, #36]	; 0x24
 800b6a0:	f000 ff30 	bl	800c504 <_Bfree>
 800b6a4:	9b07      	ldr	r3, [sp, #28]
 800b6a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6a8:	9d04      	ldr	r5, [sp, #16]
 800b6aa:	ea43 0102 	orr.w	r1, r3, r2
 800b6ae:	9b06      	ldr	r3, [sp, #24]
 800b6b0:	4319      	orrs	r1, r3
 800b6b2:	d110      	bne.n	800b6d6 <_dtoa_r+0xa7e>
 800b6b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b6b8:	d029      	beq.n	800b70e <_dtoa_r+0xab6>
 800b6ba:	9b05      	ldr	r3, [sp, #20]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	dd02      	ble.n	800b6c6 <_dtoa_r+0xa6e>
 800b6c0:	9b02      	ldr	r3, [sp, #8]
 800b6c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b6c6:	9b01      	ldr	r3, [sp, #4]
 800b6c8:	f883 9000 	strb.w	r9, [r3]
 800b6cc:	e774      	b.n	800b5b8 <_dtoa_r+0x960>
 800b6ce:	4638      	mov	r0, r7
 800b6d0:	e7ba      	b.n	800b648 <_dtoa_r+0x9f0>
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	e7e1      	b.n	800b69a <_dtoa_r+0xa42>
 800b6d6:	9b05      	ldr	r3, [sp, #20]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	db04      	blt.n	800b6e6 <_dtoa_r+0xa8e>
 800b6dc:	9907      	ldr	r1, [sp, #28]
 800b6de:	430b      	orrs	r3, r1
 800b6e0:	9906      	ldr	r1, [sp, #24]
 800b6e2:	430b      	orrs	r3, r1
 800b6e4:	d120      	bne.n	800b728 <_dtoa_r+0xad0>
 800b6e6:	2a00      	cmp	r2, #0
 800b6e8:	dded      	ble.n	800b6c6 <_dtoa_r+0xa6e>
 800b6ea:	4651      	mov	r1, sl
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	f001 f922 	bl	800c938 <__lshift>
 800b6f4:	4631      	mov	r1, r6
 800b6f6:	4682      	mov	sl, r0
 800b6f8:	f001 f98a 	bl	800ca10 <__mcmp>
 800b6fc:	2800      	cmp	r0, #0
 800b6fe:	dc03      	bgt.n	800b708 <_dtoa_r+0xab0>
 800b700:	d1e1      	bne.n	800b6c6 <_dtoa_r+0xa6e>
 800b702:	f019 0f01 	tst.w	r9, #1
 800b706:	d0de      	beq.n	800b6c6 <_dtoa_r+0xa6e>
 800b708:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b70c:	d1d8      	bne.n	800b6c0 <_dtoa_r+0xa68>
 800b70e:	9a01      	ldr	r2, [sp, #4]
 800b710:	2339      	movs	r3, #57	; 0x39
 800b712:	7013      	strb	r3, [r2, #0]
 800b714:	462b      	mov	r3, r5
 800b716:	461d      	mov	r5, r3
 800b718:	3b01      	subs	r3, #1
 800b71a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b71e:	2a39      	cmp	r2, #57	; 0x39
 800b720:	d06c      	beq.n	800b7fc <_dtoa_r+0xba4>
 800b722:	3201      	adds	r2, #1
 800b724:	701a      	strb	r2, [r3, #0]
 800b726:	e747      	b.n	800b5b8 <_dtoa_r+0x960>
 800b728:	2a00      	cmp	r2, #0
 800b72a:	dd07      	ble.n	800b73c <_dtoa_r+0xae4>
 800b72c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b730:	d0ed      	beq.n	800b70e <_dtoa_r+0xab6>
 800b732:	9a01      	ldr	r2, [sp, #4]
 800b734:	f109 0301 	add.w	r3, r9, #1
 800b738:	7013      	strb	r3, [r2, #0]
 800b73a:	e73d      	b.n	800b5b8 <_dtoa_r+0x960>
 800b73c:	9b04      	ldr	r3, [sp, #16]
 800b73e:	9a08      	ldr	r2, [sp, #32]
 800b740:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b744:	4293      	cmp	r3, r2
 800b746:	d043      	beq.n	800b7d0 <_dtoa_r+0xb78>
 800b748:	4651      	mov	r1, sl
 800b74a:	2300      	movs	r3, #0
 800b74c:	220a      	movs	r2, #10
 800b74e:	4620      	mov	r0, r4
 800b750:	f000 fefa 	bl	800c548 <__multadd>
 800b754:	45b8      	cmp	r8, r7
 800b756:	4682      	mov	sl, r0
 800b758:	f04f 0300 	mov.w	r3, #0
 800b75c:	f04f 020a 	mov.w	r2, #10
 800b760:	4641      	mov	r1, r8
 800b762:	4620      	mov	r0, r4
 800b764:	d107      	bne.n	800b776 <_dtoa_r+0xb1e>
 800b766:	f000 feef 	bl	800c548 <__multadd>
 800b76a:	4680      	mov	r8, r0
 800b76c:	4607      	mov	r7, r0
 800b76e:	9b04      	ldr	r3, [sp, #16]
 800b770:	3301      	adds	r3, #1
 800b772:	9304      	str	r3, [sp, #16]
 800b774:	e775      	b.n	800b662 <_dtoa_r+0xa0a>
 800b776:	f000 fee7 	bl	800c548 <__multadd>
 800b77a:	4639      	mov	r1, r7
 800b77c:	4680      	mov	r8, r0
 800b77e:	2300      	movs	r3, #0
 800b780:	220a      	movs	r2, #10
 800b782:	4620      	mov	r0, r4
 800b784:	f000 fee0 	bl	800c548 <__multadd>
 800b788:	4607      	mov	r7, r0
 800b78a:	e7f0      	b.n	800b76e <_dtoa_r+0xb16>
 800b78c:	9b04      	ldr	r3, [sp, #16]
 800b78e:	9301      	str	r3, [sp, #4]
 800b790:	9d00      	ldr	r5, [sp, #0]
 800b792:	4631      	mov	r1, r6
 800b794:	4650      	mov	r0, sl
 800b796:	f7ff f9d5 	bl	800ab44 <quorem>
 800b79a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b79e:	9b00      	ldr	r3, [sp, #0]
 800b7a0:	f805 9b01 	strb.w	r9, [r5], #1
 800b7a4:	1aea      	subs	r2, r5, r3
 800b7a6:	9b01      	ldr	r3, [sp, #4]
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	dd07      	ble.n	800b7bc <_dtoa_r+0xb64>
 800b7ac:	4651      	mov	r1, sl
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	220a      	movs	r2, #10
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	f000 fec8 	bl	800c548 <__multadd>
 800b7b8:	4682      	mov	sl, r0
 800b7ba:	e7ea      	b.n	800b792 <_dtoa_r+0xb3a>
 800b7bc:	9b01      	ldr	r3, [sp, #4]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	bfc8      	it	gt
 800b7c2:	461d      	movgt	r5, r3
 800b7c4:	9b00      	ldr	r3, [sp, #0]
 800b7c6:	bfd8      	it	le
 800b7c8:	2501      	movle	r5, #1
 800b7ca:	441d      	add	r5, r3
 800b7cc:	f04f 0800 	mov.w	r8, #0
 800b7d0:	4651      	mov	r1, sl
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	f001 f8af 	bl	800c938 <__lshift>
 800b7da:	4631      	mov	r1, r6
 800b7dc:	4682      	mov	sl, r0
 800b7de:	f001 f917 	bl	800ca10 <__mcmp>
 800b7e2:	2800      	cmp	r0, #0
 800b7e4:	dc96      	bgt.n	800b714 <_dtoa_r+0xabc>
 800b7e6:	d102      	bne.n	800b7ee <_dtoa_r+0xb96>
 800b7e8:	f019 0f01 	tst.w	r9, #1
 800b7ec:	d192      	bne.n	800b714 <_dtoa_r+0xabc>
 800b7ee:	462b      	mov	r3, r5
 800b7f0:	461d      	mov	r5, r3
 800b7f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7f6:	2a30      	cmp	r2, #48	; 0x30
 800b7f8:	d0fa      	beq.n	800b7f0 <_dtoa_r+0xb98>
 800b7fa:	e6dd      	b.n	800b5b8 <_dtoa_r+0x960>
 800b7fc:	9a00      	ldr	r2, [sp, #0]
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d189      	bne.n	800b716 <_dtoa_r+0xabe>
 800b802:	f10b 0b01 	add.w	fp, fp, #1
 800b806:	2331      	movs	r3, #49	; 0x31
 800b808:	e796      	b.n	800b738 <_dtoa_r+0xae0>
 800b80a:	4b0a      	ldr	r3, [pc, #40]	; (800b834 <_dtoa_r+0xbdc>)
 800b80c:	f7ff ba99 	b.w	800ad42 <_dtoa_r+0xea>
 800b810:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b812:	2b00      	cmp	r3, #0
 800b814:	f47f aa6d 	bne.w	800acf2 <_dtoa_r+0x9a>
 800b818:	4b07      	ldr	r3, [pc, #28]	; (800b838 <_dtoa_r+0xbe0>)
 800b81a:	f7ff ba92 	b.w	800ad42 <_dtoa_r+0xea>
 800b81e:	9b01      	ldr	r3, [sp, #4]
 800b820:	2b00      	cmp	r3, #0
 800b822:	dcb5      	bgt.n	800b790 <_dtoa_r+0xb38>
 800b824:	9b07      	ldr	r3, [sp, #28]
 800b826:	2b02      	cmp	r3, #2
 800b828:	f73f aeb1 	bgt.w	800b58e <_dtoa_r+0x936>
 800b82c:	e7b0      	b.n	800b790 <_dtoa_r+0xb38>
 800b82e:	bf00      	nop
 800b830:	0800deed 	.word	0x0800deed
 800b834:	0800dce8 	.word	0x0800dce8
 800b838:	0800de71 	.word	0x0800de71

0800b83c <rshift>:
 800b83c:	6903      	ldr	r3, [r0, #16]
 800b83e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b842:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b846:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b84a:	f100 0414 	add.w	r4, r0, #20
 800b84e:	dd45      	ble.n	800b8dc <rshift+0xa0>
 800b850:	f011 011f 	ands.w	r1, r1, #31
 800b854:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b858:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b85c:	d10c      	bne.n	800b878 <rshift+0x3c>
 800b85e:	f100 0710 	add.w	r7, r0, #16
 800b862:	4629      	mov	r1, r5
 800b864:	42b1      	cmp	r1, r6
 800b866:	d334      	bcc.n	800b8d2 <rshift+0x96>
 800b868:	1a9b      	subs	r3, r3, r2
 800b86a:	009b      	lsls	r3, r3, #2
 800b86c:	1eea      	subs	r2, r5, #3
 800b86e:	4296      	cmp	r6, r2
 800b870:	bf38      	it	cc
 800b872:	2300      	movcc	r3, #0
 800b874:	4423      	add	r3, r4
 800b876:	e015      	b.n	800b8a4 <rshift+0x68>
 800b878:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b87c:	f1c1 0820 	rsb	r8, r1, #32
 800b880:	40cf      	lsrs	r7, r1
 800b882:	f105 0e04 	add.w	lr, r5, #4
 800b886:	46a1      	mov	r9, r4
 800b888:	4576      	cmp	r6, lr
 800b88a:	46f4      	mov	ip, lr
 800b88c:	d815      	bhi.n	800b8ba <rshift+0x7e>
 800b88e:	1a9a      	subs	r2, r3, r2
 800b890:	0092      	lsls	r2, r2, #2
 800b892:	3a04      	subs	r2, #4
 800b894:	3501      	adds	r5, #1
 800b896:	42ae      	cmp	r6, r5
 800b898:	bf38      	it	cc
 800b89a:	2200      	movcc	r2, #0
 800b89c:	18a3      	adds	r3, r4, r2
 800b89e:	50a7      	str	r7, [r4, r2]
 800b8a0:	b107      	cbz	r7, 800b8a4 <rshift+0x68>
 800b8a2:	3304      	adds	r3, #4
 800b8a4:	1b1a      	subs	r2, r3, r4
 800b8a6:	42a3      	cmp	r3, r4
 800b8a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b8ac:	bf08      	it	eq
 800b8ae:	2300      	moveq	r3, #0
 800b8b0:	6102      	str	r2, [r0, #16]
 800b8b2:	bf08      	it	eq
 800b8b4:	6143      	streq	r3, [r0, #20]
 800b8b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8ba:	f8dc c000 	ldr.w	ip, [ip]
 800b8be:	fa0c fc08 	lsl.w	ip, ip, r8
 800b8c2:	ea4c 0707 	orr.w	r7, ip, r7
 800b8c6:	f849 7b04 	str.w	r7, [r9], #4
 800b8ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b8ce:	40cf      	lsrs	r7, r1
 800b8d0:	e7da      	b.n	800b888 <rshift+0x4c>
 800b8d2:	f851 cb04 	ldr.w	ip, [r1], #4
 800b8d6:	f847 cf04 	str.w	ip, [r7, #4]!
 800b8da:	e7c3      	b.n	800b864 <rshift+0x28>
 800b8dc:	4623      	mov	r3, r4
 800b8de:	e7e1      	b.n	800b8a4 <rshift+0x68>

0800b8e0 <__hexdig_fun>:
 800b8e0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b8e4:	2b09      	cmp	r3, #9
 800b8e6:	d802      	bhi.n	800b8ee <__hexdig_fun+0xe>
 800b8e8:	3820      	subs	r0, #32
 800b8ea:	b2c0      	uxtb	r0, r0
 800b8ec:	4770      	bx	lr
 800b8ee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b8f2:	2b05      	cmp	r3, #5
 800b8f4:	d801      	bhi.n	800b8fa <__hexdig_fun+0x1a>
 800b8f6:	3847      	subs	r0, #71	; 0x47
 800b8f8:	e7f7      	b.n	800b8ea <__hexdig_fun+0xa>
 800b8fa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b8fe:	2b05      	cmp	r3, #5
 800b900:	d801      	bhi.n	800b906 <__hexdig_fun+0x26>
 800b902:	3827      	subs	r0, #39	; 0x27
 800b904:	e7f1      	b.n	800b8ea <__hexdig_fun+0xa>
 800b906:	2000      	movs	r0, #0
 800b908:	4770      	bx	lr
	...

0800b90c <__gethex>:
 800b90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b910:	4617      	mov	r7, r2
 800b912:	680a      	ldr	r2, [r1, #0]
 800b914:	b085      	sub	sp, #20
 800b916:	f102 0b02 	add.w	fp, r2, #2
 800b91a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b91e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b922:	4681      	mov	r9, r0
 800b924:	468a      	mov	sl, r1
 800b926:	9302      	str	r3, [sp, #8]
 800b928:	32fe      	adds	r2, #254	; 0xfe
 800b92a:	eb02 030b 	add.w	r3, r2, fp
 800b92e:	46d8      	mov	r8, fp
 800b930:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b934:	9301      	str	r3, [sp, #4]
 800b936:	2830      	cmp	r0, #48	; 0x30
 800b938:	d0f7      	beq.n	800b92a <__gethex+0x1e>
 800b93a:	f7ff ffd1 	bl	800b8e0 <__hexdig_fun>
 800b93e:	4604      	mov	r4, r0
 800b940:	2800      	cmp	r0, #0
 800b942:	d138      	bne.n	800b9b6 <__gethex+0xaa>
 800b944:	49a7      	ldr	r1, [pc, #668]	; (800bbe4 <__gethex+0x2d8>)
 800b946:	2201      	movs	r2, #1
 800b948:	4640      	mov	r0, r8
 800b94a:	f7ff f87d 	bl	800aa48 <strncmp>
 800b94e:	4606      	mov	r6, r0
 800b950:	2800      	cmp	r0, #0
 800b952:	d169      	bne.n	800ba28 <__gethex+0x11c>
 800b954:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b958:	465d      	mov	r5, fp
 800b95a:	f7ff ffc1 	bl	800b8e0 <__hexdig_fun>
 800b95e:	2800      	cmp	r0, #0
 800b960:	d064      	beq.n	800ba2c <__gethex+0x120>
 800b962:	465a      	mov	r2, fp
 800b964:	7810      	ldrb	r0, [r2, #0]
 800b966:	2830      	cmp	r0, #48	; 0x30
 800b968:	4690      	mov	r8, r2
 800b96a:	f102 0201 	add.w	r2, r2, #1
 800b96e:	d0f9      	beq.n	800b964 <__gethex+0x58>
 800b970:	f7ff ffb6 	bl	800b8e0 <__hexdig_fun>
 800b974:	2301      	movs	r3, #1
 800b976:	fab0 f480 	clz	r4, r0
 800b97a:	0964      	lsrs	r4, r4, #5
 800b97c:	465e      	mov	r6, fp
 800b97e:	9301      	str	r3, [sp, #4]
 800b980:	4642      	mov	r2, r8
 800b982:	4615      	mov	r5, r2
 800b984:	3201      	adds	r2, #1
 800b986:	7828      	ldrb	r0, [r5, #0]
 800b988:	f7ff ffaa 	bl	800b8e0 <__hexdig_fun>
 800b98c:	2800      	cmp	r0, #0
 800b98e:	d1f8      	bne.n	800b982 <__gethex+0x76>
 800b990:	4994      	ldr	r1, [pc, #592]	; (800bbe4 <__gethex+0x2d8>)
 800b992:	2201      	movs	r2, #1
 800b994:	4628      	mov	r0, r5
 800b996:	f7ff f857 	bl	800aa48 <strncmp>
 800b99a:	b978      	cbnz	r0, 800b9bc <__gethex+0xb0>
 800b99c:	b946      	cbnz	r6, 800b9b0 <__gethex+0xa4>
 800b99e:	1c6e      	adds	r6, r5, #1
 800b9a0:	4632      	mov	r2, r6
 800b9a2:	4615      	mov	r5, r2
 800b9a4:	3201      	adds	r2, #1
 800b9a6:	7828      	ldrb	r0, [r5, #0]
 800b9a8:	f7ff ff9a 	bl	800b8e0 <__hexdig_fun>
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	d1f8      	bne.n	800b9a2 <__gethex+0x96>
 800b9b0:	1b73      	subs	r3, r6, r5
 800b9b2:	009e      	lsls	r6, r3, #2
 800b9b4:	e004      	b.n	800b9c0 <__gethex+0xb4>
 800b9b6:	2400      	movs	r4, #0
 800b9b8:	4626      	mov	r6, r4
 800b9ba:	e7e1      	b.n	800b980 <__gethex+0x74>
 800b9bc:	2e00      	cmp	r6, #0
 800b9be:	d1f7      	bne.n	800b9b0 <__gethex+0xa4>
 800b9c0:	782b      	ldrb	r3, [r5, #0]
 800b9c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b9c6:	2b50      	cmp	r3, #80	; 0x50
 800b9c8:	d13d      	bne.n	800ba46 <__gethex+0x13a>
 800b9ca:	786b      	ldrb	r3, [r5, #1]
 800b9cc:	2b2b      	cmp	r3, #43	; 0x2b
 800b9ce:	d02f      	beq.n	800ba30 <__gethex+0x124>
 800b9d0:	2b2d      	cmp	r3, #45	; 0x2d
 800b9d2:	d031      	beq.n	800ba38 <__gethex+0x12c>
 800b9d4:	1c69      	adds	r1, r5, #1
 800b9d6:	f04f 0b00 	mov.w	fp, #0
 800b9da:	7808      	ldrb	r0, [r1, #0]
 800b9dc:	f7ff ff80 	bl	800b8e0 <__hexdig_fun>
 800b9e0:	1e42      	subs	r2, r0, #1
 800b9e2:	b2d2      	uxtb	r2, r2
 800b9e4:	2a18      	cmp	r2, #24
 800b9e6:	d82e      	bhi.n	800ba46 <__gethex+0x13a>
 800b9e8:	f1a0 0210 	sub.w	r2, r0, #16
 800b9ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b9f0:	f7ff ff76 	bl	800b8e0 <__hexdig_fun>
 800b9f4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800b9f8:	fa5f fc8c 	uxtb.w	ip, ip
 800b9fc:	f1bc 0f18 	cmp.w	ip, #24
 800ba00:	d91d      	bls.n	800ba3e <__gethex+0x132>
 800ba02:	f1bb 0f00 	cmp.w	fp, #0
 800ba06:	d000      	beq.n	800ba0a <__gethex+0xfe>
 800ba08:	4252      	negs	r2, r2
 800ba0a:	4416      	add	r6, r2
 800ba0c:	f8ca 1000 	str.w	r1, [sl]
 800ba10:	b1dc      	cbz	r4, 800ba4a <__gethex+0x13e>
 800ba12:	9b01      	ldr	r3, [sp, #4]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	bf14      	ite	ne
 800ba18:	f04f 0800 	movne.w	r8, #0
 800ba1c:	f04f 0806 	moveq.w	r8, #6
 800ba20:	4640      	mov	r0, r8
 800ba22:	b005      	add	sp, #20
 800ba24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba28:	4645      	mov	r5, r8
 800ba2a:	4626      	mov	r6, r4
 800ba2c:	2401      	movs	r4, #1
 800ba2e:	e7c7      	b.n	800b9c0 <__gethex+0xb4>
 800ba30:	f04f 0b00 	mov.w	fp, #0
 800ba34:	1ca9      	adds	r1, r5, #2
 800ba36:	e7d0      	b.n	800b9da <__gethex+0xce>
 800ba38:	f04f 0b01 	mov.w	fp, #1
 800ba3c:	e7fa      	b.n	800ba34 <__gethex+0x128>
 800ba3e:	230a      	movs	r3, #10
 800ba40:	fb03 0002 	mla	r0, r3, r2, r0
 800ba44:	e7d0      	b.n	800b9e8 <__gethex+0xdc>
 800ba46:	4629      	mov	r1, r5
 800ba48:	e7e0      	b.n	800ba0c <__gethex+0x100>
 800ba4a:	eba5 0308 	sub.w	r3, r5, r8
 800ba4e:	3b01      	subs	r3, #1
 800ba50:	4621      	mov	r1, r4
 800ba52:	2b07      	cmp	r3, #7
 800ba54:	dc0a      	bgt.n	800ba6c <__gethex+0x160>
 800ba56:	4648      	mov	r0, r9
 800ba58:	f000 fd14 	bl	800c484 <_Balloc>
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	b940      	cbnz	r0, 800ba72 <__gethex+0x166>
 800ba60:	4b61      	ldr	r3, [pc, #388]	; (800bbe8 <__gethex+0x2dc>)
 800ba62:	4602      	mov	r2, r0
 800ba64:	21e4      	movs	r1, #228	; 0xe4
 800ba66:	4861      	ldr	r0, [pc, #388]	; (800bbec <__gethex+0x2e0>)
 800ba68:	f001 faa8 	bl	800cfbc <__assert_func>
 800ba6c:	3101      	adds	r1, #1
 800ba6e:	105b      	asrs	r3, r3, #1
 800ba70:	e7ef      	b.n	800ba52 <__gethex+0x146>
 800ba72:	f100 0a14 	add.w	sl, r0, #20
 800ba76:	2300      	movs	r3, #0
 800ba78:	495a      	ldr	r1, [pc, #360]	; (800bbe4 <__gethex+0x2d8>)
 800ba7a:	f8cd a004 	str.w	sl, [sp, #4]
 800ba7e:	469b      	mov	fp, r3
 800ba80:	45a8      	cmp	r8, r5
 800ba82:	d342      	bcc.n	800bb0a <__gethex+0x1fe>
 800ba84:	9801      	ldr	r0, [sp, #4]
 800ba86:	f840 bb04 	str.w	fp, [r0], #4
 800ba8a:	eba0 000a 	sub.w	r0, r0, sl
 800ba8e:	1080      	asrs	r0, r0, #2
 800ba90:	6120      	str	r0, [r4, #16]
 800ba92:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ba96:	4658      	mov	r0, fp
 800ba98:	f000 fde6 	bl	800c668 <__hi0bits>
 800ba9c:	683d      	ldr	r5, [r7, #0]
 800ba9e:	eba8 0000 	sub.w	r0, r8, r0
 800baa2:	42a8      	cmp	r0, r5
 800baa4:	dd59      	ble.n	800bb5a <__gethex+0x24e>
 800baa6:	eba0 0805 	sub.w	r8, r0, r5
 800baaa:	4641      	mov	r1, r8
 800baac:	4620      	mov	r0, r4
 800baae:	f001 f975 	bl	800cd9c <__any_on>
 800bab2:	4683      	mov	fp, r0
 800bab4:	b1b8      	cbz	r0, 800bae6 <__gethex+0x1da>
 800bab6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800baba:	1159      	asrs	r1, r3, #5
 800babc:	f003 021f 	and.w	r2, r3, #31
 800bac0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bac4:	f04f 0b01 	mov.w	fp, #1
 800bac8:	fa0b f202 	lsl.w	r2, fp, r2
 800bacc:	420a      	tst	r2, r1
 800bace:	d00a      	beq.n	800bae6 <__gethex+0x1da>
 800bad0:	455b      	cmp	r3, fp
 800bad2:	dd06      	ble.n	800bae2 <__gethex+0x1d6>
 800bad4:	f1a8 0102 	sub.w	r1, r8, #2
 800bad8:	4620      	mov	r0, r4
 800bada:	f001 f95f 	bl	800cd9c <__any_on>
 800bade:	2800      	cmp	r0, #0
 800bae0:	d138      	bne.n	800bb54 <__gethex+0x248>
 800bae2:	f04f 0b02 	mov.w	fp, #2
 800bae6:	4641      	mov	r1, r8
 800bae8:	4620      	mov	r0, r4
 800baea:	f7ff fea7 	bl	800b83c <rshift>
 800baee:	4446      	add	r6, r8
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	42b3      	cmp	r3, r6
 800baf4:	da41      	bge.n	800bb7a <__gethex+0x26e>
 800baf6:	4621      	mov	r1, r4
 800baf8:	4648      	mov	r0, r9
 800bafa:	f000 fd03 	bl	800c504 <_Bfree>
 800bafe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb00:	2300      	movs	r3, #0
 800bb02:	6013      	str	r3, [r2, #0]
 800bb04:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800bb08:	e78a      	b.n	800ba20 <__gethex+0x114>
 800bb0a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800bb0e:	2a2e      	cmp	r2, #46	; 0x2e
 800bb10:	d014      	beq.n	800bb3c <__gethex+0x230>
 800bb12:	2b20      	cmp	r3, #32
 800bb14:	d106      	bne.n	800bb24 <__gethex+0x218>
 800bb16:	9b01      	ldr	r3, [sp, #4]
 800bb18:	f843 bb04 	str.w	fp, [r3], #4
 800bb1c:	f04f 0b00 	mov.w	fp, #0
 800bb20:	9301      	str	r3, [sp, #4]
 800bb22:	465b      	mov	r3, fp
 800bb24:	7828      	ldrb	r0, [r5, #0]
 800bb26:	9303      	str	r3, [sp, #12]
 800bb28:	f7ff feda 	bl	800b8e0 <__hexdig_fun>
 800bb2c:	9b03      	ldr	r3, [sp, #12]
 800bb2e:	f000 000f 	and.w	r0, r0, #15
 800bb32:	4098      	lsls	r0, r3
 800bb34:	ea4b 0b00 	orr.w	fp, fp, r0
 800bb38:	3304      	adds	r3, #4
 800bb3a:	e7a1      	b.n	800ba80 <__gethex+0x174>
 800bb3c:	45a8      	cmp	r8, r5
 800bb3e:	d8e8      	bhi.n	800bb12 <__gethex+0x206>
 800bb40:	2201      	movs	r2, #1
 800bb42:	4628      	mov	r0, r5
 800bb44:	9303      	str	r3, [sp, #12]
 800bb46:	f7fe ff7f 	bl	800aa48 <strncmp>
 800bb4a:	4926      	ldr	r1, [pc, #152]	; (800bbe4 <__gethex+0x2d8>)
 800bb4c:	9b03      	ldr	r3, [sp, #12]
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	d1df      	bne.n	800bb12 <__gethex+0x206>
 800bb52:	e795      	b.n	800ba80 <__gethex+0x174>
 800bb54:	f04f 0b03 	mov.w	fp, #3
 800bb58:	e7c5      	b.n	800bae6 <__gethex+0x1da>
 800bb5a:	da0b      	bge.n	800bb74 <__gethex+0x268>
 800bb5c:	eba5 0800 	sub.w	r8, r5, r0
 800bb60:	4621      	mov	r1, r4
 800bb62:	4642      	mov	r2, r8
 800bb64:	4648      	mov	r0, r9
 800bb66:	f000 fee7 	bl	800c938 <__lshift>
 800bb6a:	eba6 0608 	sub.w	r6, r6, r8
 800bb6e:	4604      	mov	r4, r0
 800bb70:	f100 0a14 	add.w	sl, r0, #20
 800bb74:	f04f 0b00 	mov.w	fp, #0
 800bb78:	e7ba      	b.n	800baf0 <__gethex+0x1e4>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	42b3      	cmp	r3, r6
 800bb7e:	dd73      	ble.n	800bc68 <__gethex+0x35c>
 800bb80:	1b9e      	subs	r6, r3, r6
 800bb82:	42b5      	cmp	r5, r6
 800bb84:	dc34      	bgt.n	800bbf0 <__gethex+0x2e4>
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2b02      	cmp	r3, #2
 800bb8a:	d023      	beq.n	800bbd4 <__gethex+0x2c8>
 800bb8c:	2b03      	cmp	r3, #3
 800bb8e:	d025      	beq.n	800bbdc <__gethex+0x2d0>
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d115      	bne.n	800bbc0 <__gethex+0x2b4>
 800bb94:	42b5      	cmp	r5, r6
 800bb96:	d113      	bne.n	800bbc0 <__gethex+0x2b4>
 800bb98:	2d01      	cmp	r5, #1
 800bb9a:	d10b      	bne.n	800bbb4 <__gethex+0x2a8>
 800bb9c:	9a02      	ldr	r2, [sp, #8]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6013      	str	r3, [r2, #0]
 800bba2:	2301      	movs	r3, #1
 800bba4:	6123      	str	r3, [r4, #16]
 800bba6:	f8ca 3000 	str.w	r3, [sl]
 800bbaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bbac:	f04f 0862 	mov.w	r8, #98	; 0x62
 800bbb0:	601c      	str	r4, [r3, #0]
 800bbb2:	e735      	b.n	800ba20 <__gethex+0x114>
 800bbb4:	1e69      	subs	r1, r5, #1
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	f001 f8f0 	bl	800cd9c <__any_on>
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	d1ed      	bne.n	800bb9c <__gethex+0x290>
 800bbc0:	4621      	mov	r1, r4
 800bbc2:	4648      	mov	r0, r9
 800bbc4:	f000 fc9e 	bl	800c504 <_Bfree>
 800bbc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bbca:	2300      	movs	r3, #0
 800bbcc:	6013      	str	r3, [r2, #0]
 800bbce:	f04f 0850 	mov.w	r8, #80	; 0x50
 800bbd2:	e725      	b.n	800ba20 <__gethex+0x114>
 800bbd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d1f2      	bne.n	800bbc0 <__gethex+0x2b4>
 800bbda:	e7df      	b.n	800bb9c <__gethex+0x290>
 800bbdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d1dc      	bne.n	800bb9c <__gethex+0x290>
 800bbe2:	e7ed      	b.n	800bbc0 <__gethex+0x2b4>
 800bbe4:	0800dd11 	.word	0x0800dd11
 800bbe8:	0800deed 	.word	0x0800deed
 800bbec:	0800defe 	.word	0x0800defe
 800bbf0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800bbf4:	f1bb 0f00 	cmp.w	fp, #0
 800bbf8:	d133      	bne.n	800bc62 <__gethex+0x356>
 800bbfa:	f1b8 0f00 	cmp.w	r8, #0
 800bbfe:	d004      	beq.n	800bc0a <__gethex+0x2fe>
 800bc00:	4641      	mov	r1, r8
 800bc02:	4620      	mov	r0, r4
 800bc04:	f001 f8ca 	bl	800cd9c <__any_on>
 800bc08:	4683      	mov	fp, r0
 800bc0a:	ea4f 1268 	mov.w	r2, r8, asr #5
 800bc0e:	2301      	movs	r3, #1
 800bc10:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bc14:	f008 081f 	and.w	r8, r8, #31
 800bc18:	fa03 f308 	lsl.w	r3, r3, r8
 800bc1c:	4213      	tst	r3, r2
 800bc1e:	4631      	mov	r1, r6
 800bc20:	4620      	mov	r0, r4
 800bc22:	bf18      	it	ne
 800bc24:	f04b 0b02 	orrne.w	fp, fp, #2
 800bc28:	1bad      	subs	r5, r5, r6
 800bc2a:	f7ff fe07 	bl	800b83c <rshift>
 800bc2e:	687e      	ldr	r6, [r7, #4]
 800bc30:	f04f 0802 	mov.w	r8, #2
 800bc34:	f1bb 0f00 	cmp.w	fp, #0
 800bc38:	d04a      	beq.n	800bcd0 <__gethex+0x3c4>
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2b02      	cmp	r3, #2
 800bc3e:	d016      	beq.n	800bc6e <__gethex+0x362>
 800bc40:	2b03      	cmp	r3, #3
 800bc42:	d018      	beq.n	800bc76 <__gethex+0x36a>
 800bc44:	2b01      	cmp	r3, #1
 800bc46:	d109      	bne.n	800bc5c <__gethex+0x350>
 800bc48:	f01b 0f02 	tst.w	fp, #2
 800bc4c:	d006      	beq.n	800bc5c <__gethex+0x350>
 800bc4e:	f8da 3000 	ldr.w	r3, [sl]
 800bc52:	ea4b 0b03 	orr.w	fp, fp, r3
 800bc56:	f01b 0f01 	tst.w	fp, #1
 800bc5a:	d10f      	bne.n	800bc7c <__gethex+0x370>
 800bc5c:	f048 0810 	orr.w	r8, r8, #16
 800bc60:	e036      	b.n	800bcd0 <__gethex+0x3c4>
 800bc62:	f04f 0b01 	mov.w	fp, #1
 800bc66:	e7d0      	b.n	800bc0a <__gethex+0x2fe>
 800bc68:	f04f 0801 	mov.w	r8, #1
 800bc6c:	e7e2      	b.n	800bc34 <__gethex+0x328>
 800bc6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc70:	f1c3 0301 	rsb	r3, r3, #1
 800bc74:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d0ef      	beq.n	800bc5c <__gethex+0x350>
 800bc7c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bc80:	f104 0214 	add.w	r2, r4, #20
 800bc84:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800bc88:	9301      	str	r3, [sp, #4]
 800bc8a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800bc8e:	2300      	movs	r3, #0
 800bc90:	4694      	mov	ip, r2
 800bc92:	f852 1b04 	ldr.w	r1, [r2], #4
 800bc96:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800bc9a:	d01e      	beq.n	800bcda <__gethex+0x3ce>
 800bc9c:	3101      	adds	r1, #1
 800bc9e:	f8cc 1000 	str.w	r1, [ip]
 800bca2:	f1b8 0f02 	cmp.w	r8, #2
 800bca6:	f104 0214 	add.w	r2, r4, #20
 800bcaa:	d13d      	bne.n	800bd28 <__gethex+0x41c>
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	3b01      	subs	r3, #1
 800bcb0:	42ab      	cmp	r3, r5
 800bcb2:	d10b      	bne.n	800bccc <__gethex+0x3c0>
 800bcb4:	1169      	asrs	r1, r5, #5
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	f005 051f 	and.w	r5, r5, #31
 800bcbc:	fa03 f505 	lsl.w	r5, r3, r5
 800bcc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bcc4:	421d      	tst	r5, r3
 800bcc6:	bf18      	it	ne
 800bcc8:	f04f 0801 	movne.w	r8, #1
 800bccc:	f048 0820 	orr.w	r8, r8, #32
 800bcd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bcd2:	601c      	str	r4, [r3, #0]
 800bcd4:	9b02      	ldr	r3, [sp, #8]
 800bcd6:	601e      	str	r6, [r3, #0]
 800bcd8:	e6a2      	b.n	800ba20 <__gethex+0x114>
 800bcda:	4290      	cmp	r0, r2
 800bcdc:	f842 3c04 	str.w	r3, [r2, #-4]
 800bce0:	d8d6      	bhi.n	800bc90 <__gethex+0x384>
 800bce2:	68a2      	ldr	r2, [r4, #8]
 800bce4:	4593      	cmp	fp, r2
 800bce6:	db17      	blt.n	800bd18 <__gethex+0x40c>
 800bce8:	6861      	ldr	r1, [r4, #4]
 800bcea:	4648      	mov	r0, r9
 800bcec:	3101      	adds	r1, #1
 800bcee:	f000 fbc9 	bl	800c484 <_Balloc>
 800bcf2:	4682      	mov	sl, r0
 800bcf4:	b918      	cbnz	r0, 800bcfe <__gethex+0x3f2>
 800bcf6:	4b1b      	ldr	r3, [pc, #108]	; (800bd64 <__gethex+0x458>)
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	2184      	movs	r1, #132	; 0x84
 800bcfc:	e6b3      	b.n	800ba66 <__gethex+0x15a>
 800bcfe:	6922      	ldr	r2, [r4, #16]
 800bd00:	3202      	adds	r2, #2
 800bd02:	f104 010c 	add.w	r1, r4, #12
 800bd06:	0092      	lsls	r2, r2, #2
 800bd08:	300c      	adds	r0, #12
 800bd0a:	f7fe fefc 	bl	800ab06 <memcpy>
 800bd0e:	4621      	mov	r1, r4
 800bd10:	4648      	mov	r0, r9
 800bd12:	f000 fbf7 	bl	800c504 <_Bfree>
 800bd16:	4654      	mov	r4, sl
 800bd18:	6922      	ldr	r2, [r4, #16]
 800bd1a:	1c51      	adds	r1, r2, #1
 800bd1c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bd20:	6121      	str	r1, [r4, #16]
 800bd22:	2101      	movs	r1, #1
 800bd24:	6151      	str	r1, [r2, #20]
 800bd26:	e7bc      	b.n	800bca2 <__gethex+0x396>
 800bd28:	6921      	ldr	r1, [r4, #16]
 800bd2a:	4559      	cmp	r1, fp
 800bd2c:	dd0b      	ble.n	800bd46 <__gethex+0x43a>
 800bd2e:	2101      	movs	r1, #1
 800bd30:	4620      	mov	r0, r4
 800bd32:	f7ff fd83 	bl	800b83c <rshift>
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	3601      	adds	r6, #1
 800bd3a:	42b3      	cmp	r3, r6
 800bd3c:	f6ff aedb 	blt.w	800baf6 <__gethex+0x1ea>
 800bd40:	f04f 0801 	mov.w	r8, #1
 800bd44:	e7c2      	b.n	800bccc <__gethex+0x3c0>
 800bd46:	f015 051f 	ands.w	r5, r5, #31
 800bd4a:	d0f9      	beq.n	800bd40 <__gethex+0x434>
 800bd4c:	9b01      	ldr	r3, [sp, #4]
 800bd4e:	441a      	add	r2, r3
 800bd50:	f1c5 0520 	rsb	r5, r5, #32
 800bd54:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800bd58:	f000 fc86 	bl	800c668 <__hi0bits>
 800bd5c:	42a8      	cmp	r0, r5
 800bd5e:	dbe6      	blt.n	800bd2e <__gethex+0x422>
 800bd60:	e7ee      	b.n	800bd40 <__gethex+0x434>
 800bd62:	bf00      	nop
 800bd64:	0800deed 	.word	0x0800deed

0800bd68 <L_shift>:
 800bd68:	f1c2 0208 	rsb	r2, r2, #8
 800bd6c:	0092      	lsls	r2, r2, #2
 800bd6e:	b570      	push	{r4, r5, r6, lr}
 800bd70:	f1c2 0620 	rsb	r6, r2, #32
 800bd74:	6843      	ldr	r3, [r0, #4]
 800bd76:	6804      	ldr	r4, [r0, #0]
 800bd78:	fa03 f506 	lsl.w	r5, r3, r6
 800bd7c:	432c      	orrs	r4, r5
 800bd7e:	40d3      	lsrs	r3, r2
 800bd80:	6004      	str	r4, [r0, #0]
 800bd82:	f840 3f04 	str.w	r3, [r0, #4]!
 800bd86:	4288      	cmp	r0, r1
 800bd88:	d3f4      	bcc.n	800bd74 <L_shift+0xc>
 800bd8a:	bd70      	pop	{r4, r5, r6, pc}

0800bd8c <__match>:
 800bd8c:	b530      	push	{r4, r5, lr}
 800bd8e:	6803      	ldr	r3, [r0, #0]
 800bd90:	3301      	adds	r3, #1
 800bd92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd96:	b914      	cbnz	r4, 800bd9e <__match+0x12>
 800bd98:	6003      	str	r3, [r0, #0]
 800bd9a:	2001      	movs	r0, #1
 800bd9c:	bd30      	pop	{r4, r5, pc}
 800bd9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bda2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bda6:	2d19      	cmp	r5, #25
 800bda8:	bf98      	it	ls
 800bdaa:	3220      	addls	r2, #32
 800bdac:	42a2      	cmp	r2, r4
 800bdae:	d0f0      	beq.n	800bd92 <__match+0x6>
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	e7f3      	b.n	800bd9c <__match+0x10>

0800bdb4 <__hexnan>:
 800bdb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb8:	680b      	ldr	r3, [r1, #0]
 800bdba:	6801      	ldr	r1, [r0, #0]
 800bdbc:	115e      	asrs	r6, r3, #5
 800bdbe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bdc2:	f013 031f 	ands.w	r3, r3, #31
 800bdc6:	b087      	sub	sp, #28
 800bdc8:	bf18      	it	ne
 800bdca:	3604      	addne	r6, #4
 800bdcc:	2500      	movs	r5, #0
 800bdce:	1f37      	subs	r7, r6, #4
 800bdd0:	4682      	mov	sl, r0
 800bdd2:	4690      	mov	r8, r2
 800bdd4:	9301      	str	r3, [sp, #4]
 800bdd6:	f846 5c04 	str.w	r5, [r6, #-4]
 800bdda:	46b9      	mov	r9, r7
 800bddc:	463c      	mov	r4, r7
 800bdde:	9502      	str	r5, [sp, #8]
 800bde0:	46ab      	mov	fp, r5
 800bde2:	784a      	ldrb	r2, [r1, #1]
 800bde4:	1c4b      	adds	r3, r1, #1
 800bde6:	9303      	str	r3, [sp, #12]
 800bde8:	b342      	cbz	r2, 800be3c <__hexnan+0x88>
 800bdea:	4610      	mov	r0, r2
 800bdec:	9105      	str	r1, [sp, #20]
 800bdee:	9204      	str	r2, [sp, #16]
 800bdf0:	f7ff fd76 	bl	800b8e0 <__hexdig_fun>
 800bdf4:	2800      	cmp	r0, #0
 800bdf6:	d14f      	bne.n	800be98 <__hexnan+0xe4>
 800bdf8:	9a04      	ldr	r2, [sp, #16]
 800bdfa:	9905      	ldr	r1, [sp, #20]
 800bdfc:	2a20      	cmp	r2, #32
 800bdfe:	d818      	bhi.n	800be32 <__hexnan+0x7e>
 800be00:	9b02      	ldr	r3, [sp, #8]
 800be02:	459b      	cmp	fp, r3
 800be04:	dd13      	ble.n	800be2e <__hexnan+0x7a>
 800be06:	454c      	cmp	r4, r9
 800be08:	d206      	bcs.n	800be18 <__hexnan+0x64>
 800be0a:	2d07      	cmp	r5, #7
 800be0c:	dc04      	bgt.n	800be18 <__hexnan+0x64>
 800be0e:	462a      	mov	r2, r5
 800be10:	4649      	mov	r1, r9
 800be12:	4620      	mov	r0, r4
 800be14:	f7ff ffa8 	bl	800bd68 <L_shift>
 800be18:	4544      	cmp	r4, r8
 800be1a:	d950      	bls.n	800bebe <__hexnan+0x10a>
 800be1c:	2300      	movs	r3, #0
 800be1e:	f1a4 0904 	sub.w	r9, r4, #4
 800be22:	f844 3c04 	str.w	r3, [r4, #-4]
 800be26:	f8cd b008 	str.w	fp, [sp, #8]
 800be2a:	464c      	mov	r4, r9
 800be2c:	461d      	mov	r5, r3
 800be2e:	9903      	ldr	r1, [sp, #12]
 800be30:	e7d7      	b.n	800bde2 <__hexnan+0x2e>
 800be32:	2a29      	cmp	r2, #41	; 0x29
 800be34:	d155      	bne.n	800bee2 <__hexnan+0x12e>
 800be36:	3102      	adds	r1, #2
 800be38:	f8ca 1000 	str.w	r1, [sl]
 800be3c:	f1bb 0f00 	cmp.w	fp, #0
 800be40:	d04f      	beq.n	800bee2 <__hexnan+0x12e>
 800be42:	454c      	cmp	r4, r9
 800be44:	d206      	bcs.n	800be54 <__hexnan+0xa0>
 800be46:	2d07      	cmp	r5, #7
 800be48:	dc04      	bgt.n	800be54 <__hexnan+0xa0>
 800be4a:	462a      	mov	r2, r5
 800be4c:	4649      	mov	r1, r9
 800be4e:	4620      	mov	r0, r4
 800be50:	f7ff ff8a 	bl	800bd68 <L_shift>
 800be54:	4544      	cmp	r4, r8
 800be56:	d934      	bls.n	800bec2 <__hexnan+0x10e>
 800be58:	f1a8 0204 	sub.w	r2, r8, #4
 800be5c:	4623      	mov	r3, r4
 800be5e:	f853 1b04 	ldr.w	r1, [r3], #4
 800be62:	f842 1f04 	str.w	r1, [r2, #4]!
 800be66:	429f      	cmp	r7, r3
 800be68:	d2f9      	bcs.n	800be5e <__hexnan+0xaa>
 800be6a:	1b3b      	subs	r3, r7, r4
 800be6c:	f023 0303 	bic.w	r3, r3, #3
 800be70:	3304      	adds	r3, #4
 800be72:	3e03      	subs	r6, #3
 800be74:	3401      	adds	r4, #1
 800be76:	42a6      	cmp	r6, r4
 800be78:	bf38      	it	cc
 800be7a:	2304      	movcc	r3, #4
 800be7c:	4443      	add	r3, r8
 800be7e:	2200      	movs	r2, #0
 800be80:	f843 2b04 	str.w	r2, [r3], #4
 800be84:	429f      	cmp	r7, r3
 800be86:	d2fb      	bcs.n	800be80 <__hexnan+0xcc>
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	b91b      	cbnz	r3, 800be94 <__hexnan+0xe0>
 800be8c:	4547      	cmp	r7, r8
 800be8e:	d126      	bne.n	800bede <__hexnan+0x12a>
 800be90:	2301      	movs	r3, #1
 800be92:	603b      	str	r3, [r7, #0]
 800be94:	2005      	movs	r0, #5
 800be96:	e025      	b.n	800bee4 <__hexnan+0x130>
 800be98:	3501      	adds	r5, #1
 800be9a:	2d08      	cmp	r5, #8
 800be9c:	f10b 0b01 	add.w	fp, fp, #1
 800bea0:	dd06      	ble.n	800beb0 <__hexnan+0xfc>
 800bea2:	4544      	cmp	r4, r8
 800bea4:	d9c3      	bls.n	800be2e <__hexnan+0x7a>
 800bea6:	2300      	movs	r3, #0
 800bea8:	f844 3c04 	str.w	r3, [r4, #-4]
 800beac:	2501      	movs	r5, #1
 800beae:	3c04      	subs	r4, #4
 800beb0:	6822      	ldr	r2, [r4, #0]
 800beb2:	f000 000f 	and.w	r0, r0, #15
 800beb6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800beba:	6020      	str	r0, [r4, #0]
 800bebc:	e7b7      	b.n	800be2e <__hexnan+0x7a>
 800bebe:	2508      	movs	r5, #8
 800bec0:	e7b5      	b.n	800be2e <__hexnan+0x7a>
 800bec2:	9b01      	ldr	r3, [sp, #4]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d0df      	beq.n	800be88 <__hexnan+0xd4>
 800bec8:	f1c3 0320 	rsb	r3, r3, #32
 800becc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bed0:	40da      	lsrs	r2, r3
 800bed2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bed6:	4013      	ands	r3, r2
 800bed8:	f846 3c04 	str.w	r3, [r6, #-4]
 800bedc:	e7d4      	b.n	800be88 <__hexnan+0xd4>
 800bede:	3f04      	subs	r7, #4
 800bee0:	e7d2      	b.n	800be88 <__hexnan+0xd4>
 800bee2:	2004      	movs	r0, #4
 800bee4:	b007      	add	sp, #28
 800bee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800beea <__ssputs_r>:
 800beea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800beee:	688e      	ldr	r6, [r1, #8]
 800bef0:	461f      	mov	r7, r3
 800bef2:	42be      	cmp	r6, r7
 800bef4:	680b      	ldr	r3, [r1, #0]
 800bef6:	4682      	mov	sl, r0
 800bef8:	460c      	mov	r4, r1
 800befa:	4690      	mov	r8, r2
 800befc:	d82c      	bhi.n	800bf58 <__ssputs_r+0x6e>
 800befe:	898a      	ldrh	r2, [r1, #12]
 800bf00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bf04:	d026      	beq.n	800bf54 <__ssputs_r+0x6a>
 800bf06:	6965      	ldr	r5, [r4, #20]
 800bf08:	6909      	ldr	r1, [r1, #16]
 800bf0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf0e:	eba3 0901 	sub.w	r9, r3, r1
 800bf12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf16:	1c7b      	adds	r3, r7, #1
 800bf18:	444b      	add	r3, r9
 800bf1a:	106d      	asrs	r5, r5, #1
 800bf1c:	429d      	cmp	r5, r3
 800bf1e:	bf38      	it	cc
 800bf20:	461d      	movcc	r5, r3
 800bf22:	0553      	lsls	r3, r2, #21
 800bf24:	d527      	bpl.n	800bf76 <__ssputs_r+0x8c>
 800bf26:	4629      	mov	r1, r5
 800bf28:	f000 f960 	bl	800c1ec <_malloc_r>
 800bf2c:	4606      	mov	r6, r0
 800bf2e:	b360      	cbz	r0, 800bf8a <__ssputs_r+0xa0>
 800bf30:	6921      	ldr	r1, [r4, #16]
 800bf32:	464a      	mov	r2, r9
 800bf34:	f7fe fde7 	bl	800ab06 <memcpy>
 800bf38:	89a3      	ldrh	r3, [r4, #12]
 800bf3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bf3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf42:	81a3      	strh	r3, [r4, #12]
 800bf44:	6126      	str	r6, [r4, #16]
 800bf46:	6165      	str	r5, [r4, #20]
 800bf48:	444e      	add	r6, r9
 800bf4a:	eba5 0509 	sub.w	r5, r5, r9
 800bf4e:	6026      	str	r6, [r4, #0]
 800bf50:	60a5      	str	r5, [r4, #8]
 800bf52:	463e      	mov	r6, r7
 800bf54:	42be      	cmp	r6, r7
 800bf56:	d900      	bls.n	800bf5a <__ssputs_r+0x70>
 800bf58:	463e      	mov	r6, r7
 800bf5a:	6820      	ldr	r0, [r4, #0]
 800bf5c:	4632      	mov	r2, r6
 800bf5e:	4641      	mov	r1, r8
 800bf60:	f000 ffbc 	bl	800cedc <memmove>
 800bf64:	68a3      	ldr	r3, [r4, #8]
 800bf66:	1b9b      	subs	r3, r3, r6
 800bf68:	60a3      	str	r3, [r4, #8]
 800bf6a:	6823      	ldr	r3, [r4, #0]
 800bf6c:	4433      	add	r3, r6
 800bf6e:	6023      	str	r3, [r4, #0]
 800bf70:	2000      	movs	r0, #0
 800bf72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf76:	462a      	mov	r2, r5
 800bf78:	f000 ff74 	bl	800ce64 <_realloc_r>
 800bf7c:	4606      	mov	r6, r0
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	d1e0      	bne.n	800bf44 <__ssputs_r+0x5a>
 800bf82:	6921      	ldr	r1, [r4, #16]
 800bf84:	4650      	mov	r0, sl
 800bf86:	f001 f84d 	bl	800d024 <_free_r>
 800bf8a:	230c      	movs	r3, #12
 800bf8c:	f8ca 3000 	str.w	r3, [sl]
 800bf90:	89a3      	ldrh	r3, [r4, #12]
 800bf92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf96:	81a3      	strh	r3, [r4, #12]
 800bf98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf9c:	e7e9      	b.n	800bf72 <__ssputs_r+0x88>
	...

0800bfa0 <_svfiprintf_r>:
 800bfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa4:	4698      	mov	r8, r3
 800bfa6:	898b      	ldrh	r3, [r1, #12]
 800bfa8:	061b      	lsls	r3, r3, #24
 800bfaa:	b09d      	sub	sp, #116	; 0x74
 800bfac:	4607      	mov	r7, r0
 800bfae:	460d      	mov	r5, r1
 800bfb0:	4614      	mov	r4, r2
 800bfb2:	d50e      	bpl.n	800bfd2 <_svfiprintf_r+0x32>
 800bfb4:	690b      	ldr	r3, [r1, #16]
 800bfb6:	b963      	cbnz	r3, 800bfd2 <_svfiprintf_r+0x32>
 800bfb8:	2140      	movs	r1, #64	; 0x40
 800bfba:	f000 f917 	bl	800c1ec <_malloc_r>
 800bfbe:	6028      	str	r0, [r5, #0]
 800bfc0:	6128      	str	r0, [r5, #16]
 800bfc2:	b920      	cbnz	r0, 800bfce <_svfiprintf_r+0x2e>
 800bfc4:	230c      	movs	r3, #12
 800bfc6:	603b      	str	r3, [r7, #0]
 800bfc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bfcc:	e0d0      	b.n	800c170 <_svfiprintf_r+0x1d0>
 800bfce:	2340      	movs	r3, #64	; 0x40
 800bfd0:	616b      	str	r3, [r5, #20]
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	9309      	str	r3, [sp, #36]	; 0x24
 800bfd6:	2320      	movs	r3, #32
 800bfd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bfdc:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfe0:	2330      	movs	r3, #48	; 0x30
 800bfe2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c188 <_svfiprintf_r+0x1e8>
 800bfe6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bfea:	f04f 0901 	mov.w	r9, #1
 800bfee:	4623      	mov	r3, r4
 800bff0:	469a      	mov	sl, r3
 800bff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bff6:	b10a      	cbz	r2, 800bffc <_svfiprintf_r+0x5c>
 800bff8:	2a25      	cmp	r2, #37	; 0x25
 800bffa:	d1f9      	bne.n	800bff0 <_svfiprintf_r+0x50>
 800bffc:	ebba 0b04 	subs.w	fp, sl, r4
 800c000:	d00b      	beq.n	800c01a <_svfiprintf_r+0x7a>
 800c002:	465b      	mov	r3, fp
 800c004:	4622      	mov	r2, r4
 800c006:	4629      	mov	r1, r5
 800c008:	4638      	mov	r0, r7
 800c00a:	f7ff ff6e 	bl	800beea <__ssputs_r>
 800c00e:	3001      	adds	r0, #1
 800c010:	f000 80a9 	beq.w	800c166 <_svfiprintf_r+0x1c6>
 800c014:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c016:	445a      	add	r2, fp
 800c018:	9209      	str	r2, [sp, #36]	; 0x24
 800c01a:	f89a 3000 	ldrb.w	r3, [sl]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	f000 80a1 	beq.w	800c166 <_svfiprintf_r+0x1c6>
 800c024:	2300      	movs	r3, #0
 800c026:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c02a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c02e:	f10a 0a01 	add.w	sl, sl, #1
 800c032:	9304      	str	r3, [sp, #16]
 800c034:	9307      	str	r3, [sp, #28]
 800c036:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c03a:	931a      	str	r3, [sp, #104]	; 0x68
 800c03c:	4654      	mov	r4, sl
 800c03e:	2205      	movs	r2, #5
 800c040:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c044:	4850      	ldr	r0, [pc, #320]	; (800c188 <_svfiprintf_r+0x1e8>)
 800c046:	f7f4 f8cb 	bl	80001e0 <memchr>
 800c04a:	9a04      	ldr	r2, [sp, #16]
 800c04c:	b9d8      	cbnz	r0, 800c086 <_svfiprintf_r+0xe6>
 800c04e:	06d0      	lsls	r0, r2, #27
 800c050:	bf44      	itt	mi
 800c052:	2320      	movmi	r3, #32
 800c054:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c058:	0711      	lsls	r1, r2, #28
 800c05a:	bf44      	itt	mi
 800c05c:	232b      	movmi	r3, #43	; 0x2b
 800c05e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c062:	f89a 3000 	ldrb.w	r3, [sl]
 800c066:	2b2a      	cmp	r3, #42	; 0x2a
 800c068:	d015      	beq.n	800c096 <_svfiprintf_r+0xf6>
 800c06a:	9a07      	ldr	r2, [sp, #28]
 800c06c:	4654      	mov	r4, sl
 800c06e:	2000      	movs	r0, #0
 800c070:	f04f 0c0a 	mov.w	ip, #10
 800c074:	4621      	mov	r1, r4
 800c076:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c07a:	3b30      	subs	r3, #48	; 0x30
 800c07c:	2b09      	cmp	r3, #9
 800c07e:	d94d      	bls.n	800c11c <_svfiprintf_r+0x17c>
 800c080:	b1b0      	cbz	r0, 800c0b0 <_svfiprintf_r+0x110>
 800c082:	9207      	str	r2, [sp, #28]
 800c084:	e014      	b.n	800c0b0 <_svfiprintf_r+0x110>
 800c086:	eba0 0308 	sub.w	r3, r0, r8
 800c08a:	fa09 f303 	lsl.w	r3, r9, r3
 800c08e:	4313      	orrs	r3, r2
 800c090:	9304      	str	r3, [sp, #16]
 800c092:	46a2      	mov	sl, r4
 800c094:	e7d2      	b.n	800c03c <_svfiprintf_r+0x9c>
 800c096:	9b03      	ldr	r3, [sp, #12]
 800c098:	1d19      	adds	r1, r3, #4
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	9103      	str	r1, [sp, #12]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	bfbb      	ittet	lt
 800c0a2:	425b      	neglt	r3, r3
 800c0a4:	f042 0202 	orrlt.w	r2, r2, #2
 800c0a8:	9307      	strge	r3, [sp, #28]
 800c0aa:	9307      	strlt	r3, [sp, #28]
 800c0ac:	bfb8      	it	lt
 800c0ae:	9204      	strlt	r2, [sp, #16]
 800c0b0:	7823      	ldrb	r3, [r4, #0]
 800c0b2:	2b2e      	cmp	r3, #46	; 0x2e
 800c0b4:	d10c      	bne.n	800c0d0 <_svfiprintf_r+0x130>
 800c0b6:	7863      	ldrb	r3, [r4, #1]
 800c0b8:	2b2a      	cmp	r3, #42	; 0x2a
 800c0ba:	d134      	bne.n	800c126 <_svfiprintf_r+0x186>
 800c0bc:	9b03      	ldr	r3, [sp, #12]
 800c0be:	1d1a      	adds	r2, r3, #4
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	9203      	str	r2, [sp, #12]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	bfb8      	it	lt
 800c0c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c0cc:	3402      	adds	r4, #2
 800c0ce:	9305      	str	r3, [sp, #20]
 800c0d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c198 <_svfiprintf_r+0x1f8>
 800c0d4:	7821      	ldrb	r1, [r4, #0]
 800c0d6:	2203      	movs	r2, #3
 800c0d8:	4650      	mov	r0, sl
 800c0da:	f7f4 f881 	bl	80001e0 <memchr>
 800c0de:	b138      	cbz	r0, 800c0f0 <_svfiprintf_r+0x150>
 800c0e0:	9b04      	ldr	r3, [sp, #16]
 800c0e2:	eba0 000a 	sub.w	r0, r0, sl
 800c0e6:	2240      	movs	r2, #64	; 0x40
 800c0e8:	4082      	lsls	r2, r0
 800c0ea:	4313      	orrs	r3, r2
 800c0ec:	3401      	adds	r4, #1
 800c0ee:	9304      	str	r3, [sp, #16]
 800c0f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0f4:	4825      	ldr	r0, [pc, #148]	; (800c18c <_svfiprintf_r+0x1ec>)
 800c0f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c0fa:	2206      	movs	r2, #6
 800c0fc:	f7f4 f870 	bl	80001e0 <memchr>
 800c100:	2800      	cmp	r0, #0
 800c102:	d038      	beq.n	800c176 <_svfiprintf_r+0x1d6>
 800c104:	4b22      	ldr	r3, [pc, #136]	; (800c190 <_svfiprintf_r+0x1f0>)
 800c106:	bb1b      	cbnz	r3, 800c150 <_svfiprintf_r+0x1b0>
 800c108:	9b03      	ldr	r3, [sp, #12]
 800c10a:	3307      	adds	r3, #7
 800c10c:	f023 0307 	bic.w	r3, r3, #7
 800c110:	3308      	adds	r3, #8
 800c112:	9303      	str	r3, [sp, #12]
 800c114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c116:	4433      	add	r3, r6
 800c118:	9309      	str	r3, [sp, #36]	; 0x24
 800c11a:	e768      	b.n	800bfee <_svfiprintf_r+0x4e>
 800c11c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c120:	460c      	mov	r4, r1
 800c122:	2001      	movs	r0, #1
 800c124:	e7a6      	b.n	800c074 <_svfiprintf_r+0xd4>
 800c126:	2300      	movs	r3, #0
 800c128:	3401      	adds	r4, #1
 800c12a:	9305      	str	r3, [sp, #20]
 800c12c:	4619      	mov	r1, r3
 800c12e:	f04f 0c0a 	mov.w	ip, #10
 800c132:	4620      	mov	r0, r4
 800c134:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c138:	3a30      	subs	r2, #48	; 0x30
 800c13a:	2a09      	cmp	r2, #9
 800c13c:	d903      	bls.n	800c146 <_svfiprintf_r+0x1a6>
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d0c6      	beq.n	800c0d0 <_svfiprintf_r+0x130>
 800c142:	9105      	str	r1, [sp, #20]
 800c144:	e7c4      	b.n	800c0d0 <_svfiprintf_r+0x130>
 800c146:	fb0c 2101 	mla	r1, ip, r1, r2
 800c14a:	4604      	mov	r4, r0
 800c14c:	2301      	movs	r3, #1
 800c14e:	e7f0      	b.n	800c132 <_svfiprintf_r+0x192>
 800c150:	ab03      	add	r3, sp, #12
 800c152:	9300      	str	r3, [sp, #0]
 800c154:	462a      	mov	r2, r5
 800c156:	4b0f      	ldr	r3, [pc, #60]	; (800c194 <_svfiprintf_r+0x1f4>)
 800c158:	a904      	add	r1, sp, #16
 800c15a:	4638      	mov	r0, r7
 800c15c:	f7fc feb4 	bl	8008ec8 <_printf_float>
 800c160:	1c42      	adds	r2, r0, #1
 800c162:	4606      	mov	r6, r0
 800c164:	d1d6      	bne.n	800c114 <_svfiprintf_r+0x174>
 800c166:	89ab      	ldrh	r3, [r5, #12]
 800c168:	065b      	lsls	r3, r3, #25
 800c16a:	f53f af2d 	bmi.w	800bfc8 <_svfiprintf_r+0x28>
 800c16e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c170:	b01d      	add	sp, #116	; 0x74
 800c172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c176:	ab03      	add	r3, sp, #12
 800c178:	9300      	str	r3, [sp, #0]
 800c17a:	462a      	mov	r2, r5
 800c17c:	4b05      	ldr	r3, [pc, #20]	; (800c194 <_svfiprintf_r+0x1f4>)
 800c17e:	a904      	add	r1, sp, #16
 800c180:	4638      	mov	r0, r7
 800c182:	f7fd f945 	bl	8009410 <_printf_i>
 800c186:	e7eb      	b.n	800c160 <_svfiprintf_r+0x1c0>
 800c188:	0800df5e 	.word	0x0800df5e
 800c18c:	0800df68 	.word	0x0800df68
 800c190:	08008ec9 	.word	0x08008ec9
 800c194:	0800beeb 	.word	0x0800beeb
 800c198:	0800df64 	.word	0x0800df64

0800c19c <malloc>:
 800c19c:	4b02      	ldr	r3, [pc, #8]	; (800c1a8 <malloc+0xc>)
 800c19e:	4601      	mov	r1, r0
 800c1a0:	6818      	ldr	r0, [r3, #0]
 800c1a2:	f000 b823 	b.w	800c1ec <_malloc_r>
 800c1a6:	bf00      	nop
 800c1a8:	2000023c 	.word	0x2000023c

0800c1ac <sbrk_aligned>:
 800c1ac:	b570      	push	{r4, r5, r6, lr}
 800c1ae:	4e0e      	ldr	r6, [pc, #56]	; (800c1e8 <sbrk_aligned+0x3c>)
 800c1b0:	460c      	mov	r4, r1
 800c1b2:	6831      	ldr	r1, [r6, #0]
 800c1b4:	4605      	mov	r5, r0
 800c1b6:	b911      	cbnz	r1, 800c1be <sbrk_aligned+0x12>
 800c1b8:	f000 fede 	bl	800cf78 <_sbrk_r>
 800c1bc:	6030      	str	r0, [r6, #0]
 800c1be:	4621      	mov	r1, r4
 800c1c0:	4628      	mov	r0, r5
 800c1c2:	f000 fed9 	bl	800cf78 <_sbrk_r>
 800c1c6:	1c43      	adds	r3, r0, #1
 800c1c8:	d00a      	beq.n	800c1e0 <sbrk_aligned+0x34>
 800c1ca:	1cc4      	adds	r4, r0, #3
 800c1cc:	f024 0403 	bic.w	r4, r4, #3
 800c1d0:	42a0      	cmp	r0, r4
 800c1d2:	d007      	beq.n	800c1e4 <sbrk_aligned+0x38>
 800c1d4:	1a21      	subs	r1, r4, r0
 800c1d6:	4628      	mov	r0, r5
 800c1d8:	f000 fece 	bl	800cf78 <_sbrk_r>
 800c1dc:	3001      	adds	r0, #1
 800c1de:	d101      	bne.n	800c1e4 <sbrk_aligned+0x38>
 800c1e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	bd70      	pop	{r4, r5, r6, pc}
 800c1e8:	2000090c 	.word	0x2000090c

0800c1ec <_malloc_r>:
 800c1ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1f0:	1ccd      	adds	r5, r1, #3
 800c1f2:	f025 0503 	bic.w	r5, r5, #3
 800c1f6:	3508      	adds	r5, #8
 800c1f8:	2d0c      	cmp	r5, #12
 800c1fa:	bf38      	it	cc
 800c1fc:	250c      	movcc	r5, #12
 800c1fe:	2d00      	cmp	r5, #0
 800c200:	4607      	mov	r7, r0
 800c202:	db01      	blt.n	800c208 <_malloc_r+0x1c>
 800c204:	42a9      	cmp	r1, r5
 800c206:	d905      	bls.n	800c214 <_malloc_r+0x28>
 800c208:	230c      	movs	r3, #12
 800c20a:	603b      	str	r3, [r7, #0]
 800c20c:	2600      	movs	r6, #0
 800c20e:	4630      	mov	r0, r6
 800c210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c214:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c2e8 <_malloc_r+0xfc>
 800c218:	f000 f928 	bl	800c46c <__malloc_lock>
 800c21c:	f8d8 3000 	ldr.w	r3, [r8]
 800c220:	461c      	mov	r4, r3
 800c222:	bb5c      	cbnz	r4, 800c27c <_malloc_r+0x90>
 800c224:	4629      	mov	r1, r5
 800c226:	4638      	mov	r0, r7
 800c228:	f7ff ffc0 	bl	800c1ac <sbrk_aligned>
 800c22c:	1c43      	adds	r3, r0, #1
 800c22e:	4604      	mov	r4, r0
 800c230:	d155      	bne.n	800c2de <_malloc_r+0xf2>
 800c232:	f8d8 4000 	ldr.w	r4, [r8]
 800c236:	4626      	mov	r6, r4
 800c238:	2e00      	cmp	r6, #0
 800c23a:	d145      	bne.n	800c2c8 <_malloc_r+0xdc>
 800c23c:	2c00      	cmp	r4, #0
 800c23e:	d048      	beq.n	800c2d2 <_malloc_r+0xe6>
 800c240:	6823      	ldr	r3, [r4, #0]
 800c242:	4631      	mov	r1, r6
 800c244:	4638      	mov	r0, r7
 800c246:	eb04 0903 	add.w	r9, r4, r3
 800c24a:	f000 fe95 	bl	800cf78 <_sbrk_r>
 800c24e:	4581      	cmp	r9, r0
 800c250:	d13f      	bne.n	800c2d2 <_malloc_r+0xe6>
 800c252:	6821      	ldr	r1, [r4, #0]
 800c254:	1a6d      	subs	r5, r5, r1
 800c256:	4629      	mov	r1, r5
 800c258:	4638      	mov	r0, r7
 800c25a:	f7ff ffa7 	bl	800c1ac <sbrk_aligned>
 800c25e:	3001      	adds	r0, #1
 800c260:	d037      	beq.n	800c2d2 <_malloc_r+0xe6>
 800c262:	6823      	ldr	r3, [r4, #0]
 800c264:	442b      	add	r3, r5
 800c266:	6023      	str	r3, [r4, #0]
 800c268:	f8d8 3000 	ldr.w	r3, [r8]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d038      	beq.n	800c2e2 <_malloc_r+0xf6>
 800c270:	685a      	ldr	r2, [r3, #4]
 800c272:	42a2      	cmp	r2, r4
 800c274:	d12b      	bne.n	800c2ce <_malloc_r+0xe2>
 800c276:	2200      	movs	r2, #0
 800c278:	605a      	str	r2, [r3, #4]
 800c27a:	e00f      	b.n	800c29c <_malloc_r+0xb0>
 800c27c:	6822      	ldr	r2, [r4, #0]
 800c27e:	1b52      	subs	r2, r2, r5
 800c280:	d41f      	bmi.n	800c2c2 <_malloc_r+0xd6>
 800c282:	2a0b      	cmp	r2, #11
 800c284:	d917      	bls.n	800c2b6 <_malloc_r+0xca>
 800c286:	1961      	adds	r1, r4, r5
 800c288:	42a3      	cmp	r3, r4
 800c28a:	6025      	str	r5, [r4, #0]
 800c28c:	bf18      	it	ne
 800c28e:	6059      	strne	r1, [r3, #4]
 800c290:	6863      	ldr	r3, [r4, #4]
 800c292:	bf08      	it	eq
 800c294:	f8c8 1000 	streq.w	r1, [r8]
 800c298:	5162      	str	r2, [r4, r5]
 800c29a:	604b      	str	r3, [r1, #4]
 800c29c:	4638      	mov	r0, r7
 800c29e:	f104 060b 	add.w	r6, r4, #11
 800c2a2:	f000 f8e9 	bl	800c478 <__malloc_unlock>
 800c2a6:	f026 0607 	bic.w	r6, r6, #7
 800c2aa:	1d23      	adds	r3, r4, #4
 800c2ac:	1af2      	subs	r2, r6, r3
 800c2ae:	d0ae      	beq.n	800c20e <_malloc_r+0x22>
 800c2b0:	1b9b      	subs	r3, r3, r6
 800c2b2:	50a3      	str	r3, [r4, r2]
 800c2b4:	e7ab      	b.n	800c20e <_malloc_r+0x22>
 800c2b6:	42a3      	cmp	r3, r4
 800c2b8:	6862      	ldr	r2, [r4, #4]
 800c2ba:	d1dd      	bne.n	800c278 <_malloc_r+0x8c>
 800c2bc:	f8c8 2000 	str.w	r2, [r8]
 800c2c0:	e7ec      	b.n	800c29c <_malloc_r+0xb0>
 800c2c2:	4623      	mov	r3, r4
 800c2c4:	6864      	ldr	r4, [r4, #4]
 800c2c6:	e7ac      	b.n	800c222 <_malloc_r+0x36>
 800c2c8:	4634      	mov	r4, r6
 800c2ca:	6876      	ldr	r6, [r6, #4]
 800c2cc:	e7b4      	b.n	800c238 <_malloc_r+0x4c>
 800c2ce:	4613      	mov	r3, r2
 800c2d0:	e7cc      	b.n	800c26c <_malloc_r+0x80>
 800c2d2:	230c      	movs	r3, #12
 800c2d4:	603b      	str	r3, [r7, #0]
 800c2d6:	4638      	mov	r0, r7
 800c2d8:	f000 f8ce 	bl	800c478 <__malloc_unlock>
 800c2dc:	e797      	b.n	800c20e <_malloc_r+0x22>
 800c2de:	6025      	str	r5, [r4, #0]
 800c2e0:	e7dc      	b.n	800c29c <_malloc_r+0xb0>
 800c2e2:	605b      	str	r3, [r3, #4]
 800c2e4:	deff      	udf	#255	; 0xff
 800c2e6:	bf00      	nop
 800c2e8:	20000908 	.word	0x20000908

0800c2ec <__ascii_mbtowc>:
 800c2ec:	b082      	sub	sp, #8
 800c2ee:	b901      	cbnz	r1, 800c2f2 <__ascii_mbtowc+0x6>
 800c2f0:	a901      	add	r1, sp, #4
 800c2f2:	b142      	cbz	r2, 800c306 <__ascii_mbtowc+0x1a>
 800c2f4:	b14b      	cbz	r3, 800c30a <__ascii_mbtowc+0x1e>
 800c2f6:	7813      	ldrb	r3, [r2, #0]
 800c2f8:	600b      	str	r3, [r1, #0]
 800c2fa:	7812      	ldrb	r2, [r2, #0]
 800c2fc:	1e10      	subs	r0, r2, #0
 800c2fe:	bf18      	it	ne
 800c300:	2001      	movne	r0, #1
 800c302:	b002      	add	sp, #8
 800c304:	4770      	bx	lr
 800c306:	4610      	mov	r0, r2
 800c308:	e7fb      	b.n	800c302 <__ascii_mbtowc+0x16>
 800c30a:	f06f 0001 	mvn.w	r0, #1
 800c30e:	e7f8      	b.n	800c302 <__ascii_mbtowc+0x16>

0800c310 <__sflush_r>:
 800c310:	898a      	ldrh	r2, [r1, #12]
 800c312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c316:	4605      	mov	r5, r0
 800c318:	0710      	lsls	r0, r2, #28
 800c31a:	460c      	mov	r4, r1
 800c31c:	d458      	bmi.n	800c3d0 <__sflush_r+0xc0>
 800c31e:	684b      	ldr	r3, [r1, #4]
 800c320:	2b00      	cmp	r3, #0
 800c322:	dc05      	bgt.n	800c330 <__sflush_r+0x20>
 800c324:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c326:	2b00      	cmp	r3, #0
 800c328:	dc02      	bgt.n	800c330 <__sflush_r+0x20>
 800c32a:	2000      	movs	r0, #0
 800c32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c330:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c332:	2e00      	cmp	r6, #0
 800c334:	d0f9      	beq.n	800c32a <__sflush_r+0x1a>
 800c336:	2300      	movs	r3, #0
 800c338:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c33c:	682f      	ldr	r7, [r5, #0]
 800c33e:	6a21      	ldr	r1, [r4, #32]
 800c340:	602b      	str	r3, [r5, #0]
 800c342:	d032      	beq.n	800c3aa <__sflush_r+0x9a>
 800c344:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c346:	89a3      	ldrh	r3, [r4, #12]
 800c348:	075a      	lsls	r2, r3, #29
 800c34a:	d505      	bpl.n	800c358 <__sflush_r+0x48>
 800c34c:	6863      	ldr	r3, [r4, #4]
 800c34e:	1ac0      	subs	r0, r0, r3
 800c350:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c352:	b10b      	cbz	r3, 800c358 <__sflush_r+0x48>
 800c354:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c356:	1ac0      	subs	r0, r0, r3
 800c358:	2300      	movs	r3, #0
 800c35a:	4602      	mov	r2, r0
 800c35c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c35e:	6a21      	ldr	r1, [r4, #32]
 800c360:	4628      	mov	r0, r5
 800c362:	47b0      	blx	r6
 800c364:	1c43      	adds	r3, r0, #1
 800c366:	89a3      	ldrh	r3, [r4, #12]
 800c368:	d106      	bne.n	800c378 <__sflush_r+0x68>
 800c36a:	6829      	ldr	r1, [r5, #0]
 800c36c:	291d      	cmp	r1, #29
 800c36e:	d82b      	bhi.n	800c3c8 <__sflush_r+0xb8>
 800c370:	4a29      	ldr	r2, [pc, #164]	; (800c418 <__sflush_r+0x108>)
 800c372:	410a      	asrs	r2, r1
 800c374:	07d6      	lsls	r6, r2, #31
 800c376:	d427      	bmi.n	800c3c8 <__sflush_r+0xb8>
 800c378:	2200      	movs	r2, #0
 800c37a:	6062      	str	r2, [r4, #4]
 800c37c:	04d9      	lsls	r1, r3, #19
 800c37e:	6922      	ldr	r2, [r4, #16]
 800c380:	6022      	str	r2, [r4, #0]
 800c382:	d504      	bpl.n	800c38e <__sflush_r+0x7e>
 800c384:	1c42      	adds	r2, r0, #1
 800c386:	d101      	bne.n	800c38c <__sflush_r+0x7c>
 800c388:	682b      	ldr	r3, [r5, #0]
 800c38a:	b903      	cbnz	r3, 800c38e <__sflush_r+0x7e>
 800c38c:	6560      	str	r0, [r4, #84]	; 0x54
 800c38e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c390:	602f      	str	r7, [r5, #0]
 800c392:	2900      	cmp	r1, #0
 800c394:	d0c9      	beq.n	800c32a <__sflush_r+0x1a>
 800c396:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c39a:	4299      	cmp	r1, r3
 800c39c:	d002      	beq.n	800c3a4 <__sflush_r+0x94>
 800c39e:	4628      	mov	r0, r5
 800c3a0:	f000 fe40 	bl	800d024 <_free_r>
 800c3a4:	2000      	movs	r0, #0
 800c3a6:	6360      	str	r0, [r4, #52]	; 0x34
 800c3a8:	e7c0      	b.n	800c32c <__sflush_r+0x1c>
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	4628      	mov	r0, r5
 800c3ae:	47b0      	blx	r6
 800c3b0:	1c41      	adds	r1, r0, #1
 800c3b2:	d1c8      	bne.n	800c346 <__sflush_r+0x36>
 800c3b4:	682b      	ldr	r3, [r5, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d0c5      	beq.n	800c346 <__sflush_r+0x36>
 800c3ba:	2b1d      	cmp	r3, #29
 800c3bc:	d001      	beq.n	800c3c2 <__sflush_r+0xb2>
 800c3be:	2b16      	cmp	r3, #22
 800c3c0:	d101      	bne.n	800c3c6 <__sflush_r+0xb6>
 800c3c2:	602f      	str	r7, [r5, #0]
 800c3c4:	e7b1      	b.n	800c32a <__sflush_r+0x1a>
 800c3c6:	89a3      	ldrh	r3, [r4, #12]
 800c3c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3cc:	81a3      	strh	r3, [r4, #12]
 800c3ce:	e7ad      	b.n	800c32c <__sflush_r+0x1c>
 800c3d0:	690f      	ldr	r7, [r1, #16]
 800c3d2:	2f00      	cmp	r7, #0
 800c3d4:	d0a9      	beq.n	800c32a <__sflush_r+0x1a>
 800c3d6:	0793      	lsls	r3, r2, #30
 800c3d8:	680e      	ldr	r6, [r1, #0]
 800c3da:	bf08      	it	eq
 800c3dc:	694b      	ldreq	r3, [r1, #20]
 800c3de:	600f      	str	r7, [r1, #0]
 800c3e0:	bf18      	it	ne
 800c3e2:	2300      	movne	r3, #0
 800c3e4:	eba6 0807 	sub.w	r8, r6, r7
 800c3e8:	608b      	str	r3, [r1, #8]
 800c3ea:	f1b8 0f00 	cmp.w	r8, #0
 800c3ee:	dd9c      	ble.n	800c32a <__sflush_r+0x1a>
 800c3f0:	6a21      	ldr	r1, [r4, #32]
 800c3f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c3f4:	4643      	mov	r3, r8
 800c3f6:	463a      	mov	r2, r7
 800c3f8:	4628      	mov	r0, r5
 800c3fa:	47b0      	blx	r6
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	dc06      	bgt.n	800c40e <__sflush_r+0xfe>
 800c400:	89a3      	ldrh	r3, [r4, #12]
 800c402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c406:	81a3      	strh	r3, [r4, #12]
 800c408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c40c:	e78e      	b.n	800c32c <__sflush_r+0x1c>
 800c40e:	4407      	add	r7, r0
 800c410:	eba8 0800 	sub.w	r8, r8, r0
 800c414:	e7e9      	b.n	800c3ea <__sflush_r+0xda>
 800c416:	bf00      	nop
 800c418:	dfbffffe 	.word	0xdfbffffe

0800c41c <_fflush_r>:
 800c41c:	b538      	push	{r3, r4, r5, lr}
 800c41e:	690b      	ldr	r3, [r1, #16]
 800c420:	4605      	mov	r5, r0
 800c422:	460c      	mov	r4, r1
 800c424:	b913      	cbnz	r3, 800c42c <_fflush_r+0x10>
 800c426:	2500      	movs	r5, #0
 800c428:	4628      	mov	r0, r5
 800c42a:	bd38      	pop	{r3, r4, r5, pc}
 800c42c:	b118      	cbz	r0, 800c436 <_fflush_r+0x1a>
 800c42e:	6a03      	ldr	r3, [r0, #32]
 800c430:	b90b      	cbnz	r3, 800c436 <_fflush_r+0x1a>
 800c432:	f7fd fbcb 	bl	8009bcc <__sinit>
 800c436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d0f3      	beq.n	800c426 <_fflush_r+0xa>
 800c43e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c440:	07d0      	lsls	r0, r2, #31
 800c442:	d404      	bmi.n	800c44e <_fflush_r+0x32>
 800c444:	0599      	lsls	r1, r3, #22
 800c446:	d402      	bmi.n	800c44e <_fflush_r+0x32>
 800c448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c44a:	f7fe fb5a 	bl	800ab02 <__retarget_lock_acquire_recursive>
 800c44e:	4628      	mov	r0, r5
 800c450:	4621      	mov	r1, r4
 800c452:	f7ff ff5d 	bl	800c310 <__sflush_r>
 800c456:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c458:	07da      	lsls	r2, r3, #31
 800c45a:	4605      	mov	r5, r0
 800c45c:	d4e4      	bmi.n	800c428 <_fflush_r+0xc>
 800c45e:	89a3      	ldrh	r3, [r4, #12]
 800c460:	059b      	lsls	r3, r3, #22
 800c462:	d4e1      	bmi.n	800c428 <_fflush_r+0xc>
 800c464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c466:	f7fe fb4d 	bl	800ab04 <__retarget_lock_release_recursive>
 800c46a:	e7dd      	b.n	800c428 <_fflush_r+0xc>

0800c46c <__malloc_lock>:
 800c46c:	4801      	ldr	r0, [pc, #4]	; (800c474 <__malloc_lock+0x8>)
 800c46e:	f7fe bb48 	b.w	800ab02 <__retarget_lock_acquire_recursive>
 800c472:	bf00      	nop
 800c474:	20000904 	.word	0x20000904

0800c478 <__malloc_unlock>:
 800c478:	4801      	ldr	r0, [pc, #4]	; (800c480 <__malloc_unlock+0x8>)
 800c47a:	f7fe bb43 	b.w	800ab04 <__retarget_lock_release_recursive>
 800c47e:	bf00      	nop
 800c480:	20000904 	.word	0x20000904

0800c484 <_Balloc>:
 800c484:	b570      	push	{r4, r5, r6, lr}
 800c486:	69c6      	ldr	r6, [r0, #28]
 800c488:	4604      	mov	r4, r0
 800c48a:	460d      	mov	r5, r1
 800c48c:	b976      	cbnz	r6, 800c4ac <_Balloc+0x28>
 800c48e:	2010      	movs	r0, #16
 800c490:	f7ff fe84 	bl	800c19c <malloc>
 800c494:	4602      	mov	r2, r0
 800c496:	61e0      	str	r0, [r4, #28]
 800c498:	b920      	cbnz	r0, 800c4a4 <_Balloc+0x20>
 800c49a:	4b18      	ldr	r3, [pc, #96]	; (800c4fc <_Balloc+0x78>)
 800c49c:	4818      	ldr	r0, [pc, #96]	; (800c500 <_Balloc+0x7c>)
 800c49e:	216b      	movs	r1, #107	; 0x6b
 800c4a0:	f000 fd8c 	bl	800cfbc <__assert_func>
 800c4a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4a8:	6006      	str	r6, [r0, #0]
 800c4aa:	60c6      	str	r6, [r0, #12]
 800c4ac:	69e6      	ldr	r6, [r4, #28]
 800c4ae:	68f3      	ldr	r3, [r6, #12]
 800c4b0:	b183      	cbz	r3, 800c4d4 <_Balloc+0x50>
 800c4b2:	69e3      	ldr	r3, [r4, #28]
 800c4b4:	68db      	ldr	r3, [r3, #12]
 800c4b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c4ba:	b9b8      	cbnz	r0, 800c4ec <_Balloc+0x68>
 800c4bc:	2101      	movs	r1, #1
 800c4be:	fa01 f605 	lsl.w	r6, r1, r5
 800c4c2:	1d72      	adds	r2, r6, #5
 800c4c4:	0092      	lsls	r2, r2, #2
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	f000 fd96 	bl	800cff8 <_calloc_r>
 800c4cc:	b160      	cbz	r0, 800c4e8 <_Balloc+0x64>
 800c4ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c4d2:	e00e      	b.n	800c4f2 <_Balloc+0x6e>
 800c4d4:	2221      	movs	r2, #33	; 0x21
 800c4d6:	2104      	movs	r1, #4
 800c4d8:	4620      	mov	r0, r4
 800c4da:	f000 fd8d 	bl	800cff8 <_calloc_r>
 800c4de:	69e3      	ldr	r3, [r4, #28]
 800c4e0:	60f0      	str	r0, [r6, #12]
 800c4e2:	68db      	ldr	r3, [r3, #12]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d1e4      	bne.n	800c4b2 <_Balloc+0x2e>
 800c4e8:	2000      	movs	r0, #0
 800c4ea:	bd70      	pop	{r4, r5, r6, pc}
 800c4ec:	6802      	ldr	r2, [r0, #0]
 800c4ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c4f8:	e7f7      	b.n	800c4ea <_Balloc+0x66>
 800c4fa:	bf00      	nop
 800c4fc:	0800de7e 	.word	0x0800de7e
 800c500:	0800df6f 	.word	0x0800df6f

0800c504 <_Bfree>:
 800c504:	b570      	push	{r4, r5, r6, lr}
 800c506:	69c6      	ldr	r6, [r0, #28]
 800c508:	4605      	mov	r5, r0
 800c50a:	460c      	mov	r4, r1
 800c50c:	b976      	cbnz	r6, 800c52c <_Bfree+0x28>
 800c50e:	2010      	movs	r0, #16
 800c510:	f7ff fe44 	bl	800c19c <malloc>
 800c514:	4602      	mov	r2, r0
 800c516:	61e8      	str	r0, [r5, #28]
 800c518:	b920      	cbnz	r0, 800c524 <_Bfree+0x20>
 800c51a:	4b09      	ldr	r3, [pc, #36]	; (800c540 <_Bfree+0x3c>)
 800c51c:	4809      	ldr	r0, [pc, #36]	; (800c544 <_Bfree+0x40>)
 800c51e:	218f      	movs	r1, #143	; 0x8f
 800c520:	f000 fd4c 	bl	800cfbc <__assert_func>
 800c524:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c528:	6006      	str	r6, [r0, #0]
 800c52a:	60c6      	str	r6, [r0, #12]
 800c52c:	b13c      	cbz	r4, 800c53e <_Bfree+0x3a>
 800c52e:	69eb      	ldr	r3, [r5, #28]
 800c530:	6862      	ldr	r2, [r4, #4]
 800c532:	68db      	ldr	r3, [r3, #12]
 800c534:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c538:	6021      	str	r1, [r4, #0]
 800c53a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c53e:	bd70      	pop	{r4, r5, r6, pc}
 800c540:	0800de7e 	.word	0x0800de7e
 800c544:	0800df6f 	.word	0x0800df6f

0800c548 <__multadd>:
 800c548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c54c:	690d      	ldr	r5, [r1, #16]
 800c54e:	4607      	mov	r7, r0
 800c550:	460c      	mov	r4, r1
 800c552:	461e      	mov	r6, r3
 800c554:	f101 0c14 	add.w	ip, r1, #20
 800c558:	2000      	movs	r0, #0
 800c55a:	f8dc 3000 	ldr.w	r3, [ip]
 800c55e:	b299      	uxth	r1, r3
 800c560:	fb02 6101 	mla	r1, r2, r1, r6
 800c564:	0c1e      	lsrs	r6, r3, #16
 800c566:	0c0b      	lsrs	r3, r1, #16
 800c568:	fb02 3306 	mla	r3, r2, r6, r3
 800c56c:	b289      	uxth	r1, r1
 800c56e:	3001      	adds	r0, #1
 800c570:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c574:	4285      	cmp	r5, r0
 800c576:	f84c 1b04 	str.w	r1, [ip], #4
 800c57a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c57e:	dcec      	bgt.n	800c55a <__multadd+0x12>
 800c580:	b30e      	cbz	r6, 800c5c6 <__multadd+0x7e>
 800c582:	68a3      	ldr	r3, [r4, #8]
 800c584:	42ab      	cmp	r3, r5
 800c586:	dc19      	bgt.n	800c5bc <__multadd+0x74>
 800c588:	6861      	ldr	r1, [r4, #4]
 800c58a:	4638      	mov	r0, r7
 800c58c:	3101      	adds	r1, #1
 800c58e:	f7ff ff79 	bl	800c484 <_Balloc>
 800c592:	4680      	mov	r8, r0
 800c594:	b928      	cbnz	r0, 800c5a2 <__multadd+0x5a>
 800c596:	4602      	mov	r2, r0
 800c598:	4b0c      	ldr	r3, [pc, #48]	; (800c5cc <__multadd+0x84>)
 800c59a:	480d      	ldr	r0, [pc, #52]	; (800c5d0 <__multadd+0x88>)
 800c59c:	21ba      	movs	r1, #186	; 0xba
 800c59e:	f000 fd0d 	bl	800cfbc <__assert_func>
 800c5a2:	6922      	ldr	r2, [r4, #16]
 800c5a4:	3202      	adds	r2, #2
 800c5a6:	f104 010c 	add.w	r1, r4, #12
 800c5aa:	0092      	lsls	r2, r2, #2
 800c5ac:	300c      	adds	r0, #12
 800c5ae:	f7fe faaa 	bl	800ab06 <memcpy>
 800c5b2:	4621      	mov	r1, r4
 800c5b4:	4638      	mov	r0, r7
 800c5b6:	f7ff ffa5 	bl	800c504 <_Bfree>
 800c5ba:	4644      	mov	r4, r8
 800c5bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c5c0:	3501      	adds	r5, #1
 800c5c2:	615e      	str	r6, [r3, #20]
 800c5c4:	6125      	str	r5, [r4, #16]
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5cc:	0800deed 	.word	0x0800deed
 800c5d0:	0800df6f 	.word	0x0800df6f

0800c5d4 <__s2b>:
 800c5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5d8:	460c      	mov	r4, r1
 800c5da:	4615      	mov	r5, r2
 800c5dc:	461f      	mov	r7, r3
 800c5de:	2209      	movs	r2, #9
 800c5e0:	3308      	adds	r3, #8
 800c5e2:	4606      	mov	r6, r0
 800c5e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c5e8:	2100      	movs	r1, #0
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	db09      	blt.n	800c604 <__s2b+0x30>
 800c5f0:	4630      	mov	r0, r6
 800c5f2:	f7ff ff47 	bl	800c484 <_Balloc>
 800c5f6:	b940      	cbnz	r0, 800c60a <__s2b+0x36>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	4b19      	ldr	r3, [pc, #100]	; (800c660 <__s2b+0x8c>)
 800c5fc:	4819      	ldr	r0, [pc, #100]	; (800c664 <__s2b+0x90>)
 800c5fe:	21d3      	movs	r1, #211	; 0xd3
 800c600:	f000 fcdc 	bl	800cfbc <__assert_func>
 800c604:	0052      	lsls	r2, r2, #1
 800c606:	3101      	adds	r1, #1
 800c608:	e7f0      	b.n	800c5ec <__s2b+0x18>
 800c60a:	9b08      	ldr	r3, [sp, #32]
 800c60c:	6143      	str	r3, [r0, #20]
 800c60e:	2d09      	cmp	r5, #9
 800c610:	f04f 0301 	mov.w	r3, #1
 800c614:	6103      	str	r3, [r0, #16]
 800c616:	dd16      	ble.n	800c646 <__s2b+0x72>
 800c618:	f104 0909 	add.w	r9, r4, #9
 800c61c:	46c8      	mov	r8, r9
 800c61e:	442c      	add	r4, r5
 800c620:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c624:	4601      	mov	r1, r0
 800c626:	3b30      	subs	r3, #48	; 0x30
 800c628:	220a      	movs	r2, #10
 800c62a:	4630      	mov	r0, r6
 800c62c:	f7ff ff8c 	bl	800c548 <__multadd>
 800c630:	45a0      	cmp	r8, r4
 800c632:	d1f5      	bne.n	800c620 <__s2b+0x4c>
 800c634:	f1a5 0408 	sub.w	r4, r5, #8
 800c638:	444c      	add	r4, r9
 800c63a:	1b2d      	subs	r5, r5, r4
 800c63c:	1963      	adds	r3, r4, r5
 800c63e:	42bb      	cmp	r3, r7
 800c640:	db04      	blt.n	800c64c <__s2b+0x78>
 800c642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c646:	340a      	adds	r4, #10
 800c648:	2509      	movs	r5, #9
 800c64a:	e7f6      	b.n	800c63a <__s2b+0x66>
 800c64c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c650:	4601      	mov	r1, r0
 800c652:	3b30      	subs	r3, #48	; 0x30
 800c654:	220a      	movs	r2, #10
 800c656:	4630      	mov	r0, r6
 800c658:	f7ff ff76 	bl	800c548 <__multadd>
 800c65c:	e7ee      	b.n	800c63c <__s2b+0x68>
 800c65e:	bf00      	nop
 800c660:	0800deed 	.word	0x0800deed
 800c664:	0800df6f 	.word	0x0800df6f

0800c668 <__hi0bits>:
 800c668:	0c03      	lsrs	r3, r0, #16
 800c66a:	041b      	lsls	r3, r3, #16
 800c66c:	b9d3      	cbnz	r3, 800c6a4 <__hi0bits+0x3c>
 800c66e:	0400      	lsls	r0, r0, #16
 800c670:	2310      	movs	r3, #16
 800c672:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c676:	bf04      	itt	eq
 800c678:	0200      	lsleq	r0, r0, #8
 800c67a:	3308      	addeq	r3, #8
 800c67c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c680:	bf04      	itt	eq
 800c682:	0100      	lsleq	r0, r0, #4
 800c684:	3304      	addeq	r3, #4
 800c686:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c68a:	bf04      	itt	eq
 800c68c:	0080      	lsleq	r0, r0, #2
 800c68e:	3302      	addeq	r3, #2
 800c690:	2800      	cmp	r0, #0
 800c692:	db05      	blt.n	800c6a0 <__hi0bits+0x38>
 800c694:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c698:	f103 0301 	add.w	r3, r3, #1
 800c69c:	bf08      	it	eq
 800c69e:	2320      	moveq	r3, #32
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	4770      	bx	lr
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	e7e4      	b.n	800c672 <__hi0bits+0xa>

0800c6a8 <__lo0bits>:
 800c6a8:	6803      	ldr	r3, [r0, #0]
 800c6aa:	f013 0207 	ands.w	r2, r3, #7
 800c6ae:	d00c      	beq.n	800c6ca <__lo0bits+0x22>
 800c6b0:	07d9      	lsls	r1, r3, #31
 800c6b2:	d422      	bmi.n	800c6fa <__lo0bits+0x52>
 800c6b4:	079a      	lsls	r2, r3, #30
 800c6b6:	bf49      	itett	mi
 800c6b8:	085b      	lsrmi	r3, r3, #1
 800c6ba:	089b      	lsrpl	r3, r3, #2
 800c6bc:	6003      	strmi	r3, [r0, #0]
 800c6be:	2201      	movmi	r2, #1
 800c6c0:	bf5c      	itt	pl
 800c6c2:	6003      	strpl	r3, [r0, #0]
 800c6c4:	2202      	movpl	r2, #2
 800c6c6:	4610      	mov	r0, r2
 800c6c8:	4770      	bx	lr
 800c6ca:	b299      	uxth	r1, r3
 800c6cc:	b909      	cbnz	r1, 800c6d2 <__lo0bits+0x2a>
 800c6ce:	0c1b      	lsrs	r3, r3, #16
 800c6d0:	2210      	movs	r2, #16
 800c6d2:	b2d9      	uxtb	r1, r3
 800c6d4:	b909      	cbnz	r1, 800c6da <__lo0bits+0x32>
 800c6d6:	3208      	adds	r2, #8
 800c6d8:	0a1b      	lsrs	r3, r3, #8
 800c6da:	0719      	lsls	r1, r3, #28
 800c6dc:	bf04      	itt	eq
 800c6de:	091b      	lsreq	r3, r3, #4
 800c6e0:	3204      	addeq	r2, #4
 800c6e2:	0799      	lsls	r1, r3, #30
 800c6e4:	bf04      	itt	eq
 800c6e6:	089b      	lsreq	r3, r3, #2
 800c6e8:	3202      	addeq	r2, #2
 800c6ea:	07d9      	lsls	r1, r3, #31
 800c6ec:	d403      	bmi.n	800c6f6 <__lo0bits+0x4e>
 800c6ee:	085b      	lsrs	r3, r3, #1
 800c6f0:	f102 0201 	add.w	r2, r2, #1
 800c6f4:	d003      	beq.n	800c6fe <__lo0bits+0x56>
 800c6f6:	6003      	str	r3, [r0, #0]
 800c6f8:	e7e5      	b.n	800c6c6 <__lo0bits+0x1e>
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	e7e3      	b.n	800c6c6 <__lo0bits+0x1e>
 800c6fe:	2220      	movs	r2, #32
 800c700:	e7e1      	b.n	800c6c6 <__lo0bits+0x1e>
	...

0800c704 <__i2b>:
 800c704:	b510      	push	{r4, lr}
 800c706:	460c      	mov	r4, r1
 800c708:	2101      	movs	r1, #1
 800c70a:	f7ff febb 	bl	800c484 <_Balloc>
 800c70e:	4602      	mov	r2, r0
 800c710:	b928      	cbnz	r0, 800c71e <__i2b+0x1a>
 800c712:	4b05      	ldr	r3, [pc, #20]	; (800c728 <__i2b+0x24>)
 800c714:	4805      	ldr	r0, [pc, #20]	; (800c72c <__i2b+0x28>)
 800c716:	f240 1145 	movw	r1, #325	; 0x145
 800c71a:	f000 fc4f 	bl	800cfbc <__assert_func>
 800c71e:	2301      	movs	r3, #1
 800c720:	6144      	str	r4, [r0, #20]
 800c722:	6103      	str	r3, [r0, #16]
 800c724:	bd10      	pop	{r4, pc}
 800c726:	bf00      	nop
 800c728:	0800deed 	.word	0x0800deed
 800c72c:	0800df6f 	.word	0x0800df6f

0800c730 <__multiply>:
 800c730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c734:	4691      	mov	r9, r2
 800c736:	690a      	ldr	r2, [r1, #16]
 800c738:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	bfb8      	it	lt
 800c740:	460b      	movlt	r3, r1
 800c742:	460c      	mov	r4, r1
 800c744:	bfbc      	itt	lt
 800c746:	464c      	movlt	r4, r9
 800c748:	4699      	movlt	r9, r3
 800c74a:	6927      	ldr	r7, [r4, #16]
 800c74c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c750:	68a3      	ldr	r3, [r4, #8]
 800c752:	6861      	ldr	r1, [r4, #4]
 800c754:	eb07 060a 	add.w	r6, r7, sl
 800c758:	42b3      	cmp	r3, r6
 800c75a:	b085      	sub	sp, #20
 800c75c:	bfb8      	it	lt
 800c75e:	3101      	addlt	r1, #1
 800c760:	f7ff fe90 	bl	800c484 <_Balloc>
 800c764:	b930      	cbnz	r0, 800c774 <__multiply+0x44>
 800c766:	4602      	mov	r2, r0
 800c768:	4b44      	ldr	r3, [pc, #272]	; (800c87c <__multiply+0x14c>)
 800c76a:	4845      	ldr	r0, [pc, #276]	; (800c880 <__multiply+0x150>)
 800c76c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c770:	f000 fc24 	bl	800cfbc <__assert_func>
 800c774:	f100 0514 	add.w	r5, r0, #20
 800c778:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c77c:	462b      	mov	r3, r5
 800c77e:	2200      	movs	r2, #0
 800c780:	4543      	cmp	r3, r8
 800c782:	d321      	bcc.n	800c7c8 <__multiply+0x98>
 800c784:	f104 0314 	add.w	r3, r4, #20
 800c788:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c78c:	f109 0314 	add.w	r3, r9, #20
 800c790:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c794:	9202      	str	r2, [sp, #8]
 800c796:	1b3a      	subs	r2, r7, r4
 800c798:	3a15      	subs	r2, #21
 800c79a:	f022 0203 	bic.w	r2, r2, #3
 800c79e:	3204      	adds	r2, #4
 800c7a0:	f104 0115 	add.w	r1, r4, #21
 800c7a4:	428f      	cmp	r7, r1
 800c7a6:	bf38      	it	cc
 800c7a8:	2204      	movcc	r2, #4
 800c7aa:	9201      	str	r2, [sp, #4]
 800c7ac:	9a02      	ldr	r2, [sp, #8]
 800c7ae:	9303      	str	r3, [sp, #12]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d80c      	bhi.n	800c7ce <__multiply+0x9e>
 800c7b4:	2e00      	cmp	r6, #0
 800c7b6:	dd03      	ble.n	800c7c0 <__multiply+0x90>
 800c7b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d05b      	beq.n	800c878 <__multiply+0x148>
 800c7c0:	6106      	str	r6, [r0, #16]
 800c7c2:	b005      	add	sp, #20
 800c7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7c8:	f843 2b04 	str.w	r2, [r3], #4
 800c7cc:	e7d8      	b.n	800c780 <__multiply+0x50>
 800c7ce:	f8b3 a000 	ldrh.w	sl, [r3]
 800c7d2:	f1ba 0f00 	cmp.w	sl, #0
 800c7d6:	d024      	beq.n	800c822 <__multiply+0xf2>
 800c7d8:	f104 0e14 	add.w	lr, r4, #20
 800c7dc:	46a9      	mov	r9, r5
 800c7de:	f04f 0c00 	mov.w	ip, #0
 800c7e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c7e6:	f8d9 1000 	ldr.w	r1, [r9]
 800c7ea:	fa1f fb82 	uxth.w	fp, r2
 800c7ee:	b289      	uxth	r1, r1
 800c7f0:	fb0a 110b 	mla	r1, sl, fp, r1
 800c7f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c7f8:	f8d9 2000 	ldr.w	r2, [r9]
 800c7fc:	4461      	add	r1, ip
 800c7fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c802:	fb0a c20b 	mla	r2, sl, fp, ip
 800c806:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c80a:	b289      	uxth	r1, r1
 800c80c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c810:	4577      	cmp	r7, lr
 800c812:	f849 1b04 	str.w	r1, [r9], #4
 800c816:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c81a:	d8e2      	bhi.n	800c7e2 <__multiply+0xb2>
 800c81c:	9a01      	ldr	r2, [sp, #4]
 800c81e:	f845 c002 	str.w	ip, [r5, r2]
 800c822:	9a03      	ldr	r2, [sp, #12]
 800c824:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c828:	3304      	adds	r3, #4
 800c82a:	f1b9 0f00 	cmp.w	r9, #0
 800c82e:	d021      	beq.n	800c874 <__multiply+0x144>
 800c830:	6829      	ldr	r1, [r5, #0]
 800c832:	f104 0c14 	add.w	ip, r4, #20
 800c836:	46ae      	mov	lr, r5
 800c838:	f04f 0a00 	mov.w	sl, #0
 800c83c:	f8bc b000 	ldrh.w	fp, [ip]
 800c840:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c844:	fb09 220b 	mla	r2, r9, fp, r2
 800c848:	4452      	add	r2, sl
 800c84a:	b289      	uxth	r1, r1
 800c84c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c850:	f84e 1b04 	str.w	r1, [lr], #4
 800c854:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c858:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c85c:	f8be 1000 	ldrh.w	r1, [lr]
 800c860:	fb09 110a 	mla	r1, r9, sl, r1
 800c864:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c868:	4567      	cmp	r7, ip
 800c86a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c86e:	d8e5      	bhi.n	800c83c <__multiply+0x10c>
 800c870:	9a01      	ldr	r2, [sp, #4]
 800c872:	50a9      	str	r1, [r5, r2]
 800c874:	3504      	adds	r5, #4
 800c876:	e799      	b.n	800c7ac <__multiply+0x7c>
 800c878:	3e01      	subs	r6, #1
 800c87a:	e79b      	b.n	800c7b4 <__multiply+0x84>
 800c87c:	0800deed 	.word	0x0800deed
 800c880:	0800df6f 	.word	0x0800df6f

0800c884 <__pow5mult>:
 800c884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c888:	4615      	mov	r5, r2
 800c88a:	f012 0203 	ands.w	r2, r2, #3
 800c88e:	4606      	mov	r6, r0
 800c890:	460f      	mov	r7, r1
 800c892:	d007      	beq.n	800c8a4 <__pow5mult+0x20>
 800c894:	4c25      	ldr	r4, [pc, #148]	; (800c92c <__pow5mult+0xa8>)
 800c896:	3a01      	subs	r2, #1
 800c898:	2300      	movs	r3, #0
 800c89a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c89e:	f7ff fe53 	bl	800c548 <__multadd>
 800c8a2:	4607      	mov	r7, r0
 800c8a4:	10ad      	asrs	r5, r5, #2
 800c8a6:	d03d      	beq.n	800c924 <__pow5mult+0xa0>
 800c8a8:	69f4      	ldr	r4, [r6, #28]
 800c8aa:	b97c      	cbnz	r4, 800c8cc <__pow5mult+0x48>
 800c8ac:	2010      	movs	r0, #16
 800c8ae:	f7ff fc75 	bl	800c19c <malloc>
 800c8b2:	4602      	mov	r2, r0
 800c8b4:	61f0      	str	r0, [r6, #28]
 800c8b6:	b928      	cbnz	r0, 800c8c4 <__pow5mult+0x40>
 800c8b8:	4b1d      	ldr	r3, [pc, #116]	; (800c930 <__pow5mult+0xac>)
 800c8ba:	481e      	ldr	r0, [pc, #120]	; (800c934 <__pow5mult+0xb0>)
 800c8bc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c8c0:	f000 fb7c 	bl	800cfbc <__assert_func>
 800c8c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c8c8:	6004      	str	r4, [r0, #0]
 800c8ca:	60c4      	str	r4, [r0, #12]
 800c8cc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c8d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c8d4:	b94c      	cbnz	r4, 800c8ea <__pow5mult+0x66>
 800c8d6:	f240 2171 	movw	r1, #625	; 0x271
 800c8da:	4630      	mov	r0, r6
 800c8dc:	f7ff ff12 	bl	800c704 <__i2b>
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c8e6:	4604      	mov	r4, r0
 800c8e8:	6003      	str	r3, [r0, #0]
 800c8ea:	f04f 0900 	mov.w	r9, #0
 800c8ee:	07eb      	lsls	r3, r5, #31
 800c8f0:	d50a      	bpl.n	800c908 <__pow5mult+0x84>
 800c8f2:	4639      	mov	r1, r7
 800c8f4:	4622      	mov	r2, r4
 800c8f6:	4630      	mov	r0, r6
 800c8f8:	f7ff ff1a 	bl	800c730 <__multiply>
 800c8fc:	4639      	mov	r1, r7
 800c8fe:	4680      	mov	r8, r0
 800c900:	4630      	mov	r0, r6
 800c902:	f7ff fdff 	bl	800c504 <_Bfree>
 800c906:	4647      	mov	r7, r8
 800c908:	106d      	asrs	r5, r5, #1
 800c90a:	d00b      	beq.n	800c924 <__pow5mult+0xa0>
 800c90c:	6820      	ldr	r0, [r4, #0]
 800c90e:	b938      	cbnz	r0, 800c920 <__pow5mult+0x9c>
 800c910:	4622      	mov	r2, r4
 800c912:	4621      	mov	r1, r4
 800c914:	4630      	mov	r0, r6
 800c916:	f7ff ff0b 	bl	800c730 <__multiply>
 800c91a:	6020      	str	r0, [r4, #0]
 800c91c:	f8c0 9000 	str.w	r9, [r0]
 800c920:	4604      	mov	r4, r0
 800c922:	e7e4      	b.n	800c8ee <__pow5mult+0x6a>
 800c924:	4638      	mov	r0, r7
 800c926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c92a:	bf00      	nop
 800c92c:	0800e0b8 	.word	0x0800e0b8
 800c930:	0800de7e 	.word	0x0800de7e
 800c934:	0800df6f 	.word	0x0800df6f

0800c938 <__lshift>:
 800c938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c93c:	460c      	mov	r4, r1
 800c93e:	6849      	ldr	r1, [r1, #4]
 800c940:	6923      	ldr	r3, [r4, #16]
 800c942:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c946:	68a3      	ldr	r3, [r4, #8]
 800c948:	4607      	mov	r7, r0
 800c94a:	4691      	mov	r9, r2
 800c94c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c950:	f108 0601 	add.w	r6, r8, #1
 800c954:	42b3      	cmp	r3, r6
 800c956:	db0b      	blt.n	800c970 <__lshift+0x38>
 800c958:	4638      	mov	r0, r7
 800c95a:	f7ff fd93 	bl	800c484 <_Balloc>
 800c95e:	4605      	mov	r5, r0
 800c960:	b948      	cbnz	r0, 800c976 <__lshift+0x3e>
 800c962:	4602      	mov	r2, r0
 800c964:	4b28      	ldr	r3, [pc, #160]	; (800ca08 <__lshift+0xd0>)
 800c966:	4829      	ldr	r0, [pc, #164]	; (800ca0c <__lshift+0xd4>)
 800c968:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c96c:	f000 fb26 	bl	800cfbc <__assert_func>
 800c970:	3101      	adds	r1, #1
 800c972:	005b      	lsls	r3, r3, #1
 800c974:	e7ee      	b.n	800c954 <__lshift+0x1c>
 800c976:	2300      	movs	r3, #0
 800c978:	f100 0114 	add.w	r1, r0, #20
 800c97c:	f100 0210 	add.w	r2, r0, #16
 800c980:	4618      	mov	r0, r3
 800c982:	4553      	cmp	r3, sl
 800c984:	db33      	blt.n	800c9ee <__lshift+0xb6>
 800c986:	6920      	ldr	r0, [r4, #16]
 800c988:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c98c:	f104 0314 	add.w	r3, r4, #20
 800c990:	f019 091f 	ands.w	r9, r9, #31
 800c994:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c998:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c99c:	d02b      	beq.n	800c9f6 <__lshift+0xbe>
 800c99e:	f1c9 0e20 	rsb	lr, r9, #32
 800c9a2:	468a      	mov	sl, r1
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	6818      	ldr	r0, [r3, #0]
 800c9a8:	fa00 f009 	lsl.w	r0, r0, r9
 800c9ac:	4310      	orrs	r0, r2
 800c9ae:	f84a 0b04 	str.w	r0, [sl], #4
 800c9b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9b6:	459c      	cmp	ip, r3
 800c9b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c9bc:	d8f3      	bhi.n	800c9a6 <__lshift+0x6e>
 800c9be:	ebac 0304 	sub.w	r3, ip, r4
 800c9c2:	3b15      	subs	r3, #21
 800c9c4:	f023 0303 	bic.w	r3, r3, #3
 800c9c8:	3304      	adds	r3, #4
 800c9ca:	f104 0015 	add.w	r0, r4, #21
 800c9ce:	4584      	cmp	ip, r0
 800c9d0:	bf38      	it	cc
 800c9d2:	2304      	movcc	r3, #4
 800c9d4:	50ca      	str	r2, [r1, r3]
 800c9d6:	b10a      	cbz	r2, 800c9dc <__lshift+0xa4>
 800c9d8:	f108 0602 	add.w	r6, r8, #2
 800c9dc:	3e01      	subs	r6, #1
 800c9de:	4638      	mov	r0, r7
 800c9e0:	612e      	str	r6, [r5, #16]
 800c9e2:	4621      	mov	r1, r4
 800c9e4:	f7ff fd8e 	bl	800c504 <_Bfree>
 800c9e8:	4628      	mov	r0, r5
 800c9ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	e7c5      	b.n	800c982 <__lshift+0x4a>
 800c9f6:	3904      	subs	r1, #4
 800c9f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800ca00:	459c      	cmp	ip, r3
 800ca02:	d8f9      	bhi.n	800c9f8 <__lshift+0xc0>
 800ca04:	e7ea      	b.n	800c9dc <__lshift+0xa4>
 800ca06:	bf00      	nop
 800ca08:	0800deed 	.word	0x0800deed
 800ca0c:	0800df6f 	.word	0x0800df6f

0800ca10 <__mcmp>:
 800ca10:	b530      	push	{r4, r5, lr}
 800ca12:	6902      	ldr	r2, [r0, #16]
 800ca14:	690c      	ldr	r4, [r1, #16]
 800ca16:	1b12      	subs	r2, r2, r4
 800ca18:	d10e      	bne.n	800ca38 <__mcmp+0x28>
 800ca1a:	f100 0314 	add.w	r3, r0, #20
 800ca1e:	3114      	adds	r1, #20
 800ca20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ca24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ca28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ca2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ca30:	42a5      	cmp	r5, r4
 800ca32:	d003      	beq.n	800ca3c <__mcmp+0x2c>
 800ca34:	d305      	bcc.n	800ca42 <__mcmp+0x32>
 800ca36:	2201      	movs	r2, #1
 800ca38:	4610      	mov	r0, r2
 800ca3a:	bd30      	pop	{r4, r5, pc}
 800ca3c:	4283      	cmp	r3, r0
 800ca3e:	d3f3      	bcc.n	800ca28 <__mcmp+0x18>
 800ca40:	e7fa      	b.n	800ca38 <__mcmp+0x28>
 800ca42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca46:	e7f7      	b.n	800ca38 <__mcmp+0x28>

0800ca48 <__mdiff>:
 800ca48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca4c:	460c      	mov	r4, r1
 800ca4e:	4606      	mov	r6, r0
 800ca50:	4611      	mov	r1, r2
 800ca52:	4620      	mov	r0, r4
 800ca54:	4690      	mov	r8, r2
 800ca56:	f7ff ffdb 	bl	800ca10 <__mcmp>
 800ca5a:	1e05      	subs	r5, r0, #0
 800ca5c:	d110      	bne.n	800ca80 <__mdiff+0x38>
 800ca5e:	4629      	mov	r1, r5
 800ca60:	4630      	mov	r0, r6
 800ca62:	f7ff fd0f 	bl	800c484 <_Balloc>
 800ca66:	b930      	cbnz	r0, 800ca76 <__mdiff+0x2e>
 800ca68:	4b3a      	ldr	r3, [pc, #232]	; (800cb54 <__mdiff+0x10c>)
 800ca6a:	4602      	mov	r2, r0
 800ca6c:	f240 2137 	movw	r1, #567	; 0x237
 800ca70:	4839      	ldr	r0, [pc, #228]	; (800cb58 <__mdiff+0x110>)
 800ca72:	f000 faa3 	bl	800cfbc <__assert_func>
 800ca76:	2301      	movs	r3, #1
 800ca78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ca7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca80:	bfa4      	itt	ge
 800ca82:	4643      	movge	r3, r8
 800ca84:	46a0      	movge	r8, r4
 800ca86:	4630      	mov	r0, r6
 800ca88:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ca8c:	bfa6      	itte	ge
 800ca8e:	461c      	movge	r4, r3
 800ca90:	2500      	movge	r5, #0
 800ca92:	2501      	movlt	r5, #1
 800ca94:	f7ff fcf6 	bl	800c484 <_Balloc>
 800ca98:	b920      	cbnz	r0, 800caa4 <__mdiff+0x5c>
 800ca9a:	4b2e      	ldr	r3, [pc, #184]	; (800cb54 <__mdiff+0x10c>)
 800ca9c:	4602      	mov	r2, r0
 800ca9e:	f240 2145 	movw	r1, #581	; 0x245
 800caa2:	e7e5      	b.n	800ca70 <__mdiff+0x28>
 800caa4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800caa8:	6926      	ldr	r6, [r4, #16]
 800caaa:	60c5      	str	r5, [r0, #12]
 800caac:	f104 0914 	add.w	r9, r4, #20
 800cab0:	f108 0514 	add.w	r5, r8, #20
 800cab4:	f100 0e14 	add.w	lr, r0, #20
 800cab8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cabc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cac0:	f108 0210 	add.w	r2, r8, #16
 800cac4:	46f2      	mov	sl, lr
 800cac6:	2100      	movs	r1, #0
 800cac8:	f859 3b04 	ldr.w	r3, [r9], #4
 800cacc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cad0:	fa11 f88b 	uxtah	r8, r1, fp
 800cad4:	b299      	uxth	r1, r3
 800cad6:	0c1b      	lsrs	r3, r3, #16
 800cad8:	eba8 0801 	sub.w	r8, r8, r1
 800cadc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cae0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cae4:	fa1f f888 	uxth.w	r8, r8
 800cae8:	1419      	asrs	r1, r3, #16
 800caea:	454e      	cmp	r6, r9
 800caec:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800caf0:	f84a 3b04 	str.w	r3, [sl], #4
 800caf4:	d8e8      	bhi.n	800cac8 <__mdiff+0x80>
 800caf6:	1b33      	subs	r3, r6, r4
 800caf8:	3b15      	subs	r3, #21
 800cafa:	f023 0303 	bic.w	r3, r3, #3
 800cafe:	3304      	adds	r3, #4
 800cb00:	3415      	adds	r4, #21
 800cb02:	42a6      	cmp	r6, r4
 800cb04:	bf38      	it	cc
 800cb06:	2304      	movcc	r3, #4
 800cb08:	441d      	add	r5, r3
 800cb0a:	4473      	add	r3, lr
 800cb0c:	469e      	mov	lr, r3
 800cb0e:	462e      	mov	r6, r5
 800cb10:	4566      	cmp	r6, ip
 800cb12:	d30e      	bcc.n	800cb32 <__mdiff+0xea>
 800cb14:	f10c 0203 	add.w	r2, ip, #3
 800cb18:	1b52      	subs	r2, r2, r5
 800cb1a:	f022 0203 	bic.w	r2, r2, #3
 800cb1e:	3d03      	subs	r5, #3
 800cb20:	45ac      	cmp	ip, r5
 800cb22:	bf38      	it	cc
 800cb24:	2200      	movcc	r2, #0
 800cb26:	4413      	add	r3, r2
 800cb28:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cb2c:	b17a      	cbz	r2, 800cb4e <__mdiff+0x106>
 800cb2e:	6107      	str	r7, [r0, #16]
 800cb30:	e7a4      	b.n	800ca7c <__mdiff+0x34>
 800cb32:	f856 8b04 	ldr.w	r8, [r6], #4
 800cb36:	fa11 f288 	uxtah	r2, r1, r8
 800cb3a:	1414      	asrs	r4, r2, #16
 800cb3c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cb40:	b292      	uxth	r2, r2
 800cb42:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cb46:	f84e 2b04 	str.w	r2, [lr], #4
 800cb4a:	1421      	asrs	r1, r4, #16
 800cb4c:	e7e0      	b.n	800cb10 <__mdiff+0xc8>
 800cb4e:	3f01      	subs	r7, #1
 800cb50:	e7ea      	b.n	800cb28 <__mdiff+0xe0>
 800cb52:	bf00      	nop
 800cb54:	0800deed 	.word	0x0800deed
 800cb58:	0800df6f 	.word	0x0800df6f

0800cb5c <__ulp>:
 800cb5c:	b082      	sub	sp, #8
 800cb5e:	ed8d 0b00 	vstr	d0, [sp]
 800cb62:	9a01      	ldr	r2, [sp, #4]
 800cb64:	4b0f      	ldr	r3, [pc, #60]	; (800cba4 <__ulp+0x48>)
 800cb66:	4013      	ands	r3, r2
 800cb68:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	dc08      	bgt.n	800cb82 <__ulp+0x26>
 800cb70:	425b      	negs	r3, r3
 800cb72:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800cb76:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cb7a:	da04      	bge.n	800cb86 <__ulp+0x2a>
 800cb7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cb80:	4113      	asrs	r3, r2
 800cb82:	2200      	movs	r2, #0
 800cb84:	e008      	b.n	800cb98 <__ulp+0x3c>
 800cb86:	f1a2 0314 	sub.w	r3, r2, #20
 800cb8a:	2b1e      	cmp	r3, #30
 800cb8c:	bfda      	itte	le
 800cb8e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800cb92:	40da      	lsrle	r2, r3
 800cb94:	2201      	movgt	r2, #1
 800cb96:	2300      	movs	r3, #0
 800cb98:	4619      	mov	r1, r3
 800cb9a:	4610      	mov	r0, r2
 800cb9c:	ec41 0b10 	vmov	d0, r0, r1
 800cba0:	b002      	add	sp, #8
 800cba2:	4770      	bx	lr
 800cba4:	7ff00000 	.word	0x7ff00000

0800cba8 <__b2d>:
 800cba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbac:	6906      	ldr	r6, [r0, #16]
 800cbae:	f100 0814 	add.w	r8, r0, #20
 800cbb2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cbb6:	1f37      	subs	r7, r6, #4
 800cbb8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cbbc:	4610      	mov	r0, r2
 800cbbe:	f7ff fd53 	bl	800c668 <__hi0bits>
 800cbc2:	f1c0 0320 	rsb	r3, r0, #32
 800cbc6:	280a      	cmp	r0, #10
 800cbc8:	600b      	str	r3, [r1, #0]
 800cbca:	491b      	ldr	r1, [pc, #108]	; (800cc38 <__b2d+0x90>)
 800cbcc:	dc15      	bgt.n	800cbfa <__b2d+0x52>
 800cbce:	f1c0 0c0b 	rsb	ip, r0, #11
 800cbd2:	fa22 f30c 	lsr.w	r3, r2, ip
 800cbd6:	45b8      	cmp	r8, r7
 800cbd8:	ea43 0501 	orr.w	r5, r3, r1
 800cbdc:	bf34      	ite	cc
 800cbde:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cbe2:	2300      	movcs	r3, #0
 800cbe4:	3015      	adds	r0, #21
 800cbe6:	fa02 f000 	lsl.w	r0, r2, r0
 800cbea:	fa23 f30c 	lsr.w	r3, r3, ip
 800cbee:	4303      	orrs	r3, r0
 800cbf0:	461c      	mov	r4, r3
 800cbf2:	ec45 4b10 	vmov	d0, r4, r5
 800cbf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbfa:	45b8      	cmp	r8, r7
 800cbfc:	bf3a      	itte	cc
 800cbfe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cc02:	f1a6 0708 	subcc.w	r7, r6, #8
 800cc06:	2300      	movcs	r3, #0
 800cc08:	380b      	subs	r0, #11
 800cc0a:	d012      	beq.n	800cc32 <__b2d+0x8a>
 800cc0c:	f1c0 0120 	rsb	r1, r0, #32
 800cc10:	fa23 f401 	lsr.w	r4, r3, r1
 800cc14:	4082      	lsls	r2, r0
 800cc16:	4322      	orrs	r2, r4
 800cc18:	4547      	cmp	r7, r8
 800cc1a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800cc1e:	bf8c      	ite	hi
 800cc20:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cc24:	2200      	movls	r2, #0
 800cc26:	4083      	lsls	r3, r0
 800cc28:	40ca      	lsrs	r2, r1
 800cc2a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cc2e:	4313      	orrs	r3, r2
 800cc30:	e7de      	b.n	800cbf0 <__b2d+0x48>
 800cc32:	ea42 0501 	orr.w	r5, r2, r1
 800cc36:	e7db      	b.n	800cbf0 <__b2d+0x48>
 800cc38:	3ff00000 	.word	0x3ff00000

0800cc3c <__d2b>:
 800cc3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc40:	460f      	mov	r7, r1
 800cc42:	2101      	movs	r1, #1
 800cc44:	ec59 8b10 	vmov	r8, r9, d0
 800cc48:	4616      	mov	r6, r2
 800cc4a:	f7ff fc1b 	bl	800c484 <_Balloc>
 800cc4e:	4604      	mov	r4, r0
 800cc50:	b930      	cbnz	r0, 800cc60 <__d2b+0x24>
 800cc52:	4602      	mov	r2, r0
 800cc54:	4b24      	ldr	r3, [pc, #144]	; (800cce8 <__d2b+0xac>)
 800cc56:	4825      	ldr	r0, [pc, #148]	; (800ccec <__d2b+0xb0>)
 800cc58:	f240 310f 	movw	r1, #783	; 0x30f
 800cc5c:	f000 f9ae 	bl	800cfbc <__assert_func>
 800cc60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cc64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc68:	bb2d      	cbnz	r5, 800ccb6 <__d2b+0x7a>
 800cc6a:	9301      	str	r3, [sp, #4]
 800cc6c:	f1b8 0300 	subs.w	r3, r8, #0
 800cc70:	d026      	beq.n	800ccc0 <__d2b+0x84>
 800cc72:	4668      	mov	r0, sp
 800cc74:	9300      	str	r3, [sp, #0]
 800cc76:	f7ff fd17 	bl	800c6a8 <__lo0bits>
 800cc7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cc7e:	b1e8      	cbz	r0, 800ccbc <__d2b+0x80>
 800cc80:	f1c0 0320 	rsb	r3, r0, #32
 800cc84:	fa02 f303 	lsl.w	r3, r2, r3
 800cc88:	430b      	orrs	r3, r1
 800cc8a:	40c2      	lsrs	r2, r0
 800cc8c:	6163      	str	r3, [r4, #20]
 800cc8e:	9201      	str	r2, [sp, #4]
 800cc90:	9b01      	ldr	r3, [sp, #4]
 800cc92:	61a3      	str	r3, [r4, #24]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	bf14      	ite	ne
 800cc98:	2202      	movne	r2, #2
 800cc9a:	2201      	moveq	r2, #1
 800cc9c:	6122      	str	r2, [r4, #16]
 800cc9e:	b1bd      	cbz	r5, 800ccd0 <__d2b+0x94>
 800cca0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cca4:	4405      	add	r5, r0
 800cca6:	603d      	str	r5, [r7, #0]
 800cca8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ccac:	6030      	str	r0, [r6, #0]
 800ccae:	4620      	mov	r0, r4
 800ccb0:	b003      	add	sp, #12
 800ccb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ccba:	e7d6      	b.n	800cc6a <__d2b+0x2e>
 800ccbc:	6161      	str	r1, [r4, #20]
 800ccbe:	e7e7      	b.n	800cc90 <__d2b+0x54>
 800ccc0:	a801      	add	r0, sp, #4
 800ccc2:	f7ff fcf1 	bl	800c6a8 <__lo0bits>
 800ccc6:	9b01      	ldr	r3, [sp, #4]
 800ccc8:	6163      	str	r3, [r4, #20]
 800ccca:	3020      	adds	r0, #32
 800cccc:	2201      	movs	r2, #1
 800ccce:	e7e5      	b.n	800cc9c <__d2b+0x60>
 800ccd0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ccd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ccd8:	6038      	str	r0, [r7, #0]
 800ccda:	6918      	ldr	r0, [r3, #16]
 800ccdc:	f7ff fcc4 	bl	800c668 <__hi0bits>
 800cce0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cce4:	e7e2      	b.n	800ccac <__d2b+0x70>
 800cce6:	bf00      	nop
 800cce8:	0800deed 	.word	0x0800deed
 800ccec:	0800df6f 	.word	0x0800df6f

0800ccf0 <__ratio>:
 800ccf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf4:	4688      	mov	r8, r1
 800ccf6:	4669      	mov	r1, sp
 800ccf8:	4681      	mov	r9, r0
 800ccfa:	f7ff ff55 	bl	800cba8 <__b2d>
 800ccfe:	a901      	add	r1, sp, #4
 800cd00:	4640      	mov	r0, r8
 800cd02:	ec55 4b10 	vmov	r4, r5, d0
 800cd06:	f7ff ff4f 	bl	800cba8 <__b2d>
 800cd0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd0e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cd12:	eba3 0c02 	sub.w	ip, r3, r2
 800cd16:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cd1a:	1a9b      	subs	r3, r3, r2
 800cd1c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cd20:	ec51 0b10 	vmov	r0, r1, d0
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	bfd6      	itet	le
 800cd28:	460a      	movle	r2, r1
 800cd2a:	462a      	movgt	r2, r5
 800cd2c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cd30:	468b      	mov	fp, r1
 800cd32:	462f      	mov	r7, r5
 800cd34:	bfd4      	ite	le
 800cd36:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cd3a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cd3e:	4620      	mov	r0, r4
 800cd40:	ee10 2a10 	vmov	r2, s0
 800cd44:	465b      	mov	r3, fp
 800cd46:	4639      	mov	r1, r7
 800cd48:	f7f3 fd88 	bl	800085c <__aeabi_ddiv>
 800cd4c:	ec41 0b10 	vmov	d0, r0, r1
 800cd50:	b003      	add	sp, #12
 800cd52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cd56 <__copybits>:
 800cd56:	3901      	subs	r1, #1
 800cd58:	b570      	push	{r4, r5, r6, lr}
 800cd5a:	1149      	asrs	r1, r1, #5
 800cd5c:	6914      	ldr	r4, [r2, #16]
 800cd5e:	3101      	adds	r1, #1
 800cd60:	f102 0314 	add.w	r3, r2, #20
 800cd64:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cd68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cd6c:	1f05      	subs	r5, r0, #4
 800cd6e:	42a3      	cmp	r3, r4
 800cd70:	d30c      	bcc.n	800cd8c <__copybits+0x36>
 800cd72:	1aa3      	subs	r3, r4, r2
 800cd74:	3b11      	subs	r3, #17
 800cd76:	f023 0303 	bic.w	r3, r3, #3
 800cd7a:	3211      	adds	r2, #17
 800cd7c:	42a2      	cmp	r2, r4
 800cd7e:	bf88      	it	hi
 800cd80:	2300      	movhi	r3, #0
 800cd82:	4418      	add	r0, r3
 800cd84:	2300      	movs	r3, #0
 800cd86:	4288      	cmp	r0, r1
 800cd88:	d305      	bcc.n	800cd96 <__copybits+0x40>
 800cd8a:	bd70      	pop	{r4, r5, r6, pc}
 800cd8c:	f853 6b04 	ldr.w	r6, [r3], #4
 800cd90:	f845 6f04 	str.w	r6, [r5, #4]!
 800cd94:	e7eb      	b.n	800cd6e <__copybits+0x18>
 800cd96:	f840 3b04 	str.w	r3, [r0], #4
 800cd9a:	e7f4      	b.n	800cd86 <__copybits+0x30>

0800cd9c <__any_on>:
 800cd9c:	f100 0214 	add.w	r2, r0, #20
 800cda0:	6900      	ldr	r0, [r0, #16]
 800cda2:	114b      	asrs	r3, r1, #5
 800cda4:	4298      	cmp	r0, r3
 800cda6:	b510      	push	{r4, lr}
 800cda8:	db11      	blt.n	800cdce <__any_on+0x32>
 800cdaa:	dd0a      	ble.n	800cdc2 <__any_on+0x26>
 800cdac:	f011 011f 	ands.w	r1, r1, #31
 800cdb0:	d007      	beq.n	800cdc2 <__any_on+0x26>
 800cdb2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cdb6:	fa24 f001 	lsr.w	r0, r4, r1
 800cdba:	fa00 f101 	lsl.w	r1, r0, r1
 800cdbe:	428c      	cmp	r4, r1
 800cdc0:	d10b      	bne.n	800cdda <__any_on+0x3e>
 800cdc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d803      	bhi.n	800cdd2 <__any_on+0x36>
 800cdca:	2000      	movs	r0, #0
 800cdcc:	bd10      	pop	{r4, pc}
 800cdce:	4603      	mov	r3, r0
 800cdd0:	e7f7      	b.n	800cdc2 <__any_on+0x26>
 800cdd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cdd6:	2900      	cmp	r1, #0
 800cdd8:	d0f5      	beq.n	800cdc6 <__any_on+0x2a>
 800cdda:	2001      	movs	r0, #1
 800cddc:	e7f6      	b.n	800cdcc <__any_on+0x30>

0800cdde <__sread>:
 800cdde:	b510      	push	{r4, lr}
 800cde0:	460c      	mov	r4, r1
 800cde2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cde6:	f000 f8b5 	bl	800cf54 <_read_r>
 800cdea:	2800      	cmp	r0, #0
 800cdec:	bfab      	itete	ge
 800cdee:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cdf0:	89a3      	ldrhlt	r3, [r4, #12]
 800cdf2:	181b      	addge	r3, r3, r0
 800cdf4:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cdf8:	bfac      	ite	ge
 800cdfa:	6563      	strge	r3, [r4, #84]	; 0x54
 800cdfc:	81a3      	strhlt	r3, [r4, #12]
 800cdfe:	bd10      	pop	{r4, pc}

0800ce00 <__swrite>:
 800ce00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce04:	461f      	mov	r7, r3
 800ce06:	898b      	ldrh	r3, [r1, #12]
 800ce08:	05db      	lsls	r3, r3, #23
 800ce0a:	4605      	mov	r5, r0
 800ce0c:	460c      	mov	r4, r1
 800ce0e:	4616      	mov	r6, r2
 800ce10:	d505      	bpl.n	800ce1e <__swrite+0x1e>
 800ce12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce16:	2302      	movs	r3, #2
 800ce18:	2200      	movs	r2, #0
 800ce1a:	f000 f889 	bl	800cf30 <_lseek_r>
 800ce1e:	89a3      	ldrh	r3, [r4, #12]
 800ce20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce28:	81a3      	strh	r3, [r4, #12]
 800ce2a:	4632      	mov	r2, r6
 800ce2c:	463b      	mov	r3, r7
 800ce2e:	4628      	mov	r0, r5
 800ce30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce34:	f000 b8b0 	b.w	800cf98 <_write_r>

0800ce38 <__sseek>:
 800ce38:	b510      	push	{r4, lr}
 800ce3a:	460c      	mov	r4, r1
 800ce3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce40:	f000 f876 	bl	800cf30 <_lseek_r>
 800ce44:	1c43      	adds	r3, r0, #1
 800ce46:	89a3      	ldrh	r3, [r4, #12]
 800ce48:	bf15      	itete	ne
 800ce4a:	6560      	strne	r0, [r4, #84]	; 0x54
 800ce4c:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ce50:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ce54:	81a3      	strheq	r3, [r4, #12]
 800ce56:	bf18      	it	ne
 800ce58:	81a3      	strhne	r3, [r4, #12]
 800ce5a:	bd10      	pop	{r4, pc}

0800ce5c <__sclose>:
 800ce5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce60:	f000 b856 	b.w	800cf10 <_close_r>

0800ce64 <_realloc_r>:
 800ce64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce68:	4680      	mov	r8, r0
 800ce6a:	4614      	mov	r4, r2
 800ce6c:	460e      	mov	r6, r1
 800ce6e:	b921      	cbnz	r1, 800ce7a <_realloc_r+0x16>
 800ce70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce74:	4611      	mov	r1, r2
 800ce76:	f7ff b9b9 	b.w	800c1ec <_malloc_r>
 800ce7a:	b92a      	cbnz	r2, 800ce88 <_realloc_r+0x24>
 800ce7c:	f000 f8d2 	bl	800d024 <_free_r>
 800ce80:	4625      	mov	r5, r4
 800ce82:	4628      	mov	r0, r5
 800ce84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce88:	f000 f918 	bl	800d0bc <_malloc_usable_size_r>
 800ce8c:	4284      	cmp	r4, r0
 800ce8e:	4607      	mov	r7, r0
 800ce90:	d802      	bhi.n	800ce98 <_realloc_r+0x34>
 800ce92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ce96:	d812      	bhi.n	800cebe <_realloc_r+0x5a>
 800ce98:	4621      	mov	r1, r4
 800ce9a:	4640      	mov	r0, r8
 800ce9c:	f7ff f9a6 	bl	800c1ec <_malloc_r>
 800cea0:	4605      	mov	r5, r0
 800cea2:	2800      	cmp	r0, #0
 800cea4:	d0ed      	beq.n	800ce82 <_realloc_r+0x1e>
 800cea6:	42bc      	cmp	r4, r7
 800cea8:	4622      	mov	r2, r4
 800ceaa:	4631      	mov	r1, r6
 800ceac:	bf28      	it	cs
 800ceae:	463a      	movcs	r2, r7
 800ceb0:	f7fd fe29 	bl	800ab06 <memcpy>
 800ceb4:	4631      	mov	r1, r6
 800ceb6:	4640      	mov	r0, r8
 800ceb8:	f000 f8b4 	bl	800d024 <_free_r>
 800cebc:	e7e1      	b.n	800ce82 <_realloc_r+0x1e>
 800cebe:	4635      	mov	r5, r6
 800cec0:	e7df      	b.n	800ce82 <_realloc_r+0x1e>

0800cec2 <__ascii_wctomb>:
 800cec2:	b149      	cbz	r1, 800ced8 <__ascii_wctomb+0x16>
 800cec4:	2aff      	cmp	r2, #255	; 0xff
 800cec6:	bf85      	ittet	hi
 800cec8:	238a      	movhi	r3, #138	; 0x8a
 800ceca:	6003      	strhi	r3, [r0, #0]
 800cecc:	700a      	strbls	r2, [r1, #0]
 800cece:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ced2:	bf98      	it	ls
 800ced4:	2001      	movls	r0, #1
 800ced6:	4770      	bx	lr
 800ced8:	4608      	mov	r0, r1
 800ceda:	4770      	bx	lr

0800cedc <memmove>:
 800cedc:	4288      	cmp	r0, r1
 800cede:	b510      	push	{r4, lr}
 800cee0:	eb01 0402 	add.w	r4, r1, r2
 800cee4:	d902      	bls.n	800ceec <memmove+0x10>
 800cee6:	4284      	cmp	r4, r0
 800cee8:	4623      	mov	r3, r4
 800ceea:	d807      	bhi.n	800cefc <memmove+0x20>
 800ceec:	1e43      	subs	r3, r0, #1
 800ceee:	42a1      	cmp	r1, r4
 800cef0:	d008      	beq.n	800cf04 <memmove+0x28>
 800cef2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cef6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cefa:	e7f8      	b.n	800ceee <memmove+0x12>
 800cefc:	4402      	add	r2, r0
 800cefe:	4601      	mov	r1, r0
 800cf00:	428a      	cmp	r2, r1
 800cf02:	d100      	bne.n	800cf06 <memmove+0x2a>
 800cf04:	bd10      	pop	{r4, pc}
 800cf06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf0e:	e7f7      	b.n	800cf00 <memmove+0x24>

0800cf10 <_close_r>:
 800cf10:	b538      	push	{r3, r4, r5, lr}
 800cf12:	4d06      	ldr	r5, [pc, #24]	; (800cf2c <_close_r+0x1c>)
 800cf14:	2300      	movs	r3, #0
 800cf16:	4604      	mov	r4, r0
 800cf18:	4608      	mov	r0, r1
 800cf1a:	602b      	str	r3, [r5, #0]
 800cf1c:	f7f7 ff45 	bl	8004daa <_close>
 800cf20:	1c43      	adds	r3, r0, #1
 800cf22:	d102      	bne.n	800cf2a <_close_r+0x1a>
 800cf24:	682b      	ldr	r3, [r5, #0]
 800cf26:	b103      	cbz	r3, 800cf2a <_close_r+0x1a>
 800cf28:	6023      	str	r3, [r4, #0]
 800cf2a:	bd38      	pop	{r3, r4, r5, pc}
 800cf2c:	20000910 	.word	0x20000910

0800cf30 <_lseek_r>:
 800cf30:	b538      	push	{r3, r4, r5, lr}
 800cf32:	4d07      	ldr	r5, [pc, #28]	; (800cf50 <_lseek_r+0x20>)
 800cf34:	4604      	mov	r4, r0
 800cf36:	4608      	mov	r0, r1
 800cf38:	4611      	mov	r1, r2
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	602a      	str	r2, [r5, #0]
 800cf3e:	461a      	mov	r2, r3
 800cf40:	f7f7 ff5a 	bl	8004df8 <_lseek>
 800cf44:	1c43      	adds	r3, r0, #1
 800cf46:	d102      	bne.n	800cf4e <_lseek_r+0x1e>
 800cf48:	682b      	ldr	r3, [r5, #0]
 800cf4a:	b103      	cbz	r3, 800cf4e <_lseek_r+0x1e>
 800cf4c:	6023      	str	r3, [r4, #0]
 800cf4e:	bd38      	pop	{r3, r4, r5, pc}
 800cf50:	20000910 	.word	0x20000910

0800cf54 <_read_r>:
 800cf54:	b538      	push	{r3, r4, r5, lr}
 800cf56:	4d07      	ldr	r5, [pc, #28]	; (800cf74 <_read_r+0x20>)
 800cf58:	4604      	mov	r4, r0
 800cf5a:	4608      	mov	r0, r1
 800cf5c:	4611      	mov	r1, r2
 800cf5e:	2200      	movs	r2, #0
 800cf60:	602a      	str	r2, [r5, #0]
 800cf62:	461a      	mov	r2, r3
 800cf64:	f7f7 fee8 	bl	8004d38 <_read>
 800cf68:	1c43      	adds	r3, r0, #1
 800cf6a:	d102      	bne.n	800cf72 <_read_r+0x1e>
 800cf6c:	682b      	ldr	r3, [r5, #0]
 800cf6e:	b103      	cbz	r3, 800cf72 <_read_r+0x1e>
 800cf70:	6023      	str	r3, [r4, #0]
 800cf72:	bd38      	pop	{r3, r4, r5, pc}
 800cf74:	20000910 	.word	0x20000910

0800cf78 <_sbrk_r>:
 800cf78:	b538      	push	{r3, r4, r5, lr}
 800cf7a:	4d06      	ldr	r5, [pc, #24]	; (800cf94 <_sbrk_r+0x1c>)
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	4604      	mov	r4, r0
 800cf80:	4608      	mov	r0, r1
 800cf82:	602b      	str	r3, [r5, #0]
 800cf84:	f7f7 ff46 	bl	8004e14 <_sbrk>
 800cf88:	1c43      	adds	r3, r0, #1
 800cf8a:	d102      	bne.n	800cf92 <_sbrk_r+0x1a>
 800cf8c:	682b      	ldr	r3, [r5, #0]
 800cf8e:	b103      	cbz	r3, 800cf92 <_sbrk_r+0x1a>
 800cf90:	6023      	str	r3, [r4, #0]
 800cf92:	bd38      	pop	{r3, r4, r5, pc}
 800cf94:	20000910 	.word	0x20000910

0800cf98 <_write_r>:
 800cf98:	b538      	push	{r3, r4, r5, lr}
 800cf9a:	4d07      	ldr	r5, [pc, #28]	; (800cfb8 <_write_r+0x20>)
 800cf9c:	4604      	mov	r4, r0
 800cf9e:	4608      	mov	r0, r1
 800cfa0:	4611      	mov	r1, r2
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	602a      	str	r2, [r5, #0]
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	f7f7 fee3 	bl	8004d72 <_write>
 800cfac:	1c43      	adds	r3, r0, #1
 800cfae:	d102      	bne.n	800cfb6 <_write_r+0x1e>
 800cfb0:	682b      	ldr	r3, [r5, #0]
 800cfb2:	b103      	cbz	r3, 800cfb6 <_write_r+0x1e>
 800cfb4:	6023      	str	r3, [r4, #0]
 800cfb6:	bd38      	pop	{r3, r4, r5, pc}
 800cfb8:	20000910 	.word	0x20000910

0800cfbc <__assert_func>:
 800cfbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cfbe:	4614      	mov	r4, r2
 800cfc0:	461a      	mov	r2, r3
 800cfc2:	4b09      	ldr	r3, [pc, #36]	; (800cfe8 <__assert_func+0x2c>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	4605      	mov	r5, r0
 800cfc8:	68d8      	ldr	r0, [r3, #12]
 800cfca:	b14c      	cbz	r4, 800cfe0 <__assert_func+0x24>
 800cfcc:	4b07      	ldr	r3, [pc, #28]	; (800cfec <__assert_func+0x30>)
 800cfce:	9100      	str	r1, [sp, #0]
 800cfd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cfd4:	4906      	ldr	r1, [pc, #24]	; (800cff0 <__assert_func+0x34>)
 800cfd6:	462b      	mov	r3, r5
 800cfd8:	f000 f878 	bl	800d0cc <fiprintf>
 800cfdc:	f000 f888 	bl	800d0f0 <abort>
 800cfe0:	4b04      	ldr	r3, [pc, #16]	; (800cff4 <__assert_func+0x38>)
 800cfe2:	461c      	mov	r4, r3
 800cfe4:	e7f3      	b.n	800cfce <__assert_func+0x12>
 800cfe6:	bf00      	nop
 800cfe8:	2000023c 	.word	0x2000023c
 800cfec:	0800e0c4 	.word	0x0800e0c4
 800cff0:	0800e0d1 	.word	0x0800e0d1
 800cff4:	0800e0ff 	.word	0x0800e0ff

0800cff8 <_calloc_r>:
 800cff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cffa:	fba1 2402 	umull	r2, r4, r1, r2
 800cffe:	b94c      	cbnz	r4, 800d014 <_calloc_r+0x1c>
 800d000:	4611      	mov	r1, r2
 800d002:	9201      	str	r2, [sp, #4]
 800d004:	f7ff f8f2 	bl	800c1ec <_malloc_r>
 800d008:	9a01      	ldr	r2, [sp, #4]
 800d00a:	4605      	mov	r5, r0
 800d00c:	b930      	cbnz	r0, 800d01c <_calloc_r+0x24>
 800d00e:	4628      	mov	r0, r5
 800d010:	b003      	add	sp, #12
 800d012:	bd30      	pop	{r4, r5, pc}
 800d014:	220c      	movs	r2, #12
 800d016:	6002      	str	r2, [r0, #0]
 800d018:	2500      	movs	r5, #0
 800d01a:	e7f8      	b.n	800d00e <_calloc_r+0x16>
 800d01c:	4621      	mov	r1, r4
 800d01e:	f7fd fd38 	bl	800aa92 <memset>
 800d022:	e7f4      	b.n	800d00e <_calloc_r+0x16>

0800d024 <_free_r>:
 800d024:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d026:	2900      	cmp	r1, #0
 800d028:	d044      	beq.n	800d0b4 <_free_r+0x90>
 800d02a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d02e:	9001      	str	r0, [sp, #4]
 800d030:	2b00      	cmp	r3, #0
 800d032:	f1a1 0404 	sub.w	r4, r1, #4
 800d036:	bfb8      	it	lt
 800d038:	18e4      	addlt	r4, r4, r3
 800d03a:	f7ff fa17 	bl	800c46c <__malloc_lock>
 800d03e:	4a1e      	ldr	r2, [pc, #120]	; (800d0b8 <_free_r+0x94>)
 800d040:	9801      	ldr	r0, [sp, #4]
 800d042:	6813      	ldr	r3, [r2, #0]
 800d044:	b933      	cbnz	r3, 800d054 <_free_r+0x30>
 800d046:	6063      	str	r3, [r4, #4]
 800d048:	6014      	str	r4, [r2, #0]
 800d04a:	b003      	add	sp, #12
 800d04c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d050:	f7ff ba12 	b.w	800c478 <__malloc_unlock>
 800d054:	42a3      	cmp	r3, r4
 800d056:	d908      	bls.n	800d06a <_free_r+0x46>
 800d058:	6825      	ldr	r5, [r4, #0]
 800d05a:	1961      	adds	r1, r4, r5
 800d05c:	428b      	cmp	r3, r1
 800d05e:	bf01      	itttt	eq
 800d060:	6819      	ldreq	r1, [r3, #0]
 800d062:	685b      	ldreq	r3, [r3, #4]
 800d064:	1949      	addeq	r1, r1, r5
 800d066:	6021      	streq	r1, [r4, #0]
 800d068:	e7ed      	b.n	800d046 <_free_r+0x22>
 800d06a:	461a      	mov	r2, r3
 800d06c:	685b      	ldr	r3, [r3, #4]
 800d06e:	b10b      	cbz	r3, 800d074 <_free_r+0x50>
 800d070:	42a3      	cmp	r3, r4
 800d072:	d9fa      	bls.n	800d06a <_free_r+0x46>
 800d074:	6811      	ldr	r1, [r2, #0]
 800d076:	1855      	adds	r5, r2, r1
 800d078:	42a5      	cmp	r5, r4
 800d07a:	d10b      	bne.n	800d094 <_free_r+0x70>
 800d07c:	6824      	ldr	r4, [r4, #0]
 800d07e:	4421      	add	r1, r4
 800d080:	1854      	adds	r4, r2, r1
 800d082:	42a3      	cmp	r3, r4
 800d084:	6011      	str	r1, [r2, #0]
 800d086:	d1e0      	bne.n	800d04a <_free_r+0x26>
 800d088:	681c      	ldr	r4, [r3, #0]
 800d08a:	685b      	ldr	r3, [r3, #4]
 800d08c:	6053      	str	r3, [r2, #4]
 800d08e:	440c      	add	r4, r1
 800d090:	6014      	str	r4, [r2, #0]
 800d092:	e7da      	b.n	800d04a <_free_r+0x26>
 800d094:	d902      	bls.n	800d09c <_free_r+0x78>
 800d096:	230c      	movs	r3, #12
 800d098:	6003      	str	r3, [r0, #0]
 800d09a:	e7d6      	b.n	800d04a <_free_r+0x26>
 800d09c:	6825      	ldr	r5, [r4, #0]
 800d09e:	1961      	adds	r1, r4, r5
 800d0a0:	428b      	cmp	r3, r1
 800d0a2:	bf04      	itt	eq
 800d0a4:	6819      	ldreq	r1, [r3, #0]
 800d0a6:	685b      	ldreq	r3, [r3, #4]
 800d0a8:	6063      	str	r3, [r4, #4]
 800d0aa:	bf04      	itt	eq
 800d0ac:	1949      	addeq	r1, r1, r5
 800d0ae:	6021      	streq	r1, [r4, #0]
 800d0b0:	6054      	str	r4, [r2, #4]
 800d0b2:	e7ca      	b.n	800d04a <_free_r+0x26>
 800d0b4:	b003      	add	sp, #12
 800d0b6:	bd30      	pop	{r4, r5, pc}
 800d0b8:	20000908 	.word	0x20000908

0800d0bc <_malloc_usable_size_r>:
 800d0bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0c0:	1f18      	subs	r0, r3, #4
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	bfbc      	itt	lt
 800d0c6:	580b      	ldrlt	r3, [r1, r0]
 800d0c8:	18c0      	addlt	r0, r0, r3
 800d0ca:	4770      	bx	lr

0800d0cc <fiprintf>:
 800d0cc:	b40e      	push	{r1, r2, r3}
 800d0ce:	b503      	push	{r0, r1, lr}
 800d0d0:	4601      	mov	r1, r0
 800d0d2:	ab03      	add	r3, sp, #12
 800d0d4:	4805      	ldr	r0, [pc, #20]	; (800d0ec <fiprintf+0x20>)
 800d0d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0da:	6800      	ldr	r0, [r0, #0]
 800d0dc:	9301      	str	r3, [sp, #4]
 800d0de:	f000 f837 	bl	800d150 <_vfiprintf_r>
 800d0e2:	b002      	add	sp, #8
 800d0e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0e8:	b003      	add	sp, #12
 800d0ea:	4770      	bx	lr
 800d0ec:	2000023c 	.word	0x2000023c

0800d0f0 <abort>:
 800d0f0:	b508      	push	{r3, lr}
 800d0f2:	2006      	movs	r0, #6
 800d0f4:	f000 fa88 	bl	800d608 <raise>
 800d0f8:	2001      	movs	r0, #1
 800d0fa:	f7f7 fe13 	bl	8004d24 <_exit>

0800d0fe <__sfputc_r>:
 800d0fe:	6893      	ldr	r3, [r2, #8]
 800d100:	3b01      	subs	r3, #1
 800d102:	2b00      	cmp	r3, #0
 800d104:	b410      	push	{r4}
 800d106:	6093      	str	r3, [r2, #8]
 800d108:	da08      	bge.n	800d11c <__sfputc_r+0x1e>
 800d10a:	6994      	ldr	r4, [r2, #24]
 800d10c:	42a3      	cmp	r3, r4
 800d10e:	db01      	blt.n	800d114 <__sfputc_r+0x16>
 800d110:	290a      	cmp	r1, #10
 800d112:	d103      	bne.n	800d11c <__sfputc_r+0x1e>
 800d114:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d118:	f000 b934 	b.w	800d384 <__swbuf_r>
 800d11c:	6813      	ldr	r3, [r2, #0]
 800d11e:	1c58      	adds	r0, r3, #1
 800d120:	6010      	str	r0, [r2, #0]
 800d122:	7019      	strb	r1, [r3, #0]
 800d124:	4608      	mov	r0, r1
 800d126:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d12a:	4770      	bx	lr

0800d12c <__sfputs_r>:
 800d12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d12e:	4606      	mov	r6, r0
 800d130:	460f      	mov	r7, r1
 800d132:	4614      	mov	r4, r2
 800d134:	18d5      	adds	r5, r2, r3
 800d136:	42ac      	cmp	r4, r5
 800d138:	d101      	bne.n	800d13e <__sfputs_r+0x12>
 800d13a:	2000      	movs	r0, #0
 800d13c:	e007      	b.n	800d14e <__sfputs_r+0x22>
 800d13e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d142:	463a      	mov	r2, r7
 800d144:	4630      	mov	r0, r6
 800d146:	f7ff ffda 	bl	800d0fe <__sfputc_r>
 800d14a:	1c43      	adds	r3, r0, #1
 800d14c:	d1f3      	bne.n	800d136 <__sfputs_r+0xa>
 800d14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d150 <_vfiprintf_r>:
 800d150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d154:	460d      	mov	r5, r1
 800d156:	b09d      	sub	sp, #116	; 0x74
 800d158:	4614      	mov	r4, r2
 800d15a:	4698      	mov	r8, r3
 800d15c:	4606      	mov	r6, r0
 800d15e:	b118      	cbz	r0, 800d168 <_vfiprintf_r+0x18>
 800d160:	6a03      	ldr	r3, [r0, #32]
 800d162:	b90b      	cbnz	r3, 800d168 <_vfiprintf_r+0x18>
 800d164:	f7fc fd32 	bl	8009bcc <__sinit>
 800d168:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d16a:	07d9      	lsls	r1, r3, #31
 800d16c:	d405      	bmi.n	800d17a <_vfiprintf_r+0x2a>
 800d16e:	89ab      	ldrh	r3, [r5, #12]
 800d170:	059a      	lsls	r2, r3, #22
 800d172:	d402      	bmi.n	800d17a <_vfiprintf_r+0x2a>
 800d174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d176:	f7fd fcc4 	bl	800ab02 <__retarget_lock_acquire_recursive>
 800d17a:	89ab      	ldrh	r3, [r5, #12]
 800d17c:	071b      	lsls	r3, r3, #28
 800d17e:	d501      	bpl.n	800d184 <_vfiprintf_r+0x34>
 800d180:	692b      	ldr	r3, [r5, #16]
 800d182:	b99b      	cbnz	r3, 800d1ac <_vfiprintf_r+0x5c>
 800d184:	4629      	mov	r1, r5
 800d186:	4630      	mov	r0, r6
 800d188:	f000 f93a 	bl	800d400 <__swsetup_r>
 800d18c:	b170      	cbz	r0, 800d1ac <_vfiprintf_r+0x5c>
 800d18e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d190:	07dc      	lsls	r4, r3, #31
 800d192:	d504      	bpl.n	800d19e <_vfiprintf_r+0x4e>
 800d194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d198:	b01d      	add	sp, #116	; 0x74
 800d19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d19e:	89ab      	ldrh	r3, [r5, #12]
 800d1a0:	0598      	lsls	r0, r3, #22
 800d1a2:	d4f7      	bmi.n	800d194 <_vfiprintf_r+0x44>
 800d1a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1a6:	f7fd fcad 	bl	800ab04 <__retarget_lock_release_recursive>
 800d1aa:	e7f3      	b.n	800d194 <_vfiprintf_r+0x44>
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	9309      	str	r3, [sp, #36]	; 0x24
 800d1b0:	2320      	movs	r3, #32
 800d1b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1ba:	2330      	movs	r3, #48	; 0x30
 800d1bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d370 <_vfiprintf_r+0x220>
 800d1c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1c4:	f04f 0901 	mov.w	r9, #1
 800d1c8:	4623      	mov	r3, r4
 800d1ca:	469a      	mov	sl, r3
 800d1cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1d0:	b10a      	cbz	r2, 800d1d6 <_vfiprintf_r+0x86>
 800d1d2:	2a25      	cmp	r2, #37	; 0x25
 800d1d4:	d1f9      	bne.n	800d1ca <_vfiprintf_r+0x7a>
 800d1d6:	ebba 0b04 	subs.w	fp, sl, r4
 800d1da:	d00b      	beq.n	800d1f4 <_vfiprintf_r+0xa4>
 800d1dc:	465b      	mov	r3, fp
 800d1de:	4622      	mov	r2, r4
 800d1e0:	4629      	mov	r1, r5
 800d1e2:	4630      	mov	r0, r6
 800d1e4:	f7ff ffa2 	bl	800d12c <__sfputs_r>
 800d1e8:	3001      	adds	r0, #1
 800d1ea:	f000 80a9 	beq.w	800d340 <_vfiprintf_r+0x1f0>
 800d1ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1f0:	445a      	add	r2, fp
 800d1f2:	9209      	str	r2, [sp, #36]	; 0x24
 800d1f4:	f89a 3000 	ldrb.w	r3, [sl]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	f000 80a1 	beq.w	800d340 <_vfiprintf_r+0x1f0>
 800d1fe:	2300      	movs	r3, #0
 800d200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d204:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d208:	f10a 0a01 	add.w	sl, sl, #1
 800d20c:	9304      	str	r3, [sp, #16]
 800d20e:	9307      	str	r3, [sp, #28]
 800d210:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d214:	931a      	str	r3, [sp, #104]	; 0x68
 800d216:	4654      	mov	r4, sl
 800d218:	2205      	movs	r2, #5
 800d21a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d21e:	4854      	ldr	r0, [pc, #336]	; (800d370 <_vfiprintf_r+0x220>)
 800d220:	f7f2 ffde 	bl	80001e0 <memchr>
 800d224:	9a04      	ldr	r2, [sp, #16]
 800d226:	b9d8      	cbnz	r0, 800d260 <_vfiprintf_r+0x110>
 800d228:	06d1      	lsls	r1, r2, #27
 800d22a:	bf44      	itt	mi
 800d22c:	2320      	movmi	r3, #32
 800d22e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d232:	0713      	lsls	r3, r2, #28
 800d234:	bf44      	itt	mi
 800d236:	232b      	movmi	r3, #43	; 0x2b
 800d238:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d23c:	f89a 3000 	ldrb.w	r3, [sl]
 800d240:	2b2a      	cmp	r3, #42	; 0x2a
 800d242:	d015      	beq.n	800d270 <_vfiprintf_r+0x120>
 800d244:	9a07      	ldr	r2, [sp, #28]
 800d246:	4654      	mov	r4, sl
 800d248:	2000      	movs	r0, #0
 800d24a:	f04f 0c0a 	mov.w	ip, #10
 800d24e:	4621      	mov	r1, r4
 800d250:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d254:	3b30      	subs	r3, #48	; 0x30
 800d256:	2b09      	cmp	r3, #9
 800d258:	d94d      	bls.n	800d2f6 <_vfiprintf_r+0x1a6>
 800d25a:	b1b0      	cbz	r0, 800d28a <_vfiprintf_r+0x13a>
 800d25c:	9207      	str	r2, [sp, #28]
 800d25e:	e014      	b.n	800d28a <_vfiprintf_r+0x13a>
 800d260:	eba0 0308 	sub.w	r3, r0, r8
 800d264:	fa09 f303 	lsl.w	r3, r9, r3
 800d268:	4313      	orrs	r3, r2
 800d26a:	9304      	str	r3, [sp, #16]
 800d26c:	46a2      	mov	sl, r4
 800d26e:	e7d2      	b.n	800d216 <_vfiprintf_r+0xc6>
 800d270:	9b03      	ldr	r3, [sp, #12]
 800d272:	1d19      	adds	r1, r3, #4
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	9103      	str	r1, [sp, #12]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	bfbb      	ittet	lt
 800d27c:	425b      	neglt	r3, r3
 800d27e:	f042 0202 	orrlt.w	r2, r2, #2
 800d282:	9307      	strge	r3, [sp, #28]
 800d284:	9307      	strlt	r3, [sp, #28]
 800d286:	bfb8      	it	lt
 800d288:	9204      	strlt	r2, [sp, #16]
 800d28a:	7823      	ldrb	r3, [r4, #0]
 800d28c:	2b2e      	cmp	r3, #46	; 0x2e
 800d28e:	d10c      	bne.n	800d2aa <_vfiprintf_r+0x15a>
 800d290:	7863      	ldrb	r3, [r4, #1]
 800d292:	2b2a      	cmp	r3, #42	; 0x2a
 800d294:	d134      	bne.n	800d300 <_vfiprintf_r+0x1b0>
 800d296:	9b03      	ldr	r3, [sp, #12]
 800d298:	1d1a      	adds	r2, r3, #4
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	9203      	str	r2, [sp, #12]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	bfb8      	it	lt
 800d2a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d2a6:	3402      	adds	r4, #2
 800d2a8:	9305      	str	r3, [sp, #20]
 800d2aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d380 <_vfiprintf_r+0x230>
 800d2ae:	7821      	ldrb	r1, [r4, #0]
 800d2b0:	2203      	movs	r2, #3
 800d2b2:	4650      	mov	r0, sl
 800d2b4:	f7f2 ff94 	bl	80001e0 <memchr>
 800d2b8:	b138      	cbz	r0, 800d2ca <_vfiprintf_r+0x17a>
 800d2ba:	9b04      	ldr	r3, [sp, #16]
 800d2bc:	eba0 000a 	sub.w	r0, r0, sl
 800d2c0:	2240      	movs	r2, #64	; 0x40
 800d2c2:	4082      	lsls	r2, r0
 800d2c4:	4313      	orrs	r3, r2
 800d2c6:	3401      	adds	r4, #1
 800d2c8:	9304      	str	r3, [sp, #16]
 800d2ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2ce:	4829      	ldr	r0, [pc, #164]	; (800d374 <_vfiprintf_r+0x224>)
 800d2d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2d4:	2206      	movs	r2, #6
 800d2d6:	f7f2 ff83 	bl	80001e0 <memchr>
 800d2da:	2800      	cmp	r0, #0
 800d2dc:	d03f      	beq.n	800d35e <_vfiprintf_r+0x20e>
 800d2de:	4b26      	ldr	r3, [pc, #152]	; (800d378 <_vfiprintf_r+0x228>)
 800d2e0:	bb1b      	cbnz	r3, 800d32a <_vfiprintf_r+0x1da>
 800d2e2:	9b03      	ldr	r3, [sp, #12]
 800d2e4:	3307      	adds	r3, #7
 800d2e6:	f023 0307 	bic.w	r3, r3, #7
 800d2ea:	3308      	adds	r3, #8
 800d2ec:	9303      	str	r3, [sp, #12]
 800d2ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2f0:	443b      	add	r3, r7
 800d2f2:	9309      	str	r3, [sp, #36]	; 0x24
 800d2f4:	e768      	b.n	800d1c8 <_vfiprintf_r+0x78>
 800d2f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2fa:	460c      	mov	r4, r1
 800d2fc:	2001      	movs	r0, #1
 800d2fe:	e7a6      	b.n	800d24e <_vfiprintf_r+0xfe>
 800d300:	2300      	movs	r3, #0
 800d302:	3401      	adds	r4, #1
 800d304:	9305      	str	r3, [sp, #20]
 800d306:	4619      	mov	r1, r3
 800d308:	f04f 0c0a 	mov.w	ip, #10
 800d30c:	4620      	mov	r0, r4
 800d30e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d312:	3a30      	subs	r2, #48	; 0x30
 800d314:	2a09      	cmp	r2, #9
 800d316:	d903      	bls.n	800d320 <_vfiprintf_r+0x1d0>
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d0c6      	beq.n	800d2aa <_vfiprintf_r+0x15a>
 800d31c:	9105      	str	r1, [sp, #20]
 800d31e:	e7c4      	b.n	800d2aa <_vfiprintf_r+0x15a>
 800d320:	fb0c 2101 	mla	r1, ip, r1, r2
 800d324:	4604      	mov	r4, r0
 800d326:	2301      	movs	r3, #1
 800d328:	e7f0      	b.n	800d30c <_vfiprintf_r+0x1bc>
 800d32a:	ab03      	add	r3, sp, #12
 800d32c:	9300      	str	r3, [sp, #0]
 800d32e:	462a      	mov	r2, r5
 800d330:	4b12      	ldr	r3, [pc, #72]	; (800d37c <_vfiprintf_r+0x22c>)
 800d332:	a904      	add	r1, sp, #16
 800d334:	4630      	mov	r0, r6
 800d336:	f7fb fdc7 	bl	8008ec8 <_printf_float>
 800d33a:	4607      	mov	r7, r0
 800d33c:	1c78      	adds	r0, r7, #1
 800d33e:	d1d6      	bne.n	800d2ee <_vfiprintf_r+0x19e>
 800d340:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d342:	07d9      	lsls	r1, r3, #31
 800d344:	d405      	bmi.n	800d352 <_vfiprintf_r+0x202>
 800d346:	89ab      	ldrh	r3, [r5, #12]
 800d348:	059a      	lsls	r2, r3, #22
 800d34a:	d402      	bmi.n	800d352 <_vfiprintf_r+0x202>
 800d34c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d34e:	f7fd fbd9 	bl	800ab04 <__retarget_lock_release_recursive>
 800d352:	89ab      	ldrh	r3, [r5, #12]
 800d354:	065b      	lsls	r3, r3, #25
 800d356:	f53f af1d 	bmi.w	800d194 <_vfiprintf_r+0x44>
 800d35a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d35c:	e71c      	b.n	800d198 <_vfiprintf_r+0x48>
 800d35e:	ab03      	add	r3, sp, #12
 800d360:	9300      	str	r3, [sp, #0]
 800d362:	462a      	mov	r2, r5
 800d364:	4b05      	ldr	r3, [pc, #20]	; (800d37c <_vfiprintf_r+0x22c>)
 800d366:	a904      	add	r1, sp, #16
 800d368:	4630      	mov	r0, r6
 800d36a:	f7fc f851 	bl	8009410 <_printf_i>
 800d36e:	e7e4      	b.n	800d33a <_vfiprintf_r+0x1ea>
 800d370:	0800df5e 	.word	0x0800df5e
 800d374:	0800df68 	.word	0x0800df68
 800d378:	08008ec9 	.word	0x08008ec9
 800d37c:	0800d12d 	.word	0x0800d12d
 800d380:	0800df64 	.word	0x0800df64

0800d384 <__swbuf_r>:
 800d384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d386:	460e      	mov	r6, r1
 800d388:	4614      	mov	r4, r2
 800d38a:	4605      	mov	r5, r0
 800d38c:	b118      	cbz	r0, 800d396 <__swbuf_r+0x12>
 800d38e:	6a03      	ldr	r3, [r0, #32]
 800d390:	b90b      	cbnz	r3, 800d396 <__swbuf_r+0x12>
 800d392:	f7fc fc1b 	bl	8009bcc <__sinit>
 800d396:	69a3      	ldr	r3, [r4, #24]
 800d398:	60a3      	str	r3, [r4, #8]
 800d39a:	89a3      	ldrh	r3, [r4, #12]
 800d39c:	071a      	lsls	r2, r3, #28
 800d39e:	d525      	bpl.n	800d3ec <__swbuf_r+0x68>
 800d3a0:	6923      	ldr	r3, [r4, #16]
 800d3a2:	b31b      	cbz	r3, 800d3ec <__swbuf_r+0x68>
 800d3a4:	6823      	ldr	r3, [r4, #0]
 800d3a6:	6922      	ldr	r2, [r4, #16]
 800d3a8:	1a98      	subs	r0, r3, r2
 800d3aa:	6963      	ldr	r3, [r4, #20]
 800d3ac:	b2f6      	uxtb	r6, r6
 800d3ae:	4283      	cmp	r3, r0
 800d3b0:	4637      	mov	r7, r6
 800d3b2:	dc04      	bgt.n	800d3be <__swbuf_r+0x3a>
 800d3b4:	4621      	mov	r1, r4
 800d3b6:	4628      	mov	r0, r5
 800d3b8:	f7ff f830 	bl	800c41c <_fflush_r>
 800d3bc:	b9e0      	cbnz	r0, 800d3f8 <__swbuf_r+0x74>
 800d3be:	68a3      	ldr	r3, [r4, #8]
 800d3c0:	3b01      	subs	r3, #1
 800d3c2:	60a3      	str	r3, [r4, #8]
 800d3c4:	6823      	ldr	r3, [r4, #0]
 800d3c6:	1c5a      	adds	r2, r3, #1
 800d3c8:	6022      	str	r2, [r4, #0]
 800d3ca:	701e      	strb	r6, [r3, #0]
 800d3cc:	6962      	ldr	r2, [r4, #20]
 800d3ce:	1c43      	adds	r3, r0, #1
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d004      	beq.n	800d3de <__swbuf_r+0x5a>
 800d3d4:	89a3      	ldrh	r3, [r4, #12]
 800d3d6:	07db      	lsls	r3, r3, #31
 800d3d8:	d506      	bpl.n	800d3e8 <__swbuf_r+0x64>
 800d3da:	2e0a      	cmp	r6, #10
 800d3dc:	d104      	bne.n	800d3e8 <__swbuf_r+0x64>
 800d3de:	4621      	mov	r1, r4
 800d3e0:	4628      	mov	r0, r5
 800d3e2:	f7ff f81b 	bl	800c41c <_fflush_r>
 800d3e6:	b938      	cbnz	r0, 800d3f8 <__swbuf_r+0x74>
 800d3e8:	4638      	mov	r0, r7
 800d3ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3ec:	4621      	mov	r1, r4
 800d3ee:	4628      	mov	r0, r5
 800d3f0:	f000 f806 	bl	800d400 <__swsetup_r>
 800d3f4:	2800      	cmp	r0, #0
 800d3f6:	d0d5      	beq.n	800d3a4 <__swbuf_r+0x20>
 800d3f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d3fc:	e7f4      	b.n	800d3e8 <__swbuf_r+0x64>
	...

0800d400 <__swsetup_r>:
 800d400:	b538      	push	{r3, r4, r5, lr}
 800d402:	4b2a      	ldr	r3, [pc, #168]	; (800d4ac <__swsetup_r+0xac>)
 800d404:	4605      	mov	r5, r0
 800d406:	6818      	ldr	r0, [r3, #0]
 800d408:	460c      	mov	r4, r1
 800d40a:	b118      	cbz	r0, 800d414 <__swsetup_r+0x14>
 800d40c:	6a03      	ldr	r3, [r0, #32]
 800d40e:	b90b      	cbnz	r3, 800d414 <__swsetup_r+0x14>
 800d410:	f7fc fbdc 	bl	8009bcc <__sinit>
 800d414:	89a3      	ldrh	r3, [r4, #12]
 800d416:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d41a:	0718      	lsls	r0, r3, #28
 800d41c:	d422      	bmi.n	800d464 <__swsetup_r+0x64>
 800d41e:	06d9      	lsls	r1, r3, #27
 800d420:	d407      	bmi.n	800d432 <__swsetup_r+0x32>
 800d422:	2309      	movs	r3, #9
 800d424:	602b      	str	r3, [r5, #0]
 800d426:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d42a:	81a3      	strh	r3, [r4, #12]
 800d42c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d430:	e034      	b.n	800d49c <__swsetup_r+0x9c>
 800d432:	0758      	lsls	r0, r3, #29
 800d434:	d512      	bpl.n	800d45c <__swsetup_r+0x5c>
 800d436:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d438:	b141      	cbz	r1, 800d44c <__swsetup_r+0x4c>
 800d43a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d43e:	4299      	cmp	r1, r3
 800d440:	d002      	beq.n	800d448 <__swsetup_r+0x48>
 800d442:	4628      	mov	r0, r5
 800d444:	f7ff fdee 	bl	800d024 <_free_r>
 800d448:	2300      	movs	r3, #0
 800d44a:	6363      	str	r3, [r4, #52]	; 0x34
 800d44c:	89a3      	ldrh	r3, [r4, #12]
 800d44e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d452:	81a3      	strh	r3, [r4, #12]
 800d454:	2300      	movs	r3, #0
 800d456:	6063      	str	r3, [r4, #4]
 800d458:	6923      	ldr	r3, [r4, #16]
 800d45a:	6023      	str	r3, [r4, #0]
 800d45c:	89a3      	ldrh	r3, [r4, #12]
 800d45e:	f043 0308 	orr.w	r3, r3, #8
 800d462:	81a3      	strh	r3, [r4, #12]
 800d464:	6923      	ldr	r3, [r4, #16]
 800d466:	b94b      	cbnz	r3, 800d47c <__swsetup_r+0x7c>
 800d468:	89a3      	ldrh	r3, [r4, #12]
 800d46a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d46e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d472:	d003      	beq.n	800d47c <__swsetup_r+0x7c>
 800d474:	4621      	mov	r1, r4
 800d476:	4628      	mov	r0, r5
 800d478:	f000 f840 	bl	800d4fc <__smakebuf_r>
 800d47c:	89a0      	ldrh	r0, [r4, #12]
 800d47e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d482:	f010 0301 	ands.w	r3, r0, #1
 800d486:	d00a      	beq.n	800d49e <__swsetup_r+0x9e>
 800d488:	2300      	movs	r3, #0
 800d48a:	60a3      	str	r3, [r4, #8]
 800d48c:	6963      	ldr	r3, [r4, #20]
 800d48e:	425b      	negs	r3, r3
 800d490:	61a3      	str	r3, [r4, #24]
 800d492:	6923      	ldr	r3, [r4, #16]
 800d494:	b943      	cbnz	r3, 800d4a8 <__swsetup_r+0xa8>
 800d496:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d49a:	d1c4      	bne.n	800d426 <__swsetup_r+0x26>
 800d49c:	bd38      	pop	{r3, r4, r5, pc}
 800d49e:	0781      	lsls	r1, r0, #30
 800d4a0:	bf58      	it	pl
 800d4a2:	6963      	ldrpl	r3, [r4, #20]
 800d4a4:	60a3      	str	r3, [r4, #8]
 800d4a6:	e7f4      	b.n	800d492 <__swsetup_r+0x92>
 800d4a8:	2000      	movs	r0, #0
 800d4aa:	e7f7      	b.n	800d49c <__swsetup_r+0x9c>
 800d4ac:	2000023c 	.word	0x2000023c

0800d4b0 <__swhatbuf_r>:
 800d4b0:	b570      	push	{r4, r5, r6, lr}
 800d4b2:	460c      	mov	r4, r1
 800d4b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4b8:	2900      	cmp	r1, #0
 800d4ba:	b096      	sub	sp, #88	; 0x58
 800d4bc:	4615      	mov	r5, r2
 800d4be:	461e      	mov	r6, r3
 800d4c0:	da0d      	bge.n	800d4de <__swhatbuf_r+0x2e>
 800d4c2:	89a3      	ldrh	r3, [r4, #12]
 800d4c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d4c8:	f04f 0100 	mov.w	r1, #0
 800d4cc:	bf0c      	ite	eq
 800d4ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d4d2:	2340      	movne	r3, #64	; 0x40
 800d4d4:	2000      	movs	r0, #0
 800d4d6:	6031      	str	r1, [r6, #0]
 800d4d8:	602b      	str	r3, [r5, #0]
 800d4da:	b016      	add	sp, #88	; 0x58
 800d4dc:	bd70      	pop	{r4, r5, r6, pc}
 800d4de:	466a      	mov	r2, sp
 800d4e0:	f000 f848 	bl	800d574 <_fstat_r>
 800d4e4:	2800      	cmp	r0, #0
 800d4e6:	dbec      	blt.n	800d4c2 <__swhatbuf_r+0x12>
 800d4e8:	9901      	ldr	r1, [sp, #4]
 800d4ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d4ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d4f2:	4259      	negs	r1, r3
 800d4f4:	4159      	adcs	r1, r3
 800d4f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4fa:	e7eb      	b.n	800d4d4 <__swhatbuf_r+0x24>

0800d4fc <__smakebuf_r>:
 800d4fc:	898b      	ldrh	r3, [r1, #12]
 800d4fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d500:	079d      	lsls	r5, r3, #30
 800d502:	4606      	mov	r6, r0
 800d504:	460c      	mov	r4, r1
 800d506:	d507      	bpl.n	800d518 <__smakebuf_r+0x1c>
 800d508:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d50c:	6023      	str	r3, [r4, #0]
 800d50e:	6123      	str	r3, [r4, #16]
 800d510:	2301      	movs	r3, #1
 800d512:	6163      	str	r3, [r4, #20]
 800d514:	b002      	add	sp, #8
 800d516:	bd70      	pop	{r4, r5, r6, pc}
 800d518:	ab01      	add	r3, sp, #4
 800d51a:	466a      	mov	r2, sp
 800d51c:	f7ff ffc8 	bl	800d4b0 <__swhatbuf_r>
 800d520:	9900      	ldr	r1, [sp, #0]
 800d522:	4605      	mov	r5, r0
 800d524:	4630      	mov	r0, r6
 800d526:	f7fe fe61 	bl	800c1ec <_malloc_r>
 800d52a:	b948      	cbnz	r0, 800d540 <__smakebuf_r+0x44>
 800d52c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d530:	059a      	lsls	r2, r3, #22
 800d532:	d4ef      	bmi.n	800d514 <__smakebuf_r+0x18>
 800d534:	f023 0303 	bic.w	r3, r3, #3
 800d538:	f043 0302 	orr.w	r3, r3, #2
 800d53c:	81a3      	strh	r3, [r4, #12]
 800d53e:	e7e3      	b.n	800d508 <__smakebuf_r+0xc>
 800d540:	89a3      	ldrh	r3, [r4, #12]
 800d542:	6020      	str	r0, [r4, #0]
 800d544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d548:	81a3      	strh	r3, [r4, #12]
 800d54a:	9b00      	ldr	r3, [sp, #0]
 800d54c:	6163      	str	r3, [r4, #20]
 800d54e:	9b01      	ldr	r3, [sp, #4]
 800d550:	6120      	str	r0, [r4, #16]
 800d552:	b15b      	cbz	r3, 800d56c <__smakebuf_r+0x70>
 800d554:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d558:	4630      	mov	r0, r6
 800d55a:	f000 f81d 	bl	800d598 <_isatty_r>
 800d55e:	b128      	cbz	r0, 800d56c <__smakebuf_r+0x70>
 800d560:	89a3      	ldrh	r3, [r4, #12]
 800d562:	f023 0303 	bic.w	r3, r3, #3
 800d566:	f043 0301 	orr.w	r3, r3, #1
 800d56a:	81a3      	strh	r3, [r4, #12]
 800d56c:	89a3      	ldrh	r3, [r4, #12]
 800d56e:	431d      	orrs	r5, r3
 800d570:	81a5      	strh	r5, [r4, #12]
 800d572:	e7cf      	b.n	800d514 <__smakebuf_r+0x18>

0800d574 <_fstat_r>:
 800d574:	b538      	push	{r3, r4, r5, lr}
 800d576:	4d07      	ldr	r5, [pc, #28]	; (800d594 <_fstat_r+0x20>)
 800d578:	2300      	movs	r3, #0
 800d57a:	4604      	mov	r4, r0
 800d57c:	4608      	mov	r0, r1
 800d57e:	4611      	mov	r1, r2
 800d580:	602b      	str	r3, [r5, #0]
 800d582:	f7f7 fc1e 	bl	8004dc2 <_fstat>
 800d586:	1c43      	adds	r3, r0, #1
 800d588:	d102      	bne.n	800d590 <_fstat_r+0x1c>
 800d58a:	682b      	ldr	r3, [r5, #0]
 800d58c:	b103      	cbz	r3, 800d590 <_fstat_r+0x1c>
 800d58e:	6023      	str	r3, [r4, #0]
 800d590:	bd38      	pop	{r3, r4, r5, pc}
 800d592:	bf00      	nop
 800d594:	20000910 	.word	0x20000910

0800d598 <_isatty_r>:
 800d598:	b538      	push	{r3, r4, r5, lr}
 800d59a:	4d06      	ldr	r5, [pc, #24]	; (800d5b4 <_isatty_r+0x1c>)
 800d59c:	2300      	movs	r3, #0
 800d59e:	4604      	mov	r4, r0
 800d5a0:	4608      	mov	r0, r1
 800d5a2:	602b      	str	r3, [r5, #0]
 800d5a4:	f7f7 fc1d 	bl	8004de2 <_isatty>
 800d5a8:	1c43      	adds	r3, r0, #1
 800d5aa:	d102      	bne.n	800d5b2 <_isatty_r+0x1a>
 800d5ac:	682b      	ldr	r3, [r5, #0]
 800d5ae:	b103      	cbz	r3, 800d5b2 <_isatty_r+0x1a>
 800d5b0:	6023      	str	r3, [r4, #0]
 800d5b2:	bd38      	pop	{r3, r4, r5, pc}
 800d5b4:	20000910 	.word	0x20000910

0800d5b8 <_raise_r>:
 800d5b8:	291f      	cmp	r1, #31
 800d5ba:	b538      	push	{r3, r4, r5, lr}
 800d5bc:	4604      	mov	r4, r0
 800d5be:	460d      	mov	r5, r1
 800d5c0:	d904      	bls.n	800d5cc <_raise_r+0x14>
 800d5c2:	2316      	movs	r3, #22
 800d5c4:	6003      	str	r3, [r0, #0]
 800d5c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d5ca:	bd38      	pop	{r3, r4, r5, pc}
 800d5cc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d5ce:	b112      	cbz	r2, 800d5d6 <_raise_r+0x1e>
 800d5d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5d4:	b94b      	cbnz	r3, 800d5ea <_raise_r+0x32>
 800d5d6:	4620      	mov	r0, r4
 800d5d8:	f000 f830 	bl	800d63c <_getpid_r>
 800d5dc:	462a      	mov	r2, r5
 800d5de:	4601      	mov	r1, r0
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5e6:	f000 b817 	b.w	800d618 <_kill_r>
 800d5ea:	2b01      	cmp	r3, #1
 800d5ec:	d00a      	beq.n	800d604 <_raise_r+0x4c>
 800d5ee:	1c59      	adds	r1, r3, #1
 800d5f0:	d103      	bne.n	800d5fa <_raise_r+0x42>
 800d5f2:	2316      	movs	r3, #22
 800d5f4:	6003      	str	r3, [r0, #0]
 800d5f6:	2001      	movs	r0, #1
 800d5f8:	e7e7      	b.n	800d5ca <_raise_r+0x12>
 800d5fa:	2400      	movs	r4, #0
 800d5fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d600:	4628      	mov	r0, r5
 800d602:	4798      	blx	r3
 800d604:	2000      	movs	r0, #0
 800d606:	e7e0      	b.n	800d5ca <_raise_r+0x12>

0800d608 <raise>:
 800d608:	4b02      	ldr	r3, [pc, #8]	; (800d614 <raise+0xc>)
 800d60a:	4601      	mov	r1, r0
 800d60c:	6818      	ldr	r0, [r3, #0]
 800d60e:	f7ff bfd3 	b.w	800d5b8 <_raise_r>
 800d612:	bf00      	nop
 800d614:	2000023c 	.word	0x2000023c

0800d618 <_kill_r>:
 800d618:	b538      	push	{r3, r4, r5, lr}
 800d61a:	4d07      	ldr	r5, [pc, #28]	; (800d638 <_kill_r+0x20>)
 800d61c:	2300      	movs	r3, #0
 800d61e:	4604      	mov	r4, r0
 800d620:	4608      	mov	r0, r1
 800d622:	4611      	mov	r1, r2
 800d624:	602b      	str	r3, [r5, #0]
 800d626:	f7f7 fb6d 	bl	8004d04 <_kill>
 800d62a:	1c43      	adds	r3, r0, #1
 800d62c:	d102      	bne.n	800d634 <_kill_r+0x1c>
 800d62e:	682b      	ldr	r3, [r5, #0]
 800d630:	b103      	cbz	r3, 800d634 <_kill_r+0x1c>
 800d632:	6023      	str	r3, [r4, #0]
 800d634:	bd38      	pop	{r3, r4, r5, pc}
 800d636:	bf00      	nop
 800d638:	20000910 	.word	0x20000910

0800d63c <_getpid_r>:
 800d63c:	f7f7 bb5a 	b.w	8004cf4 <_getpid>

0800d640 <_init>:
 800d640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d642:	bf00      	nop
 800d644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d646:	bc08      	pop	{r3}
 800d648:	469e      	mov	lr, r3
 800d64a:	4770      	bx	lr

0800d64c <_fini>:
 800d64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d64e:	bf00      	nop
 800d650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d652:	bc08      	pop	{r3}
 800d654:	469e      	mov	lr, r3
 800d656:	4770      	bx	lr
