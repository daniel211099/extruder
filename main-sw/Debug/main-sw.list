
main-sw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdf0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a84  0800cf90  0800cf90  0001cf90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da14  0800da14  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800da14  0800da14  0001da14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da1c  0800da1c  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da1c  0800da1c  0001da1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da20  0800da20  0001da20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800da24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  20000240  0800dc64  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008b0  0800dc64  000208b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017099  00000000  00000000  000202b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003871  00000000  00000000  0003734c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001338  00000000  00000000  0003abc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ec7  00000000  00000000  0003bef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019bdd  00000000  00000000  0003cdbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001856d  00000000  00000000  0005699c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009377b  00000000  00000000  0006ef09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006480  00000000  00000000  00102684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00108b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000240 	.word	0x20000240
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cf78 	.word	0x0800cf78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000244 	.word	0x20000244
 80001dc:	0800cf78 	.word	0x0800cf78

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <ILI9341_SendCommand>:
};

//***** Functions prototypes *****//
//1. Write Command to LCD
void ILI9341_SendCommand(uint8_t com)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <ILI9341_SendCommand+0x54>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a11      	ldr	r2, [pc, #68]	; (8001058 <ILI9341_SendCommand+0x58>)
 8001014:	8811      	ldrh	r1, [r2, #0]
 8001016:	2200      	movs	r2, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f004 f9a1 	bl	8005360 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 800101e:	4b0f      	ldr	r3, [pc, #60]	; (800105c <ILI9341_SendCommand+0x5c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a0f      	ldr	r2, [pc, #60]	; (8001060 <ILI9341_SendCommand+0x60>)
 8001024:	8811      	ldrh	r1, [r2, #0]
 8001026:	2200      	movs	r2, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f004 f999 	bl	8005360 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 800102e:	f107 010f 	add.w	r1, r7, #15
 8001032:	2305      	movs	r3, #5
 8001034:	2201      	movs	r2, #1
 8001036:	480b      	ldr	r0, [pc, #44]	; (8001064 <ILI9341_SendCommand+0x64>)
 8001038:	f004 fecd 	bl	8005dd6 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <ILI9341_SendCommand+0x5c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a07      	ldr	r2, [pc, #28]	; (8001060 <ILI9341_SendCommand+0x60>)
 8001042:	8811      	ldrh	r1, [r2, #0]
 8001044:	2201      	movs	r2, #1
 8001046:	4618      	mov	r0, r3
 8001048:	f004 f98a 	bl	8005360 <HAL_GPIO_WritePin>
}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200002c0 	.word	0x200002c0
 8001058:	200002c4 	.word	0x200002c4
 800105c:	200002b8 	.word	0x200002b8
 8001060:	200002bc 	.word	0x200002bc
 8001064:	20000260 	.word	0x20000260

08001068 <ILI9341_SendData>:

//2. Write data to LCD
void ILI9341_SendData(uint8_t data)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <ILI9341_SendData+0x54>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a11      	ldr	r2, [pc, #68]	; (80010c0 <ILI9341_SendData+0x58>)
 800107c:	8811      	ldrh	r1, [r2, #0]
 800107e:	2201      	movs	r2, #1
 8001080:	4618      	mov	r0, r3
 8001082:	f004 f96d 	bl	8005360 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8001086:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <ILI9341_SendData+0x5c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <ILI9341_SendData+0x60>)
 800108c:	8811      	ldrh	r1, [r2, #0]
 800108e:	2200      	movs	r2, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f004 f965 	bl	8005360 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 8001096:	f107 010f 	add.w	r1, r7, #15
 800109a:	2305      	movs	r3, #5
 800109c:	2201      	movs	r2, #1
 800109e:	480b      	ldr	r0, [pc, #44]	; (80010cc <ILI9341_SendData+0x64>)
 80010a0:	f004 fe99 	bl	8005dd6 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 80010a4:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <ILI9341_SendData+0x5c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <ILI9341_SendData+0x60>)
 80010aa:	8811      	ldrh	r1, [r2, #0]
 80010ac:	2201      	movs	r2, #1
 80010ae:	4618      	mov	r0, r3
 80010b0:	f004 f956 	bl	8005360 <HAL_GPIO_WritePin>
}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200002c0 	.word	0x200002c0
 80010c0:	200002c4 	.word	0x200002c4
 80010c4:	200002b8 	.word	0x200002b8
 80010c8:	200002bc 	.word	0x200002bc
 80010cc:	20000260 	.word	0x20000260

080010d0 <ILI9341_SetCursorPosition>:
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}

//3. Set cursor position
void ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4604      	mov	r4, r0
 80010d8:	4608      	mov	r0, r1
 80010da:	4611      	mov	r1, r2
 80010dc:	461a      	mov	r2, r3
 80010de:	4623      	mov	r3, r4
 80010e0:	80fb      	strh	r3, [r7, #6]
 80010e2:	4603      	mov	r3, r0
 80010e4:	80bb      	strh	r3, [r7, #4]
 80010e6:	460b      	mov	r3, r1
 80010e8:	807b      	strh	r3, [r7, #2]
 80010ea:	4613      	mov	r3, r2
 80010ec:	803b      	strh	r3, [r7, #0]

  ILI9341_SendCommand (ILI9341_COLUMN_ADDR);
 80010ee:	202a      	movs	r0, #42	; 0x2a
 80010f0:	f7ff ff86 	bl	8001000 <ILI9341_SendCommand>
  ILI9341_SendData(x1>>8);
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	0a1b      	lsrs	r3, r3, #8
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ffb3 	bl	8001068 <ILI9341_SendData>
  ILI9341_SendData(x1 & 0xFF);
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ffae 	bl	8001068 <ILI9341_SendData>
  ILI9341_SendData(x2>>8);
 800110c:	887b      	ldrh	r3, [r7, #2]
 800110e:	0a1b      	lsrs	r3, r3, #8
 8001110:	b29b      	uxth	r3, r3
 8001112:	b2db      	uxtb	r3, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ffa7 	bl	8001068 <ILI9341_SendData>
  ILI9341_SendData(x2 & 0xFF);
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ffa2 	bl	8001068 <ILI9341_SendData>

  ILI9341_SendCommand (ILI9341_PAGE_ADDR);
 8001124:	202b      	movs	r0, #43	; 0x2b
 8001126:	f7ff ff6b 	bl	8001000 <ILI9341_SendCommand>
  ILI9341_SendData(y1>>8);
 800112a:	88bb      	ldrh	r3, [r7, #4]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	b29b      	uxth	r3, r3
 8001130:	b2db      	uxtb	r3, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff98 	bl	8001068 <ILI9341_SendData>
  ILI9341_SendData(y1 & 0xFF);
 8001138:	88bb      	ldrh	r3, [r7, #4]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff93 	bl	8001068 <ILI9341_SendData>
  ILI9341_SendData(y2>>8);
 8001142:	883b      	ldrh	r3, [r7, #0]
 8001144:	0a1b      	lsrs	r3, r3, #8
 8001146:	b29b      	uxth	r3, r3
 8001148:	b2db      	uxtb	r3, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff8c 	bl	8001068 <ILI9341_SendData>
  ILI9341_SendData(y2 & 0xFF);
 8001150:	883b      	ldrh	r3, [r7, #0]
 8001152:	b2db      	uxtb	r3, r3
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff87 	bl	8001068 <ILI9341_SendData>
  ILI9341_SendCommand (ILI9341_GRAM);
 800115a:	202c      	movs	r0, #44	; 0x2c
 800115c:	f7ff ff50 	bl	8001000 <ILI9341_SendCommand>
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	bd90      	pop	{r4, r7, pc}

08001168 <ILI9341_Init>:
//4. Initialise function
void ILI9341_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
 {
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	4613      	mov	r3, r2
 8001176:	80fb      	strh	r3, [r7, #6]
	 //Copy SPI settings
	 memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 8001178:	2258      	movs	r2, #88	; 0x58
 800117a:	68f9      	ldr	r1, [r7, #12]
 800117c:	4853      	ldr	r0, [pc, #332]	; (80012cc <ILI9341_Init+0x164>)
 800117e:	f009 f9e6 	bl	800a54e <memcpy>
	 //CS pin
	 tftCS_GPIO = csPORT;
 8001182:	4a53      	ldr	r2, [pc, #332]	; (80012d0 <ILI9341_Init+0x168>)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	6013      	str	r3, [r2, #0]
	 tftCS_PIN = csPIN;
 8001188:	4a52      	ldr	r2, [pc, #328]	; (80012d4 <ILI9341_Init+0x16c>)
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	8013      	strh	r3, [r2, #0]
	 //DC pin
	 tftDC_GPIO = dcPORT;
 800118e:	4a52      	ldr	r2, [pc, #328]	; (80012d8 <ILI9341_Init+0x170>)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	6013      	str	r3, [r2, #0]
	 tftDC_PIN = dcPIN;
 8001194:	4a51      	ldr	r2, [pc, #324]	; (80012dc <ILI9341_Init+0x174>)
 8001196:	8b3b      	ldrh	r3, [r7, #24]
 8001198:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 800119a:	4b4d      	ldr	r3, [pc, #308]	; (80012d0 <ILI9341_Init+0x168>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a4d      	ldr	r2, [pc, #308]	; (80012d4 <ILI9341_Init+0x16c>)
 80011a0:	8811      	ldrh	r1, [r2, #0]
 80011a2:	2201      	movs	r2, #1
 80011a4:	4618      	mov	r0, r3
 80011a6:	f004 f8db 	bl	8005360 <HAL_GPIO_WritePin>
	 //RESET pin
	 tftRESET_GPIO = resetPORT;
 80011aa:	4a4d      	ldr	r2, [pc, #308]	; (80012e0 <ILI9341_Init+0x178>)
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	6013      	str	r3, [r2, #0]
	 tftRESET_PIN = resetPIN;
 80011b0:	4a4c      	ldr	r2, [pc, #304]	; (80012e4 <ILI9341_Init+0x17c>)
 80011b2:	8c3b      	ldrh	r3, [r7, #32]
 80011b4:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);  //Turn LCD ON
 80011b6:	8c3b      	ldrh	r3, [r7, #32]
 80011b8:	2201      	movs	r2, #1
 80011ba:	4619      	mov	r1, r3
 80011bc:	69f8      	ldr	r0, [r7, #28]
 80011be:	f004 f8cf 	bl	8005360 <HAL_GPIO_WritePin>
	 
   ILI9341_SendCommand (ILI9341_RESET); // software reset comand
 80011c2:	2001      	movs	r0, #1
 80011c4:	f7ff ff1c 	bl	8001000 <ILI9341_SendCommand>
   HAL_Delay(100);
 80011c8:	2064      	movs	r0, #100	; 0x64
 80011ca:	f003 fd7d 	bl	8004cc8 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_OFF); // display off
 80011ce:	2028      	movs	r0, #40	; 0x28
 80011d0:	f7ff ff16 	bl	8001000 <ILI9341_SendCommand>
   //------------power control------------------------------
   ILI9341_SendCommand (ILI9341_POWER1); // power control
 80011d4:	20c0      	movs	r0, #192	; 0xc0
 80011d6:	f7ff ff13 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData   (0x26); // GVDD = 4.75v
 80011da:	2026      	movs	r0, #38	; 0x26
 80011dc:	f7ff ff44 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_POWER2); // power control
 80011e0:	20c1      	movs	r0, #193	; 0xc1
 80011e2:	f7ff ff0d 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData   (0x11); // AVDD=VCIx2, VGH=VCIx7, VGL=-VCIx3
 80011e6:	2011      	movs	r0, #17
 80011e8:	f7ff ff3e 	bl	8001068 <ILI9341_SendData>
   //--------------VCOM-------------------------------------
   ILI9341_SendCommand (ILI9341_VCOM1); // vcom control
 80011ec:	20c5      	movs	r0, #197	; 0xc5
 80011ee:	f7ff ff07 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData   (0x35); // Set the VCOMH voltage (0x35 = 4.025v)
 80011f2:	2035      	movs	r0, #53	; 0x35
 80011f4:	f7ff ff38 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0x3e); // Set the VCOML voltage (0x3E = -0.950v)
 80011f8:	203e      	movs	r0, #62	; 0x3e
 80011fa:	f7ff ff35 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_VCOM2); // vcom control
 80011fe:	20c7      	movs	r0, #199	; 0xc7
 8001200:	f7ff fefe 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData   (0xbe);
 8001204:	20be      	movs	r0, #190	; 0xbe
 8001206:	f7ff ff2f 	bl	8001068 <ILI9341_SendData>

   //------------memory access control------------------------
   ILI9341_SendCommand (ILI9341_MAC); // memory access control
 800120a:	2036      	movs	r0, #54	; 0x36
 800120c:	f7ff fef8 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData(0x48);
 8001210:	2048      	movs	r0, #72	; 0x48
 8001212:	f7ff ff29 	bl	8001068 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_PIXEL_FORMAT); // pixel format set
 8001216:	203a      	movs	r0, #58	; 0x3a
 8001218:	f7ff fef2 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData   (0x55); // 16bit /pixel
 800121c:	2055      	movs	r0, #85	; 0x55
 800121e:	f7ff ff23 	bl	8001068 <ILI9341_SendData>

	 ILI9341_SendCommand(ILI9341_FRC);
 8001222:	20b1      	movs	r0, #177	; 0xb1
 8001224:	f7ff feec 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData(0);
 8001228:	2000      	movs	r0, #0
 800122a:	f7ff ff1d 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData(0x1F);
 800122e:	201f      	movs	r0, #31
 8001230:	f7ff ff1a 	bl	8001068 <ILI9341_SendData>
   //-------------ddram ----------------------------
   ILI9341_SendCommand (ILI9341_COLUMN_ADDR); // column set
 8001234:	202a      	movs	r0, #42	; 0x2a
 8001236:	f7ff fee3 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // x0_HIGH---0
 800123a:	2000      	movs	r0, #0
 800123c:	f7ff ff14 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x0_LOW----0
 8001240:	2000      	movs	r0, #0
 8001242:	f7ff ff11 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x1_HIGH---240
 8001246:	2000      	movs	r0, #0
 8001248:	f7ff ff0e 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0xEF); // x1_LOW----240
 800124c:	20ef      	movs	r0, #239	; 0xef
 800124e:	f7ff ff0b 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_PAGE_ADDR); // page address set
 8001252:	202b      	movs	r0, #43	; 0x2b
 8001254:	f7ff fed4 	bl	8001000 <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // y0_HIGH---0
 8001258:	2000      	movs	r0, #0
 800125a:	f7ff ff05 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // y0_LOW----0
 800125e:	2000      	movs	r0, #0
 8001260:	f7ff ff02 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0x01); // y1_HIGH---320
 8001264:	2001      	movs	r0, #1
 8001266:	f7ff feff 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0x3F); // y1_LOW----320
 800126a:	203f      	movs	r0, #63	; 0x3f
 800126c:	f7ff fefc 	bl	8001068 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_TEARING_OFF); // tearing effect off
 8001270:	2034      	movs	r0, #52	; 0x34
 8001272:	f7ff fec5 	bl	8001000 <ILI9341_SendCommand>
   //LCD_write_cmd(ILI9341_TEARING_ON); // tearing effect on
   //LCD_write_cmd(ILI9341_DISPLAY_INVERSION); // display inversion
   ILI9341_SendCommand (ILI9341_Entry_Mode_Set); // entry mode set
 8001276:	20b7      	movs	r0, #183	; 0xb7
 8001278:	f7ff fec2 	bl	8001000 <ILI9341_SendCommand>
   // Deep Standby Mode: OFF
   // Set the output level of gate driver G1-G320: Normal display
   // Low voltage detection: Disable
   ILI9341_SendData   (0x07);
 800127c:	2007      	movs	r0, #7
 800127e:	f7ff fef3 	bl	8001068 <ILI9341_SendData>
   //-----------------display------------------------
   ILI9341_SendCommand (ILI9341_DFC); // display function control
 8001282:	20b6      	movs	r0, #182	; 0xb6
 8001284:	f7ff febc 	bl	8001000 <ILI9341_SendCommand>
   //Set the scan mode in non-display area
   //Determine source/VCOM output in a non-display area in the partial display mode
   ILI9341_SendData   (0x0a);
 8001288:	200a      	movs	r0, #10
 800128a:	f7ff feed 	bl	8001068 <ILI9341_SendData>
   //Select whether the liquid crystal type is normally white type or normally black type
   //Sets the direction of scan by the gate driver in the range determined by SCN and NL
   //Select the shift direction of outputs from the source driver
   //Sets the gate driver pin arrangement in combination with the GS bit to select the optimal scan mode for the module
   //Specify the scan cycle interval of gate driver in non-display area when PTG to select interval scan
   ILI9341_SendData   (0x82);
 800128e:	2082      	movs	r0, #130	; 0x82
 8001290:	f7ff feea 	bl	8001068 <ILI9341_SendData>
   // Sets the number of lines to drive the LCD at an interval of 8 lines
   ILI9341_SendData   (0x27);
 8001294:	2027      	movs	r0, #39	; 0x27
 8001296:	f7ff fee7 	bl	8001068 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // clock divisor
 800129a:	2000      	movs	r0, #0
 800129c:	f7ff fee4 	bl	8001068 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_SLEEP_OUT); // sleep out
 80012a0:	2011      	movs	r0, #17
 80012a2:	f7ff fead 	bl	8001000 <ILI9341_SendCommand>
   HAL_Delay(100);
 80012a6:	2064      	movs	r0, #100	; 0x64
 80012a8:	f003 fd0e 	bl	8004cc8 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_ON); // display on
 80012ac:	2029      	movs	r0, #41	; 0x29
 80012ae:	f7ff fea7 	bl	8001000 <ILI9341_SendCommand>
   HAL_Delay(100);
 80012b2:	2064      	movs	r0, #100	; 0x64
 80012b4:	f003 fd08 	bl	8004cc8 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_GRAM); // memory write
 80012b8:	202c      	movs	r0, #44	; 0x2c
 80012ba:	f7ff fea1 	bl	8001000 <ILI9341_SendCommand>
   HAL_Delay(5);
 80012be:	2005      	movs	r0, #5
 80012c0:	f003 fd02 	bl	8004cc8 <HAL_Delay>
 }
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000260 	.word	0x20000260
 80012d0:	200002b8 	.word	0x200002b8
 80012d4:	200002bc 	.word	0x200002bc
 80012d8:	200002c0 	.word	0x200002c0
 80012dc:	200002c4 	.word	0x200002c4
 80012e0:	200002c8 	.word	0x200002c8
 80012e4:	200002cc 	.word	0x200002cc

080012e8 <ILI9341_DrawPixel>:

//5. Write data to a single pixel
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	80fb      	strh	r3, [r7, #6]
 80012f2:	460b      	mov	r3, r1
 80012f4:	80bb      	strh	r3, [r7, #4]
 80012f6:	4613      	mov	r3, r2
 80012f8:	807b      	strh	r3, [r7, #2]
  ILI9341_SetCursorPosition(x, y, x, y);
 80012fa:	88bb      	ldrh	r3, [r7, #4]
 80012fc:	88fa      	ldrh	r2, [r7, #6]
 80012fe:	88b9      	ldrh	r1, [r7, #4]
 8001300:	88f8      	ldrh	r0, [r7, #6]
 8001302:	f7ff fee5 	bl	80010d0 <ILI9341_SetCursorPosition>
	ILI9341_SendData(color>>8);
 8001306:	887b      	ldrh	r3, [r7, #2]
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	b29b      	uxth	r3, r3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff feaa 	bl	8001068 <ILI9341_SendData>
	ILI9341_SendData(color&0xFF);
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fea5 	bl	8001068 <ILI9341_SendData>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <ILI9341_Fill>:
//6. Fill the entire screen with a background color
void ILI9341_Fill(uint16_t color) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	80fb      	strh	r3, [r7, #6]
	uint32_t n = ILI9341_PIXEL_COUNT;
 8001332:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001336:	60fb      	str	r3, [r7, #12]
	uint16_t myColor = 0xFF;
 8001338:	23ff      	movs	r3, #255	; 0xff
 800133a:	817b      	strh	r3, [r7, #10]
	
	if(rotationNum==1 || rotationNum==3)
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <ILI9341_Fill+0x84>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d003      	beq.n	800134c <ILI9341_Fill+0x24>
 8001344:	4b19      	ldr	r3, [pc, #100]	; (80013ac <ILI9341_Fill+0x84>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b03      	cmp	r3, #3
 800134a:	d107      	bne.n	800135c <ILI9341_Fill+0x34>
	{
		ILI9341_SetCursorPosition(0, 0,   ILI9341_WIDTH -1, ILI9341_HEIGHT -1);
 800134c:	f240 133f 	movw	r3, #319	; 0x13f
 8001350:	22ef      	movs	r2, #239	; 0xef
 8001352:	2100      	movs	r1, #0
 8001354:	2000      	movs	r0, #0
 8001356:	f7ff febb 	bl	80010d0 <ILI9341_SetCursorPosition>
 800135a:	e00e      	b.n	800137a <ILI9341_Fill+0x52>
	}
	else if(rotationNum==2 || rotationNum==4)
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <ILI9341_Fill+0x84>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d003      	beq.n	800136c <ILI9341_Fill+0x44>
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <ILI9341_Fill+0x84>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b04      	cmp	r3, #4
 800136a:	d116      	bne.n	800139a <ILI9341_Fill+0x72>
	{
		ILI9341_SetCursorPosition(0, 0, ILI9341_HEIGHT -1, ILI9341_WIDTH -1);
 800136c:	23ef      	movs	r3, #239	; 0xef
 800136e:	f240 123f 	movw	r2, #319	; 0x13f
 8001372:	2100      	movs	r1, #0
 8001374:	2000      	movs	r0, #0
 8001376:	f7ff feab 	bl	80010d0 <ILI9341_SetCursorPosition>
	}
	
	
	while (n) {
 800137a:	e00e      	b.n	800139a <ILI9341_Fill+0x72>
			n--;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	3b01      	subs	r3, #1
 8001380:	60fb      	str	r3, [r7, #12]
       ILI9341_SendData(color>>8);
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	b29b      	uxth	r3, r3
 8001388:	b2db      	uxtb	r3, r3
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fe6c 	bl	8001068 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fe67 	bl	8001068 <ILI9341_SendData>
	while (n) {
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1ed      	bne.n	800137c <ILI9341_Fill+0x54>
	}
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000000 	.word	0x20000000

080013b0 <ILI9341_Fill_Rect>:
//7. Rectangle drawing functions
void ILI9341_Fill_Rect(unsigned int x0,unsigned int y0, unsigned int x1,unsigned int y1, uint16_t color) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
 80013bc:	603b      	str	r3, [r7, #0]
	uint32_t n = ((x1+1)-x0)*((y1+1)-y0);
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	3301      	adds	r3, #1
 80013c6:	6839      	ldr	r1, [r7, #0]
 80013c8:	68ba      	ldr	r2, [r7, #8]
 80013ca:	1a8a      	subs	r2, r1, r2
 80013cc:	3201      	adds	r2, #1
 80013ce:	fb02 f303 	mul.w	r3, r2, r3
 80013d2:	617b      	str	r3, [r7, #20]
	if (n>ILI9341_PIXEL_COUNT) n=ILI9341_PIXEL_COUNT;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 80013da:	d902      	bls.n	80013e2 <ILI9341_Fill_Rect+0x32>
 80013dc:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80013e0:	617b      	str	r3, [r7, #20]
	ILI9341_SetCursorPosition(x0, y0, x1, y1);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	b298      	uxth	r0, r3
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	b299      	uxth	r1, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	f7ff fe6d 	bl	80010d0 <ILI9341_SetCursorPosition>
	while (n) {
 80013f6:	e00e      	b.n	8001416 <ILI9341_Fill_Rect+0x66>
			n--;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
      ILI9341_SendData(color>>8);
 80013fe:	8c3b      	ldrh	r3, [r7, #32]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	b29b      	uxth	r3, r3
 8001404:	b2db      	uxtb	r3, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fe2e 	bl	8001068 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 800140c:	8c3b      	ldrh	r3, [r7, #32]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fe29 	bl	8001068 <ILI9341_SendData>
	while (n) {
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1ed      	bne.n	80013f8 <ILI9341_Fill_Rect+0x48>
	}
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <fillCircleHelper>:
      ILI9341_DrawPixel(x0 - x, y0 - y, color);
    }
  }
}
static void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 8001426:	b590      	push	{r4, r7, lr}
 8001428:	b087      	sub	sp, #28
 800142a:	af00      	add	r7, sp, #0
 800142c:	4604      	mov	r4, r0
 800142e:	4608      	mov	r0, r1
 8001430:	4611      	mov	r1, r2
 8001432:	461a      	mov	r2, r3
 8001434:	4623      	mov	r3, r4
 8001436:	80fb      	strh	r3, [r7, #6]
 8001438:	4603      	mov	r3, r0
 800143a:	80bb      	strh	r3, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
 8001440:	4613      	mov	r3, r2
 8001442:	707b      	strb	r3, [r7, #1]
	int16_t f     = 1 - r;
 8001444:	887b      	ldrh	r3, [r7, #2]
 8001446:	f1c3 0301 	rsb	r3, r3, #1
 800144a:	b29b      	uxth	r3, r3
 800144c:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 800144e:	2301      	movs	r3, #1
 8001450:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8001452:	887b      	ldrh	r3, [r7, #2]
 8001454:	461a      	mov	r2, r3
 8001456:	03d2      	lsls	r2, r2, #15
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	b29b      	uxth	r3, r3
 800145e:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 8001464:	887b      	ldrh	r3, [r7, #2]
 8001466:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 8001468:	e083      	b.n	8001572 <fillCircleHelper+0x14c>
    if (f >= 0) {
 800146a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800146e:	2b00      	cmp	r3, #0
 8001470:	db0e      	blt.n	8001490 <fillCircleHelper+0x6a>
      y--;
 8001472:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001476:	b29b      	uxth	r3, r3
 8001478:	3b01      	subs	r3, #1
 800147a:	b29b      	uxth	r3, r3
 800147c:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 800147e:	8a7b      	ldrh	r3, [r7, #18]
 8001480:	3302      	adds	r3, #2
 8001482:	b29b      	uxth	r3, r3
 8001484:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 8001486:	8afa      	ldrh	r2, [r7, #22]
 8001488:	8a7b      	ldrh	r3, [r7, #18]
 800148a:	4413      	add	r3, r2
 800148c:	b29b      	uxth	r3, r3
 800148e:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8001490:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001494:	b29b      	uxth	r3, r3
 8001496:	3301      	adds	r3, #1
 8001498:	b29b      	uxth	r3, r3
 800149a:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 800149c:	8abb      	ldrh	r3, [r7, #20]
 800149e:	3302      	adds	r3, #2
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 80014a4:	8afa      	ldrh	r2, [r7, #22]
 80014a6:	8abb      	ldrh	r3, [r7, #20]
 80014a8:	4413      	add	r3, r2
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 80014ae:	787b      	ldrb	r3, [r7, #1]
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d02b      	beq.n	8001510 <fillCircleHelper+0xea>
      ILI9341_drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 80014b8:	88fa      	ldrh	r2, [r7, #6]
 80014ba:	8a3b      	ldrh	r3, [r7, #16]
 80014bc:	4413      	add	r3, r2
 80014be:	b29b      	uxth	r3, r3
 80014c0:	b218      	sxth	r0, r3
 80014c2:	88ba      	ldrh	r2, [r7, #4]
 80014c4:	89fb      	ldrh	r3, [r7, #14]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	b219      	sxth	r1, r3
 80014cc:	89fb      	ldrh	r3, [r7, #14]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014d4:	4413      	add	r3, r2
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	3301      	adds	r3, #1
 80014da:	b29b      	uxth	r3, r3
 80014dc:	b21a      	sxth	r2, r3
 80014de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014e0:	f000 f921 	bl	8001726 <ILI9341_drawFastVLine>
      ILI9341_drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80014e4:	88fa      	ldrh	r2, [r7, #6]
 80014e6:	89fb      	ldrh	r3, [r7, #14]
 80014e8:	4413      	add	r3, r2
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	b218      	sxth	r0, r3
 80014ee:	88ba      	ldrh	r2, [r7, #4]
 80014f0:	8a3b      	ldrh	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	b219      	sxth	r1, r3
 80014f8:	8a3b      	ldrh	r3, [r7, #16]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001500:	4413      	add	r3, r2
 8001502:	b29b      	uxth	r3, r3
 8001504:	3301      	adds	r3, #1
 8001506:	b29b      	uxth	r3, r3
 8001508:	b21a      	sxth	r2, r3
 800150a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800150c:	f000 f90b 	bl	8001726 <ILI9341_drawFastVLine>
    }
    if (cornername & 0x2) {
 8001510:	787b      	ldrb	r3, [r7, #1]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d02b      	beq.n	8001572 <fillCircleHelper+0x14c>
      ILI9341_drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 800151a:	88fa      	ldrh	r2, [r7, #6]
 800151c:	8a3b      	ldrh	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	b29b      	uxth	r3, r3
 8001522:	b218      	sxth	r0, r3
 8001524:	88ba      	ldrh	r2, [r7, #4]
 8001526:	89fb      	ldrh	r3, [r7, #14]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	b29b      	uxth	r3, r3
 800152c:	b219      	sxth	r1, r3
 800152e:	89fb      	ldrh	r3, [r7, #14]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	b29a      	uxth	r2, r3
 8001534:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001536:	4413      	add	r3, r2
 8001538:	b29b      	uxth	r3, r3
 800153a:	3301      	adds	r3, #1
 800153c:	b29b      	uxth	r3, r3
 800153e:	b21a      	sxth	r2, r3
 8001540:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001542:	f000 f8f0 	bl	8001726 <ILI9341_drawFastVLine>
      ILI9341_drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 8001546:	88fa      	ldrh	r2, [r7, #6]
 8001548:	89fb      	ldrh	r3, [r7, #14]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	b29b      	uxth	r3, r3
 800154e:	b218      	sxth	r0, r3
 8001550:	88ba      	ldrh	r2, [r7, #4]
 8001552:	8a3b      	ldrh	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	b29b      	uxth	r3, r3
 8001558:	b219      	sxth	r1, r3
 800155a:	8a3b      	ldrh	r3, [r7, #16]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	b29a      	uxth	r2, r3
 8001560:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001562:	4413      	add	r3, r2
 8001564:	b29b      	uxth	r3, r3
 8001566:	3301      	adds	r3, #1
 8001568:	b29b      	uxth	r3, r3
 800156a:	b21a      	sxth	r2, r3
 800156c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800156e:	f000 f8da 	bl	8001726 <ILI9341_drawFastVLine>
  while (x<y) {
 8001572:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001576:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800157a:	429a      	cmp	r2, r3
 800157c:	f6ff af75 	blt.w	800146a <fillCircleHelper+0x44>
    }
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	371c      	adds	r7, #28
 8001586:	46bd      	mov	sp, r7
 8001588:	bd90      	pop	{r4, r7, pc}

0800158a <ILI9341_fillCircle>:
void ILI9341_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 800158a:	b590      	push	{r4, r7, lr}
 800158c:	b085      	sub	sp, #20
 800158e:	af02      	add	r7, sp, #8
 8001590:	4604      	mov	r4, r0
 8001592:	4608      	mov	r0, r1
 8001594:	4611      	mov	r1, r2
 8001596:	461a      	mov	r2, r3
 8001598:	4623      	mov	r3, r4
 800159a:	80fb      	strh	r3, [r7, #6]
 800159c:	4603      	mov	r3, r0
 800159e:	80bb      	strh	r3, [r7, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	807b      	strh	r3, [r7, #2]
 80015a4:	4613      	mov	r3, r2
 80015a6:	803b      	strh	r3, [r7, #0]
	ILI9341_drawFastVLine(x0, y0-r, 2*r+1, color);
 80015a8:	88ba      	ldrh	r2, [r7, #4]
 80015aa:	887b      	ldrh	r3, [r7, #2]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	b219      	sxth	r1, r3
 80015b2:	887b      	ldrh	r3, [r7, #2]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	3301      	adds	r3, #1
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	b21a      	sxth	r2, r3
 80015be:	883b      	ldrh	r3, [r7, #0]
 80015c0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80015c4:	f000 f8af 	bl	8001726 <ILI9341_drawFastVLine>
  fillCircleHelper(x0, y0, r, 3, 0, color);
 80015c8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80015cc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80015d0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80015d4:	883b      	ldrh	r3, [r7, #0]
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	2300      	movs	r3, #0
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2303      	movs	r3, #3
 80015de:	f7ff ff22 	bl	8001426 <fillCircleHelper>
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd90      	pop	{r4, r7, pc}

080015ea <ILI9341_drawLine>:

//9. Line drawing functions
void ILI9341_drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80015ea:	b590      	push	{r4, r7, lr}
 80015ec:	b089      	sub	sp, #36	; 0x24
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4604      	mov	r4, r0
 80015f2:	4608      	mov	r0, r1
 80015f4:	4611      	mov	r1, r2
 80015f6:	461a      	mov	r2, r3
 80015f8:	4623      	mov	r3, r4
 80015fa:	80fb      	strh	r3, [r7, #6]
 80015fc:	4603      	mov	r3, r0
 80015fe:	80bb      	strh	r3, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	807b      	strh	r3, [r7, #2]
 8001604:	4613      	mov	r3, r2
 8001606:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8001608:	f9b7 2000 	ldrsh.w	r2, [r7]
 800160c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001616:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800161a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800161e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001622:	1acb      	subs	r3, r1, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	bfb8      	it	lt
 8001628:	425b      	neglt	r3, r3
 800162a:	429a      	cmp	r2, r3
 800162c:	bfcc      	ite	gt
 800162e:	2301      	movgt	r3, #1
 8001630:	2300      	movle	r3, #0
 8001632:	b2db      	uxtb	r3, r3
 8001634:	837b      	strh	r3, [r7, #26]
  if (steep) {
 8001636:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00b      	beq.n	8001656 <ILI9341_drawLine+0x6c>
    swap(x0, y0);
 800163e:	88fb      	ldrh	r3, [r7, #6]
 8001640:	833b      	strh	r3, [r7, #24]
 8001642:	88bb      	ldrh	r3, [r7, #4]
 8001644:	80fb      	strh	r3, [r7, #6]
 8001646:	8b3b      	ldrh	r3, [r7, #24]
 8001648:	80bb      	strh	r3, [r7, #4]
    swap(x1, y1);
 800164a:	887b      	ldrh	r3, [r7, #2]
 800164c:	82fb      	strh	r3, [r7, #22]
 800164e:	883b      	ldrh	r3, [r7, #0]
 8001650:	807b      	strh	r3, [r7, #2]
 8001652:	8afb      	ldrh	r3, [r7, #22]
 8001654:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1) {
 8001656:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800165a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800165e:	429a      	cmp	r2, r3
 8001660:	dd0b      	ble.n	800167a <ILI9341_drawLine+0x90>
    swap(x0, x1);
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	82bb      	strh	r3, [r7, #20]
 8001666:	887b      	ldrh	r3, [r7, #2]
 8001668:	80fb      	strh	r3, [r7, #6]
 800166a:	8abb      	ldrh	r3, [r7, #20]
 800166c:	807b      	strh	r3, [r7, #2]
    swap(y0, y1);
 800166e:	88bb      	ldrh	r3, [r7, #4]
 8001670:	827b      	strh	r3, [r7, #18]
 8001672:	883b      	ldrh	r3, [r7, #0]
 8001674:	80bb      	strh	r3, [r7, #4]
 8001676:	8a7b      	ldrh	r3, [r7, #18]
 8001678:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	b29b      	uxth	r3, r3
 8001682:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8001684:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001688:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	bfb8      	it	lt
 8001692:	425b      	neglt	r3, r3
 8001694:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 8001696:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800169a:	0fda      	lsrs	r2, r3, #31
 800169c:	4413      	add	r3, r2
 800169e:	105b      	asrs	r3, r3, #1
 80016a0:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1) {
 80016a2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80016a6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	da02      	bge.n	80016b4 <ILI9341_drawLine+0xca>
    ystep = 1;
 80016ae:	2301      	movs	r3, #1
 80016b0:	83bb      	strh	r3, [r7, #28]
 80016b2:	e02d      	b.n	8001710 <ILI9341_drawLine+0x126>
  } else {
    ystep = -1;
 80016b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016b8:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++) {
 80016ba:	e029      	b.n	8001710 <ILI9341_drawLine+0x126>
    if (steep) {
 80016bc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d006      	beq.n	80016d2 <ILI9341_drawLine+0xe8>
      ILI9341_DrawPixel(y0, x0, color);
 80016c4:	88bb      	ldrh	r3, [r7, #4]
 80016c6:	88f9      	ldrh	r1, [r7, #6]
 80016c8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fe0c 	bl	80012e8 <ILI9341_DrawPixel>
 80016d0:	e005      	b.n	80016de <ILI9341_drawLine+0xf4>
    } else {
      ILI9341_DrawPixel(x0, y0, color);
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	88b9      	ldrh	r1, [r7, #4]
 80016d6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fe05 	bl	80012e8 <ILI9341_DrawPixel>
    }
    err -= dy;
 80016de:	8bfa      	ldrh	r2, [r7, #30]
 80016e0:	89fb      	ldrh	r3, [r7, #14]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	83fb      	strh	r3, [r7, #30]
    if (err < 0) {
 80016e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	da09      	bge.n	8001704 <ILI9341_drawLine+0x11a>
      y0 += ystep;
 80016f0:	88ba      	ldrh	r2, [r7, #4]
 80016f2:	8bbb      	ldrh	r3, [r7, #28]
 80016f4:	4413      	add	r3, r2
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	80bb      	strh	r3, [r7, #4]
      err += dx;
 80016fa:	8bfa      	ldrh	r2, [r7, #30]
 80016fc:	8a3b      	ldrh	r3, [r7, #16]
 80016fe:	4413      	add	r3, r2
 8001700:	b29b      	uxth	r3, r3
 8001702:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++) {
 8001704:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001708:	b29b      	uxth	r3, r3
 800170a:	3301      	adds	r3, #1
 800170c:	b29b      	uxth	r3, r3
 800170e:	80fb      	strh	r3, [r7, #6]
 8001710:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001714:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001718:	429a      	cmp	r2, r3
 800171a:	ddcf      	ble.n	80016bc <ILI9341_drawLine+0xd2>
    }
  }
}	
 800171c:	bf00      	nop
 800171e:	bf00      	nop
 8001720:	3724      	adds	r7, #36	; 0x24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd90      	pop	{r4, r7, pc}

08001726 <ILI9341_drawFastVLine>:
{
	ILI9341_drawLine(x, y, x+w-1, y, color);
}

void ILI9341_drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8001726:	b590      	push	{r4, r7, lr}
 8001728:	b085      	sub	sp, #20
 800172a:	af02      	add	r7, sp, #8
 800172c:	4604      	mov	r4, r0
 800172e:	4608      	mov	r0, r1
 8001730:	4611      	mov	r1, r2
 8001732:	461a      	mov	r2, r3
 8001734:	4623      	mov	r3, r4
 8001736:	80fb      	strh	r3, [r7, #6]
 8001738:	4603      	mov	r3, r0
 800173a:	80bb      	strh	r3, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	807b      	strh	r3, [r7, #2]
 8001740:	4613      	mov	r3, r2
 8001742:	803b      	strh	r3, [r7, #0]
	ILI9341_drawLine(x, y, x, y+h-1, color);
 8001744:	88ba      	ldrh	r2, [r7, #4]
 8001746:	887b      	ldrh	r3, [r7, #2]
 8001748:	4413      	add	r3, r2
 800174a:	b29b      	uxth	r3, r3
 800174c:	3b01      	subs	r3, #1
 800174e:	b29b      	uxth	r3, r3
 8001750:	b21c      	sxth	r4, r3
 8001752:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001756:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800175a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800175e:	883b      	ldrh	r3, [r7, #0]
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	4623      	mov	r3, r4
 8001764:	f7ff ff41 	bl	80015ea <ILI9341_drawLine>
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	bd90      	pop	{r4, r7, pc}

08001770 <ILI9341_drawChar>:
	}
}

//11. Text printing functions
void ILI9341_drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8001770:	b5b0      	push	{r4, r5, r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af02      	add	r7, sp, #8
 8001776:	4604      	mov	r4, r0
 8001778:	4608      	mov	r0, r1
 800177a:	4611      	mov	r1, r2
 800177c:	461a      	mov	r2, r3
 800177e:	4623      	mov	r3, r4
 8001780:	80fb      	strh	r3, [r7, #6]
 8001782:	4603      	mov	r3, r0
 8001784:	80bb      	strh	r3, [r7, #4]
 8001786:	460b      	mov	r3, r1
 8001788:	70fb      	strb	r3, [r7, #3]
 800178a:	4613      	mov	r3, r2
 800178c:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 800178e:	4b98      	ldr	r3, [pc, #608]	; (80019f0 <ILI9341_drawChar+0x280>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d003      	beq.n	800179e <ILI9341_drawChar+0x2e>
 8001796:	4b96      	ldr	r3, [pc, #600]	; (80019f0 <ILI9341_drawChar+0x280>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b03      	cmp	r3, #3
 800179c:	d11f      	bne.n	80017de <ILI9341_drawChar+0x6e>
	{
		if((x >= ILI9341_WIDTH)            || // Clip right
 800179e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017a2:	2bef      	cmp	r3, #239	; 0xef
 80017a4:	f300 811d 	bgt.w	80019e2 <ILI9341_drawChar+0x272>
 80017a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017ac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80017b0:	f280 8117 	bge.w	80019e2 <ILI9341_drawChar+0x272>
     (y >= ILI9341_HEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 80017b4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80017b8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80017bc:	4613      	mov	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4413      	add	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	440b      	add	r3, r1
     (y >= ILI9341_HEIGHT)           || // Clip bottom
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f340 810b 	ble.w	80019e2 <ILI9341_drawChar+0x272>
     ((y + 8 * size - 1) < 0))   // Clip top
 80017cc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80017d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	4413      	add	r3, r2
     ((x + 6 * size - 1) < 0) || // Clip left
 80017d8:	2b00      	cmp	r3, #0
 80017da:	dc21      	bgt.n	8001820 <ILI9341_drawChar+0xb0>
    return;
 80017dc:	e101      	b.n	80019e2 <ILI9341_drawChar+0x272>
	}
	else
	{
		if((y >= ILI9341_WIDTH)            || // Clip right
 80017de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017e2:	2bef      	cmp	r3, #239	; 0xef
 80017e4:	f300 80ff 	bgt.w	80019e6 <ILI9341_drawChar+0x276>
 80017e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ec:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80017f0:	f280 80f9 	bge.w	80019e6 <ILI9341_drawChar+0x276>
     (x >= ILI9341_HEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 80017f4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80017f8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80017fc:	4613      	mov	r3, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4413      	add	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	440b      	add	r3, r1
     (x >= ILI9341_HEIGHT)           || // Clip bottom
 8001806:	2b00      	cmp	r3, #0
 8001808:	f340 80ed 	ble.w	80019e6 <ILI9341_drawChar+0x276>
     ((x + 8 * size - 1) < 0))   // Clip top
 800180c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001810:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4413      	add	r3, r2
     ((y + 6 * size - 1) < 0) || // Clip left
 8001818:	2b00      	cmp	r3, #0
 800181a:	f340 80e4 	ble.w	80019e6 <ILI9341_drawChar+0x276>
 800181e:	e000      	b.n	8001822 <ILI9341_drawChar+0xb2>
		if((x >= ILI9341_WIDTH)            || // Clip right
 8001820:	bf00      	nop
    return;
	}	
	

  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 8001822:	4b74      	ldr	r3, [pc, #464]	; (80019f4 <ILI9341_drawChar+0x284>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	f083 0301 	eor.w	r3, r3, #1
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <ILI9341_drawChar+0xcc>
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	2baf      	cmp	r3, #175	; 0xaf
 8001834:	d902      	bls.n	800183c <ILI9341_drawChar+0xcc>
 8001836:	78fb      	ldrb	r3, [r7, #3]
 8001838:	3301      	adds	r3, #1
 800183a:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 800183c:	2300      	movs	r3, #0
 800183e:	73fb      	strb	r3, [r7, #15]
 8001840:	e0c9      	b.n	80019d6 <ILI9341_drawChar+0x266>
    uint8_t line;
    if (i == 5) 
 8001842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001846:	2b05      	cmp	r3, #5
 8001848:	d102      	bne.n	8001850 <ILI9341_drawChar+0xe0>
      line = 0x0;
 800184a:	2300      	movs	r3, #0
 800184c:	73bb      	strb	r3, [r7, #14]
 800184e:	e00b      	b.n	8001868 <ILI9341_drawChar+0xf8>
    else 
      line = pgm_read_byte(font1+(c*5)+i);
 8001850:	78fa      	ldrb	r2, [r7, #3]
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	461a      	mov	r2, r3
 800185a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185e:	4413      	add	r3, r2
 8001860:	4a65      	ldr	r2, [pc, #404]	; (80019f8 <ILI9341_drawChar+0x288>)
 8001862:	4413      	add	r3, r2
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8001868:	2300      	movs	r3, #0
 800186a:	737b      	strb	r3, [r7, #13]
 800186c:	e0a8      	b.n	80019c0 <ILI9341_drawChar+0x250>
      if (line & 0x1) {
 800186e:	7bbb      	ldrb	r3, [r7, #14]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	d04b      	beq.n	8001910 <ILI9341_drawChar+0x1a0>
        if (size == 1) // default size
 8001878:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800187c:	2b01      	cmp	r3, #1
 800187e:	d110      	bne.n	80018a2 <ILI9341_drawChar+0x132>
          ILI9341_DrawPixel(x+i, y+j, color);
 8001880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001884:	b29a      	uxth	r2, r3
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	4413      	add	r3, r2
 800188a:	b298      	uxth	r0, r3
 800188c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001890:	b29a      	uxth	r2, r3
 8001892:	88bb      	ldrh	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	b29b      	uxth	r3, r3
 8001898:	883a      	ldrh	r2, [r7, #0]
 800189a:	4619      	mov	r1, r3
 800189c:	f7ff fd24 	bl	80012e8 <ILI9341_DrawPixel>
 80018a0:	e085      	b.n	80019ae <ILI9341_drawChar+0x23e>
        else {  // big size
          ILI9341_Fill_Rect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 80018a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80018a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018aa:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80018ae:	fb01 f303 	mul.w	r3, r1, r3
 80018b2:	4413      	add	r3, r2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80018ba:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018be:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80018c2:	fb01 f303 	mul.w	r3, r1, r3
 80018c6:	4413      	add	r3, r2
 80018c8:	461c      	mov	r4, r3
 80018ca:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80018ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d2:	441a      	add	r2, r3
 80018d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d8:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80018dc:	fb01 f303 	mul.w	r3, r1, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	461d      	mov	r5, r3
 80018e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018ee:	441a      	add	r2, r3
 80018f0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018f4:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80018f8:	fb01 f303 	mul.w	r3, r1, r3
 80018fc:	4413      	add	r3, r2
 80018fe:	461a      	mov	r2, r3
 8001900:	883b      	ldrh	r3, [r7, #0]
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	4613      	mov	r3, r2
 8001906:	462a      	mov	r2, r5
 8001908:	4621      	mov	r1, r4
 800190a:	f7ff fd51 	bl	80013b0 <ILI9341_Fill_Rect>
 800190e:	e04e      	b.n	80019ae <ILI9341_drawChar+0x23e>
        } 
      } else if (bg != color) {
 8001910:	8c3a      	ldrh	r2, [r7, #32]
 8001912:	883b      	ldrh	r3, [r7, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d04a      	beq.n	80019ae <ILI9341_drawChar+0x23e>
        if (size == 1) // default size
 8001918:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800191c:	2b01      	cmp	r3, #1
 800191e:	d110      	bne.n	8001942 <ILI9341_drawChar+0x1d2>
          ILI9341_DrawPixel(x+i, y+j, bg);
 8001920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001924:	b29a      	uxth	r2, r3
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	4413      	add	r3, r2
 800192a:	b298      	uxth	r0, r3
 800192c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001930:	b29a      	uxth	r2, r3
 8001932:	88bb      	ldrh	r3, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	b29b      	uxth	r3, r3
 8001938:	8c3a      	ldrh	r2, [r7, #32]
 800193a:	4619      	mov	r1, r3
 800193c:	f7ff fcd4 	bl	80012e8 <ILI9341_DrawPixel>
 8001940:	e035      	b.n	80019ae <ILI9341_drawChar+0x23e>
        else {  // big size
          ILI9341_Fill_Rect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 8001942:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800194e:	fb01 f303 	mul.w	r3, r1, r3
 8001952:	4413      	add	r3, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800195a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800195e:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001962:	fb01 f303 	mul.w	r3, r1, r3
 8001966:	4413      	add	r3, r2
 8001968:	461c      	mov	r4, r3
 800196a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800196e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001972:	441a      	add	r2, r3
 8001974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001978:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800197c:	fb01 f303 	mul.w	r3, r1, r3
 8001980:	4413      	add	r3, r2
 8001982:	461d      	mov	r5, r3
 8001984:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800198e:	441a      	add	r2, r3
 8001990:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001994:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001998:	fb01 f303 	mul.w	r3, r1, r3
 800199c:	4413      	add	r3, r2
 800199e:	461a      	mov	r2, r3
 80019a0:	8c3b      	ldrh	r3, [r7, #32]
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	4613      	mov	r3, r2
 80019a6:	462a      	mov	r2, r5
 80019a8:	4621      	mov	r1, r4
 80019aa:	f7ff fd01 	bl	80013b0 <ILI9341_Fill_Rect>
        }
      }
      line >>= 1;
 80019ae:	7bbb      	ldrb	r3, [r7, #14]
 80019b0:	085b      	lsrs	r3, r3, #1
 80019b2:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 80019b4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	3301      	adds	r3, #1
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	737b      	strb	r3, [r7, #13]
 80019c0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80019c4:	2b07      	cmp	r3, #7
 80019c6:	f77f af52 	ble.w	800186e <ILI9341_drawChar+0xfe>
  for (int8_t i=0; i<6; i++ ) {
 80019ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	3301      	adds	r3, #1
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	73fb      	strb	r3, [r7, #15]
 80019d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019da:	2b05      	cmp	r3, #5
 80019dc:	f77f af31 	ble.w	8001842 <ILI9341_drawChar+0xd2>
 80019e0:	e002      	b.n	80019e8 <ILI9341_drawChar+0x278>
    return;
 80019e2:	bf00      	nop
 80019e4:	e000      	b.n	80019e8 <ILI9341_drawChar+0x278>
    return;
 80019e6:	bf00      	nop
    }
  }
}
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bdb0      	pop	{r4, r5, r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000000 	.word	0x20000000
 80019f4:	2000025c 	.word	0x2000025c
 80019f8:	0800d0d4 	.word	0x0800d0d4

080019fc <ILI9341_printText>:
void ILI9341_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 80019fc:	b590      	push	{r4, r7, lr}
 80019fe:	b089      	sub	sp, #36	; 0x24
 8001a00:	af02      	add	r7, sp, #8
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	4608      	mov	r0, r1
 8001a06:	4611      	mov	r1, r2
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	817b      	strh	r3, [r7, #10]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	813b      	strh	r3, [r7, #8]
 8001a12:	4613      	mov	r3, r2
 8001a14:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 8001a16:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	0052      	lsls	r2, r2, #1
 8001a20:	4413      	add	r3, r2
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	82fb      	strh	r3, [r7, #22]
 8001a2c:	e01a      	b.n	8001a64 <ILI9341_printText+0x68>
	{
		ILI9341_drawChar(x+(offset*i), y, text[i],color,bg,size);
 8001a2e:	8abb      	ldrh	r3, [r7, #20]
 8001a30:	8afa      	ldrh	r2, [r7, #22]
 8001a32:	fb12 f303 	smulbb	r3, r2, r3
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	897b      	ldrh	r3, [r7, #10]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	b218      	sxth	r0, r3
 8001a40:	8afb      	ldrh	r3, [r7, #22]
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	4413      	add	r3, r2
 8001a46:	781a      	ldrb	r2, [r3, #0]
 8001a48:	88fc      	ldrh	r4, [r7, #6]
 8001a4a:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8001a4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a52:	9301      	str	r3, [sp, #4]
 8001a54:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	4623      	mov	r3, r4
 8001a5a:	f7ff fe89 	bl	8001770 <ILI9341_drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8001a5e:	8afb      	ldrh	r3, [r7, #22]
 8001a60:	3301      	adds	r3, #1
 8001a62:	82fb      	strh	r3, [r7, #22]
 8001a64:	8afb      	ldrh	r3, [r7, #22]
 8001a66:	2b27      	cmp	r3, #39	; 0x27
 8001a68:	d805      	bhi.n	8001a76 <ILI9341_printText+0x7a>
 8001a6a:	8afb      	ldrh	r3, [r7, #22]
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	4413      	add	r3, r2
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1db      	bne.n	8001a2e <ILI9341_printText+0x32>
	}
}
 8001a76:	bf00      	nop
 8001a78:	371c      	adds	r7, #28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd90      	pop	{r4, r7, pc}
	...

08001a80 <ILI9341_setRotation>:
	}
}

//13. Set screen rotation
void ILI9341_setRotation(uint8_t rotate)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
	switch(rotate)
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d832      	bhi.n	8001af8 <ILI9341_setRotation+0x78>
 8001a92:	a201      	add	r2, pc, #4	; (adr r2, 8001a98 <ILI9341_setRotation+0x18>)
 8001a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a98:	08001aa9 	.word	0x08001aa9
 8001a9c:	08001abd 	.word	0x08001abd
 8001aa0:	08001ad1 	.word	0x08001ad1
 8001aa4:	08001ae5 	.word	0x08001ae5
	{
		case 1:
			rotationNum = 1;
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <ILI9341_setRotation+0x94>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001aae:	2036      	movs	r0, #54	; 0x36
 8001ab0:	f7ff faa6 	bl	8001000 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8001ab4:	2088      	movs	r0, #136	; 0x88
 8001ab6:	f7ff fad7 	bl	8001068 <ILI9341_SendData>
			break;
 8001aba:	e027      	b.n	8001b0c <ILI9341_setRotation+0x8c>
		case 2:
			rotationNum = 2;
 8001abc:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <ILI9341_setRotation+0x94>)
 8001abe:	2202      	movs	r2, #2
 8001ac0:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001ac2:	2036      	movs	r0, #54	; 0x36
 8001ac4:	f7ff fa9c 	bl	8001000 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8001ac8:	2028      	movs	r0, #40	; 0x28
 8001aca:	f7ff facd 	bl	8001068 <ILI9341_SendData>
			break;
 8001ace:	e01d      	b.n	8001b0c <ILI9341_setRotation+0x8c>
		case 3:
			rotationNum = 3;
 8001ad0:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <ILI9341_setRotation+0x94>)
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001ad6:	2036      	movs	r0, #54	; 0x36
 8001ad8:	f7ff fa92 	bl	8001000 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 8001adc:	2048      	movs	r0, #72	; 0x48
 8001ade:	f7ff fac3 	bl	8001068 <ILI9341_SendData>
			break;
 8001ae2:	e013      	b.n	8001b0c <ILI9341_setRotation+0x8c>
		case 4:
			rotationNum = 4;
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <ILI9341_setRotation+0x94>)
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001aea:	2036      	movs	r0, #54	; 0x36
 8001aec:	f7ff fa88 	bl	8001000 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8001af0:	20e8      	movs	r0, #232	; 0xe8
 8001af2:	f7ff fab9 	bl	8001068 <ILI9341_SendData>
			break;
 8001af6:	e009      	b.n	8001b0c <ILI9341_setRotation+0x8c>
		default:
			rotationNum = 1;
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <ILI9341_setRotation+0x94>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8001afe:	2036      	movs	r0, #54	; 0x36
 8001b00:	f7ff fa7e 	bl	8001000 <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8001b04:	2088      	movs	r0, #136	; 0x88
 8001b06:	f7ff faaf 	bl	8001068 <ILI9341_SendData>
			break;
 8001b0a:	bf00      	nop
	}
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000000 	.word	0x20000000

08001b18 <ILI9341_getRotation>:
//14. Get screen rotation
uint8_t ILI9341_getRotation(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
	return rotationNum;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <ILI9341_getRotation+0x14>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000000 	.word	0x20000000

08001b30 <TSC2046_SendCommand>:
#define _TS_CS_DISABLE		HAL_GPIO_WritePin(tsCS_GPIO, tsCS_PIN, GPIO_PIN_SET);

//Functions definitions
//1. Send TSC2046 Command and wait for a response
uint16_t TSC2046_SendCommand(uint8_t cmd)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3] = {0,0,0};
 8001b3a:	4a1e      	ldr	r2, [pc, #120]	; (8001bb4 <TSC2046_SendCommand+0x84>)
 8001b3c:	f107 0308 	add.w	r3, r7, #8
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	4611      	mov	r1, r2
 8001b44:	8019      	strh	r1, [r3, #0]
 8001b46:	3302      	adds	r3, #2
 8001b48:	0c12      	lsrs	r2, r2, #16
 8001b4a:	701a      	strb	r2, [r3, #0]
	uint16_t return16=0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	81fb      	strh	r3, [r7, #14]
	
	_TS_CS_ENBALE;
 8001b50:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <TSC2046_SendCommand+0x88>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a19      	ldr	r2, [pc, #100]	; (8001bbc <TSC2046_SendCommand+0x8c>)
 8001b56:	8811      	ldrh	r1, [r2, #0]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f003 fc00 	bl	8005360 <HAL_GPIO_WritePin>
	spiBuf[0] = cmd;
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	723b      	strb	r3, [r7, #8]
	HAL_SPI_Transmit(&tsSPIhandle, spiBuf, 1, 10);
 8001b64:	f107 0108 	add.w	r1, r7, #8
 8001b68:	230a      	movs	r3, #10
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	4814      	ldr	r0, [pc, #80]	; (8001bc0 <TSC2046_SendCommand+0x90>)
 8001b6e:	f004 f932 	bl	8005dd6 <HAL_SPI_Transmit>
	//Wait for response (3 ms)
	HAL_Delay(3);
 8001b72:	2003      	movs	r0, #3
 8001b74:	f003 f8a8 	bl	8004cc8 <HAL_Delay>
	if(HAL_SPI_Receive(&tsSPIhandle, &spiBuf[1], 2, 10) == HAL_OK) return16 = (spiBuf[1]<<4) + (spiBuf[2]>>4);
 8001b78:	f107 0308 	add.w	r3, r7, #8
 8001b7c:	1c59      	adds	r1, r3, #1
 8001b7e:	230a      	movs	r3, #10
 8001b80:	2202      	movs	r2, #2
 8001b82:	480f      	ldr	r0, [pc, #60]	; (8001bc0 <TSC2046_SendCommand+0x90>)
 8001b84:	f004 fa63 	bl	800604e <HAL_SPI_Receive>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10a      	bne.n	8001ba4 <TSC2046_SendCommand+0x74>
 8001b8e:	7a7b      	ldrb	r3, [r7, #9]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	7abb      	ldrb	r3, [r7, #10]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	81fb      	strh	r3, [r7, #14]
 8001ba2:	e001      	b.n	8001ba8 <TSC2046_SendCommand+0x78>
	else return16 = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	81fb      	strh	r3, [r7, #14]
	
	
	return return16;
 8001ba8:	89fb      	ldrh	r3, [r7, #14]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	0800cf90 	.word	0x0800cf90
 8001bb8:	20000328 	.word	0x20000328
 8001bbc:	2000032c 	.word	0x2000032c
 8001bc0:	200002d0 	.word	0x200002d0
 8001bc4:	00000000 	.word	0x00000000

08001bc8 <TSC2046_Calibrate>:
//2. Calibrate resistive touch panel
void TSC2046_Calibrate(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
	uint16_t watchVar1=0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	80bb      	strh	r3, [r7, #4]
	TS_TOUCH_RAW_Def myRawTouchDef;
	//Get Top-Left corner calibration coordinate
	TSC2046_TL_point();
 8001bd2:	f000 f9f7 	bl	8001fc4 <TSC2046_TL_point>
	myTS_Calibrate.TL_X = 0;
 8001bd6:	4b8c      	ldr	r3, [pc, #560]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	801a      	strh	r2, [r3, #0]
	myTS_Calibrate.TL_Y = 0;
 8001bdc:	4b8a      	ldr	r3, [pc, #552]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	805a      	strh	r2, [r3, #2]
	myTS_Calibrate.BR_X = 0;
 8001be2:	4b89      	ldr	r3, [pc, #548]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	809a      	strh	r2, [r3, #4]
	myTS_Calibrate.BR_Y = 0;
 8001be8:	4b87      	ldr	r3, [pc, #540]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	80da      	strh	r2, [r3, #6]
	
	while(1)
	{
		watchVar1 = TSC2046_getRaw_Z();
 8001bee:	f000 f9d9 	bl	8001fa4 <TSC2046_getRaw_Z>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	80bb      	strh	r3, [r7, #4]
		if(watchVar1>50)
 8001bf6:	88bb      	ldrh	r3, [r7, #4]
 8001bf8:	2b32      	cmp	r3, #50	; 0x32
 8001bfa:	d91b      	bls.n	8001c34 <TSC2046_Calibrate+0x6c>
		{
			for(uint8_t i=0; i<10; i++)
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	71fb      	strb	r3, [r7, #7]
 8001c00:	e014      	b.n	8001c2c <TSC2046_Calibrate+0x64>
			{
				myRawTouchDef = TSC2046_GetRawTouch();
 8001c02:	f000 f905 	bl	8001e10 <TSC2046_GetRawTouch>
 8001c06:	4603      	mov	r3, r0
 8001c08:	603b      	str	r3, [r7, #0]
				myTS_Calibrate.TL_X += myRawTouchDef.x_touch;
 8001c0a:	4b7f      	ldr	r3, [pc, #508]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c0c:	881a      	ldrh	r2, [r3, #0]
 8001c0e:	883b      	ldrh	r3, [r7, #0]
 8001c10:	4413      	add	r3, r2
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	4b7c      	ldr	r3, [pc, #496]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c16:	801a      	strh	r2, [r3, #0]
				myTS_Calibrate.TL_Y += myRawTouchDef.y_touch;
 8001c18:	4b7b      	ldr	r3, [pc, #492]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c1a:	885a      	ldrh	r2, [r3, #2]
 8001c1c:	887b      	ldrh	r3, [r7, #2]
 8001c1e:	4413      	add	r3, r2
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	4b79      	ldr	r3, [pc, #484]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c24:	805a      	strh	r2, [r3, #2]
			for(uint8_t i=0; i<10; i++)
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	71fb      	strb	r3, [r7, #7]
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	2b09      	cmp	r3, #9
 8001c30:	d9e7      	bls.n	8001c02 <TSC2046_Calibrate+0x3a>
			}
			
			break;
 8001c32:	e003      	b.n	8001c3c <TSC2046_Calibrate+0x74>
		}
		HAL_Delay(10);
 8001c34:	200a      	movs	r0, #10
 8001c36:	f003 f847 	bl	8004cc8 <HAL_Delay>
		watchVar1 = TSC2046_getRaw_Z();
 8001c3a:	e7d8      	b.n	8001bee <TSC2046_Calibrate+0x26>
	}
	HAL_Delay(1000);
 8001c3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c40:	f003 f842 	bl	8004cc8 <HAL_Delay>
	//Get Bottom-Right corner calibration coordinate
	TSC2046_BR_point();
 8001c44:	f000 f9da 	bl	8001ffc <TSC2046_BR_point>
	while(1)
	{
		watchVar1 = TSC2046_getRaw_Z();
 8001c48:	f000 f9ac 	bl	8001fa4 <TSC2046_getRaw_Z>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	80bb      	strh	r3, [r7, #4]
		if(watchVar1>50)
 8001c50:	88bb      	ldrh	r3, [r7, #4]
 8001c52:	2b32      	cmp	r3, #50	; 0x32
 8001c54:	d91b      	bls.n	8001c8e <TSC2046_Calibrate+0xc6>
		{
			for(uint8_t i=0; i<10; i++)
 8001c56:	2300      	movs	r3, #0
 8001c58:	71bb      	strb	r3, [r7, #6]
 8001c5a:	e014      	b.n	8001c86 <TSC2046_Calibrate+0xbe>
			{
				myRawTouchDef = TSC2046_GetRawTouch();
 8001c5c:	f000 f8d8 	bl	8001e10 <TSC2046_GetRawTouch>
 8001c60:	4603      	mov	r3, r0
 8001c62:	603b      	str	r3, [r7, #0]
				myTS_Calibrate.BR_X += myRawTouchDef.x_touch;
 8001c64:	4b68      	ldr	r3, [pc, #416]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c66:	889a      	ldrh	r2, [r3, #4]
 8001c68:	883b      	ldrh	r3, [r7, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	4b66      	ldr	r3, [pc, #408]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c70:	809a      	strh	r2, [r3, #4]
				myTS_Calibrate.BR_Y += myRawTouchDef.y_touch;
 8001c72:	4b65      	ldr	r3, [pc, #404]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c74:	88da      	ldrh	r2, [r3, #6]
 8001c76:	887b      	ldrh	r3, [r7, #2]
 8001c78:	4413      	add	r3, r2
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	4b62      	ldr	r3, [pc, #392]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c7e:	80da      	strh	r2, [r3, #6]
			for(uint8_t i=0; i<10; i++)
 8001c80:	79bb      	ldrb	r3, [r7, #6]
 8001c82:	3301      	adds	r3, #1
 8001c84:	71bb      	strb	r3, [r7, #6]
 8001c86:	79bb      	ldrb	r3, [r7, #6]
 8001c88:	2b09      	cmp	r3, #9
 8001c8a:	d9e7      	bls.n	8001c5c <TSC2046_Calibrate+0x94>
			}
			break;
 8001c8c:	e003      	b.n	8001c96 <TSC2046_Calibrate+0xce>
		}
		HAL_Delay(10);
 8001c8e:	200a      	movs	r0, #10
 8001c90:	f003 f81a 	bl	8004cc8 <HAL_Delay>
		watchVar1 = TSC2046_getRaw_Z();
 8001c94:	e7d8      	b.n	8001c48 <TSC2046_Calibrate+0x80>
	}
	
	myTS_Calibrate.TL_X *=0.1;
 8001c96:	4b5c      	ldr	r3, [pc, #368]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fc4a 	bl	8000534 <__aeabi_i2d>
 8001ca0:	a357      	add	r3, pc, #348	; (adr r3, 8001e00 <TSC2046_Calibrate+0x238>)
 8001ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca6:	f7fe fcaf 	bl	8000608 <__aeabi_dmul>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4610      	mov	r0, r2
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f7fe ff81 	bl	8000bb8 <__aeabi_d2uiz>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	4b53      	ldr	r3, [pc, #332]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001cbc:	801a      	strh	r2, [r3, #0]
	myTS_Calibrate.TL_Y *=0.1;
 8001cbe:	4b52      	ldr	r3, [pc, #328]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001cc0:	885b      	ldrh	r3, [r3, #2]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fc36 	bl	8000534 <__aeabi_i2d>
 8001cc8:	a34d      	add	r3, pc, #308	; (adr r3, 8001e00 <TSC2046_Calibrate+0x238>)
 8001cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cce:	f7fe fc9b 	bl	8000608 <__aeabi_dmul>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f7fe ff6d 	bl	8000bb8 <__aeabi_d2uiz>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	4b49      	ldr	r3, [pc, #292]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001ce4:	805a      	strh	r2, [r3, #2]
	
	myTS_Calibrate.BR_X *=0.1;
 8001ce6:	4b48      	ldr	r3, [pc, #288]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001ce8:	889b      	ldrh	r3, [r3, #4]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fc22 	bl	8000534 <__aeabi_i2d>
 8001cf0:	a343      	add	r3, pc, #268	; (adr r3, 8001e00 <TSC2046_Calibrate+0x238>)
 8001cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf6:	f7fe fc87 	bl	8000608 <__aeabi_dmul>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4610      	mov	r0, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	f7fe ff59 	bl	8000bb8 <__aeabi_d2uiz>
 8001d06:	4603      	mov	r3, r0
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	4b3f      	ldr	r3, [pc, #252]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d0c:	809a      	strh	r2, [r3, #4]
	myTS_Calibrate.BR_Y *=0.1;
 8001d0e:	4b3e      	ldr	r3, [pc, #248]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d10:	88db      	ldrh	r3, [r3, #6]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fc0e 	bl	8000534 <__aeabi_i2d>
 8001d18:	a339      	add	r3, pc, #228	; (adr r3, 8001e00 <TSC2046_Calibrate+0x238>)
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	f7fe fc73 	bl	8000608 <__aeabi_dmul>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4610      	mov	r0, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f7fe ff45 	bl	8000bb8 <__aeabi_d2uiz>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	4b35      	ldr	r3, [pc, #212]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d34:	80da      	strh	r2, [r3, #6]
	
	//1. Calculate X_Diff, Y_Diff
	myTS_Calibrate.Scale_X = (myTS_Calibrate.Width + 0.0f)/(myTS_Calibrate.BR_X - myTS_Calibrate.TL_X + 0.0f);
 8001d36:	4b34      	ldr	r3, [pc, #208]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d38:	8b1b      	ldrh	r3, [r3, #24]
 8001d3a:	ee07 3a90 	vmov	s15, r3
 8001d3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d42:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001e0c <TSC2046_Calibrate+0x244>
 8001d46:	ee77 6a87 	vadd.f32	s13, s15, s14
 8001d4a:	4b2f      	ldr	r3, [pc, #188]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d4c:	889b      	ldrh	r3, [r3, #4]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b2d      	ldr	r3, [pc, #180]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	ee07 3a90 	vmov	s15, r3
 8001d5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d5e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001e0c <TSC2046_Calibrate+0x244>
 8001d62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001d66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d6a:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d6c:	edc3 7a02 	vstr	s15, [r3, #8]
	myTS_Calibrate.Scale_Y = (myTS_Calibrate.Height + 0.0f)/(myTS_Calibrate.BR_Y - myTS_Calibrate.TL_Y + 0.0f);
 8001d70:	4b25      	ldr	r3, [pc, #148]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d72:	8b5b      	ldrh	r3, [r3, #26]
 8001d74:	ee07 3a90 	vmov	s15, r3
 8001d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d7c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001e0c <TSC2046_Calibrate+0x244>
 8001d80:	ee77 6a87 	vadd.f32	s13, s15, s14
 8001d84:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d86:	88db      	ldrh	r3, [r3, #6]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b1f      	ldr	r3, [pc, #124]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001d8c:	885b      	ldrh	r3, [r3, #2]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	ee07 3a90 	vmov	s15, r3
 8001d94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d98:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001e0c <TSC2046_Calibrate+0x244>
 8001d9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001da4:	4b18      	ldr	r3, [pc, #96]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001da6:	edc3 7a03 	vstr	s15, [r3, #12]
	//2. Calculate Scalling ()
	myTS_Calibrate.Bias_X = 10 - myTS_Calibrate.Scale_X*myTS_Calibrate.TL_X;
 8001daa:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001dac:	ed93 7a02 	vldr	s14, [r3, #8]
 8001db0:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	ee07 3a90 	vmov	s15, r3
 8001db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001dca:	edc3 7a04 	vstr	s15, [r3, #16]
	myTS_Calibrate.Bias_Y = 10 - myTS_Calibrate.Scale_Y*myTS_Calibrate.TL_Y;
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001dd0:	ed93 7a03 	vldr	s14, [r3, #12]
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001dd6:	885b      	ldrh	r3, [r3, #2]
 8001dd8:	ee07 3a90 	vmov	s15, r3
 8001ddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001de8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <TSC2046_Calibrate+0x240>)
 8001dee:	edc3 7a05 	vstr	s15, [r3, #20]
	
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	f3af 8000 	nop.w
 8001e00:	9999999a 	.word	0x9999999a
 8001e04:	3fb99999 	.word	0x3fb99999
 8001e08:	20000330 	.word	0x20000330
 8001e0c:	00000000 	.word	0x00000000

08001e10 <TSC2046_GetRawTouch>:
//3. Poll for touch status
TS_TOUCH_RAW_Def TSC2046_GetRawTouch(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
	
	//Assign raw touch based on orientation
	switch (ScreenOrientation)
 8001e16:	4b3d      	ldr	r3, [pc, #244]	; (8001f0c <TSC2046_GetRawTouch+0xfc>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	d867      	bhi.n	8001ef0 <TSC2046_GetRawTouch+0xe0>
 8001e20:	a201      	add	r2, pc, #4	; (adr r2, 8001e28 <TSC2046_GetRawTouch+0x18>)
 8001e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e26:	bf00      	nop
 8001e28:	08001e39 	.word	0x08001e39
 8001e2c:	08001e67 	.word	0x08001e67
 8001e30:	08001e9b 	.word	0x08001e9b
 8001e34:	08001ec9 	.word	0x08001ec9
	{
		case 1:
			localRawTouch.x_touch = 4095 - TSC2046_getRaw_X();
 8001e38:	f000 f894 	bl	8001f64 <TSC2046_getRaw_X>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001e42:	330f      	adds	r3, #15
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	4b32      	ldr	r3, [pc, #200]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001e48:	801a      	strh	r2, [r3, #0]
			localRawTouch.y_touch = TSC2046_getRaw_Y();
 8001e4a:	f000 f89b 	bl	8001f84 <TSC2046_getRaw_Y>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b2f      	ldr	r3, [pc, #188]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001e54:	805a      	strh	r2, [r3, #2]
			myTS_Calibrate.Width = 230;
 8001e56:	4b2f      	ldr	r3, [pc, #188]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001e58:	22e6      	movs	r2, #230	; 0xe6
 8001e5a:	831a      	strh	r2, [r3, #24]
			myTS_Calibrate.Height = 320;
 8001e5c:	4b2d      	ldr	r3, [pc, #180]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001e5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e62:	835a      	strh	r2, [r3, #26]
			break;
 8001e64:	e044      	b.n	8001ef0 <TSC2046_GetRawTouch+0xe0>
		
		case 2:
			localRawTouch.x_touch = 4095 - TSC2046_getRaw_Y();
 8001e66:	f000 f88d 	bl	8001f84 <TSC2046_getRaw_Y>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001e70:	330f      	adds	r3, #15
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	4b26      	ldr	r3, [pc, #152]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001e76:	801a      	strh	r2, [r3, #0]
			localRawTouch.y_touch = 4095 - TSC2046_getRaw_X();
 8001e78:	f000 f874 	bl	8001f64 <TSC2046_getRaw_X>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001e82:	330f      	adds	r3, #15
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001e88:	805a      	strh	r2, [r3, #2]
			myTS_Calibrate.Width = 320;
 8001e8a:	4b22      	ldr	r3, [pc, #136]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001e8c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e90:	831a      	strh	r2, [r3, #24]
			myTS_Calibrate.Height = 240;
 8001e92:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001e94:	22f0      	movs	r2, #240	; 0xf0
 8001e96:	835a      	strh	r2, [r3, #26]
			break;
 8001e98:	e02a      	b.n	8001ef0 <TSC2046_GetRawTouch+0xe0>
		
		case 3:
			localRawTouch.x_touch = TSC2046_getRaw_X();
 8001e9a:	f000 f863 	bl	8001f64 <TSC2046_getRaw_X>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001ea4:	801a      	strh	r2, [r3, #0]
			localRawTouch.y_touch = 4095 - TSC2046_getRaw_Y();
 8001ea6:	f000 f86d 	bl	8001f84 <TSC2046_getRaw_Y>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001eb0:	330f      	adds	r3, #15
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001eb6:	805a      	strh	r2, [r3, #2]
			myTS_Calibrate.Width = 230;
 8001eb8:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001eba:	22e6      	movs	r2, #230	; 0xe6
 8001ebc:	831a      	strh	r2, [r3, #24]
			myTS_Calibrate.Height = 320;
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001ec0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ec4:	835a      	strh	r2, [r3, #26]
			break;
 8001ec6:	e013      	b.n	8001ef0 <TSC2046_GetRawTouch+0xe0>
		
		case 4:
			localRawTouch.x_touch = TSC2046_getRaw_Y();
 8001ec8:	f000 f85c 	bl	8001f84 <TSC2046_getRaw_Y>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001ed2:	801a      	strh	r2, [r3, #0]
			localRawTouch.y_touch = TSC2046_getRaw_X();
 8001ed4:	f000 f846 	bl	8001f64 <TSC2046_getRaw_X>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	461a      	mov	r2, r3
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001ede:	805a      	strh	r2, [r3, #2]
			myTS_Calibrate.Width = 320;
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001ee2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ee6:	831a      	strh	r2, [r3, #24]
			myTS_Calibrate.Height = 240;
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <TSC2046_GetRawTouch+0x104>)
 8001eea:	22f0      	movs	r2, #240	; 0xf0
 8001eec:	835a      	strh	r2, [r3, #26]
			break;
 8001eee:	bf00      	nop
	}
	
	return localRawTouch;
 8001ef0:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <TSC2046_GetRawTouch+0x100>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	88ba      	ldrh	r2, [r7, #4]
 8001efa:	f362 030f 	bfi	r3, r2, #0, #16
 8001efe:	88fa      	ldrh	r2, [r7, #6]
 8001f00:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	2000032e 	.word	0x2000032e
 8001f10:	2000034c 	.word	0x2000034c
 8001f14:	20000330 	.word	0x20000330

08001f18 <TSC2046_Begin>:

//4. Begin function
bool  TSC2046_Begin(SPI_HandleTypeDef *touchSPI, GPIO_TypeDef *csPort, uint16_t csPin)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	4613      	mov	r3, r2
 8001f24:	80fb      	strh	r3, [r7, #6]
	//Touch Screen SPI
	memcpy(&tsSPIhandle, touchSPI, sizeof(*touchSPI));
 8001f26:	2258      	movs	r2, #88	; 0x58
 8001f28:	68f9      	ldr	r1, [r7, #12]
 8001f2a:	480a      	ldr	r0, [pc, #40]	; (8001f54 <TSC2046_Begin+0x3c>)
 8001f2c:	f008 fb0f 	bl	800a54e <memcpy>
	//Chip-Select Port and Pin
	tsCS_GPIO = csPort;
 8001f30:	4a09      	ldr	r2, [pc, #36]	; (8001f58 <TSC2046_Begin+0x40>)
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	6013      	str	r3, [r2, #0]
	tsCS_PIN = csPin;
 8001f36:	4a09      	ldr	r2, [pc, #36]	; (8001f5c <TSC2046_Begin+0x44>)
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	8013      	strh	r3, [r2, #0]
	//Get screen orientation
	ScreenOrientation = TSC2046_getOrientation();
 8001f3c:	f000 f88c 	bl	8002058 <TSC2046_getOrientation>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <TSC2046_Begin+0x48>)
 8001f46:	701a      	strb	r2, [r3, #0]
}
 8001f48:	bf00      	nop
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	200002d0 	.word	0x200002d0
 8001f58:	20000328 	.word	0x20000328
 8001f5c:	2000032c 	.word	0x2000032c
 8001f60:	2000032e 	.word	0x2000032e

08001f64 <TSC2046_getRaw_X>:

//5. Get raw touch data
//i. get x-axis raw touch 12-bit value
uint16_t TSC2046_getRaw_X(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
	return TSC2046_SendCommand(CMD_X_AXIS | CMD_Default);
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <TSC2046_getRaw_X+0x1c>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fddc 	bl	8001b30 <TSC2046_SendCommand>
 8001f78:	4603      	mov	r3, r0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000001 	.word	0x20000001

08001f84 <TSC2046_getRaw_Y>:
//ii. get y-axis raw touch 12-bit value
uint16_t TSC2046_getRaw_Y(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
	return TSC2046_SendCommand(CMD_Y_AXIS | CMD_Default);
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <TSC2046_getRaw_Y+0x1c>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fdcc 	bl	8001b30 <TSC2046_SendCommand>
 8001f98:	4603      	mov	r3, r0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000001 	.word	0x20000001

08001fa4 <TSC2046_getRaw_Z>:
//iii. get z-axis raw touch 12-bit value
uint16_t TSC2046_getRaw_Z(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
	return TSC2046_SendCommand(CMD_Z_AXIS | CMD_Default);
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <TSC2046_getRaw_Z+0x1c>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fdbc 	bl	8001b30 <TSC2046_SendCommand>
 8001fb8:	4603      	mov	r3, r0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000001 	.word	0x20000001

08001fc4 <TSC2046_TL_point>:

//6. Print calibration points
//i. Top-Left corner point
void TSC2046_TL_point(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af02      	add	r7, sp, #8
	ILI9341_fillCircle(10, 10, 3, COLOR_RED);
 8001fca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001fce:	2203      	movs	r2, #3
 8001fd0:	210a      	movs	r1, #10
 8001fd2:	200a      	movs	r0, #10
 8001fd4:	f7ff fad9 	bl	800158a <ILI9341_fillCircle>
	ILI9341_printText("Press here", 20, 30, COLOR_RED, COLOR_RED, 1);
 8001fd8:	2301      	movs	r3, #1
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001fe6:	221e      	movs	r2, #30
 8001fe8:	2114      	movs	r1, #20
 8001fea:	4803      	ldr	r0, [pc, #12]	; (8001ff8 <TSC2046_TL_point+0x34>)
 8001fec:	f7ff fd06 	bl	80019fc <ILI9341_printText>
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	0800cf94 	.word	0x0800cf94

08001ffc <TSC2046_BR_point>:
//ii. Bottom-Right corner point
void TSC2046_BR_point(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af02      	add	r7, sp, #8
	ILI9341_fillCircle(myTS_Calibrate.Width-10, myTS_Calibrate.Height-10, 3, COLOR_RED);
 8002002:	4b13      	ldr	r3, [pc, #76]	; (8002050 <TSC2046_BR_point+0x54>)
 8002004:	8b1b      	ldrh	r3, [r3, #24]
 8002006:	3b0a      	subs	r3, #10
 8002008:	b29b      	uxth	r3, r3
 800200a:	b218      	sxth	r0, r3
 800200c:	4b10      	ldr	r3, [pc, #64]	; (8002050 <TSC2046_BR_point+0x54>)
 800200e:	8b5b      	ldrh	r3, [r3, #26]
 8002010:	3b0a      	subs	r3, #10
 8002012:	b29b      	uxth	r3, r3
 8002014:	b219      	sxth	r1, r3
 8002016:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800201a:	2203      	movs	r2, #3
 800201c:	f7ff fab5 	bl	800158a <ILI9341_fillCircle>
	ILI9341_printText("Press here", myTS_Calibrate.Width-80, myTS_Calibrate.Height-40, COLOR_RED, COLOR_RED, 1);
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <TSC2046_BR_point+0x54>)
 8002022:	8b1b      	ldrh	r3, [r3, #24]
 8002024:	3b50      	subs	r3, #80	; 0x50
 8002026:	b29b      	uxth	r3, r3
 8002028:	b219      	sxth	r1, r3
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <TSC2046_BR_point+0x54>)
 800202c:	8b5b      	ldrh	r3, [r3, #26]
 800202e:	3b28      	subs	r3, #40	; 0x28
 8002030:	b29b      	uxth	r3, r3
 8002032:	b21a      	sxth	r2, r3
 8002034:	2301      	movs	r3, #1
 8002036:	9301      	str	r3, [sp, #4]
 8002038:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002042:	4804      	ldr	r0, [pc, #16]	; (8002054 <TSC2046_BR_point+0x58>)
 8002044:	f7ff fcda 	bl	80019fc <ILI9341_printText>
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000330 	.word	0x20000330
 8002054:	0800cf94 	.word	0x0800cf94

08002058 <TSC2046_getOrientation>:

//7. Get orientation (from LCD driver)
uint8_t TSC2046_getOrientation(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
	return ILI9341_getRotation();
 800205c:	f7ff fd5c 	bl	8001b18 <ILI9341_getRotation>
 8002060:	4603      	mov	r3, r0
}
 8002062:	4618      	mov	r0, r3
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <TSC2046_GetTouchData>:

//8. Get touch sccreen data
TS_TOUCH_DATA_Def TSC2046_GetTouchData(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
	TS_TOUCH_DATA_Def myTsData;
	uint16_t temp16x=0, temp16y=0;
 8002070:	2300      	movs	r3, #0
 8002072:	82fb      	strh	r3, [r7, #22]
 8002074:	2300      	movs	r3, #0
 8002076:	82bb      	strh	r3, [r7, #20]
	//Is screen pressed
	if(TSC2046_getRaw_Z()>50)
 8002078:	f7ff ff94 	bl	8001fa4 <TSC2046_getRaw_Z>
 800207c:	4603      	mov	r3, r0
 800207e:	2b32      	cmp	r3, #50	; 0x32
 8002080:	d920      	bls.n	80020c4 <TSC2046_GetTouchData+0x5c>
	{
		myTsData.isPressed = true;
 8002082:	2301      	movs	r3, #1
 8002084:	733b      	strb	r3, [r7, #12]
		//Read touch data
		for(uint8_t i=0; i<1; i++)
 8002086:	2300      	movs	r3, #0
 8002088:	74fb      	strb	r3, [r7, #19]
 800208a:	e011      	b.n	80020b0 <TSC2046_GetTouchData+0x48>
		{
			localRawTouch = TSC2046_GetRawTouch();
 800208c:	f7ff fec0 	bl	8001e10 <TSC2046_GetRawTouch>
 8002090:	4603      	mov	r3, r0
 8002092:	4a29      	ldr	r2, [pc, #164]	; (8002138 <TSC2046_GetTouchData+0xd0>)
 8002094:	6013      	str	r3, [r2, #0]
			temp16x += localRawTouch.x_touch;
 8002096:	4b28      	ldr	r3, [pc, #160]	; (8002138 <TSC2046_GetTouchData+0xd0>)
 8002098:	881a      	ldrh	r2, [r3, #0]
 800209a:	8afb      	ldrh	r3, [r7, #22]
 800209c:	4413      	add	r3, r2
 800209e:	82fb      	strh	r3, [r7, #22]
			temp16y += localRawTouch.y_touch;
 80020a0:	4b25      	ldr	r3, [pc, #148]	; (8002138 <TSC2046_GetTouchData+0xd0>)
 80020a2:	885a      	ldrh	r2, [r3, #2]
 80020a4:	8abb      	ldrh	r3, [r7, #20]
 80020a6:	4413      	add	r3, r2
 80020a8:	82bb      	strh	r3, [r7, #20]
		for(uint8_t i=0; i<1; i++)
 80020aa:	7cfb      	ldrb	r3, [r7, #19]
 80020ac:	3301      	adds	r3, #1
 80020ae:	74fb      	strb	r3, [r7, #19]
 80020b0:	7cfb      	ldrb	r3, [r7, #19]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0ea      	beq.n	800208c <TSC2046_GetTouchData+0x24>
		}
		localRawTouch.x_touch = temp16x*1;
 80020b6:	4a20      	ldr	r2, [pc, #128]	; (8002138 <TSC2046_GetTouchData+0xd0>)
 80020b8:	8afb      	ldrh	r3, [r7, #22]
 80020ba:	8013      	strh	r3, [r2, #0]
		localRawTouch.y_touch = temp16y*1;
 80020bc:	4a1e      	ldr	r2, [pc, #120]	; (8002138 <TSC2046_GetTouchData+0xd0>)
 80020be:	8abb      	ldrh	r3, [r7, #20]
 80020c0:	8053      	strh	r3, [r2, #2]
 80020c2:	e001      	b.n	80020c8 <TSC2046_GetTouchData+0x60>
	}
	else myTsData.isPressed = false;
 80020c4:	2300      	movs	r3, #0
 80020c6:	733b      	strb	r3, [r7, #12]
	
	
	//X_Touch value
	myTsData.X = myTS_Calibrate.Scale_X*localRawTouch.x_touch + myTS_Calibrate.Bias_X;
 80020c8:	4b1c      	ldr	r3, [pc, #112]	; (800213c <TSC2046_GetTouchData+0xd4>)
 80020ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80020ce:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <TSC2046_GetTouchData+0xd0>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	ee07 3a90 	vmov	s15, r3
 80020d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020de:	4b17      	ldr	r3, [pc, #92]	; (800213c <TSC2046_GetTouchData+0xd4>)
 80020e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80020e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020ec:	ee17 3a90 	vmov	r3, s15
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	81fb      	strh	r3, [r7, #14]
	//Y_Touch value
	myTsData.Y = myTS_Calibrate.Scale_Y*localRawTouch.y_touch + myTS_Calibrate.Bias_Y;
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <TSC2046_GetTouchData+0xd4>)
 80020f6:	ed93 7a03 	vldr	s14, [r3, #12]
 80020fa:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <TSC2046_GetTouchData+0xd0>)
 80020fc:	885b      	ldrh	r3, [r3, #2]
 80020fe:	ee07 3a90 	vmov	s15, r3
 8002102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002106:	ee27 7a27 	vmul.f32	s14, s14, s15
 800210a:	4b0c      	ldr	r3, [pc, #48]	; (800213c <TSC2046_GetTouchData+0xd4>)
 800210c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002118:	ee17 3a90 	vmov	r3, s15
 800211c:	b29b      	uxth	r3, r3
 800211e:	823b      	strh	r3, [r7, #16]
	
	return myTsData;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	461a      	mov	r2, r3
 8002124:	f107 030c 	add.w	r3, r7, #12
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	6010      	str	r0, [r2, #0]
 800212c:	889b      	ldrh	r3, [r3, #4]
 800212e:	8093      	strh	r3, [r2, #4]
}
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	2000034c 	.word	0x2000034c
 800213c:	20000330 	.word	0x20000330

08002140 <HMI_init>:

#include <HMI/hmi_display.h>


Hmi HMI_init(StateMachine* stateMachine, Sensor* sensorExtruder, Sensor* sensorBack, PIDController *pidController)
{
 8002140:	b590      	push	{r4, r7, lr}
 8002142:	b08f      	sub	sp, #60	; 0x3c
 8002144:	af02      	add	r7, sp, #8
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
 800214c:	603b      	str	r3, [r7, #0]
	Hmi hmi;
	hmi.HmiInformation.stateMachine = stateMachine;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
	hmi.HmiInformation.sensorExtruder = sensorExtruder;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	62bb      	str	r3, [r7, #40]	; 0x28
	hmi.HmiInformation.sensorBack = sensorBack;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	62fb      	str	r3, [r7, #44]	; 0x2c

	TSC2046_Calibrate();
 800215a:	f7ff fd35 	bl	8001bc8 <TSC2046_Calibrate>
	ILI9341_Fill(COLOR_WHITE);
 800215e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002162:	f7ff f8e1 	bl	8001328 <ILI9341_Fill>

	ILI9341_Fill_Rect(5, 10, 315, 50, COLOR_ORANGE);
 8002166:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	2332      	movs	r3, #50	; 0x32
 800216e:	f240 123b 	movw	r2, #315	; 0x13b
 8002172:	210a      	movs	r1, #10
 8002174:	2005      	movs	r0, #5
 8002176:	f7ff f91b 	bl	80013b0 <ILI9341_Fill_Rect>
	ILI9341_printText("Sensor1 : 0 mm", 50, 25, COLOR_WHITE, COLOR_ORANGE, 2);
 800217a:	2302      	movs	r3, #2
 800217c:	9301      	str	r3, [sp, #4]
 800217e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002188:	2219      	movs	r2, #25
 800218a:	2132      	movs	r1, #50	; 0x32
 800218c:	4848      	ldr	r0, [pc, #288]	; (80022b0 <HMI_init+0x170>)
 800218e:	f7ff fc35 	bl	80019fc <ILI9341_printText>

	ILI9341_Fill_Rect(5, 60, 315, 100, COLOR_ORANGE);
 8002192:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	2364      	movs	r3, #100	; 0x64
 800219a:	f240 123b 	movw	r2, #315	; 0x13b
 800219e:	213c      	movs	r1, #60	; 0x3c
 80021a0:	2005      	movs	r0, #5
 80021a2:	f7ff f905 	bl	80013b0 <ILI9341_Fill_Rect>
	ILI9341_printText("Sensor2 : 0 mm", 50, 75, COLOR_WHITE, COLOR_ORANGE, 2);
 80021a6:	2302      	movs	r3, #2
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021b4:	224b      	movs	r2, #75	; 0x4b
 80021b6:	2132      	movs	r1, #50	; 0x32
 80021b8:	483e      	ldr	r0, [pc, #248]	; (80022b4 <HMI_init+0x174>)
 80021ba:	f7ff fc1f 	bl	80019fc <ILI9341_printText>

	char buf[20];
	sprintf(buf, "Soll: %.2f mm", pidController->get_setPoint(pidController));
 80021be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80021c4:	4798      	blx	r3
 80021c6:	ee10 3a10 	vmov	r3, s0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe f9c4 	bl	8000558 <__aeabi_f2d>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	f107 0010 	add.w	r0, r7, #16
 80021d8:	4937      	ldr	r1, [pc, #220]	; (80022b8 <HMI_init+0x178>)
 80021da:	f008 f8b1 	bl	800a340 <siprintf>

	ILI9341_Fill_Rect(5, 110, 315, 150, COLOR_BLUE);
 80021de:	231f      	movs	r3, #31
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2396      	movs	r3, #150	; 0x96
 80021e4:	f240 123b 	movw	r2, #315	; 0x13b
 80021e8:	216e      	movs	r1, #110	; 0x6e
 80021ea:	2005      	movs	r0, #5
 80021ec:	f7ff f8e0 	bl	80013b0 <ILI9341_Fill_Rect>
	ILI9341_printText(buf, 50, 120, COLOR_WHITE, COLOR_BLUE, 2);
 80021f0:	f107 0010 	add.w	r0, r7, #16
 80021f4:	2302      	movs	r3, #2
 80021f6:	9301      	str	r3, [sp, #4]
 80021f8:	231f      	movs	r3, #31
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002200:	2278      	movs	r2, #120	; 0x78
 8002202:	2132      	movs	r1, #50	; 0x32
 8002204:	f7ff fbfa 	bl	80019fc <ILI9341_printText>

	ILI9341_Fill_Rect(30, 160, 70, 200, COLOR_BLUE);
 8002208:	231f      	movs	r3, #31
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	23c8      	movs	r3, #200	; 0xc8
 800220e:	2246      	movs	r2, #70	; 0x46
 8002210:	21a0      	movs	r1, #160	; 0xa0
 8002212:	201e      	movs	r0, #30
 8002214:	f7ff f8cc 	bl	80013b0 <ILI9341_Fill_Rect>
	ILI9341_printText("UP", 45,  180, COLOR_WHITE, COLOR_BLUE, 1);
 8002218:	2301      	movs	r3, #1
 800221a:	9301      	str	r3, [sp, #4]
 800221c:	231f      	movs	r3, #31
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002224:	22b4      	movs	r2, #180	; 0xb4
 8002226:	212d      	movs	r1, #45	; 0x2d
 8002228:	4824      	ldr	r0, [pc, #144]	; (80022bc <HMI_init+0x17c>)
 800222a:	f7ff fbe7 	bl	80019fc <ILI9341_printText>

	ILI9341_Fill_Rect(80, 160, 120, 200, COLOR_BLUE);
 800222e:	231f      	movs	r3, #31
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	23c8      	movs	r3, #200	; 0xc8
 8002234:	2278      	movs	r2, #120	; 0x78
 8002236:	21a0      	movs	r1, #160	; 0xa0
 8002238:	2050      	movs	r0, #80	; 0x50
 800223a:	f7ff f8b9 	bl	80013b0 <ILI9341_Fill_Rect>
	ILI9341_printText("DOWN", 90,  180, COLOR_WHITE, COLOR_BLUE, 1);
 800223e:	2301      	movs	r3, #1
 8002240:	9301      	str	r3, [sp, #4]
 8002242:	231f      	movs	r3, #31
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800224a:	22b4      	movs	r2, #180	; 0xb4
 800224c:	215a      	movs	r1, #90	; 0x5a
 800224e:	481c      	ldr	r0, [pc, #112]	; (80022c0 <HMI_init+0x180>)
 8002250:	f7ff fbd4 	bl	80019fc <ILI9341_printText>

	ILI9341_Fill_Rect(180, 190, 300, 230, COLOR_RED);
 8002254:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	23e6      	movs	r3, #230	; 0xe6
 800225c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002260:	21be      	movs	r1, #190	; 0xbe
 8002262:	20b4      	movs	r0, #180	; 0xb4
 8002264:	f7ff f8a4 	bl	80013b0 <ILI9341_Fill_Rect>
	ILI9341_printText("IDLE", 230,  205, COLOR_WHITE, COLOR_RED, 2);
 8002268:	2302      	movs	r3, #2
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002276:	22cd      	movs	r2, #205	; 0xcd
 8002278:	21e6      	movs	r1, #230	; 0xe6
 800227a:	4812      	ldr	r0, [pc, #72]	; (80022c4 <HMI_init+0x184>)
 800227c:	f7ff fbbe 	bl	80019fc <ILI9341_printText>

	ILI9341_printText("REGELUNG", 195,  170, COLOR_BLACK, COLOR_WHITE, 2);
 8002280:	2302      	movs	r3, #2
 8002282:	9301      	str	r3, [sp, #4]
 8002284:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	2300      	movs	r3, #0
 800228c:	22aa      	movs	r2, #170	; 0xaa
 800228e:	21c3      	movs	r1, #195	; 0xc3
 8002290:	480d      	ldr	r0, [pc, #52]	; (80022c8 <HMI_init+0x188>)
 8002292:	f7ff fbb3 	bl	80019fc <ILI9341_printText>

	return hmi;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	461c      	mov	r4, r3
 800229a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	3734      	adds	r7, #52	; 0x34
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd90      	pop	{r4, r7, pc}
 80022ae:	bf00      	nop
 80022b0:	0800cfa0 	.word	0x0800cfa0
 80022b4:	0800cfb0 	.word	0x0800cfb0
 80022b8:	0800cfc0 	.word	0x0800cfc0
 80022bc:	0800cfd0 	.word	0x0800cfd0
 80022c0:	0800cfd4 	.word	0x0800cfd4
 80022c4:	0800cfdc 	.word	0x0800cfdc
 80022c8:	0800cfe4 	.word	0x0800cfe4

080022cc <HMI_checkBlob>:

int HMI_checkBlob(Hmi *hmi, TS_TOUCH_DATA_Def myTS_Handle, PIDController *pidController, int updateHMI){
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08c      	sub	sp, #48	; 0x30
 80022d0:	af02      	add	r7, sp, #8
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	1d38      	adds	r0, r7, #4
 80022d6:	e880 0006 	stmia.w	r0, {r1, r2}
 80022da:	603b      	str	r3, [r7, #0]
	if(hmi->HmiInformation.stateMachine->getBlobDetected(hmi->HmiInformation.stateMachine)==1)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	4610      	mov	r0, r2
 80022e8:	4798      	blx	r3
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	f040 80e3 	bne.w	80024b8 <HMI_checkBlob+0x1ec>
	{
		if(updateHMI ==1){
 80022f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d125      	bne.n	8002344 <HMI_checkBlob+0x78>
		ILI9341_Fill(COLOR_RED);
 80022f8:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80022fc:	f7ff f814 	bl	8001328 <ILI9341_Fill>
		ILI9341_Fill_Rect(110, 70, 210, 170, COLOR_WHITE);
 8002300:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	23aa      	movs	r3, #170	; 0xaa
 8002308:	22d2      	movs	r2, #210	; 0xd2
 800230a:	2146      	movs	r1, #70	; 0x46
 800230c:	206e      	movs	r0, #110	; 0x6e
 800230e:	f7ff f84f 	bl	80013b0 <ILI9341_Fill_Rect>
		ILI9341_printText("BLOB erkannt!", 90, 20, COLOR_WHITE, COLOR_RED, 2);
 8002312:	2302      	movs	r3, #2
 8002314:	9301      	str	r3, [sp, #4]
 8002316:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002320:	2214      	movs	r2, #20
 8002322:	215a      	movs	r1, #90	; 0x5a
 8002324:	4867      	ldr	r0, [pc, #412]	; (80024c4 <HMI_checkBlob+0x1f8>)
 8002326:	f7ff fb69 	bl	80019fc <ILI9341_printText>
		ILI9341_printText("OK", 145, 110, COLOR_BLACK, COLOR_WHITE, 3);
 800232a:	2303      	movs	r3, #3
 800232c:	9301      	str	r3, [sp, #4]
 800232e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	2300      	movs	r3, #0
 8002336:	226e      	movs	r2, #110	; 0x6e
 8002338:	2191      	movs	r1, #145	; 0x91
 800233a:	4863      	ldr	r0, [pc, #396]	; (80024c8 <HMI_checkBlob+0x1fc>)
 800233c:	f7ff fb5e 	bl	80019fc <ILI9341_printText>
		updateHMI = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	633b      	str	r3, [r7, #48]	; 0x30
		}
		if(myTS_Handle.isPressed)
 8002344:	793b      	ldrb	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 80b6 	beq.w	80024b8 <HMI_checkBlob+0x1ec>
		{
			if(myTS_Handle.X >=110 && myTS_Handle.X<=210 && myTS_Handle.Y>=70 && myTS_Handle.Y<=140)
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	2b6d      	cmp	r3, #109	; 0x6d
 8002350:	f240 80b2 	bls.w	80024b8 <HMI_checkBlob+0x1ec>
 8002354:	88fb      	ldrh	r3, [r7, #6]
 8002356:	2bd2      	cmp	r3, #210	; 0xd2
 8002358:	f200 80ae 	bhi.w	80024b8 <HMI_checkBlob+0x1ec>
 800235c:	893b      	ldrh	r3, [r7, #8]
 800235e:	2b45      	cmp	r3, #69	; 0x45
 8002360:	f240 80aa 	bls.w	80024b8 <HMI_checkBlob+0x1ec>
 8002364:	893b      	ldrh	r3, [r7, #8]
 8002366:	2b8c      	cmp	r3, #140	; 0x8c
 8002368:	f200 80a6 	bhi.w	80024b8 <HMI_checkBlob+0x1ec>
						{
						hmi->HmiInformation.stateMachine->setBlobDetected(hmi->HmiInformation.stateMachine,0);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	6812      	ldr	r2, [r2, #0]
 8002376:	2100      	movs	r1, #0
 8002378:	4610      	mov	r0, r2
 800237a:	4798      	blx	r3
						ILI9341_Fill(COLOR_WHITE);
 800237c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002380:	f7fe ffd2 	bl	8001328 <ILI9341_Fill>

						ILI9341_Fill_Rect(5, 10, 315, 50, COLOR_ORANGE);
 8002384:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	2332      	movs	r3, #50	; 0x32
 800238c:	f240 123b 	movw	r2, #315	; 0x13b
 8002390:	210a      	movs	r1, #10
 8002392:	2005      	movs	r0, #5
 8002394:	f7ff f80c 	bl	80013b0 <ILI9341_Fill_Rect>
						ILI9341_printText("Sensor1: 0 mm", 50, 25, COLOR_WHITE, COLOR_ORANGE, 2);
 8002398:	2302      	movs	r3, #2
 800239a:	9301      	str	r3, [sp, #4]
 800239c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023a6:	2219      	movs	r2, #25
 80023a8:	2132      	movs	r1, #50	; 0x32
 80023aa:	4848      	ldr	r0, [pc, #288]	; (80024cc <HMI_checkBlob+0x200>)
 80023ac:	f7ff fb26 	bl	80019fc <ILI9341_printText>

						ILI9341_Fill_Rect(5, 60, 315, 100, COLOR_ORANGE);
 80023b0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	2364      	movs	r3, #100	; 0x64
 80023b8:	f240 123b 	movw	r2, #315	; 0x13b
 80023bc:	213c      	movs	r1, #60	; 0x3c
 80023be:	2005      	movs	r0, #5
 80023c0:	f7fe fff6 	bl	80013b0 <ILI9341_Fill_Rect>
						ILI9341_printText("Sensor2 : 0 mm", 50, 75, COLOR_WHITE, COLOR_ORANGE, 2);
 80023c4:	2302      	movs	r3, #2
 80023c6:	9301      	str	r3, [sp, #4]
 80023c8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023d2:	224b      	movs	r2, #75	; 0x4b
 80023d4:	2132      	movs	r1, #50	; 0x32
 80023d6:	483e      	ldr	r0, [pc, #248]	; (80024d0 <HMI_checkBlob+0x204>)
 80023d8:	f7ff fb10 	bl	80019fc <ILI9341_printText>

						char buf[20];
						sprintf(buf, "Soll: %.2f mm", pidController->get_setPoint(pidController));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	6838      	ldr	r0, [r7, #0]
 80023e2:	4798      	blx	r3
 80023e4:	ee10 3a10 	vmov	r3, s0
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe f8b5 	bl	8000558 <__aeabi_f2d>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	f107 0014 	add.w	r0, r7, #20
 80023f6:	4937      	ldr	r1, [pc, #220]	; (80024d4 <HMI_checkBlob+0x208>)
 80023f8:	f007 ffa2 	bl	800a340 <siprintf>
						ILI9341_Fill_Rect(5, 110, 315, 150, COLOR_BLUE);
 80023fc:	231f      	movs	r3, #31
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	2396      	movs	r3, #150	; 0x96
 8002402:	f240 123b 	movw	r2, #315	; 0x13b
 8002406:	216e      	movs	r1, #110	; 0x6e
 8002408:	2005      	movs	r0, #5
 800240a:	f7fe ffd1 	bl	80013b0 <ILI9341_Fill_Rect>
						ILI9341_printText(buf, 50, 120, COLOR_WHITE, COLOR_BLUE, 2);
 800240e:	f107 0014 	add.w	r0, r7, #20
 8002412:	2302      	movs	r3, #2
 8002414:	9301      	str	r3, [sp, #4]
 8002416:	231f      	movs	r3, #31
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800241e:	2278      	movs	r2, #120	; 0x78
 8002420:	2132      	movs	r1, #50	; 0x32
 8002422:	f7ff faeb 	bl	80019fc <ILI9341_printText>

						ILI9341_Fill_Rect(30, 160, 70, 200, COLOR_BLUE);
 8002426:	231f      	movs	r3, #31
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	23c8      	movs	r3, #200	; 0xc8
 800242c:	2246      	movs	r2, #70	; 0x46
 800242e:	21a0      	movs	r1, #160	; 0xa0
 8002430:	201e      	movs	r0, #30
 8002432:	f7fe ffbd 	bl	80013b0 <ILI9341_Fill_Rect>
						ILI9341_printText("UP", 45,  180, COLOR_WHITE, COLOR_BLUE, 1);
 8002436:	2301      	movs	r3, #1
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	231f      	movs	r3, #31
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002442:	22b4      	movs	r2, #180	; 0xb4
 8002444:	212d      	movs	r1, #45	; 0x2d
 8002446:	4824      	ldr	r0, [pc, #144]	; (80024d8 <HMI_checkBlob+0x20c>)
 8002448:	f7ff fad8 	bl	80019fc <ILI9341_printText>

						ILI9341_Fill_Rect(80, 160, 120, 200, COLOR_BLUE);
 800244c:	231f      	movs	r3, #31
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	23c8      	movs	r3, #200	; 0xc8
 8002452:	2278      	movs	r2, #120	; 0x78
 8002454:	21a0      	movs	r1, #160	; 0xa0
 8002456:	2050      	movs	r0, #80	; 0x50
 8002458:	f7fe ffaa 	bl	80013b0 <ILI9341_Fill_Rect>
						ILI9341_printText("DOWN", 90,  180, COLOR_WHITE, COLOR_BLUE, 1);
 800245c:	2301      	movs	r3, #1
 800245e:	9301      	str	r3, [sp, #4]
 8002460:	231f      	movs	r3, #31
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002468:	22b4      	movs	r2, #180	; 0xb4
 800246a:	215a      	movs	r1, #90	; 0x5a
 800246c:	481b      	ldr	r0, [pc, #108]	; (80024dc <HMI_checkBlob+0x210>)
 800246e:	f7ff fac5 	bl	80019fc <ILI9341_printText>

						ILI9341_printText("REGELUNG", 195,  170, COLOR_BLACK, COLOR_WHITE, 2);
 8002472:	2302      	movs	r3, #2
 8002474:	9301      	str	r3, [sp, #4]
 8002476:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	2300      	movs	r3, #0
 800247e:	22aa      	movs	r2, #170	; 0xaa
 8002480:	21c3      	movs	r1, #195	; 0xc3
 8002482:	4817      	ldr	r0, [pc, #92]	; (80024e0 <HMI_checkBlob+0x214>)
 8002484:	f7ff faba 	bl	80019fc <ILI9341_printText>


						ILI9341_Fill_Rect(180, 190, 300, 230, COLOR_RED);
 8002488:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	23e6      	movs	r3, #230	; 0xe6
 8002490:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002494:	21be      	movs	r1, #190	; 0xbe
 8002496:	20b4      	movs	r0, #180	; 0xb4
 8002498:	f7fe ff8a 	bl	80013b0 <ILI9341_Fill_Rect>
						ILI9341_printText("IDLE", 230,  205, COLOR_WHITE, COLOR_RED, 2);
 800249c:	2302      	movs	r3, #2
 800249e:	9301      	str	r3, [sp, #4]
 80024a0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024aa:	22cd      	movs	r2, #205	; 0xcd
 80024ac:	21e6      	movs	r1, #230	; 0xe6
 80024ae:	480d      	ldr	r0, [pc, #52]	; (80024e4 <HMI_checkBlob+0x218>)
 80024b0:	f7ff faa4 	bl	80019fc <ILI9341_printText>
						updateHMI = 1;
 80024b4:	2301      	movs	r3, #1
 80024b6:	633b      	str	r3, [r7, #48]	; 0x30
						}
		}

	}
	return updateHMI;
 80024b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3728      	adds	r7, #40	; 0x28
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	0800cff0 	.word	0x0800cff0
 80024c8:	0800d000 	.word	0x0800d000
 80024cc:	0800d004 	.word	0x0800d004
 80024d0:	0800cfb0 	.word	0x0800cfb0
 80024d4:	0800cfc0 	.word	0x0800cfc0
 80024d8:	0800cfd0 	.word	0x0800cfd0
 80024dc:	0800cfd4 	.word	0x0800cfd4
 80024e0:	0800cfe4 	.word	0x0800cfe4
 80024e4:	0800cfdc 	.word	0x0800cfdc

080024e8 <HMI_getTouch>:


void HMI_getTouch(Hmi *hmi, TS_TOUCH_DATA_Def myTS_Handle, StateMachine *state, PIDController *pidController)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b092      	sub	sp, #72	; 0x48
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	1d38      	adds	r0, r7, #4
 80024f2:	e880 0006 	stmia.w	r0, {r1, r2}
 80024f6:	603b      	str	r3, [r7, #0]
	if(myTS_Handle.isPressed)
 80024f8:	793b      	ldrb	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 8110 	beq.w	8002720 <HMI_getTouch+0x238>
	{
		//Draw a point


		if(myTS_Handle.X >=30 && myTS_Handle.X<=70 && myTS_Handle.Y>=160 && myTS_Handle.Y<=200)
 8002500:	88fb      	ldrh	r3, [r7, #6]
 8002502:	2b1d      	cmp	r3, #29
 8002504:	d943      	bls.n	800258e <HMI_getTouch+0xa6>
 8002506:	88fb      	ldrh	r3, [r7, #6]
 8002508:	2b46      	cmp	r3, #70	; 0x46
 800250a:	d840      	bhi.n	800258e <HMI_getTouch+0xa6>
 800250c:	893b      	ldrh	r3, [r7, #8]
 800250e:	2b9f      	cmp	r3, #159	; 0x9f
 8002510:	d93d      	bls.n	800258e <HMI_getTouch+0xa6>
 8002512:	893b      	ldrh	r3, [r7, #8]
 8002514:	2bc8      	cmp	r3, #200	; 0xc8
 8002516:	d83a      	bhi.n	800258e <HMI_getTouch+0xa6>
		{
			float Soll = pidController->get_setPoint(pidController);
 8002518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800251e:	4798      	blx	r3
 8002520:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
			Soll = Soll + 0.05;
 8002524:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002526:	f7fe f817 	bl	8000558 <__aeabi_f2d>
 800252a:	a37f      	add	r3, pc, #508	; (adr r3, 8002728 <HMI_getTouch+0x240>)
 800252c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002530:	f7fd feb4 	bl	800029c <__adddf3>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4610      	mov	r0, r2
 800253a:	4619      	mov	r1, r3
 800253c:	f7fe fb5c 	bl	8000bf8 <__aeabi_d2f>
 8002540:	4603      	mov	r3, r0
 8002542:	63fb      	str	r3, [r7, #60]	; 0x3c
			pidController->set_setPoint(pidController,Soll);
 8002544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002548:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800254c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800254e:	4798      	blx	r3
			char buf[20];
			sprintf(buf, "Soll: %.2f mm", Soll);
 8002550:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002552:	f7fe f801 	bl	8000558 <__aeabi_f2d>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800255e:	4974      	ldr	r1, [pc, #464]	; (8002730 <HMI_getTouch+0x248>)
 8002560:	f007 feee 	bl	800a340 <siprintf>

			ILI9341_Fill_Rect(5, 110, 315, 150, COLOR_BLUE);
 8002564:	231f      	movs	r3, #31
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	2396      	movs	r3, #150	; 0x96
 800256a:	f240 123b 	movw	r2, #315	; 0x13b
 800256e:	216e      	movs	r1, #110	; 0x6e
 8002570:	2005      	movs	r0, #5
 8002572:	f7fe ff1d 	bl	80013b0 <ILI9341_Fill_Rect>
			ILI9341_printText(buf, 50, 120, COLOR_WHITE, COLOR_BLUE, 2);
 8002576:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800257a:	2302      	movs	r3, #2
 800257c:	9301      	str	r3, [sp, #4]
 800257e:	231f      	movs	r3, #31
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002586:	2278      	movs	r2, #120	; 0x78
 8002588:	2132      	movs	r1, #50	; 0x32
 800258a:	f7ff fa37 	bl	80019fc <ILI9341_printText>



		}

		if(myTS_Handle.X >=80 && myTS_Handle.X<=120 && myTS_Handle.Y>=160 && myTS_Handle.Y<=200)
 800258e:	88fb      	ldrh	r3, [r7, #6]
 8002590:	2b4f      	cmp	r3, #79	; 0x4f
 8002592:	d948      	bls.n	8002626 <HMI_getTouch+0x13e>
 8002594:	88fb      	ldrh	r3, [r7, #6]
 8002596:	2b78      	cmp	r3, #120	; 0x78
 8002598:	d845      	bhi.n	8002626 <HMI_getTouch+0x13e>
 800259a:	893b      	ldrh	r3, [r7, #8]
 800259c:	2b9f      	cmp	r3, #159	; 0x9f
 800259e:	d942      	bls.n	8002626 <HMI_getTouch+0x13e>
 80025a0:	893b      	ldrh	r3, [r7, #8]
 80025a2:	2bc8      	cmp	r3, #200	; 0xc8
 80025a4:	d83f      	bhi.n	8002626 <HMI_getTouch+0x13e>
		{
			float Soll = pidController->get_setPoint(pidController);
 80025a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80025ac:	4798      	blx	r3
 80025ae:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
			Soll = Soll - 0.05;
 80025b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80025b4:	f7fd ffd0 	bl	8000558 <__aeabi_f2d>
 80025b8:	a35b      	add	r3, pc, #364	; (adr r3, 8002728 <HMI_getTouch+0x240>)
 80025ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025be:	f7fd fe6b 	bl	8000298 <__aeabi_dsub>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	4610      	mov	r0, r2
 80025c8:	4619      	mov	r1, r3
 80025ca:	f7fe fb15 	bl	8000bf8 <__aeabi_d2f>
 80025ce:	4603      	mov	r3, r0
 80025d0:	63bb      	str	r3, [r7, #56]	; 0x38
			pidController->set_setPoint(pidController,Soll);
 80025d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d6:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80025da:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80025dc:	4798      	blx	r3

			char buf[20];
			sprintf(buf, "Soll: %.2f mm", Soll);
 80025de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80025e0:	f7fd ffba 	bl	8000558 <__aeabi_f2d>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	f107 0010 	add.w	r0, r7, #16
 80025ec:	4950      	ldr	r1, [pc, #320]	; (8002730 <HMI_getTouch+0x248>)
 80025ee:	f007 fea7 	bl	800a340 <siprintf>

			ILI9341_Fill_Rect(5, 110, 315, 150, COLOR_BLUE);
 80025f2:	231f      	movs	r3, #31
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	2396      	movs	r3, #150	; 0x96
 80025f8:	f240 123b 	movw	r2, #315	; 0x13b
 80025fc:	216e      	movs	r1, #110	; 0x6e
 80025fe:	2005      	movs	r0, #5
 8002600:	f7fe fed6 	bl	80013b0 <ILI9341_Fill_Rect>
			ILI9341_printText(buf, 50, 120, COLOR_WHITE, COLOR_BLUE, 2);
 8002604:	f107 0010 	add.w	r0, r7, #16
 8002608:	2302      	movs	r3, #2
 800260a:	9301      	str	r3, [sp, #4]
 800260c:	231f      	movs	r3, #31
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002614:	2278      	movs	r2, #120	; 0x78
 8002616:	2132      	movs	r1, #50	; 0x32
 8002618:	f7ff f9f0 	bl	80019fc <ILI9341_printText>



			HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
 800261c:	2200      	movs	r2, #0
 800261e:	2120      	movs	r1, #32
 8002620:	4844      	ldr	r0, [pc, #272]	; (8002734 <HMI_getTouch+0x24c>)
 8002622:	f002 fe9d 	bl	8005360 <HAL_GPIO_WritePin>
		}

		if(myTS_Handle.X >=180 && myTS_Handle.X<=300 && myTS_Handle.Y>=190 && myTS_Handle.Y<=230)
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	2bb3      	cmp	r3, #179	; 0xb3
 800262a:	d979      	bls.n	8002720 <HMI_getTouch+0x238>
 800262c:	88fb      	ldrh	r3, [r7, #6]
 800262e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002632:	d875      	bhi.n	8002720 <HMI_getTouch+0x238>
 8002634:	893b      	ldrh	r3, [r7, #8]
 8002636:	2bbd      	cmp	r3, #189	; 0xbd
 8002638:	d972      	bls.n	8002720 <HMI_getTouch+0x238>
 800263a:	893b      	ldrh	r3, [r7, #8]
 800263c:	2be6      	cmp	r3, #230	; 0xe6
 800263e:	d86f      	bhi.n	8002720 <HMI_getTouch+0x238>
		{
			if(hmi->HmiInformation.stateMachine->getState(hmi->HmiInformation.stateMachine) == STATE_IDLE){
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	6812      	ldr	r2, [r2, #0]
 800264a:	4610      	mov	r0, r2
 800264c:	4798      	blx	r3
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d11e      	bne.n	8002692 <HMI_getTouch+0x1aa>
				hmi->HmiInformation.stateMachine->changeState(hmi->HmiInformation.stateMachine, STATE_MANUAL_CONTROL);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	2101      	movs	r1, #1
 8002660:	4610      	mov	r0, r2
 8002662:	4798      	blx	r3
  				ILI9341_Fill_Rect(180, 190, 300, 230, COLOR_ORANGE);
 8002664:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	23e6      	movs	r3, #230	; 0xe6
 800266c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002670:	21be      	movs	r1, #190	; 0xbe
 8002672:	20b4      	movs	r0, #180	; 0xb4
 8002674:	f7fe fe9c 	bl	80013b0 <ILI9341_Fill_Rect>
  				ILI9341_printText("Manual", 230,  205, COLOR_WHITE, COLOR_ORANGE, 2);
 8002678:	2302      	movs	r3, #2
 800267a:	9301      	str	r3, [sp, #4]
 800267c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002686:	22cd      	movs	r2, #205	; 0xcd
 8002688:	21e6      	movs	r1, #230	; 0xe6
 800268a:	482b      	ldr	r0, [pc, #172]	; (8002738 <HMI_getTouch+0x250>)
 800268c:	f7ff f9b6 	bl	80019fc <ILI9341_printText>
			}
		}
	}


}
 8002690:	e046      	b.n	8002720 <HMI_getTouch+0x238>
			else if(hmi->HmiInformation.stateMachine->getState(hmi->HmiInformation.stateMachine) == STATE_MANUAL_CONTROL){
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	4610      	mov	r0, r2
 800269e:	4798      	blx	r3
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d11e      	bne.n	80026e4 <HMI_getTouch+0x1fc>
				hmi->HmiInformation.stateMachine->changeState(hmi->HmiInformation.stateMachine, STATE_AUTOMATIC_MODE);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	6812      	ldr	r2, [r2, #0]
 80026b0:	2102      	movs	r1, #2
 80026b2:	4610      	mov	r0, r2
 80026b4:	4798      	blx	r3
  				ILI9341_Fill_Rect(180, 190, 300, 230, COLOR_GREEN);
 80026b6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	23e6      	movs	r3, #230	; 0xe6
 80026be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026c2:	21be      	movs	r1, #190	; 0xbe
 80026c4:	20b4      	movs	r0, #180	; 0xb4
 80026c6:	f7fe fe73 	bl	80013b0 <ILI9341_Fill_Rect>
  				ILI9341_printText("Auto", 230,  205, COLOR_WHITE, COLOR_GREEN, 2);
 80026ca:	2302      	movs	r3, #2
 80026cc:	9301      	str	r3, [sp, #4]
 80026ce:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026d8:	22cd      	movs	r2, #205	; 0xcd
 80026da:	21e6      	movs	r1, #230	; 0xe6
 80026dc:	4817      	ldr	r0, [pc, #92]	; (800273c <HMI_getTouch+0x254>)
 80026de:	f7ff f98d 	bl	80019fc <ILI9341_printText>
}
 80026e2:	e01d      	b.n	8002720 <HMI_getTouch+0x238>
				hmi->HmiInformation.stateMachine->changeState(hmi->HmiInformation.stateMachine, STATE_IDLE);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	2100      	movs	r1, #0
 80026f0:	4610      	mov	r0, r2
 80026f2:	4798      	blx	r3
  				ILI9341_Fill_Rect(180, 190, 300, 230, COLOR_RED);
 80026f4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	23e6      	movs	r3, #230	; 0xe6
 80026fc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002700:	21be      	movs	r1, #190	; 0xbe
 8002702:	20b4      	movs	r0, #180	; 0xb4
 8002704:	f7fe fe54 	bl	80013b0 <ILI9341_Fill_Rect>
  				ILI9341_printText("Idle", 230,  205, COLOR_WHITE, COLOR_RED, 2);
 8002708:	2302      	movs	r3, #2
 800270a:	9301      	str	r3, [sp, #4]
 800270c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002716:	22cd      	movs	r2, #205	; 0xcd
 8002718:	21e6      	movs	r1, #230	; 0xe6
 800271a:	4809      	ldr	r0, [pc, #36]	; (8002740 <HMI_getTouch+0x258>)
 800271c:	f7ff f96e 	bl	80019fc <ILI9341_printText>
}
 8002720:	bf00      	nop
 8002722:	3740      	adds	r7, #64	; 0x40
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	9999999a 	.word	0x9999999a
 800272c:	3fa99999 	.word	0x3fa99999
 8002730:	0800cfc0 	.word	0x0800cfc0
 8002734:	40020000 	.word	0x40020000
 8002738:	0800d014 	.word	0x0800d014
 800273c:	0800d01c 	.word	0x0800d01c
 8002740:	0800d024 	.word	0x0800d024

08002744 <HMI_updateDisplaySensor>:

void HMI_updateDisplaySensor(float extruder, float back)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08e      	sub	sp, #56	; 0x38
 8002748:	af02      	add	r7, sp, #8
 800274a:	ed87 0a01 	vstr	s0, [r7, #4]
 800274e:	edc7 0a00 	vstr	s1, [r7]
	if(extruder >= 0 && extruder <5){
 8002752:	edd7 7a01 	vldr	s15, [r7, #4]
 8002756:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800275a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275e:	db29      	blt.n	80027b4 <HMI_updateDisplaySensor+0x70>
 8002760:	edd7 7a01 	vldr	s15, [r7, #4]
 8002764:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002768:	eef4 7ac7 	vcmpe.f32	s15, s14
 800276c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002770:	d520      	bpl.n	80027b4 <HMI_updateDisplaySensor+0x70>
		//float value1 = sensorExtruder->getDiameter(sensorExtruder);
		char buf1[20];
		sprintf(buf1, "Sensor Ext: %.2f mm", extruder);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7fd fef0 	bl	8000558 <__aeabi_f2d>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	f107 001c 	add.w	r0, r7, #28
 8002780:	4928      	ldr	r1, [pc, #160]	; (8002824 <HMI_updateDisplaySensor+0xe0>)
 8002782:	f007 fddd 	bl	800a340 <siprintf>


		ILI9341_Fill_Rect(5, 10, 315, 50, COLOR_ORANGE);
 8002786:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	2332      	movs	r3, #50	; 0x32
 800278e:	f240 123b 	movw	r2, #315	; 0x13b
 8002792:	210a      	movs	r1, #10
 8002794:	2005      	movs	r0, #5
 8002796:	f7fe fe0b 	bl	80013b0 <ILI9341_Fill_Rect>
		ILI9341_printText(buf1, 50, 25, COLOR_WHITE, COLOR_ORANGE, 2);
 800279a:	f107 001c 	add.w	r0, r7, #28
 800279e:	2302      	movs	r3, #2
 80027a0:	9301      	str	r3, [sp, #4]
 80027a2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027ac:	2219      	movs	r2, #25
 80027ae:	2132      	movs	r1, #50	; 0x32
 80027b0:	f7ff f924 	bl	80019fc <ILI9341_printText>
	}
	if (back >= 0 && back <5){
 80027b4:	edd7 7a00 	vldr	s15, [r7]
 80027b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c0:	da00      	bge.n	80027c4 <HMI_updateDisplaySensor+0x80>

		ILI9341_Fill_Rect(5, 60, 315, 100, COLOR_ORANGE);
		ILI9341_printText(buf2, 50, 75, COLOR_WHITE, COLOR_ORANGE, 2);
	}

}
 80027c2:	e02a      	b.n	800281a <HMI_updateDisplaySensor+0xd6>
	if (back >= 0 && back <5){
 80027c4:	edd7 7a00 	vldr	s15, [r7]
 80027c8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80027cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d4:	d400      	bmi.n	80027d8 <HMI_updateDisplaySensor+0x94>
}
 80027d6:	e020      	b.n	800281a <HMI_updateDisplaySensor+0xd6>
		sprintf(buf2, "Sensor B: %.2f mm", back);
 80027d8:	6838      	ldr	r0, [r7, #0]
 80027da:	f7fd febd 	bl	8000558 <__aeabi_f2d>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	f107 0008 	add.w	r0, r7, #8
 80027e6:	4910      	ldr	r1, [pc, #64]	; (8002828 <HMI_updateDisplaySensor+0xe4>)
 80027e8:	f007 fdaa 	bl	800a340 <siprintf>
		ILI9341_Fill_Rect(5, 60, 315, 100, COLOR_ORANGE);
 80027ec:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	2364      	movs	r3, #100	; 0x64
 80027f4:	f240 123b 	movw	r2, #315	; 0x13b
 80027f8:	213c      	movs	r1, #60	; 0x3c
 80027fa:	2005      	movs	r0, #5
 80027fc:	f7fe fdd8 	bl	80013b0 <ILI9341_Fill_Rect>
		ILI9341_printText(buf2, 50, 75, COLOR_WHITE, COLOR_ORANGE, 2);
 8002800:	f107 0008 	add.w	r0, r7, #8
 8002804:	2302      	movs	r3, #2
 8002806:	9301      	str	r3, [sp, #4]
 8002808:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002812:	224b      	movs	r2, #75	; 0x4b
 8002814:	2132      	movs	r1, #50	; 0x32
 8002816:	f7ff f8f1 	bl	80019fc <ILI9341_printText>
}
 800281a:	bf00      	nop
 800281c:	3730      	adds	r7, #48	; 0x30
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	0800d02c 	.word	0x0800d02c
 8002828:	0800d040 	.word	0x0800d040

0800282c <HMI_signallight_check_blob>:
// TODO: ADD IMPLEMENTATION FOR SIGNALLIGHT

// HMI_signallight_check_blob.c
#include "HMI/signallight_control.h"

void HMI_signallight_check_blob(StateMachine* stateMachine, uint16_t pin, float diameter, float on, float off) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6178      	str	r0, [r7, #20]
 8002834:	460b      	mov	r3, r1
 8002836:	ed87 0a03 	vstr	s0, [r7, #12]
 800283a:	edc7 0a02 	vstr	s1, [r7, #8]
 800283e:	ed87 1a01 	vstr	s2, [r7, #4]
 8002842:	827b      	strh	r3, [r7, #18]
    if (diameter >= on) {
 8002844:	ed97 7a03 	vldr	s14, [r7, #12]
 8002848:	edd7 7a02 	vldr	s15, [r7, #8]
 800284c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002854:	db0a      	blt.n	800286c <HMI_signallight_check_blob+0x40>
        HAL_GPIO_WritePin(GPIOC, pin, GPIO_PIN_SET);
 8002856:	8a7b      	ldrh	r3, [r7, #18]
 8002858:	2201      	movs	r2, #1
 800285a:	4619      	mov	r1, r3
 800285c:	4810      	ldr	r0, [pc, #64]	; (80028a0 <HMI_signallight_check_blob+0x74>)
 800285e:	f002 fd7f 	bl	8005360 <HAL_GPIO_WritePin>
        stateMachine->setBlobDetected(stateMachine,1);
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	2101      	movs	r1, #1
 8002868:	6978      	ldr	r0, [r7, #20]
 800286a:	4798      	blx	r3
    }

    if (diameter <= off) {
 800286c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002870:	edd7 7a01 	vldr	s15, [r7, #4]
 8002874:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800287c:	d900      	bls.n	8002880 <HMI_signallight_check_blob+0x54>
        HAL_GPIO_WritePin(GPIOC, pin, GPIO_PIN_RESET);
        stateMachine->setBlobDetected(stateMachine,0);
    }
}
 800287e:	e00a      	b.n	8002896 <HMI_signallight_check_blob+0x6a>
        HAL_GPIO_WritePin(GPIOC, pin, GPIO_PIN_RESET);
 8002880:	8a7b      	ldrh	r3, [r7, #18]
 8002882:	2200      	movs	r2, #0
 8002884:	4619      	mov	r1, r3
 8002886:	4806      	ldr	r0, [pc, #24]	; (80028a0 <HMI_signallight_check_blob+0x74>)
 8002888:	f002 fd6a 	bl	8005360 <HAL_GPIO_WritePin>
        stateMachine->setBlobDetected(stateMachine,0);
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	2100      	movs	r1, #0
 8002892:	6978      	ldr	r0, [r7, #20]
 8002894:	4798      	blx	r3
}
 8002896:	bf00      	nop
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40020800 	.word	0x40020800

080028a4 <createPcReceiveHandler>:
PcReceiveHandler createPcReceiveHandler(StateMachine*  stateMachine,
										PIDController* controller,
		   								Motor* motor,
		   								PcSendHandler* sender,
		   								UART_HandleTypeDef* uart3)
{
 80028a4:	b5b0      	push	{r4, r5, r7, lr}
 80028a6:	b08a      	sub	sp, #40	; 0x28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
 80028b0:	603b      	str	r3, [r7, #0]
    PcReceiveHandler handler;
    handler.stateMachine	= stateMachine;
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	613b      	str	r3, [r7, #16]
    handler.pidController 	= controller;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	617b      	str	r3, [r7, #20]
    handler.motor 			= motor;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	61bb      	str	r3, [r7, #24]
    handler.sender 			= sender;
 80028be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c0:	61fb      	str	r3, [r7, #28]
    handler.uart3 			= uart3;
 80028c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028c4:	623b      	str	r3, [r7, #32]

    // Zuweisung der globalen Variable
    gPcHandler = handler;
 80028c6:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <createPcReceiveHandler+0x5c>)
 80028c8:	461d      	mov	r5, r3
 80028ca:	f107 0410 	add.w	r4, r7, #16
 80028ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028d6:	e885 0003 	stmia.w	r5, {r0, r1}

    handler.uartProcessor = createUartProcessor(pc_interface_dictionary);
 80028da:	480a      	ldr	r0, [pc, #40]	; (8002904 <createPcReceiveHandler+0x60>)
 80028dc:	f000 fe8c 	bl	80035f8 <createUartProcessor>
 80028e0:	6278      	str	r0, [r7, #36]	; 0x24
    return handler;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	461d      	mov	r5, r3
 80028e6:	f107 0410 	add.w	r4, r7, #16
 80028ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028f2:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	3728      	adds	r7, #40	; 0x28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bdb0      	pop	{r4, r5, r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000350 	.word	0x20000350
 8002904:	20000004 	.word	0x20000004

08002908 <handleSetSpeed>:

// Handle-Methods
void handleSetSpeed(uint8_t uartNr, const char* value){
 8002908:	b5b0      	push	{r4, r5, r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	6039      	str	r1, [r7, #0]
 8002912:	71fb      	strb	r3, [r7, #7]
	if(gPcHandler.stateMachine->getState(gPcHandler.stateMachine) == STATE_MANUAL_CONTROL){
 8002914:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <handleSetSpeed+0x4c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	4a0e      	ldr	r2, [pc, #56]	; (8002954 <handleSetSpeed+0x4c>)
 800291c:	6812      	ldr	r2, [r2, #0]
 800291e:	4610      	mov	r0, r2
 8002920:	4798      	blx	r3
 8002922:	4603      	mov	r3, r0
 8002924:	2b01      	cmp	r3, #1
 8002926:	d110      	bne.n	800294a <handleSetSpeed+0x42>
		gPcHandler.motor->setSpeed(gPcHandler.motor,extractFloatValue(3,value));
 8002928:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <handleSetSpeed+0x4c>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	68dc      	ldr	r4, [r3, #12]
 800292e:	4b09      	ldr	r3, [pc, #36]	; (8002954 <handleSetSpeed+0x4c>)
 8002930:	689d      	ldr	r5, [r3, #8]
 8002932:	6839      	ldr	r1, [r7, #0]
 8002934:	2003      	movs	r0, #3
 8002936:	f000 f933 	bl	8002ba0 <extractFloatValue>
 800293a:	eef0 7a40 	vmov.f32	s15, s0
 800293e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002942:	ee17 1a90 	vmov	r1, s15
 8002946:	4628      	mov	r0, r5
 8002948:	47a0      	blx	r4
	}

}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bdb0      	pop	{r4, r5, r7, pc}
 8002952:	bf00      	nop
 8002954:	20000350 	.word	0x20000350

08002958 <handleSetState>:


void handleSetState(uint8_t uartNr, const char* value){
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	6039      	str	r1, [r7, #0]
 8002962:	71fb      	strb	r3, [r7, #7]
	int state = extractIntValue(3, value);
 8002964:	6839      	ldr	r1, [r7, #0]
 8002966:	2003      	movs	r0, #3
 8002968:	f000 f9a6 	bl	8002cb8 <extractIntValue>
 800296c:	60b8      	str	r0, [r7, #8]
	State s = STATE_IDLE;
 800296e:	2300      	movs	r3, #0
 8002970:	73fb      	strb	r3, [r7, #15]
	if(state == 1){
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d102      	bne.n	800297e <handleSetState+0x26>
		s = STATE_MANUAL_CONTROL;
 8002978:	2301      	movs	r3, #1
 800297a:	73fb      	strb	r3, [r7, #15]
 800297c:	e004      	b.n	8002988 <handleSetState+0x30>
	}else if(state ==2){
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b02      	cmp	r3, #2
 8002982:	d101      	bne.n	8002988 <handleSetState+0x30>
		s = STATE_AUTOMATIC_MODE;
 8002984:	2302      	movs	r3, #2
 8002986:	73fb      	strb	r3, [r7, #15]
	}

	gPcHandler.stateMachine->changeState(gPcHandler.stateMachine,s);
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <handleSetState+0x48>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	4a04      	ldr	r2, [pc, #16]	; (80029a0 <handleSetState+0x48>)
 8002990:	6812      	ldr	r2, [r2, #0]
 8002992:	7bf9      	ldrb	r1, [r7, #15]
 8002994:	4610      	mov	r0, r2
 8002996:	4798      	blx	r3
}
 8002998:	bf00      	nop
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20000350 	.word	0x20000350

080029a4 <handleSetCP>:

void handleSetCP(uint8_t uartNr, const char* value){
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	6039      	str	r1, [r7, #0]
 80029ae:	71fb      	strb	r3, [r7, #7]
	float kp = extractFloatValue(3, value);
 80029b0:	6839      	ldr	r1, [r7, #0]
 80029b2:	2003      	movs	r0, #3
 80029b4:	f000 f8f4 	bl	8002ba0 <extractFloatValue>
 80029b8:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.pidController->set_kp(gPcHandler.pidController,kp);
 80029bc:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <handleSetCP+0x34>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c2:	4a05      	ldr	r2, [pc, #20]	; (80029d8 <handleSetCP+0x34>)
 80029c4:	6852      	ldr	r2, [r2, #4]
 80029c6:	ed97 0a03 	vldr	s0, [r7, #12]
 80029ca:	4610      	mov	r0, r2
 80029cc:	4798      	blx	r3
}
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000350 	.word	0x20000350

080029dc <handleSetCI>:
void handleSetCI(uint8_t uartNr, const char* value){
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	6039      	str	r1, [r7, #0]
 80029e6:	71fb      	strb	r3, [r7, #7]
	float ki = extractFloatValue(3, value);
 80029e8:	6839      	ldr	r1, [r7, #0]
 80029ea:	2003      	movs	r0, #3
 80029ec:	f000 f8d8 	bl	8002ba0 <extractFloatValue>
 80029f0:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.pidController->set_ki(gPcHandler.pidController,ki);
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <handleSetCI+0x34>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fa:	4a05      	ldr	r2, [pc, #20]	; (8002a10 <handleSetCI+0x34>)
 80029fc:	6852      	ldr	r2, [r2, #4]
 80029fe:	ed97 0a03 	vldr	s0, [r7, #12]
 8002a02:	4610      	mov	r0, r2
 8002a04:	4798      	blx	r3
}
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000350 	.word	0x20000350

08002a14 <handleSetCD>:
void handleSetCD(uint8_t uartNr, const char* value){
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	6039      	str	r1, [r7, #0]
 8002a1e:	71fb      	strb	r3, [r7, #7]
	float kd = extractFloatValue(3, value);
 8002a20:	6839      	ldr	r1, [r7, #0]
 8002a22:	2003      	movs	r0, #3
 8002a24:	f000 f8bc 	bl	8002ba0 <extractFloatValue>
 8002a28:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.pidController->set_kd(gPcHandler.pidController,kd);
 8002a2c:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <handleSetCD+0x34>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	4a05      	ldr	r2, [pc, #20]	; (8002a48 <handleSetCD+0x34>)
 8002a34:	6852      	ldr	r2, [r2, #4]
 8002a36:	ed97 0a03 	vldr	s0, [r7, #12]
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	4798      	blx	r3
}
 8002a3e:	bf00      	nop
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000350 	.word	0x20000350

08002a4c <handleGetState>:

void handleGetState(uint8_t uartNr, const char* value){
 8002a4c:	b5b0      	push	{r4, r5, r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	6039      	str	r1, [r7, #0]
 8002a56:	71fb      	strb	r3, [r7, #7]
	gPcHandler.sender->interface.sendState(gPcHandler.uart3,gPcHandler.stateMachine->getState(gPcHandler.stateMachine));
 8002a58:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <handleGetState+0x34>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	689c      	ldr	r4, [r3, #8]
 8002a5e:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <handleGetState+0x34>)
 8002a60:	691d      	ldr	r5, [r3, #16]
 8002a62:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <handleGetState+0x34>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	4a05      	ldr	r2, [pc, #20]	; (8002a80 <handleGetState+0x34>)
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	4798      	blx	r3
 8002a70:	4603      	mov	r3, r0
 8002a72:	4619      	mov	r1, r3
 8002a74:	4628      	mov	r0, r5
 8002a76:	47a0      	blx	r4
}
 8002a78:	bf00      	nop
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a80:	20000350 	.word	0x20000350

08002a84 <handleGetSpeed>:
void handleGetSpeed(uint8_t uartNr, const char* value){
 8002a84:	b5b0      	push	{r4, r5, r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	6039      	str	r1, [r7, #0]
 8002a8e:	71fb      	strb	r3, [r7, #7]
	gPcHandler.sender->interface.sendSpeed(gPcHandler.uart3,gPcHandler.motor->getSpeed(gPcHandler.motor));
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <handleGetSpeed+0x3c>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	68dc      	ldr	r4, [r3, #12]
 8002a96:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <handleGetSpeed+0x3c>)
 8002a98:	691d      	ldr	r5, [r3, #16]
 8002a9a:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <handleGetSpeed+0x3c>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	4a07      	ldr	r2, [pc, #28]	; (8002ac0 <handleGetSpeed+0x3c>)
 8002aa2:	6892      	ldr	r2, [r2, #8]
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	4798      	blx	r3
 8002aa8:	ee07 0a90 	vmov	s15, r0
 8002aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ab4:	4628      	mov	r0, r5
 8002ab6:	47a0      	blx	r4
}
 8002ab8:	bf00      	nop
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bdb0      	pop	{r4, r5, r7, pc}
 8002ac0:	20000350 	.word	0x20000350

08002ac4 <handleGetCP>:
void handleGetCP(uint8_t uartNr, const char* value){
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	6039      	str	r1, [r7, #0]
 8002ace:	71fb      	strb	r3, [r7, #7]
	float kp = gPcHandler.pidController->get_kp(gPcHandler.pidController);
 8002ad0:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <handleGetCP+0x38>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	4a09      	ldr	r2, [pc, #36]	; (8002afc <handleGetCP+0x38>)
 8002ad8:	6852      	ldr	r2, [r2, #4]
 8002ada:	4610      	mov	r0, r2
 8002adc:	4798      	blx	r3
 8002ade:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.sender->interface.sendCPvalue(gPcHandler.uart3,kp);
 8002ae2:	4b06      	ldr	r3, [pc, #24]	; (8002afc <handleGetCP+0x38>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	4a04      	ldr	r2, [pc, #16]	; (8002afc <handleGetCP+0x38>)
 8002aea:	6912      	ldr	r2, [r2, #16]
 8002aec:	ed97 0a03 	vldr	s0, [r7, #12]
 8002af0:	4610      	mov	r0, r2
 8002af2:	4798      	blx	r3
}
 8002af4:	bf00      	nop
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20000350 	.word	0x20000350

08002b00 <handleGetCI>:
void handleGetCI(uint8_t uartNr, const char* value){
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	6039      	str	r1, [r7, #0]
 8002b0a:	71fb      	strb	r3, [r7, #7]
	float ki = gPcHandler.pidController->get_ki(gPcHandler.pidController);
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <handleGetCI+0x38>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	4a09      	ldr	r2, [pc, #36]	; (8002b38 <handleGetCI+0x38>)
 8002b14:	6852      	ldr	r2, [r2, #4]
 8002b16:	4610      	mov	r0, r2
 8002b18:	4798      	blx	r3
 8002b1a:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.sender->interface.sendCIvalue(gPcHandler.uart3,ki);
 8002b1e:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <handleGetCI+0x38>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	4a04      	ldr	r2, [pc, #16]	; (8002b38 <handleGetCI+0x38>)
 8002b26:	6912      	ldr	r2, [r2, #16]
 8002b28:	ed97 0a03 	vldr	s0, [r7, #12]
 8002b2c:	4610      	mov	r0, r2
 8002b2e:	4798      	blx	r3
}
 8002b30:	bf00      	nop
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20000350 	.word	0x20000350

08002b3c <handleGetCD>:
void handleGetCD(uint8_t uartNr, const char* value){
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	6039      	str	r1, [r7, #0]
 8002b46:	71fb      	strb	r3, [r7, #7]
	float kd = gPcHandler.pidController->get_kd(gPcHandler.pidController);
 8002b48:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <handleGetCD+0x38>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	4a09      	ldr	r2, [pc, #36]	; (8002b74 <handleGetCD+0x38>)
 8002b50:	6852      	ldr	r2, [r2, #4]
 8002b52:	4610      	mov	r0, r2
 8002b54:	4798      	blx	r3
 8002b56:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.sender->interface.sendCDvalue(gPcHandler.uart3,kd);
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <handleGetCD+0x38>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	4a04      	ldr	r2, [pc, #16]	; (8002b74 <handleGetCD+0x38>)
 8002b62:	6912      	ldr	r2, [r2, #16]
 8002b64:	ed97 0a03 	vldr	s0, [r7, #12]
 8002b68:	4610      	mov	r0, r2
 8002b6a:	4798      	blx	r3
}
 8002b6c:	bf00      	nop
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	20000350 	.word	0x20000350

08002b78 <processPcInterfaceMessage>:

void processPcInterfaceMessage(PcReceiveHandler* handler,uint8_t* receivedData, uint8_t receivedDataIndex){
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	4613      	mov	r3, r2
 8002b84:	71fb      	strb	r3, [r7, #7]
	processCommand(3, &(handler->uartProcessor), receivedData, receivedDataIndex);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f103 0114 	add.w	r1, r3, #20
 8002b8c:	79fb      	ldrb	r3, [r7, #7]
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	2003      	movs	r0, #3
 8002b92:	f000 fd6f 	bl	8003674 <processCommand>
}
 8002b96:	bf00      	nop
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <extractFloatValue>:

float extractFloatValue(uint8_t uartNr, const char* value) {
 8002ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ba4:	b089      	sub	sp, #36	; 0x24
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	4603      	mov	r3, r0
 8002baa:	6039      	str	r1, [r7, #0]
 8002bac:	71fb      	strb	r3, [r7, #7]
    int length = strlen(value);
 8002bae:	6838      	ldr	r0, [r7, #0]
 8002bb0:	f7fd fb66 	bl	8000280 <strlen>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	613b      	str	r3, [r7, #16]
    int startIndex = -1;  // Index des ersten Leerzeichens
 8002bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bbc:	61fb      	str	r3, [r7, #28]
    int endIndex = -1;    // Index des zweiten Leerzeichens
 8002bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc2:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < length; i++) {
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	e019      	b.n	8002bfe <extractFloatValue+0x5e>
        if (value[i] == ' ' || value[i] == '\r') {
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	4413      	add	r3, r2
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b20      	cmp	r3, #32
 8002bd4:	d005      	beq.n	8002be2 <extractFloatValue+0x42>
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	4413      	add	r3, r2
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b0d      	cmp	r3, #13
 8002be0:	d10a      	bne.n	8002bf8 <extractFloatValue+0x58>
            if (startIndex == -1) {
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be8:	d103      	bne.n	8002bf2 <extractFloatValue+0x52>
                startIndex = i + 1;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	3301      	adds	r3, #1
 8002bee:	61fb      	str	r3, [r7, #28]
 8002bf0:	e002      	b.n	8002bf8 <extractFloatValue+0x58>
            } else {
                endIndex = i;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	61bb      	str	r3, [r7, #24]
                break;
 8002bf6:	e006      	b.n	8002c06 <extractFloatValue+0x66>
    for (int i = 0; i < length; i++) {
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	dbe1      	blt.n	8002bca <extractFloatValue+0x2a>
            }
        }
    }
    if (startIndex != -1 && endIndex != -1 && startIndex < endIndex) {
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d04a      	beq.n	8002ca4 <extractFloatValue+0x104>
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c14:	d046      	beq.n	8002ca4 <extractFloatValue+0x104>
 8002c16:	69fa      	ldr	r2, [r7, #28]
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	da42      	bge.n	8002ca4 <extractFloatValue+0x104>
 8002c1e:	466b      	mov	r3, sp
 8002c20:	461e      	mov	r6, r3
        char floatStr[endIndex - startIndex + 1];
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	1c59      	adds	r1, r3, #1
 8002c2a:	1e4b      	subs	r3, r1, #1
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	460a      	mov	r2, r1
 8002c30:	2300      	movs	r3, #0
 8002c32:	4690      	mov	r8, r2
 8002c34:	4699      	mov	r9, r3
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c4a:	460a      	mov	r2, r1
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	4614      	mov	r4, r2
 8002c50:	461d      	mov	r5, r3
 8002c52:	f04f 0200 	mov.w	r2, #0
 8002c56:	f04f 0300 	mov.w	r3, #0
 8002c5a:	00eb      	lsls	r3, r5, #3
 8002c5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c60:	00e2      	lsls	r2, r4, #3
 8002c62:	460b      	mov	r3, r1
 8002c64:	3307      	adds	r3, #7
 8002c66:	08db      	lsrs	r3, r3, #3
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	ebad 0d03 	sub.w	sp, sp, r3
 8002c6e:	466b      	mov	r3, sp
 8002c70:	3300      	adds	r3, #0
 8002c72:	60bb      	str	r3, [r7, #8]
        strncpy(floatStr, value + startIndex, endIndex - startIndex);
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	18d1      	adds	r1, r2, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	461a      	mov	r2, r3
 8002c82:	68b8      	ldr	r0, [r7, #8]
 8002c84:	f007 fbd9 	bl	800a43a <strncpy>
        floatStr[endIndex - startIndex] = '\0';
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	2100      	movs	r1, #0
 8002c92:	54d1      	strb	r1, [r2, r3]
        return strtof(floatStr, NULL);
 8002c94:	2100      	movs	r1, #0
 8002c96:	68b8      	ldr	r0, [r7, #8]
 8002c98:	f006 fb1c 	bl	80092d4 <strtof>
 8002c9c:	eef0 7a40 	vmov.f32	s15, s0
 8002ca0:	46b5      	mov	sp, r6
 8002ca2:	e001      	b.n	8002ca8 <extractFloatValue+0x108>
    }
    return 0.00;
 8002ca4:	eddf 7a03 	vldr	s15, [pc, #12]	; 8002cb4 <extractFloatValue+0x114>
}
 8002ca8:	eeb0 0a67 	vmov.f32	s0, s15
 8002cac:	3724      	adds	r7, #36	; 0x24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002cb4:	00000000 	.word	0x00000000

08002cb8 <extractIntValue>:
int extractIntValue(uint8_t uartNr, const char* value) {
 8002cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002cbc:	b089      	sub	sp, #36	; 0x24
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	6039      	str	r1, [r7, #0]
 8002cc4:	71fb      	strb	r3, [r7, #7]
    int length = strlen(value);
 8002cc6:	6838      	ldr	r0, [r7, #0]
 8002cc8:	f7fd fada 	bl	8000280 <strlen>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	613b      	str	r3, [r7, #16]
    int startIndex = -1;  // Index des ersten Leerzeichens
 8002cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd4:	61fb      	str	r3, [r7, #28]
    int endIndex = -1;    // Index des zweiten Leerzeichens
 8002cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cda:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < length; i++) {
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	e019      	b.n	8002d16 <extractIntValue+0x5e>
        if (value[i] == ' ' || value[i] == '\r') {
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b20      	cmp	r3, #32
 8002cec:	d005      	beq.n	8002cfa <extractIntValue+0x42>
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b0d      	cmp	r3, #13
 8002cf8:	d10a      	bne.n	8002d10 <extractIntValue+0x58>
            if (startIndex == -1) {
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d00:	d103      	bne.n	8002d0a <extractIntValue+0x52>
                startIndex = i + 1;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	3301      	adds	r3, #1
 8002d06:	61fb      	str	r3, [r7, #28]
 8002d08:	e002      	b.n	8002d10 <extractIntValue+0x58>
            } else {
                endIndex = i;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	61bb      	str	r3, [r7, #24]
                break;
 8002d0e:	e006      	b.n	8002d1e <extractIntValue+0x66>
    for (int i = 0; i < length; i++) {
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	3301      	adds	r3, #1
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	dbe1      	blt.n	8002ce2 <extractIntValue+0x2a>
            }
        }
    }
    if (startIndex != -1 && endIndex != -1 && startIndex < endIndex) {
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d24:	d048      	beq.n	8002db8 <extractIntValue+0x100>
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2c:	d044      	beq.n	8002db8 <extractIntValue+0x100>
 8002d2e:	69fa      	ldr	r2, [r7, #28]
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	da40      	bge.n	8002db8 <extractIntValue+0x100>
 8002d36:	466b      	mov	r3, sp
 8002d38:	461e      	mov	r6, r3
        char intStr[endIndex - startIndex + 1];
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	1c59      	adds	r1, r3, #1
 8002d42:	1e4b      	subs	r3, r1, #1
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	460a      	mov	r2, r1
 8002d48:	2300      	movs	r3, #0
 8002d4a:	4690      	mov	r8, r2
 8002d4c:	4699      	mov	r9, r3
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d62:	460a      	mov	r2, r1
 8002d64:	2300      	movs	r3, #0
 8002d66:	4614      	mov	r4, r2
 8002d68:	461d      	mov	r5, r3
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	00eb      	lsls	r3, r5, #3
 8002d74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d78:	00e2      	lsls	r2, r4, #3
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	3307      	adds	r3, #7
 8002d7e:	08db      	lsrs	r3, r3, #3
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	ebad 0d03 	sub.w	sp, sp, r3
 8002d86:	466b      	mov	r3, sp
 8002d88:	3300      	adds	r3, #0
 8002d8a:	60bb      	str	r3, [r7, #8]
        strncpy(intStr, value + startIndex, endIndex - startIndex);
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	18d1      	adds	r1, r2, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	461a      	mov	r2, r3
 8002d9a:	68b8      	ldr	r0, [r7, #8]
 8002d9c:	f007 fb4d 	bl	800a43a <strncpy>
        intStr[endIndex - startIndex] = '\0';
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	2100      	movs	r1, #0
 8002daa:	54d1      	strb	r1, [r2, r3]
        return atoi(intStr);
 8002dac:	68b8      	ldr	r0, [r7, #8]
 8002dae:	f005 fc7b 	bl	80086a8 <atoi>
 8002db2:	4603      	mov	r3, r0
 8002db4:	46b5      	mov	sp, r6
 8002db6:	e000      	b.n	8002dba <extractIntValue+0x102>
    }
    return 0;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3724      	adds	r7, #36	; 0x24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002dc4 <sendDiamExt_impl>:
#include <stdio.h>
#include <string.h>


// Implementierung der Interface methoden
void sendDiamExt_impl(UART_HandleTypeDef *huart,float value) {
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08a      	sub	sp, #40	; 0x28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	ed87 0a00 	vstr	s0, [r7]
	uint8_t tag[] = "DIAMEXT ";
 8002dd0:	4a21      	ldr	r2, [pc, #132]	; (8002e58 <sendDiamExt_impl+0x94>)
 8002dd2:	f107 031c 	add.w	r3, r7, #28
 8002dd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002dd8:	c303      	stmia	r3!, {r0, r1}
 8002dda:	701a      	strb	r2, [r3, #0]
	uint8_t diameter[10];
	uint8_t endTag[] = " /r/n";
 8002ddc:	4a1f      	ldr	r2, [pc, #124]	; (8002e5c <sendDiamExt_impl+0x98>)
 8002dde:	f107 0308 	add.w	r3, r7, #8
 8002de2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002de6:	6018      	str	r0, [r3, #0]
 8002de8:	3304      	adds	r3, #4
 8002dea:	8019      	strh	r1, [r3, #0]

	sprintf((char *)diameter, "%.2f", value);
 8002dec:	6838      	ldr	r0, [r7, #0]
 8002dee:	f7fd fbb3 	bl	8000558 <__aeabi_f2d>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	f107 0010 	add.w	r0, r7, #16
 8002dfa:	4919      	ldr	r1, [pc, #100]	; (8002e60 <sendDiamExt_impl+0x9c>)
 8002dfc:	f007 faa0 	bl	800a340 <siprintf>

	HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 8002e00:	f107 031c 	add.w	r3, r7, #28
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fd fa3b 	bl	8000280 <strlen>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	f107 011c 	add.w	r1, r7, #28
 8002e12:	230a      	movs	r3, #10
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f004 fc1c 	bl	8007652 <HAL_UART_Transmit>
   	HAL_UART_Transmit(huart, diameter, strlen((char*)diameter), 10);
 8002e1a:	f107 0310 	add.w	r3, r7, #16
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fd fa2e 	bl	8000280 <strlen>
 8002e24:	4603      	mov	r3, r0
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	f107 0110 	add.w	r1, r7, #16
 8002e2c:	230a      	movs	r3, #10
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f004 fc0f 	bl	8007652 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 8002e34:	f107 0308 	add.w	r3, r7, #8
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fd fa21 	bl	8000280 <strlen>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	f107 0108 	add.w	r1, r7, #8
 8002e46:	230a      	movs	r3, #10
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f004 fc02 	bl	8007652 <HAL_UART_Transmit>
}
 8002e4e:	bf00      	nop
 8002e50:	3728      	adds	r7, #40	; 0x28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	0800d094 	.word	0x0800d094
 8002e5c:	0800d0a0 	.word	0x0800d0a0
 8002e60:	0800d08c 	.word	0x0800d08c

08002e64 <sendDiamBack_impl>:
void sendDiamBack_impl(UART_HandleTypeDef *huart,float value) {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08a      	sub	sp, #40	; 0x28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	ed87 0a00 	vstr	s0, [r7]
	uint8_t tag[] = "DIAMBACK ";
 8002e70:	4a21      	ldr	r2, [pc, #132]	; (8002ef8 <sendDiamBack_impl+0x94>)
 8002e72:	f107 031c 	add.w	r3, r7, #28
 8002e76:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e78:	c303      	stmia	r3!, {r0, r1}
 8002e7a:	801a      	strh	r2, [r3, #0]
	uint8_t diameter[10];
	uint8_t endTag[] = " /r/n";
 8002e7c:	4a1f      	ldr	r2, [pc, #124]	; (8002efc <sendDiamBack_impl+0x98>)
 8002e7e:	f107 0308 	add.w	r3, r7, #8
 8002e82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e86:	6018      	str	r0, [r3, #0]
 8002e88:	3304      	adds	r3, #4
 8002e8a:	8019      	strh	r1, [r3, #0]

	sprintf((char *)diameter, "%.2f", value);
 8002e8c:	6838      	ldr	r0, [r7, #0]
 8002e8e:	f7fd fb63 	bl	8000558 <__aeabi_f2d>
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	f107 0010 	add.w	r0, r7, #16
 8002e9a:	4919      	ldr	r1, [pc, #100]	; (8002f00 <sendDiamBack_impl+0x9c>)
 8002e9c:	f007 fa50 	bl	800a340 <siprintf>

	HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 8002ea0:	f107 031c 	add.w	r3, r7, #28
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fd f9eb 	bl	8000280 <strlen>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	f107 011c 	add.w	r1, r7, #28
 8002eb2:	230a      	movs	r3, #10
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f004 fbcc 	bl	8007652 <HAL_UART_Transmit>
   	HAL_UART_Transmit(huart, diameter, strlen((char*)diameter), 10);
 8002eba:	f107 0310 	add.w	r3, r7, #16
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fd f9de 	bl	8000280 <strlen>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	f107 0110 	add.w	r1, r7, #16
 8002ecc:	230a      	movs	r3, #10
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f004 fbbf 	bl	8007652 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 8002ed4:	f107 0308 	add.w	r3, r7, #8
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fd f9d1 	bl	8000280 <strlen>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	f107 0108 	add.w	r1, r7, #8
 8002ee6:	230a      	movs	r3, #10
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f004 fbb2 	bl	8007652 <HAL_UART_Transmit>
}
 8002eee:	bf00      	nop
 8002ef0:	3728      	adds	r7, #40	; 0x28
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	0800d0a8 	.word	0x0800d0a8
 8002efc:	0800d0a0 	.word	0x0800d0a0
 8002f00:	0800d08c 	.word	0x0800d08c

08002f04 <sendState_impl>:

void sendState_impl(UART_HandleTypeDef *huart, State state) {
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b088      	sub	sp, #32
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	70fb      	strb	r3, [r7, #3]
    uint8_t tag[] = "STATE ";
 8002f10:	4a22      	ldr	r2, [pc, #136]	; (8002f9c <sendState_impl+0x98>)
 8002f12:	f107 0318 	add.w	r3, r7, #24
 8002f16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f1a:	6018      	str	r0, [r3, #0]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	8019      	strh	r1, [r3, #0]
 8002f20:	3302      	adds	r3, #2
 8002f22:	0c0a      	lsrs	r2, r1, #16
 8002f24:	701a      	strb	r2, [r3, #0]
    uint8_t stateStr[10];
    uint8_t endTag[] = "\r\n";
 8002f26:	4a1e      	ldr	r2, [pc, #120]	; (8002fa0 <sendState_impl+0x9c>)
 8002f28:	f107 0308 	add.w	r3, r7, #8
 8002f2c:	6812      	ldr	r2, [r2, #0]
 8002f2e:	4611      	mov	r1, r2
 8002f30:	8019      	strh	r1, [r3, #0]
 8002f32:	3302      	adds	r3, #2
 8002f34:	0c12      	lsrs	r2, r2, #16
 8002f36:	701a      	strb	r2, [r3, #0]

    sprintf((char *)stateStr, "%d", state);
 8002f38:	78fa      	ldrb	r2, [r7, #3]
 8002f3a:	f107 030c 	add.w	r3, r7, #12
 8002f3e:	4919      	ldr	r1, [pc, #100]	; (8002fa4 <sendState_impl+0xa0>)
 8002f40:	4618      	mov	r0, r3
 8002f42:	f007 f9fd 	bl	800a340 <siprintf>

    HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 8002f46:	f107 0318 	add.w	r3, r7, #24
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fd f998 	bl	8000280 <strlen>
 8002f50:	4603      	mov	r3, r0
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	f107 0118 	add.w	r1, r7, #24
 8002f58:	230a      	movs	r3, #10
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f004 fb79 	bl	8007652 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, stateStr, strlen((char*)stateStr), 10);
 8002f60:	f107 030c 	add.w	r3, r7, #12
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fd f98b 	bl	8000280 <strlen>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	f107 010c 	add.w	r1, r7, #12
 8002f72:	230a      	movs	r3, #10
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f004 fb6c 	bl	8007652 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 8002f7a:	f107 0308 	add.w	r3, r7, #8
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fd f97e 	bl	8000280 <strlen>
 8002f84:	4603      	mov	r3, r0
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	f107 0108 	add.w	r1, r7, #8
 8002f8c:	230a      	movs	r3, #10
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f004 fb5f 	bl	8007652 <HAL_UART_Transmit>
}
 8002f94:	bf00      	nop
 8002f96:	3720      	adds	r7, #32
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	0800d0b8 	.word	0x0800d0b8
 8002fa0:	0800d0c0 	.word	0x0800d0c0
 8002fa4:	0800d0b4 	.word	0x0800d0b4

08002fa8 <sendSpeed_impl>:
void sendSpeed_impl(UART_HandleTypeDef *huart, float speed){
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	ed87 0a00 	vstr	s0, [r7]
    uint8_t tag[] = "SPEED ";
 8002fb4:	4a24      	ldr	r2, [pc, #144]	; (8003048 <sendSpeed_impl+0xa0>)
 8002fb6:	f107 0318 	add.w	r3, r7, #24
 8002fba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fbe:	6018      	str	r0, [r3, #0]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	8019      	strh	r1, [r3, #0]
 8002fc4:	3302      	adds	r3, #2
 8002fc6:	0c0a      	lsrs	r2, r1, #16
 8002fc8:	701a      	strb	r2, [r3, #0]
    uint8_t value[10];
    uint8_t endTag[] = "\r\n";
 8002fca:	4a20      	ldr	r2, [pc, #128]	; (800304c <sendSpeed_impl+0xa4>)
 8002fcc:	f107 0308 	add.w	r3, r7, #8
 8002fd0:	6812      	ldr	r2, [r2, #0]
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	8019      	strh	r1, [r3, #0]
 8002fd6:	3302      	adds	r3, #2
 8002fd8:	0c12      	lsrs	r2, r2, #16
 8002fda:	701a      	strb	r2, [r3, #0]

    sprintf((char *)value, "%.2f", speed);
 8002fdc:	6838      	ldr	r0, [r7, #0]
 8002fde:	f7fd fabb 	bl	8000558 <__aeabi_f2d>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	f107 000c 	add.w	r0, r7, #12
 8002fea:	4919      	ldr	r1, [pc, #100]	; (8003050 <sendSpeed_impl+0xa8>)
 8002fec:	f007 f9a8 	bl	800a340 <siprintf>

    HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 8002ff0:	f107 0318 	add.w	r3, r7, #24
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fd f943 	bl	8000280 <strlen>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	f107 0118 	add.w	r1, r7, #24
 8003002:	230a      	movs	r3, #10
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f004 fb24 	bl	8007652 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, value, strlen((char*)value), 10);
 800300a:	f107 030c 	add.w	r3, r7, #12
 800300e:	4618      	mov	r0, r3
 8003010:	f7fd f936 	bl	8000280 <strlen>
 8003014:	4603      	mov	r3, r0
 8003016:	b29a      	uxth	r2, r3
 8003018:	f107 010c 	add.w	r1, r7, #12
 800301c:	230a      	movs	r3, #10
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f004 fb17 	bl	8007652 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 8003024:	f107 0308 	add.w	r3, r7, #8
 8003028:	4618      	mov	r0, r3
 800302a:	f7fd f929 	bl	8000280 <strlen>
 800302e:	4603      	mov	r3, r0
 8003030:	b29a      	uxth	r2, r3
 8003032:	f107 0108 	add.w	r1, r7, #8
 8003036:	230a      	movs	r3, #10
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f004 fb0a 	bl	8007652 <HAL_UART_Transmit>

}
 800303e:	bf00      	nop
 8003040:	3720      	adds	r7, #32
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	0800d0c4 	.word	0x0800d0c4
 800304c:	0800d0c0 	.word	0x0800d0c0
 8003050:	0800d08c 	.word	0x0800d08c

08003054 <sendCPvalue_impl>:
void sendCPvalue_impl(UART_HandleTypeDef *huart, float cp){
 8003054:	b580      	push	{r7, lr}
 8003056:	b088      	sub	sp, #32
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	ed87 0a00 	vstr	s0, [r7]
    uint8_t tag[] = "CP ";
 8003060:	4b1f      	ldr	r3, [pc, #124]	; (80030e0 <sendCPvalue_impl+0x8c>)
 8003062:	61fb      	str	r3, [r7, #28]
    uint8_t value[10];
    uint8_t endTag[] = "\r\n";
 8003064:	4a1f      	ldr	r2, [pc, #124]	; (80030e4 <sendCPvalue_impl+0x90>)
 8003066:	f107 030c 	add.w	r3, r7, #12
 800306a:	6812      	ldr	r2, [r2, #0]
 800306c:	4611      	mov	r1, r2
 800306e:	8019      	strh	r1, [r3, #0]
 8003070:	3302      	adds	r3, #2
 8003072:	0c12      	lsrs	r2, r2, #16
 8003074:	701a      	strb	r2, [r3, #0]

    sprintf((char *)value, "%.2f", cp);
 8003076:	6838      	ldr	r0, [r7, #0]
 8003078:	f7fd fa6e 	bl	8000558 <__aeabi_f2d>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	f107 0010 	add.w	r0, r7, #16
 8003084:	4918      	ldr	r1, [pc, #96]	; (80030e8 <sendCPvalue_impl+0x94>)
 8003086:	f007 f95b 	bl	800a340 <siprintf>

    HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 800308a:	f107 031c 	add.w	r3, r7, #28
 800308e:	4618      	mov	r0, r3
 8003090:	f7fd f8f6 	bl	8000280 <strlen>
 8003094:	4603      	mov	r3, r0
 8003096:	b29a      	uxth	r2, r3
 8003098:	f107 011c 	add.w	r1, r7, #28
 800309c:	230a      	movs	r3, #10
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f004 fad7 	bl	8007652 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, value, strlen((char*)value), 10);
 80030a4:	f107 0310 	add.w	r3, r7, #16
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fd f8e9 	bl	8000280 <strlen>
 80030ae:	4603      	mov	r3, r0
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	f107 0110 	add.w	r1, r7, #16
 80030b6:	230a      	movs	r3, #10
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f004 faca 	bl	8007652 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 80030be:	f107 030c 	add.w	r3, r7, #12
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd f8dc 	bl	8000280 <strlen>
 80030c8:	4603      	mov	r3, r0
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	f107 010c 	add.w	r1, r7, #12
 80030d0:	230a      	movs	r3, #10
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f004 fabd 	bl	8007652 <HAL_UART_Transmit>
}
 80030d8:	bf00      	nop
 80030da:	3720      	adds	r7, #32
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	00205043 	.word	0x00205043
 80030e4:	0800d0c0 	.word	0x0800d0c0
 80030e8:	0800d08c 	.word	0x0800d08c

080030ec <sendCIvalue_impl>:
void sendCIvalue_impl(UART_HandleTypeDef *huart, float ci){
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	ed87 0a00 	vstr	s0, [r7]
    uint8_t tag[] = "CI ";
 80030f8:	4b1f      	ldr	r3, [pc, #124]	; (8003178 <sendCIvalue_impl+0x8c>)
 80030fa:	61fb      	str	r3, [r7, #28]
    uint8_t value[10];
    uint8_t endTag[] = "\r\n";
 80030fc:	4a1f      	ldr	r2, [pc, #124]	; (800317c <sendCIvalue_impl+0x90>)
 80030fe:	f107 030c 	add.w	r3, r7, #12
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	4611      	mov	r1, r2
 8003106:	8019      	strh	r1, [r3, #0]
 8003108:	3302      	adds	r3, #2
 800310a:	0c12      	lsrs	r2, r2, #16
 800310c:	701a      	strb	r2, [r3, #0]

    sprintf((char *)value, "%.2f", ci);
 800310e:	6838      	ldr	r0, [r7, #0]
 8003110:	f7fd fa22 	bl	8000558 <__aeabi_f2d>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	f107 0010 	add.w	r0, r7, #16
 800311c:	4918      	ldr	r1, [pc, #96]	; (8003180 <sendCIvalue_impl+0x94>)
 800311e:	f007 f90f 	bl	800a340 <siprintf>

    HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 8003122:	f107 031c 	add.w	r3, r7, #28
 8003126:	4618      	mov	r0, r3
 8003128:	f7fd f8aa 	bl	8000280 <strlen>
 800312c:	4603      	mov	r3, r0
 800312e:	b29a      	uxth	r2, r3
 8003130:	f107 011c 	add.w	r1, r7, #28
 8003134:	230a      	movs	r3, #10
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f004 fa8b 	bl	8007652 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, value, strlen((char*)value), 10);
 800313c:	f107 0310 	add.w	r3, r7, #16
 8003140:	4618      	mov	r0, r3
 8003142:	f7fd f89d 	bl	8000280 <strlen>
 8003146:	4603      	mov	r3, r0
 8003148:	b29a      	uxth	r2, r3
 800314a:	f107 0110 	add.w	r1, r7, #16
 800314e:	230a      	movs	r3, #10
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f004 fa7e 	bl	8007652 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 8003156:	f107 030c 	add.w	r3, r7, #12
 800315a:	4618      	mov	r0, r3
 800315c:	f7fd f890 	bl	8000280 <strlen>
 8003160:	4603      	mov	r3, r0
 8003162:	b29a      	uxth	r2, r3
 8003164:	f107 010c 	add.w	r1, r7, #12
 8003168:	230a      	movs	r3, #10
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f004 fa71 	bl	8007652 <HAL_UART_Transmit>
}
 8003170:	bf00      	nop
 8003172:	3720      	adds	r7, #32
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	00204943 	.word	0x00204943
 800317c:	0800d0c0 	.word	0x0800d0c0
 8003180:	0800d08c 	.word	0x0800d08c

08003184 <sendCDvalue_impl>:
void sendCDvalue_impl(UART_HandleTypeDef *huart, float cd){
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	ed87 0a00 	vstr	s0, [r7]
    uint8_t tag[] = "CD ";
 8003190:	4b1f      	ldr	r3, [pc, #124]	; (8003210 <sendCDvalue_impl+0x8c>)
 8003192:	61fb      	str	r3, [r7, #28]
    uint8_t value[10];
    uint8_t endTag[] = "\r\n";
 8003194:	4a1f      	ldr	r2, [pc, #124]	; (8003214 <sendCDvalue_impl+0x90>)
 8003196:	f107 030c 	add.w	r3, r7, #12
 800319a:	6812      	ldr	r2, [r2, #0]
 800319c:	4611      	mov	r1, r2
 800319e:	8019      	strh	r1, [r3, #0]
 80031a0:	3302      	adds	r3, #2
 80031a2:	0c12      	lsrs	r2, r2, #16
 80031a4:	701a      	strb	r2, [r3, #0]

    sprintf((char *)value, "%.2f", cd);
 80031a6:	6838      	ldr	r0, [r7, #0]
 80031a8:	f7fd f9d6 	bl	8000558 <__aeabi_f2d>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	f107 0010 	add.w	r0, r7, #16
 80031b4:	4918      	ldr	r1, [pc, #96]	; (8003218 <sendCDvalue_impl+0x94>)
 80031b6:	f007 f8c3 	bl	800a340 <siprintf>

    HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 80031ba:	f107 031c 	add.w	r3, r7, #28
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fd f85e 	bl	8000280 <strlen>
 80031c4:	4603      	mov	r3, r0
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	f107 011c 	add.w	r1, r7, #28
 80031cc:	230a      	movs	r3, #10
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f004 fa3f 	bl	8007652 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, value, strlen((char*)value), 10);
 80031d4:	f107 0310 	add.w	r3, r7, #16
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fd f851 	bl	8000280 <strlen>
 80031de:	4603      	mov	r3, r0
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	f107 0110 	add.w	r1, r7, #16
 80031e6:	230a      	movs	r3, #10
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f004 fa32 	bl	8007652 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 80031ee:	f107 030c 	add.w	r3, r7, #12
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fd f844 	bl	8000280 <strlen>
 80031f8:	4603      	mov	r3, r0
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	f107 010c 	add.w	r1, r7, #12
 8003200:	230a      	movs	r3, #10
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f004 fa25 	bl	8007652 <HAL_UART_Transmit>
}
 8003208:	bf00      	nop
 800320a:	3720      	adds	r7, #32
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	00204443 	.word	0x00204443
 8003214:	0800d0c0 	.word	0x0800d0c0
 8003218:	0800d08c 	.word	0x0800d08c

0800321c <createPcSendHandler>:
PcSendHandler createPcSendHandler(uint32_t timeout) {
 800321c:	b4b0      	push	{r4, r5, r7}
 800321e:	b08b      	sub	sp, #44	; 0x2c
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
	PcSendHandler handler;
    handler.interface.sendDiamExt	= sendDiamExt_impl;
 8003226:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <createPcSendHandler+0x48>)
 8003228:	60bb      	str	r3, [r7, #8]
    handler.interface.sendDiamBack	= sendDiamBack_impl;
 800322a:	4b0f      	ldr	r3, [pc, #60]	; (8003268 <createPcSendHandler+0x4c>)
 800322c:	60fb      	str	r3, [r7, #12]
    handler.interface.sendState		= sendState_impl;
 800322e:	4b0f      	ldr	r3, [pc, #60]	; (800326c <createPcSendHandler+0x50>)
 8003230:	613b      	str	r3, [r7, #16]
    handler.interface.sendSpeed		= sendSpeed_impl;
 8003232:	4b0f      	ldr	r3, [pc, #60]	; (8003270 <createPcSendHandler+0x54>)
 8003234:	617b      	str	r3, [r7, #20]
    handler.interface.sendCPvalue	= sendCPvalue_impl;
 8003236:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <createPcSendHandler+0x58>)
 8003238:	61bb      	str	r3, [r7, #24]
    handler.interface.sendCIvalue	= sendCIvalue_impl;
 800323a:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <createPcSendHandler+0x5c>)
 800323c:	61fb      	str	r3, [r7, #28]
    handler.interface.sendCDvalue	= sendCDvalue_impl;
 800323e:	4b0f      	ldr	r3, [pc, #60]	; (800327c <createPcSendHandler+0x60>)
 8003240:	623b      	str	r3, [r7, #32]

    handler.interface.timeout = timeout;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
    return handler;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	461d      	mov	r5, r3
 800324a:	f107 0408 	add.w	r4, r7, #8
 800324e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003250:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003252:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003256:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	372c      	adds	r7, #44	; 0x2c
 800325e:	46bd      	mov	sp, r7
 8003260:	bcb0      	pop	{r4, r5, r7}
 8003262:	4770      	bx	lr
 8003264:	08002dc5 	.word	0x08002dc5
 8003268:	08002e65 	.word	0x08002e65
 800326c:	08002f05 	.word	0x08002f05
 8003270:	08002fa9 	.word	0x08002fa9
 8003274:	08003055 	.word	0x08003055
 8003278:	080030ed 	.word	0x080030ed
 800327c:	08003185 	.word	0x08003185

08003280 <createSensorReceiveHandler>:


// Konstruktor
SensorReceiveHandler createSensorReceiveHandler(Sensor* sensorExtruder,
												Sensor* sensorBack)
{
 8003280:	b590      	push	{r4, r7, lr}
 8003282:	b089      	sub	sp, #36	; 0x24
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
	SensorReceiveHandler handler;
    handler.sensorExtruder = sensorExtruder;
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	617b      	str	r3, [r7, #20]
    handler.sensorBack = sensorBack;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	61bb      	str	r3, [r7, #24]

    // Zuweisung der globalen Variable
    gHandler = handler;
 8003294:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <createSensorReceiveHandler+0x44>)
 8003296:	461c      	mov	r4, r3
 8003298:	f107 0314 	add.w	r3, r7, #20
 800329c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80032a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    handler.uartProcessor = createUartProcessor(sensor_interface_dictionary);
 80032a4:	4808      	ldr	r0, [pc, #32]	; (80032c8 <createSensorReceiveHandler+0x48>)
 80032a6:	f000 f9a7 	bl	80035f8 <createUartProcessor>
 80032aa:	61f8      	str	r0, [r7, #28]
    return handler;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	461c      	mov	r4, r3
 80032b0:	f107 0314 	add.w	r3, r7, #20
 80032b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80032b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	3724      	adds	r7, #36	; 0x24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd90      	pop	{r4, r7, pc}
 80032c4:	20000368 	.word	0x20000368
 80032c8:	2000005c 	.word	0x2000005c

080032cc <handleDiamRecieved>:

// Methoden
void handleDiamRecieved(uint8_t uartNr, const char* value){
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	6039      	str	r1, [r7, #0]
 80032d6:	71fb      	strb	r3, [r7, #7]
	uint8_t ext = gHandler.sensorExtruder->getUartPort(gHandler.sensorExtruder);
 80032d8:	4b29      	ldr	r3, [pc, #164]	; (8003380 <handleDiamRecieved+0xb4>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	4a28      	ldr	r2, [pc, #160]	; (8003380 <handleDiamRecieved+0xb4>)
 80032e0:	6812      	ldr	r2, [r2, #0]
 80032e2:	4610      	mov	r0, r2
 80032e4:	4798      	blx	r3
 80032e6:	4603      	mov	r3, r0
 80032e8:	77fb      	strb	r3, [r7, #31]
	uint8_t back = gHandler.sensorBack->getUartPort(gHandler.sensorBack);
 80032ea:	4b25      	ldr	r3, [pc, #148]	; (8003380 <handleDiamRecieved+0xb4>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	4a23      	ldr	r2, [pc, #140]	; (8003380 <handleDiamRecieved+0xb4>)
 80032f2:	6852      	ldr	r2, [r2, #4]
 80032f4:	4610      	mov	r0, r2
 80032f6:	4798      	blx	r3
 80032f8:	4603      	mov	r3, r0
 80032fa:	77bb      	strb	r3, [r7, #30]
	if(ext == uartNr){
 80032fc:	7ffa      	ldrb	r2, [r7, #31]
 80032fe:	79fb      	ldrb	r3, [r7, #7]
 8003300:	429a      	cmp	r2, r3
 8003302:	d10e      	bne.n	8003322 <handleDiamRecieved+0x56>
		float diam = getFloatFromMessage(value);
 8003304:	6838      	ldr	r0, [r7, #0]
 8003306:	f000 f83d 	bl	8003384 <getFloatFromMessage>
 800330a:	ed87 0a05 	vstr	s0, [r7, #20]
		gHandler.sensorExtruder->setDiameter(gHandler.sensorExtruder,diam);
 800330e:	4b1c      	ldr	r3, [pc, #112]	; (8003380 <handleDiamRecieved+0xb4>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	4a1a      	ldr	r2, [pc, #104]	; (8003380 <handleDiamRecieved+0xb4>)
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	ed97 0a05 	vldr	s0, [r7, #20]
 800331c:	4610      	mov	r0, r2
 800331e:	4798      	blx	r3
 8003320:	e011      	b.n	8003346 <handleDiamRecieved+0x7a>
	}
	else if(back == uartNr){
 8003322:	7fba      	ldrb	r2, [r7, #30]
 8003324:	79fb      	ldrb	r3, [r7, #7]
 8003326:	429a      	cmp	r2, r3
 8003328:	d10d      	bne.n	8003346 <handleDiamRecieved+0x7a>
		float diam = getFloatFromMessage(value);
 800332a:	6838      	ldr	r0, [r7, #0]
 800332c:	f000 f82a 	bl	8003384 <getFloatFromMessage>
 8003330:	ed87 0a06 	vstr	s0, [r7, #24]
		gHandler.sensorBack->setDiameter(gHandler.sensorBack,diam);
 8003334:	4b12      	ldr	r3, [pc, #72]	; (8003380 <handleDiamRecieved+0xb4>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	4a11      	ldr	r2, [pc, #68]	; (8003380 <handleDiamRecieved+0xb4>)
 800333c:	6852      	ldr	r2, [r2, #4]
 800333e:	ed97 0a06 	vldr	s0, [r7, #24]
 8003342:	4610      	mov	r0, r2
 8003344:	4798      	blx	r3
	}
	float extruder  = gHandler.sensorExtruder->getDiameter(gHandler.sensorExtruder);
 8003346:	4b0e      	ldr	r3, [pc, #56]	; (8003380 <handleDiamRecieved+0xb4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	4a0c      	ldr	r2, [pc, #48]	; (8003380 <handleDiamRecieved+0xb4>)
 800334e:	6812      	ldr	r2, [r2, #0]
 8003350:	4610      	mov	r0, r2
 8003352:	4798      	blx	r3
 8003354:	ed87 0a04 	vstr	s0, [r7, #16]
	float backValue = gHandler.sensorBack->getDiameter(gHandler.sensorBack);
 8003358:	4b09      	ldr	r3, [pc, #36]	; (8003380 <handleDiamRecieved+0xb4>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	4a08      	ldr	r2, [pc, #32]	; (8003380 <handleDiamRecieved+0xb4>)
 8003360:	6852      	ldr	r2, [r2, #4]
 8003362:	4610      	mov	r0, r2
 8003364:	4798      	blx	r3
 8003366:	ed87 0a03 	vstr	s0, [r7, #12]
	//extruder = 2.0;
	//HMI_updateDisplaySensor(extruder,backValue);
	HMI_updateDisplaySensor(extruder,backValue);
 800336a:	edd7 0a03 	vldr	s1, [r7, #12]
 800336e:	ed97 0a04 	vldr	s0, [r7, #16]
 8003372:	f7ff f9e7 	bl	8002744 <HMI_updateDisplaySensor>
}
 8003376:	bf00      	nop
 8003378:	3720      	adds	r7, #32
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20000368 	.word	0x20000368

08003384 <getFloatFromMessage>:
float getFloatFromMessage(const char* value) {
 8003384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003388:	b089      	sub	sp, #36	; 0x24
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
    int length = strlen(value);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7fc ff76 	bl	8000280 <strlen>
 8003394:	4603      	mov	r3, r0
 8003396:	613b      	str	r3, [r7, #16]
    int startIndex = -1;  // Index des ersten Leerzeichens
 8003398:	f04f 33ff 	mov.w	r3, #4294967295
 800339c:	61fb      	str	r3, [r7, #28]
    int endIndex = -1;    // Index des zweiten Leerzeichens
 800339e:	f04f 33ff 	mov.w	r3, #4294967295
 80033a2:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < length; i++) {
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	e019      	b.n	80033de <getFloatFromMessage+0x5a>
        if (value[i] == ' ' || value[i] == '\r') {
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	4413      	add	r3, r2
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b20      	cmp	r3, #32
 80033b4:	d005      	beq.n	80033c2 <getFloatFromMessage+0x3e>
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	4413      	add	r3, r2
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b0d      	cmp	r3, #13
 80033c0:	d10a      	bne.n	80033d8 <getFloatFromMessage+0x54>
            if (startIndex == -1) {
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c8:	d103      	bne.n	80033d2 <getFloatFromMessage+0x4e>
                startIndex = i + 1;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	3301      	adds	r3, #1
 80033ce:	61fb      	str	r3, [r7, #28]
 80033d0:	e002      	b.n	80033d8 <getFloatFromMessage+0x54>
            } else {
                endIndex = i;
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	61bb      	str	r3, [r7, #24]
                break;
 80033d6:	e006      	b.n	80033e6 <getFloatFromMessage+0x62>
    for (int i = 0; i < length; i++) {
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	3301      	adds	r3, #1
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	dbe1      	blt.n	80033aa <getFloatFromMessage+0x26>
            }
        }
    }
    if (startIndex != -1 && endIndex != -1 && startIndex < endIndex) {
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d04a      	beq.n	8003484 <getFloatFromMessage+0x100>
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f4:	d046      	beq.n	8003484 <getFloatFromMessage+0x100>
 80033f6:	69fa      	ldr	r2, [r7, #28]
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	da42      	bge.n	8003484 <getFloatFromMessage+0x100>
 80033fe:	466b      	mov	r3, sp
 8003400:	461e      	mov	r6, r3
        char floatStr[endIndex - startIndex + 1];
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	1c59      	adds	r1, r3, #1
 800340a:	1e4b      	subs	r3, r1, #1
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	460a      	mov	r2, r1
 8003410:	2300      	movs	r3, #0
 8003412:	4690      	mov	r8, r2
 8003414:	4699      	mov	r9, r3
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	f04f 0300 	mov.w	r3, #0
 800341e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003422:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003426:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800342a:	460a      	mov	r2, r1
 800342c:	2300      	movs	r3, #0
 800342e:	4614      	mov	r4, r2
 8003430:	461d      	mov	r5, r3
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	f04f 0300 	mov.w	r3, #0
 800343a:	00eb      	lsls	r3, r5, #3
 800343c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003440:	00e2      	lsls	r2, r4, #3
 8003442:	460b      	mov	r3, r1
 8003444:	3307      	adds	r3, #7
 8003446:	08db      	lsrs	r3, r3, #3
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	ebad 0d03 	sub.w	sp, sp, r3
 800344e:	466b      	mov	r3, sp
 8003450:	3300      	adds	r3, #0
 8003452:	60bb      	str	r3, [r7, #8]
        strncpy(floatStr, value + startIndex, endIndex - startIndex);
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	18d1      	adds	r1, r2, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	461a      	mov	r2, r3
 8003462:	68b8      	ldr	r0, [r7, #8]
 8003464:	f006 ffe9 	bl	800a43a <strncpy>
        floatStr[endIndex - startIndex] = '\0';
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	2100      	movs	r1, #0
 8003472:	54d1      	strb	r1, [r2, r3]
        return strtof(floatStr, NULL);
 8003474:	2100      	movs	r1, #0
 8003476:	68b8      	ldr	r0, [r7, #8]
 8003478:	f005 ff2c 	bl	80092d4 <strtof>
 800347c:	eef0 7a40 	vmov.f32	s15, s0
 8003480:	46b5      	mov	sp, r6
 8003482:	e001      	b.n	8003488 <getFloatFromMessage+0x104>
    }
    return 0.00;
 8003484:	eddf 7a03 	vldr	s15, [pc, #12]	; 8003494 <getFloatFromMessage+0x110>
}
 8003488:	eeb0 0a67 	vmov.f32	s0, s15
 800348c:	3724      	adds	r7, #36	; 0x24
 800348e:	46bd      	mov	sp, r7
 8003490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003494:	00000000 	.word	0x00000000

08003498 <processSensorInterfaceMessage>:


void processSensorInterfaceMessage(uint8_t uartNr,SensorReceiveHandler* handler,uint8_t* receivedData, uint8_t receivedDataIndex){
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
 80034a2:	461a      	mov	r2, r3
 80034a4:	4603      	mov	r3, r0
 80034a6:	73fb      	strb	r3, [r7, #15]
 80034a8:	4613      	mov	r3, r2
 80034aa:	73bb      	strb	r3, [r7, #14]
	processCommand(uartNr, &(handler->uartProcessor), receivedData, receivedDataIndex);
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f103 0108 	add.w	r1, r3, #8
 80034b2:	7bbb      	ldrb	r3, [r7, #14]
 80034b4:	7bf8      	ldrb	r0, [r7, #15]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	f000 f8dc 	bl	8003674 <processCommand>
}
 80034bc:	bf00      	nop
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <getReceivedData>:


#include <Kommunikation/uart_data.h>

// Getter-Methoden
const uint8_t* getReceivedData(const UartData* uartData) {
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
    return uartData->receivedData;
 80034cc:	687b      	ldr	r3, [r7, #4]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <getDataIndex>:

int getDataIndex(const UartData* uartData) {
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
    return uartData->dataIndex;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <getMessageComplete>:

int getMessageComplete(const UartData* uartData) {
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
    return uartData->messageComplete;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80034fe:	4618      	mov	r0, r3
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <setReceivedData>:

// Setter-Methoden
void setReceivedData(UartData* uartData, const uint8_t* receivedData) {
 800350a:	b480      	push	{r7}
 800350c:	b085      	sub	sp, #20
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	6039      	str	r1, [r7, #0]
    // Kopiere die Daten
    for (int i = 0; i < 64; i++) {
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	e00b      	b.n	8003532 <setReceivedData+0x28>
        uartData->receivedData[i] = receivedData[i];
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	4413      	add	r3, r2
 8003520:	7819      	ldrb	r1, [r3, #0]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4413      	add	r3, r2
 8003528:	460a      	mov	r2, r1
 800352a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 64; i++) {
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	3301      	adds	r3, #1
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2b3f      	cmp	r3, #63	; 0x3f
 8003536:	ddf0      	ble.n	800351a <setReceivedData+0x10>
    }
}
 8003538:	bf00      	nop
 800353a:	bf00      	nop
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <setDataIndex>:

void setDataIndex(UartData* uartData, int dataIndex) {
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
 800354e:	6039      	str	r1, [r7, #0]
    uartData->dataIndex = dataIndex;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <setMessageComplete>:

void setMessageComplete(UartData* uartData, int messageComplete) {
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	6039      	str	r1, [r7, #0]
    uartData->messageComplete = messageComplete;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <createUartDataObject>:

// Konstruktor
UartDataObject createUartDataObject() {
 8003580:	b580      	push	{r7, lr}
 8003582:	b09c      	sub	sp, #112	; 0x70
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
    UartDataObject uartDataObject;
    uartDataObject.getReceivedData = &getReceivedData;
 8003588:	4b15      	ldr	r3, [pc, #84]	; (80035e0 <createUartDataObject+0x60>)
 800358a:	657b      	str	r3, [r7, #84]	; 0x54
    uartDataObject.getDataIndex = &getDataIndex;
 800358c:	4b15      	ldr	r3, [pc, #84]	; (80035e4 <createUartDataObject+0x64>)
 800358e:	65bb      	str	r3, [r7, #88]	; 0x58
    uartDataObject.getMessageComplete = &getMessageComplete;
 8003590:	4b15      	ldr	r3, [pc, #84]	; (80035e8 <createUartDataObject+0x68>)
 8003592:	65fb      	str	r3, [r7, #92]	; 0x5c
    uartDataObject.setReceivedData = &setReceivedData;
 8003594:	4b15      	ldr	r3, [pc, #84]	; (80035ec <createUartDataObject+0x6c>)
 8003596:	663b      	str	r3, [r7, #96]	; 0x60
    uartDataObject.setDataIndex = &setDataIndex;
 8003598:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <createUartDataObject+0x70>)
 800359a:	667b      	str	r3, [r7, #100]	; 0x64
    uartDataObject.setMessageComplete = &setMessageComplete;
 800359c:	4b15      	ldr	r3, [pc, #84]	; (80035f4 <createUartDataObject+0x74>)
 800359e:	66bb      	str	r3, [r7, #104]	; 0x68

    // Initialisiere die Daten
    for (int i = 0; i < 64; i++) {
 80035a0:	2300      	movs	r3, #0
 80035a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035a4:	e008      	b.n	80035b8 <createUartDataObject+0x38>
        uartDataObject.data.receivedData[i] = 0;
 80035a6:	f107 020c 	add.w	r2, r7, #12
 80035aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ac:	4413      	add	r3, r2
 80035ae:	2200      	movs	r2, #0
 80035b0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 64; i++) {
 80035b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b4:	3301      	adds	r3, #1
 80035b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ba:	2b3f      	cmp	r3, #63	; 0x3f
 80035bc:	ddf3      	ble.n	80035a6 <createUartDataObject+0x26>
    }
    uartDataObject.data.dataIndex = 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	64fb      	str	r3, [r7, #76]	; 0x4c
    uartDataObject.data.messageComplete = 0;
 80035c2:	2300      	movs	r3, #0
 80035c4:	653b      	str	r3, [r7, #80]	; 0x50

    return uartDataObject;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f107 030c 	add.w	r3, r7, #12
 80035ce:	2260      	movs	r2, #96	; 0x60
 80035d0:	4619      	mov	r1, r3
 80035d2:	f006 ffbc 	bl	800a54e <memcpy>
}
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	3770      	adds	r7, #112	; 0x70
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	080034c5 	.word	0x080034c5
 80035e4:	080034db 	.word	0x080034db
 80035e8:	080034f3 	.word	0x080034f3
 80035ec:	0800350b 	.word	0x0800350b
 80035f0:	08003547 	.word	0x08003547
 80035f4:	08003563 	.word	0x08003563

080035f8 <createUartProcessor>:
#include <string.h>



// Funktion zur Initialisierung des UART-Prozessors
UartProcessor createUartProcessor(CommandEntry* dictionary) {
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
    UartProcessor uartProcessor;
    uartProcessor.commandDictionary = dictionary;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	60fb      	str	r3, [r7, #12]
    return uartProcessor;
 8003604:	68fb      	ldr	r3, [r7, #12]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <strncasecmp>:

// Case-insensitive String-Vergleich
int strnicmp(const char *s1, const char *s2, size_t n) {
 8003612:	b590      	push	{r4, r7, lr}
 8003614:	b085      	sub	sp, #20
 8003616:	af00      	add	r7, sp, #0
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	607a      	str	r2, [r7, #4]
    while (*s1 && *s2 && n > 0) {
 800361e:	e019      	b.n	8003654 <strncasecmp+0x42>
        if (tolower(*s1) != tolower(*s2))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f005 ff49 	bl	80094bc <tolower>
 800362a:	4604      	mov	r4, r0
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f005 ff43 	bl	80094bc <tolower>
 8003636:	4603      	mov	r3, r0
 8003638:	429c      	cmp	r4, r3
 800363a:	d002      	beq.n	8003642 <strncasecmp+0x30>
            return -1;
 800363c:	f04f 33ff 	mov.w	r3, #4294967295
 8003640:	e014      	b.n	800366c <strncasecmp+0x5a>
        s1++;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	3301      	adds	r3, #1
 8003646:	60fb      	str	r3, [r7, #12]
        s2++;
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	3301      	adds	r3, #1
 800364c:	60bb      	str	r3, [r7, #8]
        n--;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3b01      	subs	r3, #1
 8003652:	607b      	str	r3, [r7, #4]
    while (*s1 && *s2 && n > 0) {
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d006      	beq.n	800366a <strncasecmp+0x58>
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <strncasecmp+0x58>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1da      	bne.n	8003620 <strncasecmp+0xe>
    }
    return 0;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	bd90      	pop	{r4, r7, pc}

08003674 <processCommand>:

void processCommand(uint8_t uartNr, UartProcessor* uartProcessor,uint8_t* receivedData,uint8_t receivedDataIndex) {
 8003674:	b590      	push	{r4, r7, lr}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	607a      	str	r2, [r7, #4]
 800367e:	461a      	mov	r2, r3
 8003680:	4603      	mov	r3, r0
 8003682:	73fb      	strb	r3, [r7, #15]
 8003684:	4613      	mov	r3, r2
 8003686:	73bb      	strb	r3, [r7, #14]
    for (int i = 0; uartProcessor->commandDictionary[i].command != NULL; ++i) {
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	e025      	b.n	80036da <processCommand+0x66>
    	if (strnicmp((char*)receivedData, uartProcessor->commandDictionary[i].command, strlen(uartProcessor->commandDictionary[i].command)) == 0) {
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	4413      	add	r3, r2
 8003698:	681c      	ldr	r4, [r3, #0]
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	4413      	add	r3, r2
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fc fdea 	bl	8000280 <strlen>
 80036ac:	4603      	mov	r3, r0
 80036ae:	461a      	mov	r2, r3
 80036b0:	4621      	mov	r1, r4
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff ffad 	bl	8003612 <strncasecmp>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10a      	bne.n	80036d4 <processCommand+0x60>
            // Rufe den entsprechenden Handler auf
    		uartProcessor->commandDictionary[i].functionPointer(uartNr, (char*)receivedData);
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	4413      	add	r3, r2
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	7bfa      	ldrb	r2, [r7, #15]
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	4610      	mov	r0, r2
 80036d0:	4798      	blx	r3
            return;
 80036d2:	e00a      	b.n	80036ea <processCommand+0x76>
    for (int i = 0; uartProcessor->commandDictionary[i].command != NULL; ++i) {
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	3301      	adds	r3, #1
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	4413      	add	r3, r2
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1d1      	bne.n	800368e <processCommand+0x1a>
        }
    }
}
 80036ea:	371c      	adds	r7, #28
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd90      	pop	{r4, r7, pc}

080036f0 <changeState>:
 */

#include <Management/global_state_machine.h>

// Change the state of the State Machine
static void changeState(StateMachine *machine, State newState) {
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	70fb      	strb	r3, [r7, #3]
    switch (newState) {
 80036fc:	78fb      	ldrb	r3, [r7, #3]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d00f      	beq.n	8003722 <changeState+0x32>
 8003702:	2b02      	cmp	r3, #2
 8003704:	dc0f      	bgt.n	8003726 <changeState+0x36>
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <changeState+0x20>
 800370a:	2b01      	cmp	r3, #1
 800370c:	d00d      	beq.n	800372a <changeState+0x3a>
        case STATE_AUTOMATIC_MODE:
            // TODO: Logik für Regelung implementieren
            break;
        default:
            // Handle unknown state
            break;
 800370e:	e00a      	b.n	8003726 <changeState+0x36>
            machine->info.motor->setSpeed(machine->info.motor, 0);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6852      	ldr	r2, [r2, #4]
 800371a:	2100      	movs	r1, #0
 800371c:	4610      	mov	r0, r2
 800371e:	4798      	blx	r3
            break;
 8003720:	e004      	b.n	800372c <changeState+0x3c>
            break;
 8003722:	bf00      	nop
 8003724:	e002      	b.n	800372c <changeState+0x3c>
            break;
 8003726:	bf00      	nop
 8003728:	e000      	b.n	800372c <changeState+0x3c>
            break;
 800372a:	bf00      	nop
    }
    machine->info.currentState = newState;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	78fa      	ldrb	r2, [r7, #3]
 8003730:	701a      	strb	r2, [r3, #0]
}
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <getState>:
// Get the current state of the State Machine
static State getState(const StateMachine *machine) {
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
    return machine->info.currentState;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	781b      	ldrb	r3, [r3, #0]
}
 8003746:	4618      	mov	r0, r3
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <setBlobDetected>:
void setBlobDetected(struct StateMachine *machine, int blobDetected){
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
 800375a:	6039      	str	r1, [r7, #0]
	machine->info.blobDetected = blobDetected;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	609a      	str	r2, [r3, #8]
	if(blobDetected == 1){
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d102      	bne.n	800376e <setBlobDetected+0x1c>
		machine->info.currentState = STATE_IDLE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	701a      	strb	r2, [r3, #0]
	}
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <getBlobDetected>:
static int getBlobDetected(const struct StateMachine *machine){
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
	return machine->info.blobDetected;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
}
 8003786:	4618      	mov	r0, r3
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
	...

08003794 <initStateMachine>:



// Initialization function for the State Machine
StateMachine initStateMachine(Motor* motor) {
 8003794:	b4b0      	push	{r4, r5, r7}
 8003796:	b08b      	sub	sp, #44	; 0x2c
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
    StateMachine machine;

    machine.info.motor = motor;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	60fb      	str	r3, [r7, #12]

    machine.changeState = changeState;
 80037a2:	4b0d      	ldr	r3, [pc, #52]	; (80037d8 <initStateMachine+0x44>)
 80037a4:	61bb      	str	r3, [r7, #24]
    machine.getState = getState;
 80037a6:	4b0d      	ldr	r3, [pc, #52]	; (80037dc <initStateMachine+0x48>)
 80037a8:	61fb      	str	r3, [r7, #28]
    machine.setBlobDetected = setBlobDetected;
 80037aa:	4b0d      	ldr	r3, [pc, #52]	; (80037e0 <initStateMachine+0x4c>)
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
    machine.getBlobDetected = getBlobDetected;
 80037ae:	4b0d      	ldr	r3, [pc, #52]	; (80037e4 <initStateMachine+0x50>)
 80037b0:	623b      	str	r3, [r7, #32]

    // Set initial state and initialize motor
    machine.info.currentState = STATE_IDLE;
 80037b2:	2300      	movs	r3, #0
 80037b4:	723b      	strb	r3, [r7, #8]
    machine.info.blobDetected = 0;
 80037b6:	2300      	movs	r3, #0
 80037b8:	613b      	str	r3, [r7, #16]


    return machine;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	461d      	mov	r5, r3
 80037be:	f107 0408 	add.w	r4, r7, #8
 80037c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80037ca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	372c      	adds	r7, #44	; 0x2c
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bcb0      	pop	{r4, r5, r7}
 80037d6:	4770      	bx	lr
 80037d8:	080036f1 	.word	0x080036f1
 80037dc:	0800373b 	.word	0x0800373b
 80037e0:	08003753 	.word	0x08003753
 80037e4:	0800377b 	.word	0x0800377b

080037e8 <set_kp>:
 *  Created on: Jan 3, 2024
 *      Author: Daniel Alf
 */
#include "Regelung/pid_controller.h"

void set_kp(PIDController *pid, float kp) {
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	ed87 0a00 	vstr	s0, [r7]
    pid->data.kp = kp;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	601a      	str	r2, [r3, #0]
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <get_kp>:

float get_kp(const PIDController *pid) {
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
    return pid->data.kp;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	ee07 3a90 	vmov	s15, r3
}
 8003816:	eeb0 0a67 	vmov.f32	s0, s15
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <set_ki>:

void set_ki(PIDController *pid, float ki) {
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	ed87 0a00 	vstr	s0, [r7]
	pid->data.ki = ki;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	605a      	str	r2, [r3, #4]
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <get_ki>:

float get_ki(const PIDController *pid) {
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
    return pid->data.ki;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	ee07 3a90 	vmov	s15, r3
}
 8003852:	eeb0 0a67 	vmov.f32	s0, s15
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <set_kd>:

void set_kd(PIDController *pid, float kd) {
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	ed87 0a00 	vstr	s0, [r7]
	pid->data.kd = kd;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	609a      	str	r2, [r3, #8]
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <get_kd>:

float get_kd(const PIDController *pid) {
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
    return pid->data.kd;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	ee07 3a90 	vmov	s15, r3
}
 800388e:	eeb0 0a67 	vmov.f32	s0, s15
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <set_setPoint>:
void set_setPoint(PIDController *pid, float setPoint) {
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	ed87 0a00 	vstr	s0, [r7]
	pid->data.setpoint = setPoint;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	60da      	str	r2, [r3, #12]
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <get_setPoint>:

float get_setPoint(const PIDController *pid) {
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
    return pid->data.setpoint;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	ee07 3a90 	vmov	s15, r3
}
 80038ca:	eeb0 0a67 	vmov.f32	s0, s15
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <pid_init>:

PIDController pid_init(float kp, float ki, float kd, float setpoint) {
 80038d8:	b4b0      	push	{r4, r5, r7}
 80038da:	b097      	sub	sp, #92	; 0x5c
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6178      	str	r0, [r7, #20]
 80038e0:	ed87 0a04 	vstr	s0, [r7, #16]
 80038e4:	edc7 0a03 	vstr	s1, [r7, #12]
 80038e8:	ed87 1a02 	vstr	s2, [r7, #8]
 80038ec:	edc7 1a01 	vstr	s3, [r7, #4]
    PIDController pidController;
    pidController.data.kp = kp;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	61fb      	str	r3, [r7, #28]
    pidController.data.ki = ki;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	623b      	str	r3, [r7, #32]
    pidController.data.kd = kd;
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
    pidController.data.setpoint = 0.0;
 80038fc:	f04f 0300 	mov.w	r3, #0
 8003900:	62bb      	str	r3, [r7, #40]	; 0x28
    pidController.data.last_error = 0.0;
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c
    pidController.data.integral = 0.0;
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	633b      	str	r3, [r7, #48]	; 0x30
    pidController.data.setpoint = setpoint;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	62bb      	str	r3, [r7, #40]	; 0x28

    //Initialisierung der getter FUnktionen
    pidController.get_kp = get_kp;
 8003912:	4b11      	ldr	r3, [pc, #68]	; (8003958 <pid_init+0x80>)
 8003914:	637b      	str	r3, [r7, #52]	; 0x34
    pidController.get_ki = get_ki;
 8003916:	4b11      	ldr	r3, [pc, #68]	; (800395c <pid_init+0x84>)
 8003918:	63bb      	str	r3, [r7, #56]	; 0x38
    pidController.get_kd = get_kd;
 800391a:	4b11      	ldr	r3, [pc, #68]	; (8003960 <pid_init+0x88>)
 800391c:	63fb      	str	r3, [r7, #60]	; 0x3c
    pidController.get_setPoint = get_setPoint;
 800391e:	4b11      	ldr	r3, [pc, #68]	; (8003964 <pid_init+0x8c>)
 8003920:	643b      	str	r3, [r7, #64]	; 0x40

    //Initialisierung der setter Funktionen
    pidController.set_kp = set_kp;
 8003922:	4b11      	ldr	r3, [pc, #68]	; (8003968 <pid_init+0x90>)
 8003924:	647b      	str	r3, [r7, #68]	; 0x44
    pidController.set_ki = set_ki;
 8003926:	4b11      	ldr	r3, [pc, #68]	; (800396c <pid_init+0x94>)
 8003928:	64bb      	str	r3, [r7, #72]	; 0x48
    pidController.set_kd = set_kd;
 800392a:	4b11      	ldr	r3, [pc, #68]	; (8003970 <pid_init+0x98>)
 800392c:	64fb      	str	r3, [r7, #76]	; 0x4c
    pidController.set_setPoint = set_setPoint;
 800392e:	4b11      	ldr	r3, [pc, #68]	; (8003974 <pid_init+0x9c>)
 8003930:	653b      	str	r3, [r7, #80]	; 0x50

    return pidController;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	461d      	mov	r5, r3
 8003936:	f107 041c 	add.w	r4, r7, #28
 800393a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800393c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800393e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003946:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800394a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800394e:	6978      	ldr	r0, [r7, #20]
 8003950:	375c      	adds	r7, #92	; 0x5c
 8003952:	46bd      	mov	sp, r7
 8003954:	bcb0      	pop	{r4, r5, r7}
 8003956:	4770      	bx	lr
 8003958:	08003807 	.word	0x08003807
 800395c:	08003843 	.word	0x08003843
 8003960:	0800387f 	.word	0x0800387f
 8003964:	080038bb 	.word	0x080038bb
 8003968:	080037e9 	.word	0x080037e9
 800396c:	08003825 	.word	0x08003825
 8003970:	08003861 	.word	0x08003861
 8003974:	0800389d 	.word	0x0800389d

08003978 <getSpeed>:
 */

#include <SensorActuators/motor.h>
#include "stm32f4xx_hal.h"
// Implementierung der Getter-Methode für die Geschwindigkeit des Motors
int getSpeed(const Motor *motor) {
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
    return motor->info.speed;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
}
 8003984:	4618      	mov	r0, r3
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <setSpeed>:

// Implementierung der Setter-Methode für die Geschwindigkeit des Motors
void setSpeed(Motor *motor, int speed) {
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
	if(speed <= 0){
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	dc09      	bgt.n	80039b4 <setSpeed+0x24>
		HAL_TIM_PWM_Stop(motor->info.timer, 0);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2100      	movs	r1, #0
 80039a6:	4618      	mov	r0, r3
 80039a8:	f003 f88c 	bl	8006ac4 <HAL_TIM_PWM_Stop>
	    motor->info.speed = 0;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]
		return;
 80039b2:	e01e      	b.n	80039f2 <setSpeed+0x62>
	}

	if(speed > 100){
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	2b64      	cmp	r3, #100	; 0x64
 80039b8:	dc1a      	bgt.n	80039f0 <setSpeed+0x60>
		return;
	}
    motor->info.speed = speed;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	601a      	str	r2, [r3, #0]
	  // Geschwindigkeit in Frequenz umrechnen
	int frequency = (speed * 3200) / 60;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80039c6:	fb02 f303 	mul.w	r3, r2, r3
 80039ca:	4a0b      	ldr	r2, [pc, #44]	; (80039f8 <setSpeed+0x68>)
 80039cc:	fb82 1203 	smull	r1, r2, r2, r3
 80039d0:	441a      	add	r2, r3
 80039d2:	1152      	asrs	r2, r2, #5
 80039d4:	17db      	asrs	r3, r3, #31
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	60fb      	str	r3, [r7, #12]

	      // PWM-Signal generieren
	generatePWM(motor,frequency);
 80039da:	68f9      	ldr	r1, [r7, #12]
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f80d 	bl	80039fc <generatePWM>
	HAL_TIM_PWM_Start(motor->info.timer, 0);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2100      	movs	r1, #0
 80039e8:	4618      	mov	r0, r3
 80039ea:	f002 ffbb 	bl	8006964 <HAL_TIM_PWM_Start>
 80039ee:	e000      	b.n	80039f2 <setSpeed+0x62>
		return;
 80039f0:	bf00      	nop

}
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	88888889 	.word	0x88888889

080039fc <generatePWM>:

void generatePWM(Motor *motor, int frequency) {
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b090      	sub	sp, #64	; 0x40
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
	  uint32_t period = (HAL_RCC_GetHCLKFreq() / ((motor->info.timer->Init.Prescaler + 1)* frequency)) - 1;
 8003a06:	f002 f929 	bl	8005c5c <HAL_RCC_GetHCLKFreq>
 8003a0a:	4601      	mov	r1, r0
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	3301      	adds	r3, #1
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	fb02 f303 	mul.w	r3, r2, r3
 8003a1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	63fb      	str	r3, [r7, #60]	; 0x3c

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a26:	2200      	movs	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	605a      	str	r2, [r3, #4]
 8003a2c:	609a      	str	r2, [r3, #8]
 8003a2e:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a3a:	f107 0308 	add.w	r3, r7, #8
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	605a      	str	r2, [r3, #4]
 8003a44:	609a      	str	r2, [r3, #8]
 8003a46:	60da      	str	r2, [r3, #12]
 8003a48:	611a      	str	r2, [r3, #16]
 8003a4a:	615a      	str	r2, [r3, #20]
 8003a4c:	619a      	str	r2, [r3, #24]

	  motor->info.timer->Init.Period = period; //26250-1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a54:	60da      	str	r2, [r3, #12]
	  HAL_TIM_Base_Init(motor->info.timer);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f002 feda 	bl	8006814 <HAL_TIM_Base_Init>
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a64:	62fb      	str	r3, [r7, #44]	; 0x2c
	  HAL_TIM_ConfigClockSource(motor->info.timer, &sClockSourceConfig);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003a6e:	4611      	mov	r1, r2
 8003a70:	4618      	mov	r0, r3
 8003a72:	f003 f94d 	bl	8006d10 <HAL_TIM_ConfigClockSource>
	  HAL_TIM_PWM_Init(motor->info.timer);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f002 ff19 	bl	80068b2 <HAL_TIM_PWM_Init>
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a80:	2300      	movs	r3, #0
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a84:	2300      	movs	r3, #0
 8003a86:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_TIMEx_MasterConfigSynchronization(motor->info.timer, &sMasterConfig);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003a90:	4611      	mov	r1, r2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f003 fcd0 	bl	8007438 <HAL_TIMEx_MasterConfigSynchronization>
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a98:	2360      	movs	r3, #96	; 0x60
 8003a9a:	60bb      	str	r3, [r7, #8]
	  sConfigOC.Pulse = motor->info.timer->Init.Period / 2; //13125-1
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	085b      	lsrs	r3, r3, #1
 8003aa4:	60fb      	str	r3, [r7, #12]
	  HAL_TIM_PWM_ConfigChannel(motor->info.timer, &sConfigOC, TIM_CHANNEL_1);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f107 0108 	add.w	r1, r7, #8
 8003aae:	2200      	movs	r2, #0
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f003 f86b 	bl	8006b8c <HAL_TIM_PWM_ConfigChannel>
	  HAL_TIM_MspPostInit(motor->info.timer);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fe24 	bl	8004708 <HAL_TIM_MspPostInit>


}
 8003ac0:	bf00      	nop
 8003ac2:	3740      	adds	r7, #64	; 0x40
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <initMotor>:

// Implementierung des Konstruktors für den Motor
Motor initMotor(TIM_HandleTypeDef *timer) {
 8003ac8:	b490      	push	{r4, r7}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
    Motor newMotor;
    newMotor.info.speed = 0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60bb      	str	r3, [r7, #8]
    newMotor.info.timer = timer;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	60fb      	str	r3, [r7, #12]
    newMotor.getSpeed = &getSpeed;
 8003ada:	4b08      	ldr	r3, [pc, #32]	; (8003afc <initMotor+0x34>)
 8003adc:	613b      	str	r3, [r7, #16]
    newMotor.setSpeed = &setSpeed;
 8003ade:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <initMotor+0x38>)
 8003ae0:	617b      	str	r3, [r7, #20]
    return newMotor;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	461c      	mov	r4, r3
 8003ae6:	f107 0308 	add.w	r3, r7, #8
 8003aea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003aec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc90      	pop	{r4, r7}
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	08003979 	.word	0x08003979
 8003b00:	08003991 	.word	0x08003991

08003b04 <getDiameter>:
#include <stdlib.h>
#include <stdint.h>
#include <SensorActuators/sensor.h>

// Getter-Methoden
float getDiameter(const Sensor* sensor) {
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
    return sensor->info.diameter;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	ee07 3a90 	vmov	s15, r3
}
 8003b14:	eeb0 0a67 	vmov.f32	s0, s15
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <getUartPort>:
char getPosition(const Sensor* sensor) {
	return sensor->info.position;
}
uint8_t getUartPort(const Sensor* sensor) {
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
	return sensor->info.uartPort;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	795b      	ldrb	r3, [r3, #5]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <setDiameter>:

// Setter-Methoden
void setDiameter(Sensor* sensor, float diameter) {
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
 8003b42:	ed87 0a00 	vstr	s0, [r7]
    sensor->info.diameter = diameter;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	601a      	str	r2, [r3, #0]
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <initSensor>:
}
void setUartPort(Sensor* sensor, uint8_t port){
	sensor->info.uartPort = port;
}
// Konstruktor
Sensor initSensor(float diameter, uint8_t port) {
 8003b58:	b4b0      	push	{r4, r5, r7}
 8003b5a:	b08d      	sub	sp, #52	; 0x34
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b64:	460b      	mov	r3, r1
 8003b66:	71fb      	strb	r3, [r7, #7]
    Sensor sensor;
    sensor.info.diameter = diameter;
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	613b      	str	r3, [r7, #16]
    sensor.info.uartPort = port;
 8003b6c:	79fb      	ldrb	r3, [r7, #7]
 8003b6e:	757b      	strb	r3, [r7, #21]

    // Initialisiere die Getter-Funktionen
    sensor.getDiameter = getDiameter;
 8003b70:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <initSensor+0x44>)
 8003b72:	61bb      	str	r3, [r7, #24]
    sensor.getUartPort = getUartPort;
 8003b74:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <initSensor+0x48>)
 8003b76:	623b      	str	r3, [r7, #32]

    // Initialisiere die Setter-Funktionen
    sensor.setDiameter = setDiameter;
 8003b78:	4b0a      	ldr	r3, [pc, #40]	; (8003ba4 <initSensor+0x4c>)
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24

    return sensor;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	461d      	mov	r5, r3
 8003b80:	f107 0410 	add.w	r4, r7, #16
 8003b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b88:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003b8c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	3734      	adds	r7, #52	; 0x34
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bcb0      	pop	{r4, r5, r7}
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	08003b05 	.word	0x08003b05
 8003ba0:	08003b23 	.word	0x08003b23
 8003ba4:	08003b3b 	.word	0x08003b3b

08003ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ba8:	b5b0      	push	{r4, r5, r7, lr}
 8003baa:	b09e      	sub	sp, #120	; 0x78
 8003bac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003bae:	f001 f819 	bl	8004be4 <HAL_Init>

  /* USER CODE BEGIN Init */
  sensorExtruder = initSensor(1.57, 1);
 8003bb2:	4cb2      	ldr	r4, [pc, #712]	; (8003e7c <main+0x2d4>)
 8003bb4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003bb8:	2101      	movs	r1, #1
 8003bba:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8003e80 <main+0x2d8>
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff ffca 	bl	8003b58 <initSensor>
 8003bc4:	4625      	mov	r5, r4
 8003bc6:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003bca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003bd2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  sensorBack 	 = initSensor(1.58, 6);
 8003bd6:	4cab      	ldr	r4, [pc, #684]	; (8003e84 <main+0x2dc>)
 8003bd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003bdc:	2106      	movs	r1, #6
 8003bde:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 8003e88 <main+0x2e0>
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7ff ffb8 	bl	8003b58 <initSensor>
 8003be8:	4625      	mov	r5, r4
 8003bea:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003bee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bf2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003bf6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  motor 		 = initMotor(&htim1);
 8003bfa:	4ca4      	ldr	r4, [pc, #656]	; (8003e8c <main+0x2e4>)
 8003bfc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c00:	49a3      	ldr	r1, [pc, #652]	; (8003e90 <main+0x2e8>)
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff ff60 	bl	8003ac8 <initMotor>
 8003c08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  int updateFaultHMI = 1;
 8003c12:	2301      	movs	r3, #1
 8003c14:	667b      	str	r3, [r7, #100]	; 0x64
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c16:	f000 f963 	bl	8003ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c1a:	f000 fb57 	bl	80042cc <MX_GPIO_Init>
  MX_SPI1_Init();
 8003c1e:	f000 f9c9 	bl	8003fb4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003c22:	f000 f9fd 	bl	8004020 <MX_SPI2_Init>
  MX_TIM1_Init();
 8003c26:	f000 fa31 	bl	800408c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8003c2a:	f000 fad1 	bl	80041d0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003c2e:	f000 faf9 	bl	8004224 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8003c32:	f000 fb21 	bl	8004278 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init(&hspi1, LCD_CS_GPIO_Port, LCD_CS_Pin, LCD_DC_GPIO_Port, LCD_DC_Pin, LCD_RST_GPIO_Port, LCD_RST_Pin);
 8003c36:	2380      	movs	r3, #128	; 0x80
 8003c38:	9302      	str	r3, [sp, #8]
 8003c3a:	4b96      	ldr	r3, [pc, #600]	; (8003e94 <main+0x2ec>)
 8003c3c:	9301      	str	r3, [sp, #4]
 8003c3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	4b94      	ldr	r3, [pc, #592]	; (8003e98 <main+0x2f0>)
 8003c46:	2240      	movs	r2, #64	; 0x40
 8003c48:	4994      	ldr	r1, [pc, #592]	; (8003e9c <main+0x2f4>)
 8003c4a:	4895      	ldr	r0, [pc, #596]	; (8003ea0 <main+0x2f8>)
 8003c4c:	f7fd fa8c 	bl	8001168 <ILI9341_Init>
  ILI9341_setRotation(2);
 8003c50:	2002      	movs	r0, #2
 8003c52:	f7fd ff15 	bl	8001a80 <ILI9341_setRotation>
  ILI9341_Fill(COLOR_NAVY);
 8003c56:	200f      	movs	r0, #15
 8003c58:	f7fd fb66 	bl	8001328 <ILI9341_Fill>
  TSC2046_Begin(&hspi2, TS_CS_GPIO_Port, TS_CS_Pin);
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	498f      	ldr	r1, [pc, #572]	; (8003e9c <main+0x2f4>)
 8003c60:	4890      	ldr	r0, [pc, #576]	; (8003ea4 <main+0x2fc>)
 8003c62:	f7fe f959 	bl	8001f18 <TSC2046_Begin>



  HAL_TIM_PWM_Start(&htim1, 0);
 8003c66:	2100      	movs	r1, #0
 8003c68:	4889      	ldr	r0, [pc, #548]	; (8003e90 <main+0x2e8>)
 8003c6a:	f002 fe7b 	bl	8006964 <HAL_TIM_PWM_Start>
  stateMachine = initStateMachine(&motor);
 8003c6e:	4c8e      	ldr	r4, [pc, #568]	; (8003ea8 <main+0x300>)
 8003c70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c74:	4985      	ldr	r1, [pc, #532]	; (8003e8c <main+0x2e4>)
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff fd8c 	bl	8003794 <initStateMachine>
 8003c7c:	4625      	mov	r5, r4
 8003c7e:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003c82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c86:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003c8a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  pidController = pid_init(1.0, 0.0,0.0, 1.75);
 8003c8e:	4c87      	ldr	r4, [pc, #540]	; (8003eac <main+0x304>)
 8003c90:	463b      	mov	r3, r7
 8003c92:	eef7 1a0c 	vmov.f32	s3, #124	; 0x3fe00000  1.750
 8003c96:	ed9f 1a86 	vldr	s2, [pc, #536]	; 8003eb0 <main+0x308>
 8003c9a:	eddf 0a85 	vldr	s1, [pc, #532]	; 8003eb0 <main+0x308>
 8003c9e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff fe18 	bl	80038d8 <pid_init>
 8003ca8:	4625      	mov	r5, r4
 8003caa:	463c      	mov	r4, r7
 8003cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cb8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003cbc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  uartDataPc 		     = createUartDataObject();
 8003cc0:	4c7c      	ldr	r4, [pc, #496]	; (8003eb4 <main+0x30c>)
 8003cc2:	463b      	mov	r3, r7
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff fc5b 	bl	8003580 <createUartDataObject>
 8003cca:	4620      	mov	r0, r4
 8003ccc:	463b      	mov	r3, r7
 8003cce:	2260      	movs	r2, #96	; 0x60
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	f006 fc3c 	bl	800a54e <memcpy>
  uartDataSensorExtruder = createUartDataObject();
 8003cd6:	4c78      	ldr	r4, [pc, #480]	; (8003eb8 <main+0x310>)
 8003cd8:	463b      	mov	r3, r7
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff fc50 	bl	8003580 <createUartDataObject>
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	463b      	mov	r3, r7
 8003ce4:	2260      	movs	r2, #96	; 0x60
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	f006 fc31 	bl	800a54e <memcpy>
  uartDataSensorBack	 = createUartDataObject();
 8003cec:	4c73      	ldr	r4, [pc, #460]	; (8003ebc <main+0x314>)
 8003cee:	463b      	mov	r3, r7
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff fc45 	bl	8003580 <createUartDataObject>
 8003cf6:	4620      	mov	r0, r4
 8003cf8:	463b      	mov	r3, r7
 8003cfa:	2260      	movs	r2, #96	; 0x60
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	f006 fc26 	bl	800a54e <memcpy>
  pcSender 		= createPcSendHandler(10);
 8003d02:	4c6f      	ldr	r4, [pc, #444]	; (8003ec0 <main+0x318>)
 8003d04:	463b      	mov	r3, r7
 8003d06:	210a      	movs	r1, #10
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff fa87 	bl	800321c <createPcSendHandler>
 8003d0e:	4625      	mov	r5, r4
 8003d10:	463c      	mov	r4, r7
 8003d12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d16:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003d1a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  pcReciever 	= createPcReceiveHandler(&stateMachine,&pidController, &motor, &pcSender, &huart2);
 8003d1e:	4c69      	ldr	r4, [pc, #420]	; (8003ec4 <main+0x31c>)
 8003d20:	4638      	mov	r0, r7
 8003d22:	4b69      	ldr	r3, [pc, #420]	; (8003ec8 <main+0x320>)
 8003d24:	9301      	str	r3, [sp, #4]
 8003d26:	4b66      	ldr	r3, [pc, #408]	; (8003ec0 <main+0x318>)
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	4b58      	ldr	r3, [pc, #352]	; (8003e8c <main+0x2e4>)
 8003d2c:	4a5f      	ldr	r2, [pc, #380]	; (8003eac <main+0x304>)
 8003d2e:	495e      	ldr	r1, [pc, #376]	; (8003ea8 <main+0x300>)
 8003d30:	f7fe fdb8 	bl	80028a4 <createPcReceiveHandler>
 8003d34:	4625      	mov	r5, r4
 8003d36:	463c      	mov	r4, r7
 8003d38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d40:	e885 0003 	stmia.w	r5, {r0, r1}
  sensorReciever = createSensorReceiveHandler(&sensorExtruder, &sensorBack);
 8003d44:	4c61      	ldr	r4, [pc, #388]	; (8003ecc <main+0x324>)
 8003d46:	463b      	mov	r3, r7
 8003d48:	4a4e      	ldr	r2, [pc, #312]	; (8003e84 <main+0x2dc>)
 8003d4a:	494c      	ldr	r1, [pc, #304]	; (8003e7c <main+0x2d4>)
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff fa97 	bl	8003280 <createSensorReceiveHandler>
 8003d52:	463b      	mov	r3, r7
 8003d54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HAL_UART_Receive_IT(&huart1, (uint8_t *)uartDataSensorExtruder.data.receivedData, 1);
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	4956      	ldr	r1, [pc, #344]	; (8003eb8 <main+0x310>)
 8003d60:	485b      	ldr	r0, [pc, #364]	; (8003ed0 <main+0x328>)
 8003d62:	f003 fd08 	bl	8007776 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, (uint8_t *)uartDataSensorBack.data.receivedData, 1);
 8003d66:	2201      	movs	r2, #1
 8003d68:	4954      	ldr	r1, [pc, #336]	; (8003ebc <main+0x314>)
 8003d6a:	485a      	ldr	r0, [pc, #360]	; (8003ed4 <main+0x32c>)
 8003d6c:	f003 fd03 	bl	8007776 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *)uartDataPc.data.receivedData, 1);
 8003d70:	2201      	movs	r2, #1
 8003d72:	4950      	ldr	r1, [pc, #320]	; (8003eb4 <main+0x30c>)
 8003d74:	4854      	ldr	r0, [pc, #336]	; (8003ec8 <main+0x320>)
 8003d76:	f003 fcfe 	bl	8007776 <HAL_UART_Receive_IT>

  hmi = HMI_init(&stateMachine, &sensorExtruder, &sensorBack, &pidController);
 8003d7a:	4c57      	ldr	r4, [pc, #348]	; (8003ed8 <main+0x330>)
 8003d7c:	4638      	mov	r0, r7
 8003d7e:	4b4b      	ldr	r3, [pc, #300]	; (8003eac <main+0x304>)
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	4b40      	ldr	r3, [pc, #256]	; (8003e84 <main+0x2dc>)
 8003d84:	4a3d      	ldr	r2, [pc, #244]	; (8003e7c <main+0x2d4>)
 8003d86:	4948      	ldr	r1, [pc, #288]	; (8003ea8 <main+0x300>)
 8003d88:	f7fe f9da 	bl	8002140 <HMI_init>
 8003d8c:	463b      	mov	r3, r7
 8003d8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  myTS_Handle = TSC2046_GetTouchData();
 8003d96:	4c51      	ldr	r4, [pc, #324]	; (8003edc <main+0x334>)
 8003d98:	463b      	mov	r3, r7
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fe f964 	bl	8002068 <TSC2046_GetTouchData>
 8003da0:	4622      	mov	r2, r4
 8003da2:	463b      	mov	r3, r7
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	6010      	str	r0, [r2, #0]
 8003da8:	889b      	ldrh	r3, [r3, #4]
 8003daa:	8093      	strh	r3, [r2, #4]
	  HMI_getTouch(&hmi, myTS_Handle, &stateMachine, &pidController);
 8003dac:	4a4b      	ldr	r2, [pc, #300]	; (8003edc <main+0x334>)
 8003dae:	4b3f      	ldr	r3, [pc, #252]	; (8003eac <main+0x304>)
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	4b3d      	ldr	r3, [pc, #244]	; (8003ea8 <main+0x300>)
 8003db4:	ca06      	ldmia	r2, {r1, r2}
 8003db6:	4848      	ldr	r0, [pc, #288]	; (8003ed8 <main+0x330>)
 8003db8:	f7fe fb96 	bl	80024e8 <HMI_getTouch>
	  float diameter = sensorBack.getDiameter(&sensorBack);
 8003dbc:	4b31      	ldr	r3, [pc, #196]	; (8003e84 <main+0x2dc>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	4830      	ldr	r0, [pc, #192]	; (8003e84 <main+0x2dc>)
 8003dc2:	4798      	blx	r3
 8003dc4:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
	  updateFaultHMI = HMI_checkBlob(&hmi, myTS_Handle,&pidController, updateFaultHMI);
 8003dc8:	4a44      	ldr	r2, [pc, #272]	; (8003edc <main+0x334>)
 8003dca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	4b37      	ldr	r3, [pc, #220]	; (8003eac <main+0x304>)
 8003dd0:	ca06      	ldmia	r2, {r1, r2}
 8003dd2:	4841      	ldr	r0, [pc, #260]	; (8003ed8 <main+0x330>)
 8003dd4:	f7fe fa7a 	bl	80022cc <HMI_checkBlob>
 8003dd8:	6678      	str	r0, [r7, #100]	; 0x64
	  HMI_signallight_check_blob(&stateMachine, fault_Pin, diameter, 2.5, 2);
 8003dda:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 8003dde:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
 8003de2:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8003de6:	2120      	movs	r1, #32
 8003de8:	482f      	ldr	r0, [pc, #188]	; (8003ea8 <main+0x300>)
 8003dea:	f7fe fd1f 	bl	800282c <HMI_signallight_check_blob>


	  if(uartDataPc.data.messageComplete){
 8003dee:	4b31      	ldr	r3, [pc, #196]	; (8003eb4 <main+0x30c>)
 8003df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d012      	beq.n	8003e1c <main+0x274>
		processPcInterfaceMessage(&pcReciever, uartDataPc.data.receivedData, uartDataPc.data.dataIndex);
 8003df6:	4b2f      	ldr	r3, [pc, #188]	; (8003eb4 <main+0x30c>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	492d      	ldr	r1, [pc, #180]	; (8003eb4 <main+0x30c>)
 8003e00:	4830      	ldr	r0, [pc, #192]	; (8003ec4 <main+0x31c>)
 8003e02:	f7fe feb9 	bl	8002b78 <processPcInterfaceMessage>
		// Zurücksetzen für die nächste Nachricht
		uartDataPc.data.messageComplete = 0;
 8003e06:	4b2b      	ldr	r3, [pc, #172]	; (8003eb4 <main+0x30c>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	645a      	str	r2, [r3, #68]	; 0x44
		uartDataPc.data.dataIndex = 0;
 8003e0c:	4b29      	ldr	r3, [pc, #164]	; (8003eb4 <main+0x30c>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_UART_Receive_IT(&huart2, (uint8_t *)uartDataPc.data.receivedData, 1);
 8003e12:	2201      	movs	r2, #1
 8003e14:	4927      	ldr	r1, [pc, #156]	; (8003eb4 <main+0x30c>)
 8003e16:	482c      	ldr	r0, [pc, #176]	; (8003ec8 <main+0x320>)
 8003e18:	f003 fcad 	bl	8007776 <HAL_UART_Receive_IT>

	  }
	  if(uartDataSensorExtruder.data.messageComplete){
 8003e1c:	4b26      	ldr	r3, [pc, #152]	; (8003eb8 <main+0x310>)
 8003e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d012      	beq.n	8003e4a <main+0x2a2>
		processSensorInterfaceMessage(1,&sensorReciever, uartDataSensorExtruder.data.receivedData, uartDataSensorExtruder.data.dataIndex);
 8003e24:	4b24      	ldr	r3, [pc, #144]	; (8003eb8 <main+0x310>)
 8003e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	4a23      	ldr	r2, [pc, #140]	; (8003eb8 <main+0x310>)
 8003e2c:	4927      	ldr	r1, [pc, #156]	; (8003ecc <main+0x324>)
 8003e2e:	2001      	movs	r0, #1
 8003e30:	f7ff fb32 	bl	8003498 <processSensorInterfaceMessage>
		// Zurücksetzen für die nächste Nachricht
		uartDataSensorExtruder.data.messageComplete = 0;
 8003e34:	4b20      	ldr	r3, [pc, #128]	; (8003eb8 <main+0x310>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	645a      	str	r2, [r3, #68]	; 0x44
		uartDataSensorExtruder.data.dataIndex = 0;
 8003e3a:	4b1f      	ldr	r3, [pc, #124]	; (8003eb8 <main+0x310>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_UART_Receive_IT(&huart1, (uint8_t *)uartDataSensorExtruder.data.receivedData, 1);
 8003e40:	2201      	movs	r2, #1
 8003e42:	491d      	ldr	r1, [pc, #116]	; (8003eb8 <main+0x310>)
 8003e44:	4822      	ldr	r0, [pc, #136]	; (8003ed0 <main+0x328>)
 8003e46:	f003 fc96 	bl	8007776 <HAL_UART_Receive_IT>
	  }
	  if(uartDataSensorBack.data.messageComplete){
 8003e4a:	4b1c      	ldr	r3, [pc, #112]	; (8003ebc <main+0x314>)
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0a1      	beq.n	8003d96 <main+0x1ee>
		processSensorInterfaceMessage(6,&sensorReciever, uartDataSensorBack.data.receivedData, uartDataSensorBack.data.dataIndex);
 8003e52:	4b1a      	ldr	r3, [pc, #104]	; (8003ebc <main+0x314>)
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	4a18      	ldr	r2, [pc, #96]	; (8003ebc <main+0x314>)
 8003e5a:	491c      	ldr	r1, [pc, #112]	; (8003ecc <main+0x324>)
 8003e5c:	2006      	movs	r0, #6
 8003e5e:	f7ff fb1b 	bl	8003498 <processSensorInterfaceMessage>
		// Zurücksetzen für die nächste Nachricht
		uartDataSensorBack.data.messageComplete = 0;
 8003e62:	4b16      	ldr	r3, [pc, #88]	; (8003ebc <main+0x314>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	645a      	str	r2, [r3, #68]	; 0x44
		uartDataSensorBack.data.dataIndex = 0;
 8003e68:	4b14      	ldr	r3, [pc, #80]	; (8003ebc <main+0x314>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_UART_Receive_IT(&huart6, (uint8_t *)uartDataSensorBack.data.receivedData, 1);
 8003e6e:	2201      	movs	r2, #1
 8003e70:	4912      	ldr	r1, [pc, #72]	; (8003ebc <main+0x314>)
 8003e72:	4818      	ldr	r0, [pc, #96]	; (8003ed4 <main+0x32c>)
 8003e74:	f003 fc7f 	bl	8007776 <HAL_UART_Receive_IT>
  {
 8003e78:	e78d      	b.n	8003d96 <main+0x1ee>
 8003e7a:	bf00      	nop
 8003e7c:	20000538 	.word	0x20000538
 8003e80:	3fc8f5c3 	.word	0x3fc8f5c3
 8003e84:	20000558 	.word	0x20000558
 8003e88:	3fca3d71 	.word	0x3fca3d71
 8003e8c:	20000578 	.word	0x20000578
 8003e90:	20000424 	.word	0x20000424
 8003e94:	40020800 	.word	0x40020800
 8003e98:	40020000 	.word	0x40020000
 8003e9c:	40020400 	.word	0x40020400
 8003ea0:	20000374 	.word	0x20000374
 8003ea4:	200003cc 	.word	0x200003cc
 8003ea8:	20000588 	.word	0x20000588
 8003eac:	200005a8 	.word	0x200005a8
 8003eb0:	00000000 	.word	0x00000000
 8003eb4:	20000628 	.word	0x20000628
 8003eb8:	20000688 	.word	0x20000688
 8003ebc:	200006e8 	.word	0x200006e8
 8003ec0:	20000608 	.word	0x20000608
 8003ec4:	200005f0 	.word	0x200005f0
 8003ec8:	200004b0 	.word	0x200004b0
 8003ecc:	200005e4 	.word	0x200005e4
 8003ed0:	2000046c 	.word	0x2000046c
 8003ed4:	200004f4 	.word	0x200004f4
 8003ed8:	20000748 	.word	0x20000748
 8003edc:	20000754 	.word	0x20000754

08003ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b094      	sub	sp, #80	; 0x50
 8003ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ee6:	f107 0320 	add.w	r3, r7, #32
 8003eea:	2230      	movs	r2, #48	; 0x30
 8003eec:	2100      	movs	r1, #0
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f006 fa89 	bl	800a406 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ef4:	f107 030c 	add.w	r3, r7, #12
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	605a      	str	r2, [r3, #4]
 8003efe:	609a      	str	r2, [r3, #8]
 8003f00:	60da      	str	r2, [r3, #12]
 8003f02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f04:	2300      	movs	r3, #0
 8003f06:	60bb      	str	r3, [r7, #8]
 8003f08:	4b28      	ldr	r3, [pc, #160]	; (8003fac <SystemClock_Config+0xcc>)
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	4a27      	ldr	r2, [pc, #156]	; (8003fac <SystemClock_Config+0xcc>)
 8003f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f12:	6413      	str	r3, [r2, #64]	; 0x40
 8003f14:	4b25      	ldr	r3, [pc, #148]	; (8003fac <SystemClock_Config+0xcc>)
 8003f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f20:	2300      	movs	r3, #0
 8003f22:	607b      	str	r3, [r7, #4]
 8003f24:	4b22      	ldr	r3, [pc, #136]	; (8003fb0 <SystemClock_Config+0xd0>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a21      	ldr	r2, [pc, #132]	; (8003fb0 <SystemClock_Config+0xd0>)
 8003f2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f2e:	6013      	str	r3, [r2, #0]
 8003f30:	4b1f      	ldr	r3, [pc, #124]	; (8003fb0 <SystemClock_Config+0xd0>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f38:	607b      	str	r3, [r7, #4]
 8003f3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f40:	2301      	movs	r3, #1
 8003f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f44:	2310      	movs	r3, #16
 8003f46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f48:	2302      	movs	r3, #2
 8003f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003f50:	2310      	movs	r3, #16
 8003f52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003f54:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003f58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003f5a:	2304      	movs	r3, #4
 8003f5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003f5e:	2304      	movs	r3, #4
 8003f60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f62:	f107 0320 	add.w	r3, r7, #32
 8003f66:	4618      	mov	r0, r3
 8003f68:	f001 fa14 	bl	8005394 <HAL_RCC_OscConfig>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003f72:	f000 fabd 	bl	80044f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f76:	230f      	movs	r3, #15
 8003f78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003f82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003f8c:	f107 030c 	add.w	r3, r7, #12
 8003f90:	2102      	movs	r1, #2
 8003f92:	4618      	mov	r0, r3
 8003f94:	f001 fc76 	bl	8005884 <HAL_RCC_ClockConfig>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003f9e:	f000 faa7 	bl	80044f0 <Error_Handler>
  }
}
 8003fa2:	bf00      	nop
 8003fa4:	3750      	adds	r7, #80	; 0x50
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	40007000 	.word	0x40007000

08003fb4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003fb8:	4b17      	ldr	r3, [pc, #92]	; (8004018 <MX_SPI1_Init+0x64>)
 8003fba:	4a18      	ldr	r2, [pc, #96]	; (800401c <MX_SPI1_Init+0x68>)
 8003fbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003fbe:	4b16      	ldr	r3, [pc, #88]	; (8004018 <MX_SPI1_Init+0x64>)
 8003fc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003fc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003fc6:	4b14      	ldr	r3, [pc, #80]	; (8004018 <MX_SPI1_Init+0x64>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003fcc:	4b12      	ldr	r3, [pc, #72]	; (8004018 <MX_SPI1_Init+0x64>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fd2:	4b11      	ldr	r3, [pc, #68]	; (8004018 <MX_SPI1_Init+0x64>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003fd8:	4b0f      	ldr	r3, [pc, #60]	; (8004018 <MX_SPI1_Init+0x64>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003fde:	4b0e      	ldr	r3, [pc, #56]	; (8004018 <MX_SPI1_Init+0x64>)
 8003fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fe4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fe6:	4b0c      	ldr	r3, [pc, #48]	; (8004018 <MX_SPI1_Init+0x64>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003fec:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <MX_SPI1_Init+0x64>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ff2:	4b09      	ldr	r3, [pc, #36]	; (8004018 <MX_SPI1_Init+0x64>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ff8:	4b07      	ldr	r3, [pc, #28]	; (8004018 <MX_SPI1_Init+0x64>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003ffe:	4b06      	ldr	r3, [pc, #24]	; (8004018 <MX_SPI1_Init+0x64>)
 8004000:	220a      	movs	r2, #10
 8004002:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004004:	4804      	ldr	r0, [pc, #16]	; (8004018 <MX_SPI1_Init+0x64>)
 8004006:	f001 fe5d 	bl	8005cc4 <HAL_SPI_Init>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004010:	f000 fa6e 	bl	80044f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004014:	bf00      	nop
 8004016:	bd80      	pop	{r7, pc}
 8004018:	20000374 	.word	0x20000374
 800401c:	40013000 	.word	0x40013000

08004020 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004024:	4b17      	ldr	r3, [pc, #92]	; (8004084 <MX_SPI2_Init+0x64>)
 8004026:	4a18      	ldr	r2, [pc, #96]	; (8004088 <MX_SPI2_Init+0x68>)
 8004028:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800402a:	4b16      	ldr	r3, [pc, #88]	; (8004084 <MX_SPI2_Init+0x64>)
 800402c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004030:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004032:	4b14      	ldr	r3, [pc, #80]	; (8004084 <MX_SPI2_Init+0x64>)
 8004034:	2200      	movs	r2, #0
 8004036:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004038:	4b12      	ldr	r3, [pc, #72]	; (8004084 <MX_SPI2_Init+0x64>)
 800403a:	2200      	movs	r2, #0
 800403c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800403e:	4b11      	ldr	r3, [pc, #68]	; (8004084 <MX_SPI2_Init+0x64>)
 8004040:	2200      	movs	r2, #0
 8004042:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004044:	4b0f      	ldr	r3, [pc, #60]	; (8004084 <MX_SPI2_Init+0x64>)
 8004046:	2200      	movs	r2, #0
 8004048:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800404a:	4b0e      	ldr	r3, [pc, #56]	; (8004084 <MX_SPI2_Init+0x64>)
 800404c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004050:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004052:	4b0c      	ldr	r3, [pc, #48]	; (8004084 <MX_SPI2_Init+0x64>)
 8004054:	2210      	movs	r2, #16
 8004056:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004058:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <MX_SPI2_Init+0x64>)
 800405a:	2200      	movs	r2, #0
 800405c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800405e:	4b09      	ldr	r3, [pc, #36]	; (8004084 <MX_SPI2_Init+0x64>)
 8004060:	2200      	movs	r2, #0
 8004062:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004064:	4b07      	ldr	r3, [pc, #28]	; (8004084 <MX_SPI2_Init+0x64>)
 8004066:	2200      	movs	r2, #0
 8004068:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800406a:	4b06      	ldr	r3, [pc, #24]	; (8004084 <MX_SPI2_Init+0x64>)
 800406c:	220a      	movs	r2, #10
 800406e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004070:	4804      	ldr	r0, [pc, #16]	; (8004084 <MX_SPI2_Init+0x64>)
 8004072:	f001 fe27 	bl	8005cc4 <HAL_SPI_Init>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800407c:	f000 fa38 	bl	80044f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004080:	bf00      	nop
 8004082:	bd80      	pop	{r7, pc}
 8004084:	200003cc 	.word	0x200003cc
 8004088:	40003800 	.word	0x40003800

0800408c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b096      	sub	sp, #88	; 0x58
 8004090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004092:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	605a      	str	r2, [r3, #4]
 800409c:	609a      	str	r2, [r3, #8]
 800409e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	605a      	str	r2, [r3, #4]
 80040b4:	609a      	str	r2, [r3, #8]
 80040b6:	60da      	str	r2, [r3, #12]
 80040b8:	611a      	str	r2, [r3, #16]
 80040ba:	615a      	str	r2, [r3, #20]
 80040bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80040be:	1d3b      	adds	r3, r7, #4
 80040c0:	2220      	movs	r2, #32
 80040c2:	2100      	movs	r1, #0
 80040c4:	4618      	mov	r0, r3
 80040c6:	f006 f99e 	bl	800a406 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80040ca:	4b3f      	ldr	r3, [pc, #252]	; (80041c8 <MX_TIM1_Init+0x13c>)
 80040cc:	4a3f      	ldr	r2, [pc, #252]	; (80041cc <MX_TIM1_Init+0x140>)
 80040ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 80040d0:	4b3d      	ldr	r3, [pc, #244]	; (80041c8 <MX_TIM1_Init+0x13c>)
 80040d2:	2204      	movs	r2, #4
 80040d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040d6:	4b3c      	ldr	r3, [pc, #240]	; (80041c8 <MX_TIM1_Init+0x13c>)
 80040d8:	2200      	movs	r2, #0
 80040da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80040dc:	4b3a      	ldr	r3, [pc, #232]	; (80041c8 <MX_TIM1_Init+0x13c>)
 80040de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040e4:	4b38      	ldr	r3, [pc, #224]	; (80041c8 <MX_TIM1_Init+0x13c>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80040ea:	4b37      	ldr	r3, [pc, #220]	; (80041c8 <MX_TIM1_Init+0x13c>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040f0:	4b35      	ldr	r3, [pc, #212]	; (80041c8 <MX_TIM1_Init+0x13c>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80040f6:	4834      	ldr	r0, [pc, #208]	; (80041c8 <MX_TIM1_Init+0x13c>)
 80040f8:	f002 fb8c 	bl	8006814 <HAL_TIM_Base_Init>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004102:	f000 f9f5 	bl	80044f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800410a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800410c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004110:	4619      	mov	r1, r3
 8004112:	482d      	ldr	r0, [pc, #180]	; (80041c8 <MX_TIM1_Init+0x13c>)
 8004114:	f002 fdfc 	bl	8006d10 <HAL_TIM_ConfigClockSource>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800411e:	f000 f9e7 	bl	80044f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004122:	4829      	ldr	r0, [pc, #164]	; (80041c8 <MX_TIM1_Init+0x13c>)
 8004124:	f002 fbc5 	bl	80068b2 <HAL_TIM_PWM_Init>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800412e:	f000 f9df 	bl	80044f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004132:	2300      	movs	r3, #0
 8004134:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004136:	2300      	movs	r3, #0
 8004138:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800413a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800413e:	4619      	mov	r1, r3
 8004140:	4821      	ldr	r0, [pc, #132]	; (80041c8 <MX_TIM1_Init+0x13c>)
 8004142:	f003 f979 	bl	8007438 <HAL_TIMEx_MasterConfigSynchronization>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800414c:	f000 f9d0 	bl	80044f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004150:	2360      	movs	r3, #96	; 0x60
 8004152:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 13125-1;
 8004154:	f243 3344 	movw	r3, #13124	; 0x3344
 8004158:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800415a:	2300      	movs	r3, #0
 800415c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800415e:	2300      	movs	r3, #0
 8004160:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004162:	2300      	movs	r3, #0
 8004164:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004166:	2300      	movs	r3, #0
 8004168:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800416a:	2300      	movs	r3, #0
 800416c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800416e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004172:	2200      	movs	r2, #0
 8004174:	4619      	mov	r1, r3
 8004176:	4814      	ldr	r0, [pc, #80]	; (80041c8 <MX_TIM1_Init+0x13c>)
 8004178:	f002 fd08 	bl	8006b8c <HAL_TIM_PWM_ConfigChannel>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8004182:	f000 f9b5 	bl	80044f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004186:	2300      	movs	r3, #0
 8004188:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800418a:	2300      	movs	r3, #0
 800418c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004192:	2300      	movs	r3, #0
 8004194:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004196:	2300      	movs	r3, #0
 8004198:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800419a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800419e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80041a0:	2300      	movs	r3, #0
 80041a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80041a4:	1d3b      	adds	r3, r7, #4
 80041a6:	4619      	mov	r1, r3
 80041a8:	4807      	ldr	r0, [pc, #28]	; (80041c8 <MX_TIM1_Init+0x13c>)
 80041aa:	f003 f9b3 	bl	8007514 <HAL_TIMEx_ConfigBreakDeadTime>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80041b4:	f000 f99c 	bl	80044f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80041b8:	4803      	ldr	r0, [pc, #12]	; (80041c8 <MX_TIM1_Init+0x13c>)
 80041ba:	f000 faa5 	bl	8004708 <HAL_TIM_MspPostInit>

}
 80041be:	bf00      	nop
 80041c0:	3758      	adds	r7, #88	; 0x58
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20000424 	.word	0x20000424
 80041cc:	40010000 	.word	0x40010000

080041d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80041d4:	4b11      	ldr	r3, [pc, #68]	; (800421c <MX_USART1_UART_Init+0x4c>)
 80041d6:	4a12      	ldr	r2, [pc, #72]	; (8004220 <MX_USART1_UART_Init+0x50>)
 80041d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80041da:	4b10      	ldr	r3, [pc, #64]	; (800421c <MX_USART1_UART_Init+0x4c>)
 80041dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80041e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80041e2:	4b0e      	ldr	r3, [pc, #56]	; (800421c <MX_USART1_UART_Init+0x4c>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80041e8:	4b0c      	ldr	r3, [pc, #48]	; (800421c <MX_USART1_UART_Init+0x4c>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80041ee:	4b0b      	ldr	r3, [pc, #44]	; (800421c <MX_USART1_UART_Init+0x4c>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80041f4:	4b09      	ldr	r3, [pc, #36]	; (800421c <MX_USART1_UART_Init+0x4c>)
 80041f6:	220c      	movs	r2, #12
 80041f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041fa:	4b08      	ldr	r3, [pc, #32]	; (800421c <MX_USART1_UART_Init+0x4c>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004200:	4b06      	ldr	r3, [pc, #24]	; (800421c <MX_USART1_UART_Init+0x4c>)
 8004202:	2200      	movs	r2, #0
 8004204:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004206:	4805      	ldr	r0, [pc, #20]	; (800421c <MX_USART1_UART_Init+0x4c>)
 8004208:	f003 f9d6 	bl	80075b8 <HAL_UART_Init>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004212:	f000 f96d 	bl	80044f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004216:	bf00      	nop
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	2000046c 	.word	0x2000046c
 8004220:	40011000 	.word	0x40011000

08004224 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004228:	4b11      	ldr	r3, [pc, #68]	; (8004270 <MX_USART2_UART_Init+0x4c>)
 800422a:	4a12      	ldr	r2, [pc, #72]	; (8004274 <MX_USART2_UART_Init+0x50>)
 800422c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800422e:	4b10      	ldr	r3, [pc, #64]	; (8004270 <MX_USART2_UART_Init+0x4c>)
 8004230:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004234:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004236:	4b0e      	ldr	r3, [pc, #56]	; (8004270 <MX_USART2_UART_Init+0x4c>)
 8004238:	2200      	movs	r2, #0
 800423a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800423c:	4b0c      	ldr	r3, [pc, #48]	; (8004270 <MX_USART2_UART_Init+0x4c>)
 800423e:	2200      	movs	r2, #0
 8004240:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004242:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <MX_USART2_UART_Init+0x4c>)
 8004244:	2200      	movs	r2, #0
 8004246:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004248:	4b09      	ldr	r3, [pc, #36]	; (8004270 <MX_USART2_UART_Init+0x4c>)
 800424a:	220c      	movs	r2, #12
 800424c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800424e:	4b08      	ldr	r3, [pc, #32]	; (8004270 <MX_USART2_UART_Init+0x4c>)
 8004250:	2200      	movs	r2, #0
 8004252:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004254:	4b06      	ldr	r3, [pc, #24]	; (8004270 <MX_USART2_UART_Init+0x4c>)
 8004256:	2200      	movs	r2, #0
 8004258:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800425a:	4805      	ldr	r0, [pc, #20]	; (8004270 <MX_USART2_UART_Init+0x4c>)
 800425c:	f003 f9ac 	bl	80075b8 <HAL_UART_Init>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004266:	f000 f943 	bl	80044f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800426a:	bf00      	nop
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	200004b0 	.word	0x200004b0
 8004274:	40004400 	.word	0x40004400

08004278 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800427c:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <MX_USART6_UART_Init+0x4c>)
 800427e:	4a12      	ldr	r2, [pc, #72]	; (80042c8 <MX_USART6_UART_Init+0x50>)
 8004280:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004282:	4b10      	ldr	r3, [pc, #64]	; (80042c4 <MX_USART6_UART_Init+0x4c>)
 8004284:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004288:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800428a:	4b0e      	ldr	r3, [pc, #56]	; (80042c4 <MX_USART6_UART_Init+0x4c>)
 800428c:	2200      	movs	r2, #0
 800428e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004290:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <MX_USART6_UART_Init+0x4c>)
 8004292:	2200      	movs	r2, #0
 8004294:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004296:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <MX_USART6_UART_Init+0x4c>)
 8004298:	2200      	movs	r2, #0
 800429a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800429c:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <MX_USART6_UART_Init+0x4c>)
 800429e:	220c      	movs	r2, #12
 80042a0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042a2:	4b08      	ldr	r3, [pc, #32]	; (80042c4 <MX_USART6_UART_Init+0x4c>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80042a8:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <MX_USART6_UART_Init+0x4c>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80042ae:	4805      	ldr	r0, [pc, #20]	; (80042c4 <MX_USART6_UART_Init+0x4c>)
 80042b0:	f003 f982 	bl	80075b8 <HAL_UART_Init>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80042ba:	f000 f919 	bl	80044f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80042be:	bf00      	nop
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	200004f4 	.word	0x200004f4
 80042c8:	40011400 	.word	0x40011400

080042cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08a      	sub	sp, #40	; 0x28
 80042d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042d2:	f107 0314 	add.w	r3, r7, #20
 80042d6:	2200      	movs	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	605a      	str	r2, [r3, #4]
 80042dc:	609a      	str	r2, [r3, #8]
 80042de:	60da      	str	r2, [r3, #12]
 80042e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042e2:	2300      	movs	r3, #0
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	4b41      	ldr	r3, [pc, #260]	; (80043ec <MX_GPIO_Init+0x120>)
 80042e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ea:	4a40      	ldr	r2, [pc, #256]	; (80043ec <MX_GPIO_Init+0x120>)
 80042ec:	f043 0304 	orr.w	r3, r3, #4
 80042f0:	6313      	str	r3, [r2, #48]	; 0x30
 80042f2:	4b3e      	ldr	r3, [pc, #248]	; (80043ec <MX_GPIO_Init+0x120>)
 80042f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	613b      	str	r3, [r7, #16]
 80042fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	4b3a      	ldr	r3, [pc, #232]	; (80043ec <MX_GPIO_Init+0x120>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	4a39      	ldr	r2, [pc, #228]	; (80043ec <MX_GPIO_Init+0x120>)
 8004308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800430c:	6313      	str	r3, [r2, #48]	; 0x30
 800430e:	4b37      	ldr	r3, [pc, #220]	; (80043ec <MX_GPIO_Init+0x120>)
 8004310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800431a:	2300      	movs	r3, #0
 800431c:	60bb      	str	r3, [r7, #8]
 800431e:	4b33      	ldr	r3, [pc, #204]	; (80043ec <MX_GPIO_Init+0x120>)
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	4a32      	ldr	r2, [pc, #200]	; (80043ec <MX_GPIO_Init+0x120>)
 8004324:	f043 0301 	orr.w	r3, r3, #1
 8004328:	6313      	str	r3, [r2, #48]	; 0x30
 800432a:	4b30      	ldr	r3, [pc, #192]	; (80043ec <MX_GPIO_Init+0x120>)
 800432c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	60bb      	str	r3, [r7, #8]
 8004334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004336:	2300      	movs	r3, #0
 8004338:	607b      	str	r3, [r7, #4]
 800433a:	4b2c      	ldr	r3, [pc, #176]	; (80043ec <MX_GPIO_Init+0x120>)
 800433c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433e:	4a2b      	ldr	r2, [pc, #172]	; (80043ec <MX_GPIO_Init+0x120>)
 8004340:	f043 0302 	orr.w	r3, r3, #2
 8004344:	6313      	str	r3, [r2, #48]	; 0x30
 8004346:	4b29      	ldr	r3, [pc, #164]	; (80043ec <MX_GPIO_Init+0x120>)
 8004348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	607b      	str	r3, [r7, #4]
 8004350:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8004352:	2200      	movs	r2, #0
 8004354:	f44f 7108 	mov.w	r1, #544	; 0x220
 8004358:	4825      	ldr	r0, [pc, #148]	; (80043f0 <MX_GPIO_Init+0x124>)
 800435a:	f001 f801 	bl	8005360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, fault_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800435e:	2200      	movs	r2, #0
 8004360:	21a0      	movs	r1, #160	; 0xa0
 8004362:	4824      	ldr	r0, [pc, #144]	; (80043f4 <MX_GPIO_Init+0x128>)
 8004364:	f000 fffc 	bl	8005360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TS_CS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8004368:	2200      	movs	r2, #0
 800436a:	2160      	movs	r1, #96	; 0x60
 800436c:	4822      	ldr	r0, [pc, #136]	; (80043f8 <MX_GPIO_Init+0x12c>)
 800436e:	f000 fff7 	bl	8005360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004372:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004378:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800437c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437e:	2300      	movs	r3, #0
 8004380:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004382:	f107 0314 	add.w	r3, r7, #20
 8004386:	4619      	mov	r1, r3
 8004388:	481a      	ldr	r0, [pc, #104]	; (80043f4 <MX_GPIO_Init+0x128>)
 800438a:	f000 fe65 	bl	8005058 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LCD_DC_Pin;
 800438e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8004392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004394:	2301      	movs	r3, #1
 8004396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004398:	2300      	movs	r3, #0
 800439a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800439c:	2300      	movs	r3, #0
 800439e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043a0:	f107 0314 	add.w	r3, r7, #20
 80043a4:	4619      	mov	r1, r3
 80043a6:	4812      	ldr	r0, [pc, #72]	; (80043f0 <MX_GPIO_Init+0x124>)
 80043a8:	f000 fe56 	bl	8005058 <HAL_GPIO_Init>

  /*Configure GPIO pins : fault_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = fault_Pin|LCD_RST_Pin;
 80043ac:	23a0      	movs	r3, #160	; 0xa0
 80043ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043b0:	2301      	movs	r3, #1
 80043b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b4:	2300      	movs	r3, #0
 80043b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b8:	2300      	movs	r3, #0
 80043ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043bc:	f107 0314 	add.w	r3, r7, #20
 80043c0:	4619      	mov	r1, r3
 80043c2:	480c      	ldr	r0, [pc, #48]	; (80043f4 <MX_GPIO_Init+0x128>)
 80043c4:	f000 fe48 	bl	8005058 <HAL_GPIO_Init>

  /*Configure GPIO pins : TS_CS_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = TS_CS_Pin|LCD_CS_Pin;
 80043c8:	2360      	movs	r3, #96	; 0x60
 80043ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043cc:	2301      	movs	r3, #1
 80043ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d0:	2300      	movs	r3, #0
 80043d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043d4:	2300      	movs	r3, #0
 80043d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043d8:	f107 0314 	add.w	r3, r7, #20
 80043dc:	4619      	mov	r1, r3
 80043de:	4806      	ldr	r0, [pc, #24]	; (80043f8 <MX_GPIO_Init+0x12c>)
 80043e0:	f000 fe3a 	bl	8005058 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80043e4:	bf00      	nop
 80043e6:	3728      	adds	r7, #40	; 0x28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40023800 	.word	0x40023800
 80043f0:	40020000 	.word	0x40020000
 80043f4:	40020800 	.word	0x40020800
 80043f8:	40020400 	.word	0x40020400

080043fc <processUartData>:

/* USER CODE BEGIN 4 */
void processUartData(UART_HandleTypeDef *huart, UartDataObject *uartData) {
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  if (uartData->data.dataIndex == 0 && uartData->data.receivedData[0] != '?' && uartData->data.receivedData[0] != '!') {
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	2b00      	cmp	r3, #0
 800440c:	d111      	bne.n	8004432 <processUartData+0x36>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b3f      	cmp	r3, #63	; 0x3f
 8004414:	d00d      	beq.n	8004432 <processUartData+0x36>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	2b21      	cmp	r3, #33	; 0x21
 800441c:	d009      	beq.n	8004432 <processUartData+0x36>
    // Fehlerhafte Startbyte, Nachricht ignorieren
    uartData->data.dataIndex = 0;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2200      	movs	r2, #0
 8004422:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_UART_Receive_IT(huart, &uartData->data.receivedData[0], 1);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	2201      	movs	r2, #1
 8004428:	4619      	mov	r1, r3
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f003 f9a3 	bl	8007776 <HAL_UART_Receive_IT>
    HAL_UART_Receive_IT(huart, &uartData->data.receivedData[0], 1);
  } else {
    uartData->data.dataIndex++;
    HAL_UART_Receive_IT(huart, (uint8_t *)&uartData->data.receivedData[uartData->data.dataIndex], 1);
  }
}
 8004430:	e02b      	b.n	800448a <processUartData+0x8e>
  } else if (uartData->data.receivedData[uartData->data.dataIndex] == '\r' ) {
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	5cd3      	ldrb	r3, [r2, r3]
 800443a:	2b0d      	cmp	r3, #13
 800443c:	d109      	bne.n	8004452 <processUartData+0x56>
    uartData->data.receivedData[uartData->data.dataIndex + 1] = '\0';  // Null-Terminierung hinzufügen
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	3301      	adds	r3, #1
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	2100      	movs	r1, #0
 8004448:	54d1      	strb	r1, [r2, r3]
    uartData->data.messageComplete = 1;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2201      	movs	r2, #1
 800444e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004450:	e01b      	b.n	800448a <processUartData+0x8e>
  } else if (uartData->data.dataIndex >= sizeof(uartData->data.receivedData) - 1) {
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	2b3e      	cmp	r3, #62	; 0x3e
 8004458:	d909      	bls.n	800446e <processUartData+0x72>
    uartData->data.dataIndex = 0;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2200      	movs	r2, #0
 800445e:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_UART_Receive_IT(huart, &uartData->data.receivedData[0], 1);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2201      	movs	r2, #1
 8004464:	4619      	mov	r1, r3
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f003 f985 	bl	8007776 <HAL_UART_Receive_IT>
}
 800446c:	e00d      	b.n	800448a <processUartData+0x8e>
    uartData->data.dataIndex++;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_UART_Receive_IT(huart, (uint8_t *)&uartData->data.receivedData[uartData->data.dataIndex], 1);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	4413      	add	r3, r2
 8004480:	2201      	movs	r2, #1
 8004482:	4619      	mov	r1, r3
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f003 f976 	bl	8007776 <HAL_UART_Receive_IT>
}
 800448a:	bf00      	nop
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
	...

08004494 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  if (huart == &huart2) {
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a0e      	ldr	r2, [pc, #56]	; (80044d8 <HAL_UART_RxCpltCallback+0x44>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d104      	bne.n	80044ae <HAL_UART_RxCpltCallback+0x1a>
    processUartData(&huart2, &uartDataPc);
 80044a4:	490d      	ldr	r1, [pc, #52]	; (80044dc <HAL_UART_RxCpltCallback+0x48>)
 80044a6:	480c      	ldr	r0, [pc, #48]	; (80044d8 <HAL_UART_RxCpltCallback+0x44>)
 80044a8:	f7ff ffa8 	bl	80043fc <processUartData>
  }else if (huart == &huart1){
	processUartData(&huart1, &uartDataSensorExtruder);
  }else if (huart == &huart6){
	  processUartData(&huart6, &uartDataSensorBack);
  }
}
 80044ac:	e010      	b.n	80044d0 <HAL_UART_RxCpltCallback+0x3c>
  }else if (huart == &huart1){
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a0b      	ldr	r2, [pc, #44]	; (80044e0 <HAL_UART_RxCpltCallback+0x4c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d104      	bne.n	80044c0 <HAL_UART_RxCpltCallback+0x2c>
	processUartData(&huart1, &uartDataSensorExtruder);
 80044b6:	490b      	ldr	r1, [pc, #44]	; (80044e4 <HAL_UART_RxCpltCallback+0x50>)
 80044b8:	4809      	ldr	r0, [pc, #36]	; (80044e0 <HAL_UART_RxCpltCallback+0x4c>)
 80044ba:	f7ff ff9f 	bl	80043fc <processUartData>
}
 80044be:	e007      	b.n	80044d0 <HAL_UART_RxCpltCallback+0x3c>
  }else if (huart == &huart6){
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a09      	ldr	r2, [pc, #36]	; (80044e8 <HAL_UART_RxCpltCallback+0x54>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d103      	bne.n	80044d0 <HAL_UART_RxCpltCallback+0x3c>
	  processUartData(&huart6, &uartDataSensorBack);
 80044c8:	4908      	ldr	r1, [pc, #32]	; (80044ec <HAL_UART_RxCpltCallback+0x58>)
 80044ca:	4807      	ldr	r0, [pc, #28]	; (80044e8 <HAL_UART_RxCpltCallback+0x54>)
 80044cc:	f7ff ff96 	bl	80043fc <processUartData>
}
 80044d0:	bf00      	nop
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	200004b0 	.word	0x200004b0
 80044dc:	20000628 	.word	0x20000628
 80044e0:	2000046c 	.word	0x2000046c
 80044e4:	20000688 	.word	0x20000688
 80044e8:	200004f4 	.word	0x200004f4
 80044ec:	200006e8 	.word	0x200006e8

080044f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044f4:	b672      	cpsid	i
}
 80044f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80044f8:	e7fe      	b.n	80044f8 <Error_Handler+0x8>
	...

080044fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004502:	2300      	movs	r3, #0
 8004504:	607b      	str	r3, [r7, #4]
 8004506:	4b10      	ldr	r3, [pc, #64]	; (8004548 <HAL_MspInit+0x4c>)
 8004508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450a:	4a0f      	ldr	r2, [pc, #60]	; (8004548 <HAL_MspInit+0x4c>)
 800450c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004510:	6453      	str	r3, [r2, #68]	; 0x44
 8004512:	4b0d      	ldr	r3, [pc, #52]	; (8004548 <HAL_MspInit+0x4c>)
 8004514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800451a:	607b      	str	r3, [r7, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800451e:	2300      	movs	r3, #0
 8004520:	603b      	str	r3, [r7, #0]
 8004522:	4b09      	ldr	r3, [pc, #36]	; (8004548 <HAL_MspInit+0x4c>)
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	4a08      	ldr	r2, [pc, #32]	; (8004548 <HAL_MspInit+0x4c>)
 8004528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800452c:	6413      	str	r3, [r2, #64]	; 0x40
 800452e:	4b06      	ldr	r3, [pc, #24]	; (8004548 <HAL_MspInit+0x4c>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004536:	603b      	str	r3, [r7, #0]
 8004538:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800453a:	2007      	movs	r0, #7
 800453c:	f000 fcb8 	bl	8004eb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004540:	bf00      	nop
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40023800 	.word	0x40023800

0800454c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b08e      	sub	sp, #56	; 0x38
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	605a      	str	r2, [r3, #4]
 800455e:	609a      	str	r2, [r3, #8]
 8004560:	60da      	str	r2, [r3, #12]
 8004562:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a50      	ldr	r2, [pc, #320]	; (80046ac <HAL_SPI_MspInit+0x160>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d14a      	bne.n	8004604 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800456e:	2300      	movs	r3, #0
 8004570:	623b      	str	r3, [r7, #32]
 8004572:	4b4f      	ldr	r3, [pc, #316]	; (80046b0 <HAL_SPI_MspInit+0x164>)
 8004574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004576:	4a4e      	ldr	r2, [pc, #312]	; (80046b0 <HAL_SPI_MspInit+0x164>)
 8004578:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800457c:	6453      	str	r3, [r2, #68]	; 0x44
 800457e:	4b4c      	ldr	r3, [pc, #304]	; (80046b0 <HAL_SPI_MspInit+0x164>)
 8004580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004582:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004586:	623b      	str	r3, [r7, #32]
 8004588:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800458a:	2300      	movs	r3, #0
 800458c:	61fb      	str	r3, [r7, #28]
 800458e:	4b48      	ldr	r3, [pc, #288]	; (80046b0 <HAL_SPI_MspInit+0x164>)
 8004590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004592:	4a47      	ldr	r2, [pc, #284]	; (80046b0 <HAL_SPI_MspInit+0x164>)
 8004594:	f043 0301 	orr.w	r3, r3, #1
 8004598:	6313      	str	r3, [r2, #48]	; 0x30
 800459a:	4b45      	ldr	r3, [pc, #276]	; (80046b0 <HAL_SPI_MspInit+0x164>)
 800459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	61fb      	str	r3, [r7, #28]
 80045a4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045a6:	2300      	movs	r3, #0
 80045a8:	61bb      	str	r3, [r7, #24]
 80045aa:	4b41      	ldr	r3, [pc, #260]	; (80046b0 <HAL_SPI_MspInit+0x164>)
 80045ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ae:	4a40      	ldr	r2, [pc, #256]	; (80046b0 <HAL_SPI_MspInit+0x164>)
 80045b0:	f043 0302 	orr.w	r3, r3, #2
 80045b4:	6313      	str	r3, [r2, #48]	; 0x30
 80045b6:	4b3e      	ldr	r3, [pc, #248]	; (80046b0 <HAL_SPI_MspInit+0x164>)
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	61bb      	str	r3, [r7, #24]
 80045c0:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80045c2:	23c0      	movs	r3, #192	; 0xc0
 80045c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045c6:	2302      	movs	r3, #2
 80045c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045ce:	2303      	movs	r3, #3
 80045d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80045d2:	2305      	movs	r3, #5
 80045d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045da:	4619      	mov	r1, r3
 80045dc:	4835      	ldr	r0, [pc, #212]	; (80046b4 <HAL_SPI_MspInit+0x168>)
 80045de:	f000 fd3b 	bl	8005058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80045e2:	2308      	movs	r3, #8
 80045e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e6:	2302      	movs	r3, #2
 80045e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ea:	2300      	movs	r3, #0
 80045ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045ee:	2303      	movs	r3, #3
 80045f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80045f2:	2305      	movs	r3, #5
 80045f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045fa:	4619      	mov	r1, r3
 80045fc:	482e      	ldr	r0, [pc, #184]	; (80046b8 <HAL_SPI_MspInit+0x16c>)
 80045fe:	f000 fd2b 	bl	8005058 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004602:	e04f      	b.n	80046a4 <HAL_SPI_MspInit+0x158>
  else if(hspi->Instance==SPI2)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a2c      	ldr	r2, [pc, #176]	; (80046bc <HAL_SPI_MspInit+0x170>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d14a      	bne.n	80046a4 <HAL_SPI_MspInit+0x158>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	4b27      	ldr	r3, [pc, #156]	; (80046b0 <HAL_SPI_MspInit+0x164>)
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	4a26      	ldr	r2, [pc, #152]	; (80046b0 <HAL_SPI_MspInit+0x164>)
 8004618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800461c:	6413      	str	r3, [r2, #64]	; 0x40
 800461e:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <HAL_SPI_MspInit+0x164>)
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800462a:	2300      	movs	r3, #0
 800462c:	613b      	str	r3, [r7, #16]
 800462e:	4b20      	ldr	r3, [pc, #128]	; (80046b0 <HAL_SPI_MspInit+0x164>)
 8004630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004632:	4a1f      	ldr	r2, [pc, #124]	; (80046b0 <HAL_SPI_MspInit+0x164>)
 8004634:	f043 0304 	orr.w	r3, r3, #4
 8004638:	6313      	str	r3, [r2, #48]	; 0x30
 800463a:	4b1d      	ldr	r3, [pc, #116]	; (80046b0 <HAL_SPI_MspInit+0x164>)
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	613b      	str	r3, [r7, #16]
 8004644:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004646:	2300      	movs	r3, #0
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	4b19      	ldr	r3, [pc, #100]	; (80046b0 <HAL_SPI_MspInit+0x164>)
 800464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464e:	4a18      	ldr	r2, [pc, #96]	; (80046b0 <HAL_SPI_MspInit+0x164>)
 8004650:	f043 0302 	orr.w	r3, r3, #2
 8004654:	6313      	str	r3, [r2, #48]	; 0x30
 8004656:	4b16      	ldr	r3, [pc, #88]	; (80046b0 <HAL_SPI_MspInit+0x164>)
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	60fb      	str	r3, [r7, #12]
 8004660:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TS_DO_Pin|T_DIN_Pin;
 8004662:	230c      	movs	r3, #12
 8004664:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004666:	2302      	movs	r3, #2
 8004668:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800466a:	2300      	movs	r3, #0
 800466c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800466e:	2303      	movs	r3, #3
 8004670:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004672:	2305      	movs	r3, #5
 8004674:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800467a:	4619      	mov	r1, r3
 800467c:	4810      	ldr	r0, [pc, #64]	; (80046c0 <HAL_SPI_MspInit+0x174>)
 800467e:	f000 fceb 	bl	8005058 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004686:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004688:	2302      	movs	r3, #2
 800468a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468c:	2300      	movs	r3, #0
 800468e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004690:	2303      	movs	r3, #3
 8004692:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004694:	2305      	movs	r3, #5
 8004696:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800469c:	4619      	mov	r1, r3
 800469e:	4806      	ldr	r0, [pc, #24]	; (80046b8 <HAL_SPI_MspInit+0x16c>)
 80046a0:	f000 fcda 	bl	8005058 <HAL_GPIO_Init>
}
 80046a4:	bf00      	nop
 80046a6:	3738      	adds	r7, #56	; 0x38
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40013000 	.word	0x40013000
 80046b0:	40023800 	.word	0x40023800
 80046b4:	40020000 	.word	0x40020000
 80046b8:	40020400 	.word	0x40020400
 80046bc:	40003800 	.word	0x40003800
 80046c0:	40020800 	.word	0x40020800

080046c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a0b      	ldr	r2, [pc, #44]	; (8004700 <HAL_TIM_Base_MspInit+0x3c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d10d      	bne.n	80046f2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80046d6:	2300      	movs	r3, #0
 80046d8:	60fb      	str	r3, [r7, #12]
 80046da:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <HAL_TIM_Base_MspInit+0x40>)
 80046dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046de:	4a09      	ldr	r2, [pc, #36]	; (8004704 <HAL_TIM_Base_MspInit+0x40>)
 80046e0:	f043 0301 	orr.w	r3, r3, #1
 80046e4:	6453      	str	r3, [r2, #68]	; 0x44
 80046e6:	4b07      	ldr	r3, [pc, #28]	; (8004704 <HAL_TIM_Base_MspInit+0x40>)
 80046e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80046f2:	bf00      	nop
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	40010000 	.word	0x40010000
 8004704:	40023800 	.word	0x40023800

08004708 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b088      	sub	sp, #32
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004710:	f107 030c 	add.w	r3, r7, #12
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	605a      	str	r2, [r3, #4]
 800471a:	609a      	str	r2, [r3, #8]
 800471c:	60da      	str	r2, [r3, #12]
 800471e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a12      	ldr	r2, [pc, #72]	; (8004770 <HAL_TIM_MspPostInit+0x68>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d11e      	bne.n	8004768 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800472a:	2300      	movs	r3, #0
 800472c:	60bb      	str	r3, [r7, #8]
 800472e:	4b11      	ldr	r3, [pc, #68]	; (8004774 <HAL_TIM_MspPostInit+0x6c>)
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	4a10      	ldr	r2, [pc, #64]	; (8004774 <HAL_TIM_MspPostInit+0x6c>)
 8004734:	f043 0301 	orr.w	r3, r3, #1
 8004738:	6313      	str	r3, [r2, #48]	; 0x30
 800473a:	4b0e      	ldr	r3, [pc, #56]	; (8004774 <HAL_TIM_MspPostInit+0x6c>)
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	60bb      	str	r3, [r7, #8]
 8004744:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004746:	f44f 7380 	mov.w	r3, #256	; 0x100
 800474a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800474c:	2302      	movs	r3, #2
 800474e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004750:	2300      	movs	r3, #0
 8004752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004754:	2300      	movs	r3, #0
 8004756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004758:	2301      	movs	r3, #1
 800475a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800475c:	f107 030c 	add.w	r3, r7, #12
 8004760:	4619      	mov	r1, r3
 8004762:	4805      	ldr	r0, [pc, #20]	; (8004778 <HAL_TIM_MspPostInit+0x70>)
 8004764:	f000 fc78 	bl	8005058 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004768:	bf00      	nop
 800476a:	3720      	adds	r7, #32
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40010000 	.word	0x40010000
 8004774:	40023800 	.word	0x40023800
 8004778:	40020000 	.word	0x40020000

0800477c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08e      	sub	sp, #56	; 0x38
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	605a      	str	r2, [r3, #4]
 800478e:	609a      	str	r2, [r3, #8]
 8004790:	60da      	str	r2, [r3, #12]
 8004792:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a67      	ldr	r2, [pc, #412]	; (8004938 <HAL_UART_MspInit+0x1bc>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d135      	bne.n	800480a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800479e:	2300      	movs	r3, #0
 80047a0:	623b      	str	r3, [r7, #32]
 80047a2:	4b66      	ldr	r3, [pc, #408]	; (800493c <HAL_UART_MspInit+0x1c0>)
 80047a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a6:	4a65      	ldr	r2, [pc, #404]	; (800493c <HAL_UART_MspInit+0x1c0>)
 80047a8:	f043 0310 	orr.w	r3, r3, #16
 80047ac:	6453      	str	r3, [r2, #68]	; 0x44
 80047ae:	4b63      	ldr	r3, [pc, #396]	; (800493c <HAL_UART_MspInit+0x1c0>)
 80047b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b2:	f003 0310 	and.w	r3, r3, #16
 80047b6:	623b      	str	r3, [r7, #32]
 80047b8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ba:	2300      	movs	r3, #0
 80047bc:	61fb      	str	r3, [r7, #28]
 80047be:	4b5f      	ldr	r3, [pc, #380]	; (800493c <HAL_UART_MspInit+0x1c0>)
 80047c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c2:	4a5e      	ldr	r2, [pc, #376]	; (800493c <HAL_UART_MspInit+0x1c0>)
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	6313      	str	r3, [r2, #48]	; 0x30
 80047ca:	4b5c      	ldr	r3, [pc, #368]	; (800493c <HAL_UART_MspInit+0x1c0>)
 80047cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	61fb      	str	r3, [r7, #28]
 80047d4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80047d6:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80047da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047dc:	2302      	movs	r3, #2
 80047de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e0:	2300      	movs	r3, #0
 80047e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047e4:	2303      	movs	r3, #3
 80047e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80047e8:	2307      	movs	r3, #7
 80047ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047f0:	4619      	mov	r1, r3
 80047f2:	4853      	ldr	r0, [pc, #332]	; (8004940 <HAL_UART_MspInit+0x1c4>)
 80047f4:	f000 fc30 	bl	8005058 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80047f8:	2200      	movs	r2, #0
 80047fa:	2100      	movs	r1, #0
 80047fc:	2025      	movs	r0, #37	; 0x25
 80047fe:	f000 fb62 	bl	8004ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004802:	2025      	movs	r0, #37	; 0x25
 8004804:	f000 fb7b 	bl	8004efe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004808:	e091      	b.n	800492e <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a4d      	ldr	r2, [pc, #308]	; (8004944 <HAL_UART_MspInit+0x1c8>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d134      	bne.n	800487e <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004814:	2300      	movs	r3, #0
 8004816:	61bb      	str	r3, [r7, #24]
 8004818:	4b48      	ldr	r3, [pc, #288]	; (800493c <HAL_UART_MspInit+0x1c0>)
 800481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481c:	4a47      	ldr	r2, [pc, #284]	; (800493c <HAL_UART_MspInit+0x1c0>)
 800481e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004822:	6413      	str	r3, [r2, #64]	; 0x40
 8004824:	4b45      	ldr	r3, [pc, #276]	; (800493c <HAL_UART_MspInit+0x1c0>)
 8004826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482c:	61bb      	str	r3, [r7, #24]
 800482e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004830:	2300      	movs	r3, #0
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	4b41      	ldr	r3, [pc, #260]	; (800493c <HAL_UART_MspInit+0x1c0>)
 8004836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004838:	4a40      	ldr	r2, [pc, #256]	; (800493c <HAL_UART_MspInit+0x1c0>)
 800483a:	f043 0301 	orr.w	r3, r3, #1
 800483e:	6313      	str	r3, [r2, #48]	; 0x30
 8004840:	4b3e      	ldr	r3, [pc, #248]	; (800493c <HAL_UART_MspInit+0x1c0>)
 8004842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800484c:	230c      	movs	r3, #12
 800484e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004850:	2302      	movs	r3, #2
 8004852:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004854:	2300      	movs	r3, #0
 8004856:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004858:	2303      	movs	r3, #3
 800485a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800485c:	2307      	movs	r3, #7
 800485e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004864:	4619      	mov	r1, r3
 8004866:	4836      	ldr	r0, [pc, #216]	; (8004940 <HAL_UART_MspInit+0x1c4>)
 8004868:	f000 fbf6 	bl	8005058 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800486c:	2200      	movs	r2, #0
 800486e:	2100      	movs	r1, #0
 8004870:	2026      	movs	r0, #38	; 0x26
 8004872:	f000 fb28 	bl	8004ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004876:	2026      	movs	r0, #38	; 0x26
 8004878:	f000 fb41 	bl	8004efe <HAL_NVIC_EnableIRQ>
}
 800487c:	e057      	b.n	800492e <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART6)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a31      	ldr	r2, [pc, #196]	; (8004948 <HAL_UART_MspInit+0x1cc>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d152      	bne.n	800492e <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004888:	2300      	movs	r3, #0
 800488a:	613b      	str	r3, [r7, #16]
 800488c:	4b2b      	ldr	r3, [pc, #172]	; (800493c <HAL_UART_MspInit+0x1c0>)
 800488e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004890:	4a2a      	ldr	r2, [pc, #168]	; (800493c <HAL_UART_MspInit+0x1c0>)
 8004892:	f043 0320 	orr.w	r3, r3, #32
 8004896:	6453      	str	r3, [r2, #68]	; 0x44
 8004898:	4b28      	ldr	r3, [pc, #160]	; (800493c <HAL_UART_MspInit+0x1c0>)
 800489a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489c:	f003 0320 	and.w	r3, r3, #32
 80048a0:	613b      	str	r3, [r7, #16]
 80048a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048a4:	2300      	movs	r3, #0
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	4b24      	ldr	r3, [pc, #144]	; (800493c <HAL_UART_MspInit+0x1c0>)
 80048aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ac:	4a23      	ldr	r2, [pc, #140]	; (800493c <HAL_UART_MspInit+0x1c0>)
 80048ae:	f043 0304 	orr.w	r3, r3, #4
 80048b2:	6313      	str	r3, [r2, #48]	; 0x30
 80048b4:	4b21      	ldr	r3, [pc, #132]	; (800493c <HAL_UART_MspInit+0x1c0>)
 80048b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048c0:	2300      	movs	r3, #0
 80048c2:	60bb      	str	r3, [r7, #8]
 80048c4:	4b1d      	ldr	r3, [pc, #116]	; (800493c <HAL_UART_MspInit+0x1c0>)
 80048c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c8:	4a1c      	ldr	r2, [pc, #112]	; (800493c <HAL_UART_MspInit+0x1c0>)
 80048ca:	f043 0301 	orr.w	r3, r3, #1
 80048ce:	6313      	str	r3, [r2, #48]	; 0x30
 80048d0:	4b1a      	ldr	r3, [pc, #104]	; (800493c <HAL_UART_MspInit+0x1c0>)
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	60bb      	str	r3, [r7, #8]
 80048da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80048dc:	2340      	movs	r3, #64	; 0x40
 80048de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048e0:	2302      	movs	r3, #2
 80048e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e4:	2300      	movs	r3, #0
 80048e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048e8:	2303      	movs	r3, #3
 80048ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80048ec:	2308      	movs	r3, #8
 80048ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048f4:	4619      	mov	r1, r3
 80048f6:	4815      	ldr	r0, [pc, #84]	; (800494c <HAL_UART_MspInit+0x1d0>)
 80048f8:	f000 fbae 	bl	8005058 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80048fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004900:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004902:	2302      	movs	r3, #2
 8004904:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004906:	2300      	movs	r3, #0
 8004908:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800490a:	2303      	movs	r3, #3
 800490c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800490e:	2308      	movs	r3, #8
 8004910:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004916:	4619      	mov	r1, r3
 8004918:	4809      	ldr	r0, [pc, #36]	; (8004940 <HAL_UART_MspInit+0x1c4>)
 800491a:	f000 fb9d 	bl	8005058 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800491e:	2200      	movs	r2, #0
 8004920:	2100      	movs	r1, #0
 8004922:	2047      	movs	r0, #71	; 0x47
 8004924:	f000 facf 	bl	8004ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004928:	2047      	movs	r0, #71	; 0x47
 800492a:	f000 fae8 	bl	8004efe <HAL_NVIC_EnableIRQ>
}
 800492e:	bf00      	nop
 8004930:	3738      	adds	r7, #56	; 0x38
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40011000 	.word	0x40011000
 800493c:	40023800 	.word	0x40023800
 8004940:	40020000 	.word	0x40020000
 8004944:	40004400 	.word	0x40004400
 8004948:	40011400 	.word	0x40011400
 800494c:	40020800 	.word	0x40020800

08004950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004954:	e7fe      	b.n	8004954 <NMI_Handler+0x4>

08004956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004956:	b480      	push	{r7}
 8004958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800495a:	e7fe      	b.n	800495a <HardFault_Handler+0x4>

0800495c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004960:	e7fe      	b.n	8004960 <MemManage_Handler+0x4>

08004962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004962:	b480      	push	{r7}
 8004964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004966:	e7fe      	b.n	8004966 <BusFault_Handler+0x4>

08004968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800496c:	e7fe      	b.n	800496c <UsageFault_Handler+0x4>

0800496e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800496e:	b480      	push	{r7}
 8004970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004972:	bf00      	nop
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004980:	bf00      	nop
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800498a:	b480      	push	{r7}
 800498c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800498e:	bf00      	nop
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800499c:	f000 f974 	bl	8004c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049a0:	bf00      	nop
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80049a8:	4802      	ldr	r0, [pc, #8]	; (80049b4 <USART1_IRQHandler+0x10>)
 80049aa:	f002 ff15 	bl	80077d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80049ae:	bf00      	nop
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	2000046c 	.word	0x2000046c

080049b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80049bc:	4802      	ldr	r0, [pc, #8]	; (80049c8 <USART2_IRQHandler+0x10>)
 80049be:	f002 ff0b 	bl	80077d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80049c2:	bf00      	nop
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	200004b0 	.word	0x200004b0

080049cc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80049d0:	4802      	ldr	r0, [pc, #8]	; (80049dc <USART6_IRQHandler+0x10>)
 80049d2:	f002 ff01 	bl	80077d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80049d6:	bf00      	nop
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	200004f4 	.word	0x200004f4

080049e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  return 1;
 80049e4:	2301      	movs	r3, #1
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <_kill>:

int _kill(int pid, int sig)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80049fa:	f005 fd7b 	bl	800a4f4 <__errno>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2216      	movs	r2, #22
 8004a02:	601a      	str	r2, [r3, #0]
  return -1;
 8004a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <_exit>:

void _exit (int status)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004a18:	f04f 31ff 	mov.w	r1, #4294967295
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7ff ffe7 	bl	80049f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004a22:	e7fe      	b.n	8004a22 <_exit+0x12>

08004a24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a30:	2300      	movs	r3, #0
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	e00a      	b.n	8004a4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004a36:	f3af 8000 	nop.w
 8004a3a:	4601      	mov	r1, r0
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	60ba      	str	r2, [r7, #8]
 8004a42:	b2ca      	uxtb	r2, r1
 8004a44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	dbf0      	blt.n	8004a36 <_read+0x12>
  }

  return len;
 8004a54:	687b      	ldr	r3, [r7, #4]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3718      	adds	r7, #24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b086      	sub	sp, #24
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	60f8      	str	r0, [r7, #12]
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	617b      	str	r3, [r7, #20]
 8004a6e:	e009      	b.n	8004a84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	60ba      	str	r2, [r7, #8]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	3301      	adds	r3, #1
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	dbf1      	blt.n	8004a70 <_write+0x12>
  }
  return len;
 8004a8c:	687b      	ldr	r3, [r7, #4]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3718      	adds	r7, #24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <_close>:

int _close(int file)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004a9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
 8004ab6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004abe:	605a      	str	r2, [r3, #4]
  return 0;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <_isatty>:

int _isatty(int file)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004ad6:	2301      	movs	r3, #1
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
	...

08004b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b08:	4a14      	ldr	r2, [pc, #80]	; (8004b5c <_sbrk+0x5c>)
 8004b0a:	4b15      	ldr	r3, [pc, #84]	; (8004b60 <_sbrk+0x60>)
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b14:	4b13      	ldr	r3, [pc, #76]	; (8004b64 <_sbrk+0x64>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d102      	bne.n	8004b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b1c:	4b11      	ldr	r3, [pc, #68]	; (8004b64 <_sbrk+0x64>)
 8004b1e:	4a12      	ldr	r2, [pc, #72]	; (8004b68 <_sbrk+0x68>)
 8004b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b22:	4b10      	ldr	r3, [pc, #64]	; (8004b64 <_sbrk+0x64>)
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4413      	add	r3, r2
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d207      	bcs.n	8004b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b30:	f005 fce0 	bl	800a4f4 <__errno>
 8004b34:	4603      	mov	r3, r0
 8004b36:	220c      	movs	r2, #12
 8004b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b3e:	e009      	b.n	8004b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b40:	4b08      	ldr	r3, [pc, #32]	; (8004b64 <_sbrk+0x64>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b46:	4b07      	ldr	r3, [pc, #28]	; (8004b64 <_sbrk+0x64>)
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	4a05      	ldr	r2, [pc, #20]	; (8004b64 <_sbrk+0x64>)
 8004b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b52:	68fb      	ldr	r3, [r7, #12]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	20020000 	.word	0x20020000
 8004b60:	00000400 	.word	0x00000400
 8004b64:	2000075c 	.word	0x2000075c
 8004b68:	200008b0 	.word	0x200008b0

08004b6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b70:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <SystemInit+0x20>)
 8004b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b76:	4a05      	ldr	r2, [pc, #20]	; (8004b8c <SystemInit+0x20>)
 8004b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b80:	bf00      	nop
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	e000ed00 	.word	0xe000ed00

08004b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004bc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004b94:	480d      	ldr	r0, [pc, #52]	; (8004bcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004b96:	490e      	ldr	r1, [pc, #56]	; (8004bd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004b98:	4a0e      	ldr	r2, [pc, #56]	; (8004bd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b9c:	e002      	b.n	8004ba4 <LoopCopyDataInit>

08004b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ba2:	3304      	adds	r3, #4

08004ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ba8:	d3f9      	bcc.n	8004b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004baa:	4a0b      	ldr	r2, [pc, #44]	; (8004bd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004bac:	4c0b      	ldr	r4, [pc, #44]	; (8004bdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8004bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004bb0:	e001      	b.n	8004bb6 <LoopFillZerobss>

08004bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004bb4:	3204      	adds	r2, #4

08004bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bb8:	d3fb      	bcc.n	8004bb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004bba:	f7ff ffd7 	bl	8004b6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004bbe:	f005 fc9f 	bl	800a500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004bc2:	f7fe fff1 	bl	8003ba8 <main>
  bx  lr    
 8004bc6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004bc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004bd0:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8004bd4:	0800da24 	.word	0x0800da24
  ldr r2, =_sbss
 8004bd8:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8004bdc:	200008b0 	.word	0x200008b0

08004be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004be0:	e7fe      	b.n	8004be0 <ADC_IRQHandler>
	...

08004be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004be8:	4b0e      	ldr	r3, [pc, #56]	; (8004c24 <HAL_Init+0x40>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a0d      	ldr	r2, [pc, #52]	; (8004c24 <HAL_Init+0x40>)
 8004bee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004bf4:	4b0b      	ldr	r3, [pc, #44]	; (8004c24 <HAL_Init+0x40>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a0a      	ldr	r2, [pc, #40]	; (8004c24 <HAL_Init+0x40>)
 8004bfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c00:	4b08      	ldr	r3, [pc, #32]	; (8004c24 <HAL_Init+0x40>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a07      	ldr	r2, [pc, #28]	; (8004c24 <HAL_Init+0x40>)
 8004c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c0c:	2003      	movs	r0, #3
 8004c0e:	f000 f94f 	bl	8004eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c12:	2000      	movs	r0, #0
 8004c14:	f000 f808 	bl	8004c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c18:	f7ff fc70 	bl	80044fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	40023c00 	.word	0x40023c00

08004c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c30:	4b12      	ldr	r3, [pc, #72]	; (8004c7c <HAL_InitTick+0x54>)
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	4b12      	ldr	r3, [pc, #72]	; (8004c80 <HAL_InitTick+0x58>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	4619      	mov	r1, r3
 8004c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 f967 	bl	8004f1a <HAL_SYSTICK_Config>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e00e      	b.n	8004c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b0f      	cmp	r3, #15
 8004c5a:	d80a      	bhi.n	8004c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	6879      	ldr	r1, [r7, #4]
 8004c60:	f04f 30ff 	mov.w	r0, #4294967295
 8004c64:	f000 f92f 	bl	8004ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c68:	4a06      	ldr	r2, [pc, #24]	; (8004c84 <HAL_InitTick+0x5c>)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	e000      	b.n	8004c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	2000006c 	.word	0x2000006c
 8004c80:	20000074 	.word	0x20000074
 8004c84:	20000070 	.word	0x20000070

08004c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c8c:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <HAL_IncTick+0x20>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	461a      	mov	r2, r3
 8004c92:	4b06      	ldr	r3, [pc, #24]	; (8004cac <HAL_IncTick+0x24>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4413      	add	r3, r2
 8004c98:	4a04      	ldr	r2, [pc, #16]	; (8004cac <HAL_IncTick+0x24>)
 8004c9a:	6013      	str	r3, [r2, #0]
}
 8004c9c:	bf00      	nop
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	20000074 	.word	0x20000074
 8004cac:	20000760 	.word	0x20000760

08004cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8004cb4:	4b03      	ldr	r3, [pc, #12]	; (8004cc4 <HAL_GetTick+0x14>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	20000760 	.word	0x20000760

08004cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004cd0:	f7ff ffee 	bl	8004cb0 <HAL_GetTick>
 8004cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce0:	d005      	beq.n	8004cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ce2:	4b0a      	ldr	r3, [pc, #40]	; (8004d0c <HAL_Delay+0x44>)
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4413      	add	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004cee:	bf00      	nop
 8004cf0:	f7ff ffde 	bl	8004cb0 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d8f7      	bhi.n	8004cf0 <HAL_Delay+0x28>
  {
  }
}
 8004d00:	bf00      	nop
 8004d02:	bf00      	nop
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	20000074 	.word	0x20000074

08004d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d20:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <__NVIC_SetPriorityGrouping+0x44>)
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d42:	4a04      	ldr	r2, [pc, #16]	; (8004d54 <__NVIC_SetPriorityGrouping+0x44>)
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	60d3      	str	r3, [r2, #12]
}
 8004d48:	bf00      	nop
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	e000ed00 	.word	0xe000ed00

08004d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d5c:	4b04      	ldr	r3, [pc, #16]	; (8004d70 <__NVIC_GetPriorityGrouping+0x18>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	0a1b      	lsrs	r3, r3, #8
 8004d62:	f003 0307 	and.w	r3, r3, #7
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	e000ed00 	.word	0xe000ed00

08004d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	db0b      	blt.n	8004d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d86:	79fb      	ldrb	r3, [r7, #7]
 8004d88:	f003 021f 	and.w	r2, r3, #31
 8004d8c:	4907      	ldr	r1, [pc, #28]	; (8004dac <__NVIC_EnableIRQ+0x38>)
 8004d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d92:	095b      	lsrs	r3, r3, #5
 8004d94:	2001      	movs	r0, #1
 8004d96:	fa00 f202 	lsl.w	r2, r0, r2
 8004d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	e000e100 	.word	0xe000e100

08004db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	4603      	mov	r3, r0
 8004db8:	6039      	str	r1, [r7, #0]
 8004dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	db0a      	blt.n	8004dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	490c      	ldr	r1, [pc, #48]	; (8004dfc <__NVIC_SetPriority+0x4c>)
 8004dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dce:	0112      	lsls	r2, r2, #4
 8004dd0:	b2d2      	uxtb	r2, r2
 8004dd2:	440b      	add	r3, r1
 8004dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004dd8:	e00a      	b.n	8004df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	4908      	ldr	r1, [pc, #32]	; (8004e00 <__NVIC_SetPriority+0x50>)
 8004de0:	79fb      	ldrb	r3, [r7, #7]
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	3b04      	subs	r3, #4
 8004de8:	0112      	lsls	r2, r2, #4
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	440b      	add	r3, r1
 8004dee:	761a      	strb	r2, [r3, #24]
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	e000e100 	.word	0xe000e100
 8004e00:	e000ed00 	.word	0xe000ed00

08004e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b089      	sub	sp, #36	; 0x24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	f1c3 0307 	rsb	r3, r3, #7
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	bf28      	it	cs
 8004e22:	2304      	movcs	r3, #4
 8004e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	3304      	adds	r3, #4
 8004e2a:	2b06      	cmp	r3, #6
 8004e2c:	d902      	bls.n	8004e34 <NVIC_EncodePriority+0x30>
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	3b03      	subs	r3, #3
 8004e32:	e000      	b.n	8004e36 <NVIC_EncodePriority+0x32>
 8004e34:	2300      	movs	r3, #0
 8004e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e38:	f04f 32ff 	mov.w	r2, #4294967295
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e42:	43da      	mvns	r2, r3
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	401a      	ands	r2, r3
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	fa01 f303 	lsl.w	r3, r1, r3
 8004e56:	43d9      	mvns	r1, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e5c:	4313      	orrs	r3, r2
         );
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3724      	adds	r7, #36	; 0x24
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
	...

08004e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e7c:	d301      	bcc.n	8004e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e00f      	b.n	8004ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e82:	4a0a      	ldr	r2, [pc, #40]	; (8004eac <SysTick_Config+0x40>)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e8a:	210f      	movs	r1, #15
 8004e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e90:	f7ff ff8e 	bl	8004db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <SysTick_Config+0x40>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e9a:	4b04      	ldr	r3, [pc, #16]	; (8004eac <SysTick_Config+0x40>)
 8004e9c:	2207      	movs	r2, #7
 8004e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	e000e010 	.word	0xe000e010

08004eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7ff ff29 	bl	8004d10 <__NVIC_SetPriorityGrouping>
}
 8004ebe:	bf00      	nop
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b086      	sub	sp, #24
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	4603      	mov	r3, r0
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	607a      	str	r2, [r7, #4]
 8004ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ed8:	f7ff ff3e 	bl	8004d58 <__NVIC_GetPriorityGrouping>
 8004edc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	68b9      	ldr	r1, [r7, #8]
 8004ee2:	6978      	ldr	r0, [r7, #20]
 8004ee4:	f7ff ff8e 	bl	8004e04 <NVIC_EncodePriority>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eee:	4611      	mov	r1, r2
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7ff ff5d 	bl	8004db0 <__NVIC_SetPriority>
}
 8004ef6:	bf00      	nop
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b082      	sub	sp, #8
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	4603      	mov	r3, r0
 8004f06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff ff31 	bl	8004d74 <__NVIC_EnableIRQ>
}
 8004f12:	bf00      	nop
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b082      	sub	sp, #8
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7ff ffa2 	bl	8004e6c <SysTick_Config>
 8004f28:	4603      	mov	r3, r0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b084      	sub	sp, #16
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004f40:	f7ff feb6 	bl	8004cb0 <HAL_GetTick>
 8004f44:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d008      	beq.n	8004f64 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2280      	movs	r2, #128	; 0x80
 8004f56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e052      	b.n	800500a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0216 	bic.w	r2, r2, #22
 8004f72:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695a      	ldr	r2, [r3, #20]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f82:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d103      	bne.n	8004f94 <HAL_DMA_Abort+0x62>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d007      	beq.n	8004fa4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0208 	bic.w	r2, r2, #8
 8004fa2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0201 	bic.w	r2, r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fb4:	e013      	b.n	8004fde <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fb6:	f7ff fe7b 	bl	8004cb0 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b05      	cmp	r3, #5
 8004fc2:	d90c      	bls.n	8004fde <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2203      	movs	r2, #3
 8004fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e015      	b.n	800500a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1e4      	bne.n	8004fb6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff0:	223f      	movs	r2, #63	; 0x3f
 8004ff2:	409a      	lsls	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d004      	beq.n	8005030 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2280      	movs	r2, #128	; 0x80
 800502a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e00c      	b.n	800504a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2205      	movs	r2, #5
 8005034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 0201 	bic.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
	...

08005058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005058:	b480      	push	{r7}
 800505a:	b089      	sub	sp, #36	; 0x24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005062:	2300      	movs	r3, #0
 8005064:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005066:	2300      	movs	r3, #0
 8005068:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800506a:	2300      	movs	r3, #0
 800506c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800506e:	2300      	movs	r3, #0
 8005070:	61fb      	str	r3, [r7, #28]
 8005072:	e159      	b.n	8005328 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005074:	2201      	movs	r2, #1
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	fa02 f303 	lsl.w	r3, r2, r3
 800507c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	4013      	ands	r3, r2
 8005086:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	429a      	cmp	r2, r3
 800508e:	f040 8148 	bne.w	8005322 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	2b01      	cmp	r3, #1
 800509c:	d005      	beq.n	80050aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d130      	bne.n	800510c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	2203      	movs	r2, #3
 80050b6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ba:	43db      	mvns	r3, r3
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	4013      	ands	r3, r2
 80050c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	fa02 f303 	lsl.w	r3, r2, r3
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050e0:	2201      	movs	r2, #1
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	fa02 f303 	lsl.w	r3, r2, r3
 80050e8:	43db      	mvns	r3, r3
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	4013      	ands	r3, r2
 80050ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	091b      	lsrs	r3, r3, #4
 80050f6:	f003 0201 	and.w	r2, r3, #1
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	4313      	orrs	r3, r2
 8005104:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f003 0303 	and.w	r3, r3, #3
 8005114:	2b03      	cmp	r3, #3
 8005116:	d017      	beq.n	8005148 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	2203      	movs	r2, #3
 8005124:	fa02 f303 	lsl.w	r3, r2, r3
 8005128:	43db      	mvns	r3, r3
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	4013      	ands	r3, r2
 800512e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	fa02 f303 	lsl.w	r3, r2, r3
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	4313      	orrs	r3, r2
 8005140:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f003 0303 	and.w	r3, r3, #3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d123      	bne.n	800519c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	08da      	lsrs	r2, r3, #3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	3208      	adds	r2, #8
 800515c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005160:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	220f      	movs	r2, #15
 800516c:	fa02 f303 	lsl.w	r3, r2, r3
 8005170:	43db      	mvns	r3, r3
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	4013      	ands	r3, r2
 8005176:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	691a      	ldr	r2, [r3, #16]
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	fa02 f303 	lsl.w	r3, r2, r3
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	4313      	orrs	r3, r2
 800518c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	08da      	lsrs	r2, r3, #3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	3208      	adds	r2, #8
 8005196:	69b9      	ldr	r1, [r7, #24]
 8005198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	2203      	movs	r2, #3
 80051a8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ac:	43db      	mvns	r3, r3
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	4013      	ands	r3, r2
 80051b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f003 0203 	and.w	r2, r3, #3
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	fa02 f303 	lsl.w	r3, r2, r3
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 80a2 	beq.w	8005322 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051de:	2300      	movs	r3, #0
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	4b57      	ldr	r3, [pc, #348]	; (8005340 <HAL_GPIO_Init+0x2e8>)
 80051e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e6:	4a56      	ldr	r2, [pc, #344]	; (8005340 <HAL_GPIO_Init+0x2e8>)
 80051e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051ec:	6453      	str	r3, [r2, #68]	; 0x44
 80051ee:	4b54      	ldr	r3, [pc, #336]	; (8005340 <HAL_GPIO_Init+0x2e8>)
 80051f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051fa:	4a52      	ldr	r2, [pc, #328]	; (8005344 <HAL_GPIO_Init+0x2ec>)
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	089b      	lsrs	r3, r3, #2
 8005200:	3302      	adds	r3, #2
 8005202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005206:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	f003 0303 	and.w	r3, r3, #3
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	220f      	movs	r2, #15
 8005212:	fa02 f303 	lsl.w	r3, r2, r3
 8005216:	43db      	mvns	r3, r3
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	4013      	ands	r3, r2
 800521c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a49      	ldr	r2, [pc, #292]	; (8005348 <HAL_GPIO_Init+0x2f0>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d019      	beq.n	800525a <HAL_GPIO_Init+0x202>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a48      	ldr	r2, [pc, #288]	; (800534c <HAL_GPIO_Init+0x2f4>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d013      	beq.n	8005256 <HAL_GPIO_Init+0x1fe>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a47      	ldr	r2, [pc, #284]	; (8005350 <HAL_GPIO_Init+0x2f8>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d00d      	beq.n	8005252 <HAL_GPIO_Init+0x1fa>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a46      	ldr	r2, [pc, #280]	; (8005354 <HAL_GPIO_Init+0x2fc>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d007      	beq.n	800524e <HAL_GPIO_Init+0x1f6>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a45      	ldr	r2, [pc, #276]	; (8005358 <HAL_GPIO_Init+0x300>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d101      	bne.n	800524a <HAL_GPIO_Init+0x1f2>
 8005246:	2304      	movs	r3, #4
 8005248:	e008      	b.n	800525c <HAL_GPIO_Init+0x204>
 800524a:	2307      	movs	r3, #7
 800524c:	e006      	b.n	800525c <HAL_GPIO_Init+0x204>
 800524e:	2303      	movs	r3, #3
 8005250:	e004      	b.n	800525c <HAL_GPIO_Init+0x204>
 8005252:	2302      	movs	r3, #2
 8005254:	e002      	b.n	800525c <HAL_GPIO_Init+0x204>
 8005256:	2301      	movs	r3, #1
 8005258:	e000      	b.n	800525c <HAL_GPIO_Init+0x204>
 800525a:	2300      	movs	r3, #0
 800525c:	69fa      	ldr	r2, [r7, #28]
 800525e:	f002 0203 	and.w	r2, r2, #3
 8005262:	0092      	lsls	r2, r2, #2
 8005264:	4093      	lsls	r3, r2
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	4313      	orrs	r3, r2
 800526a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800526c:	4935      	ldr	r1, [pc, #212]	; (8005344 <HAL_GPIO_Init+0x2ec>)
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	089b      	lsrs	r3, r3, #2
 8005272:	3302      	adds	r3, #2
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800527a:	4b38      	ldr	r3, [pc, #224]	; (800535c <HAL_GPIO_Init+0x304>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	43db      	mvns	r3, r3
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	4013      	ands	r3, r2
 8005288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	4313      	orrs	r3, r2
 800529c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800529e:	4a2f      	ldr	r2, [pc, #188]	; (800535c <HAL_GPIO_Init+0x304>)
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052a4:	4b2d      	ldr	r3, [pc, #180]	; (800535c <HAL_GPIO_Init+0x304>)
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	43db      	mvns	r3, r3
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	4013      	ands	r3, r2
 80052b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052c8:	4a24      	ldr	r2, [pc, #144]	; (800535c <HAL_GPIO_Init+0x304>)
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80052ce:	4b23      	ldr	r3, [pc, #140]	; (800535c <HAL_GPIO_Init+0x304>)
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	43db      	mvns	r3, r3
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	4013      	ands	r3, r2
 80052dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80052f2:	4a1a      	ldr	r2, [pc, #104]	; (800535c <HAL_GPIO_Init+0x304>)
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052f8:	4b18      	ldr	r3, [pc, #96]	; (800535c <HAL_GPIO_Init+0x304>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	43db      	mvns	r3, r3
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	4013      	ands	r3, r2
 8005306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	4313      	orrs	r3, r2
 800531a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800531c:	4a0f      	ldr	r2, [pc, #60]	; (800535c <HAL_GPIO_Init+0x304>)
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	3301      	adds	r3, #1
 8005326:	61fb      	str	r3, [r7, #28]
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	2b0f      	cmp	r3, #15
 800532c:	f67f aea2 	bls.w	8005074 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005330:	bf00      	nop
 8005332:	bf00      	nop
 8005334:	3724      	adds	r7, #36	; 0x24
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40023800 	.word	0x40023800
 8005344:	40013800 	.word	0x40013800
 8005348:	40020000 	.word	0x40020000
 800534c:	40020400 	.word	0x40020400
 8005350:	40020800 	.word	0x40020800
 8005354:	40020c00 	.word	0x40020c00
 8005358:	40021000 	.word	0x40021000
 800535c:	40013c00 	.word	0x40013c00

08005360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	460b      	mov	r3, r1
 800536a:	807b      	strh	r3, [r7, #2]
 800536c:	4613      	mov	r3, r2
 800536e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005370:	787b      	ldrb	r3, [r7, #1]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005376:	887a      	ldrh	r2, [r7, #2]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800537c:	e003      	b.n	8005386 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800537e:	887b      	ldrh	r3, [r7, #2]
 8005380:	041a      	lsls	r2, r3, #16
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	619a      	str	r2, [r3, #24]
}
 8005386:	bf00      	nop
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
	...

08005394 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e267      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d075      	beq.n	800549e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053b2:	4b88      	ldr	r3, [pc, #544]	; (80055d4 <HAL_RCC_OscConfig+0x240>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 030c 	and.w	r3, r3, #12
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d00c      	beq.n	80053d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053be:	4b85      	ldr	r3, [pc, #532]	; (80055d4 <HAL_RCC_OscConfig+0x240>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053c6:	2b08      	cmp	r3, #8
 80053c8:	d112      	bne.n	80053f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053ca:	4b82      	ldr	r3, [pc, #520]	; (80055d4 <HAL_RCC_OscConfig+0x240>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053d6:	d10b      	bne.n	80053f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d8:	4b7e      	ldr	r3, [pc, #504]	; (80055d4 <HAL_RCC_OscConfig+0x240>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d05b      	beq.n	800549c <HAL_RCC_OscConfig+0x108>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d157      	bne.n	800549c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e242      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f8:	d106      	bne.n	8005408 <HAL_RCC_OscConfig+0x74>
 80053fa:	4b76      	ldr	r3, [pc, #472]	; (80055d4 <HAL_RCC_OscConfig+0x240>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a75      	ldr	r2, [pc, #468]	; (80055d4 <HAL_RCC_OscConfig+0x240>)
 8005400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	e01d      	b.n	8005444 <HAL_RCC_OscConfig+0xb0>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005410:	d10c      	bne.n	800542c <HAL_RCC_OscConfig+0x98>
 8005412:	4b70      	ldr	r3, [pc, #448]	; (80055d4 <HAL_RCC_OscConfig+0x240>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a6f      	ldr	r2, [pc, #444]	; (80055d4 <HAL_RCC_OscConfig+0x240>)
 8005418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	4b6d      	ldr	r3, [pc, #436]	; (80055d4 <HAL_RCC_OscConfig+0x240>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a6c      	ldr	r2, [pc, #432]	; (80055d4 <HAL_RCC_OscConfig+0x240>)
 8005424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005428:	6013      	str	r3, [r2, #0]
 800542a:	e00b      	b.n	8005444 <HAL_RCC_OscConfig+0xb0>
 800542c:	4b69      	ldr	r3, [pc, #420]	; (80055d4 <HAL_RCC_OscConfig+0x240>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a68      	ldr	r2, [pc, #416]	; (80055d4 <HAL_RCC_OscConfig+0x240>)
 8005432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005436:	6013      	str	r3, [r2, #0]
 8005438:	4b66      	ldr	r3, [pc, #408]	; (80055d4 <HAL_RCC_OscConfig+0x240>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a65      	ldr	r2, [pc, #404]	; (80055d4 <HAL_RCC_OscConfig+0x240>)
 800543e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d013      	beq.n	8005474 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800544c:	f7ff fc30 	bl	8004cb0 <HAL_GetTick>
 8005450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005452:	e008      	b.n	8005466 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005454:	f7ff fc2c 	bl	8004cb0 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b64      	cmp	r3, #100	; 0x64
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e207      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005466:	4b5b      	ldr	r3, [pc, #364]	; (80055d4 <HAL_RCC_OscConfig+0x240>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d0f0      	beq.n	8005454 <HAL_RCC_OscConfig+0xc0>
 8005472:	e014      	b.n	800549e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005474:	f7ff fc1c 	bl	8004cb0 <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800547c:	f7ff fc18 	bl	8004cb0 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b64      	cmp	r3, #100	; 0x64
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e1f3      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800548e:	4b51      	ldr	r3, [pc, #324]	; (80055d4 <HAL_RCC_OscConfig+0x240>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1f0      	bne.n	800547c <HAL_RCC_OscConfig+0xe8>
 800549a:	e000      	b.n	800549e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800549c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d063      	beq.n	8005572 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054aa:	4b4a      	ldr	r3, [pc, #296]	; (80055d4 <HAL_RCC_OscConfig+0x240>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 030c 	and.w	r3, r3, #12
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00b      	beq.n	80054ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054b6:	4b47      	ldr	r3, [pc, #284]	; (80055d4 <HAL_RCC_OscConfig+0x240>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054be:	2b08      	cmp	r3, #8
 80054c0:	d11c      	bne.n	80054fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054c2:	4b44      	ldr	r3, [pc, #272]	; (80055d4 <HAL_RCC_OscConfig+0x240>)
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d116      	bne.n	80054fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ce:	4b41      	ldr	r3, [pc, #260]	; (80055d4 <HAL_RCC_OscConfig+0x240>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d005      	beq.n	80054e6 <HAL_RCC_OscConfig+0x152>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d001      	beq.n	80054e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e1c7      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054e6:	4b3b      	ldr	r3, [pc, #236]	; (80055d4 <HAL_RCC_OscConfig+0x240>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	00db      	lsls	r3, r3, #3
 80054f4:	4937      	ldr	r1, [pc, #220]	; (80055d4 <HAL_RCC_OscConfig+0x240>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054fa:	e03a      	b.n	8005572 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d020      	beq.n	8005546 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005504:	4b34      	ldr	r3, [pc, #208]	; (80055d8 <HAL_RCC_OscConfig+0x244>)
 8005506:	2201      	movs	r2, #1
 8005508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550a:	f7ff fbd1 	bl	8004cb0 <HAL_GetTick>
 800550e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005510:	e008      	b.n	8005524 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005512:	f7ff fbcd 	bl	8004cb0 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e1a8      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005524:	4b2b      	ldr	r3, [pc, #172]	; (80055d4 <HAL_RCC_OscConfig+0x240>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0f0      	beq.n	8005512 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005530:	4b28      	ldr	r3, [pc, #160]	; (80055d4 <HAL_RCC_OscConfig+0x240>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	00db      	lsls	r3, r3, #3
 800553e:	4925      	ldr	r1, [pc, #148]	; (80055d4 <HAL_RCC_OscConfig+0x240>)
 8005540:	4313      	orrs	r3, r2
 8005542:	600b      	str	r3, [r1, #0]
 8005544:	e015      	b.n	8005572 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005546:	4b24      	ldr	r3, [pc, #144]	; (80055d8 <HAL_RCC_OscConfig+0x244>)
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800554c:	f7ff fbb0 	bl	8004cb0 <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005554:	f7ff fbac 	bl	8004cb0 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e187      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005566:	4b1b      	ldr	r3, [pc, #108]	; (80055d4 <HAL_RCC_OscConfig+0x240>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1f0      	bne.n	8005554 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b00      	cmp	r3, #0
 800557c:	d036      	beq.n	80055ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d016      	beq.n	80055b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005586:	4b15      	ldr	r3, [pc, #84]	; (80055dc <HAL_RCC_OscConfig+0x248>)
 8005588:	2201      	movs	r2, #1
 800558a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800558c:	f7ff fb90 	bl	8004cb0 <HAL_GetTick>
 8005590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005592:	e008      	b.n	80055a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005594:	f7ff fb8c 	bl	8004cb0 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e167      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055a6:	4b0b      	ldr	r3, [pc, #44]	; (80055d4 <HAL_RCC_OscConfig+0x240>)
 80055a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d0f0      	beq.n	8005594 <HAL_RCC_OscConfig+0x200>
 80055b2:	e01b      	b.n	80055ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055b4:	4b09      	ldr	r3, [pc, #36]	; (80055dc <HAL_RCC_OscConfig+0x248>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ba:	f7ff fb79 	bl	8004cb0 <HAL_GetTick>
 80055be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055c0:	e00e      	b.n	80055e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055c2:	f7ff fb75 	bl	8004cb0 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d907      	bls.n	80055e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e150      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
 80055d4:	40023800 	.word	0x40023800
 80055d8:	42470000 	.word	0x42470000
 80055dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055e0:	4b88      	ldr	r3, [pc, #544]	; (8005804 <HAL_RCC_OscConfig+0x470>)
 80055e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1ea      	bne.n	80055c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0304 	and.w	r3, r3, #4
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 8097 	beq.w	8005728 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055fa:	2300      	movs	r3, #0
 80055fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055fe:	4b81      	ldr	r3, [pc, #516]	; (8005804 <HAL_RCC_OscConfig+0x470>)
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10f      	bne.n	800562a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800560a:	2300      	movs	r3, #0
 800560c:	60bb      	str	r3, [r7, #8]
 800560e:	4b7d      	ldr	r3, [pc, #500]	; (8005804 <HAL_RCC_OscConfig+0x470>)
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	4a7c      	ldr	r2, [pc, #496]	; (8005804 <HAL_RCC_OscConfig+0x470>)
 8005614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005618:	6413      	str	r3, [r2, #64]	; 0x40
 800561a:	4b7a      	ldr	r3, [pc, #488]	; (8005804 <HAL_RCC_OscConfig+0x470>)
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005622:	60bb      	str	r3, [r7, #8]
 8005624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005626:	2301      	movs	r3, #1
 8005628:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800562a:	4b77      	ldr	r3, [pc, #476]	; (8005808 <HAL_RCC_OscConfig+0x474>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005632:	2b00      	cmp	r3, #0
 8005634:	d118      	bne.n	8005668 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005636:	4b74      	ldr	r3, [pc, #464]	; (8005808 <HAL_RCC_OscConfig+0x474>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a73      	ldr	r2, [pc, #460]	; (8005808 <HAL_RCC_OscConfig+0x474>)
 800563c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005642:	f7ff fb35 	bl	8004cb0 <HAL_GetTick>
 8005646:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005648:	e008      	b.n	800565c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800564a:	f7ff fb31 	bl	8004cb0 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d901      	bls.n	800565c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e10c      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800565c:	4b6a      	ldr	r3, [pc, #424]	; (8005808 <HAL_RCC_OscConfig+0x474>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005664:	2b00      	cmp	r3, #0
 8005666:	d0f0      	beq.n	800564a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d106      	bne.n	800567e <HAL_RCC_OscConfig+0x2ea>
 8005670:	4b64      	ldr	r3, [pc, #400]	; (8005804 <HAL_RCC_OscConfig+0x470>)
 8005672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005674:	4a63      	ldr	r2, [pc, #396]	; (8005804 <HAL_RCC_OscConfig+0x470>)
 8005676:	f043 0301 	orr.w	r3, r3, #1
 800567a:	6713      	str	r3, [r2, #112]	; 0x70
 800567c:	e01c      	b.n	80056b8 <HAL_RCC_OscConfig+0x324>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	2b05      	cmp	r3, #5
 8005684:	d10c      	bne.n	80056a0 <HAL_RCC_OscConfig+0x30c>
 8005686:	4b5f      	ldr	r3, [pc, #380]	; (8005804 <HAL_RCC_OscConfig+0x470>)
 8005688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568a:	4a5e      	ldr	r2, [pc, #376]	; (8005804 <HAL_RCC_OscConfig+0x470>)
 800568c:	f043 0304 	orr.w	r3, r3, #4
 8005690:	6713      	str	r3, [r2, #112]	; 0x70
 8005692:	4b5c      	ldr	r3, [pc, #368]	; (8005804 <HAL_RCC_OscConfig+0x470>)
 8005694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005696:	4a5b      	ldr	r2, [pc, #364]	; (8005804 <HAL_RCC_OscConfig+0x470>)
 8005698:	f043 0301 	orr.w	r3, r3, #1
 800569c:	6713      	str	r3, [r2, #112]	; 0x70
 800569e:	e00b      	b.n	80056b8 <HAL_RCC_OscConfig+0x324>
 80056a0:	4b58      	ldr	r3, [pc, #352]	; (8005804 <HAL_RCC_OscConfig+0x470>)
 80056a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a4:	4a57      	ldr	r2, [pc, #348]	; (8005804 <HAL_RCC_OscConfig+0x470>)
 80056a6:	f023 0301 	bic.w	r3, r3, #1
 80056aa:	6713      	str	r3, [r2, #112]	; 0x70
 80056ac:	4b55      	ldr	r3, [pc, #340]	; (8005804 <HAL_RCC_OscConfig+0x470>)
 80056ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b0:	4a54      	ldr	r2, [pc, #336]	; (8005804 <HAL_RCC_OscConfig+0x470>)
 80056b2:	f023 0304 	bic.w	r3, r3, #4
 80056b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d015      	beq.n	80056ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c0:	f7ff faf6 	bl	8004cb0 <HAL_GetTick>
 80056c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c6:	e00a      	b.n	80056de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056c8:	f7ff faf2 	bl	8004cb0 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e0cb      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056de:	4b49      	ldr	r3, [pc, #292]	; (8005804 <HAL_RCC_OscConfig+0x470>)
 80056e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0ee      	beq.n	80056c8 <HAL_RCC_OscConfig+0x334>
 80056ea:	e014      	b.n	8005716 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056ec:	f7ff fae0 	bl	8004cb0 <HAL_GetTick>
 80056f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056f2:	e00a      	b.n	800570a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056f4:	f7ff fadc 	bl	8004cb0 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005702:	4293      	cmp	r3, r2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e0b5      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800570a:	4b3e      	ldr	r3, [pc, #248]	; (8005804 <HAL_RCC_OscConfig+0x470>)
 800570c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1ee      	bne.n	80056f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005716:	7dfb      	ldrb	r3, [r7, #23]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d105      	bne.n	8005728 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800571c:	4b39      	ldr	r3, [pc, #228]	; (8005804 <HAL_RCC_OscConfig+0x470>)
 800571e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005720:	4a38      	ldr	r2, [pc, #224]	; (8005804 <HAL_RCC_OscConfig+0x470>)
 8005722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005726:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 80a1 	beq.w	8005874 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005732:	4b34      	ldr	r3, [pc, #208]	; (8005804 <HAL_RCC_OscConfig+0x470>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f003 030c 	and.w	r3, r3, #12
 800573a:	2b08      	cmp	r3, #8
 800573c:	d05c      	beq.n	80057f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	2b02      	cmp	r3, #2
 8005744:	d141      	bne.n	80057ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005746:	4b31      	ldr	r3, [pc, #196]	; (800580c <HAL_RCC_OscConfig+0x478>)
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800574c:	f7ff fab0 	bl	8004cb0 <HAL_GetTick>
 8005750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005752:	e008      	b.n	8005766 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005754:	f7ff faac 	bl	8004cb0 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e087      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005766:	4b27      	ldr	r3, [pc, #156]	; (8005804 <HAL_RCC_OscConfig+0x470>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1f0      	bne.n	8005754 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	69da      	ldr	r2, [r3, #28]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	431a      	orrs	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	019b      	lsls	r3, r3, #6
 8005782:	431a      	orrs	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005788:	085b      	lsrs	r3, r3, #1
 800578a:	3b01      	subs	r3, #1
 800578c:	041b      	lsls	r3, r3, #16
 800578e:	431a      	orrs	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005794:	061b      	lsls	r3, r3, #24
 8005796:	491b      	ldr	r1, [pc, #108]	; (8005804 <HAL_RCC_OscConfig+0x470>)
 8005798:	4313      	orrs	r3, r2
 800579a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800579c:	4b1b      	ldr	r3, [pc, #108]	; (800580c <HAL_RCC_OscConfig+0x478>)
 800579e:	2201      	movs	r2, #1
 80057a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a2:	f7ff fa85 	bl	8004cb0 <HAL_GetTick>
 80057a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057a8:	e008      	b.n	80057bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057aa:	f7ff fa81 	bl	8004cb0 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e05c      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057bc:	4b11      	ldr	r3, [pc, #68]	; (8005804 <HAL_RCC_OscConfig+0x470>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0f0      	beq.n	80057aa <HAL_RCC_OscConfig+0x416>
 80057c8:	e054      	b.n	8005874 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ca:	4b10      	ldr	r3, [pc, #64]	; (800580c <HAL_RCC_OscConfig+0x478>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d0:	f7ff fa6e 	bl	8004cb0 <HAL_GetTick>
 80057d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057d6:	e008      	b.n	80057ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057d8:	f7ff fa6a 	bl	8004cb0 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e045      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ea:	4b06      	ldr	r3, [pc, #24]	; (8005804 <HAL_RCC_OscConfig+0x470>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1f0      	bne.n	80057d8 <HAL_RCC_OscConfig+0x444>
 80057f6:	e03d      	b.n	8005874 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d107      	bne.n	8005810 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e038      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
 8005804:	40023800 	.word	0x40023800
 8005808:	40007000 	.word	0x40007000
 800580c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005810:	4b1b      	ldr	r3, [pc, #108]	; (8005880 <HAL_RCC_OscConfig+0x4ec>)
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d028      	beq.n	8005870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005828:	429a      	cmp	r2, r3
 800582a:	d121      	bne.n	8005870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005836:	429a      	cmp	r2, r3
 8005838:	d11a      	bne.n	8005870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005840:	4013      	ands	r3, r2
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005846:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005848:	4293      	cmp	r3, r2
 800584a:	d111      	bne.n	8005870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005856:	085b      	lsrs	r3, r3, #1
 8005858:	3b01      	subs	r3, #1
 800585a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800585c:	429a      	cmp	r2, r3
 800585e:	d107      	bne.n	8005870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800586c:	429a      	cmp	r2, r3
 800586e:	d001      	beq.n	8005874 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e000      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3718      	adds	r7, #24
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	40023800 	.word	0x40023800

08005884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d101      	bne.n	8005898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e0cc      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005898:	4b68      	ldr	r3, [pc, #416]	; (8005a3c <HAL_RCC_ClockConfig+0x1b8>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0307 	and.w	r3, r3, #7
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d90c      	bls.n	80058c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058a6:	4b65      	ldr	r3, [pc, #404]	; (8005a3c <HAL_RCC_ClockConfig+0x1b8>)
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	b2d2      	uxtb	r2, r2
 80058ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ae:	4b63      	ldr	r3, [pc, #396]	; (8005a3c <HAL_RCC_ClockConfig+0x1b8>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0307 	and.w	r3, r3, #7
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d001      	beq.n	80058c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e0b8      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d020      	beq.n	800590e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d005      	beq.n	80058e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058d8:	4b59      	ldr	r3, [pc, #356]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	4a58      	ldr	r2, [pc, #352]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 80058de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0308 	and.w	r3, r3, #8
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d005      	beq.n	80058fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058f0:	4b53      	ldr	r3, [pc, #332]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	4a52      	ldr	r2, [pc, #328]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 80058f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058fc:	4b50      	ldr	r3, [pc, #320]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	494d      	ldr	r1, [pc, #308]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 800590a:	4313      	orrs	r3, r2
 800590c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d044      	beq.n	80059a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d107      	bne.n	8005932 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005922:	4b47      	ldr	r3, [pc, #284]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d119      	bne.n	8005962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e07f      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	2b02      	cmp	r3, #2
 8005938:	d003      	beq.n	8005942 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800593e:	2b03      	cmp	r3, #3
 8005940:	d107      	bne.n	8005952 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005942:	4b3f      	ldr	r3, [pc, #252]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d109      	bne.n	8005962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e06f      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005952:	4b3b      	ldr	r3, [pc, #236]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e067      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005962:	4b37      	ldr	r3, [pc, #220]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f023 0203 	bic.w	r2, r3, #3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	4934      	ldr	r1, [pc, #208]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 8005970:	4313      	orrs	r3, r2
 8005972:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005974:	f7ff f99c 	bl	8004cb0 <HAL_GetTick>
 8005978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800597a:	e00a      	b.n	8005992 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800597c:	f7ff f998 	bl	8004cb0 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	f241 3288 	movw	r2, #5000	; 0x1388
 800598a:	4293      	cmp	r3, r2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e04f      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005992:	4b2b      	ldr	r3, [pc, #172]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 020c 	and.w	r2, r3, #12
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d1eb      	bne.n	800597c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059a4:	4b25      	ldr	r3, [pc, #148]	; (8005a3c <HAL_RCC_ClockConfig+0x1b8>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0307 	and.w	r3, r3, #7
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d20c      	bcs.n	80059cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059b2:	4b22      	ldr	r3, [pc, #136]	; (8005a3c <HAL_RCC_ClockConfig+0x1b8>)
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	b2d2      	uxtb	r2, r2
 80059b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ba:	4b20      	ldr	r3, [pc, #128]	; (8005a3c <HAL_RCC_ClockConfig+0x1b8>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0307 	and.w	r3, r3, #7
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d001      	beq.n	80059cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e032      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0304 	and.w	r3, r3, #4
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d008      	beq.n	80059ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059d8:	4b19      	ldr	r3, [pc, #100]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	4916      	ldr	r1, [pc, #88]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0308 	and.w	r3, r3, #8
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d009      	beq.n	8005a0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059f6:	4b12      	ldr	r3, [pc, #72]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	490e      	ldr	r1, [pc, #56]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a0a:	f000 f821 	bl	8005a50 <HAL_RCC_GetSysClockFreq>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	4b0b      	ldr	r3, [pc, #44]	; (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	091b      	lsrs	r3, r3, #4
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	490a      	ldr	r1, [pc, #40]	; (8005a44 <HAL_RCC_ClockConfig+0x1c0>)
 8005a1c:	5ccb      	ldrb	r3, [r1, r3]
 8005a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a22:	4a09      	ldr	r2, [pc, #36]	; (8005a48 <HAL_RCC_ClockConfig+0x1c4>)
 8005a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a26:	4b09      	ldr	r3, [pc, #36]	; (8005a4c <HAL_RCC_ClockConfig+0x1c8>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7ff f8fc 	bl	8004c28 <HAL_InitTick>

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	40023c00 	.word	0x40023c00
 8005a40:	40023800 	.word	0x40023800
 8005a44:	0800d5d4 	.word	0x0800d5d4
 8005a48:	2000006c 	.word	0x2000006c
 8005a4c:	20000070 	.word	0x20000070

08005a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a54:	b094      	sub	sp, #80	; 0x50
 8005a56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	647b      	str	r3, [r7, #68]	; 0x44
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a60:	2300      	movs	r3, #0
 8005a62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a68:	4b79      	ldr	r3, [pc, #484]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f003 030c 	and.w	r3, r3, #12
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d00d      	beq.n	8005a90 <HAL_RCC_GetSysClockFreq+0x40>
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	f200 80e1 	bhi.w	8005c3c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d002      	beq.n	8005a84 <HAL_RCC_GetSysClockFreq+0x34>
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d003      	beq.n	8005a8a <HAL_RCC_GetSysClockFreq+0x3a>
 8005a82:	e0db      	b.n	8005c3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a84:	4b73      	ldr	r3, [pc, #460]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a86:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005a88:	e0db      	b.n	8005c42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a8a:	4b73      	ldr	r3, [pc, #460]	; (8005c58 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a8e:	e0d8      	b.n	8005c42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a90:	4b6f      	ldr	r3, [pc, #444]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a98:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a9a:	4b6d      	ldr	r3, [pc, #436]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d063      	beq.n	8005b6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aa6:	4b6a      	ldr	r3, [pc, #424]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	099b      	lsrs	r3, r3, #6
 8005aac:	2200      	movs	r2, #0
 8005aae:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ab0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab8:	633b      	str	r3, [r7, #48]	; 0x30
 8005aba:	2300      	movs	r3, #0
 8005abc:	637b      	str	r3, [r7, #52]	; 0x34
 8005abe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005ac2:	4622      	mov	r2, r4
 8005ac4:	462b      	mov	r3, r5
 8005ac6:	f04f 0000 	mov.w	r0, #0
 8005aca:	f04f 0100 	mov.w	r1, #0
 8005ace:	0159      	lsls	r1, r3, #5
 8005ad0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ad4:	0150      	lsls	r0, r2, #5
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4621      	mov	r1, r4
 8005adc:	1a51      	subs	r1, r2, r1
 8005ade:	6139      	str	r1, [r7, #16]
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	eb63 0301 	sbc.w	r3, r3, r1
 8005ae6:	617b      	str	r3, [r7, #20]
 8005ae8:	f04f 0200 	mov.w	r2, #0
 8005aec:	f04f 0300 	mov.w	r3, #0
 8005af0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005af4:	4659      	mov	r1, fp
 8005af6:	018b      	lsls	r3, r1, #6
 8005af8:	4651      	mov	r1, sl
 8005afa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005afe:	4651      	mov	r1, sl
 8005b00:	018a      	lsls	r2, r1, #6
 8005b02:	4651      	mov	r1, sl
 8005b04:	ebb2 0801 	subs.w	r8, r2, r1
 8005b08:	4659      	mov	r1, fp
 8005b0a:	eb63 0901 	sbc.w	r9, r3, r1
 8005b0e:	f04f 0200 	mov.w	r2, #0
 8005b12:	f04f 0300 	mov.w	r3, #0
 8005b16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b22:	4690      	mov	r8, r2
 8005b24:	4699      	mov	r9, r3
 8005b26:	4623      	mov	r3, r4
 8005b28:	eb18 0303 	adds.w	r3, r8, r3
 8005b2c:	60bb      	str	r3, [r7, #8]
 8005b2e:	462b      	mov	r3, r5
 8005b30:	eb49 0303 	adc.w	r3, r9, r3
 8005b34:	60fb      	str	r3, [r7, #12]
 8005b36:	f04f 0200 	mov.w	r2, #0
 8005b3a:	f04f 0300 	mov.w	r3, #0
 8005b3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b42:	4629      	mov	r1, r5
 8005b44:	024b      	lsls	r3, r1, #9
 8005b46:	4621      	mov	r1, r4
 8005b48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b4c:	4621      	mov	r1, r4
 8005b4e:	024a      	lsls	r2, r1, #9
 8005b50:	4610      	mov	r0, r2
 8005b52:	4619      	mov	r1, r3
 8005b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b56:	2200      	movs	r2, #0
 8005b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b60:	f7fb f89a 	bl	8000c98 <__aeabi_uldivmod>
 8005b64:	4602      	mov	r2, r0
 8005b66:	460b      	mov	r3, r1
 8005b68:	4613      	mov	r3, r2
 8005b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b6c:	e058      	b.n	8005c20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b6e:	4b38      	ldr	r3, [pc, #224]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	099b      	lsrs	r3, r3, #6
 8005b74:	2200      	movs	r2, #0
 8005b76:	4618      	mov	r0, r3
 8005b78:	4611      	mov	r1, r2
 8005b7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b7e:	623b      	str	r3, [r7, #32]
 8005b80:	2300      	movs	r3, #0
 8005b82:	627b      	str	r3, [r7, #36]	; 0x24
 8005b84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b88:	4642      	mov	r2, r8
 8005b8a:	464b      	mov	r3, r9
 8005b8c:	f04f 0000 	mov.w	r0, #0
 8005b90:	f04f 0100 	mov.w	r1, #0
 8005b94:	0159      	lsls	r1, r3, #5
 8005b96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b9a:	0150      	lsls	r0, r2, #5
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4641      	mov	r1, r8
 8005ba2:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	eb63 0b01 	sbc.w	fp, r3, r1
 8005bac:	f04f 0200 	mov.w	r2, #0
 8005bb0:	f04f 0300 	mov.w	r3, #0
 8005bb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005bb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005bbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005bc0:	ebb2 040a 	subs.w	r4, r2, sl
 8005bc4:	eb63 050b 	sbc.w	r5, r3, fp
 8005bc8:	f04f 0200 	mov.w	r2, #0
 8005bcc:	f04f 0300 	mov.w	r3, #0
 8005bd0:	00eb      	lsls	r3, r5, #3
 8005bd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bd6:	00e2      	lsls	r2, r4, #3
 8005bd8:	4614      	mov	r4, r2
 8005bda:	461d      	mov	r5, r3
 8005bdc:	4643      	mov	r3, r8
 8005bde:	18e3      	adds	r3, r4, r3
 8005be0:	603b      	str	r3, [r7, #0]
 8005be2:	464b      	mov	r3, r9
 8005be4:	eb45 0303 	adc.w	r3, r5, r3
 8005be8:	607b      	str	r3, [r7, #4]
 8005bea:	f04f 0200 	mov.w	r2, #0
 8005bee:	f04f 0300 	mov.w	r3, #0
 8005bf2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bf6:	4629      	mov	r1, r5
 8005bf8:	028b      	lsls	r3, r1, #10
 8005bfa:	4621      	mov	r1, r4
 8005bfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c00:	4621      	mov	r1, r4
 8005c02:	028a      	lsls	r2, r1, #10
 8005c04:	4610      	mov	r0, r2
 8005c06:	4619      	mov	r1, r3
 8005c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	61bb      	str	r3, [r7, #24]
 8005c0e:	61fa      	str	r2, [r7, #28]
 8005c10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c14:	f7fb f840 	bl	8000c98 <__aeabi_uldivmod>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c20:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	0c1b      	lsrs	r3, r3, #16
 8005c26:	f003 0303 	and.w	r3, r3, #3
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005c30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c3a:	e002      	b.n	8005c42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c3c:	4b05      	ldr	r3, [pc, #20]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c3e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3750      	adds	r7, #80	; 0x50
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c4e:	bf00      	nop
 8005c50:	40023800 	.word	0x40023800
 8005c54:	00f42400 	.word	0x00f42400
 8005c58:	007a1200 	.word	0x007a1200

08005c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c60:	4b03      	ldr	r3, [pc, #12]	; (8005c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c62:	681b      	ldr	r3, [r3, #0]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	2000006c 	.word	0x2000006c

08005c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c78:	f7ff fff0 	bl	8005c5c <HAL_RCC_GetHCLKFreq>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	0a9b      	lsrs	r3, r3, #10
 8005c84:	f003 0307 	and.w	r3, r3, #7
 8005c88:	4903      	ldr	r1, [pc, #12]	; (8005c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c8a:	5ccb      	ldrb	r3, [r1, r3]
 8005c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	40023800 	.word	0x40023800
 8005c98:	0800d5e4 	.word	0x0800d5e4

08005c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ca0:	f7ff ffdc 	bl	8005c5c <HAL_RCC_GetHCLKFreq>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	4b05      	ldr	r3, [pc, #20]	; (8005cbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	0b5b      	lsrs	r3, r3, #13
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	4903      	ldr	r1, [pc, #12]	; (8005cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cb2:	5ccb      	ldrb	r3, [r1, r3]
 8005cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	40023800 	.word	0x40023800
 8005cc0:	0800d5e4 	.word	0x0800d5e4

08005cc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e07b      	b.n	8005dce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d108      	bne.n	8005cf0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ce6:	d009      	beq.n	8005cfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	61da      	str	r2, [r3, #28]
 8005cee:	e005      	b.n	8005cfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d106      	bne.n	8005d1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fe fc18 	bl	800454c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d44:	431a      	orrs	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d76:	431a      	orrs	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d80:	ea42 0103 	orr.w	r1, r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	430a      	orrs	r2, r1
 8005d92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	0c1b      	lsrs	r3, r3, #16
 8005d9a:	f003 0104 	and.w	r1, r3, #4
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	f003 0210 	and.w	r2, r3, #16
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69da      	ldr	r2, [r3, #28]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b088      	sub	sp, #32
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	60f8      	str	r0, [r7, #12]
 8005dde:	60b9      	str	r1, [r7, #8]
 8005de0:	603b      	str	r3, [r7, #0]
 8005de2:	4613      	mov	r3, r2
 8005de4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005de6:	2300      	movs	r3, #0
 8005de8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d101      	bne.n	8005df8 <HAL_SPI_Transmit+0x22>
 8005df4:	2302      	movs	r3, #2
 8005df6:	e126      	b.n	8006046 <HAL_SPI_Transmit+0x270>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e00:	f7fe ff56 	bl	8004cb0 <HAL_GetTick>
 8005e04:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e06:	88fb      	ldrh	r3, [r7, #6]
 8005e08:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d002      	beq.n	8005e1c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e16:	2302      	movs	r3, #2
 8005e18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e1a:	e10b      	b.n	8006034 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d002      	beq.n	8005e28 <HAL_SPI_Transmit+0x52>
 8005e22:	88fb      	ldrh	r3, [r7, #6]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d102      	bne.n	8005e2e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e2c:	e102      	b.n	8006034 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2203      	movs	r2, #3
 8005e32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	88fa      	ldrh	r2, [r7, #6]
 8005e46:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	88fa      	ldrh	r2, [r7, #6]
 8005e4c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e74:	d10f      	bne.n	8005e96 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea0:	2b40      	cmp	r3, #64	; 0x40
 8005ea2:	d007      	beq.n	8005eb4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ebc:	d14b      	bne.n	8005f56 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d002      	beq.n	8005ecc <HAL_SPI_Transmit+0xf6>
 8005ec6:	8afb      	ldrh	r3, [r7, #22]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d13e      	bne.n	8005f4a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed0:	881a      	ldrh	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005edc:	1c9a      	adds	r2, r3, #2
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ef0:	e02b      	b.n	8005f4a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d112      	bne.n	8005f26 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f04:	881a      	ldrh	r2, [r3, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f10:	1c9a      	adds	r2, r3, #2
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f24:	e011      	b.n	8005f4a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f26:	f7fe fec3 	bl	8004cb0 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	683a      	ldr	r2, [r7, #0]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d803      	bhi.n	8005f3e <HAL_SPI_Transmit+0x168>
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3c:	d102      	bne.n	8005f44 <HAL_SPI_Transmit+0x16e>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d102      	bne.n	8005f4a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f48:	e074      	b.n	8006034 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1ce      	bne.n	8005ef2 <HAL_SPI_Transmit+0x11c>
 8005f54:	e04c      	b.n	8005ff0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <HAL_SPI_Transmit+0x18e>
 8005f5e:	8afb      	ldrh	r3, [r7, #22]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d140      	bne.n	8005fe6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	330c      	adds	r3, #12
 8005f6e:	7812      	ldrb	r2, [r2, #0]
 8005f70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	3b01      	subs	r3, #1
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f8a:	e02c      	b.n	8005fe6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d113      	bne.n	8005fc2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	330c      	adds	r3, #12
 8005fa4:	7812      	ldrb	r2, [r2, #0]
 8005fa6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fac:	1c5a      	adds	r2, r3, #1
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	86da      	strh	r2, [r3, #54]	; 0x36
 8005fc0:	e011      	b.n	8005fe6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fc2:	f7fe fe75 	bl	8004cb0 <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d803      	bhi.n	8005fda <HAL_SPI_Transmit+0x204>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd8:	d102      	bne.n	8005fe0 <HAL_SPI_Transmit+0x20a>
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d102      	bne.n	8005fe6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005fe4:	e026      	b.n	8006034 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1cd      	bne.n	8005f8c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ff0:	69ba      	ldr	r2, [r7, #24]
 8005ff2:	6839      	ldr	r1, [r7, #0]
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 fbcb 	bl	8006790 <SPI_EndRxTxTransaction>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2220      	movs	r2, #32
 8006004:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10a      	bne.n	8006024 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800600e:	2300      	movs	r3, #0
 8006010:	613b      	str	r3, [r7, #16]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	613b      	str	r3, [r7, #16]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	613b      	str	r3, [r7, #16]
 8006022:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006028:	2b00      	cmp	r3, #0
 800602a:	d002      	beq.n	8006032 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	77fb      	strb	r3, [r7, #31]
 8006030:	e000      	b.n	8006034 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006032:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006044:	7ffb      	ldrb	r3, [r7, #31]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3720      	adds	r7, #32
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b088      	sub	sp, #32
 8006052:	af02      	add	r7, sp, #8
 8006054:	60f8      	str	r0, [r7, #12]
 8006056:	60b9      	str	r1, [r7, #8]
 8006058:	603b      	str	r3, [r7, #0]
 800605a:	4613      	mov	r3, r2
 800605c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800606a:	d112      	bne.n	8006092 <HAL_SPI_Receive+0x44>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10e      	bne.n	8006092 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2204      	movs	r2, #4
 8006078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800607c:	88fa      	ldrh	r2, [r7, #6]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	4613      	mov	r3, r2
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	68b9      	ldr	r1, [r7, #8]
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 f8f1 	bl	8006270 <HAL_SPI_TransmitReceive>
 800608e:	4603      	mov	r3, r0
 8006090:	e0ea      	b.n	8006268 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006098:	2b01      	cmp	r3, #1
 800609a:	d101      	bne.n	80060a0 <HAL_SPI_Receive+0x52>
 800609c:	2302      	movs	r3, #2
 800609e:	e0e3      	b.n	8006268 <HAL_SPI_Receive+0x21a>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060a8:	f7fe fe02 	bl	8004cb0 <HAL_GetTick>
 80060ac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d002      	beq.n	80060c0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80060ba:	2302      	movs	r3, #2
 80060bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060be:	e0ca      	b.n	8006256 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <HAL_SPI_Receive+0x7e>
 80060c6:	88fb      	ldrh	r3, [r7, #6]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d102      	bne.n	80060d2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060d0:	e0c1      	b.n	8006256 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2204      	movs	r2, #4
 80060d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	88fa      	ldrh	r2, [r7, #6]
 80060ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	88fa      	ldrh	r2, [r7, #6]
 80060f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006118:	d10f      	bne.n	800613a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006128:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006138:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006144:	2b40      	cmp	r3, #64	; 0x40
 8006146:	d007      	beq.n	8006158 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006156:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d162      	bne.n	8006226 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006160:	e02e      	b.n	80061c0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	2b01      	cmp	r3, #1
 800616e:	d115      	bne.n	800619c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f103 020c 	add.w	r2, r3, #12
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617c:	7812      	ldrb	r2, [r2, #0]
 800617e:	b2d2      	uxtb	r2, r2
 8006180:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006190:	b29b      	uxth	r3, r3
 8006192:	3b01      	subs	r3, #1
 8006194:	b29a      	uxth	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	87da      	strh	r2, [r3, #62]	; 0x3e
 800619a:	e011      	b.n	80061c0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800619c:	f7fe fd88 	bl	8004cb0 <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d803      	bhi.n	80061b4 <HAL_SPI_Receive+0x166>
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b2:	d102      	bne.n	80061ba <HAL_SPI_Receive+0x16c>
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d102      	bne.n	80061c0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80061be:	e04a      	b.n	8006256 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1cb      	bne.n	8006162 <HAL_SPI_Receive+0x114>
 80061ca:	e031      	b.n	8006230 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d113      	bne.n	8006202 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68da      	ldr	r2, [r3, #12]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e4:	b292      	uxth	r2, r2
 80061e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ec:	1c9a      	adds	r2, r3, #2
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	3b01      	subs	r3, #1
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006200:	e011      	b.n	8006226 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006202:	f7fe fd55 	bl	8004cb0 <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	683a      	ldr	r2, [r7, #0]
 800620e:	429a      	cmp	r2, r3
 8006210:	d803      	bhi.n	800621a <HAL_SPI_Receive+0x1cc>
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006218:	d102      	bne.n	8006220 <HAL_SPI_Receive+0x1d2>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d102      	bne.n	8006226 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006224:	e017      	b.n	8006256 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800622a:	b29b      	uxth	r3, r3
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1cd      	bne.n	80061cc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	6839      	ldr	r1, [r7, #0]
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f000 fa45 	bl	80066c4 <SPI_EndRxTransaction>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d002      	beq.n	8006246 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2220      	movs	r2, #32
 8006244:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800624a:	2b00      	cmp	r3, #0
 800624c:	d002      	beq.n	8006254 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	75fb      	strb	r3, [r7, #23]
 8006252:	e000      	b.n	8006256 <HAL_SPI_Receive+0x208>
  }

error :
 8006254:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006266:	7dfb      	ldrb	r3, [r7, #23]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3718      	adds	r7, #24
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b08c      	sub	sp, #48	; 0x30
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
 800627c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800627e:	2301      	movs	r3, #1
 8006280:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800628e:	2b01      	cmp	r3, #1
 8006290:	d101      	bne.n	8006296 <HAL_SPI_TransmitReceive+0x26>
 8006292:	2302      	movs	r3, #2
 8006294:	e18a      	b.n	80065ac <HAL_SPI_TransmitReceive+0x33c>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800629e:	f7fe fd07 	bl	8004cb0 <HAL_GetTick>
 80062a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80062b4:	887b      	ldrh	r3, [r7, #2]
 80062b6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80062b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d00f      	beq.n	80062e0 <HAL_SPI_TransmitReceive+0x70>
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062c6:	d107      	bne.n	80062d8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d103      	bne.n	80062d8 <HAL_SPI_TransmitReceive+0x68>
 80062d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062d4:	2b04      	cmp	r3, #4
 80062d6:	d003      	beq.n	80062e0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80062d8:	2302      	movs	r3, #2
 80062da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062de:	e15b      	b.n	8006598 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d005      	beq.n	80062f2 <HAL_SPI_TransmitReceive+0x82>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <HAL_SPI_TransmitReceive+0x82>
 80062ec:	887b      	ldrh	r3, [r7, #2]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d103      	bne.n	80062fa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062f8:	e14e      	b.n	8006598 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b04      	cmp	r3, #4
 8006304:	d003      	beq.n	800630e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2205      	movs	r2, #5
 800630a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	887a      	ldrh	r2, [r7, #2]
 800631e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	887a      	ldrh	r2, [r7, #2]
 8006324:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	887a      	ldrh	r2, [r7, #2]
 8006330:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	887a      	ldrh	r2, [r7, #2]
 8006336:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634e:	2b40      	cmp	r3, #64	; 0x40
 8006350:	d007      	beq.n	8006362 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006360:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800636a:	d178      	bne.n	800645e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d002      	beq.n	800637a <HAL_SPI_TransmitReceive+0x10a>
 8006374:	8b7b      	ldrh	r3, [r7, #26]
 8006376:	2b01      	cmp	r3, #1
 8006378:	d166      	bne.n	8006448 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637e:	881a      	ldrh	r2, [r3, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638a:	1c9a      	adds	r2, r3, #2
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006394:	b29b      	uxth	r3, r3
 8006396:	3b01      	subs	r3, #1
 8006398:	b29a      	uxth	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800639e:	e053      	b.n	8006448 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d11b      	bne.n	80063e6 <HAL_SPI_TransmitReceive+0x176>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d016      	beq.n	80063e6 <HAL_SPI_TransmitReceive+0x176>
 80063b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d113      	bne.n	80063e6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c2:	881a      	ldrh	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ce:	1c9a      	adds	r2, r3, #2
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063d8:	b29b      	uxth	r3, r3
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29a      	uxth	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063e2:	2300      	movs	r3, #0
 80063e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d119      	bne.n	8006428 <HAL_SPI_TransmitReceive+0x1b8>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d014      	beq.n	8006428 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68da      	ldr	r2, [r3, #12]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006408:	b292      	uxth	r2, r2
 800640a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006410:	1c9a      	adds	r2, r3, #2
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800641a:	b29b      	uxth	r3, r3
 800641c:	3b01      	subs	r3, #1
 800641e:	b29a      	uxth	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006424:	2301      	movs	r3, #1
 8006426:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006428:	f7fe fc42 	bl	8004cb0 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006434:	429a      	cmp	r2, r3
 8006436:	d807      	bhi.n	8006448 <HAL_SPI_TransmitReceive+0x1d8>
 8006438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643e:	d003      	beq.n	8006448 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006446:	e0a7      	b.n	8006598 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800644c:	b29b      	uxth	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1a6      	bne.n	80063a0 <HAL_SPI_TransmitReceive+0x130>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006456:	b29b      	uxth	r3, r3
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1a1      	bne.n	80063a0 <HAL_SPI_TransmitReceive+0x130>
 800645c:	e07c      	b.n	8006558 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d002      	beq.n	800646c <HAL_SPI_TransmitReceive+0x1fc>
 8006466:	8b7b      	ldrh	r3, [r7, #26]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d16b      	bne.n	8006544 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	330c      	adds	r3, #12
 8006476:	7812      	ldrb	r2, [r2, #0]
 8006478:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647e:	1c5a      	adds	r2, r3, #1
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006488:	b29b      	uxth	r3, r3
 800648a:	3b01      	subs	r3, #1
 800648c:	b29a      	uxth	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006492:	e057      	b.n	8006544 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f003 0302 	and.w	r3, r3, #2
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d11c      	bne.n	80064dc <HAL_SPI_TransmitReceive+0x26c>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d017      	beq.n	80064dc <HAL_SPI_TransmitReceive+0x26c>
 80064ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d114      	bne.n	80064dc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	330c      	adds	r3, #12
 80064bc:	7812      	ldrb	r2, [r2, #0]
 80064be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c4:	1c5a      	adds	r2, r3, #1
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	3b01      	subs	r3, #1
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064d8:	2300      	movs	r3, #0
 80064da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d119      	bne.n	800651e <HAL_SPI_TransmitReceive+0x2ae>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d014      	beq.n	800651e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68da      	ldr	r2, [r3, #12]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fe:	b2d2      	uxtb	r2, r2
 8006500:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006510:	b29b      	uxth	r3, r3
 8006512:	3b01      	subs	r3, #1
 8006514:	b29a      	uxth	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800651a:	2301      	movs	r3, #1
 800651c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800651e:	f7fe fbc7 	bl	8004cb0 <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800652a:	429a      	cmp	r2, r3
 800652c:	d803      	bhi.n	8006536 <HAL_SPI_TransmitReceive+0x2c6>
 800652e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006534:	d102      	bne.n	800653c <HAL_SPI_TransmitReceive+0x2cc>
 8006536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006538:	2b00      	cmp	r3, #0
 800653a:	d103      	bne.n	8006544 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006542:	e029      	b.n	8006598 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006548:	b29b      	uxth	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1a2      	bne.n	8006494 <HAL_SPI_TransmitReceive+0x224>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006552:	b29b      	uxth	r3, r3
 8006554:	2b00      	cmp	r3, #0
 8006556:	d19d      	bne.n	8006494 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800655a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 f917 	bl	8006790 <SPI_EndRxTxTransaction>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d006      	beq.n	8006576 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2220      	movs	r2, #32
 8006572:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006574:	e010      	b.n	8006598 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10b      	bne.n	8006596 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800657e:	2300      	movs	r3, #0
 8006580:	617b      	str	r3, [r7, #20]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	617b      	str	r3, [r7, #20]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	617b      	str	r3, [r7, #20]
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	e000      	b.n	8006598 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006596:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3730      	adds	r7, #48	; 0x30
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b088      	sub	sp, #32
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	603b      	str	r3, [r7, #0]
 80065c0:	4613      	mov	r3, r2
 80065c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065c4:	f7fe fb74 	bl	8004cb0 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065cc:	1a9b      	subs	r3, r3, r2
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	4413      	add	r3, r2
 80065d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065d4:	f7fe fb6c 	bl	8004cb0 <HAL_GetTick>
 80065d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065da:	4b39      	ldr	r3, [pc, #228]	; (80066c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	015b      	lsls	r3, r3, #5
 80065e0:	0d1b      	lsrs	r3, r3, #20
 80065e2:	69fa      	ldr	r2, [r7, #28]
 80065e4:	fb02 f303 	mul.w	r3, r2, r3
 80065e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065ea:	e054      	b.n	8006696 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f2:	d050      	beq.n	8006696 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065f4:	f7fe fb5c 	bl	8004cb0 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	69fa      	ldr	r2, [r7, #28]
 8006600:	429a      	cmp	r2, r3
 8006602:	d902      	bls.n	800660a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d13d      	bne.n	8006686 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006618:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006622:	d111      	bne.n	8006648 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800662c:	d004      	beq.n	8006638 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006636:	d107      	bne.n	8006648 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006646:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006650:	d10f      	bne.n	8006672 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006660:	601a      	str	r2, [r3, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006670:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e017      	b.n	80066b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800668c:	2300      	movs	r3, #0
 800668e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	3b01      	subs	r3, #1
 8006694:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689a      	ldr	r2, [r3, #8]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	4013      	ands	r3, r2
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	bf0c      	ite	eq
 80066a6:	2301      	moveq	r3, #1
 80066a8:	2300      	movne	r3, #0
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	461a      	mov	r2, r3
 80066ae:	79fb      	ldrb	r3, [r7, #7]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d19b      	bne.n	80065ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3720      	adds	r7, #32
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	2000006c 	.word	0x2000006c

080066c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af02      	add	r7, sp, #8
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066d8:	d111      	bne.n	80066fe <SPI_EndRxTransaction+0x3a>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066e2:	d004      	beq.n	80066ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ec:	d107      	bne.n	80066fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066fc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006706:	d12a      	bne.n	800675e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006710:	d012      	beq.n	8006738 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2200      	movs	r2, #0
 800671a:	2180      	movs	r1, #128	; 0x80
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f7ff ff49 	bl	80065b4 <SPI_WaitFlagStateUntilTimeout>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d02d      	beq.n	8006784 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800672c:	f043 0220 	orr.w	r2, r3, #32
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e026      	b.n	8006786 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	2200      	movs	r2, #0
 8006740:	2101      	movs	r1, #1
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f7ff ff36 	bl	80065b4 <SPI_WaitFlagStateUntilTimeout>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d01a      	beq.n	8006784 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006752:	f043 0220 	orr.w	r2, r3, #32
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e013      	b.n	8006786 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	2200      	movs	r2, #0
 8006766:	2101      	movs	r1, #1
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f7ff ff23 	bl	80065b4 <SPI_WaitFlagStateUntilTimeout>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d007      	beq.n	8006784 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006778:	f043 0220 	orr.w	r2, r3, #32
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e000      	b.n	8006786 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
	...

08006790 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b088      	sub	sp, #32
 8006794:	af02      	add	r7, sp, #8
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800679c:	4b1b      	ldr	r3, [pc, #108]	; (800680c <SPI_EndRxTxTransaction+0x7c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a1b      	ldr	r2, [pc, #108]	; (8006810 <SPI_EndRxTxTransaction+0x80>)
 80067a2:	fba2 2303 	umull	r2, r3, r2, r3
 80067a6:	0d5b      	lsrs	r3, r3, #21
 80067a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80067ac:	fb02 f303 	mul.w	r3, r2, r3
 80067b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067ba:	d112      	bne.n	80067e2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2200      	movs	r2, #0
 80067c4:	2180      	movs	r1, #128	; 0x80
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f7ff fef4 	bl	80065b4 <SPI_WaitFlagStateUntilTimeout>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d016      	beq.n	8006800 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d6:	f043 0220 	orr.w	r2, r3, #32
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e00f      	b.n	8006802 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00a      	beq.n	80067fe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	3b01      	subs	r3, #1
 80067ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f8:	2b80      	cmp	r3, #128	; 0x80
 80067fa:	d0f2      	beq.n	80067e2 <SPI_EndRxTxTransaction+0x52>
 80067fc:	e000      	b.n	8006800 <SPI_EndRxTxTransaction+0x70>
        break;
 80067fe:	bf00      	nop
  }

  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3718      	adds	r7, #24
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	2000006c 	.word	0x2000006c
 8006810:	165e9f81 	.word	0x165e9f81

08006814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e041      	b.n	80068aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d106      	bne.n	8006840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7fd ff42 	bl	80046c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	3304      	adds	r3, #4
 8006850:	4619      	mov	r1, r3
 8006852:	4610      	mov	r0, r2
 8006854:	f000 fb24 	bl	8006ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b082      	sub	sp, #8
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d101      	bne.n	80068c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e041      	b.n	8006948 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d106      	bne.n	80068de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f839 	bl	8006950 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2202      	movs	r2, #2
 80068e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	3304      	adds	r3, #4
 80068ee:	4619      	mov	r1, r3
 80068f0:	4610      	mov	r0, r2
 80068f2:	f000 fad5 	bl	8006ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d109      	bne.n	8006988 <HAL_TIM_PWM_Start+0x24>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800697a:	b2db      	uxtb	r3, r3
 800697c:	2b01      	cmp	r3, #1
 800697e:	bf14      	ite	ne
 8006980:	2301      	movne	r3, #1
 8006982:	2300      	moveq	r3, #0
 8006984:	b2db      	uxtb	r3, r3
 8006986:	e022      	b.n	80069ce <HAL_TIM_PWM_Start+0x6a>
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	2b04      	cmp	r3, #4
 800698c:	d109      	bne.n	80069a2 <HAL_TIM_PWM_Start+0x3e>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b01      	cmp	r3, #1
 8006998:	bf14      	ite	ne
 800699a:	2301      	movne	r3, #1
 800699c:	2300      	moveq	r3, #0
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	e015      	b.n	80069ce <HAL_TIM_PWM_Start+0x6a>
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b08      	cmp	r3, #8
 80069a6:	d109      	bne.n	80069bc <HAL_TIM_PWM_Start+0x58>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	bf14      	ite	ne
 80069b4:	2301      	movne	r3, #1
 80069b6:	2300      	moveq	r3, #0
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	e008      	b.n	80069ce <HAL_TIM_PWM_Start+0x6a>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	bf14      	ite	ne
 80069c8:	2301      	movne	r3, #1
 80069ca:	2300      	moveq	r3, #0
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e068      	b.n	8006aa8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d104      	bne.n	80069e6 <HAL_TIM_PWM_Start+0x82>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2202      	movs	r2, #2
 80069e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069e4:	e013      	b.n	8006a0e <HAL_TIM_PWM_Start+0xaa>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b04      	cmp	r3, #4
 80069ea:	d104      	bne.n	80069f6 <HAL_TIM_PWM_Start+0x92>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2202      	movs	r2, #2
 80069f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069f4:	e00b      	b.n	8006a0e <HAL_TIM_PWM_Start+0xaa>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b08      	cmp	r3, #8
 80069fa:	d104      	bne.n	8006a06 <HAL_TIM_PWM_Start+0xa2>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a04:	e003      	b.n	8006a0e <HAL_TIM_PWM_Start+0xaa>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2202      	movs	r2, #2
 8006a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2201      	movs	r2, #1
 8006a14:	6839      	ldr	r1, [r7, #0]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 fce8 	bl	80073ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a23      	ldr	r2, [pc, #140]	; (8006ab0 <HAL_TIM_PWM_Start+0x14c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d107      	bne.n	8006a36 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a1d      	ldr	r2, [pc, #116]	; (8006ab0 <HAL_TIM_PWM_Start+0x14c>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d018      	beq.n	8006a72 <HAL_TIM_PWM_Start+0x10e>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a48:	d013      	beq.n	8006a72 <HAL_TIM_PWM_Start+0x10e>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a19      	ldr	r2, [pc, #100]	; (8006ab4 <HAL_TIM_PWM_Start+0x150>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d00e      	beq.n	8006a72 <HAL_TIM_PWM_Start+0x10e>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a17      	ldr	r2, [pc, #92]	; (8006ab8 <HAL_TIM_PWM_Start+0x154>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d009      	beq.n	8006a72 <HAL_TIM_PWM_Start+0x10e>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a16      	ldr	r2, [pc, #88]	; (8006abc <HAL_TIM_PWM_Start+0x158>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d004      	beq.n	8006a72 <HAL_TIM_PWM_Start+0x10e>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a14      	ldr	r2, [pc, #80]	; (8006ac0 <HAL_TIM_PWM_Start+0x15c>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d111      	bne.n	8006a96 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f003 0307 	and.w	r3, r3, #7
 8006a7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2b06      	cmp	r3, #6
 8006a82:	d010      	beq.n	8006aa6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f042 0201 	orr.w	r2, r2, #1
 8006a92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a94:	e007      	b.n	8006aa6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f042 0201 	orr.w	r2, r2, #1
 8006aa4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	40010000 	.word	0x40010000
 8006ab4:	40000400 	.word	0x40000400
 8006ab8:	40000800 	.word	0x40000800
 8006abc:	40000c00 	.word	0x40000c00
 8006ac0:	40014000 	.word	0x40014000

08006ac4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	6839      	ldr	r1, [r7, #0]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f000 fc88 	bl	80073ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a29      	ldr	r2, [pc, #164]	; (8006b88 <HAL_TIM_PWM_Stop+0xc4>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d117      	bne.n	8006b16 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	6a1a      	ldr	r2, [r3, #32]
 8006aec:	f241 1311 	movw	r3, #4369	; 0x1111
 8006af0:	4013      	ands	r3, r2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10f      	bne.n	8006b16 <HAL_TIM_PWM_Stop+0x52>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	6a1a      	ldr	r2, [r3, #32]
 8006afc:	f240 4344 	movw	r3, #1092	; 0x444
 8006b00:	4013      	ands	r3, r2
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d107      	bne.n	8006b16 <HAL_TIM_PWM_Stop+0x52>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6a1a      	ldr	r2, [r3, #32]
 8006b1c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b20:	4013      	ands	r3, r2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10f      	bne.n	8006b46 <HAL_TIM_PWM_Stop+0x82>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	6a1a      	ldr	r2, [r3, #32]
 8006b2c:	f240 4344 	movw	r3, #1092	; 0x444
 8006b30:	4013      	ands	r3, r2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d107      	bne.n	8006b46 <HAL_TIM_PWM_Stop+0x82>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 0201 	bic.w	r2, r2, #1
 8006b44:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d104      	bne.n	8006b56 <HAL_TIM_PWM_Stop+0x92>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b54:	e013      	b.n	8006b7e <HAL_TIM_PWM_Stop+0xba>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b04      	cmp	r3, #4
 8006b5a:	d104      	bne.n	8006b66 <HAL_TIM_PWM_Stop+0xa2>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b64:	e00b      	b.n	8006b7e <HAL_TIM_PWM_Stop+0xba>
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	2b08      	cmp	r3, #8
 8006b6a:	d104      	bne.n	8006b76 <HAL_TIM_PWM_Stop+0xb2>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b74:	e003      	b.n	8006b7e <HAL_TIM_PWM_Stop+0xba>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	40010000 	.word	0x40010000

08006b8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d101      	bne.n	8006baa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	e0ae      	b.n	8006d08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b0c      	cmp	r3, #12
 8006bb6:	f200 809f 	bhi.w	8006cf8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006bba:	a201      	add	r2, pc, #4	; (adr r2, 8006bc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc0:	08006bf5 	.word	0x08006bf5
 8006bc4:	08006cf9 	.word	0x08006cf9
 8006bc8:	08006cf9 	.word	0x08006cf9
 8006bcc:	08006cf9 	.word	0x08006cf9
 8006bd0:	08006c35 	.word	0x08006c35
 8006bd4:	08006cf9 	.word	0x08006cf9
 8006bd8:	08006cf9 	.word	0x08006cf9
 8006bdc:	08006cf9 	.word	0x08006cf9
 8006be0:	08006c77 	.word	0x08006c77
 8006be4:	08006cf9 	.word	0x08006cf9
 8006be8:	08006cf9 	.word	0x08006cf9
 8006bec:	08006cf9 	.word	0x08006cf9
 8006bf0:	08006cb7 	.word	0x08006cb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68b9      	ldr	r1, [r7, #8]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f000 f9d0 	bl	8006fa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	699a      	ldr	r2, [r3, #24]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 0208 	orr.w	r2, r2, #8
 8006c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699a      	ldr	r2, [r3, #24]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 0204 	bic.w	r2, r2, #4
 8006c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6999      	ldr	r1, [r3, #24]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	691a      	ldr	r2, [r3, #16]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	619a      	str	r2, [r3, #24]
      break;
 8006c32:	e064      	b.n	8006cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68b9      	ldr	r1, [r7, #8]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 fa16 	bl	800706c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	699a      	ldr	r2, [r3, #24]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	699a      	ldr	r2, [r3, #24]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6999      	ldr	r1, [r3, #24]
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	021a      	lsls	r2, r3, #8
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	619a      	str	r2, [r3, #24]
      break;
 8006c74:	e043      	b.n	8006cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68b9      	ldr	r1, [r7, #8]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 fa61 	bl	8007144 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69da      	ldr	r2, [r3, #28]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f042 0208 	orr.w	r2, r2, #8
 8006c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69da      	ldr	r2, [r3, #28]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 0204 	bic.w	r2, r2, #4
 8006ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69d9      	ldr	r1, [r3, #28]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	691a      	ldr	r2, [r3, #16]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	61da      	str	r2, [r3, #28]
      break;
 8006cb4:	e023      	b.n	8006cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68b9      	ldr	r1, [r7, #8]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 faab 	bl	8007218 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69da      	ldr	r2, [r3, #28]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	69da      	ldr	r2, [r3, #28]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	69d9      	ldr	r1, [r3, #28]
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	021a      	lsls	r2, r3, #8
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	61da      	str	r2, [r3, #28]
      break;
 8006cf6:	e002      	b.n	8006cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8006cfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3718      	adds	r7, #24
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d101      	bne.n	8006d2c <HAL_TIM_ConfigClockSource+0x1c>
 8006d28:	2302      	movs	r3, #2
 8006d2a:	e0b4      	b.n	8006e96 <HAL_TIM_ConfigClockSource+0x186>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d64:	d03e      	beq.n	8006de4 <HAL_TIM_ConfigClockSource+0xd4>
 8006d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d6a:	f200 8087 	bhi.w	8006e7c <HAL_TIM_ConfigClockSource+0x16c>
 8006d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d72:	f000 8086 	beq.w	8006e82 <HAL_TIM_ConfigClockSource+0x172>
 8006d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d7a:	d87f      	bhi.n	8006e7c <HAL_TIM_ConfigClockSource+0x16c>
 8006d7c:	2b70      	cmp	r3, #112	; 0x70
 8006d7e:	d01a      	beq.n	8006db6 <HAL_TIM_ConfigClockSource+0xa6>
 8006d80:	2b70      	cmp	r3, #112	; 0x70
 8006d82:	d87b      	bhi.n	8006e7c <HAL_TIM_ConfigClockSource+0x16c>
 8006d84:	2b60      	cmp	r3, #96	; 0x60
 8006d86:	d050      	beq.n	8006e2a <HAL_TIM_ConfigClockSource+0x11a>
 8006d88:	2b60      	cmp	r3, #96	; 0x60
 8006d8a:	d877      	bhi.n	8006e7c <HAL_TIM_ConfigClockSource+0x16c>
 8006d8c:	2b50      	cmp	r3, #80	; 0x50
 8006d8e:	d03c      	beq.n	8006e0a <HAL_TIM_ConfigClockSource+0xfa>
 8006d90:	2b50      	cmp	r3, #80	; 0x50
 8006d92:	d873      	bhi.n	8006e7c <HAL_TIM_ConfigClockSource+0x16c>
 8006d94:	2b40      	cmp	r3, #64	; 0x40
 8006d96:	d058      	beq.n	8006e4a <HAL_TIM_ConfigClockSource+0x13a>
 8006d98:	2b40      	cmp	r3, #64	; 0x40
 8006d9a:	d86f      	bhi.n	8006e7c <HAL_TIM_ConfigClockSource+0x16c>
 8006d9c:	2b30      	cmp	r3, #48	; 0x30
 8006d9e:	d064      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0x15a>
 8006da0:	2b30      	cmp	r3, #48	; 0x30
 8006da2:	d86b      	bhi.n	8006e7c <HAL_TIM_ConfigClockSource+0x16c>
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	d060      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0x15a>
 8006da8:	2b20      	cmp	r3, #32
 8006daa:	d867      	bhi.n	8006e7c <HAL_TIM_ConfigClockSource+0x16c>
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d05c      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0x15a>
 8006db0:	2b10      	cmp	r3, #16
 8006db2:	d05a      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0x15a>
 8006db4:	e062      	b.n	8006e7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6818      	ldr	r0, [r3, #0]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	6899      	ldr	r1, [r3, #8]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	685a      	ldr	r2, [r3, #4]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	f000 faf1 	bl	80073ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006dd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	609a      	str	r2, [r3, #8]
      break;
 8006de2:	e04f      	b.n	8006e84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6818      	ldr	r0, [r3, #0]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	6899      	ldr	r1, [r3, #8]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	685a      	ldr	r2, [r3, #4]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	f000 fada 	bl	80073ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689a      	ldr	r2, [r3, #8]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e06:	609a      	str	r2, [r3, #8]
      break;
 8006e08:	e03c      	b.n	8006e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6818      	ldr	r0, [r3, #0]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	6859      	ldr	r1, [r3, #4]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	461a      	mov	r2, r3
 8006e18:	f000 fa4e 	bl	80072b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2150      	movs	r1, #80	; 0x50
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 faa7 	bl	8007376 <TIM_ITRx_SetConfig>
      break;
 8006e28:	e02c      	b.n	8006e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6818      	ldr	r0, [r3, #0]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	6859      	ldr	r1, [r3, #4]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	461a      	mov	r2, r3
 8006e38:	f000 fa6d 	bl	8007316 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2160      	movs	r1, #96	; 0x60
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 fa97 	bl	8007376 <TIM_ITRx_SetConfig>
      break;
 8006e48:	e01c      	b.n	8006e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6818      	ldr	r0, [r3, #0]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	6859      	ldr	r1, [r3, #4]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	461a      	mov	r2, r3
 8006e58:	f000 fa2e 	bl	80072b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2140      	movs	r1, #64	; 0x40
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 fa87 	bl	8007376 <TIM_ITRx_SetConfig>
      break;
 8006e68:	e00c      	b.n	8006e84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4619      	mov	r1, r3
 8006e74:	4610      	mov	r0, r2
 8006e76:	f000 fa7e 	bl	8007376 <TIM_ITRx_SetConfig>
      break;
 8006e7a:	e003      	b.n	8006e84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e80:	e000      	b.n	8006e84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
	...

08006ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a34      	ldr	r2, [pc, #208]	; (8006f84 <TIM_Base_SetConfig+0xe4>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d00f      	beq.n	8006ed8 <TIM_Base_SetConfig+0x38>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ebe:	d00b      	beq.n	8006ed8 <TIM_Base_SetConfig+0x38>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a31      	ldr	r2, [pc, #196]	; (8006f88 <TIM_Base_SetConfig+0xe8>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d007      	beq.n	8006ed8 <TIM_Base_SetConfig+0x38>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a30      	ldr	r2, [pc, #192]	; (8006f8c <TIM_Base_SetConfig+0xec>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d003      	beq.n	8006ed8 <TIM_Base_SetConfig+0x38>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a2f      	ldr	r2, [pc, #188]	; (8006f90 <TIM_Base_SetConfig+0xf0>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d108      	bne.n	8006eea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a25      	ldr	r2, [pc, #148]	; (8006f84 <TIM_Base_SetConfig+0xe4>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d01b      	beq.n	8006f2a <TIM_Base_SetConfig+0x8a>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ef8:	d017      	beq.n	8006f2a <TIM_Base_SetConfig+0x8a>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a22      	ldr	r2, [pc, #136]	; (8006f88 <TIM_Base_SetConfig+0xe8>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d013      	beq.n	8006f2a <TIM_Base_SetConfig+0x8a>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a21      	ldr	r2, [pc, #132]	; (8006f8c <TIM_Base_SetConfig+0xec>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d00f      	beq.n	8006f2a <TIM_Base_SetConfig+0x8a>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a20      	ldr	r2, [pc, #128]	; (8006f90 <TIM_Base_SetConfig+0xf0>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d00b      	beq.n	8006f2a <TIM_Base_SetConfig+0x8a>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a1f      	ldr	r2, [pc, #124]	; (8006f94 <TIM_Base_SetConfig+0xf4>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d007      	beq.n	8006f2a <TIM_Base_SetConfig+0x8a>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a1e      	ldr	r2, [pc, #120]	; (8006f98 <TIM_Base_SetConfig+0xf8>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d003      	beq.n	8006f2a <TIM_Base_SetConfig+0x8a>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a1d      	ldr	r2, [pc, #116]	; (8006f9c <TIM_Base_SetConfig+0xfc>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d108      	bne.n	8006f3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	695b      	ldr	r3, [r3, #20]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	689a      	ldr	r2, [r3, #8]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a08      	ldr	r2, [pc, #32]	; (8006f84 <TIM_Base_SetConfig+0xe4>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d103      	bne.n	8006f70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	691a      	ldr	r2, [r3, #16]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	615a      	str	r2, [r3, #20]
}
 8006f76:	bf00      	nop
 8006f78:	3714      	adds	r7, #20
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	40010000 	.word	0x40010000
 8006f88:	40000400 	.word	0x40000400
 8006f8c:	40000800 	.word	0x40000800
 8006f90:	40000c00 	.word	0x40000c00
 8006f94:	40014000 	.word	0x40014000
 8006f98:	40014400 	.word	0x40014400
 8006f9c:	40014800 	.word	0x40014800

08006fa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b087      	sub	sp, #28
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	f023 0201 	bic.w	r2, r3, #1
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f023 0303 	bic.w	r3, r3, #3
 8006fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f023 0302 	bic.w	r3, r3, #2
 8006fe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a1c      	ldr	r2, [pc, #112]	; (8007068 <TIM_OC1_SetConfig+0xc8>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d10c      	bne.n	8007016 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	f023 0308 	bic.w	r3, r3, #8
 8007002:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	697a      	ldr	r2, [r7, #20]
 800700a:	4313      	orrs	r3, r2
 800700c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f023 0304 	bic.w	r3, r3, #4
 8007014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a13      	ldr	r2, [pc, #76]	; (8007068 <TIM_OC1_SetConfig+0xc8>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d111      	bne.n	8007042 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800702c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	4313      	orrs	r3, r2
 8007036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	4313      	orrs	r3, r2
 8007040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	685a      	ldr	r2, [r3, #4]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	621a      	str	r2, [r3, #32]
}
 800705c:	bf00      	nop
 800705e:	371c      	adds	r7, #28
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	40010000 	.word	0x40010000

0800706c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	f023 0210 	bic.w	r2, r3, #16
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800709a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	021b      	lsls	r3, r3, #8
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	f023 0320 	bic.w	r3, r3, #32
 80070b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	011b      	lsls	r3, r3, #4
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a1e      	ldr	r2, [pc, #120]	; (8007140 <TIM_OC2_SetConfig+0xd4>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d10d      	bne.n	80070e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	011b      	lsls	r3, r3, #4
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	4313      	orrs	r3, r2
 80070de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a15      	ldr	r2, [pc, #84]	; (8007140 <TIM_OC2_SetConfig+0xd4>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d113      	bne.n	8007118 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	4313      	orrs	r3, r2
 800710a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	699b      	ldr	r3, [r3, #24]
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	693a      	ldr	r2, [r7, #16]
 8007114:	4313      	orrs	r3, r2
 8007116:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	621a      	str	r2, [r3, #32]
}
 8007132:	bf00      	nop
 8007134:	371c      	adds	r7, #28
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	40010000 	.word	0x40010000

08007144 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007144:	b480      	push	{r7}
 8007146:	b087      	sub	sp, #28
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 0303 	bic.w	r3, r3, #3
 800717a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	4313      	orrs	r3, r2
 8007184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800718c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	021b      	lsls	r3, r3, #8
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	4313      	orrs	r3, r2
 8007198:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a1d      	ldr	r2, [pc, #116]	; (8007214 <TIM_OC3_SetConfig+0xd0>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d10d      	bne.n	80071be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	021b      	lsls	r3, r3, #8
 80071b0:	697a      	ldr	r2, [r7, #20]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a14      	ldr	r2, [pc, #80]	; (8007214 <TIM_OC3_SetConfig+0xd0>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d113      	bne.n	80071ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	011b      	lsls	r3, r3, #4
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	4313      	orrs	r3, r2
 80071e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	011b      	lsls	r3, r3, #4
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	621a      	str	r2, [r3, #32]
}
 8007208:	bf00      	nop
 800720a:	371c      	adds	r7, #28
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	40010000 	.word	0x40010000

08007218 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007218:	b480      	push	{r7}
 800721a:	b087      	sub	sp, #28
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800724e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	021b      	lsls	r3, r3, #8
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	4313      	orrs	r3, r2
 800725a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007262:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	031b      	lsls	r3, r3, #12
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	4313      	orrs	r3, r2
 800726e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a10      	ldr	r2, [pc, #64]	; (80072b4 <TIM_OC4_SetConfig+0x9c>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d109      	bne.n	800728c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800727e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	695b      	ldr	r3, [r3, #20]
 8007284:	019b      	lsls	r3, r3, #6
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	4313      	orrs	r3, r2
 800728a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	621a      	str	r2, [r3, #32]
}
 80072a6:	bf00      	nop
 80072a8:	371c      	adds	r7, #28
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	40010000 	.word	0x40010000

080072b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6a1b      	ldr	r3, [r3, #32]
 80072c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	f023 0201 	bic.w	r2, r3, #1
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	011b      	lsls	r3, r3, #4
 80072e8:	693a      	ldr	r2, [r7, #16]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f023 030a 	bic.w	r3, r3, #10
 80072f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	621a      	str	r2, [r3, #32]
}
 800730a:	bf00      	nop
 800730c:	371c      	adds	r7, #28
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr

08007316 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007316:	b480      	push	{r7}
 8007318:	b087      	sub	sp, #28
 800731a:	af00      	add	r7, sp, #0
 800731c:	60f8      	str	r0, [r7, #12]
 800731e:	60b9      	str	r1, [r7, #8]
 8007320:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	f023 0210 	bic.w	r2, r3, #16
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6a1b      	ldr	r3, [r3, #32]
 8007338:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007340:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	031b      	lsls	r3, r3, #12
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	4313      	orrs	r3, r2
 800734a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007352:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	011b      	lsls	r3, r3, #4
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	4313      	orrs	r3, r2
 800735c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	621a      	str	r2, [r3, #32]
}
 800736a:	bf00      	nop
 800736c:	371c      	adds	r7, #28
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007376:	b480      	push	{r7}
 8007378:	b085      	sub	sp, #20
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
 800737e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800738c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800738e:	683a      	ldr	r2, [r7, #0]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	4313      	orrs	r3, r2
 8007394:	f043 0307 	orr.w	r3, r3, #7
 8007398:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	609a      	str	r2, [r3, #8]
}
 80073a0:	bf00      	nop
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b087      	sub	sp, #28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
 80073b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	021a      	lsls	r2, r3, #8
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	431a      	orrs	r2, r3
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	697a      	ldr	r2, [r7, #20]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	609a      	str	r2, [r3, #8]
}
 80073e0:	bf00      	nop
 80073e2:	371c      	adds	r7, #28
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b087      	sub	sp, #28
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	f003 031f 	and.w	r3, r3, #31
 80073fe:	2201      	movs	r2, #1
 8007400:	fa02 f303 	lsl.w	r3, r2, r3
 8007404:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6a1a      	ldr	r2, [r3, #32]
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	43db      	mvns	r3, r3
 800740e:	401a      	ands	r2, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6a1a      	ldr	r2, [r3, #32]
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f003 031f 	and.w	r3, r3, #31
 800741e:	6879      	ldr	r1, [r7, #4]
 8007420:	fa01 f303 	lsl.w	r3, r1, r3
 8007424:	431a      	orrs	r2, r3
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	621a      	str	r2, [r3, #32]
}
 800742a:	bf00      	nop
 800742c:	371c      	adds	r7, #28
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
	...

08007438 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007448:	2b01      	cmp	r3, #1
 800744a:	d101      	bne.n	8007450 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800744c:	2302      	movs	r3, #2
 800744e:	e050      	b.n	80074f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2202      	movs	r2, #2
 800745c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007476:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	4313      	orrs	r3, r2
 8007480:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a1c      	ldr	r2, [pc, #112]	; (8007500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d018      	beq.n	80074c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800749c:	d013      	beq.n	80074c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a18      	ldr	r2, [pc, #96]	; (8007504 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d00e      	beq.n	80074c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a16      	ldr	r2, [pc, #88]	; (8007508 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d009      	beq.n	80074c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a15      	ldr	r2, [pc, #84]	; (800750c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d004      	beq.n	80074c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a13      	ldr	r2, [pc, #76]	; (8007510 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d10c      	bne.n	80074e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3714      	adds	r7, #20
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	40010000 	.word	0x40010000
 8007504:	40000400 	.word	0x40000400
 8007508:	40000800 	.word	0x40000800
 800750c:	40000c00 	.word	0x40000c00
 8007510:	40014000 	.word	0x40014000

08007514 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800751e:	2300      	movs	r3, #0
 8007520:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007528:	2b01      	cmp	r3, #1
 800752a:	d101      	bne.n	8007530 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800752c:	2302      	movs	r3, #2
 800752e:	e03d      	b.n	80075ac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	4313      	orrs	r3, r2
 8007544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	4313      	orrs	r3, r2
 8007552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	4313      	orrs	r3, r2
 8007560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4313      	orrs	r3, r2
 800756e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	4313      	orrs	r3, r2
 800757c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	695b      	ldr	r3, [r3, #20]
 8007588:	4313      	orrs	r3, r2
 800758a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	69db      	ldr	r3, [r3, #28]
 8007596:	4313      	orrs	r3, r2
 8007598:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d101      	bne.n	80075ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e03f      	b.n	800764a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d106      	bne.n	80075e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7fd f8cc 	bl	800477c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2224      	movs	r2, #36	; 0x24
 80075e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68da      	ldr	r2, [r3, #12]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 fddf 	bl	80081c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	691a      	ldr	r2, [r3, #16]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007610:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	695a      	ldr	r2, [r3, #20]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007620:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68da      	ldr	r2, [r3, #12]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007630:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2220      	movs	r2, #32
 800763c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2220      	movs	r2, #32
 8007644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b08a      	sub	sp, #40	; 0x28
 8007656:	af02      	add	r7, sp, #8
 8007658:	60f8      	str	r0, [r7, #12]
 800765a:	60b9      	str	r1, [r7, #8]
 800765c:	603b      	str	r3, [r7, #0]
 800765e:	4613      	mov	r3, r2
 8007660:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007662:	2300      	movs	r3, #0
 8007664:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b20      	cmp	r3, #32
 8007670:	d17c      	bne.n	800776c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d002      	beq.n	800767e <HAL_UART_Transmit+0x2c>
 8007678:	88fb      	ldrh	r3, [r7, #6]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e075      	b.n	800776e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007688:	2b01      	cmp	r3, #1
 800768a:	d101      	bne.n	8007690 <HAL_UART_Transmit+0x3e>
 800768c:	2302      	movs	r3, #2
 800768e:	e06e      	b.n	800776e <HAL_UART_Transmit+0x11c>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2221      	movs	r2, #33	; 0x21
 80076a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076a6:	f7fd fb03 	bl	8004cb0 <HAL_GetTick>
 80076aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	88fa      	ldrh	r2, [r7, #6]
 80076b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	88fa      	ldrh	r2, [r7, #6]
 80076b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076c0:	d108      	bne.n	80076d4 <HAL_UART_Transmit+0x82>
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d104      	bne.n	80076d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80076ca:	2300      	movs	r3, #0
 80076cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	61bb      	str	r3, [r7, #24]
 80076d2:	e003      	b.n	80076dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076d8:	2300      	movs	r3, #0
 80076da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80076e4:	e02a      	b.n	800773c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	2200      	movs	r2, #0
 80076ee:	2180      	movs	r1, #128	; 0x80
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f000 fb1f 	bl	8007d34 <UART_WaitOnFlagUntilTimeout>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e036      	b.n	800776e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10b      	bne.n	800771e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	881b      	ldrh	r3, [r3, #0]
 800770a:	461a      	mov	r2, r3
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007714:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	3302      	adds	r3, #2
 800771a:	61bb      	str	r3, [r7, #24]
 800771c:	e007      	b.n	800772e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	781a      	ldrb	r2, [r3, #0]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	3301      	adds	r3, #1
 800772c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007732:	b29b      	uxth	r3, r3
 8007734:	3b01      	subs	r3, #1
 8007736:	b29a      	uxth	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007740:	b29b      	uxth	r3, r3
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1cf      	bne.n	80076e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	2200      	movs	r2, #0
 800774e:	2140      	movs	r1, #64	; 0x40
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f000 faef 	bl	8007d34 <UART_WaitOnFlagUntilTimeout>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d001      	beq.n	8007760 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e006      	b.n	800776e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2220      	movs	r2, #32
 8007764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007768:	2300      	movs	r3, #0
 800776a:	e000      	b.n	800776e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800776c:	2302      	movs	r3, #2
  }
}
 800776e:	4618      	mov	r0, r3
 8007770:	3720      	adds	r7, #32
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b084      	sub	sp, #16
 800777a:	af00      	add	r7, sp, #0
 800777c:	60f8      	str	r0, [r7, #12]
 800777e:	60b9      	str	r1, [r7, #8]
 8007780:	4613      	mov	r3, r2
 8007782:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800778a:	b2db      	uxtb	r3, r3
 800778c:	2b20      	cmp	r3, #32
 800778e:	d11d      	bne.n	80077cc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d002      	beq.n	800779c <HAL_UART_Receive_IT+0x26>
 8007796:	88fb      	ldrh	r3, [r7, #6]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d101      	bne.n	80077a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e016      	b.n	80077ce <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d101      	bne.n	80077ae <HAL_UART_Receive_IT+0x38>
 80077aa:	2302      	movs	r3, #2
 80077ac:	e00f      	b.n	80077ce <HAL_UART_Receive_IT+0x58>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80077bc:	88fb      	ldrh	r3, [r7, #6]
 80077be:	461a      	mov	r2, r3
 80077c0:	68b9      	ldr	r1, [r7, #8]
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f000 fb24 	bl	8007e10 <UART_Start_Receive_IT>
 80077c8:	4603      	mov	r3, r0
 80077ca:	e000      	b.n	80077ce <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80077cc:	2302      	movs	r3, #2
  }
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
	...

080077d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b0ba      	sub	sp, #232	; 0xe8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80077fe:	2300      	movs	r3, #0
 8007800:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007804:	2300      	movs	r3, #0
 8007806:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800780a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800780e:	f003 030f 	and.w	r3, r3, #15
 8007812:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007816:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800781a:	2b00      	cmp	r3, #0
 800781c:	d10f      	bne.n	800783e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800781e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007822:	f003 0320 	and.w	r3, r3, #32
 8007826:	2b00      	cmp	r3, #0
 8007828:	d009      	beq.n	800783e <HAL_UART_IRQHandler+0x66>
 800782a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800782e:	f003 0320 	and.w	r3, r3, #32
 8007832:	2b00      	cmp	r3, #0
 8007834:	d003      	beq.n	800783e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fc07 	bl	800804a <UART_Receive_IT>
      return;
 800783c:	e256      	b.n	8007cec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800783e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007842:	2b00      	cmp	r3, #0
 8007844:	f000 80de 	beq.w	8007a04 <HAL_UART_IRQHandler+0x22c>
 8007848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d106      	bne.n	8007862 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007858:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 80d1 	beq.w	8007a04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007866:	f003 0301 	and.w	r3, r3, #1
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00b      	beq.n	8007886 <HAL_UART_IRQHandler+0xae>
 800786e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007876:	2b00      	cmp	r3, #0
 8007878:	d005      	beq.n	8007886 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787e:	f043 0201 	orr.w	r2, r3, #1
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800788a:	f003 0304 	and.w	r3, r3, #4
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00b      	beq.n	80078aa <HAL_UART_IRQHandler+0xd2>
 8007892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007896:	f003 0301 	and.w	r3, r3, #1
 800789a:	2b00      	cmp	r3, #0
 800789c:	d005      	beq.n	80078aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a2:	f043 0202 	orr.w	r2, r3, #2
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ae:	f003 0302 	and.w	r3, r3, #2
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00b      	beq.n	80078ce <HAL_UART_IRQHandler+0xf6>
 80078b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078ba:	f003 0301 	and.w	r3, r3, #1
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d005      	beq.n	80078ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c6:	f043 0204 	orr.w	r2, r3, #4
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80078ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078d2:	f003 0308 	and.w	r3, r3, #8
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d011      	beq.n	80078fe <HAL_UART_IRQHandler+0x126>
 80078da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078de:	f003 0320 	and.w	r3, r3, #32
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d105      	bne.n	80078f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80078e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d005      	beq.n	80078fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f6:	f043 0208 	orr.w	r2, r3, #8
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 81ed 	beq.w	8007ce2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800790c:	f003 0320 	and.w	r3, r3, #32
 8007910:	2b00      	cmp	r3, #0
 8007912:	d008      	beq.n	8007926 <HAL_UART_IRQHandler+0x14e>
 8007914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007918:	f003 0320 	and.w	r3, r3, #32
 800791c:	2b00      	cmp	r3, #0
 800791e:	d002      	beq.n	8007926 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fb92 	bl	800804a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007930:	2b40      	cmp	r3, #64	; 0x40
 8007932:	bf0c      	ite	eq
 8007934:	2301      	moveq	r3, #1
 8007936:	2300      	movne	r3, #0
 8007938:	b2db      	uxtb	r3, r3
 800793a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007942:	f003 0308 	and.w	r3, r3, #8
 8007946:	2b00      	cmp	r3, #0
 8007948:	d103      	bne.n	8007952 <HAL_UART_IRQHandler+0x17a>
 800794a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800794e:	2b00      	cmp	r3, #0
 8007950:	d04f      	beq.n	80079f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fa9a 	bl	8007e8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	695b      	ldr	r3, [r3, #20]
 800795e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007962:	2b40      	cmp	r3, #64	; 0x40
 8007964:	d141      	bne.n	80079ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	3314      	adds	r3, #20
 800796c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007970:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007974:	e853 3f00 	ldrex	r3, [r3]
 8007978:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800797c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007984:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	3314      	adds	r3, #20
 800798e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007992:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007996:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800799e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80079a2:	e841 2300 	strex	r3, r2, [r1]
 80079a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80079aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1d9      	bne.n	8007966 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d013      	beq.n	80079e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079be:	4a7d      	ldr	r2, [pc, #500]	; (8007bb4 <HAL_UART_IRQHandler+0x3dc>)
 80079c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7fd fb23 	bl	8005012 <HAL_DMA_Abort_IT>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d016      	beq.n	8007a00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80079dc:	4610      	mov	r0, r2
 80079de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e0:	e00e      	b.n	8007a00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f990 	bl	8007d08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e8:	e00a      	b.n	8007a00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f98c 	bl	8007d08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f0:	e006      	b.n	8007a00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f988 	bl	8007d08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80079fe:	e170      	b.n	8007ce2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a00:	bf00      	nop
    return;
 8007a02:	e16e      	b.n	8007ce2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	f040 814a 	bne.w	8007ca2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a12:	f003 0310 	and.w	r3, r3, #16
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f000 8143 	beq.w	8007ca2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a20:	f003 0310 	and.w	r3, r3, #16
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 813c 	beq.w	8007ca2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	60bb      	str	r3, [r7, #8]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	60bb      	str	r3, [r7, #8]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	60bb      	str	r3, [r7, #8]
 8007a3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a4a:	2b40      	cmp	r3, #64	; 0x40
 8007a4c:	f040 80b4 	bne.w	8007bb8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f000 8140 	beq.w	8007ce6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	f080 8139 	bcs.w	8007ce6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a7a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a80:	69db      	ldr	r3, [r3, #28]
 8007a82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a86:	f000 8088 	beq.w	8007b9a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	330c      	adds	r3, #12
 8007a90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a98:	e853 3f00 	ldrex	r3, [r3]
 8007a9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007aa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007aa8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	330c      	adds	r3, #12
 8007ab2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007ab6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007aba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007ac2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007ac6:	e841 2300 	strex	r3, r2, [r1]
 8007aca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1d9      	bne.n	8007a8a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	3314      	adds	r3, #20
 8007adc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ae0:	e853 3f00 	ldrex	r3, [r3]
 8007ae4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007ae6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ae8:	f023 0301 	bic.w	r3, r3, #1
 8007aec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3314      	adds	r3, #20
 8007af6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007afa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007afe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b06:	e841 2300 	strex	r3, r2, [r1]
 8007b0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1e1      	bne.n	8007ad6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	3314      	adds	r3, #20
 8007b18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b1c:	e853 3f00 	ldrex	r3, [r3]
 8007b20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	3314      	adds	r3, #20
 8007b32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b3e:	e841 2300 	strex	r3, r2, [r1]
 8007b42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1e3      	bne.n	8007b12 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2220      	movs	r2, #32
 8007b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	330c      	adds	r3, #12
 8007b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b62:	e853 3f00 	ldrex	r3, [r3]
 8007b66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b6a:	f023 0310 	bic.w	r3, r3, #16
 8007b6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	330c      	adds	r3, #12
 8007b78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007b7c:	65ba      	str	r2, [r7, #88]	; 0x58
 8007b7e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b84:	e841 2300 	strex	r3, r2, [r1]
 8007b88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1e3      	bne.n	8007b58 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7fd f9cc 	bl	8004f32 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	4619      	mov	r1, r3
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f8b6 	bl	8007d1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007bb0:	e099      	b.n	8007ce6 <HAL_UART_IRQHandler+0x50e>
 8007bb2:	bf00      	nop
 8007bb4:	08007f53 	.word	0x08007f53
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f000 808b 	beq.w	8007cea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007bd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f000 8086 	beq.w	8007cea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	330c      	adds	r3, #12
 8007be4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be8:	e853 3f00 	ldrex	r3, [r3]
 8007bec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bf4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	330c      	adds	r3, #12
 8007bfe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007c02:	647a      	str	r2, [r7, #68]	; 0x44
 8007c04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c0a:	e841 2300 	strex	r3, r2, [r1]
 8007c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1e3      	bne.n	8007bde <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3314      	adds	r3, #20
 8007c1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c20:	e853 3f00 	ldrex	r3, [r3]
 8007c24:	623b      	str	r3, [r7, #32]
   return(result);
 8007c26:	6a3b      	ldr	r3, [r7, #32]
 8007c28:	f023 0301 	bic.w	r3, r3, #1
 8007c2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	3314      	adds	r3, #20
 8007c36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c3a:	633a      	str	r2, [r7, #48]	; 0x30
 8007c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c42:	e841 2300 	strex	r3, r2, [r1]
 8007c46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1e3      	bne.n	8007c16 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2220      	movs	r2, #32
 8007c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	330c      	adds	r3, #12
 8007c62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	e853 3f00 	ldrex	r3, [r3]
 8007c6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f023 0310 	bic.w	r3, r3, #16
 8007c72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	330c      	adds	r3, #12
 8007c7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007c80:	61fa      	str	r2, [r7, #28]
 8007c82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c84:	69b9      	ldr	r1, [r7, #24]
 8007c86:	69fa      	ldr	r2, [r7, #28]
 8007c88:	e841 2300 	strex	r3, r2, [r1]
 8007c8c:	617b      	str	r3, [r7, #20]
   return(result);
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d1e3      	bne.n	8007c5c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c98:	4619      	mov	r1, r3
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f83e 	bl	8007d1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ca0:	e023      	b.n	8007cea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d009      	beq.n	8007cc2 <HAL_UART_IRQHandler+0x4ea>
 8007cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d003      	beq.n	8007cc2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f95d 	bl	8007f7a <UART_Transmit_IT>
    return;
 8007cc0:	e014      	b.n	8007cec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00e      	beq.n	8007cec <HAL_UART_IRQHandler+0x514>
 8007cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d008      	beq.n	8007cec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f99d 	bl	800801a <UART_EndTransmit_IT>
    return;
 8007ce0:	e004      	b.n	8007cec <HAL_UART_IRQHandler+0x514>
    return;
 8007ce2:	bf00      	nop
 8007ce4:	e002      	b.n	8007cec <HAL_UART_IRQHandler+0x514>
      return;
 8007ce6:	bf00      	nop
 8007ce8:	e000      	b.n	8007cec <HAL_UART_IRQHandler+0x514>
      return;
 8007cea:	bf00      	nop
  }
}
 8007cec:	37e8      	adds	r7, #232	; 0xe8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop

08007cf4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007cfc:	bf00      	nop
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	460b      	mov	r3, r1
 8007d26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d28:	bf00      	nop
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b090      	sub	sp, #64	; 0x40
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	603b      	str	r3, [r7, #0]
 8007d40:	4613      	mov	r3, r2
 8007d42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d44:	e050      	b.n	8007de8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d4c:	d04c      	beq.n	8007de8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d007      	beq.n	8007d64 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d54:	f7fc ffac 	bl	8004cb0 <HAL_GetTick>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d241      	bcs.n	8007de8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	330c      	adds	r3, #12
 8007d6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6e:	e853 3f00 	ldrex	r3, [r3]
 8007d72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	330c      	adds	r3, #12
 8007d82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d84:	637a      	str	r2, [r7, #52]	; 0x34
 8007d86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d8c:	e841 2300 	strex	r3, r2, [r1]
 8007d90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1e5      	bne.n	8007d64 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	3314      	adds	r3, #20
 8007d9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	e853 3f00 	ldrex	r3, [r3]
 8007da6:	613b      	str	r3, [r7, #16]
   return(result);
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	f023 0301 	bic.w	r3, r3, #1
 8007dae:	63bb      	str	r3, [r7, #56]	; 0x38
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	3314      	adds	r3, #20
 8007db6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007db8:	623a      	str	r2, [r7, #32]
 8007dba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbc:	69f9      	ldr	r1, [r7, #28]
 8007dbe:	6a3a      	ldr	r2, [r7, #32]
 8007dc0:	e841 2300 	strex	r3, r2, [r1]
 8007dc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1e5      	bne.n	8007d98 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2220      	movs	r2, #32
 8007dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2220      	movs	r2, #32
 8007dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e00f      	b.n	8007e08 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	4013      	ands	r3, r2
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	bf0c      	ite	eq
 8007df8:	2301      	moveq	r3, #1
 8007dfa:	2300      	movne	r3, #0
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	461a      	mov	r2, r3
 8007e00:	79fb      	ldrb	r3, [r7, #7]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d09f      	beq.n	8007d46 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3740      	adds	r7, #64	; 0x40
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b085      	sub	sp, #20
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	88fa      	ldrh	r2, [r7, #6]
 8007e28:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	88fa      	ldrh	r2, [r7, #6]
 8007e2e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2222      	movs	r2, #34	; 0x22
 8007e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d007      	beq.n	8007e5e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68da      	ldr	r2, [r3, #12]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e5c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	695a      	ldr	r2, [r3, #20]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f042 0201 	orr.w	r2, r2, #1
 8007e6c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68da      	ldr	r2, [r3, #12]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f042 0220 	orr.w	r2, r2, #32
 8007e7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3714      	adds	r7, #20
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b095      	sub	sp, #84	; 0x54
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	330c      	adds	r3, #12
 8007e9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e9e:	e853 3f00 	ldrex	r3, [r3]
 8007ea2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	330c      	adds	r3, #12
 8007eb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007eb4:	643a      	str	r2, [r7, #64]	; 0x40
 8007eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007eba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ebc:	e841 2300 	strex	r3, r2, [r1]
 8007ec0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1e5      	bne.n	8007e94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	3314      	adds	r3, #20
 8007ece:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed0:	6a3b      	ldr	r3, [r7, #32]
 8007ed2:	e853 3f00 	ldrex	r3, [r3]
 8007ed6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	f023 0301 	bic.w	r3, r3, #1
 8007ede:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	3314      	adds	r3, #20
 8007ee6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ee8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007eea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007eee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ef0:	e841 2300 	strex	r3, r2, [r1]
 8007ef4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1e5      	bne.n	8007ec8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d119      	bne.n	8007f38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	330c      	adds	r3, #12
 8007f0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	e853 3f00 	ldrex	r3, [r3]
 8007f12:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	f023 0310 	bic.w	r3, r3, #16
 8007f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	330c      	adds	r3, #12
 8007f22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f24:	61ba      	str	r2, [r7, #24]
 8007f26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f28:	6979      	ldr	r1, [r7, #20]
 8007f2a:	69ba      	ldr	r2, [r7, #24]
 8007f2c:	e841 2300 	strex	r3, r2, [r1]
 8007f30:	613b      	str	r3, [r7, #16]
   return(result);
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1e5      	bne.n	8007f04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2220      	movs	r2, #32
 8007f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007f46:	bf00      	nop
 8007f48:	3754      	adds	r7, #84	; 0x54
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr

08007f52 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b084      	sub	sp, #16
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f7ff fecb 	bl	8007d08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f72:	bf00      	nop
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b085      	sub	sp, #20
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b21      	cmp	r3, #33	; 0x21
 8007f8c:	d13e      	bne.n	800800c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f96:	d114      	bne.n	8007fc2 <UART_Transmit_IT+0x48>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d110      	bne.n	8007fc2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a1b      	ldr	r3, [r3, #32]
 8007fa4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	881b      	ldrh	r3, [r3, #0]
 8007faa:	461a      	mov	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fb4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a1b      	ldr	r3, [r3, #32]
 8007fba:	1c9a      	adds	r2, r3, #2
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	621a      	str	r2, [r3, #32]
 8007fc0:	e008      	b.n	8007fd4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	1c59      	adds	r1, r3, #1
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	6211      	str	r1, [r2, #32]
 8007fcc:	781a      	ldrb	r2, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10f      	bne.n	8008008 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68da      	ldr	r2, [r3, #12]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ff6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68da      	ldr	r2, [r3, #12]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008006:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	e000      	b.n	800800e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800800c:	2302      	movs	r3, #2
  }
}
 800800e:	4618      	mov	r0, r3
 8008010:	3714      	adds	r7, #20
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr

0800801a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b082      	sub	sp, #8
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68da      	ldr	r2, [r3, #12]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008030:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2220      	movs	r2, #32
 8008036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7ff fe5a 	bl	8007cf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b08c      	sub	sp, #48	; 0x30
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008058:	b2db      	uxtb	r3, r3
 800805a:	2b22      	cmp	r3, #34	; 0x22
 800805c:	f040 80ab 	bne.w	80081b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008068:	d117      	bne.n	800809a <UART_Receive_IT+0x50>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d113      	bne.n	800809a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008072:	2300      	movs	r3, #0
 8008074:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800807a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	b29b      	uxth	r3, r3
 8008084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008088:	b29a      	uxth	r2, r3
 800808a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008092:	1c9a      	adds	r2, r3, #2
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	629a      	str	r2, [r3, #40]	; 0x28
 8008098:	e026      	b.n	80080e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80080a0:	2300      	movs	r3, #0
 80080a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ac:	d007      	beq.n	80080be <UART_Receive_IT+0x74>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10a      	bne.n	80080cc <UART_Receive_IT+0x82>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d106      	bne.n	80080cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	b2da      	uxtb	r2, r3
 80080c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c8:	701a      	strb	r2, [r3, #0]
 80080ca:	e008      	b.n	80080de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080d8:	b2da      	uxtb	r2, r3
 80080da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e2:	1c5a      	adds	r2, r3, #1
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	3b01      	subs	r3, #1
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	4619      	mov	r1, r3
 80080f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d15a      	bne.n	80081b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68da      	ldr	r2, [r3, #12]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f022 0220 	bic.w	r2, r2, #32
 800810a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68da      	ldr	r2, [r3, #12]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800811a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	695a      	ldr	r2, [r3, #20]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f022 0201 	bic.w	r2, r2, #1
 800812a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2220      	movs	r2, #32
 8008130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008138:	2b01      	cmp	r3, #1
 800813a:	d135      	bne.n	80081a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	330c      	adds	r3, #12
 8008148:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	e853 3f00 	ldrex	r3, [r3]
 8008150:	613b      	str	r3, [r7, #16]
   return(result);
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	f023 0310 	bic.w	r3, r3, #16
 8008158:	627b      	str	r3, [r7, #36]	; 0x24
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	330c      	adds	r3, #12
 8008160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008162:	623a      	str	r2, [r7, #32]
 8008164:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008166:	69f9      	ldr	r1, [r7, #28]
 8008168:	6a3a      	ldr	r2, [r7, #32]
 800816a:	e841 2300 	strex	r3, r2, [r1]
 800816e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1e5      	bne.n	8008142 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 0310 	and.w	r3, r3, #16
 8008180:	2b10      	cmp	r3, #16
 8008182:	d10a      	bne.n	800819a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008184:	2300      	movs	r3, #0
 8008186:	60fb      	str	r3, [r7, #12]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	60fb      	str	r3, [r7, #12]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	60fb      	str	r3, [r7, #12]
 8008198:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800819e:	4619      	mov	r1, r3
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7ff fdbb 	bl	8007d1c <HAL_UARTEx_RxEventCallback>
 80081a6:	e002      	b.n	80081ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7fc f973 	bl	8004494 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	e002      	b.n	80081b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80081b2:	2300      	movs	r3, #0
 80081b4:	e000      	b.n	80081b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80081b6:	2302      	movs	r3, #2
  }
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3730      	adds	r7, #48	; 0x30
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081c4:	b0c0      	sub	sp, #256	; 0x100
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80081d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081dc:	68d9      	ldr	r1, [r3, #12]
 80081de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	ea40 0301 	orr.w	r3, r0, r1
 80081e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80081ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081ee:	689a      	ldr	r2, [r3, #8]
 80081f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	431a      	orrs	r2, r3
 80081f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081fc:	695b      	ldr	r3, [r3, #20]
 80081fe:	431a      	orrs	r2, r3
 8008200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008204:	69db      	ldr	r3, [r3, #28]
 8008206:	4313      	orrs	r3, r2
 8008208:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800820c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008218:	f021 010c 	bic.w	r1, r1, #12
 800821c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008226:	430b      	orrs	r3, r1
 8008228:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800822a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800823a:	6999      	ldr	r1, [r3, #24]
 800823c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	ea40 0301 	orr.w	r3, r0, r1
 8008246:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	4b8f      	ldr	r3, [pc, #572]	; (800848c <UART_SetConfig+0x2cc>)
 8008250:	429a      	cmp	r2, r3
 8008252:	d005      	beq.n	8008260 <UART_SetConfig+0xa0>
 8008254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	4b8d      	ldr	r3, [pc, #564]	; (8008490 <UART_SetConfig+0x2d0>)
 800825c:	429a      	cmp	r2, r3
 800825e:	d104      	bne.n	800826a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008260:	f7fd fd1c 	bl	8005c9c <HAL_RCC_GetPCLK2Freq>
 8008264:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008268:	e003      	b.n	8008272 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800826a:	f7fd fd03 	bl	8005c74 <HAL_RCC_GetPCLK1Freq>
 800826e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008276:	69db      	ldr	r3, [r3, #28]
 8008278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800827c:	f040 810c 	bne.w	8008498 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008284:	2200      	movs	r2, #0
 8008286:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800828a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800828e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008292:	4622      	mov	r2, r4
 8008294:	462b      	mov	r3, r5
 8008296:	1891      	adds	r1, r2, r2
 8008298:	65b9      	str	r1, [r7, #88]	; 0x58
 800829a:	415b      	adcs	r3, r3
 800829c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800829e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80082a2:	4621      	mov	r1, r4
 80082a4:	eb12 0801 	adds.w	r8, r2, r1
 80082a8:	4629      	mov	r1, r5
 80082aa:	eb43 0901 	adc.w	r9, r3, r1
 80082ae:	f04f 0200 	mov.w	r2, #0
 80082b2:	f04f 0300 	mov.w	r3, #0
 80082b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082c2:	4690      	mov	r8, r2
 80082c4:	4699      	mov	r9, r3
 80082c6:	4623      	mov	r3, r4
 80082c8:	eb18 0303 	adds.w	r3, r8, r3
 80082cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80082d0:	462b      	mov	r3, r5
 80082d2:	eb49 0303 	adc.w	r3, r9, r3
 80082d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80082da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80082e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80082ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80082ee:	460b      	mov	r3, r1
 80082f0:	18db      	adds	r3, r3, r3
 80082f2:	653b      	str	r3, [r7, #80]	; 0x50
 80082f4:	4613      	mov	r3, r2
 80082f6:	eb42 0303 	adc.w	r3, r2, r3
 80082fa:	657b      	str	r3, [r7, #84]	; 0x54
 80082fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008300:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008304:	f7f8 fcc8 	bl	8000c98 <__aeabi_uldivmod>
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	4b61      	ldr	r3, [pc, #388]	; (8008494 <UART_SetConfig+0x2d4>)
 800830e:	fba3 2302 	umull	r2, r3, r3, r2
 8008312:	095b      	lsrs	r3, r3, #5
 8008314:	011c      	lsls	r4, r3, #4
 8008316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800831a:	2200      	movs	r2, #0
 800831c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008320:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008324:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008328:	4642      	mov	r2, r8
 800832a:	464b      	mov	r3, r9
 800832c:	1891      	adds	r1, r2, r2
 800832e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008330:	415b      	adcs	r3, r3
 8008332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008334:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008338:	4641      	mov	r1, r8
 800833a:	eb12 0a01 	adds.w	sl, r2, r1
 800833e:	4649      	mov	r1, r9
 8008340:	eb43 0b01 	adc.w	fp, r3, r1
 8008344:	f04f 0200 	mov.w	r2, #0
 8008348:	f04f 0300 	mov.w	r3, #0
 800834c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008350:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008354:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008358:	4692      	mov	sl, r2
 800835a:	469b      	mov	fp, r3
 800835c:	4643      	mov	r3, r8
 800835e:	eb1a 0303 	adds.w	r3, sl, r3
 8008362:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008366:	464b      	mov	r3, r9
 8008368:	eb4b 0303 	adc.w	r3, fp, r3
 800836c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800837c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008380:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008384:	460b      	mov	r3, r1
 8008386:	18db      	adds	r3, r3, r3
 8008388:	643b      	str	r3, [r7, #64]	; 0x40
 800838a:	4613      	mov	r3, r2
 800838c:	eb42 0303 	adc.w	r3, r2, r3
 8008390:	647b      	str	r3, [r7, #68]	; 0x44
 8008392:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008396:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800839a:	f7f8 fc7d 	bl	8000c98 <__aeabi_uldivmod>
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	4611      	mov	r1, r2
 80083a4:	4b3b      	ldr	r3, [pc, #236]	; (8008494 <UART_SetConfig+0x2d4>)
 80083a6:	fba3 2301 	umull	r2, r3, r3, r1
 80083aa:	095b      	lsrs	r3, r3, #5
 80083ac:	2264      	movs	r2, #100	; 0x64
 80083ae:	fb02 f303 	mul.w	r3, r2, r3
 80083b2:	1acb      	subs	r3, r1, r3
 80083b4:	00db      	lsls	r3, r3, #3
 80083b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80083ba:	4b36      	ldr	r3, [pc, #216]	; (8008494 <UART_SetConfig+0x2d4>)
 80083bc:	fba3 2302 	umull	r2, r3, r3, r2
 80083c0:	095b      	lsrs	r3, r3, #5
 80083c2:	005b      	lsls	r3, r3, #1
 80083c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80083c8:	441c      	add	r4, r3
 80083ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083ce:	2200      	movs	r2, #0
 80083d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80083d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80083dc:	4642      	mov	r2, r8
 80083de:	464b      	mov	r3, r9
 80083e0:	1891      	adds	r1, r2, r2
 80083e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80083e4:	415b      	adcs	r3, r3
 80083e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80083ec:	4641      	mov	r1, r8
 80083ee:	1851      	adds	r1, r2, r1
 80083f0:	6339      	str	r1, [r7, #48]	; 0x30
 80083f2:	4649      	mov	r1, r9
 80083f4:	414b      	adcs	r3, r1
 80083f6:	637b      	str	r3, [r7, #52]	; 0x34
 80083f8:	f04f 0200 	mov.w	r2, #0
 80083fc:	f04f 0300 	mov.w	r3, #0
 8008400:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008404:	4659      	mov	r1, fp
 8008406:	00cb      	lsls	r3, r1, #3
 8008408:	4651      	mov	r1, sl
 800840a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800840e:	4651      	mov	r1, sl
 8008410:	00ca      	lsls	r2, r1, #3
 8008412:	4610      	mov	r0, r2
 8008414:	4619      	mov	r1, r3
 8008416:	4603      	mov	r3, r0
 8008418:	4642      	mov	r2, r8
 800841a:	189b      	adds	r3, r3, r2
 800841c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008420:	464b      	mov	r3, r9
 8008422:	460a      	mov	r2, r1
 8008424:	eb42 0303 	adc.w	r3, r2, r3
 8008428:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800842c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008438:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800843c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008440:	460b      	mov	r3, r1
 8008442:	18db      	adds	r3, r3, r3
 8008444:	62bb      	str	r3, [r7, #40]	; 0x28
 8008446:	4613      	mov	r3, r2
 8008448:	eb42 0303 	adc.w	r3, r2, r3
 800844c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800844e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008452:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008456:	f7f8 fc1f 	bl	8000c98 <__aeabi_uldivmod>
 800845a:	4602      	mov	r2, r0
 800845c:	460b      	mov	r3, r1
 800845e:	4b0d      	ldr	r3, [pc, #52]	; (8008494 <UART_SetConfig+0x2d4>)
 8008460:	fba3 1302 	umull	r1, r3, r3, r2
 8008464:	095b      	lsrs	r3, r3, #5
 8008466:	2164      	movs	r1, #100	; 0x64
 8008468:	fb01 f303 	mul.w	r3, r1, r3
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	00db      	lsls	r3, r3, #3
 8008470:	3332      	adds	r3, #50	; 0x32
 8008472:	4a08      	ldr	r2, [pc, #32]	; (8008494 <UART_SetConfig+0x2d4>)
 8008474:	fba2 2303 	umull	r2, r3, r2, r3
 8008478:	095b      	lsrs	r3, r3, #5
 800847a:	f003 0207 	and.w	r2, r3, #7
 800847e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4422      	add	r2, r4
 8008486:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008488:	e106      	b.n	8008698 <UART_SetConfig+0x4d8>
 800848a:	bf00      	nop
 800848c:	40011000 	.word	0x40011000
 8008490:	40011400 	.word	0x40011400
 8008494:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800849c:	2200      	movs	r2, #0
 800849e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80084a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80084a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80084aa:	4642      	mov	r2, r8
 80084ac:	464b      	mov	r3, r9
 80084ae:	1891      	adds	r1, r2, r2
 80084b0:	6239      	str	r1, [r7, #32]
 80084b2:	415b      	adcs	r3, r3
 80084b4:	627b      	str	r3, [r7, #36]	; 0x24
 80084b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084ba:	4641      	mov	r1, r8
 80084bc:	1854      	adds	r4, r2, r1
 80084be:	4649      	mov	r1, r9
 80084c0:	eb43 0501 	adc.w	r5, r3, r1
 80084c4:	f04f 0200 	mov.w	r2, #0
 80084c8:	f04f 0300 	mov.w	r3, #0
 80084cc:	00eb      	lsls	r3, r5, #3
 80084ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084d2:	00e2      	lsls	r2, r4, #3
 80084d4:	4614      	mov	r4, r2
 80084d6:	461d      	mov	r5, r3
 80084d8:	4643      	mov	r3, r8
 80084da:	18e3      	adds	r3, r4, r3
 80084dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80084e0:	464b      	mov	r3, r9
 80084e2:	eb45 0303 	adc.w	r3, r5, r3
 80084e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80084ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80084f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80084fa:	f04f 0200 	mov.w	r2, #0
 80084fe:	f04f 0300 	mov.w	r3, #0
 8008502:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008506:	4629      	mov	r1, r5
 8008508:	008b      	lsls	r3, r1, #2
 800850a:	4621      	mov	r1, r4
 800850c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008510:	4621      	mov	r1, r4
 8008512:	008a      	lsls	r2, r1, #2
 8008514:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008518:	f7f8 fbbe 	bl	8000c98 <__aeabi_uldivmod>
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	4b60      	ldr	r3, [pc, #384]	; (80086a4 <UART_SetConfig+0x4e4>)
 8008522:	fba3 2302 	umull	r2, r3, r3, r2
 8008526:	095b      	lsrs	r3, r3, #5
 8008528:	011c      	lsls	r4, r3, #4
 800852a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800852e:	2200      	movs	r2, #0
 8008530:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008534:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008538:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800853c:	4642      	mov	r2, r8
 800853e:	464b      	mov	r3, r9
 8008540:	1891      	adds	r1, r2, r2
 8008542:	61b9      	str	r1, [r7, #24]
 8008544:	415b      	adcs	r3, r3
 8008546:	61fb      	str	r3, [r7, #28]
 8008548:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800854c:	4641      	mov	r1, r8
 800854e:	1851      	adds	r1, r2, r1
 8008550:	6139      	str	r1, [r7, #16]
 8008552:	4649      	mov	r1, r9
 8008554:	414b      	adcs	r3, r1
 8008556:	617b      	str	r3, [r7, #20]
 8008558:	f04f 0200 	mov.w	r2, #0
 800855c:	f04f 0300 	mov.w	r3, #0
 8008560:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008564:	4659      	mov	r1, fp
 8008566:	00cb      	lsls	r3, r1, #3
 8008568:	4651      	mov	r1, sl
 800856a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800856e:	4651      	mov	r1, sl
 8008570:	00ca      	lsls	r2, r1, #3
 8008572:	4610      	mov	r0, r2
 8008574:	4619      	mov	r1, r3
 8008576:	4603      	mov	r3, r0
 8008578:	4642      	mov	r2, r8
 800857a:	189b      	adds	r3, r3, r2
 800857c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008580:	464b      	mov	r3, r9
 8008582:	460a      	mov	r2, r1
 8008584:	eb42 0303 	adc.w	r3, r2, r3
 8008588:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800858c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	67bb      	str	r3, [r7, #120]	; 0x78
 8008596:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008598:	f04f 0200 	mov.w	r2, #0
 800859c:	f04f 0300 	mov.w	r3, #0
 80085a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80085a4:	4649      	mov	r1, r9
 80085a6:	008b      	lsls	r3, r1, #2
 80085a8:	4641      	mov	r1, r8
 80085aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085ae:	4641      	mov	r1, r8
 80085b0:	008a      	lsls	r2, r1, #2
 80085b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80085b6:	f7f8 fb6f 	bl	8000c98 <__aeabi_uldivmod>
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	4611      	mov	r1, r2
 80085c0:	4b38      	ldr	r3, [pc, #224]	; (80086a4 <UART_SetConfig+0x4e4>)
 80085c2:	fba3 2301 	umull	r2, r3, r3, r1
 80085c6:	095b      	lsrs	r3, r3, #5
 80085c8:	2264      	movs	r2, #100	; 0x64
 80085ca:	fb02 f303 	mul.w	r3, r2, r3
 80085ce:	1acb      	subs	r3, r1, r3
 80085d0:	011b      	lsls	r3, r3, #4
 80085d2:	3332      	adds	r3, #50	; 0x32
 80085d4:	4a33      	ldr	r2, [pc, #204]	; (80086a4 <UART_SetConfig+0x4e4>)
 80085d6:	fba2 2303 	umull	r2, r3, r2, r3
 80085da:	095b      	lsrs	r3, r3, #5
 80085dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085e0:	441c      	add	r4, r3
 80085e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085e6:	2200      	movs	r2, #0
 80085e8:	673b      	str	r3, [r7, #112]	; 0x70
 80085ea:	677a      	str	r2, [r7, #116]	; 0x74
 80085ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80085f0:	4642      	mov	r2, r8
 80085f2:	464b      	mov	r3, r9
 80085f4:	1891      	adds	r1, r2, r2
 80085f6:	60b9      	str	r1, [r7, #8]
 80085f8:	415b      	adcs	r3, r3
 80085fa:	60fb      	str	r3, [r7, #12]
 80085fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008600:	4641      	mov	r1, r8
 8008602:	1851      	adds	r1, r2, r1
 8008604:	6039      	str	r1, [r7, #0]
 8008606:	4649      	mov	r1, r9
 8008608:	414b      	adcs	r3, r1
 800860a:	607b      	str	r3, [r7, #4]
 800860c:	f04f 0200 	mov.w	r2, #0
 8008610:	f04f 0300 	mov.w	r3, #0
 8008614:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008618:	4659      	mov	r1, fp
 800861a:	00cb      	lsls	r3, r1, #3
 800861c:	4651      	mov	r1, sl
 800861e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008622:	4651      	mov	r1, sl
 8008624:	00ca      	lsls	r2, r1, #3
 8008626:	4610      	mov	r0, r2
 8008628:	4619      	mov	r1, r3
 800862a:	4603      	mov	r3, r0
 800862c:	4642      	mov	r2, r8
 800862e:	189b      	adds	r3, r3, r2
 8008630:	66bb      	str	r3, [r7, #104]	; 0x68
 8008632:	464b      	mov	r3, r9
 8008634:	460a      	mov	r2, r1
 8008636:	eb42 0303 	adc.w	r3, r2, r3
 800863a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800863c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	663b      	str	r3, [r7, #96]	; 0x60
 8008646:	667a      	str	r2, [r7, #100]	; 0x64
 8008648:	f04f 0200 	mov.w	r2, #0
 800864c:	f04f 0300 	mov.w	r3, #0
 8008650:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008654:	4649      	mov	r1, r9
 8008656:	008b      	lsls	r3, r1, #2
 8008658:	4641      	mov	r1, r8
 800865a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800865e:	4641      	mov	r1, r8
 8008660:	008a      	lsls	r2, r1, #2
 8008662:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008666:	f7f8 fb17 	bl	8000c98 <__aeabi_uldivmod>
 800866a:	4602      	mov	r2, r0
 800866c:	460b      	mov	r3, r1
 800866e:	4b0d      	ldr	r3, [pc, #52]	; (80086a4 <UART_SetConfig+0x4e4>)
 8008670:	fba3 1302 	umull	r1, r3, r3, r2
 8008674:	095b      	lsrs	r3, r3, #5
 8008676:	2164      	movs	r1, #100	; 0x64
 8008678:	fb01 f303 	mul.w	r3, r1, r3
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	011b      	lsls	r3, r3, #4
 8008680:	3332      	adds	r3, #50	; 0x32
 8008682:	4a08      	ldr	r2, [pc, #32]	; (80086a4 <UART_SetConfig+0x4e4>)
 8008684:	fba2 2303 	umull	r2, r3, r2, r3
 8008688:	095b      	lsrs	r3, r3, #5
 800868a:	f003 020f 	and.w	r2, r3, #15
 800868e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4422      	add	r2, r4
 8008696:	609a      	str	r2, [r3, #8]
}
 8008698:	bf00      	nop
 800869a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800869e:	46bd      	mov	sp, r7
 80086a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086a4:	51eb851f 	.word	0x51eb851f

080086a8 <atoi>:
 80086a8:	220a      	movs	r2, #10
 80086aa:	2100      	movs	r1, #0
 80086ac:	f000 befc 	b.w	80094a8 <strtol>

080086b0 <sulp>:
 80086b0:	b570      	push	{r4, r5, r6, lr}
 80086b2:	4604      	mov	r4, r0
 80086b4:	460d      	mov	r5, r1
 80086b6:	ec45 4b10 	vmov	d0, r4, r5
 80086ba:	4616      	mov	r6, r2
 80086bc:	f003 fdb8 	bl	800c230 <__ulp>
 80086c0:	ec51 0b10 	vmov	r0, r1, d0
 80086c4:	b17e      	cbz	r6, 80086e6 <sulp+0x36>
 80086c6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80086ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	dd09      	ble.n	80086e6 <sulp+0x36>
 80086d2:	051b      	lsls	r3, r3, #20
 80086d4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80086d8:	2400      	movs	r4, #0
 80086da:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80086de:	4622      	mov	r2, r4
 80086e0:	462b      	mov	r3, r5
 80086e2:	f7f7 ff91 	bl	8000608 <__aeabi_dmul>
 80086e6:	bd70      	pop	{r4, r5, r6, pc}

080086e8 <_strtod_l>:
 80086e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ec:	ed2d 8b02 	vpush	{d8}
 80086f0:	b09b      	sub	sp, #108	; 0x6c
 80086f2:	4604      	mov	r4, r0
 80086f4:	9213      	str	r2, [sp, #76]	; 0x4c
 80086f6:	2200      	movs	r2, #0
 80086f8:	9216      	str	r2, [sp, #88]	; 0x58
 80086fa:	460d      	mov	r5, r1
 80086fc:	f04f 0800 	mov.w	r8, #0
 8008700:	f04f 0900 	mov.w	r9, #0
 8008704:	460a      	mov	r2, r1
 8008706:	9215      	str	r2, [sp, #84]	; 0x54
 8008708:	7811      	ldrb	r1, [r2, #0]
 800870a:	292b      	cmp	r1, #43	; 0x2b
 800870c:	d04c      	beq.n	80087a8 <_strtod_l+0xc0>
 800870e:	d83a      	bhi.n	8008786 <_strtod_l+0x9e>
 8008710:	290d      	cmp	r1, #13
 8008712:	d834      	bhi.n	800877e <_strtod_l+0x96>
 8008714:	2908      	cmp	r1, #8
 8008716:	d834      	bhi.n	8008782 <_strtod_l+0x9a>
 8008718:	2900      	cmp	r1, #0
 800871a:	d03d      	beq.n	8008798 <_strtod_l+0xb0>
 800871c:	2200      	movs	r2, #0
 800871e:	920a      	str	r2, [sp, #40]	; 0x28
 8008720:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008722:	7832      	ldrb	r2, [r6, #0]
 8008724:	2a30      	cmp	r2, #48	; 0x30
 8008726:	f040 80b4 	bne.w	8008892 <_strtod_l+0x1aa>
 800872a:	7872      	ldrb	r2, [r6, #1]
 800872c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008730:	2a58      	cmp	r2, #88	; 0x58
 8008732:	d170      	bne.n	8008816 <_strtod_l+0x12e>
 8008734:	9302      	str	r3, [sp, #8]
 8008736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008738:	9301      	str	r3, [sp, #4]
 800873a:	ab16      	add	r3, sp, #88	; 0x58
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	4a8e      	ldr	r2, [pc, #568]	; (8008978 <_strtod_l+0x290>)
 8008740:	ab17      	add	r3, sp, #92	; 0x5c
 8008742:	a915      	add	r1, sp, #84	; 0x54
 8008744:	4620      	mov	r0, r4
 8008746:	f002 fe51 	bl	800b3ec <__gethex>
 800874a:	f010 070f 	ands.w	r7, r0, #15
 800874e:	4605      	mov	r5, r0
 8008750:	d005      	beq.n	800875e <_strtod_l+0x76>
 8008752:	2f06      	cmp	r7, #6
 8008754:	d12a      	bne.n	80087ac <_strtod_l+0xc4>
 8008756:	3601      	adds	r6, #1
 8008758:	2300      	movs	r3, #0
 800875a:	9615      	str	r6, [sp, #84]	; 0x54
 800875c:	930a      	str	r3, [sp, #40]	; 0x28
 800875e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008760:	2b00      	cmp	r3, #0
 8008762:	f040 857f 	bne.w	8009264 <_strtod_l+0xb7c>
 8008766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008768:	b1db      	cbz	r3, 80087a2 <_strtod_l+0xba>
 800876a:	4642      	mov	r2, r8
 800876c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008770:	ec43 2b10 	vmov	d0, r2, r3
 8008774:	b01b      	add	sp, #108	; 0x6c
 8008776:	ecbd 8b02 	vpop	{d8}
 800877a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800877e:	2920      	cmp	r1, #32
 8008780:	d1cc      	bne.n	800871c <_strtod_l+0x34>
 8008782:	3201      	adds	r2, #1
 8008784:	e7bf      	b.n	8008706 <_strtod_l+0x1e>
 8008786:	292d      	cmp	r1, #45	; 0x2d
 8008788:	d1c8      	bne.n	800871c <_strtod_l+0x34>
 800878a:	2101      	movs	r1, #1
 800878c:	910a      	str	r1, [sp, #40]	; 0x28
 800878e:	1c51      	adds	r1, r2, #1
 8008790:	9115      	str	r1, [sp, #84]	; 0x54
 8008792:	7852      	ldrb	r2, [r2, #1]
 8008794:	2a00      	cmp	r2, #0
 8008796:	d1c3      	bne.n	8008720 <_strtod_l+0x38>
 8008798:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800879a:	9515      	str	r5, [sp, #84]	; 0x54
 800879c:	2b00      	cmp	r3, #0
 800879e:	f040 855f 	bne.w	8009260 <_strtod_l+0xb78>
 80087a2:	4642      	mov	r2, r8
 80087a4:	464b      	mov	r3, r9
 80087a6:	e7e3      	b.n	8008770 <_strtod_l+0x88>
 80087a8:	2100      	movs	r1, #0
 80087aa:	e7ef      	b.n	800878c <_strtod_l+0xa4>
 80087ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80087ae:	b13a      	cbz	r2, 80087c0 <_strtod_l+0xd8>
 80087b0:	2135      	movs	r1, #53	; 0x35
 80087b2:	a818      	add	r0, sp, #96	; 0x60
 80087b4:	f003 fe39 	bl	800c42a <__copybits>
 80087b8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80087ba:	4620      	mov	r0, r4
 80087bc:	f003 fa0c 	bl	800bbd8 <_Bfree>
 80087c0:	3f01      	subs	r7, #1
 80087c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80087c4:	2f04      	cmp	r7, #4
 80087c6:	d806      	bhi.n	80087d6 <_strtod_l+0xee>
 80087c8:	e8df f007 	tbb	[pc, r7]
 80087cc:	201d0314 	.word	0x201d0314
 80087d0:	14          	.byte	0x14
 80087d1:	00          	.byte	0x00
 80087d2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80087d6:	05e9      	lsls	r1, r5, #23
 80087d8:	bf48      	it	mi
 80087da:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80087de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80087e2:	0d1b      	lsrs	r3, r3, #20
 80087e4:	051b      	lsls	r3, r3, #20
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1b9      	bne.n	800875e <_strtod_l+0x76>
 80087ea:	f001 fe83 	bl	800a4f4 <__errno>
 80087ee:	2322      	movs	r3, #34	; 0x22
 80087f0:	6003      	str	r3, [r0, #0]
 80087f2:	e7b4      	b.n	800875e <_strtod_l+0x76>
 80087f4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80087f8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80087fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008800:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008804:	e7e7      	b.n	80087d6 <_strtod_l+0xee>
 8008806:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008980 <_strtod_l+0x298>
 800880a:	e7e4      	b.n	80087d6 <_strtod_l+0xee>
 800880c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008810:	f04f 38ff 	mov.w	r8, #4294967295
 8008814:	e7df      	b.n	80087d6 <_strtod_l+0xee>
 8008816:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008818:	1c5a      	adds	r2, r3, #1
 800881a:	9215      	str	r2, [sp, #84]	; 0x54
 800881c:	785b      	ldrb	r3, [r3, #1]
 800881e:	2b30      	cmp	r3, #48	; 0x30
 8008820:	d0f9      	beq.n	8008816 <_strtod_l+0x12e>
 8008822:	2b00      	cmp	r3, #0
 8008824:	d09b      	beq.n	800875e <_strtod_l+0x76>
 8008826:	2301      	movs	r3, #1
 8008828:	f04f 0a00 	mov.w	sl, #0
 800882c:	9304      	str	r3, [sp, #16]
 800882e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008830:	930b      	str	r3, [sp, #44]	; 0x2c
 8008832:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008836:	46d3      	mov	fp, sl
 8008838:	220a      	movs	r2, #10
 800883a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800883c:	7806      	ldrb	r6, [r0, #0]
 800883e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008842:	b2d9      	uxtb	r1, r3
 8008844:	2909      	cmp	r1, #9
 8008846:	d926      	bls.n	8008896 <_strtod_l+0x1ae>
 8008848:	494c      	ldr	r1, [pc, #304]	; (800897c <_strtod_l+0x294>)
 800884a:	2201      	movs	r2, #1
 800884c:	f001 fde3 	bl	800a416 <strncmp>
 8008850:	2800      	cmp	r0, #0
 8008852:	d030      	beq.n	80088b6 <_strtod_l+0x1ce>
 8008854:	2000      	movs	r0, #0
 8008856:	4632      	mov	r2, r6
 8008858:	9005      	str	r0, [sp, #20]
 800885a:	465e      	mov	r6, fp
 800885c:	4603      	mov	r3, r0
 800885e:	2a65      	cmp	r2, #101	; 0x65
 8008860:	d001      	beq.n	8008866 <_strtod_l+0x17e>
 8008862:	2a45      	cmp	r2, #69	; 0x45
 8008864:	d113      	bne.n	800888e <_strtod_l+0x1a6>
 8008866:	b91e      	cbnz	r6, 8008870 <_strtod_l+0x188>
 8008868:	9a04      	ldr	r2, [sp, #16]
 800886a:	4302      	orrs	r2, r0
 800886c:	d094      	beq.n	8008798 <_strtod_l+0xb0>
 800886e:	2600      	movs	r6, #0
 8008870:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008872:	1c6a      	adds	r2, r5, #1
 8008874:	9215      	str	r2, [sp, #84]	; 0x54
 8008876:	786a      	ldrb	r2, [r5, #1]
 8008878:	2a2b      	cmp	r2, #43	; 0x2b
 800887a:	d074      	beq.n	8008966 <_strtod_l+0x27e>
 800887c:	2a2d      	cmp	r2, #45	; 0x2d
 800887e:	d078      	beq.n	8008972 <_strtod_l+0x28a>
 8008880:	f04f 0c00 	mov.w	ip, #0
 8008884:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008888:	2909      	cmp	r1, #9
 800888a:	d97f      	bls.n	800898c <_strtod_l+0x2a4>
 800888c:	9515      	str	r5, [sp, #84]	; 0x54
 800888e:	2700      	movs	r7, #0
 8008890:	e09e      	b.n	80089d0 <_strtod_l+0x2e8>
 8008892:	2300      	movs	r3, #0
 8008894:	e7c8      	b.n	8008828 <_strtod_l+0x140>
 8008896:	f1bb 0f08 	cmp.w	fp, #8
 800889a:	bfd8      	it	le
 800889c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800889e:	f100 0001 	add.w	r0, r0, #1
 80088a2:	bfda      	itte	le
 80088a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80088a8:	9309      	strle	r3, [sp, #36]	; 0x24
 80088aa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80088ae:	f10b 0b01 	add.w	fp, fp, #1
 80088b2:	9015      	str	r0, [sp, #84]	; 0x54
 80088b4:	e7c1      	b.n	800883a <_strtod_l+0x152>
 80088b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088b8:	1c5a      	adds	r2, r3, #1
 80088ba:	9215      	str	r2, [sp, #84]	; 0x54
 80088bc:	785a      	ldrb	r2, [r3, #1]
 80088be:	f1bb 0f00 	cmp.w	fp, #0
 80088c2:	d037      	beq.n	8008934 <_strtod_l+0x24c>
 80088c4:	9005      	str	r0, [sp, #20]
 80088c6:	465e      	mov	r6, fp
 80088c8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80088cc:	2b09      	cmp	r3, #9
 80088ce:	d912      	bls.n	80088f6 <_strtod_l+0x20e>
 80088d0:	2301      	movs	r3, #1
 80088d2:	e7c4      	b.n	800885e <_strtod_l+0x176>
 80088d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088d6:	1c5a      	adds	r2, r3, #1
 80088d8:	9215      	str	r2, [sp, #84]	; 0x54
 80088da:	785a      	ldrb	r2, [r3, #1]
 80088dc:	3001      	adds	r0, #1
 80088de:	2a30      	cmp	r2, #48	; 0x30
 80088e0:	d0f8      	beq.n	80088d4 <_strtod_l+0x1ec>
 80088e2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80088e6:	2b08      	cmp	r3, #8
 80088e8:	f200 84c1 	bhi.w	800926e <_strtod_l+0xb86>
 80088ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088ee:	9005      	str	r0, [sp, #20]
 80088f0:	2000      	movs	r0, #0
 80088f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80088f4:	4606      	mov	r6, r0
 80088f6:	3a30      	subs	r2, #48	; 0x30
 80088f8:	f100 0301 	add.w	r3, r0, #1
 80088fc:	d014      	beq.n	8008928 <_strtod_l+0x240>
 80088fe:	9905      	ldr	r1, [sp, #20]
 8008900:	4419      	add	r1, r3
 8008902:	9105      	str	r1, [sp, #20]
 8008904:	4633      	mov	r3, r6
 8008906:	eb00 0c06 	add.w	ip, r0, r6
 800890a:	210a      	movs	r1, #10
 800890c:	4563      	cmp	r3, ip
 800890e:	d113      	bne.n	8008938 <_strtod_l+0x250>
 8008910:	1833      	adds	r3, r6, r0
 8008912:	2b08      	cmp	r3, #8
 8008914:	f106 0601 	add.w	r6, r6, #1
 8008918:	4406      	add	r6, r0
 800891a:	dc1a      	bgt.n	8008952 <_strtod_l+0x26a>
 800891c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800891e:	230a      	movs	r3, #10
 8008920:	fb03 2301 	mla	r3, r3, r1, r2
 8008924:	9309      	str	r3, [sp, #36]	; 0x24
 8008926:	2300      	movs	r3, #0
 8008928:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800892a:	1c51      	adds	r1, r2, #1
 800892c:	9115      	str	r1, [sp, #84]	; 0x54
 800892e:	7852      	ldrb	r2, [r2, #1]
 8008930:	4618      	mov	r0, r3
 8008932:	e7c9      	b.n	80088c8 <_strtod_l+0x1e0>
 8008934:	4658      	mov	r0, fp
 8008936:	e7d2      	b.n	80088de <_strtod_l+0x1f6>
 8008938:	2b08      	cmp	r3, #8
 800893a:	f103 0301 	add.w	r3, r3, #1
 800893e:	dc03      	bgt.n	8008948 <_strtod_l+0x260>
 8008940:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008942:	434f      	muls	r7, r1
 8008944:	9709      	str	r7, [sp, #36]	; 0x24
 8008946:	e7e1      	b.n	800890c <_strtod_l+0x224>
 8008948:	2b10      	cmp	r3, #16
 800894a:	bfd8      	it	le
 800894c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008950:	e7dc      	b.n	800890c <_strtod_l+0x224>
 8008952:	2e10      	cmp	r6, #16
 8008954:	bfdc      	itt	le
 8008956:	230a      	movle	r3, #10
 8008958:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800895c:	e7e3      	b.n	8008926 <_strtod_l+0x23e>
 800895e:	2300      	movs	r3, #0
 8008960:	9305      	str	r3, [sp, #20]
 8008962:	2301      	movs	r3, #1
 8008964:	e780      	b.n	8008868 <_strtod_l+0x180>
 8008966:	f04f 0c00 	mov.w	ip, #0
 800896a:	1caa      	adds	r2, r5, #2
 800896c:	9215      	str	r2, [sp, #84]	; 0x54
 800896e:	78aa      	ldrb	r2, [r5, #2]
 8008970:	e788      	b.n	8008884 <_strtod_l+0x19c>
 8008972:	f04f 0c01 	mov.w	ip, #1
 8008976:	e7f8      	b.n	800896a <_strtod_l+0x282>
 8008978:	0800d5f0 	.word	0x0800d5f0
 800897c:	0800d5ec 	.word	0x0800d5ec
 8008980:	7ff00000 	.word	0x7ff00000
 8008984:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008986:	1c51      	adds	r1, r2, #1
 8008988:	9115      	str	r1, [sp, #84]	; 0x54
 800898a:	7852      	ldrb	r2, [r2, #1]
 800898c:	2a30      	cmp	r2, #48	; 0x30
 800898e:	d0f9      	beq.n	8008984 <_strtod_l+0x29c>
 8008990:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008994:	2908      	cmp	r1, #8
 8008996:	f63f af7a 	bhi.w	800888e <_strtod_l+0x1a6>
 800899a:	3a30      	subs	r2, #48	; 0x30
 800899c:	9208      	str	r2, [sp, #32]
 800899e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80089a0:	920c      	str	r2, [sp, #48]	; 0x30
 80089a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80089a4:	1c57      	adds	r7, r2, #1
 80089a6:	9715      	str	r7, [sp, #84]	; 0x54
 80089a8:	7852      	ldrb	r2, [r2, #1]
 80089aa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80089ae:	f1be 0f09 	cmp.w	lr, #9
 80089b2:	d938      	bls.n	8008a26 <_strtod_l+0x33e>
 80089b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80089b6:	1a7f      	subs	r7, r7, r1
 80089b8:	2f08      	cmp	r7, #8
 80089ba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80089be:	dc03      	bgt.n	80089c8 <_strtod_l+0x2e0>
 80089c0:	9908      	ldr	r1, [sp, #32]
 80089c2:	428f      	cmp	r7, r1
 80089c4:	bfa8      	it	ge
 80089c6:	460f      	movge	r7, r1
 80089c8:	f1bc 0f00 	cmp.w	ip, #0
 80089cc:	d000      	beq.n	80089d0 <_strtod_l+0x2e8>
 80089ce:	427f      	negs	r7, r7
 80089d0:	2e00      	cmp	r6, #0
 80089d2:	d14f      	bne.n	8008a74 <_strtod_l+0x38c>
 80089d4:	9904      	ldr	r1, [sp, #16]
 80089d6:	4301      	orrs	r1, r0
 80089d8:	f47f aec1 	bne.w	800875e <_strtod_l+0x76>
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f47f aedb 	bne.w	8008798 <_strtod_l+0xb0>
 80089e2:	2a69      	cmp	r2, #105	; 0x69
 80089e4:	d029      	beq.n	8008a3a <_strtod_l+0x352>
 80089e6:	dc26      	bgt.n	8008a36 <_strtod_l+0x34e>
 80089e8:	2a49      	cmp	r2, #73	; 0x49
 80089ea:	d026      	beq.n	8008a3a <_strtod_l+0x352>
 80089ec:	2a4e      	cmp	r2, #78	; 0x4e
 80089ee:	f47f aed3 	bne.w	8008798 <_strtod_l+0xb0>
 80089f2:	499b      	ldr	r1, [pc, #620]	; (8008c60 <_strtod_l+0x578>)
 80089f4:	a815      	add	r0, sp, #84	; 0x54
 80089f6:	f002 ff39 	bl	800b86c <__match>
 80089fa:	2800      	cmp	r0, #0
 80089fc:	f43f aecc 	beq.w	8008798 <_strtod_l+0xb0>
 8008a00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	2b28      	cmp	r3, #40	; 0x28
 8008a06:	d12f      	bne.n	8008a68 <_strtod_l+0x380>
 8008a08:	4996      	ldr	r1, [pc, #600]	; (8008c64 <_strtod_l+0x57c>)
 8008a0a:	aa18      	add	r2, sp, #96	; 0x60
 8008a0c:	a815      	add	r0, sp, #84	; 0x54
 8008a0e:	f002 ff41 	bl	800b894 <__hexnan>
 8008a12:	2805      	cmp	r0, #5
 8008a14:	d128      	bne.n	8008a68 <_strtod_l+0x380>
 8008a16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008a1c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008a20:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008a24:	e69b      	b.n	800875e <_strtod_l+0x76>
 8008a26:	9f08      	ldr	r7, [sp, #32]
 8008a28:	210a      	movs	r1, #10
 8008a2a:	fb01 2107 	mla	r1, r1, r7, r2
 8008a2e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008a32:	9208      	str	r2, [sp, #32]
 8008a34:	e7b5      	b.n	80089a2 <_strtod_l+0x2ba>
 8008a36:	2a6e      	cmp	r2, #110	; 0x6e
 8008a38:	e7d9      	b.n	80089ee <_strtod_l+0x306>
 8008a3a:	498b      	ldr	r1, [pc, #556]	; (8008c68 <_strtod_l+0x580>)
 8008a3c:	a815      	add	r0, sp, #84	; 0x54
 8008a3e:	f002 ff15 	bl	800b86c <__match>
 8008a42:	2800      	cmp	r0, #0
 8008a44:	f43f aea8 	beq.w	8008798 <_strtod_l+0xb0>
 8008a48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a4a:	4988      	ldr	r1, [pc, #544]	; (8008c6c <_strtod_l+0x584>)
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	a815      	add	r0, sp, #84	; 0x54
 8008a50:	9315      	str	r3, [sp, #84]	; 0x54
 8008a52:	f002 ff0b 	bl	800b86c <__match>
 8008a56:	b910      	cbnz	r0, 8008a5e <_strtod_l+0x376>
 8008a58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	9315      	str	r3, [sp, #84]	; 0x54
 8008a5e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8008c7c <_strtod_l+0x594>
 8008a62:	f04f 0800 	mov.w	r8, #0
 8008a66:	e67a      	b.n	800875e <_strtod_l+0x76>
 8008a68:	4881      	ldr	r0, [pc, #516]	; (8008c70 <_strtod_l+0x588>)
 8008a6a:	f001 fd81 	bl	800a570 <nan>
 8008a6e:	ec59 8b10 	vmov	r8, r9, d0
 8008a72:	e674      	b.n	800875e <_strtod_l+0x76>
 8008a74:	9b05      	ldr	r3, [sp, #20]
 8008a76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a78:	1afb      	subs	r3, r7, r3
 8008a7a:	f1bb 0f00 	cmp.w	fp, #0
 8008a7e:	bf08      	it	eq
 8008a80:	46b3      	moveq	fp, r6
 8008a82:	2e10      	cmp	r6, #16
 8008a84:	9308      	str	r3, [sp, #32]
 8008a86:	4635      	mov	r5, r6
 8008a88:	bfa8      	it	ge
 8008a8a:	2510      	movge	r5, #16
 8008a8c:	f7f7 fd42 	bl	8000514 <__aeabi_ui2d>
 8008a90:	2e09      	cmp	r6, #9
 8008a92:	4680      	mov	r8, r0
 8008a94:	4689      	mov	r9, r1
 8008a96:	dd13      	ble.n	8008ac0 <_strtod_l+0x3d8>
 8008a98:	4b76      	ldr	r3, [pc, #472]	; (8008c74 <_strtod_l+0x58c>)
 8008a9a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008a9e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008aa2:	f7f7 fdb1 	bl	8000608 <__aeabi_dmul>
 8008aa6:	4680      	mov	r8, r0
 8008aa8:	4650      	mov	r0, sl
 8008aaa:	4689      	mov	r9, r1
 8008aac:	f7f7 fd32 	bl	8000514 <__aeabi_ui2d>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	4640      	mov	r0, r8
 8008ab6:	4649      	mov	r1, r9
 8008ab8:	f7f7 fbf0 	bl	800029c <__adddf3>
 8008abc:	4680      	mov	r8, r0
 8008abe:	4689      	mov	r9, r1
 8008ac0:	2e0f      	cmp	r6, #15
 8008ac2:	dc38      	bgt.n	8008b36 <_strtod_l+0x44e>
 8008ac4:	9b08      	ldr	r3, [sp, #32]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	f43f ae49 	beq.w	800875e <_strtod_l+0x76>
 8008acc:	dd24      	ble.n	8008b18 <_strtod_l+0x430>
 8008ace:	2b16      	cmp	r3, #22
 8008ad0:	dc0b      	bgt.n	8008aea <_strtod_l+0x402>
 8008ad2:	4968      	ldr	r1, [pc, #416]	; (8008c74 <_strtod_l+0x58c>)
 8008ad4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ad8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008adc:	4642      	mov	r2, r8
 8008ade:	464b      	mov	r3, r9
 8008ae0:	f7f7 fd92 	bl	8000608 <__aeabi_dmul>
 8008ae4:	4680      	mov	r8, r0
 8008ae6:	4689      	mov	r9, r1
 8008ae8:	e639      	b.n	800875e <_strtod_l+0x76>
 8008aea:	9a08      	ldr	r2, [sp, #32]
 8008aec:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008af0:	4293      	cmp	r3, r2
 8008af2:	db20      	blt.n	8008b36 <_strtod_l+0x44e>
 8008af4:	4c5f      	ldr	r4, [pc, #380]	; (8008c74 <_strtod_l+0x58c>)
 8008af6:	f1c6 060f 	rsb	r6, r6, #15
 8008afa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008afe:	4642      	mov	r2, r8
 8008b00:	464b      	mov	r3, r9
 8008b02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b06:	f7f7 fd7f 	bl	8000608 <__aeabi_dmul>
 8008b0a:	9b08      	ldr	r3, [sp, #32]
 8008b0c:	1b9e      	subs	r6, r3, r6
 8008b0e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008b12:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008b16:	e7e3      	b.n	8008ae0 <_strtod_l+0x3f8>
 8008b18:	9b08      	ldr	r3, [sp, #32]
 8008b1a:	3316      	adds	r3, #22
 8008b1c:	db0b      	blt.n	8008b36 <_strtod_l+0x44e>
 8008b1e:	9b05      	ldr	r3, [sp, #20]
 8008b20:	1bdf      	subs	r7, r3, r7
 8008b22:	4b54      	ldr	r3, [pc, #336]	; (8008c74 <_strtod_l+0x58c>)
 8008b24:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b2c:	4640      	mov	r0, r8
 8008b2e:	4649      	mov	r1, r9
 8008b30:	f7f7 fe94 	bl	800085c <__aeabi_ddiv>
 8008b34:	e7d6      	b.n	8008ae4 <_strtod_l+0x3fc>
 8008b36:	9b08      	ldr	r3, [sp, #32]
 8008b38:	1b75      	subs	r5, r6, r5
 8008b3a:	441d      	add	r5, r3
 8008b3c:	2d00      	cmp	r5, #0
 8008b3e:	dd70      	ble.n	8008c22 <_strtod_l+0x53a>
 8008b40:	f015 030f 	ands.w	r3, r5, #15
 8008b44:	d00a      	beq.n	8008b5c <_strtod_l+0x474>
 8008b46:	494b      	ldr	r1, [pc, #300]	; (8008c74 <_strtod_l+0x58c>)
 8008b48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008b4c:	4642      	mov	r2, r8
 8008b4e:	464b      	mov	r3, r9
 8008b50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b54:	f7f7 fd58 	bl	8000608 <__aeabi_dmul>
 8008b58:	4680      	mov	r8, r0
 8008b5a:	4689      	mov	r9, r1
 8008b5c:	f035 050f 	bics.w	r5, r5, #15
 8008b60:	d04d      	beq.n	8008bfe <_strtod_l+0x516>
 8008b62:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008b66:	dd22      	ble.n	8008bae <_strtod_l+0x4c6>
 8008b68:	2500      	movs	r5, #0
 8008b6a:	46ab      	mov	fp, r5
 8008b6c:	9509      	str	r5, [sp, #36]	; 0x24
 8008b6e:	9505      	str	r5, [sp, #20]
 8008b70:	2322      	movs	r3, #34	; 0x22
 8008b72:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008c7c <_strtod_l+0x594>
 8008b76:	6023      	str	r3, [r4, #0]
 8008b78:	f04f 0800 	mov.w	r8, #0
 8008b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	f43f aded 	beq.w	800875e <_strtod_l+0x76>
 8008b84:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008b86:	4620      	mov	r0, r4
 8008b88:	f003 f826 	bl	800bbd8 <_Bfree>
 8008b8c:	9905      	ldr	r1, [sp, #20]
 8008b8e:	4620      	mov	r0, r4
 8008b90:	f003 f822 	bl	800bbd8 <_Bfree>
 8008b94:	4659      	mov	r1, fp
 8008b96:	4620      	mov	r0, r4
 8008b98:	f003 f81e 	bl	800bbd8 <_Bfree>
 8008b9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	f003 f81a 	bl	800bbd8 <_Bfree>
 8008ba4:	4629      	mov	r1, r5
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f003 f816 	bl	800bbd8 <_Bfree>
 8008bac:	e5d7      	b.n	800875e <_strtod_l+0x76>
 8008bae:	4b32      	ldr	r3, [pc, #200]	; (8008c78 <_strtod_l+0x590>)
 8008bb0:	9304      	str	r3, [sp, #16]
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	112d      	asrs	r5, r5, #4
 8008bb6:	4640      	mov	r0, r8
 8008bb8:	4649      	mov	r1, r9
 8008bba:	469a      	mov	sl, r3
 8008bbc:	2d01      	cmp	r5, #1
 8008bbe:	dc21      	bgt.n	8008c04 <_strtod_l+0x51c>
 8008bc0:	b10b      	cbz	r3, 8008bc6 <_strtod_l+0x4de>
 8008bc2:	4680      	mov	r8, r0
 8008bc4:	4689      	mov	r9, r1
 8008bc6:	492c      	ldr	r1, [pc, #176]	; (8008c78 <_strtod_l+0x590>)
 8008bc8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008bcc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008bd0:	4642      	mov	r2, r8
 8008bd2:	464b      	mov	r3, r9
 8008bd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bd8:	f7f7 fd16 	bl	8000608 <__aeabi_dmul>
 8008bdc:	4b27      	ldr	r3, [pc, #156]	; (8008c7c <_strtod_l+0x594>)
 8008bde:	460a      	mov	r2, r1
 8008be0:	400b      	ands	r3, r1
 8008be2:	4927      	ldr	r1, [pc, #156]	; (8008c80 <_strtod_l+0x598>)
 8008be4:	428b      	cmp	r3, r1
 8008be6:	4680      	mov	r8, r0
 8008be8:	d8be      	bhi.n	8008b68 <_strtod_l+0x480>
 8008bea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008bee:	428b      	cmp	r3, r1
 8008bf0:	bf86      	itte	hi
 8008bf2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008c84 <_strtod_l+0x59c>
 8008bf6:	f04f 38ff 	movhi.w	r8, #4294967295
 8008bfa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008bfe:	2300      	movs	r3, #0
 8008c00:	9304      	str	r3, [sp, #16]
 8008c02:	e07b      	b.n	8008cfc <_strtod_l+0x614>
 8008c04:	07ea      	lsls	r2, r5, #31
 8008c06:	d505      	bpl.n	8008c14 <_strtod_l+0x52c>
 8008c08:	9b04      	ldr	r3, [sp, #16]
 8008c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0e:	f7f7 fcfb 	bl	8000608 <__aeabi_dmul>
 8008c12:	2301      	movs	r3, #1
 8008c14:	9a04      	ldr	r2, [sp, #16]
 8008c16:	3208      	adds	r2, #8
 8008c18:	f10a 0a01 	add.w	sl, sl, #1
 8008c1c:	106d      	asrs	r5, r5, #1
 8008c1e:	9204      	str	r2, [sp, #16]
 8008c20:	e7cc      	b.n	8008bbc <_strtod_l+0x4d4>
 8008c22:	d0ec      	beq.n	8008bfe <_strtod_l+0x516>
 8008c24:	426d      	negs	r5, r5
 8008c26:	f015 020f 	ands.w	r2, r5, #15
 8008c2a:	d00a      	beq.n	8008c42 <_strtod_l+0x55a>
 8008c2c:	4b11      	ldr	r3, [pc, #68]	; (8008c74 <_strtod_l+0x58c>)
 8008c2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c32:	4640      	mov	r0, r8
 8008c34:	4649      	mov	r1, r9
 8008c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3a:	f7f7 fe0f 	bl	800085c <__aeabi_ddiv>
 8008c3e:	4680      	mov	r8, r0
 8008c40:	4689      	mov	r9, r1
 8008c42:	112d      	asrs	r5, r5, #4
 8008c44:	d0db      	beq.n	8008bfe <_strtod_l+0x516>
 8008c46:	2d1f      	cmp	r5, #31
 8008c48:	dd1e      	ble.n	8008c88 <_strtod_l+0x5a0>
 8008c4a:	2500      	movs	r5, #0
 8008c4c:	46ab      	mov	fp, r5
 8008c4e:	9509      	str	r5, [sp, #36]	; 0x24
 8008c50:	9505      	str	r5, [sp, #20]
 8008c52:	2322      	movs	r3, #34	; 0x22
 8008c54:	f04f 0800 	mov.w	r8, #0
 8008c58:	f04f 0900 	mov.w	r9, #0
 8008c5c:	6023      	str	r3, [r4, #0]
 8008c5e:	e78d      	b.n	8008b7c <_strtod_l+0x494>
 8008c60:	0800d74e 	.word	0x0800d74e
 8008c64:	0800d604 	.word	0x0800d604
 8008c68:	0800d746 	.word	0x0800d746
 8008c6c:	0800d785 	.word	0x0800d785
 8008c70:	0800da10 	.word	0x0800da10
 8008c74:	0800d8f0 	.word	0x0800d8f0
 8008c78:	0800d8c8 	.word	0x0800d8c8
 8008c7c:	7ff00000 	.word	0x7ff00000
 8008c80:	7ca00000 	.word	0x7ca00000
 8008c84:	7fefffff 	.word	0x7fefffff
 8008c88:	f015 0310 	ands.w	r3, r5, #16
 8008c8c:	bf18      	it	ne
 8008c8e:	236a      	movne	r3, #106	; 0x6a
 8008c90:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8009034 <_strtod_l+0x94c>
 8008c94:	9304      	str	r3, [sp, #16]
 8008c96:	4640      	mov	r0, r8
 8008c98:	4649      	mov	r1, r9
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	07ea      	lsls	r2, r5, #31
 8008c9e:	d504      	bpl.n	8008caa <_strtod_l+0x5c2>
 8008ca0:	e9da 2300 	ldrd	r2, r3, [sl]
 8008ca4:	f7f7 fcb0 	bl	8000608 <__aeabi_dmul>
 8008ca8:	2301      	movs	r3, #1
 8008caa:	106d      	asrs	r5, r5, #1
 8008cac:	f10a 0a08 	add.w	sl, sl, #8
 8008cb0:	d1f4      	bne.n	8008c9c <_strtod_l+0x5b4>
 8008cb2:	b10b      	cbz	r3, 8008cb8 <_strtod_l+0x5d0>
 8008cb4:	4680      	mov	r8, r0
 8008cb6:	4689      	mov	r9, r1
 8008cb8:	9b04      	ldr	r3, [sp, #16]
 8008cba:	b1bb      	cbz	r3, 8008cec <_strtod_l+0x604>
 8008cbc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008cc0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	4649      	mov	r1, r9
 8008cc8:	dd10      	ble.n	8008cec <_strtod_l+0x604>
 8008cca:	2b1f      	cmp	r3, #31
 8008ccc:	f340 811e 	ble.w	8008f0c <_strtod_l+0x824>
 8008cd0:	2b34      	cmp	r3, #52	; 0x34
 8008cd2:	bfde      	ittt	le
 8008cd4:	f04f 33ff 	movle.w	r3, #4294967295
 8008cd8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008cdc:	4093      	lslle	r3, r2
 8008cde:	f04f 0800 	mov.w	r8, #0
 8008ce2:	bfcc      	ite	gt
 8008ce4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008ce8:	ea03 0901 	andle.w	r9, r3, r1
 8008cec:	2200      	movs	r2, #0
 8008cee:	2300      	movs	r3, #0
 8008cf0:	4640      	mov	r0, r8
 8008cf2:	4649      	mov	r1, r9
 8008cf4:	f7f7 fef0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	d1a6      	bne.n	8008c4a <_strtod_l+0x562>
 8008cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d02:	4633      	mov	r3, r6
 8008d04:	465a      	mov	r2, fp
 8008d06:	4620      	mov	r0, r4
 8008d08:	f002 ffce 	bl	800bca8 <__s2b>
 8008d0c:	9009      	str	r0, [sp, #36]	; 0x24
 8008d0e:	2800      	cmp	r0, #0
 8008d10:	f43f af2a 	beq.w	8008b68 <_strtod_l+0x480>
 8008d14:	9a08      	ldr	r2, [sp, #32]
 8008d16:	9b05      	ldr	r3, [sp, #20]
 8008d18:	2a00      	cmp	r2, #0
 8008d1a:	eba3 0307 	sub.w	r3, r3, r7
 8008d1e:	bfa8      	it	ge
 8008d20:	2300      	movge	r3, #0
 8008d22:	930c      	str	r3, [sp, #48]	; 0x30
 8008d24:	2500      	movs	r5, #0
 8008d26:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008d2a:	9312      	str	r3, [sp, #72]	; 0x48
 8008d2c:	46ab      	mov	fp, r5
 8008d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d30:	4620      	mov	r0, r4
 8008d32:	6859      	ldr	r1, [r3, #4]
 8008d34:	f002 ff10 	bl	800bb58 <_Balloc>
 8008d38:	9005      	str	r0, [sp, #20]
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	f43f af18 	beq.w	8008b70 <_strtod_l+0x488>
 8008d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d42:	691a      	ldr	r2, [r3, #16]
 8008d44:	3202      	adds	r2, #2
 8008d46:	f103 010c 	add.w	r1, r3, #12
 8008d4a:	0092      	lsls	r2, r2, #2
 8008d4c:	300c      	adds	r0, #12
 8008d4e:	f001 fbfe 	bl	800a54e <memcpy>
 8008d52:	ec49 8b10 	vmov	d0, r8, r9
 8008d56:	aa18      	add	r2, sp, #96	; 0x60
 8008d58:	a917      	add	r1, sp, #92	; 0x5c
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	f003 fad8 	bl	800c310 <__d2b>
 8008d60:	ec49 8b18 	vmov	d8, r8, r9
 8008d64:	9016      	str	r0, [sp, #88]	; 0x58
 8008d66:	2800      	cmp	r0, #0
 8008d68:	f43f af02 	beq.w	8008b70 <_strtod_l+0x488>
 8008d6c:	2101      	movs	r1, #1
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f003 f832 	bl	800bdd8 <__i2b>
 8008d74:	4683      	mov	fp, r0
 8008d76:	2800      	cmp	r0, #0
 8008d78:	f43f aefa 	beq.w	8008b70 <_strtod_l+0x488>
 8008d7c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008d7e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008d80:	2e00      	cmp	r6, #0
 8008d82:	bfab      	itete	ge
 8008d84:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008d86:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008d88:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008d8a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8008d8e:	bfac      	ite	ge
 8008d90:	eb06 0a03 	addge.w	sl, r6, r3
 8008d94:	1b9f      	sublt	r7, r3, r6
 8008d96:	9b04      	ldr	r3, [sp, #16]
 8008d98:	1af6      	subs	r6, r6, r3
 8008d9a:	4416      	add	r6, r2
 8008d9c:	4ba0      	ldr	r3, [pc, #640]	; (8009020 <_strtod_l+0x938>)
 8008d9e:	3e01      	subs	r6, #1
 8008da0:	429e      	cmp	r6, r3
 8008da2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008da6:	f280 80c4 	bge.w	8008f32 <_strtod_l+0x84a>
 8008daa:	1b9b      	subs	r3, r3, r6
 8008dac:	2b1f      	cmp	r3, #31
 8008dae:	eba2 0203 	sub.w	r2, r2, r3
 8008db2:	f04f 0101 	mov.w	r1, #1
 8008db6:	f300 80b0 	bgt.w	8008f1a <_strtod_l+0x832>
 8008dba:	fa01 f303 	lsl.w	r3, r1, r3
 8008dbe:	930e      	str	r3, [sp, #56]	; 0x38
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	930d      	str	r3, [sp, #52]	; 0x34
 8008dc4:	eb0a 0602 	add.w	r6, sl, r2
 8008dc8:	9b04      	ldr	r3, [sp, #16]
 8008dca:	45b2      	cmp	sl, r6
 8008dcc:	4417      	add	r7, r2
 8008dce:	441f      	add	r7, r3
 8008dd0:	4653      	mov	r3, sl
 8008dd2:	bfa8      	it	ge
 8008dd4:	4633      	movge	r3, r6
 8008dd6:	42bb      	cmp	r3, r7
 8008dd8:	bfa8      	it	ge
 8008dda:	463b      	movge	r3, r7
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	bfc2      	ittt	gt
 8008de0:	1af6      	subgt	r6, r6, r3
 8008de2:	1aff      	subgt	r7, r7, r3
 8008de4:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008de8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	dd17      	ble.n	8008e1e <_strtod_l+0x736>
 8008dee:	4659      	mov	r1, fp
 8008df0:	461a      	mov	r2, r3
 8008df2:	4620      	mov	r0, r4
 8008df4:	f003 f8b0 	bl	800bf58 <__pow5mult>
 8008df8:	4683      	mov	fp, r0
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	f43f aeb8 	beq.w	8008b70 <_strtod_l+0x488>
 8008e00:	4601      	mov	r1, r0
 8008e02:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008e04:	4620      	mov	r0, r4
 8008e06:	f002 fffd 	bl	800be04 <__multiply>
 8008e0a:	900b      	str	r0, [sp, #44]	; 0x2c
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	f43f aeaf 	beq.w	8008b70 <_strtod_l+0x488>
 8008e12:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008e14:	4620      	mov	r0, r4
 8008e16:	f002 fedf 	bl	800bbd8 <_Bfree>
 8008e1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e1c:	9316      	str	r3, [sp, #88]	; 0x58
 8008e1e:	2e00      	cmp	r6, #0
 8008e20:	f300 808c 	bgt.w	8008f3c <_strtod_l+0x854>
 8008e24:	9b08      	ldr	r3, [sp, #32]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	dd08      	ble.n	8008e3c <_strtod_l+0x754>
 8008e2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e2c:	9905      	ldr	r1, [sp, #20]
 8008e2e:	4620      	mov	r0, r4
 8008e30:	f003 f892 	bl	800bf58 <__pow5mult>
 8008e34:	9005      	str	r0, [sp, #20]
 8008e36:	2800      	cmp	r0, #0
 8008e38:	f43f ae9a 	beq.w	8008b70 <_strtod_l+0x488>
 8008e3c:	2f00      	cmp	r7, #0
 8008e3e:	dd08      	ble.n	8008e52 <_strtod_l+0x76a>
 8008e40:	9905      	ldr	r1, [sp, #20]
 8008e42:	463a      	mov	r2, r7
 8008e44:	4620      	mov	r0, r4
 8008e46:	f003 f8e1 	bl	800c00c <__lshift>
 8008e4a:	9005      	str	r0, [sp, #20]
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	f43f ae8f 	beq.w	8008b70 <_strtod_l+0x488>
 8008e52:	f1ba 0f00 	cmp.w	sl, #0
 8008e56:	dd08      	ble.n	8008e6a <_strtod_l+0x782>
 8008e58:	4659      	mov	r1, fp
 8008e5a:	4652      	mov	r2, sl
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	f003 f8d5 	bl	800c00c <__lshift>
 8008e62:	4683      	mov	fp, r0
 8008e64:	2800      	cmp	r0, #0
 8008e66:	f43f ae83 	beq.w	8008b70 <_strtod_l+0x488>
 8008e6a:	9a05      	ldr	r2, [sp, #20]
 8008e6c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008e6e:	4620      	mov	r0, r4
 8008e70:	f003 f954 	bl	800c11c <__mdiff>
 8008e74:	4605      	mov	r5, r0
 8008e76:	2800      	cmp	r0, #0
 8008e78:	f43f ae7a 	beq.w	8008b70 <_strtod_l+0x488>
 8008e7c:	68c3      	ldr	r3, [r0, #12]
 8008e7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e80:	2300      	movs	r3, #0
 8008e82:	60c3      	str	r3, [r0, #12]
 8008e84:	4659      	mov	r1, fp
 8008e86:	f003 f92d 	bl	800c0e4 <__mcmp>
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	da60      	bge.n	8008f50 <_strtod_l+0x868>
 8008e8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e90:	ea53 0308 	orrs.w	r3, r3, r8
 8008e94:	f040 8084 	bne.w	8008fa0 <_strtod_l+0x8b8>
 8008e98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d17f      	bne.n	8008fa0 <_strtod_l+0x8b8>
 8008ea0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008ea4:	0d1b      	lsrs	r3, r3, #20
 8008ea6:	051b      	lsls	r3, r3, #20
 8008ea8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008eac:	d978      	bls.n	8008fa0 <_strtod_l+0x8b8>
 8008eae:	696b      	ldr	r3, [r5, #20]
 8008eb0:	b913      	cbnz	r3, 8008eb8 <_strtod_l+0x7d0>
 8008eb2:	692b      	ldr	r3, [r5, #16]
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	dd73      	ble.n	8008fa0 <_strtod_l+0x8b8>
 8008eb8:	4629      	mov	r1, r5
 8008eba:	2201      	movs	r2, #1
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	f003 f8a5 	bl	800c00c <__lshift>
 8008ec2:	4659      	mov	r1, fp
 8008ec4:	4605      	mov	r5, r0
 8008ec6:	f003 f90d 	bl	800c0e4 <__mcmp>
 8008eca:	2800      	cmp	r0, #0
 8008ecc:	dd68      	ble.n	8008fa0 <_strtod_l+0x8b8>
 8008ece:	9904      	ldr	r1, [sp, #16]
 8008ed0:	4a54      	ldr	r2, [pc, #336]	; (8009024 <_strtod_l+0x93c>)
 8008ed2:	464b      	mov	r3, r9
 8008ed4:	2900      	cmp	r1, #0
 8008ed6:	f000 8084 	beq.w	8008fe2 <_strtod_l+0x8fa>
 8008eda:	ea02 0109 	and.w	r1, r2, r9
 8008ede:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008ee2:	dc7e      	bgt.n	8008fe2 <_strtod_l+0x8fa>
 8008ee4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008ee8:	f77f aeb3 	ble.w	8008c52 <_strtod_l+0x56a>
 8008eec:	4b4e      	ldr	r3, [pc, #312]	; (8009028 <_strtod_l+0x940>)
 8008eee:	4640      	mov	r0, r8
 8008ef0:	4649      	mov	r1, r9
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f7f7 fb88 	bl	8000608 <__aeabi_dmul>
 8008ef8:	4b4a      	ldr	r3, [pc, #296]	; (8009024 <_strtod_l+0x93c>)
 8008efa:	400b      	ands	r3, r1
 8008efc:	4680      	mov	r8, r0
 8008efe:	4689      	mov	r9, r1
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f47f ae3f 	bne.w	8008b84 <_strtod_l+0x49c>
 8008f06:	2322      	movs	r3, #34	; 0x22
 8008f08:	6023      	str	r3, [r4, #0]
 8008f0a:	e63b      	b.n	8008b84 <_strtod_l+0x49c>
 8008f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f10:	fa02 f303 	lsl.w	r3, r2, r3
 8008f14:	ea03 0808 	and.w	r8, r3, r8
 8008f18:	e6e8      	b.n	8008cec <_strtod_l+0x604>
 8008f1a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008f1e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008f22:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008f26:	36e2      	adds	r6, #226	; 0xe2
 8008f28:	fa01 f306 	lsl.w	r3, r1, r6
 8008f2c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008f30:	e748      	b.n	8008dc4 <_strtod_l+0x6dc>
 8008f32:	2100      	movs	r1, #0
 8008f34:	2301      	movs	r3, #1
 8008f36:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8008f3a:	e743      	b.n	8008dc4 <_strtod_l+0x6dc>
 8008f3c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008f3e:	4632      	mov	r2, r6
 8008f40:	4620      	mov	r0, r4
 8008f42:	f003 f863 	bl	800c00c <__lshift>
 8008f46:	9016      	str	r0, [sp, #88]	; 0x58
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	f47f af6b 	bne.w	8008e24 <_strtod_l+0x73c>
 8008f4e:	e60f      	b.n	8008b70 <_strtod_l+0x488>
 8008f50:	46ca      	mov	sl, r9
 8008f52:	d171      	bne.n	8009038 <_strtod_l+0x950>
 8008f54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f56:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f5a:	b352      	cbz	r2, 8008fb2 <_strtod_l+0x8ca>
 8008f5c:	4a33      	ldr	r2, [pc, #204]	; (800902c <_strtod_l+0x944>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d12a      	bne.n	8008fb8 <_strtod_l+0x8d0>
 8008f62:	9b04      	ldr	r3, [sp, #16]
 8008f64:	4641      	mov	r1, r8
 8008f66:	b1fb      	cbz	r3, 8008fa8 <_strtod_l+0x8c0>
 8008f68:	4b2e      	ldr	r3, [pc, #184]	; (8009024 <_strtod_l+0x93c>)
 8008f6a:	ea09 0303 	and.w	r3, r9, r3
 8008f6e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008f72:	f04f 32ff 	mov.w	r2, #4294967295
 8008f76:	d81a      	bhi.n	8008fae <_strtod_l+0x8c6>
 8008f78:	0d1b      	lsrs	r3, r3, #20
 8008f7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f82:	4299      	cmp	r1, r3
 8008f84:	d118      	bne.n	8008fb8 <_strtod_l+0x8d0>
 8008f86:	4b2a      	ldr	r3, [pc, #168]	; (8009030 <_strtod_l+0x948>)
 8008f88:	459a      	cmp	sl, r3
 8008f8a:	d102      	bne.n	8008f92 <_strtod_l+0x8aa>
 8008f8c:	3101      	adds	r1, #1
 8008f8e:	f43f adef 	beq.w	8008b70 <_strtod_l+0x488>
 8008f92:	4b24      	ldr	r3, [pc, #144]	; (8009024 <_strtod_l+0x93c>)
 8008f94:	ea0a 0303 	and.w	r3, sl, r3
 8008f98:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008f9c:	f04f 0800 	mov.w	r8, #0
 8008fa0:	9b04      	ldr	r3, [sp, #16]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1a2      	bne.n	8008eec <_strtod_l+0x804>
 8008fa6:	e5ed      	b.n	8008b84 <_strtod_l+0x49c>
 8008fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8008fac:	e7e9      	b.n	8008f82 <_strtod_l+0x89a>
 8008fae:	4613      	mov	r3, r2
 8008fb0:	e7e7      	b.n	8008f82 <_strtod_l+0x89a>
 8008fb2:	ea53 0308 	orrs.w	r3, r3, r8
 8008fb6:	d08a      	beq.n	8008ece <_strtod_l+0x7e6>
 8008fb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fba:	b1e3      	cbz	r3, 8008ff6 <_strtod_l+0x90e>
 8008fbc:	ea13 0f0a 	tst.w	r3, sl
 8008fc0:	d0ee      	beq.n	8008fa0 <_strtod_l+0x8b8>
 8008fc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fc4:	9a04      	ldr	r2, [sp, #16]
 8008fc6:	4640      	mov	r0, r8
 8008fc8:	4649      	mov	r1, r9
 8008fca:	b1c3      	cbz	r3, 8008ffe <_strtod_l+0x916>
 8008fcc:	f7ff fb70 	bl	80086b0 <sulp>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	ec51 0b18 	vmov	r0, r1, d8
 8008fd8:	f7f7 f960 	bl	800029c <__adddf3>
 8008fdc:	4680      	mov	r8, r0
 8008fde:	4689      	mov	r9, r1
 8008fe0:	e7de      	b.n	8008fa0 <_strtod_l+0x8b8>
 8008fe2:	4013      	ands	r3, r2
 8008fe4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008fe8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008fec:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008ff0:	f04f 38ff 	mov.w	r8, #4294967295
 8008ff4:	e7d4      	b.n	8008fa0 <_strtod_l+0x8b8>
 8008ff6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ff8:	ea13 0f08 	tst.w	r3, r8
 8008ffc:	e7e0      	b.n	8008fc0 <_strtod_l+0x8d8>
 8008ffe:	f7ff fb57 	bl	80086b0 <sulp>
 8009002:	4602      	mov	r2, r0
 8009004:	460b      	mov	r3, r1
 8009006:	ec51 0b18 	vmov	r0, r1, d8
 800900a:	f7f7 f945 	bl	8000298 <__aeabi_dsub>
 800900e:	2200      	movs	r2, #0
 8009010:	2300      	movs	r3, #0
 8009012:	4680      	mov	r8, r0
 8009014:	4689      	mov	r9, r1
 8009016:	f7f7 fd5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800901a:	2800      	cmp	r0, #0
 800901c:	d0c0      	beq.n	8008fa0 <_strtod_l+0x8b8>
 800901e:	e618      	b.n	8008c52 <_strtod_l+0x56a>
 8009020:	fffffc02 	.word	0xfffffc02
 8009024:	7ff00000 	.word	0x7ff00000
 8009028:	39500000 	.word	0x39500000
 800902c:	000fffff 	.word	0x000fffff
 8009030:	7fefffff 	.word	0x7fefffff
 8009034:	0800d618 	.word	0x0800d618
 8009038:	4659      	mov	r1, fp
 800903a:	4628      	mov	r0, r5
 800903c:	f003 f9c2 	bl	800c3c4 <__ratio>
 8009040:	ec57 6b10 	vmov	r6, r7, d0
 8009044:	ee10 0a10 	vmov	r0, s0
 8009048:	2200      	movs	r2, #0
 800904a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800904e:	4639      	mov	r1, r7
 8009050:	f7f7 fd56 	bl	8000b00 <__aeabi_dcmple>
 8009054:	2800      	cmp	r0, #0
 8009056:	d071      	beq.n	800913c <_strtod_l+0xa54>
 8009058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800905a:	2b00      	cmp	r3, #0
 800905c:	d17c      	bne.n	8009158 <_strtod_l+0xa70>
 800905e:	f1b8 0f00 	cmp.w	r8, #0
 8009062:	d15a      	bne.n	800911a <_strtod_l+0xa32>
 8009064:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009068:	2b00      	cmp	r3, #0
 800906a:	d15d      	bne.n	8009128 <_strtod_l+0xa40>
 800906c:	4b90      	ldr	r3, [pc, #576]	; (80092b0 <_strtod_l+0xbc8>)
 800906e:	2200      	movs	r2, #0
 8009070:	4630      	mov	r0, r6
 8009072:	4639      	mov	r1, r7
 8009074:	f7f7 fd3a 	bl	8000aec <__aeabi_dcmplt>
 8009078:	2800      	cmp	r0, #0
 800907a:	d15c      	bne.n	8009136 <_strtod_l+0xa4e>
 800907c:	4630      	mov	r0, r6
 800907e:	4639      	mov	r1, r7
 8009080:	4b8c      	ldr	r3, [pc, #560]	; (80092b4 <_strtod_l+0xbcc>)
 8009082:	2200      	movs	r2, #0
 8009084:	f7f7 fac0 	bl	8000608 <__aeabi_dmul>
 8009088:	4606      	mov	r6, r0
 800908a:	460f      	mov	r7, r1
 800908c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009090:	9606      	str	r6, [sp, #24]
 8009092:	9307      	str	r3, [sp, #28]
 8009094:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009098:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800909c:	4b86      	ldr	r3, [pc, #536]	; (80092b8 <_strtod_l+0xbd0>)
 800909e:	ea0a 0303 	and.w	r3, sl, r3
 80090a2:	930d      	str	r3, [sp, #52]	; 0x34
 80090a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80090a6:	4b85      	ldr	r3, [pc, #532]	; (80092bc <_strtod_l+0xbd4>)
 80090a8:	429a      	cmp	r2, r3
 80090aa:	f040 8090 	bne.w	80091ce <_strtod_l+0xae6>
 80090ae:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80090b2:	ec49 8b10 	vmov	d0, r8, r9
 80090b6:	f003 f8bb 	bl	800c230 <__ulp>
 80090ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80090be:	ec51 0b10 	vmov	r0, r1, d0
 80090c2:	f7f7 faa1 	bl	8000608 <__aeabi_dmul>
 80090c6:	4642      	mov	r2, r8
 80090c8:	464b      	mov	r3, r9
 80090ca:	f7f7 f8e7 	bl	800029c <__adddf3>
 80090ce:	460b      	mov	r3, r1
 80090d0:	4979      	ldr	r1, [pc, #484]	; (80092b8 <_strtod_l+0xbd0>)
 80090d2:	4a7b      	ldr	r2, [pc, #492]	; (80092c0 <_strtod_l+0xbd8>)
 80090d4:	4019      	ands	r1, r3
 80090d6:	4291      	cmp	r1, r2
 80090d8:	4680      	mov	r8, r0
 80090da:	d944      	bls.n	8009166 <_strtod_l+0xa7e>
 80090dc:	ee18 2a90 	vmov	r2, s17
 80090e0:	4b78      	ldr	r3, [pc, #480]	; (80092c4 <_strtod_l+0xbdc>)
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d104      	bne.n	80090f0 <_strtod_l+0xa08>
 80090e6:	ee18 3a10 	vmov	r3, s16
 80090ea:	3301      	adds	r3, #1
 80090ec:	f43f ad40 	beq.w	8008b70 <_strtod_l+0x488>
 80090f0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80092c4 <_strtod_l+0xbdc>
 80090f4:	f04f 38ff 	mov.w	r8, #4294967295
 80090f8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80090fa:	4620      	mov	r0, r4
 80090fc:	f002 fd6c 	bl	800bbd8 <_Bfree>
 8009100:	9905      	ldr	r1, [sp, #20]
 8009102:	4620      	mov	r0, r4
 8009104:	f002 fd68 	bl	800bbd8 <_Bfree>
 8009108:	4659      	mov	r1, fp
 800910a:	4620      	mov	r0, r4
 800910c:	f002 fd64 	bl	800bbd8 <_Bfree>
 8009110:	4629      	mov	r1, r5
 8009112:	4620      	mov	r0, r4
 8009114:	f002 fd60 	bl	800bbd8 <_Bfree>
 8009118:	e609      	b.n	8008d2e <_strtod_l+0x646>
 800911a:	f1b8 0f01 	cmp.w	r8, #1
 800911e:	d103      	bne.n	8009128 <_strtod_l+0xa40>
 8009120:	f1b9 0f00 	cmp.w	r9, #0
 8009124:	f43f ad95 	beq.w	8008c52 <_strtod_l+0x56a>
 8009128:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009280 <_strtod_l+0xb98>
 800912c:	4f60      	ldr	r7, [pc, #384]	; (80092b0 <_strtod_l+0xbc8>)
 800912e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009132:	2600      	movs	r6, #0
 8009134:	e7ae      	b.n	8009094 <_strtod_l+0x9ac>
 8009136:	4f5f      	ldr	r7, [pc, #380]	; (80092b4 <_strtod_l+0xbcc>)
 8009138:	2600      	movs	r6, #0
 800913a:	e7a7      	b.n	800908c <_strtod_l+0x9a4>
 800913c:	4b5d      	ldr	r3, [pc, #372]	; (80092b4 <_strtod_l+0xbcc>)
 800913e:	4630      	mov	r0, r6
 8009140:	4639      	mov	r1, r7
 8009142:	2200      	movs	r2, #0
 8009144:	f7f7 fa60 	bl	8000608 <__aeabi_dmul>
 8009148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800914a:	4606      	mov	r6, r0
 800914c:	460f      	mov	r7, r1
 800914e:	2b00      	cmp	r3, #0
 8009150:	d09c      	beq.n	800908c <_strtod_l+0x9a4>
 8009152:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009156:	e79d      	b.n	8009094 <_strtod_l+0x9ac>
 8009158:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009288 <_strtod_l+0xba0>
 800915c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009160:	ec57 6b17 	vmov	r6, r7, d7
 8009164:	e796      	b.n	8009094 <_strtod_l+0x9ac>
 8009166:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800916a:	9b04      	ldr	r3, [sp, #16]
 800916c:	46ca      	mov	sl, r9
 800916e:	2b00      	cmp	r3, #0
 8009170:	d1c2      	bne.n	80090f8 <_strtod_l+0xa10>
 8009172:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009176:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009178:	0d1b      	lsrs	r3, r3, #20
 800917a:	051b      	lsls	r3, r3, #20
 800917c:	429a      	cmp	r2, r3
 800917e:	d1bb      	bne.n	80090f8 <_strtod_l+0xa10>
 8009180:	4630      	mov	r0, r6
 8009182:	4639      	mov	r1, r7
 8009184:	f7f7 fda0 	bl	8000cc8 <__aeabi_d2lz>
 8009188:	f7f7 fa10 	bl	80005ac <__aeabi_l2d>
 800918c:	4602      	mov	r2, r0
 800918e:	460b      	mov	r3, r1
 8009190:	4630      	mov	r0, r6
 8009192:	4639      	mov	r1, r7
 8009194:	f7f7 f880 	bl	8000298 <__aeabi_dsub>
 8009198:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800919a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800919e:	ea43 0308 	orr.w	r3, r3, r8
 80091a2:	4313      	orrs	r3, r2
 80091a4:	4606      	mov	r6, r0
 80091a6:	460f      	mov	r7, r1
 80091a8:	d054      	beq.n	8009254 <_strtod_l+0xb6c>
 80091aa:	a339      	add	r3, pc, #228	; (adr r3, 8009290 <_strtod_l+0xba8>)
 80091ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b0:	f7f7 fc9c 	bl	8000aec <__aeabi_dcmplt>
 80091b4:	2800      	cmp	r0, #0
 80091b6:	f47f ace5 	bne.w	8008b84 <_strtod_l+0x49c>
 80091ba:	a337      	add	r3, pc, #220	; (adr r3, 8009298 <_strtod_l+0xbb0>)
 80091bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c0:	4630      	mov	r0, r6
 80091c2:	4639      	mov	r1, r7
 80091c4:	f7f7 fcb0 	bl	8000b28 <__aeabi_dcmpgt>
 80091c8:	2800      	cmp	r0, #0
 80091ca:	d095      	beq.n	80090f8 <_strtod_l+0xa10>
 80091cc:	e4da      	b.n	8008b84 <_strtod_l+0x49c>
 80091ce:	9b04      	ldr	r3, [sp, #16]
 80091d0:	b333      	cbz	r3, 8009220 <_strtod_l+0xb38>
 80091d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80091d8:	d822      	bhi.n	8009220 <_strtod_l+0xb38>
 80091da:	a331      	add	r3, pc, #196	; (adr r3, 80092a0 <_strtod_l+0xbb8>)
 80091dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e0:	4630      	mov	r0, r6
 80091e2:	4639      	mov	r1, r7
 80091e4:	f7f7 fc8c 	bl	8000b00 <__aeabi_dcmple>
 80091e8:	b1a0      	cbz	r0, 8009214 <_strtod_l+0xb2c>
 80091ea:	4639      	mov	r1, r7
 80091ec:	4630      	mov	r0, r6
 80091ee:	f7f7 fce3 	bl	8000bb8 <__aeabi_d2uiz>
 80091f2:	2801      	cmp	r0, #1
 80091f4:	bf38      	it	cc
 80091f6:	2001      	movcc	r0, #1
 80091f8:	f7f7 f98c 	bl	8000514 <__aeabi_ui2d>
 80091fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091fe:	4606      	mov	r6, r0
 8009200:	460f      	mov	r7, r1
 8009202:	bb23      	cbnz	r3, 800924e <_strtod_l+0xb66>
 8009204:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009208:	9010      	str	r0, [sp, #64]	; 0x40
 800920a:	9311      	str	r3, [sp, #68]	; 0x44
 800920c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009210:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009214:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009216:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009218:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800921c:	1a9b      	subs	r3, r3, r2
 800921e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009220:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009224:	eeb0 0a48 	vmov.f32	s0, s16
 8009228:	eef0 0a68 	vmov.f32	s1, s17
 800922c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009230:	f002 fffe 	bl	800c230 <__ulp>
 8009234:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009238:	ec53 2b10 	vmov	r2, r3, d0
 800923c:	f7f7 f9e4 	bl	8000608 <__aeabi_dmul>
 8009240:	ec53 2b18 	vmov	r2, r3, d8
 8009244:	f7f7 f82a 	bl	800029c <__adddf3>
 8009248:	4680      	mov	r8, r0
 800924a:	4689      	mov	r9, r1
 800924c:	e78d      	b.n	800916a <_strtod_l+0xa82>
 800924e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009252:	e7db      	b.n	800920c <_strtod_l+0xb24>
 8009254:	a314      	add	r3, pc, #80	; (adr r3, 80092a8 <_strtod_l+0xbc0>)
 8009256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925a:	f7f7 fc47 	bl	8000aec <__aeabi_dcmplt>
 800925e:	e7b3      	b.n	80091c8 <_strtod_l+0xae0>
 8009260:	2300      	movs	r3, #0
 8009262:	930a      	str	r3, [sp, #40]	; 0x28
 8009264:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009266:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009268:	6013      	str	r3, [r2, #0]
 800926a:	f7ff ba7c 	b.w	8008766 <_strtod_l+0x7e>
 800926e:	2a65      	cmp	r2, #101	; 0x65
 8009270:	f43f ab75 	beq.w	800895e <_strtod_l+0x276>
 8009274:	2a45      	cmp	r2, #69	; 0x45
 8009276:	f43f ab72 	beq.w	800895e <_strtod_l+0x276>
 800927a:	2301      	movs	r3, #1
 800927c:	f7ff bbaa 	b.w	80089d4 <_strtod_l+0x2ec>
 8009280:	00000000 	.word	0x00000000
 8009284:	bff00000 	.word	0xbff00000
 8009288:	00000000 	.word	0x00000000
 800928c:	3ff00000 	.word	0x3ff00000
 8009290:	94a03595 	.word	0x94a03595
 8009294:	3fdfffff 	.word	0x3fdfffff
 8009298:	35afe535 	.word	0x35afe535
 800929c:	3fe00000 	.word	0x3fe00000
 80092a0:	ffc00000 	.word	0xffc00000
 80092a4:	41dfffff 	.word	0x41dfffff
 80092a8:	94a03595 	.word	0x94a03595
 80092ac:	3fcfffff 	.word	0x3fcfffff
 80092b0:	3ff00000 	.word	0x3ff00000
 80092b4:	3fe00000 	.word	0x3fe00000
 80092b8:	7ff00000 	.word	0x7ff00000
 80092bc:	7fe00000 	.word	0x7fe00000
 80092c0:	7c9fffff 	.word	0x7c9fffff
 80092c4:	7fefffff 	.word	0x7fefffff

080092c8 <_strtod_r>:
 80092c8:	4b01      	ldr	r3, [pc, #4]	; (80092d0 <_strtod_r+0x8>)
 80092ca:	f7ff ba0d 	b.w	80086e8 <_strtod_l>
 80092ce:	bf00      	nop
 80092d0:	20000084 	.word	0x20000084

080092d4 <strtof>:
 80092d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092d8:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800939c <strtof+0xc8>
 80092dc:	4b2a      	ldr	r3, [pc, #168]	; (8009388 <strtof+0xb4>)
 80092de:	460a      	mov	r2, r1
 80092e0:	ed2d 8b02 	vpush	{d8}
 80092e4:	4601      	mov	r1, r0
 80092e6:	f8d8 0000 	ldr.w	r0, [r8]
 80092ea:	f7ff f9fd 	bl	80086e8 <_strtod_l>
 80092ee:	ec55 4b10 	vmov	r4, r5, d0
 80092f2:	ee10 2a10 	vmov	r2, s0
 80092f6:	ee10 0a10 	vmov	r0, s0
 80092fa:	462b      	mov	r3, r5
 80092fc:	4629      	mov	r1, r5
 80092fe:	f7f7 fc1d 	bl	8000b3c <__aeabi_dcmpun>
 8009302:	b190      	cbz	r0, 800932a <strtof+0x56>
 8009304:	2d00      	cmp	r5, #0
 8009306:	4821      	ldr	r0, [pc, #132]	; (800938c <strtof+0xb8>)
 8009308:	da09      	bge.n	800931e <strtof+0x4a>
 800930a:	f001 f939 	bl	800a580 <nanf>
 800930e:	eeb1 8a40 	vneg.f32	s16, s0
 8009312:	eeb0 0a48 	vmov.f32	s0, s16
 8009316:	ecbd 8b02 	vpop	{d8}
 800931a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800931e:	ecbd 8b02 	vpop	{d8}
 8009322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009326:	f001 b92b 	b.w	800a580 <nanf>
 800932a:	4620      	mov	r0, r4
 800932c:	4629      	mov	r1, r5
 800932e:	f7f7 fc63 	bl	8000bf8 <__aeabi_d2f>
 8009332:	ee08 0a10 	vmov	s16, r0
 8009336:	eddf 7a16 	vldr	s15, [pc, #88]	; 8009390 <strtof+0xbc>
 800933a:	eeb0 7ac8 	vabs.f32	s14, s16
 800933e:	eeb4 7a67 	vcmp.f32	s14, s15
 8009342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009346:	dd11      	ble.n	800936c <strtof+0x98>
 8009348:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800934c:	4b11      	ldr	r3, [pc, #68]	; (8009394 <strtof+0xc0>)
 800934e:	f04f 32ff 	mov.w	r2, #4294967295
 8009352:	4620      	mov	r0, r4
 8009354:	4639      	mov	r1, r7
 8009356:	f7f7 fbf1 	bl	8000b3c <__aeabi_dcmpun>
 800935a:	b980      	cbnz	r0, 800937e <strtof+0xaa>
 800935c:	4b0d      	ldr	r3, [pc, #52]	; (8009394 <strtof+0xc0>)
 800935e:	f04f 32ff 	mov.w	r2, #4294967295
 8009362:	4620      	mov	r0, r4
 8009364:	4639      	mov	r1, r7
 8009366:	f7f7 fbcb 	bl	8000b00 <__aeabi_dcmple>
 800936a:	b940      	cbnz	r0, 800937e <strtof+0xaa>
 800936c:	ee18 3a10 	vmov	r3, s16
 8009370:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8009374:	d1cd      	bne.n	8009312 <strtof+0x3e>
 8009376:	4b08      	ldr	r3, [pc, #32]	; (8009398 <strtof+0xc4>)
 8009378:	402b      	ands	r3, r5
 800937a:	2b00      	cmp	r3, #0
 800937c:	d0c9      	beq.n	8009312 <strtof+0x3e>
 800937e:	f8d8 3000 	ldr.w	r3, [r8]
 8009382:	2222      	movs	r2, #34	; 0x22
 8009384:	601a      	str	r2, [r3, #0]
 8009386:	e7c4      	b.n	8009312 <strtof+0x3e>
 8009388:	20000084 	.word	0x20000084
 800938c:	0800da10 	.word	0x0800da10
 8009390:	7f7fffff 	.word	0x7f7fffff
 8009394:	7fefffff 	.word	0x7fefffff
 8009398:	7ff00000 	.word	0x7ff00000
 800939c:	2000023c 	.word	0x2000023c

080093a0 <_strtol_l.constprop.0>:
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093a6:	d001      	beq.n	80093ac <_strtol_l.constprop.0+0xc>
 80093a8:	2b24      	cmp	r3, #36	; 0x24
 80093aa:	d906      	bls.n	80093ba <_strtol_l.constprop.0+0x1a>
 80093ac:	f001 f8a2 	bl	800a4f4 <__errno>
 80093b0:	2316      	movs	r3, #22
 80093b2:	6003      	str	r3, [r0, #0]
 80093b4:	2000      	movs	r0, #0
 80093b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80094a0 <_strtol_l.constprop.0+0x100>
 80093be:	460d      	mov	r5, r1
 80093c0:	462e      	mov	r6, r5
 80093c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80093c6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80093ca:	f017 0708 	ands.w	r7, r7, #8
 80093ce:	d1f7      	bne.n	80093c0 <_strtol_l.constprop.0+0x20>
 80093d0:	2c2d      	cmp	r4, #45	; 0x2d
 80093d2:	d132      	bne.n	800943a <_strtol_l.constprop.0+0x9a>
 80093d4:	782c      	ldrb	r4, [r5, #0]
 80093d6:	2701      	movs	r7, #1
 80093d8:	1cb5      	adds	r5, r6, #2
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d05b      	beq.n	8009496 <_strtol_l.constprop.0+0xf6>
 80093de:	2b10      	cmp	r3, #16
 80093e0:	d109      	bne.n	80093f6 <_strtol_l.constprop.0+0x56>
 80093e2:	2c30      	cmp	r4, #48	; 0x30
 80093e4:	d107      	bne.n	80093f6 <_strtol_l.constprop.0+0x56>
 80093e6:	782c      	ldrb	r4, [r5, #0]
 80093e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80093ec:	2c58      	cmp	r4, #88	; 0x58
 80093ee:	d14d      	bne.n	800948c <_strtol_l.constprop.0+0xec>
 80093f0:	786c      	ldrb	r4, [r5, #1]
 80093f2:	2310      	movs	r3, #16
 80093f4:	3502      	adds	r5, #2
 80093f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80093fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80093fe:	f04f 0e00 	mov.w	lr, #0
 8009402:	fbb8 f9f3 	udiv	r9, r8, r3
 8009406:	4676      	mov	r6, lr
 8009408:	fb03 8a19 	mls	sl, r3, r9, r8
 800940c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009410:	f1bc 0f09 	cmp.w	ip, #9
 8009414:	d816      	bhi.n	8009444 <_strtol_l.constprop.0+0xa4>
 8009416:	4664      	mov	r4, ip
 8009418:	42a3      	cmp	r3, r4
 800941a:	dd24      	ble.n	8009466 <_strtol_l.constprop.0+0xc6>
 800941c:	f1be 3fff 	cmp.w	lr, #4294967295
 8009420:	d008      	beq.n	8009434 <_strtol_l.constprop.0+0x94>
 8009422:	45b1      	cmp	r9, r6
 8009424:	d31c      	bcc.n	8009460 <_strtol_l.constprop.0+0xc0>
 8009426:	d101      	bne.n	800942c <_strtol_l.constprop.0+0x8c>
 8009428:	45a2      	cmp	sl, r4
 800942a:	db19      	blt.n	8009460 <_strtol_l.constprop.0+0xc0>
 800942c:	fb06 4603 	mla	r6, r6, r3, r4
 8009430:	f04f 0e01 	mov.w	lr, #1
 8009434:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009438:	e7e8      	b.n	800940c <_strtol_l.constprop.0+0x6c>
 800943a:	2c2b      	cmp	r4, #43	; 0x2b
 800943c:	bf04      	itt	eq
 800943e:	782c      	ldrbeq	r4, [r5, #0]
 8009440:	1cb5      	addeq	r5, r6, #2
 8009442:	e7ca      	b.n	80093da <_strtol_l.constprop.0+0x3a>
 8009444:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009448:	f1bc 0f19 	cmp.w	ip, #25
 800944c:	d801      	bhi.n	8009452 <_strtol_l.constprop.0+0xb2>
 800944e:	3c37      	subs	r4, #55	; 0x37
 8009450:	e7e2      	b.n	8009418 <_strtol_l.constprop.0+0x78>
 8009452:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009456:	f1bc 0f19 	cmp.w	ip, #25
 800945a:	d804      	bhi.n	8009466 <_strtol_l.constprop.0+0xc6>
 800945c:	3c57      	subs	r4, #87	; 0x57
 800945e:	e7db      	b.n	8009418 <_strtol_l.constprop.0+0x78>
 8009460:	f04f 3eff 	mov.w	lr, #4294967295
 8009464:	e7e6      	b.n	8009434 <_strtol_l.constprop.0+0x94>
 8009466:	f1be 3fff 	cmp.w	lr, #4294967295
 800946a:	d105      	bne.n	8009478 <_strtol_l.constprop.0+0xd8>
 800946c:	2322      	movs	r3, #34	; 0x22
 800946e:	6003      	str	r3, [r0, #0]
 8009470:	4646      	mov	r6, r8
 8009472:	b942      	cbnz	r2, 8009486 <_strtol_l.constprop.0+0xe6>
 8009474:	4630      	mov	r0, r6
 8009476:	e79e      	b.n	80093b6 <_strtol_l.constprop.0+0x16>
 8009478:	b107      	cbz	r7, 800947c <_strtol_l.constprop.0+0xdc>
 800947a:	4276      	negs	r6, r6
 800947c:	2a00      	cmp	r2, #0
 800947e:	d0f9      	beq.n	8009474 <_strtol_l.constprop.0+0xd4>
 8009480:	f1be 0f00 	cmp.w	lr, #0
 8009484:	d000      	beq.n	8009488 <_strtol_l.constprop.0+0xe8>
 8009486:	1e69      	subs	r1, r5, #1
 8009488:	6011      	str	r1, [r2, #0]
 800948a:	e7f3      	b.n	8009474 <_strtol_l.constprop.0+0xd4>
 800948c:	2430      	movs	r4, #48	; 0x30
 800948e:	2b00      	cmp	r3, #0
 8009490:	d1b1      	bne.n	80093f6 <_strtol_l.constprop.0+0x56>
 8009492:	2308      	movs	r3, #8
 8009494:	e7af      	b.n	80093f6 <_strtol_l.constprop.0+0x56>
 8009496:	2c30      	cmp	r4, #48	; 0x30
 8009498:	d0a5      	beq.n	80093e6 <_strtol_l.constprop.0+0x46>
 800949a:	230a      	movs	r3, #10
 800949c:	e7ab      	b.n	80093f6 <_strtol_l.constprop.0+0x56>
 800949e:	bf00      	nop
 80094a0:	0800d641 	.word	0x0800d641

080094a4 <_strtol_r>:
 80094a4:	f7ff bf7c 	b.w	80093a0 <_strtol_l.constprop.0>

080094a8 <strtol>:
 80094a8:	4613      	mov	r3, r2
 80094aa:	460a      	mov	r2, r1
 80094ac:	4601      	mov	r1, r0
 80094ae:	4802      	ldr	r0, [pc, #8]	; (80094b8 <strtol+0x10>)
 80094b0:	6800      	ldr	r0, [r0, #0]
 80094b2:	f7ff bf75 	b.w	80093a0 <_strtol_l.constprop.0>
 80094b6:	bf00      	nop
 80094b8:	2000023c 	.word	0x2000023c

080094bc <tolower>:
 80094bc:	4b03      	ldr	r3, [pc, #12]	; (80094cc <tolower+0x10>)
 80094be:	5c1b      	ldrb	r3, [r3, r0]
 80094c0:	f003 0303 	and.w	r3, r3, #3
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	bf08      	it	eq
 80094c8:	3020      	addeq	r0, #32
 80094ca:	4770      	bx	lr
 80094cc:	0800d641 	.word	0x0800d641

080094d0 <__cvt>:
 80094d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094d4:	ec55 4b10 	vmov	r4, r5, d0
 80094d8:	2d00      	cmp	r5, #0
 80094da:	460e      	mov	r6, r1
 80094dc:	4619      	mov	r1, r3
 80094de:	462b      	mov	r3, r5
 80094e0:	bfbb      	ittet	lt
 80094e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80094e6:	461d      	movlt	r5, r3
 80094e8:	2300      	movge	r3, #0
 80094ea:	232d      	movlt	r3, #45	; 0x2d
 80094ec:	700b      	strb	r3, [r1, #0]
 80094ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80094f4:	4691      	mov	r9, r2
 80094f6:	f023 0820 	bic.w	r8, r3, #32
 80094fa:	bfbc      	itt	lt
 80094fc:	4622      	movlt	r2, r4
 80094fe:	4614      	movlt	r4, r2
 8009500:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009504:	d005      	beq.n	8009512 <__cvt+0x42>
 8009506:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800950a:	d100      	bne.n	800950e <__cvt+0x3e>
 800950c:	3601      	adds	r6, #1
 800950e:	2102      	movs	r1, #2
 8009510:	e000      	b.n	8009514 <__cvt+0x44>
 8009512:	2103      	movs	r1, #3
 8009514:	ab03      	add	r3, sp, #12
 8009516:	9301      	str	r3, [sp, #4]
 8009518:	ab02      	add	r3, sp, #8
 800951a:	9300      	str	r3, [sp, #0]
 800951c:	ec45 4b10 	vmov	d0, r4, r5
 8009520:	4653      	mov	r3, sl
 8009522:	4632      	mov	r2, r6
 8009524:	f001 f8bc 	bl	800a6a0 <_dtoa_r>
 8009528:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800952c:	4607      	mov	r7, r0
 800952e:	d102      	bne.n	8009536 <__cvt+0x66>
 8009530:	f019 0f01 	tst.w	r9, #1
 8009534:	d022      	beq.n	800957c <__cvt+0xac>
 8009536:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800953a:	eb07 0906 	add.w	r9, r7, r6
 800953e:	d110      	bne.n	8009562 <__cvt+0x92>
 8009540:	783b      	ldrb	r3, [r7, #0]
 8009542:	2b30      	cmp	r3, #48	; 0x30
 8009544:	d10a      	bne.n	800955c <__cvt+0x8c>
 8009546:	2200      	movs	r2, #0
 8009548:	2300      	movs	r3, #0
 800954a:	4620      	mov	r0, r4
 800954c:	4629      	mov	r1, r5
 800954e:	f7f7 fac3 	bl	8000ad8 <__aeabi_dcmpeq>
 8009552:	b918      	cbnz	r0, 800955c <__cvt+0x8c>
 8009554:	f1c6 0601 	rsb	r6, r6, #1
 8009558:	f8ca 6000 	str.w	r6, [sl]
 800955c:	f8da 3000 	ldr.w	r3, [sl]
 8009560:	4499      	add	r9, r3
 8009562:	2200      	movs	r2, #0
 8009564:	2300      	movs	r3, #0
 8009566:	4620      	mov	r0, r4
 8009568:	4629      	mov	r1, r5
 800956a:	f7f7 fab5 	bl	8000ad8 <__aeabi_dcmpeq>
 800956e:	b108      	cbz	r0, 8009574 <__cvt+0xa4>
 8009570:	f8cd 900c 	str.w	r9, [sp, #12]
 8009574:	2230      	movs	r2, #48	; 0x30
 8009576:	9b03      	ldr	r3, [sp, #12]
 8009578:	454b      	cmp	r3, r9
 800957a:	d307      	bcc.n	800958c <__cvt+0xbc>
 800957c:	9b03      	ldr	r3, [sp, #12]
 800957e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009580:	1bdb      	subs	r3, r3, r7
 8009582:	4638      	mov	r0, r7
 8009584:	6013      	str	r3, [r2, #0]
 8009586:	b004      	add	sp, #16
 8009588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800958c:	1c59      	adds	r1, r3, #1
 800958e:	9103      	str	r1, [sp, #12]
 8009590:	701a      	strb	r2, [r3, #0]
 8009592:	e7f0      	b.n	8009576 <__cvt+0xa6>

08009594 <__exponent>:
 8009594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009596:	4603      	mov	r3, r0
 8009598:	2900      	cmp	r1, #0
 800959a:	bfb8      	it	lt
 800959c:	4249      	neglt	r1, r1
 800959e:	f803 2b02 	strb.w	r2, [r3], #2
 80095a2:	bfb4      	ite	lt
 80095a4:	222d      	movlt	r2, #45	; 0x2d
 80095a6:	222b      	movge	r2, #43	; 0x2b
 80095a8:	2909      	cmp	r1, #9
 80095aa:	7042      	strb	r2, [r0, #1]
 80095ac:	dd2a      	ble.n	8009604 <__exponent+0x70>
 80095ae:	f10d 0207 	add.w	r2, sp, #7
 80095b2:	4617      	mov	r7, r2
 80095b4:	260a      	movs	r6, #10
 80095b6:	4694      	mov	ip, r2
 80095b8:	fb91 f5f6 	sdiv	r5, r1, r6
 80095bc:	fb06 1415 	mls	r4, r6, r5, r1
 80095c0:	3430      	adds	r4, #48	; 0x30
 80095c2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80095c6:	460c      	mov	r4, r1
 80095c8:	2c63      	cmp	r4, #99	; 0x63
 80095ca:	f102 32ff 	add.w	r2, r2, #4294967295
 80095ce:	4629      	mov	r1, r5
 80095d0:	dcf1      	bgt.n	80095b6 <__exponent+0x22>
 80095d2:	3130      	adds	r1, #48	; 0x30
 80095d4:	f1ac 0402 	sub.w	r4, ip, #2
 80095d8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80095dc:	1c41      	adds	r1, r0, #1
 80095de:	4622      	mov	r2, r4
 80095e0:	42ba      	cmp	r2, r7
 80095e2:	d30a      	bcc.n	80095fa <__exponent+0x66>
 80095e4:	f10d 0209 	add.w	r2, sp, #9
 80095e8:	eba2 020c 	sub.w	r2, r2, ip
 80095ec:	42bc      	cmp	r4, r7
 80095ee:	bf88      	it	hi
 80095f0:	2200      	movhi	r2, #0
 80095f2:	4413      	add	r3, r2
 80095f4:	1a18      	subs	r0, r3, r0
 80095f6:	b003      	add	sp, #12
 80095f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095fa:	f812 5b01 	ldrb.w	r5, [r2], #1
 80095fe:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009602:	e7ed      	b.n	80095e0 <__exponent+0x4c>
 8009604:	2330      	movs	r3, #48	; 0x30
 8009606:	3130      	adds	r1, #48	; 0x30
 8009608:	7083      	strb	r3, [r0, #2]
 800960a:	70c1      	strb	r1, [r0, #3]
 800960c:	1d03      	adds	r3, r0, #4
 800960e:	e7f1      	b.n	80095f4 <__exponent+0x60>

08009610 <_printf_float>:
 8009610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009614:	ed2d 8b02 	vpush	{d8}
 8009618:	b08d      	sub	sp, #52	; 0x34
 800961a:	460c      	mov	r4, r1
 800961c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009620:	4616      	mov	r6, r2
 8009622:	461f      	mov	r7, r3
 8009624:	4605      	mov	r5, r0
 8009626:	f000 ff1b 	bl	800a460 <_localeconv_r>
 800962a:	f8d0 a000 	ldr.w	sl, [r0]
 800962e:	4650      	mov	r0, sl
 8009630:	f7f6 fe26 	bl	8000280 <strlen>
 8009634:	2300      	movs	r3, #0
 8009636:	930a      	str	r3, [sp, #40]	; 0x28
 8009638:	6823      	ldr	r3, [r4, #0]
 800963a:	9305      	str	r3, [sp, #20]
 800963c:	f8d8 3000 	ldr.w	r3, [r8]
 8009640:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009644:	3307      	adds	r3, #7
 8009646:	f023 0307 	bic.w	r3, r3, #7
 800964a:	f103 0208 	add.w	r2, r3, #8
 800964e:	f8c8 2000 	str.w	r2, [r8]
 8009652:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009656:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800965a:	9307      	str	r3, [sp, #28]
 800965c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009660:	ee08 0a10 	vmov	s16, r0
 8009664:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009668:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800966c:	4b9e      	ldr	r3, [pc, #632]	; (80098e8 <_printf_float+0x2d8>)
 800966e:	f04f 32ff 	mov.w	r2, #4294967295
 8009672:	f7f7 fa63 	bl	8000b3c <__aeabi_dcmpun>
 8009676:	bb88      	cbnz	r0, 80096dc <_printf_float+0xcc>
 8009678:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800967c:	4b9a      	ldr	r3, [pc, #616]	; (80098e8 <_printf_float+0x2d8>)
 800967e:	f04f 32ff 	mov.w	r2, #4294967295
 8009682:	f7f7 fa3d 	bl	8000b00 <__aeabi_dcmple>
 8009686:	bb48      	cbnz	r0, 80096dc <_printf_float+0xcc>
 8009688:	2200      	movs	r2, #0
 800968a:	2300      	movs	r3, #0
 800968c:	4640      	mov	r0, r8
 800968e:	4649      	mov	r1, r9
 8009690:	f7f7 fa2c 	bl	8000aec <__aeabi_dcmplt>
 8009694:	b110      	cbz	r0, 800969c <_printf_float+0x8c>
 8009696:	232d      	movs	r3, #45	; 0x2d
 8009698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800969c:	4a93      	ldr	r2, [pc, #588]	; (80098ec <_printf_float+0x2dc>)
 800969e:	4b94      	ldr	r3, [pc, #592]	; (80098f0 <_printf_float+0x2e0>)
 80096a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80096a4:	bf94      	ite	ls
 80096a6:	4690      	movls	r8, r2
 80096a8:	4698      	movhi	r8, r3
 80096aa:	2303      	movs	r3, #3
 80096ac:	6123      	str	r3, [r4, #16]
 80096ae:	9b05      	ldr	r3, [sp, #20]
 80096b0:	f023 0304 	bic.w	r3, r3, #4
 80096b4:	6023      	str	r3, [r4, #0]
 80096b6:	f04f 0900 	mov.w	r9, #0
 80096ba:	9700      	str	r7, [sp, #0]
 80096bc:	4633      	mov	r3, r6
 80096be:	aa0b      	add	r2, sp, #44	; 0x2c
 80096c0:	4621      	mov	r1, r4
 80096c2:	4628      	mov	r0, r5
 80096c4:	f000 f9da 	bl	8009a7c <_printf_common>
 80096c8:	3001      	adds	r0, #1
 80096ca:	f040 8090 	bne.w	80097ee <_printf_float+0x1de>
 80096ce:	f04f 30ff 	mov.w	r0, #4294967295
 80096d2:	b00d      	add	sp, #52	; 0x34
 80096d4:	ecbd 8b02 	vpop	{d8}
 80096d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096dc:	4642      	mov	r2, r8
 80096de:	464b      	mov	r3, r9
 80096e0:	4640      	mov	r0, r8
 80096e2:	4649      	mov	r1, r9
 80096e4:	f7f7 fa2a 	bl	8000b3c <__aeabi_dcmpun>
 80096e8:	b140      	cbz	r0, 80096fc <_printf_float+0xec>
 80096ea:	464b      	mov	r3, r9
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	bfbc      	itt	lt
 80096f0:	232d      	movlt	r3, #45	; 0x2d
 80096f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80096f6:	4a7f      	ldr	r2, [pc, #508]	; (80098f4 <_printf_float+0x2e4>)
 80096f8:	4b7f      	ldr	r3, [pc, #508]	; (80098f8 <_printf_float+0x2e8>)
 80096fa:	e7d1      	b.n	80096a0 <_printf_float+0x90>
 80096fc:	6863      	ldr	r3, [r4, #4]
 80096fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009702:	9206      	str	r2, [sp, #24]
 8009704:	1c5a      	adds	r2, r3, #1
 8009706:	d13f      	bne.n	8009788 <_printf_float+0x178>
 8009708:	2306      	movs	r3, #6
 800970a:	6063      	str	r3, [r4, #4]
 800970c:	9b05      	ldr	r3, [sp, #20]
 800970e:	6861      	ldr	r1, [r4, #4]
 8009710:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009714:	2300      	movs	r3, #0
 8009716:	9303      	str	r3, [sp, #12]
 8009718:	ab0a      	add	r3, sp, #40	; 0x28
 800971a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800971e:	ab09      	add	r3, sp, #36	; 0x24
 8009720:	ec49 8b10 	vmov	d0, r8, r9
 8009724:	9300      	str	r3, [sp, #0]
 8009726:	6022      	str	r2, [r4, #0]
 8009728:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800972c:	4628      	mov	r0, r5
 800972e:	f7ff fecf 	bl	80094d0 <__cvt>
 8009732:	9b06      	ldr	r3, [sp, #24]
 8009734:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009736:	2b47      	cmp	r3, #71	; 0x47
 8009738:	4680      	mov	r8, r0
 800973a:	d108      	bne.n	800974e <_printf_float+0x13e>
 800973c:	1cc8      	adds	r0, r1, #3
 800973e:	db02      	blt.n	8009746 <_printf_float+0x136>
 8009740:	6863      	ldr	r3, [r4, #4]
 8009742:	4299      	cmp	r1, r3
 8009744:	dd41      	ble.n	80097ca <_printf_float+0x1ba>
 8009746:	f1ab 0302 	sub.w	r3, fp, #2
 800974a:	fa5f fb83 	uxtb.w	fp, r3
 800974e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009752:	d820      	bhi.n	8009796 <_printf_float+0x186>
 8009754:	3901      	subs	r1, #1
 8009756:	465a      	mov	r2, fp
 8009758:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800975c:	9109      	str	r1, [sp, #36]	; 0x24
 800975e:	f7ff ff19 	bl	8009594 <__exponent>
 8009762:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009764:	1813      	adds	r3, r2, r0
 8009766:	2a01      	cmp	r2, #1
 8009768:	4681      	mov	r9, r0
 800976a:	6123      	str	r3, [r4, #16]
 800976c:	dc02      	bgt.n	8009774 <_printf_float+0x164>
 800976e:	6822      	ldr	r2, [r4, #0]
 8009770:	07d2      	lsls	r2, r2, #31
 8009772:	d501      	bpl.n	8009778 <_printf_float+0x168>
 8009774:	3301      	adds	r3, #1
 8009776:	6123      	str	r3, [r4, #16]
 8009778:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800977c:	2b00      	cmp	r3, #0
 800977e:	d09c      	beq.n	80096ba <_printf_float+0xaa>
 8009780:	232d      	movs	r3, #45	; 0x2d
 8009782:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009786:	e798      	b.n	80096ba <_printf_float+0xaa>
 8009788:	9a06      	ldr	r2, [sp, #24]
 800978a:	2a47      	cmp	r2, #71	; 0x47
 800978c:	d1be      	bne.n	800970c <_printf_float+0xfc>
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1bc      	bne.n	800970c <_printf_float+0xfc>
 8009792:	2301      	movs	r3, #1
 8009794:	e7b9      	b.n	800970a <_printf_float+0xfa>
 8009796:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800979a:	d118      	bne.n	80097ce <_printf_float+0x1be>
 800979c:	2900      	cmp	r1, #0
 800979e:	6863      	ldr	r3, [r4, #4]
 80097a0:	dd0b      	ble.n	80097ba <_printf_float+0x1aa>
 80097a2:	6121      	str	r1, [r4, #16]
 80097a4:	b913      	cbnz	r3, 80097ac <_printf_float+0x19c>
 80097a6:	6822      	ldr	r2, [r4, #0]
 80097a8:	07d0      	lsls	r0, r2, #31
 80097aa:	d502      	bpl.n	80097b2 <_printf_float+0x1a2>
 80097ac:	3301      	adds	r3, #1
 80097ae:	440b      	add	r3, r1
 80097b0:	6123      	str	r3, [r4, #16]
 80097b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80097b4:	f04f 0900 	mov.w	r9, #0
 80097b8:	e7de      	b.n	8009778 <_printf_float+0x168>
 80097ba:	b913      	cbnz	r3, 80097c2 <_printf_float+0x1b2>
 80097bc:	6822      	ldr	r2, [r4, #0]
 80097be:	07d2      	lsls	r2, r2, #31
 80097c0:	d501      	bpl.n	80097c6 <_printf_float+0x1b6>
 80097c2:	3302      	adds	r3, #2
 80097c4:	e7f4      	b.n	80097b0 <_printf_float+0x1a0>
 80097c6:	2301      	movs	r3, #1
 80097c8:	e7f2      	b.n	80097b0 <_printf_float+0x1a0>
 80097ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80097ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097d0:	4299      	cmp	r1, r3
 80097d2:	db05      	blt.n	80097e0 <_printf_float+0x1d0>
 80097d4:	6823      	ldr	r3, [r4, #0]
 80097d6:	6121      	str	r1, [r4, #16]
 80097d8:	07d8      	lsls	r0, r3, #31
 80097da:	d5ea      	bpl.n	80097b2 <_printf_float+0x1a2>
 80097dc:	1c4b      	adds	r3, r1, #1
 80097de:	e7e7      	b.n	80097b0 <_printf_float+0x1a0>
 80097e0:	2900      	cmp	r1, #0
 80097e2:	bfd4      	ite	le
 80097e4:	f1c1 0202 	rsble	r2, r1, #2
 80097e8:	2201      	movgt	r2, #1
 80097ea:	4413      	add	r3, r2
 80097ec:	e7e0      	b.n	80097b0 <_printf_float+0x1a0>
 80097ee:	6823      	ldr	r3, [r4, #0]
 80097f0:	055a      	lsls	r2, r3, #21
 80097f2:	d407      	bmi.n	8009804 <_printf_float+0x1f4>
 80097f4:	6923      	ldr	r3, [r4, #16]
 80097f6:	4642      	mov	r2, r8
 80097f8:	4631      	mov	r1, r6
 80097fa:	4628      	mov	r0, r5
 80097fc:	47b8      	blx	r7
 80097fe:	3001      	adds	r0, #1
 8009800:	d12c      	bne.n	800985c <_printf_float+0x24c>
 8009802:	e764      	b.n	80096ce <_printf_float+0xbe>
 8009804:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009808:	f240 80e0 	bls.w	80099cc <_printf_float+0x3bc>
 800980c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009810:	2200      	movs	r2, #0
 8009812:	2300      	movs	r3, #0
 8009814:	f7f7 f960 	bl	8000ad8 <__aeabi_dcmpeq>
 8009818:	2800      	cmp	r0, #0
 800981a:	d034      	beq.n	8009886 <_printf_float+0x276>
 800981c:	4a37      	ldr	r2, [pc, #220]	; (80098fc <_printf_float+0x2ec>)
 800981e:	2301      	movs	r3, #1
 8009820:	4631      	mov	r1, r6
 8009822:	4628      	mov	r0, r5
 8009824:	47b8      	blx	r7
 8009826:	3001      	adds	r0, #1
 8009828:	f43f af51 	beq.w	80096ce <_printf_float+0xbe>
 800982c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009830:	429a      	cmp	r2, r3
 8009832:	db02      	blt.n	800983a <_printf_float+0x22a>
 8009834:	6823      	ldr	r3, [r4, #0]
 8009836:	07d8      	lsls	r0, r3, #31
 8009838:	d510      	bpl.n	800985c <_printf_float+0x24c>
 800983a:	ee18 3a10 	vmov	r3, s16
 800983e:	4652      	mov	r2, sl
 8009840:	4631      	mov	r1, r6
 8009842:	4628      	mov	r0, r5
 8009844:	47b8      	blx	r7
 8009846:	3001      	adds	r0, #1
 8009848:	f43f af41 	beq.w	80096ce <_printf_float+0xbe>
 800984c:	f04f 0800 	mov.w	r8, #0
 8009850:	f104 091a 	add.w	r9, r4, #26
 8009854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009856:	3b01      	subs	r3, #1
 8009858:	4543      	cmp	r3, r8
 800985a:	dc09      	bgt.n	8009870 <_printf_float+0x260>
 800985c:	6823      	ldr	r3, [r4, #0]
 800985e:	079b      	lsls	r3, r3, #30
 8009860:	f100 8107 	bmi.w	8009a72 <_printf_float+0x462>
 8009864:	68e0      	ldr	r0, [r4, #12]
 8009866:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009868:	4298      	cmp	r0, r3
 800986a:	bfb8      	it	lt
 800986c:	4618      	movlt	r0, r3
 800986e:	e730      	b.n	80096d2 <_printf_float+0xc2>
 8009870:	2301      	movs	r3, #1
 8009872:	464a      	mov	r2, r9
 8009874:	4631      	mov	r1, r6
 8009876:	4628      	mov	r0, r5
 8009878:	47b8      	blx	r7
 800987a:	3001      	adds	r0, #1
 800987c:	f43f af27 	beq.w	80096ce <_printf_float+0xbe>
 8009880:	f108 0801 	add.w	r8, r8, #1
 8009884:	e7e6      	b.n	8009854 <_printf_float+0x244>
 8009886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009888:	2b00      	cmp	r3, #0
 800988a:	dc39      	bgt.n	8009900 <_printf_float+0x2f0>
 800988c:	4a1b      	ldr	r2, [pc, #108]	; (80098fc <_printf_float+0x2ec>)
 800988e:	2301      	movs	r3, #1
 8009890:	4631      	mov	r1, r6
 8009892:	4628      	mov	r0, r5
 8009894:	47b8      	blx	r7
 8009896:	3001      	adds	r0, #1
 8009898:	f43f af19 	beq.w	80096ce <_printf_float+0xbe>
 800989c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80098a0:	4313      	orrs	r3, r2
 80098a2:	d102      	bne.n	80098aa <_printf_float+0x29a>
 80098a4:	6823      	ldr	r3, [r4, #0]
 80098a6:	07d9      	lsls	r1, r3, #31
 80098a8:	d5d8      	bpl.n	800985c <_printf_float+0x24c>
 80098aa:	ee18 3a10 	vmov	r3, s16
 80098ae:	4652      	mov	r2, sl
 80098b0:	4631      	mov	r1, r6
 80098b2:	4628      	mov	r0, r5
 80098b4:	47b8      	blx	r7
 80098b6:	3001      	adds	r0, #1
 80098b8:	f43f af09 	beq.w	80096ce <_printf_float+0xbe>
 80098bc:	f04f 0900 	mov.w	r9, #0
 80098c0:	f104 0a1a 	add.w	sl, r4, #26
 80098c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098c6:	425b      	negs	r3, r3
 80098c8:	454b      	cmp	r3, r9
 80098ca:	dc01      	bgt.n	80098d0 <_printf_float+0x2c0>
 80098cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098ce:	e792      	b.n	80097f6 <_printf_float+0x1e6>
 80098d0:	2301      	movs	r3, #1
 80098d2:	4652      	mov	r2, sl
 80098d4:	4631      	mov	r1, r6
 80098d6:	4628      	mov	r0, r5
 80098d8:	47b8      	blx	r7
 80098da:	3001      	adds	r0, #1
 80098dc:	f43f aef7 	beq.w	80096ce <_printf_float+0xbe>
 80098e0:	f109 0901 	add.w	r9, r9, #1
 80098e4:	e7ee      	b.n	80098c4 <_printf_float+0x2b4>
 80098e6:	bf00      	nop
 80098e8:	7fefffff 	.word	0x7fefffff
 80098ec:	0800d741 	.word	0x0800d741
 80098f0:	0800d745 	.word	0x0800d745
 80098f4:	0800d749 	.word	0x0800d749
 80098f8:	0800d74d 	.word	0x0800d74d
 80098fc:	0800d751 	.word	0x0800d751
 8009900:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009902:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009904:	429a      	cmp	r2, r3
 8009906:	bfa8      	it	ge
 8009908:	461a      	movge	r2, r3
 800990a:	2a00      	cmp	r2, #0
 800990c:	4691      	mov	r9, r2
 800990e:	dc37      	bgt.n	8009980 <_printf_float+0x370>
 8009910:	f04f 0b00 	mov.w	fp, #0
 8009914:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009918:	f104 021a 	add.w	r2, r4, #26
 800991c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800991e:	9305      	str	r3, [sp, #20]
 8009920:	eba3 0309 	sub.w	r3, r3, r9
 8009924:	455b      	cmp	r3, fp
 8009926:	dc33      	bgt.n	8009990 <_printf_float+0x380>
 8009928:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800992c:	429a      	cmp	r2, r3
 800992e:	db3b      	blt.n	80099a8 <_printf_float+0x398>
 8009930:	6823      	ldr	r3, [r4, #0]
 8009932:	07da      	lsls	r2, r3, #31
 8009934:	d438      	bmi.n	80099a8 <_printf_float+0x398>
 8009936:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800993a:	eba2 0903 	sub.w	r9, r2, r3
 800993e:	9b05      	ldr	r3, [sp, #20]
 8009940:	1ad2      	subs	r2, r2, r3
 8009942:	4591      	cmp	r9, r2
 8009944:	bfa8      	it	ge
 8009946:	4691      	movge	r9, r2
 8009948:	f1b9 0f00 	cmp.w	r9, #0
 800994c:	dc35      	bgt.n	80099ba <_printf_float+0x3aa>
 800994e:	f04f 0800 	mov.w	r8, #0
 8009952:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009956:	f104 0a1a 	add.w	sl, r4, #26
 800995a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800995e:	1a9b      	subs	r3, r3, r2
 8009960:	eba3 0309 	sub.w	r3, r3, r9
 8009964:	4543      	cmp	r3, r8
 8009966:	f77f af79 	ble.w	800985c <_printf_float+0x24c>
 800996a:	2301      	movs	r3, #1
 800996c:	4652      	mov	r2, sl
 800996e:	4631      	mov	r1, r6
 8009970:	4628      	mov	r0, r5
 8009972:	47b8      	blx	r7
 8009974:	3001      	adds	r0, #1
 8009976:	f43f aeaa 	beq.w	80096ce <_printf_float+0xbe>
 800997a:	f108 0801 	add.w	r8, r8, #1
 800997e:	e7ec      	b.n	800995a <_printf_float+0x34a>
 8009980:	4613      	mov	r3, r2
 8009982:	4631      	mov	r1, r6
 8009984:	4642      	mov	r2, r8
 8009986:	4628      	mov	r0, r5
 8009988:	47b8      	blx	r7
 800998a:	3001      	adds	r0, #1
 800998c:	d1c0      	bne.n	8009910 <_printf_float+0x300>
 800998e:	e69e      	b.n	80096ce <_printf_float+0xbe>
 8009990:	2301      	movs	r3, #1
 8009992:	4631      	mov	r1, r6
 8009994:	4628      	mov	r0, r5
 8009996:	9205      	str	r2, [sp, #20]
 8009998:	47b8      	blx	r7
 800999a:	3001      	adds	r0, #1
 800999c:	f43f ae97 	beq.w	80096ce <_printf_float+0xbe>
 80099a0:	9a05      	ldr	r2, [sp, #20]
 80099a2:	f10b 0b01 	add.w	fp, fp, #1
 80099a6:	e7b9      	b.n	800991c <_printf_float+0x30c>
 80099a8:	ee18 3a10 	vmov	r3, s16
 80099ac:	4652      	mov	r2, sl
 80099ae:	4631      	mov	r1, r6
 80099b0:	4628      	mov	r0, r5
 80099b2:	47b8      	blx	r7
 80099b4:	3001      	adds	r0, #1
 80099b6:	d1be      	bne.n	8009936 <_printf_float+0x326>
 80099b8:	e689      	b.n	80096ce <_printf_float+0xbe>
 80099ba:	9a05      	ldr	r2, [sp, #20]
 80099bc:	464b      	mov	r3, r9
 80099be:	4442      	add	r2, r8
 80099c0:	4631      	mov	r1, r6
 80099c2:	4628      	mov	r0, r5
 80099c4:	47b8      	blx	r7
 80099c6:	3001      	adds	r0, #1
 80099c8:	d1c1      	bne.n	800994e <_printf_float+0x33e>
 80099ca:	e680      	b.n	80096ce <_printf_float+0xbe>
 80099cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099ce:	2a01      	cmp	r2, #1
 80099d0:	dc01      	bgt.n	80099d6 <_printf_float+0x3c6>
 80099d2:	07db      	lsls	r3, r3, #31
 80099d4:	d53a      	bpl.n	8009a4c <_printf_float+0x43c>
 80099d6:	2301      	movs	r3, #1
 80099d8:	4642      	mov	r2, r8
 80099da:	4631      	mov	r1, r6
 80099dc:	4628      	mov	r0, r5
 80099de:	47b8      	blx	r7
 80099e0:	3001      	adds	r0, #1
 80099e2:	f43f ae74 	beq.w	80096ce <_printf_float+0xbe>
 80099e6:	ee18 3a10 	vmov	r3, s16
 80099ea:	4652      	mov	r2, sl
 80099ec:	4631      	mov	r1, r6
 80099ee:	4628      	mov	r0, r5
 80099f0:	47b8      	blx	r7
 80099f2:	3001      	adds	r0, #1
 80099f4:	f43f ae6b 	beq.w	80096ce <_printf_float+0xbe>
 80099f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099fc:	2200      	movs	r2, #0
 80099fe:	2300      	movs	r3, #0
 8009a00:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009a04:	f7f7 f868 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a08:	b9d8      	cbnz	r0, 8009a42 <_printf_float+0x432>
 8009a0a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009a0e:	f108 0201 	add.w	r2, r8, #1
 8009a12:	4631      	mov	r1, r6
 8009a14:	4628      	mov	r0, r5
 8009a16:	47b8      	blx	r7
 8009a18:	3001      	adds	r0, #1
 8009a1a:	d10e      	bne.n	8009a3a <_printf_float+0x42a>
 8009a1c:	e657      	b.n	80096ce <_printf_float+0xbe>
 8009a1e:	2301      	movs	r3, #1
 8009a20:	4652      	mov	r2, sl
 8009a22:	4631      	mov	r1, r6
 8009a24:	4628      	mov	r0, r5
 8009a26:	47b8      	blx	r7
 8009a28:	3001      	adds	r0, #1
 8009a2a:	f43f ae50 	beq.w	80096ce <_printf_float+0xbe>
 8009a2e:	f108 0801 	add.w	r8, r8, #1
 8009a32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a34:	3b01      	subs	r3, #1
 8009a36:	4543      	cmp	r3, r8
 8009a38:	dcf1      	bgt.n	8009a1e <_printf_float+0x40e>
 8009a3a:	464b      	mov	r3, r9
 8009a3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a40:	e6da      	b.n	80097f8 <_printf_float+0x1e8>
 8009a42:	f04f 0800 	mov.w	r8, #0
 8009a46:	f104 0a1a 	add.w	sl, r4, #26
 8009a4a:	e7f2      	b.n	8009a32 <_printf_float+0x422>
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	4642      	mov	r2, r8
 8009a50:	e7df      	b.n	8009a12 <_printf_float+0x402>
 8009a52:	2301      	movs	r3, #1
 8009a54:	464a      	mov	r2, r9
 8009a56:	4631      	mov	r1, r6
 8009a58:	4628      	mov	r0, r5
 8009a5a:	47b8      	blx	r7
 8009a5c:	3001      	adds	r0, #1
 8009a5e:	f43f ae36 	beq.w	80096ce <_printf_float+0xbe>
 8009a62:	f108 0801 	add.w	r8, r8, #1
 8009a66:	68e3      	ldr	r3, [r4, #12]
 8009a68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a6a:	1a5b      	subs	r3, r3, r1
 8009a6c:	4543      	cmp	r3, r8
 8009a6e:	dcf0      	bgt.n	8009a52 <_printf_float+0x442>
 8009a70:	e6f8      	b.n	8009864 <_printf_float+0x254>
 8009a72:	f04f 0800 	mov.w	r8, #0
 8009a76:	f104 0919 	add.w	r9, r4, #25
 8009a7a:	e7f4      	b.n	8009a66 <_printf_float+0x456>

08009a7c <_printf_common>:
 8009a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a80:	4616      	mov	r6, r2
 8009a82:	4699      	mov	r9, r3
 8009a84:	688a      	ldr	r2, [r1, #8]
 8009a86:	690b      	ldr	r3, [r1, #16]
 8009a88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	bfb8      	it	lt
 8009a90:	4613      	movlt	r3, r2
 8009a92:	6033      	str	r3, [r6, #0]
 8009a94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a98:	4607      	mov	r7, r0
 8009a9a:	460c      	mov	r4, r1
 8009a9c:	b10a      	cbz	r2, 8009aa2 <_printf_common+0x26>
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	6033      	str	r3, [r6, #0]
 8009aa2:	6823      	ldr	r3, [r4, #0]
 8009aa4:	0699      	lsls	r1, r3, #26
 8009aa6:	bf42      	ittt	mi
 8009aa8:	6833      	ldrmi	r3, [r6, #0]
 8009aaa:	3302      	addmi	r3, #2
 8009aac:	6033      	strmi	r3, [r6, #0]
 8009aae:	6825      	ldr	r5, [r4, #0]
 8009ab0:	f015 0506 	ands.w	r5, r5, #6
 8009ab4:	d106      	bne.n	8009ac4 <_printf_common+0x48>
 8009ab6:	f104 0a19 	add.w	sl, r4, #25
 8009aba:	68e3      	ldr	r3, [r4, #12]
 8009abc:	6832      	ldr	r2, [r6, #0]
 8009abe:	1a9b      	subs	r3, r3, r2
 8009ac0:	42ab      	cmp	r3, r5
 8009ac2:	dc26      	bgt.n	8009b12 <_printf_common+0x96>
 8009ac4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ac8:	1e13      	subs	r3, r2, #0
 8009aca:	6822      	ldr	r2, [r4, #0]
 8009acc:	bf18      	it	ne
 8009ace:	2301      	movne	r3, #1
 8009ad0:	0692      	lsls	r2, r2, #26
 8009ad2:	d42b      	bmi.n	8009b2c <_printf_common+0xb0>
 8009ad4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ad8:	4649      	mov	r1, r9
 8009ada:	4638      	mov	r0, r7
 8009adc:	47c0      	blx	r8
 8009ade:	3001      	adds	r0, #1
 8009ae0:	d01e      	beq.n	8009b20 <_printf_common+0xa4>
 8009ae2:	6823      	ldr	r3, [r4, #0]
 8009ae4:	6922      	ldr	r2, [r4, #16]
 8009ae6:	f003 0306 	and.w	r3, r3, #6
 8009aea:	2b04      	cmp	r3, #4
 8009aec:	bf02      	ittt	eq
 8009aee:	68e5      	ldreq	r5, [r4, #12]
 8009af0:	6833      	ldreq	r3, [r6, #0]
 8009af2:	1aed      	subeq	r5, r5, r3
 8009af4:	68a3      	ldr	r3, [r4, #8]
 8009af6:	bf0c      	ite	eq
 8009af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009afc:	2500      	movne	r5, #0
 8009afe:	4293      	cmp	r3, r2
 8009b00:	bfc4      	itt	gt
 8009b02:	1a9b      	subgt	r3, r3, r2
 8009b04:	18ed      	addgt	r5, r5, r3
 8009b06:	2600      	movs	r6, #0
 8009b08:	341a      	adds	r4, #26
 8009b0a:	42b5      	cmp	r5, r6
 8009b0c:	d11a      	bne.n	8009b44 <_printf_common+0xc8>
 8009b0e:	2000      	movs	r0, #0
 8009b10:	e008      	b.n	8009b24 <_printf_common+0xa8>
 8009b12:	2301      	movs	r3, #1
 8009b14:	4652      	mov	r2, sl
 8009b16:	4649      	mov	r1, r9
 8009b18:	4638      	mov	r0, r7
 8009b1a:	47c0      	blx	r8
 8009b1c:	3001      	adds	r0, #1
 8009b1e:	d103      	bne.n	8009b28 <_printf_common+0xac>
 8009b20:	f04f 30ff 	mov.w	r0, #4294967295
 8009b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b28:	3501      	adds	r5, #1
 8009b2a:	e7c6      	b.n	8009aba <_printf_common+0x3e>
 8009b2c:	18e1      	adds	r1, r4, r3
 8009b2e:	1c5a      	adds	r2, r3, #1
 8009b30:	2030      	movs	r0, #48	; 0x30
 8009b32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b36:	4422      	add	r2, r4
 8009b38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b40:	3302      	adds	r3, #2
 8009b42:	e7c7      	b.n	8009ad4 <_printf_common+0x58>
 8009b44:	2301      	movs	r3, #1
 8009b46:	4622      	mov	r2, r4
 8009b48:	4649      	mov	r1, r9
 8009b4a:	4638      	mov	r0, r7
 8009b4c:	47c0      	blx	r8
 8009b4e:	3001      	adds	r0, #1
 8009b50:	d0e6      	beq.n	8009b20 <_printf_common+0xa4>
 8009b52:	3601      	adds	r6, #1
 8009b54:	e7d9      	b.n	8009b0a <_printf_common+0x8e>
	...

08009b58 <_printf_i>:
 8009b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b5c:	7e0f      	ldrb	r7, [r1, #24]
 8009b5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b60:	2f78      	cmp	r7, #120	; 0x78
 8009b62:	4691      	mov	r9, r2
 8009b64:	4680      	mov	r8, r0
 8009b66:	460c      	mov	r4, r1
 8009b68:	469a      	mov	sl, r3
 8009b6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b6e:	d807      	bhi.n	8009b80 <_printf_i+0x28>
 8009b70:	2f62      	cmp	r7, #98	; 0x62
 8009b72:	d80a      	bhi.n	8009b8a <_printf_i+0x32>
 8009b74:	2f00      	cmp	r7, #0
 8009b76:	f000 80d4 	beq.w	8009d22 <_printf_i+0x1ca>
 8009b7a:	2f58      	cmp	r7, #88	; 0x58
 8009b7c:	f000 80c0 	beq.w	8009d00 <_printf_i+0x1a8>
 8009b80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b88:	e03a      	b.n	8009c00 <_printf_i+0xa8>
 8009b8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b8e:	2b15      	cmp	r3, #21
 8009b90:	d8f6      	bhi.n	8009b80 <_printf_i+0x28>
 8009b92:	a101      	add	r1, pc, #4	; (adr r1, 8009b98 <_printf_i+0x40>)
 8009b94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b98:	08009bf1 	.word	0x08009bf1
 8009b9c:	08009c05 	.word	0x08009c05
 8009ba0:	08009b81 	.word	0x08009b81
 8009ba4:	08009b81 	.word	0x08009b81
 8009ba8:	08009b81 	.word	0x08009b81
 8009bac:	08009b81 	.word	0x08009b81
 8009bb0:	08009c05 	.word	0x08009c05
 8009bb4:	08009b81 	.word	0x08009b81
 8009bb8:	08009b81 	.word	0x08009b81
 8009bbc:	08009b81 	.word	0x08009b81
 8009bc0:	08009b81 	.word	0x08009b81
 8009bc4:	08009d09 	.word	0x08009d09
 8009bc8:	08009c31 	.word	0x08009c31
 8009bcc:	08009cc3 	.word	0x08009cc3
 8009bd0:	08009b81 	.word	0x08009b81
 8009bd4:	08009b81 	.word	0x08009b81
 8009bd8:	08009d2b 	.word	0x08009d2b
 8009bdc:	08009b81 	.word	0x08009b81
 8009be0:	08009c31 	.word	0x08009c31
 8009be4:	08009b81 	.word	0x08009b81
 8009be8:	08009b81 	.word	0x08009b81
 8009bec:	08009ccb 	.word	0x08009ccb
 8009bf0:	682b      	ldr	r3, [r5, #0]
 8009bf2:	1d1a      	adds	r2, r3, #4
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	602a      	str	r2, [r5, #0]
 8009bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c00:	2301      	movs	r3, #1
 8009c02:	e09f      	b.n	8009d44 <_printf_i+0x1ec>
 8009c04:	6820      	ldr	r0, [r4, #0]
 8009c06:	682b      	ldr	r3, [r5, #0]
 8009c08:	0607      	lsls	r7, r0, #24
 8009c0a:	f103 0104 	add.w	r1, r3, #4
 8009c0e:	6029      	str	r1, [r5, #0]
 8009c10:	d501      	bpl.n	8009c16 <_printf_i+0xbe>
 8009c12:	681e      	ldr	r6, [r3, #0]
 8009c14:	e003      	b.n	8009c1e <_printf_i+0xc6>
 8009c16:	0646      	lsls	r6, r0, #25
 8009c18:	d5fb      	bpl.n	8009c12 <_printf_i+0xba>
 8009c1a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009c1e:	2e00      	cmp	r6, #0
 8009c20:	da03      	bge.n	8009c2a <_printf_i+0xd2>
 8009c22:	232d      	movs	r3, #45	; 0x2d
 8009c24:	4276      	negs	r6, r6
 8009c26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c2a:	485a      	ldr	r0, [pc, #360]	; (8009d94 <_printf_i+0x23c>)
 8009c2c:	230a      	movs	r3, #10
 8009c2e:	e012      	b.n	8009c56 <_printf_i+0xfe>
 8009c30:	682b      	ldr	r3, [r5, #0]
 8009c32:	6820      	ldr	r0, [r4, #0]
 8009c34:	1d19      	adds	r1, r3, #4
 8009c36:	6029      	str	r1, [r5, #0]
 8009c38:	0605      	lsls	r5, r0, #24
 8009c3a:	d501      	bpl.n	8009c40 <_printf_i+0xe8>
 8009c3c:	681e      	ldr	r6, [r3, #0]
 8009c3e:	e002      	b.n	8009c46 <_printf_i+0xee>
 8009c40:	0641      	lsls	r1, r0, #25
 8009c42:	d5fb      	bpl.n	8009c3c <_printf_i+0xe4>
 8009c44:	881e      	ldrh	r6, [r3, #0]
 8009c46:	4853      	ldr	r0, [pc, #332]	; (8009d94 <_printf_i+0x23c>)
 8009c48:	2f6f      	cmp	r7, #111	; 0x6f
 8009c4a:	bf0c      	ite	eq
 8009c4c:	2308      	moveq	r3, #8
 8009c4e:	230a      	movne	r3, #10
 8009c50:	2100      	movs	r1, #0
 8009c52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c56:	6865      	ldr	r5, [r4, #4]
 8009c58:	60a5      	str	r5, [r4, #8]
 8009c5a:	2d00      	cmp	r5, #0
 8009c5c:	bfa2      	ittt	ge
 8009c5e:	6821      	ldrge	r1, [r4, #0]
 8009c60:	f021 0104 	bicge.w	r1, r1, #4
 8009c64:	6021      	strge	r1, [r4, #0]
 8009c66:	b90e      	cbnz	r6, 8009c6c <_printf_i+0x114>
 8009c68:	2d00      	cmp	r5, #0
 8009c6a:	d04b      	beq.n	8009d04 <_printf_i+0x1ac>
 8009c6c:	4615      	mov	r5, r2
 8009c6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c72:	fb03 6711 	mls	r7, r3, r1, r6
 8009c76:	5dc7      	ldrb	r7, [r0, r7]
 8009c78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c7c:	4637      	mov	r7, r6
 8009c7e:	42bb      	cmp	r3, r7
 8009c80:	460e      	mov	r6, r1
 8009c82:	d9f4      	bls.n	8009c6e <_printf_i+0x116>
 8009c84:	2b08      	cmp	r3, #8
 8009c86:	d10b      	bne.n	8009ca0 <_printf_i+0x148>
 8009c88:	6823      	ldr	r3, [r4, #0]
 8009c8a:	07de      	lsls	r6, r3, #31
 8009c8c:	d508      	bpl.n	8009ca0 <_printf_i+0x148>
 8009c8e:	6923      	ldr	r3, [r4, #16]
 8009c90:	6861      	ldr	r1, [r4, #4]
 8009c92:	4299      	cmp	r1, r3
 8009c94:	bfde      	ittt	le
 8009c96:	2330      	movle	r3, #48	; 0x30
 8009c98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ca0:	1b52      	subs	r2, r2, r5
 8009ca2:	6122      	str	r2, [r4, #16]
 8009ca4:	f8cd a000 	str.w	sl, [sp]
 8009ca8:	464b      	mov	r3, r9
 8009caa:	aa03      	add	r2, sp, #12
 8009cac:	4621      	mov	r1, r4
 8009cae:	4640      	mov	r0, r8
 8009cb0:	f7ff fee4 	bl	8009a7c <_printf_common>
 8009cb4:	3001      	adds	r0, #1
 8009cb6:	d14a      	bne.n	8009d4e <_printf_i+0x1f6>
 8009cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cbc:	b004      	add	sp, #16
 8009cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cc2:	6823      	ldr	r3, [r4, #0]
 8009cc4:	f043 0320 	orr.w	r3, r3, #32
 8009cc8:	6023      	str	r3, [r4, #0]
 8009cca:	4833      	ldr	r0, [pc, #204]	; (8009d98 <_printf_i+0x240>)
 8009ccc:	2778      	movs	r7, #120	; 0x78
 8009cce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009cd2:	6823      	ldr	r3, [r4, #0]
 8009cd4:	6829      	ldr	r1, [r5, #0]
 8009cd6:	061f      	lsls	r7, r3, #24
 8009cd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009cdc:	d402      	bmi.n	8009ce4 <_printf_i+0x18c>
 8009cde:	065f      	lsls	r7, r3, #25
 8009ce0:	bf48      	it	mi
 8009ce2:	b2b6      	uxthmi	r6, r6
 8009ce4:	07df      	lsls	r7, r3, #31
 8009ce6:	bf48      	it	mi
 8009ce8:	f043 0320 	orrmi.w	r3, r3, #32
 8009cec:	6029      	str	r1, [r5, #0]
 8009cee:	bf48      	it	mi
 8009cf0:	6023      	strmi	r3, [r4, #0]
 8009cf2:	b91e      	cbnz	r6, 8009cfc <_printf_i+0x1a4>
 8009cf4:	6823      	ldr	r3, [r4, #0]
 8009cf6:	f023 0320 	bic.w	r3, r3, #32
 8009cfa:	6023      	str	r3, [r4, #0]
 8009cfc:	2310      	movs	r3, #16
 8009cfe:	e7a7      	b.n	8009c50 <_printf_i+0xf8>
 8009d00:	4824      	ldr	r0, [pc, #144]	; (8009d94 <_printf_i+0x23c>)
 8009d02:	e7e4      	b.n	8009cce <_printf_i+0x176>
 8009d04:	4615      	mov	r5, r2
 8009d06:	e7bd      	b.n	8009c84 <_printf_i+0x12c>
 8009d08:	682b      	ldr	r3, [r5, #0]
 8009d0a:	6826      	ldr	r6, [r4, #0]
 8009d0c:	6961      	ldr	r1, [r4, #20]
 8009d0e:	1d18      	adds	r0, r3, #4
 8009d10:	6028      	str	r0, [r5, #0]
 8009d12:	0635      	lsls	r5, r6, #24
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	d501      	bpl.n	8009d1c <_printf_i+0x1c4>
 8009d18:	6019      	str	r1, [r3, #0]
 8009d1a:	e002      	b.n	8009d22 <_printf_i+0x1ca>
 8009d1c:	0670      	lsls	r0, r6, #25
 8009d1e:	d5fb      	bpl.n	8009d18 <_printf_i+0x1c0>
 8009d20:	8019      	strh	r1, [r3, #0]
 8009d22:	2300      	movs	r3, #0
 8009d24:	6123      	str	r3, [r4, #16]
 8009d26:	4615      	mov	r5, r2
 8009d28:	e7bc      	b.n	8009ca4 <_printf_i+0x14c>
 8009d2a:	682b      	ldr	r3, [r5, #0]
 8009d2c:	1d1a      	adds	r2, r3, #4
 8009d2e:	602a      	str	r2, [r5, #0]
 8009d30:	681d      	ldr	r5, [r3, #0]
 8009d32:	6862      	ldr	r2, [r4, #4]
 8009d34:	2100      	movs	r1, #0
 8009d36:	4628      	mov	r0, r5
 8009d38:	f7f6 fa52 	bl	80001e0 <memchr>
 8009d3c:	b108      	cbz	r0, 8009d42 <_printf_i+0x1ea>
 8009d3e:	1b40      	subs	r0, r0, r5
 8009d40:	6060      	str	r0, [r4, #4]
 8009d42:	6863      	ldr	r3, [r4, #4]
 8009d44:	6123      	str	r3, [r4, #16]
 8009d46:	2300      	movs	r3, #0
 8009d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d4c:	e7aa      	b.n	8009ca4 <_printf_i+0x14c>
 8009d4e:	6923      	ldr	r3, [r4, #16]
 8009d50:	462a      	mov	r2, r5
 8009d52:	4649      	mov	r1, r9
 8009d54:	4640      	mov	r0, r8
 8009d56:	47d0      	blx	sl
 8009d58:	3001      	adds	r0, #1
 8009d5a:	d0ad      	beq.n	8009cb8 <_printf_i+0x160>
 8009d5c:	6823      	ldr	r3, [r4, #0]
 8009d5e:	079b      	lsls	r3, r3, #30
 8009d60:	d413      	bmi.n	8009d8a <_printf_i+0x232>
 8009d62:	68e0      	ldr	r0, [r4, #12]
 8009d64:	9b03      	ldr	r3, [sp, #12]
 8009d66:	4298      	cmp	r0, r3
 8009d68:	bfb8      	it	lt
 8009d6a:	4618      	movlt	r0, r3
 8009d6c:	e7a6      	b.n	8009cbc <_printf_i+0x164>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	4632      	mov	r2, r6
 8009d72:	4649      	mov	r1, r9
 8009d74:	4640      	mov	r0, r8
 8009d76:	47d0      	blx	sl
 8009d78:	3001      	adds	r0, #1
 8009d7a:	d09d      	beq.n	8009cb8 <_printf_i+0x160>
 8009d7c:	3501      	adds	r5, #1
 8009d7e:	68e3      	ldr	r3, [r4, #12]
 8009d80:	9903      	ldr	r1, [sp, #12]
 8009d82:	1a5b      	subs	r3, r3, r1
 8009d84:	42ab      	cmp	r3, r5
 8009d86:	dcf2      	bgt.n	8009d6e <_printf_i+0x216>
 8009d88:	e7eb      	b.n	8009d62 <_printf_i+0x20a>
 8009d8a:	2500      	movs	r5, #0
 8009d8c:	f104 0619 	add.w	r6, r4, #25
 8009d90:	e7f5      	b.n	8009d7e <_printf_i+0x226>
 8009d92:	bf00      	nop
 8009d94:	0800d753 	.word	0x0800d753
 8009d98:	0800d764 	.word	0x0800d764

08009d9c <_scanf_float>:
 8009d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da0:	b087      	sub	sp, #28
 8009da2:	4617      	mov	r7, r2
 8009da4:	9303      	str	r3, [sp, #12]
 8009da6:	688b      	ldr	r3, [r1, #8]
 8009da8:	1e5a      	subs	r2, r3, #1
 8009daa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009dae:	bf83      	ittte	hi
 8009db0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009db4:	195b      	addhi	r3, r3, r5
 8009db6:	9302      	strhi	r3, [sp, #8]
 8009db8:	2300      	movls	r3, #0
 8009dba:	bf86      	itte	hi
 8009dbc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009dc0:	608b      	strhi	r3, [r1, #8]
 8009dc2:	9302      	strls	r3, [sp, #8]
 8009dc4:	680b      	ldr	r3, [r1, #0]
 8009dc6:	468b      	mov	fp, r1
 8009dc8:	2500      	movs	r5, #0
 8009dca:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009dce:	f84b 3b1c 	str.w	r3, [fp], #28
 8009dd2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009dd6:	4680      	mov	r8, r0
 8009dd8:	460c      	mov	r4, r1
 8009dda:	465e      	mov	r6, fp
 8009ddc:	46aa      	mov	sl, r5
 8009dde:	46a9      	mov	r9, r5
 8009de0:	9501      	str	r5, [sp, #4]
 8009de2:	68a2      	ldr	r2, [r4, #8]
 8009de4:	b152      	cbz	r2, 8009dfc <_scanf_float+0x60>
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	2b4e      	cmp	r3, #78	; 0x4e
 8009dec:	d864      	bhi.n	8009eb8 <_scanf_float+0x11c>
 8009dee:	2b40      	cmp	r3, #64	; 0x40
 8009df0:	d83c      	bhi.n	8009e6c <_scanf_float+0xd0>
 8009df2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009df6:	b2c8      	uxtb	r0, r1
 8009df8:	280e      	cmp	r0, #14
 8009dfa:	d93a      	bls.n	8009e72 <_scanf_float+0xd6>
 8009dfc:	f1b9 0f00 	cmp.w	r9, #0
 8009e00:	d003      	beq.n	8009e0a <_scanf_float+0x6e>
 8009e02:	6823      	ldr	r3, [r4, #0]
 8009e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e08:	6023      	str	r3, [r4, #0]
 8009e0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e0e:	f1ba 0f01 	cmp.w	sl, #1
 8009e12:	f200 8113 	bhi.w	800a03c <_scanf_float+0x2a0>
 8009e16:	455e      	cmp	r6, fp
 8009e18:	f200 8105 	bhi.w	800a026 <_scanf_float+0x28a>
 8009e1c:	2501      	movs	r5, #1
 8009e1e:	4628      	mov	r0, r5
 8009e20:	b007      	add	sp, #28
 8009e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e26:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009e2a:	2a0d      	cmp	r2, #13
 8009e2c:	d8e6      	bhi.n	8009dfc <_scanf_float+0x60>
 8009e2e:	a101      	add	r1, pc, #4	; (adr r1, 8009e34 <_scanf_float+0x98>)
 8009e30:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009e34:	08009f73 	.word	0x08009f73
 8009e38:	08009dfd 	.word	0x08009dfd
 8009e3c:	08009dfd 	.word	0x08009dfd
 8009e40:	08009dfd 	.word	0x08009dfd
 8009e44:	08009fd3 	.word	0x08009fd3
 8009e48:	08009fab 	.word	0x08009fab
 8009e4c:	08009dfd 	.word	0x08009dfd
 8009e50:	08009dfd 	.word	0x08009dfd
 8009e54:	08009f81 	.word	0x08009f81
 8009e58:	08009dfd 	.word	0x08009dfd
 8009e5c:	08009dfd 	.word	0x08009dfd
 8009e60:	08009dfd 	.word	0x08009dfd
 8009e64:	08009dfd 	.word	0x08009dfd
 8009e68:	08009f39 	.word	0x08009f39
 8009e6c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009e70:	e7db      	b.n	8009e2a <_scanf_float+0x8e>
 8009e72:	290e      	cmp	r1, #14
 8009e74:	d8c2      	bhi.n	8009dfc <_scanf_float+0x60>
 8009e76:	a001      	add	r0, pc, #4	; (adr r0, 8009e7c <_scanf_float+0xe0>)
 8009e78:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009e7c:	08009f2b 	.word	0x08009f2b
 8009e80:	08009dfd 	.word	0x08009dfd
 8009e84:	08009f2b 	.word	0x08009f2b
 8009e88:	08009fbf 	.word	0x08009fbf
 8009e8c:	08009dfd 	.word	0x08009dfd
 8009e90:	08009ed9 	.word	0x08009ed9
 8009e94:	08009f15 	.word	0x08009f15
 8009e98:	08009f15 	.word	0x08009f15
 8009e9c:	08009f15 	.word	0x08009f15
 8009ea0:	08009f15 	.word	0x08009f15
 8009ea4:	08009f15 	.word	0x08009f15
 8009ea8:	08009f15 	.word	0x08009f15
 8009eac:	08009f15 	.word	0x08009f15
 8009eb0:	08009f15 	.word	0x08009f15
 8009eb4:	08009f15 	.word	0x08009f15
 8009eb8:	2b6e      	cmp	r3, #110	; 0x6e
 8009eba:	d809      	bhi.n	8009ed0 <_scanf_float+0x134>
 8009ebc:	2b60      	cmp	r3, #96	; 0x60
 8009ebe:	d8b2      	bhi.n	8009e26 <_scanf_float+0x8a>
 8009ec0:	2b54      	cmp	r3, #84	; 0x54
 8009ec2:	d077      	beq.n	8009fb4 <_scanf_float+0x218>
 8009ec4:	2b59      	cmp	r3, #89	; 0x59
 8009ec6:	d199      	bne.n	8009dfc <_scanf_float+0x60>
 8009ec8:	2d07      	cmp	r5, #7
 8009eca:	d197      	bne.n	8009dfc <_scanf_float+0x60>
 8009ecc:	2508      	movs	r5, #8
 8009ece:	e029      	b.n	8009f24 <_scanf_float+0x188>
 8009ed0:	2b74      	cmp	r3, #116	; 0x74
 8009ed2:	d06f      	beq.n	8009fb4 <_scanf_float+0x218>
 8009ed4:	2b79      	cmp	r3, #121	; 0x79
 8009ed6:	e7f6      	b.n	8009ec6 <_scanf_float+0x12a>
 8009ed8:	6821      	ldr	r1, [r4, #0]
 8009eda:	05c8      	lsls	r0, r1, #23
 8009edc:	d51a      	bpl.n	8009f14 <_scanf_float+0x178>
 8009ede:	9b02      	ldr	r3, [sp, #8]
 8009ee0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009ee4:	6021      	str	r1, [r4, #0]
 8009ee6:	f109 0901 	add.w	r9, r9, #1
 8009eea:	b11b      	cbz	r3, 8009ef4 <_scanf_float+0x158>
 8009eec:	3b01      	subs	r3, #1
 8009eee:	3201      	adds	r2, #1
 8009ef0:	9302      	str	r3, [sp, #8]
 8009ef2:	60a2      	str	r2, [r4, #8]
 8009ef4:	68a3      	ldr	r3, [r4, #8]
 8009ef6:	3b01      	subs	r3, #1
 8009ef8:	60a3      	str	r3, [r4, #8]
 8009efa:	6923      	ldr	r3, [r4, #16]
 8009efc:	3301      	adds	r3, #1
 8009efe:	6123      	str	r3, [r4, #16]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	3b01      	subs	r3, #1
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	607b      	str	r3, [r7, #4]
 8009f08:	f340 8084 	ble.w	800a014 <_scanf_float+0x278>
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	603b      	str	r3, [r7, #0]
 8009f12:	e766      	b.n	8009de2 <_scanf_float+0x46>
 8009f14:	eb1a 0f05 	cmn.w	sl, r5
 8009f18:	f47f af70 	bne.w	8009dfc <_scanf_float+0x60>
 8009f1c:	6822      	ldr	r2, [r4, #0]
 8009f1e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009f22:	6022      	str	r2, [r4, #0]
 8009f24:	f806 3b01 	strb.w	r3, [r6], #1
 8009f28:	e7e4      	b.n	8009ef4 <_scanf_float+0x158>
 8009f2a:	6822      	ldr	r2, [r4, #0]
 8009f2c:	0610      	lsls	r0, r2, #24
 8009f2e:	f57f af65 	bpl.w	8009dfc <_scanf_float+0x60>
 8009f32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f36:	e7f4      	b.n	8009f22 <_scanf_float+0x186>
 8009f38:	f1ba 0f00 	cmp.w	sl, #0
 8009f3c:	d10e      	bne.n	8009f5c <_scanf_float+0x1c0>
 8009f3e:	f1b9 0f00 	cmp.w	r9, #0
 8009f42:	d10e      	bne.n	8009f62 <_scanf_float+0x1c6>
 8009f44:	6822      	ldr	r2, [r4, #0]
 8009f46:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009f4a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009f4e:	d108      	bne.n	8009f62 <_scanf_float+0x1c6>
 8009f50:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009f54:	6022      	str	r2, [r4, #0]
 8009f56:	f04f 0a01 	mov.w	sl, #1
 8009f5a:	e7e3      	b.n	8009f24 <_scanf_float+0x188>
 8009f5c:	f1ba 0f02 	cmp.w	sl, #2
 8009f60:	d055      	beq.n	800a00e <_scanf_float+0x272>
 8009f62:	2d01      	cmp	r5, #1
 8009f64:	d002      	beq.n	8009f6c <_scanf_float+0x1d0>
 8009f66:	2d04      	cmp	r5, #4
 8009f68:	f47f af48 	bne.w	8009dfc <_scanf_float+0x60>
 8009f6c:	3501      	adds	r5, #1
 8009f6e:	b2ed      	uxtb	r5, r5
 8009f70:	e7d8      	b.n	8009f24 <_scanf_float+0x188>
 8009f72:	f1ba 0f01 	cmp.w	sl, #1
 8009f76:	f47f af41 	bne.w	8009dfc <_scanf_float+0x60>
 8009f7a:	f04f 0a02 	mov.w	sl, #2
 8009f7e:	e7d1      	b.n	8009f24 <_scanf_float+0x188>
 8009f80:	b97d      	cbnz	r5, 8009fa2 <_scanf_float+0x206>
 8009f82:	f1b9 0f00 	cmp.w	r9, #0
 8009f86:	f47f af3c 	bne.w	8009e02 <_scanf_float+0x66>
 8009f8a:	6822      	ldr	r2, [r4, #0]
 8009f8c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009f90:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009f94:	f47f af39 	bne.w	8009e0a <_scanf_float+0x6e>
 8009f98:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009f9c:	6022      	str	r2, [r4, #0]
 8009f9e:	2501      	movs	r5, #1
 8009fa0:	e7c0      	b.n	8009f24 <_scanf_float+0x188>
 8009fa2:	2d03      	cmp	r5, #3
 8009fa4:	d0e2      	beq.n	8009f6c <_scanf_float+0x1d0>
 8009fa6:	2d05      	cmp	r5, #5
 8009fa8:	e7de      	b.n	8009f68 <_scanf_float+0x1cc>
 8009faa:	2d02      	cmp	r5, #2
 8009fac:	f47f af26 	bne.w	8009dfc <_scanf_float+0x60>
 8009fb0:	2503      	movs	r5, #3
 8009fb2:	e7b7      	b.n	8009f24 <_scanf_float+0x188>
 8009fb4:	2d06      	cmp	r5, #6
 8009fb6:	f47f af21 	bne.w	8009dfc <_scanf_float+0x60>
 8009fba:	2507      	movs	r5, #7
 8009fbc:	e7b2      	b.n	8009f24 <_scanf_float+0x188>
 8009fbe:	6822      	ldr	r2, [r4, #0]
 8009fc0:	0591      	lsls	r1, r2, #22
 8009fc2:	f57f af1b 	bpl.w	8009dfc <_scanf_float+0x60>
 8009fc6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009fca:	6022      	str	r2, [r4, #0]
 8009fcc:	f8cd 9004 	str.w	r9, [sp, #4]
 8009fd0:	e7a8      	b.n	8009f24 <_scanf_float+0x188>
 8009fd2:	6822      	ldr	r2, [r4, #0]
 8009fd4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009fd8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009fdc:	d006      	beq.n	8009fec <_scanf_float+0x250>
 8009fde:	0550      	lsls	r0, r2, #21
 8009fe0:	f57f af0c 	bpl.w	8009dfc <_scanf_float+0x60>
 8009fe4:	f1b9 0f00 	cmp.w	r9, #0
 8009fe8:	f43f af0f 	beq.w	8009e0a <_scanf_float+0x6e>
 8009fec:	0591      	lsls	r1, r2, #22
 8009fee:	bf58      	it	pl
 8009ff0:	9901      	ldrpl	r1, [sp, #4]
 8009ff2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009ff6:	bf58      	it	pl
 8009ff8:	eba9 0101 	subpl.w	r1, r9, r1
 8009ffc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a000:	bf58      	it	pl
 800a002:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a006:	6022      	str	r2, [r4, #0]
 800a008:	f04f 0900 	mov.w	r9, #0
 800a00c:	e78a      	b.n	8009f24 <_scanf_float+0x188>
 800a00e:	f04f 0a03 	mov.w	sl, #3
 800a012:	e787      	b.n	8009f24 <_scanf_float+0x188>
 800a014:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a018:	4639      	mov	r1, r7
 800a01a:	4640      	mov	r0, r8
 800a01c:	4798      	blx	r3
 800a01e:	2800      	cmp	r0, #0
 800a020:	f43f aedf 	beq.w	8009de2 <_scanf_float+0x46>
 800a024:	e6ea      	b.n	8009dfc <_scanf_float+0x60>
 800a026:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a02a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a02e:	463a      	mov	r2, r7
 800a030:	4640      	mov	r0, r8
 800a032:	4798      	blx	r3
 800a034:	6923      	ldr	r3, [r4, #16]
 800a036:	3b01      	subs	r3, #1
 800a038:	6123      	str	r3, [r4, #16]
 800a03a:	e6ec      	b.n	8009e16 <_scanf_float+0x7a>
 800a03c:	1e6b      	subs	r3, r5, #1
 800a03e:	2b06      	cmp	r3, #6
 800a040:	d825      	bhi.n	800a08e <_scanf_float+0x2f2>
 800a042:	2d02      	cmp	r5, #2
 800a044:	d836      	bhi.n	800a0b4 <_scanf_float+0x318>
 800a046:	455e      	cmp	r6, fp
 800a048:	f67f aee8 	bls.w	8009e1c <_scanf_float+0x80>
 800a04c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a050:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a054:	463a      	mov	r2, r7
 800a056:	4640      	mov	r0, r8
 800a058:	4798      	blx	r3
 800a05a:	6923      	ldr	r3, [r4, #16]
 800a05c:	3b01      	subs	r3, #1
 800a05e:	6123      	str	r3, [r4, #16]
 800a060:	e7f1      	b.n	800a046 <_scanf_float+0x2aa>
 800a062:	9802      	ldr	r0, [sp, #8]
 800a064:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a068:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a06c:	9002      	str	r0, [sp, #8]
 800a06e:	463a      	mov	r2, r7
 800a070:	4640      	mov	r0, r8
 800a072:	4798      	blx	r3
 800a074:	6923      	ldr	r3, [r4, #16]
 800a076:	3b01      	subs	r3, #1
 800a078:	6123      	str	r3, [r4, #16]
 800a07a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a07e:	fa5f fa8a 	uxtb.w	sl, sl
 800a082:	f1ba 0f02 	cmp.w	sl, #2
 800a086:	d1ec      	bne.n	800a062 <_scanf_float+0x2c6>
 800a088:	3d03      	subs	r5, #3
 800a08a:	b2ed      	uxtb	r5, r5
 800a08c:	1b76      	subs	r6, r6, r5
 800a08e:	6823      	ldr	r3, [r4, #0]
 800a090:	05da      	lsls	r2, r3, #23
 800a092:	d52f      	bpl.n	800a0f4 <_scanf_float+0x358>
 800a094:	055b      	lsls	r3, r3, #21
 800a096:	d510      	bpl.n	800a0ba <_scanf_float+0x31e>
 800a098:	455e      	cmp	r6, fp
 800a09a:	f67f aebf 	bls.w	8009e1c <_scanf_float+0x80>
 800a09e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a0a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a0a6:	463a      	mov	r2, r7
 800a0a8:	4640      	mov	r0, r8
 800a0aa:	4798      	blx	r3
 800a0ac:	6923      	ldr	r3, [r4, #16]
 800a0ae:	3b01      	subs	r3, #1
 800a0b0:	6123      	str	r3, [r4, #16]
 800a0b2:	e7f1      	b.n	800a098 <_scanf_float+0x2fc>
 800a0b4:	46aa      	mov	sl, r5
 800a0b6:	9602      	str	r6, [sp, #8]
 800a0b8:	e7df      	b.n	800a07a <_scanf_float+0x2de>
 800a0ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a0be:	6923      	ldr	r3, [r4, #16]
 800a0c0:	2965      	cmp	r1, #101	; 0x65
 800a0c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a0c6:	f106 35ff 	add.w	r5, r6, #4294967295
 800a0ca:	6123      	str	r3, [r4, #16]
 800a0cc:	d00c      	beq.n	800a0e8 <_scanf_float+0x34c>
 800a0ce:	2945      	cmp	r1, #69	; 0x45
 800a0d0:	d00a      	beq.n	800a0e8 <_scanf_float+0x34c>
 800a0d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a0d6:	463a      	mov	r2, r7
 800a0d8:	4640      	mov	r0, r8
 800a0da:	4798      	blx	r3
 800a0dc:	6923      	ldr	r3, [r4, #16]
 800a0de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	1eb5      	subs	r5, r6, #2
 800a0e6:	6123      	str	r3, [r4, #16]
 800a0e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a0ec:	463a      	mov	r2, r7
 800a0ee:	4640      	mov	r0, r8
 800a0f0:	4798      	blx	r3
 800a0f2:	462e      	mov	r6, r5
 800a0f4:	6825      	ldr	r5, [r4, #0]
 800a0f6:	f015 0510 	ands.w	r5, r5, #16
 800a0fa:	d158      	bne.n	800a1ae <_scanf_float+0x412>
 800a0fc:	7035      	strb	r5, [r6, #0]
 800a0fe:	6823      	ldr	r3, [r4, #0]
 800a100:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a108:	d11c      	bne.n	800a144 <_scanf_float+0x3a8>
 800a10a:	9b01      	ldr	r3, [sp, #4]
 800a10c:	454b      	cmp	r3, r9
 800a10e:	eba3 0209 	sub.w	r2, r3, r9
 800a112:	d124      	bne.n	800a15e <_scanf_float+0x3c2>
 800a114:	2200      	movs	r2, #0
 800a116:	4659      	mov	r1, fp
 800a118:	4640      	mov	r0, r8
 800a11a:	f7ff f8d5 	bl	80092c8 <_strtod_r>
 800a11e:	9b03      	ldr	r3, [sp, #12]
 800a120:	6821      	ldr	r1, [r4, #0]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f011 0f02 	tst.w	r1, #2
 800a128:	ec57 6b10 	vmov	r6, r7, d0
 800a12c:	f103 0204 	add.w	r2, r3, #4
 800a130:	d020      	beq.n	800a174 <_scanf_float+0x3d8>
 800a132:	9903      	ldr	r1, [sp, #12]
 800a134:	600a      	str	r2, [r1, #0]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	e9c3 6700 	strd	r6, r7, [r3]
 800a13c:	68e3      	ldr	r3, [r4, #12]
 800a13e:	3301      	adds	r3, #1
 800a140:	60e3      	str	r3, [r4, #12]
 800a142:	e66c      	b.n	8009e1e <_scanf_float+0x82>
 800a144:	9b04      	ldr	r3, [sp, #16]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d0e4      	beq.n	800a114 <_scanf_float+0x378>
 800a14a:	9905      	ldr	r1, [sp, #20]
 800a14c:	230a      	movs	r3, #10
 800a14e:	462a      	mov	r2, r5
 800a150:	3101      	adds	r1, #1
 800a152:	4640      	mov	r0, r8
 800a154:	f7ff f9a6 	bl	80094a4 <_strtol_r>
 800a158:	9b04      	ldr	r3, [sp, #16]
 800a15a:	9e05      	ldr	r6, [sp, #20]
 800a15c:	1ac2      	subs	r2, r0, r3
 800a15e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a162:	429e      	cmp	r6, r3
 800a164:	bf28      	it	cs
 800a166:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a16a:	4912      	ldr	r1, [pc, #72]	; (800a1b4 <_scanf_float+0x418>)
 800a16c:	4630      	mov	r0, r6
 800a16e:	f000 f8e7 	bl	800a340 <siprintf>
 800a172:	e7cf      	b.n	800a114 <_scanf_float+0x378>
 800a174:	f011 0f04 	tst.w	r1, #4
 800a178:	9903      	ldr	r1, [sp, #12]
 800a17a:	600a      	str	r2, [r1, #0]
 800a17c:	d1db      	bne.n	800a136 <_scanf_float+0x39a>
 800a17e:	f8d3 8000 	ldr.w	r8, [r3]
 800a182:	ee10 2a10 	vmov	r2, s0
 800a186:	ee10 0a10 	vmov	r0, s0
 800a18a:	463b      	mov	r3, r7
 800a18c:	4639      	mov	r1, r7
 800a18e:	f7f6 fcd5 	bl	8000b3c <__aeabi_dcmpun>
 800a192:	b128      	cbz	r0, 800a1a0 <_scanf_float+0x404>
 800a194:	4808      	ldr	r0, [pc, #32]	; (800a1b8 <_scanf_float+0x41c>)
 800a196:	f000 f9f3 	bl	800a580 <nanf>
 800a19a:	ed88 0a00 	vstr	s0, [r8]
 800a19e:	e7cd      	b.n	800a13c <_scanf_float+0x3a0>
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	4639      	mov	r1, r7
 800a1a4:	f7f6 fd28 	bl	8000bf8 <__aeabi_d2f>
 800a1a8:	f8c8 0000 	str.w	r0, [r8]
 800a1ac:	e7c6      	b.n	800a13c <_scanf_float+0x3a0>
 800a1ae:	2500      	movs	r5, #0
 800a1b0:	e635      	b.n	8009e1e <_scanf_float+0x82>
 800a1b2:	bf00      	nop
 800a1b4:	0800d775 	.word	0x0800d775
 800a1b8:	0800da10 	.word	0x0800da10

0800a1bc <std>:
 800a1bc:	2300      	movs	r3, #0
 800a1be:	b510      	push	{r4, lr}
 800a1c0:	4604      	mov	r4, r0
 800a1c2:	e9c0 3300 	strd	r3, r3, [r0]
 800a1c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1ca:	6083      	str	r3, [r0, #8]
 800a1cc:	8181      	strh	r1, [r0, #12]
 800a1ce:	6643      	str	r3, [r0, #100]	; 0x64
 800a1d0:	81c2      	strh	r2, [r0, #14]
 800a1d2:	6183      	str	r3, [r0, #24]
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	2208      	movs	r2, #8
 800a1d8:	305c      	adds	r0, #92	; 0x5c
 800a1da:	f000 f914 	bl	800a406 <memset>
 800a1de:	4b0d      	ldr	r3, [pc, #52]	; (800a214 <std+0x58>)
 800a1e0:	6263      	str	r3, [r4, #36]	; 0x24
 800a1e2:	4b0d      	ldr	r3, [pc, #52]	; (800a218 <std+0x5c>)
 800a1e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a1e6:	4b0d      	ldr	r3, [pc, #52]	; (800a21c <std+0x60>)
 800a1e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a1ea:	4b0d      	ldr	r3, [pc, #52]	; (800a220 <std+0x64>)
 800a1ec:	6323      	str	r3, [r4, #48]	; 0x30
 800a1ee:	4b0d      	ldr	r3, [pc, #52]	; (800a224 <std+0x68>)
 800a1f0:	6224      	str	r4, [r4, #32]
 800a1f2:	429c      	cmp	r4, r3
 800a1f4:	d006      	beq.n	800a204 <std+0x48>
 800a1f6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a1fa:	4294      	cmp	r4, r2
 800a1fc:	d002      	beq.n	800a204 <std+0x48>
 800a1fe:	33d0      	adds	r3, #208	; 0xd0
 800a200:	429c      	cmp	r4, r3
 800a202:	d105      	bne.n	800a210 <std+0x54>
 800a204:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a20c:	f000 b99c 	b.w	800a548 <__retarget_lock_init_recursive>
 800a210:	bd10      	pop	{r4, pc}
 800a212:	bf00      	nop
 800a214:	0800a381 	.word	0x0800a381
 800a218:	0800a3a3 	.word	0x0800a3a3
 800a21c:	0800a3db 	.word	0x0800a3db
 800a220:	0800a3ff 	.word	0x0800a3ff
 800a224:	20000764 	.word	0x20000764

0800a228 <stdio_exit_handler>:
 800a228:	4a02      	ldr	r2, [pc, #8]	; (800a234 <stdio_exit_handler+0xc>)
 800a22a:	4903      	ldr	r1, [pc, #12]	; (800a238 <stdio_exit_handler+0x10>)
 800a22c:	4803      	ldr	r0, [pc, #12]	; (800a23c <stdio_exit_handler+0x14>)
 800a22e:	f000 b869 	b.w	800a304 <_fwalk_sglue>
 800a232:	bf00      	nop
 800a234:	20000078 	.word	0x20000078
 800a238:	0800c889 	.word	0x0800c889
 800a23c:	200001f0 	.word	0x200001f0

0800a240 <cleanup_stdio>:
 800a240:	6841      	ldr	r1, [r0, #4]
 800a242:	4b0c      	ldr	r3, [pc, #48]	; (800a274 <cleanup_stdio+0x34>)
 800a244:	4299      	cmp	r1, r3
 800a246:	b510      	push	{r4, lr}
 800a248:	4604      	mov	r4, r0
 800a24a:	d001      	beq.n	800a250 <cleanup_stdio+0x10>
 800a24c:	f002 fb1c 	bl	800c888 <_fflush_r>
 800a250:	68a1      	ldr	r1, [r4, #8]
 800a252:	4b09      	ldr	r3, [pc, #36]	; (800a278 <cleanup_stdio+0x38>)
 800a254:	4299      	cmp	r1, r3
 800a256:	d002      	beq.n	800a25e <cleanup_stdio+0x1e>
 800a258:	4620      	mov	r0, r4
 800a25a:	f002 fb15 	bl	800c888 <_fflush_r>
 800a25e:	68e1      	ldr	r1, [r4, #12]
 800a260:	4b06      	ldr	r3, [pc, #24]	; (800a27c <cleanup_stdio+0x3c>)
 800a262:	4299      	cmp	r1, r3
 800a264:	d004      	beq.n	800a270 <cleanup_stdio+0x30>
 800a266:	4620      	mov	r0, r4
 800a268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a26c:	f002 bb0c 	b.w	800c888 <_fflush_r>
 800a270:	bd10      	pop	{r4, pc}
 800a272:	bf00      	nop
 800a274:	20000764 	.word	0x20000764
 800a278:	200007cc 	.word	0x200007cc
 800a27c:	20000834 	.word	0x20000834

0800a280 <global_stdio_init.part.0>:
 800a280:	b510      	push	{r4, lr}
 800a282:	4b0b      	ldr	r3, [pc, #44]	; (800a2b0 <global_stdio_init.part.0+0x30>)
 800a284:	4c0b      	ldr	r4, [pc, #44]	; (800a2b4 <global_stdio_init.part.0+0x34>)
 800a286:	4a0c      	ldr	r2, [pc, #48]	; (800a2b8 <global_stdio_init.part.0+0x38>)
 800a288:	601a      	str	r2, [r3, #0]
 800a28a:	4620      	mov	r0, r4
 800a28c:	2200      	movs	r2, #0
 800a28e:	2104      	movs	r1, #4
 800a290:	f7ff ff94 	bl	800a1bc <std>
 800a294:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a298:	2201      	movs	r2, #1
 800a29a:	2109      	movs	r1, #9
 800a29c:	f7ff ff8e 	bl	800a1bc <std>
 800a2a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a2a4:	2202      	movs	r2, #2
 800a2a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2aa:	2112      	movs	r1, #18
 800a2ac:	f7ff bf86 	b.w	800a1bc <std>
 800a2b0:	2000089c 	.word	0x2000089c
 800a2b4:	20000764 	.word	0x20000764
 800a2b8:	0800a229 	.word	0x0800a229

0800a2bc <__sfp_lock_acquire>:
 800a2bc:	4801      	ldr	r0, [pc, #4]	; (800a2c4 <__sfp_lock_acquire+0x8>)
 800a2be:	f000 b944 	b.w	800a54a <__retarget_lock_acquire_recursive>
 800a2c2:	bf00      	nop
 800a2c4:	200008a5 	.word	0x200008a5

0800a2c8 <__sfp_lock_release>:
 800a2c8:	4801      	ldr	r0, [pc, #4]	; (800a2d0 <__sfp_lock_release+0x8>)
 800a2ca:	f000 b93f 	b.w	800a54c <__retarget_lock_release_recursive>
 800a2ce:	bf00      	nop
 800a2d0:	200008a5 	.word	0x200008a5

0800a2d4 <__sinit>:
 800a2d4:	b510      	push	{r4, lr}
 800a2d6:	4604      	mov	r4, r0
 800a2d8:	f7ff fff0 	bl	800a2bc <__sfp_lock_acquire>
 800a2dc:	6a23      	ldr	r3, [r4, #32]
 800a2de:	b11b      	cbz	r3, 800a2e8 <__sinit+0x14>
 800a2e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2e4:	f7ff bff0 	b.w	800a2c8 <__sfp_lock_release>
 800a2e8:	4b04      	ldr	r3, [pc, #16]	; (800a2fc <__sinit+0x28>)
 800a2ea:	6223      	str	r3, [r4, #32]
 800a2ec:	4b04      	ldr	r3, [pc, #16]	; (800a300 <__sinit+0x2c>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d1f5      	bne.n	800a2e0 <__sinit+0xc>
 800a2f4:	f7ff ffc4 	bl	800a280 <global_stdio_init.part.0>
 800a2f8:	e7f2      	b.n	800a2e0 <__sinit+0xc>
 800a2fa:	bf00      	nop
 800a2fc:	0800a241 	.word	0x0800a241
 800a300:	2000089c 	.word	0x2000089c

0800a304 <_fwalk_sglue>:
 800a304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a308:	4607      	mov	r7, r0
 800a30a:	4688      	mov	r8, r1
 800a30c:	4614      	mov	r4, r2
 800a30e:	2600      	movs	r6, #0
 800a310:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a314:	f1b9 0901 	subs.w	r9, r9, #1
 800a318:	d505      	bpl.n	800a326 <_fwalk_sglue+0x22>
 800a31a:	6824      	ldr	r4, [r4, #0]
 800a31c:	2c00      	cmp	r4, #0
 800a31e:	d1f7      	bne.n	800a310 <_fwalk_sglue+0xc>
 800a320:	4630      	mov	r0, r6
 800a322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a326:	89ab      	ldrh	r3, [r5, #12]
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d907      	bls.n	800a33c <_fwalk_sglue+0x38>
 800a32c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a330:	3301      	adds	r3, #1
 800a332:	d003      	beq.n	800a33c <_fwalk_sglue+0x38>
 800a334:	4629      	mov	r1, r5
 800a336:	4638      	mov	r0, r7
 800a338:	47c0      	blx	r8
 800a33a:	4306      	orrs	r6, r0
 800a33c:	3568      	adds	r5, #104	; 0x68
 800a33e:	e7e9      	b.n	800a314 <_fwalk_sglue+0x10>

0800a340 <siprintf>:
 800a340:	b40e      	push	{r1, r2, r3}
 800a342:	b500      	push	{lr}
 800a344:	b09c      	sub	sp, #112	; 0x70
 800a346:	ab1d      	add	r3, sp, #116	; 0x74
 800a348:	9002      	str	r0, [sp, #8]
 800a34a:	9006      	str	r0, [sp, #24]
 800a34c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a350:	4809      	ldr	r0, [pc, #36]	; (800a378 <siprintf+0x38>)
 800a352:	9107      	str	r1, [sp, #28]
 800a354:	9104      	str	r1, [sp, #16]
 800a356:	4909      	ldr	r1, [pc, #36]	; (800a37c <siprintf+0x3c>)
 800a358:	f853 2b04 	ldr.w	r2, [r3], #4
 800a35c:	9105      	str	r1, [sp, #20]
 800a35e:	6800      	ldr	r0, [r0, #0]
 800a360:	9301      	str	r3, [sp, #4]
 800a362:	a902      	add	r1, sp, #8
 800a364:	f002 f90c 	bl	800c580 <_svfiprintf_r>
 800a368:	9b02      	ldr	r3, [sp, #8]
 800a36a:	2200      	movs	r2, #0
 800a36c:	701a      	strb	r2, [r3, #0]
 800a36e:	b01c      	add	sp, #112	; 0x70
 800a370:	f85d eb04 	ldr.w	lr, [sp], #4
 800a374:	b003      	add	sp, #12
 800a376:	4770      	bx	lr
 800a378:	2000023c 	.word	0x2000023c
 800a37c:	ffff0208 	.word	0xffff0208

0800a380 <__sread>:
 800a380:	b510      	push	{r4, lr}
 800a382:	460c      	mov	r4, r1
 800a384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a388:	f000 f890 	bl	800a4ac <_read_r>
 800a38c:	2800      	cmp	r0, #0
 800a38e:	bfab      	itete	ge
 800a390:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a392:	89a3      	ldrhlt	r3, [r4, #12]
 800a394:	181b      	addge	r3, r3, r0
 800a396:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a39a:	bfac      	ite	ge
 800a39c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a39e:	81a3      	strhlt	r3, [r4, #12]
 800a3a0:	bd10      	pop	{r4, pc}

0800a3a2 <__swrite>:
 800a3a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a6:	461f      	mov	r7, r3
 800a3a8:	898b      	ldrh	r3, [r1, #12]
 800a3aa:	05db      	lsls	r3, r3, #23
 800a3ac:	4605      	mov	r5, r0
 800a3ae:	460c      	mov	r4, r1
 800a3b0:	4616      	mov	r6, r2
 800a3b2:	d505      	bpl.n	800a3c0 <__swrite+0x1e>
 800a3b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3b8:	2302      	movs	r3, #2
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f000 f864 	bl	800a488 <_lseek_r>
 800a3c0:	89a3      	ldrh	r3, [r4, #12]
 800a3c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3ca:	81a3      	strh	r3, [r4, #12]
 800a3cc:	4632      	mov	r2, r6
 800a3ce:	463b      	mov	r3, r7
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3d6:	f000 b87b 	b.w	800a4d0 <_write_r>

0800a3da <__sseek>:
 800a3da:	b510      	push	{r4, lr}
 800a3dc:	460c      	mov	r4, r1
 800a3de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3e2:	f000 f851 	bl	800a488 <_lseek_r>
 800a3e6:	1c43      	adds	r3, r0, #1
 800a3e8:	89a3      	ldrh	r3, [r4, #12]
 800a3ea:	bf15      	itete	ne
 800a3ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800a3ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a3f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a3f6:	81a3      	strheq	r3, [r4, #12]
 800a3f8:	bf18      	it	ne
 800a3fa:	81a3      	strhne	r3, [r4, #12]
 800a3fc:	bd10      	pop	{r4, pc}

0800a3fe <__sclose>:
 800a3fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a402:	f000 b831 	b.w	800a468 <_close_r>

0800a406 <memset>:
 800a406:	4402      	add	r2, r0
 800a408:	4603      	mov	r3, r0
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d100      	bne.n	800a410 <memset+0xa>
 800a40e:	4770      	bx	lr
 800a410:	f803 1b01 	strb.w	r1, [r3], #1
 800a414:	e7f9      	b.n	800a40a <memset+0x4>

0800a416 <strncmp>:
 800a416:	b510      	push	{r4, lr}
 800a418:	b16a      	cbz	r2, 800a436 <strncmp+0x20>
 800a41a:	3901      	subs	r1, #1
 800a41c:	1884      	adds	r4, r0, r2
 800a41e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a422:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a426:	429a      	cmp	r2, r3
 800a428:	d103      	bne.n	800a432 <strncmp+0x1c>
 800a42a:	42a0      	cmp	r0, r4
 800a42c:	d001      	beq.n	800a432 <strncmp+0x1c>
 800a42e:	2a00      	cmp	r2, #0
 800a430:	d1f5      	bne.n	800a41e <strncmp+0x8>
 800a432:	1ad0      	subs	r0, r2, r3
 800a434:	bd10      	pop	{r4, pc}
 800a436:	4610      	mov	r0, r2
 800a438:	e7fc      	b.n	800a434 <strncmp+0x1e>

0800a43a <strncpy>:
 800a43a:	b510      	push	{r4, lr}
 800a43c:	3901      	subs	r1, #1
 800a43e:	4603      	mov	r3, r0
 800a440:	b132      	cbz	r2, 800a450 <strncpy+0x16>
 800a442:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a446:	f803 4b01 	strb.w	r4, [r3], #1
 800a44a:	3a01      	subs	r2, #1
 800a44c:	2c00      	cmp	r4, #0
 800a44e:	d1f7      	bne.n	800a440 <strncpy+0x6>
 800a450:	441a      	add	r2, r3
 800a452:	2100      	movs	r1, #0
 800a454:	4293      	cmp	r3, r2
 800a456:	d100      	bne.n	800a45a <strncpy+0x20>
 800a458:	bd10      	pop	{r4, pc}
 800a45a:	f803 1b01 	strb.w	r1, [r3], #1
 800a45e:	e7f9      	b.n	800a454 <strncpy+0x1a>

0800a460 <_localeconv_r>:
 800a460:	4800      	ldr	r0, [pc, #0]	; (800a464 <_localeconv_r+0x4>)
 800a462:	4770      	bx	lr
 800a464:	20000174 	.word	0x20000174

0800a468 <_close_r>:
 800a468:	b538      	push	{r3, r4, r5, lr}
 800a46a:	4d06      	ldr	r5, [pc, #24]	; (800a484 <_close_r+0x1c>)
 800a46c:	2300      	movs	r3, #0
 800a46e:	4604      	mov	r4, r0
 800a470:	4608      	mov	r0, r1
 800a472:	602b      	str	r3, [r5, #0]
 800a474:	f7fa fb0f 	bl	8004a96 <_close>
 800a478:	1c43      	adds	r3, r0, #1
 800a47a:	d102      	bne.n	800a482 <_close_r+0x1a>
 800a47c:	682b      	ldr	r3, [r5, #0]
 800a47e:	b103      	cbz	r3, 800a482 <_close_r+0x1a>
 800a480:	6023      	str	r3, [r4, #0]
 800a482:	bd38      	pop	{r3, r4, r5, pc}
 800a484:	200008a0 	.word	0x200008a0

0800a488 <_lseek_r>:
 800a488:	b538      	push	{r3, r4, r5, lr}
 800a48a:	4d07      	ldr	r5, [pc, #28]	; (800a4a8 <_lseek_r+0x20>)
 800a48c:	4604      	mov	r4, r0
 800a48e:	4608      	mov	r0, r1
 800a490:	4611      	mov	r1, r2
 800a492:	2200      	movs	r2, #0
 800a494:	602a      	str	r2, [r5, #0]
 800a496:	461a      	mov	r2, r3
 800a498:	f7fa fb24 	bl	8004ae4 <_lseek>
 800a49c:	1c43      	adds	r3, r0, #1
 800a49e:	d102      	bne.n	800a4a6 <_lseek_r+0x1e>
 800a4a0:	682b      	ldr	r3, [r5, #0]
 800a4a2:	b103      	cbz	r3, 800a4a6 <_lseek_r+0x1e>
 800a4a4:	6023      	str	r3, [r4, #0]
 800a4a6:	bd38      	pop	{r3, r4, r5, pc}
 800a4a8:	200008a0 	.word	0x200008a0

0800a4ac <_read_r>:
 800a4ac:	b538      	push	{r3, r4, r5, lr}
 800a4ae:	4d07      	ldr	r5, [pc, #28]	; (800a4cc <_read_r+0x20>)
 800a4b0:	4604      	mov	r4, r0
 800a4b2:	4608      	mov	r0, r1
 800a4b4:	4611      	mov	r1, r2
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	602a      	str	r2, [r5, #0]
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	f7fa fab2 	bl	8004a24 <_read>
 800a4c0:	1c43      	adds	r3, r0, #1
 800a4c2:	d102      	bne.n	800a4ca <_read_r+0x1e>
 800a4c4:	682b      	ldr	r3, [r5, #0]
 800a4c6:	b103      	cbz	r3, 800a4ca <_read_r+0x1e>
 800a4c8:	6023      	str	r3, [r4, #0]
 800a4ca:	bd38      	pop	{r3, r4, r5, pc}
 800a4cc:	200008a0 	.word	0x200008a0

0800a4d0 <_write_r>:
 800a4d0:	b538      	push	{r3, r4, r5, lr}
 800a4d2:	4d07      	ldr	r5, [pc, #28]	; (800a4f0 <_write_r+0x20>)
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	4608      	mov	r0, r1
 800a4d8:	4611      	mov	r1, r2
 800a4da:	2200      	movs	r2, #0
 800a4dc:	602a      	str	r2, [r5, #0]
 800a4de:	461a      	mov	r2, r3
 800a4e0:	f7fa fabd 	bl	8004a5e <_write>
 800a4e4:	1c43      	adds	r3, r0, #1
 800a4e6:	d102      	bne.n	800a4ee <_write_r+0x1e>
 800a4e8:	682b      	ldr	r3, [r5, #0]
 800a4ea:	b103      	cbz	r3, 800a4ee <_write_r+0x1e>
 800a4ec:	6023      	str	r3, [r4, #0]
 800a4ee:	bd38      	pop	{r3, r4, r5, pc}
 800a4f0:	200008a0 	.word	0x200008a0

0800a4f4 <__errno>:
 800a4f4:	4b01      	ldr	r3, [pc, #4]	; (800a4fc <__errno+0x8>)
 800a4f6:	6818      	ldr	r0, [r3, #0]
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	2000023c 	.word	0x2000023c

0800a500 <__libc_init_array>:
 800a500:	b570      	push	{r4, r5, r6, lr}
 800a502:	4d0d      	ldr	r5, [pc, #52]	; (800a538 <__libc_init_array+0x38>)
 800a504:	4c0d      	ldr	r4, [pc, #52]	; (800a53c <__libc_init_array+0x3c>)
 800a506:	1b64      	subs	r4, r4, r5
 800a508:	10a4      	asrs	r4, r4, #2
 800a50a:	2600      	movs	r6, #0
 800a50c:	42a6      	cmp	r6, r4
 800a50e:	d109      	bne.n	800a524 <__libc_init_array+0x24>
 800a510:	4d0b      	ldr	r5, [pc, #44]	; (800a540 <__libc_init_array+0x40>)
 800a512:	4c0c      	ldr	r4, [pc, #48]	; (800a544 <__libc_init_array+0x44>)
 800a514:	f002 fd30 	bl	800cf78 <_init>
 800a518:	1b64      	subs	r4, r4, r5
 800a51a:	10a4      	asrs	r4, r4, #2
 800a51c:	2600      	movs	r6, #0
 800a51e:	42a6      	cmp	r6, r4
 800a520:	d105      	bne.n	800a52e <__libc_init_array+0x2e>
 800a522:	bd70      	pop	{r4, r5, r6, pc}
 800a524:	f855 3b04 	ldr.w	r3, [r5], #4
 800a528:	4798      	blx	r3
 800a52a:	3601      	adds	r6, #1
 800a52c:	e7ee      	b.n	800a50c <__libc_init_array+0xc>
 800a52e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a532:	4798      	blx	r3
 800a534:	3601      	adds	r6, #1
 800a536:	e7f2      	b.n	800a51e <__libc_init_array+0x1e>
 800a538:	0800da1c 	.word	0x0800da1c
 800a53c:	0800da1c 	.word	0x0800da1c
 800a540:	0800da1c 	.word	0x0800da1c
 800a544:	0800da20 	.word	0x0800da20

0800a548 <__retarget_lock_init_recursive>:
 800a548:	4770      	bx	lr

0800a54a <__retarget_lock_acquire_recursive>:
 800a54a:	4770      	bx	lr

0800a54c <__retarget_lock_release_recursive>:
 800a54c:	4770      	bx	lr

0800a54e <memcpy>:
 800a54e:	440a      	add	r2, r1
 800a550:	4291      	cmp	r1, r2
 800a552:	f100 33ff 	add.w	r3, r0, #4294967295
 800a556:	d100      	bne.n	800a55a <memcpy+0xc>
 800a558:	4770      	bx	lr
 800a55a:	b510      	push	{r4, lr}
 800a55c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a560:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a564:	4291      	cmp	r1, r2
 800a566:	d1f9      	bne.n	800a55c <memcpy+0xe>
 800a568:	bd10      	pop	{r4, pc}
 800a56a:	0000      	movs	r0, r0
 800a56c:	0000      	movs	r0, r0
	...

0800a570 <nan>:
 800a570:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a578 <nan+0x8>
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop
 800a578:	00000000 	.word	0x00000000
 800a57c:	7ff80000 	.word	0x7ff80000

0800a580 <nanf>:
 800a580:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a588 <nanf+0x8>
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	7fc00000 	.word	0x7fc00000

0800a58c <quorem>:
 800a58c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a590:	6903      	ldr	r3, [r0, #16]
 800a592:	690c      	ldr	r4, [r1, #16]
 800a594:	42a3      	cmp	r3, r4
 800a596:	4607      	mov	r7, r0
 800a598:	db7e      	blt.n	800a698 <quorem+0x10c>
 800a59a:	3c01      	subs	r4, #1
 800a59c:	f101 0814 	add.w	r8, r1, #20
 800a5a0:	f100 0514 	add.w	r5, r0, #20
 800a5a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5a8:	9301      	str	r3, [sp, #4]
 800a5aa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a5ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a5ba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a5be:	fbb2 f6f3 	udiv	r6, r2, r3
 800a5c2:	d331      	bcc.n	800a628 <quorem+0x9c>
 800a5c4:	f04f 0e00 	mov.w	lr, #0
 800a5c8:	4640      	mov	r0, r8
 800a5ca:	46ac      	mov	ip, r5
 800a5cc:	46f2      	mov	sl, lr
 800a5ce:	f850 2b04 	ldr.w	r2, [r0], #4
 800a5d2:	b293      	uxth	r3, r2
 800a5d4:	fb06 e303 	mla	r3, r6, r3, lr
 800a5d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a5dc:	0c1a      	lsrs	r2, r3, #16
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	ebaa 0303 	sub.w	r3, sl, r3
 800a5e4:	f8dc a000 	ldr.w	sl, [ip]
 800a5e8:	fa13 f38a 	uxtah	r3, r3, sl
 800a5ec:	fb06 220e 	mla	r2, r6, lr, r2
 800a5f0:	9300      	str	r3, [sp, #0]
 800a5f2:	9b00      	ldr	r3, [sp, #0]
 800a5f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a5f8:	b292      	uxth	r2, r2
 800a5fa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a5fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a602:	f8bd 3000 	ldrh.w	r3, [sp]
 800a606:	4581      	cmp	r9, r0
 800a608:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a60c:	f84c 3b04 	str.w	r3, [ip], #4
 800a610:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a614:	d2db      	bcs.n	800a5ce <quorem+0x42>
 800a616:	f855 300b 	ldr.w	r3, [r5, fp]
 800a61a:	b92b      	cbnz	r3, 800a628 <quorem+0x9c>
 800a61c:	9b01      	ldr	r3, [sp, #4]
 800a61e:	3b04      	subs	r3, #4
 800a620:	429d      	cmp	r5, r3
 800a622:	461a      	mov	r2, r3
 800a624:	d32c      	bcc.n	800a680 <quorem+0xf4>
 800a626:	613c      	str	r4, [r7, #16]
 800a628:	4638      	mov	r0, r7
 800a62a:	f001 fd5b 	bl	800c0e4 <__mcmp>
 800a62e:	2800      	cmp	r0, #0
 800a630:	db22      	blt.n	800a678 <quorem+0xec>
 800a632:	3601      	adds	r6, #1
 800a634:	4629      	mov	r1, r5
 800a636:	2000      	movs	r0, #0
 800a638:	f858 2b04 	ldr.w	r2, [r8], #4
 800a63c:	f8d1 c000 	ldr.w	ip, [r1]
 800a640:	b293      	uxth	r3, r2
 800a642:	1ac3      	subs	r3, r0, r3
 800a644:	0c12      	lsrs	r2, r2, #16
 800a646:	fa13 f38c 	uxtah	r3, r3, ip
 800a64a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a64e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a652:	b29b      	uxth	r3, r3
 800a654:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a658:	45c1      	cmp	r9, r8
 800a65a:	f841 3b04 	str.w	r3, [r1], #4
 800a65e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a662:	d2e9      	bcs.n	800a638 <quorem+0xac>
 800a664:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a668:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a66c:	b922      	cbnz	r2, 800a678 <quorem+0xec>
 800a66e:	3b04      	subs	r3, #4
 800a670:	429d      	cmp	r5, r3
 800a672:	461a      	mov	r2, r3
 800a674:	d30a      	bcc.n	800a68c <quorem+0x100>
 800a676:	613c      	str	r4, [r7, #16]
 800a678:	4630      	mov	r0, r6
 800a67a:	b003      	add	sp, #12
 800a67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a680:	6812      	ldr	r2, [r2, #0]
 800a682:	3b04      	subs	r3, #4
 800a684:	2a00      	cmp	r2, #0
 800a686:	d1ce      	bne.n	800a626 <quorem+0x9a>
 800a688:	3c01      	subs	r4, #1
 800a68a:	e7c9      	b.n	800a620 <quorem+0x94>
 800a68c:	6812      	ldr	r2, [r2, #0]
 800a68e:	3b04      	subs	r3, #4
 800a690:	2a00      	cmp	r2, #0
 800a692:	d1f0      	bne.n	800a676 <quorem+0xea>
 800a694:	3c01      	subs	r4, #1
 800a696:	e7eb      	b.n	800a670 <quorem+0xe4>
 800a698:	2000      	movs	r0, #0
 800a69a:	e7ee      	b.n	800a67a <quorem+0xee>
 800a69c:	0000      	movs	r0, r0
	...

0800a6a0 <_dtoa_r>:
 800a6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a4:	ed2d 8b04 	vpush	{d8-d9}
 800a6a8:	69c5      	ldr	r5, [r0, #28]
 800a6aa:	b093      	sub	sp, #76	; 0x4c
 800a6ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a6b0:	ec57 6b10 	vmov	r6, r7, d0
 800a6b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a6b8:	9107      	str	r1, [sp, #28]
 800a6ba:	4604      	mov	r4, r0
 800a6bc:	920a      	str	r2, [sp, #40]	; 0x28
 800a6be:	930d      	str	r3, [sp, #52]	; 0x34
 800a6c0:	b975      	cbnz	r5, 800a6e0 <_dtoa_r+0x40>
 800a6c2:	2010      	movs	r0, #16
 800a6c4:	f001 f982 	bl	800b9cc <malloc>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	61e0      	str	r0, [r4, #28]
 800a6cc:	b920      	cbnz	r0, 800a6d8 <_dtoa_r+0x38>
 800a6ce:	4bae      	ldr	r3, [pc, #696]	; (800a988 <_dtoa_r+0x2e8>)
 800a6d0:	21ef      	movs	r1, #239	; 0xef
 800a6d2:	48ae      	ldr	r0, [pc, #696]	; (800a98c <_dtoa_r+0x2ec>)
 800a6d4:	f002 f92a 	bl	800c92c <__assert_func>
 800a6d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a6dc:	6005      	str	r5, [r0, #0]
 800a6de:	60c5      	str	r5, [r0, #12]
 800a6e0:	69e3      	ldr	r3, [r4, #28]
 800a6e2:	6819      	ldr	r1, [r3, #0]
 800a6e4:	b151      	cbz	r1, 800a6fc <_dtoa_r+0x5c>
 800a6e6:	685a      	ldr	r2, [r3, #4]
 800a6e8:	604a      	str	r2, [r1, #4]
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	4093      	lsls	r3, r2
 800a6ee:	608b      	str	r3, [r1, #8]
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	f001 fa71 	bl	800bbd8 <_Bfree>
 800a6f6:	69e3      	ldr	r3, [r4, #28]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	601a      	str	r2, [r3, #0]
 800a6fc:	1e3b      	subs	r3, r7, #0
 800a6fe:	bfbb      	ittet	lt
 800a700:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a704:	9303      	strlt	r3, [sp, #12]
 800a706:	2300      	movge	r3, #0
 800a708:	2201      	movlt	r2, #1
 800a70a:	bfac      	ite	ge
 800a70c:	f8c8 3000 	strge.w	r3, [r8]
 800a710:	f8c8 2000 	strlt.w	r2, [r8]
 800a714:	4b9e      	ldr	r3, [pc, #632]	; (800a990 <_dtoa_r+0x2f0>)
 800a716:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a71a:	ea33 0308 	bics.w	r3, r3, r8
 800a71e:	d11b      	bne.n	800a758 <_dtoa_r+0xb8>
 800a720:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a722:	f242 730f 	movw	r3, #9999	; 0x270f
 800a726:	6013      	str	r3, [r2, #0]
 800a728:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a72c:	4333      	orrs	r3, r6
 800a72e:	f000 8593 	beq.w	800b258 <_dtoa_r+0xbb8>
 800a732:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a734:	b963      	cbnz	r3, 800a750 <_dtoa_r+0xb0>
 800a736:	4b97      	ldr	r3, [pc, #604]	; (800a994 <_dtoa_r+0x2f4>)
 800a738:	e027      	b.n	800a78a <_dtoa_r+0xea>
 800a73a:	4b97      	ldr	r3, [pc, #604]	; (800a998 <_dtoa_r+0x2f8>)
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	3308      	adds	r3, #8
 800a740:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a742:	6013      	str	r3, [r2, #0]
 800a744:	9800      	ldr	r0, [sp, #0]
 800a746:	b013      	add	sp, #76	; 0x4c
 800a748:	ecbd 8b04 	vpop	{d8-d9}
 800a74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a750:	4b90      	ldr	r3, [pc, #576]	; (800a994 <_dtoa_r+0x2f4>)
 800a752:	9300      	str	r3, [sp, #0]
 800a754:	3303      	adds	r3, #3
 800a756:	e7f3      	b.n	800a740 <_dtoa_r+0xa0>
 800a758:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a75c:	2200      	movs	r2, #0
 800a75e:	ec51 0b17 	vmov	r0, r1, d7
 800a762:	eeb0 8a47 	vmov.f32	s16, s14
 800a766:	eef0 8a67 	vmov.f32	s17, s15
 800a76a:	2300      	movs	r3, #0
 800a76c:	f7f6 f9b4 	bl	8000ad8 <__aeabi_dcmpeq>
 800a770:	4681      	mov	r9, r0
 800a772:	b160      	cbz	r0, 800a78e <_dtoa_r+0xee>
 800a774:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a776:	2301      	movs	r3, #1
 800a778:	6013      	str	r3, [r2, #0]
 800a77a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	f000 8568 	beq.w	800b252 <_dtoa_r+0xbb2>
 800a782:	4b86      	ldr	r3, [pc, #536]	; (800a99c <_dtoa_r+0x2fc>)
 800a784:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a786:	6013      	str	r3, [r2, #0]
 800a788:	3b01      	subs	r3, #1
 800a78a:	9300      	str	r3, [sp, #0]
 800a78c:	e7da      	b.n	800a744 <_dtoa_r+0xa4>
 800a78e:	aa10      	add	r2, sp, #64	; 0x40
 800a790:	a911      	add	r1, sp, #68	; 0x44
 800a792:	4620      	mov	r0, r4
 800a794:	eeb0 0a48 	vmov.f32	s0, s16
 800a798:	eef0 0a68 	vmov.f32	s1, s17
 800a79c:	f001 fdb8 	bl	800c310 <__d2b>
 800a7a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a7a4:	4682      	mov	sl, r0
 800a7a6:	2d00      	cmp	r5, #0
 800a7a8:	d07f      	beq.n	800a8aa <_dtoa_r+0x20a>
 800a7aa:	ee18 3a90 	vmov	r3, s17
 800a7ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a7b6:	ec51 0b18 	vmov	r0, r1, d8
 800a7ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a7be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a7c2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	4b75      	ldr	r3, [pc, #468]	; (800a9a0 <_dtoa_r+0x300>)
 800a7cc:	f7f5 fd64 	bl	8000298 <__aeabi_dsub>
 800a7d0:	a367      	add	r3, pc, #412	; (adr r3, 800a970 <_dtoa_r+0x2d0>)
 800a7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d6:	f7f5 ff17 	bl	8000608 <__aeabi_dmul>
 800a7da:	a367      	add	r3, pc, #412	; (adr r3, 800a978 <_dtoa_r+0x2d8>)
 800a7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e0:	f7f5 fd5c 	bl	800029c <__adddf3>
 800a7e4:	4606      	mov	r6, r0
 800a7e6:	4628      	mov	r0, r5
 800a7e8:	460f      	mov	r7, r1
 800a7ea:	f7f5 fea3 	bl	8000534 <__aeabi_i2d>
 800a7ee:	a364      	add	r3, pc, #400	; (adr r3, 800a980 <_dtoa_r+0x2e0>)
 800a7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f4:	f7f5 ff08 	bl	8000608 <__aeabi_dmul>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	4630      	mov	r0, r6
 800a7fe:	4639      	mov	r1, r7
 800a800:	f7f5 fd4c 	bl	800029c <__adddf3>
 800a804:	4606      	mov	r6, r0
 800a806:	460f      	mov	r7, r1
 800a808:	f7f6 f9ae 	bl	8000b68 <__aeabi_d2iz>
 800a80c:	2200      	movs	r2, #0
 800a80e:	4683      	mov	fp, r0
 800a810:	2300      	movs	r3, #0
 800a812:	4630      	mov	r0, r6
 800a814:	4639      	mov	r1, r7
 800a816:	f7f6 f969 	bl	8000aec <__aeabi_dcmplt>
 800a81a:	b148      	cbz	r0, 800a830 <_dtoa_r+0x190>
 800a81c:	4658      	mov	r0, fp
 800a81e:	f7f5 fe89 	bl	8000534 <__aeabi_i2d>
 800a822:	4632      	mov	r2, r6
 800a824:	463b      	mov	r3, r7
 800a826:	f7f6 f957 	bl	8000ad8 <__aeabi_dcmpeq>
 800a82a:	b908      	cbnz	r0, 800a830 <_dtoa_r+0x190>
 800a82c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a830:	f1bb 0f16 	cmp.w	fp, #22
 800a834:	d857      	bhi.n	800a8e6 <_dtoa_r+0x246>
 800a836:	4b5b      	ldr	r3, [pc, #364]	; (800a9a4 <_dtoa_r+0x304>)
 800a838:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a840:	ec51 0b18 	vmov	r0, r1, d8
 800a844:	f7f6 f952 	bl	8000aec <__aeabi_dcmplt>
 800a848:	2800      	cmp	r0, #0
 800a84a:	d04e      	beq.n	800a8ea <_dtoa_r+0x24a>
 800a84c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a850:	2300      	movs	r3, #0
 800a852:	930c      	str	r3, [sp, #48]	; 0x30
 800a854:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a856:	1b5b      	subs	r3, r3, r5
 800a858:	1e5a      	subs	r2, r3, #1
 800a85a:	bf45      	ittet	mi
 800a85c:	f1c3 0301 	rsbmi	r3, r3, #1
 800a860:	9305      	strmi	r3, [sp, #20]
 800a862:	2300      	movpl	r3, #0
 800a864:	2300      	movmi	r3, #0
 800a866:	9206      	str	r2, [sp, #24]
 800a868:	bf54      	ite	pl
 800a86a:	9305      	strpl	r3, [sp, #20]
 800a86c:	9306      	strmi	r3, [sp, #24]
 800a86e:	f1bb 0f00 	cmp.w	fp, #0
 800a872:	db3c      	blt.n	800a8ee <_dtoa_r+0x24e>
 800a874:	9b06      	ldr	r3, [sp, #24]
 800a876:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a87a:	445b      	add	r3, fp
 800a87c:	9306      	str	r3, [sp, #24]
 800a87e:	2300      	movs	r3, #0
 800a880:	9308      	str	r3, [sp, #32]
 800a882:	9b07      	ldr	r3, [sp, #28]
 800a884:	2b09      	cmp	r3, #9
 800a886:	d868      	bhi.n	800a95a <_dtoa_r+0x2ba>
 800a888:	2b05      	cmp	r3, #5
 800a88a:	bfc4      	itt	gt
 800a88c:	3b04      	subgt	r3, #4
 800a88e:	9307      	strgt	r3, [sp, #28]
 800a890:	9b07      	ldr	r3, [sp, #28]
 800a892:	f1a3 0302 	sub.w	r3, r3, #2
 800a896:	bfcc      	ite	gt
 800a898:	2500      	movgt	r5, #0
 800a89a:	2501      	movle	r5, #1
 800a89c:	2b03      	cmp	r3, #3
 800a89e:	f200 8085 	bhi.w	800a9ac <_dtoa_r+0x30c>
 800a8a2:	e8df f003 	tbb	[pc, r3]
 800a8a6:	3b2e      	.short	0x3b2e
 800a8a8:	5839      	.short	0x5839
 800a8aa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a8ae:	441d      	add	r5, r3
 800a8b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a8b4:	2b20      	cmp	r3, #32
 800a8b6:	bfc1      	itttt	gt
 800a8b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a8bc:	fa08 f803 	lslgt.w	r8, r8, r3
 800a8c0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a8c4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a8c8:	bfd6      	itet	le
 800a8ca:	f1c3 0320 	rsble	r3, r3, #32
 800a8ce:	ea48 0003 	orrgt.w	r0, r8, r3
 800a8d2:	fa06 f003 	lslle.w	r0, r6, r3
 800a8d6:	f7f5 fe1d 	bl	8000514 <__aeabi_ui2d>
 800a8da:	2201      	movs	r2, #1
 800a8dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a8e0:	3d01      	subs	r5, #1
 800a8e2:	920e      	str	r2, [sp, #56]	; 0x38
 800a8e4:	e76f      	b.n	800a7c6 <_dtoa_r+0x126>
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e7b3      	b.n	800a852 <_dtoa_r+0x1b2>
 800a8ea:	900c      	str	r0, [sp, #48]	; 0x30
 800a8ec:	e7b2      	b.n	800a854 <_dtoa_r+0x1b4>
 800a8ee:	9b05      	ldr	r3, [sp, #20]
 800a8f0:	eba3 030b 	sub.w	r3, r3, fp
 800a8f4:	9305      	str	r3, [sp, #20]
 800a8f6:	f1cb 0300 	rsb	r3, fp, #0
 800a8fa:	9308      	str	r3, [sp, #32]
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800a900:	e7bf      	b.n	800a882 <_dtoa_r+0x1e2>
 800a902:	2300      	movs	r3, #0
 800a904:	9309      	str	r3, [sp, #36]	; 0x24
 800a906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a908:	2b00      	cmp	r3, #0
 800a90a:	dc52      	bgt.n	800a9b2 <_dtoa_r+0x312>
 800a90c:	2301      	movs	r3, #1
 800a90e:	9301      	str	r3, [sp, #4]
 800a910:	9304      	str	r3, [sp, #16]
 800a912:	461a      	mov	r2, r3
 800a914:	920a      	str	r2, [sp, #40]	; 0x28
 800a916:	e00b      	b.n	800a930 <_dtoa_r+0x290>
 800a918:	2301      	movs	r3, #1
 800a91a:	e7f3      	b.n	800a904 <_dtoa_r+0x264>
 800a91c:	2300      	movs	r3, #0
 800a91e:	9309      	str	r3, [sp, #36]	; 0x24
 800a920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a922:	445b      	add	r3, fp
 800a924:	9301      	str	r3, [sp, #4]
 800a926:	3301      	adds	r3, #1
 800a928:	2b01      	cmp	r3, #1
 800a92a:	9304      	str	r3, [sp, #16]
 800a92c:	bfb8      	it	lt
 800a92e:	2301      	movlt	r3, #1
 800a930:	69e0      	ldr	r0, [r4, #28]
 800a932:	2100      	movs	r1, #0
 800a934:	2204      	movs	r2, #4
 800a936:	f102 0614 	add.w	r6, r2, #20
 800a93a:	429e      	cmp	r6, r3
 800a93c:	d93d      	bls.n	800a9ba <_dtoa_r+0x31a>
 800a93e:	6041      	str	r1, [r0, #4]
 800a940:	4620      	mov	r0, r4
 800a942:	f001 f909 	bl	800bb58 <_Balloc>
 800a946:	9000      	str	r0, [sp, #0]
 800a948:	2800      	cmp	r0, #0
 800a94a:	d139      	bne.n	800a9c0 <_dtoa_r+0x320>
 800a94c:	4b16      	ldr	r3, [pc, #88]	; (800a9a8 <_dtoa_r+0x308>)
 800a94e:	4602      	mov	r2, r0
 800a950:	f240 11af 	movw	r1, #431	; 0x1af
 800a954:	e6bd      	b.n	800a6d2 <_dtoa_r+0x32>
 800a956:	2301      	movs	r3, #1
 800a958:	e7e1      	b.n	800a91e <_dtoa_r+0x27e>
 800a95a:	2501      	movs	r5, #1
 800a95c:	2300      	movs	r3, #0
 800a95e:	9307      	str	r3, [sp, #28]
 800a960:	9509      	str	r5, [sp, #36]	; 0x24
 800a962:	f04f 33ff 	mov.w	r3, #4294967295
 800a966:	9301      	str	r3, [sp, #4]
 800a968:	9304      	str	r3, [sp, #16]
 800a96a:	2200      	movs	r2, #0
 800a96c:	2312      	movs	r3, #18
 800a96e:	e7d1      	b.n	800a914 <_dtoa_r+0x274>
 800a970:	636f4361 	.word	0x636f4361
 800a974:	3fd287a7 	.word	0x3fd287a7
 800a978:	8b60c8b3 	.word	0x8b60c8b3
 800a97c:	3fc68a28 	.word	0x3fc68a28
 800a980:	509f79fb 	.word	0x509f79fb
 800a984:	3fd34413 	.word	0x3fd34413
 800a988:	0800d78f 	.word	0x0800d78f
 800a98c:	0800d7a6 	.word	0x0800d7a6
 800a990:	7ff00000 	.word	0x7ff00000
 800a994:	0800d78b 	.word	0x0800d78b
 800a998:	0800d782 	.word	0x0800d782
 800a99c:	0800d752 	.word	0x0800d752
 800a9a0:	3ff80000 	.word	0x3ff80000
 800a9a4:	0800d8f0 	.word	0x0800d8f0
 800a9a8:	0800d7fe 	.word	0x0800d7fe
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a9b0:	e7d7      	b.n	800a962 <_dtoa_r+0x2c2>
 800a9b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9b4:	9301      	str	r3, [sp, #4]
 800a9b6:	9304      	str	r3, [sp, #16]
 800a9b8:	e7ba      	b.n	800a930 <_dtoa_r+0x290>
 800a9ba:	3101      	adds	r1, #1
 800a9bc:	0052      	lsls	r2, r2, #1
 800a9be:	e7ba      	b.n	800a936 <_dtoa_r+0x296>
 800a9c0:	69e3      	ldr	r3, [r4, #28]
 800a9c2:	9a00      	ldr	r2, [sp, #0]
 800a9c4:	601a      	str	r2, [r3, #0]
 800a9c6:	9b04      	ldr	r3, [sp, #16]
 800a9c8:	2b0e      	cmp	r3, #14
 800a9ca:	f200 80a8 	bhi.w	800ab1e <_dtoa_r+0x47e>
 800a9ce:	2d00      	cmp	r5, #0
 800a9d0:	f000 80a5 	beq.w	800ab1e <_dtoa_r+0x47e>
 800a9d4:	f1bb 0f00 	cmp.w	fp, #0
 800a9d8:	dd38      	ble.n	800aa4c <_dtoa_r+0x3ac>
 800a9da:	4bc0      	ldr	r3, [pc, #768]	; (800acdc <_dtoa_r+0x63c>)
 800a9dc:	f00b 020f 	and.w	r2, fp, #15
 800a9e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9e4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a9e8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a9ec:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a9f0:	d019      	beq.n	800aa26 <_dtoa_r+0x386>
 800a9f2:	4bbb      	ldr	r3, [pc, #748]	; (800ace0 <_dtoa_r+0x640>)
 800a9f4:	ec51 0b18 	vmov	r0, r1, d8
 800a9f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9fc:	f7f5 ff2e 	bl	800085c <__aeabi_ddiv>
 800aa00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa04:	f008 080f 	and.w	r8, r8, #15
 800aa08:	2503      	movs	r5, #3
 800aa0a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ace0 <_dtoa_r+0x640>
 800aa0e:	f1b8 0f00 	cmp.w	r8, #0
 800aa12:	d10a      	bne.n	800aa2a <_dtoa_r+0x38a>
 800aa14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa18:	4632      	mov	r2, r6
 800aa1a:	463b      	mov	r3, r7
 800aa1c:	f7f5 ff1e 	bl	800085c <__aeabi_ddiv>
 800aa20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa24:	e02b      	b.n	800aa7e <_dtoa_r+0x3de>
 800aa26:	2502      	movs	r5, #2
 800aa28:	e7ef      	b.n	800aa0a <_dtoa_r+0x36a>
 800aa2a:	f018 0f01 	tst.w	r8, #1
 800aa2e:	d008      	beq.n	800aa42 <_dtoa_r+0x3a2>
 800aa30:	4630      	mov	r0, r6
 800aa32:	4639      	mov	r1, r7
 800aa34:	e9d9 2300 	ldrd	r2, r3, [r9]
 800aa38:	f7f5 fde6 	bl	8000608 <__aeabi_dmul>
 800aa3c:	3501      	adds	r5, #1
 800aa3e:	4606      	mov	r6, r0
 800aa40:	460f      	mov	r7, r1
 800aa42:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aa46:	f109 0908 	add.w	r9, r9, #8
 800aa4a:	e7e0      	b.n	800aa0e <_dtoa_r+0x36e>
 800aa4c:	f000 809f 	beq.w	800ab8e <_dtoa_r+0x4ee>
 800aa50:	f1cb 0600 	rsb	r6, fp, #0
 800aa54:	4ba1      	ldr	r3, [pc, #644]	; (800acdc <_dtoa_r+0x63c>)
 800aa56:	4fa2      	ldr	r7, [pc, #648]	; (800ace0 <_dtoa_r+0x640>)
 800aa58:	f006 020f 	and.w	r2, r6, #15
 800aa5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa64:	ec51 0b18 	vmov	r0, r1, d8
 800aa68:	f7f5 fdce 	bl	8000608 <__aeabi_dmul>
 800aa6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa70:	1136      	asrs	r6, r6, #4
 800aa72:	2300      	movs	r3, #0
 800aa74:	2502      	movs	r5, #2
 800aa76:	2e00      	cmp	r6, #0
 800aa78:	d17e      	bne.n	800ab78 <_dtoa_r+0x4d8>
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d1d0      	bne.n	800aa20 <_dtoa_r+0x380>
 800aa7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa80:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	f000 8084 	beq.w	800ab92 <_dtoa_r+0x4f2>
 800aa8a:	4b96      	ldr	r3, [pc, #600]	; (800ace4 <_dtoa_r+0x644>)
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	4640      	mov	r0, r8
 800aa90:	4649      	mov	r1, r9
 800aa92:	f7f6 f82b 	bl	8000aec <__aeabi_dcmplt>
 800aa96:	2800      	cmp	r0, #0
 800aa98:	d07b      	beq.n	800ab92 <_dtoa_r+0x4f2>
 800aa9a:	9b04      	ldr	r3, [sp, #16]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d078      	beq.n	800ab92 <_dtoa_r+0x4f2>
 800aaa0:	9b01      	ldr	r3, [sp, #4]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	dd39      	ble.n	800ab1a <_dtoa_r+0x47a>
 800aaa6:	4b90      	ldr	r3, [pc, #576]	; (800ace8 <_dtoa_r+0x648>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	4640      	mov	r0, r8
 800aaac:	4649      	mov	r1, r9
 800aaae:	f7f5 fdab 	bl	8000608 <__aeabi_dmul>
 800aab2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aab6:	9e01      	ldr	r6, [sp, #4]
 800aab8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800aabc:	3501      	adds	r5, #1
 800aabe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800aac2:	4628      	mov	r0, r5
 800aac4:	f7f5 fd36 	bl	8000534 <__aeabi_i2d>
 800aac8:	4642      	mov	r2, r8
 800aaca:	464b      	mov	r3, r9
 800aacc:	f7f5 fd9c 	bl	8000608 <__aeabi_dmul>
 800aad0:	4b86      	ldr	r3, [pc, #536]	; (800acec <_dtoa_r+0x64c>)
 800aad2:	2200      	movs	r2, #0
 800aad4:	f7f5 fbe2 	bl	800029c <__adddf3>
 800aad8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800aadc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aae0:	9303      	str	r3, [sp, #12]
 800aae2:	2e00      	cmp	r6, #0
 800aae4:	d158      	bne.n	800ab98 <_dtoa_r+0x4f8>
 800aae6:	4b82      	ldr	r3, [pc, #520]	; (800acf0 <_dtoa_r+0x650>)
 800aae8:	2200      	movs	r2, #0
 800aaea:	4640      	mov	r0, r8
 800aaec:	4649      	mov	r1, r9
 800aaee:	f7f5 fbd3 	bl	8000298 <__aeabi_dsub>
 800aaf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aaf6:	4680      	mov	r8, r0
 800aaf8:	4689      	mov	r9, r1
 800aafa:	f7f6 f815 	bl	8000b28 <__aeabi_dcmpgt>
 800aafe:	2800      	cmp	r0, #0
 800ab00:	f040 8296 	bne.w	800b030 <_dtoa_r+0x990>
 800ab04:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ab08:	4640      	mov	r0, r8
 800ab0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab0e:	4649      	mov	r1, r9
 800ab10:	f7f5 ffec 	bl	8000aec <__aeabi_dcmplt>
 800ab14:	2800      	cmp	r0, #0
 800ab16:	f040 8289 	bne.w	800b02c <_dtoa_r+0x98c>
 800ab1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ab1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f2c0 814e 	blt.w	800adc2 <_dtoa_r+0x722>
 800ab26:	f1bb 0f0e 	cmp.w	fp, #14
 800ab2a:	f300 814a 	bgt.w	800adc2 <_dtoa_r+0x722>
 800ab2e:	4b6b      	ldr	r3, [pc, #428]	; (800acdc <_dtoa_r+0x63c>)
 800ab30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ab34:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	f280 80dc 	bge.w	800acf8 <_dtoa_r+0x658>
 800ab40:	9b04      	ldr	r3, [sp, #16]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	f300 80d8 	bgt.w	800acf8 <_dtoa_r+0x658>
 800ab48:	f040 826f 	bne.w	800b02a <_dtoa_r+0x98a>
 800ab4c:	4b68      	ldr	r3, [pc, #416]	; (800acf0 <_dtoa_r+0x650>)
 800ab4e:	2200      	movs	r2, #0
 800ab50:	4640      	mov	r0, r8
 800ab52:	4649      	mov	r1, r9
 800ab54:	f7f5 fd58 	bl	8000608 <__aeabi_dmul>
 800ab58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab5c:	f7f5 ffda 	bl	8000b14 <__aeabi_dcmpge>
 800ab60:	9e04      	ldr	r6, [sp, #16]
 800ab62:	4637      	mov	r7, r6
 800ab64:	2800      	cmp	r0, #0
 800ab66:	f040 8245 	bne.w	800aff4 <_dtoa_r+0x954>
 800ab6a:	9d00      	ldr	r5, [sp, #0]
 800ab6c:	2331      	movs	r3, #49	; 0x31
 800ab6e:	f805 3b01 	strb.w	r3, [r5], #1
 800ab72:	f10b 0b01 	add.w	fp, fp, #1
 800ab76:	e241      	b.n	800affc <_dtoa_r+0x95c>
 800ab78:	07f2      	lsls	r2, r6, #31
 800ab7a:	d505      	bpl.n	800ab88 <_dtoa_r+0x4e8>
 800ab7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab80:	f7f5 fd42 	bl	8000608 <__aeabi_dmul>
 800ab84:	3501      	adds	r5, #1
 800ab86:	2301      	movs	r3, #1
 800ab88:	1076      	asrs	r6, r6, #1
 800ab8a:	3708      	adds	r7, #8
 800ab8c:	e773      	b.n	800aa76 <_dtoa_r+0x3d6>
 800ab8e:	2502      	movs	r5, #2
 800ab90:	e775      	b.n	800aa7e <_dtoa_r+0x3de>
 800ab92:	9e04      	ldr	r6, [sp, #16]
 800ab94:	465f      	mov	r7, fp
 800ab96:	e792      	b.n	800aabe <_dtoa_r+0x41e>
 800ab98:	9900      	ldr	r1, [sp, #0]
 800ab9a:	4b50      	ldr	r3, [pc, #320]	; (800acdc <_dtoa_r+0x63c>)
 800ab9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aba0:	4431      	add	r1, r6
 800aba2:	9102      	str	r1, [sp, #8]
 800aba4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aba6:	eeb0 9a47 	vmov.f32	s18, s14
 800abaa:	eef0 9a67 	vmov.f32	s19, s15
 800abae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800abb2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800abb6:	2900      	cmp	r1, #0
 800abb8:	d044      	beq.n	800ac44 <_dtoa_r+0x5a4>
 800abba:	494e      	ldr	r1, [pc, #312]	; (800acf4 <_dtoa_r+0x654>)
 800abbc:	2000      	movs	r0, #0
 800abbe:	f7f5 fe4d 	bl	800085c <__aeabi_ddiv>
 800abc2:	ec53 2b19 	vmov	r2, r3, d9
 800abc6:	f7f5 fb67 	bl	8000298 <__aeabi_dsub>
 800abca:	9d00      	ldr	r5, [sp, #0]
 800abcc:	ec41 0b19 	vmov	d9, r0, r1
 800abd0:	4649      	mov	r1, r9
 800abd2:	4640      	mov	r0, r8
 800abd4:	f7f5 ffc8 	bl	8000b68 <__aeabi_d2iz>
 800abd8:	4606      	mov	r6, r0
 800abda:	f7f5 fcab 	bl	8000534 <__aeabi_i2d>
 800abde:	4602      	mov	r2, r0
 800abe0:	460b      	mov	r3, r1
 800abe2:	4640      	mov	r0, r8
 800abe4:	4649      	mov	r1, r9
 800abe6:	f7f5 fb57 	bl	8000298 <__aeabi_dsub>
 800abea:	3630      	adds	r6, #48	; 0x30
 800abec:	f805 6b01 	strb.w	r6, [r5], #1
 800abf0:	ec53 2b19 	vmov	r2, r3, d9
 800abf4:	4680      	mov	r8, r0
 800abf6:	4689      	mov	r9, r1
 800abf8:	f7f5 ff78 	bl	8000aec <__aeabi_dcmplt>
 800abfc:	2800      	cmp	r0, #0
 800abfe:	d164      	bne.n	800acca <_dtoa_r+0x62a>
 800ac00:	4642      	mov	r2, r8
 800ac02:	464b      	mov	r3, r9
 800ac04:	4937      	ldr	r1, [pc, #220]	; (800ace4 <_dtoa_r+0x644>)
 800ac06:	2000      	movs	r0, #0
 800ac08:	f7f5 fb46 	bl	8000298 <__aeabi_dsub>
 800ac0c:	ec53 2b19 	vmov	r2, r3, d9
 800ac10:	f7f5 ff6c 	bl	8000aec <__aeabi_dcmplt>
 800ac14:	2800      	cmp	r0, #0
 800ac16:	f040 80b6 	bne.w	800ad86 <_dtoa_r+0x6e6>
 800ac1a:	9b02      	ldr	r3, [sp, #8]
 800ac1c:	429d      	cmp	r5, r3
 800ac1e:	f43f af7c 	beq.w	800ab1a <_dtoa_r+0x47a>
 800ac22:	4b31      	ldr	r3, [pc, #196]	; (800ace8 <_dtoa_r+0x648>)
 800ac24:	ec51 0b19 	vmov	r0, r1, d9
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f7f5 fced 	bl	8000608 <__aeabi_dmul>
 800ac2e:	4b2e      	ldr	r3, [pc, #184]	; (800ace8 <_dtoa_r+0x648>)
 800ac30:	ec41 0b19 	vmov	d9, r0, r1
 800ac34:	2200      	movs	r2, #0
 800ac36:	4640      	mov	r0, r8
 800ac38:	4649      	mov	r1, r9
 800ac3a:	f7f5 fce5 	bl	8000608 <__aeabi_dmul>
 800ac3e:	4680      	mov	r8, r0
 800ac40:	4689      	mov	r9, r1
 800ac42:	e7c5      	b.n	800abd0 <_dtoa_r+0x530>
 800ac44:	ec51 0b17 	vmov	r0, r1, d7
 800ac48:	f7f5 fcde 	bl	8000608 <__aeabi_dmul>
 800ac4c:	9b02      	ldr	r3, [sp, #8]
 800ac4e:	9d00      	ldr	r5, [sp, #0]
 800ac50:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac52:	ec41 0b19 	vmov	d9, r0, r1
 800ac56:	4649      	mov	r1, r9
 800ac58:	4640      	mov	r0, r8
 800ac5a:	f7f5 ff85 	bl	8000b68 <__aeabi_d2iz>
 800ac5e:	4606      	mov	r6, r0
 800ac60:	f7f5 fc68 	bl	8000534 <__aeabi_i2d>
 800ac64:	3630      	adds	r6, #48	; 0x30
 800ac66:	4602      	mov	r2, r0
 800ac68:	460b      	mov	r3, r1
 800ac6a:	4640      	mov	r0, r8
 800ac6c:	4649      	mov	r1, r9
 800ac6e:	f7f5 fb13 	bl	8000298 <__aeabi_dsub>
 800ac72:	f805 6b01 	strb.w	r6, [r5], #1
 800ac76:	9b02      	ldr	r3, [sp, #8]
 800ac78:	429d      	cmp	r5, r3
 800ac7a:	4680      	mov	r8, r0
 800ac7c:	4689      	mov	r9, r1
 800ac7e:	f04f 0200 	mov.w	r2, #0
 800ac82:	d124      	bne.n	800acce <_dtoa_r+0x62e>
 800ac84:	4b1b      	ldr	r3, [pc, #108]	; (800acf4 <_dtoa_r+0x654>)
 800ac86:	ec51 0b19 	vmov	r0, r1, d9
 800ac8a:	f7f5 fb07 	bl	800029c <__adddf3>
 800ac8e:	4602      	mov	r2, r0
 800ac90:	460b      	mov	r3, r1
 800ac92:	4640      	mov	r0, r8
 800ac94:	4649      	mov	r1, r9
 800ac96:	f7f5 ff47 	bl	8000b28 <__aeabi_dcmpgt>
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	d173      	bne.n	800ad86 <_dtoa_r+0x6e6>
 800ac9e:	ec53 2b19 	vmov	r2, r3, d9
 800aca2:	4914      	ldr	r1, [pc, #80]	; (800acf4 <_dtoa_r+0x654>)
 800aca4:	2000      	movs	r0, #0
 800aca6:	f7f5 faf7 	bl	8000298 <__aeabi_dsub>
 800acaa:	4602      	mov	r2, r0
 800acac:	460b      	mov	r3, r1
 800acae:	4640      	mov	r0, r8
 800acb0:	4649      	mov	r1, r9
 800acb2:	f7f5 ff1b 	bl	8000aec <__aeabi_dcmplt>
 800acb6:	2800      	cmp	r0, #0
 800acb8:	f43f af2f 	beq.w	800ab1a <_dtoa_r+0x47a>
 800acbc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800acbe:	1e6b      	subs	r3, r5, #1
 800acc0:	930f      	str	r3, [sp, #60]	; 0x3c
 800acc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800acc6:	2b30      	cmp	r3, #48	; 0x30
 800acc8:	d0f8      	beq.n	800acbc <_dtoa_r+0x61c>
 800acca:	46bb      	mov	fp, r7
 800accc:	e04a      	b.n	800ad64 <_dtoa_r+0x6c4>
 800acce:	4b06      	ldr	r3, [pc, #24]	; (800ace8 <_dtoa_r+0x648>)
 800acd0:	f7f5 fc9a 	bl	8000608 <__aeabi_dmul>
 800acd4:	4680      	mov	r8, r0
 800acd6:	4689      	mov	r9, r1
 800acd8:	e7bd      	b.n	800ac56 <_dtoa_r+0x5b6>
 800acda:	bf00      	nop
 800acdc:	0800d8f0 	.word	0x0800d8f0
 800ace0:	0800d8c8 	.word	0x0800d8c8
 800ace4:	3ff00000 	.word	0x3ff00000
 800ace8:	40240000 	.word	0x40240000
 800acec:	401c0000 	.word	0x401c0000
 800acf0:	40140000 	.word	0x40140000
 800acf4:	3fe00000 	.word	0x3fe00000
 800acf8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800acfc:	9d00      	ldr	r5, [sp, #0]
 800acfe:	4642      	mov	r2, r8
 800ad00:	464b      	mov	r3, r9
 800ad02:	4630      	mov	r0, r6
 800ad04:	4639      	mov	r1, r7
 800ad06:	f7f5 fda9 	bl	800085c <__aeabi_ddiv>
 800ad0a:	f7f5 ff2d 	bl	8000b68 <__aeabi_d2iz>
 800ad0e:	9001      	str	r0, [sp, #4]
 800ad10:	f7f5 fc10 	bl	8000534 <__aeabi_i2d>
 800ad14:	4642      	mov	r2, r8
 800ad16:	464b      	mov	r3, r9
 800ad18:	f7f5 fc76 	bl	8000608 <__aeabi_dmul>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	460b      	mov	r3, r1
 800ad20:	4630      	mov	r0, r6
 800ad22:	4639      	mov	r1, r7
 800ad24:	f7f5 fab8 	bl	8000298 <__aeabi_dsub>
 800ad28:	9e01      	ldr	r6, [sp, #4]
 800ad2a:	9f04      	ldr	r7, [sp, #16]
 800ad2c:	3630      	adds	r6, #48	; 0x30
 800ad2e:	f805 6b01 	strb.w	r6, [r5], #1
 800ad32:	9e00      	ldr	r6, [sp, #0]
 800ad34:	1bae      	subs	r6, r5, r6
 800ad36:	42b7      	cmp	r7, r6
 800ad38:	4602      	mov	r2, r0
 800ad3a:	460b      	mov	r3, r1
 800ad3c:	d134      	bne.n	800ada8 <_dtoa_r+0x708>
 800ad3e:	f7f5 faad 	bl	800029c <__adddf3>
 800ad42:	4642      	mov	r2, r8
 800ad44:	464b      	mov	r3, r9
 800ad46:	4606      	mov	r6, r0
 800ad48:	460f      	mov	r7, r1
 800ad4a:	f7f5 feed 	bl	8000b28 <__aeabi_dcmpgt>
 800ad4e:	b9c8      	cbnz	r0, 800ad84 <_dtoa_r+0x6e4>
 800ad50:	4642      	mov	r2, r8
 800ad52:	464b      	mov	r3, r9
 800ad54:	4630      	mov	r0, r6
 800ad56:	4639      	mov	r1, r7
 800ad58:	f7f5 febe 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad5c:	b110      	cbz	r0, 800ad64 <_dtoa_r+0x6c4>
 800ad5e:	9b01      	ldr	r3, [sp, #4]
 800ad60:	07db      	lsls	r3, r3, #31
 800ad62:	d40f      	bmi.n	800ad84 <_dtoa_r+0x6e4>
 800ad64:	4651      	mov	r1, sl
 800ad66:	4620      	mov	r0, r4
 800ad68:	f000 ff36 	bl	800bbd8 <_Bfree>
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad70:	702b      	strb	r3, [r5, #0]
 800ad72:	f10b 0301 	add.w	r3, fp, #1
 800ad76:	6013      	str	r3, [r2, #0]
 800ad78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	f43f ace2 	beq.w	800a744 <_dtoa_r+0xa4>
 800ad80:	601d      	str	r5, [r3, #0]
 800ad82:	e4df      	b.n	800a744 <_dtoa_r+0xa4>
 800ad84:	465f      	mov	r7, fp
 800ad86:	462b      	mov	r3, r5
 800ad88:	461d      	mov	r5, r3
 800ad8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad8e:	2a39      	cmp	r2, #57	; 0x39
 800ad90:	d106      	bne.n	800ada0 <_dtoa_r+0x700>
 800ad92:	9a00      	ldr	r2, [sp, #0]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d1f7      	bne.n	800ad88 <_dtoa_r+0x6e8>
 800ad98:	9900      	ldr	r1, [sp, #0]
 800ad9a:	2230      	movs	r2, #48	; 0x30
 800ad9c:	3701      	adds	r7, #1
 800ad9e:	700a      	strb	r2, [r1, #0]
 800ada0:	781a      	ldrb	r2, [r3, #0]
 800ada2:	3201      	adds	r2, #1
 800ada4:	701a      	strb	r2, [r3, #0]
 800ada6:	e790      	b.n	800acca <_dtoa_r+0x62a>
 800ada8:	4ba3      	ldr	r3, [pc, #652]	; (800b038 <_dtoa_r+0x998>)
 800adaa:	2200      	movs	r2, #0
 800adac:	f7f5 fc2c 	bl	8000608 <__aeabi_dmul>
 800adb0:	2200      	movs	r2, #0
 800adb2:	2300      	movs	r3, #0
 800adb4:	4606      	mov	r6, r0
 800adb6:	460f      	mov	r7, r1
 800adb8:	f7f5 fe8e 	bl	8000ad8 <__aeabi_dcmpeq>
 800adbc:	2800      	cmp	r0, #0
 800adbe:	d09e      	beq.n	800acfe <_dtoa_r+0x65e>
 800adc0:	e7d0      	b.n	800ad64 <_dtoa_r+0x6c4>
 800adc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adc4:	2a00      	cmp	r2, #0
 800adc6:	f000 80ca 	beq.w	800af5e <_dtoa_r+0x8be>
 800adca:	9a07      	ldr	r2, [sp, #28]
 800adcc:	2a01      	cmp	r2, #1
 800adce:	f300 80ad 	bgt.w	800af2c <_dtoa_r+0x88c>
 800add2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800add4:	2a00      	cmp	r2, #0
 800add6:	f000 80a5 	beq.w	800af24 <_dtoa_r+0x884>
 800adda:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800adde:	9e08      	ldr	r6, [sp, #32]
 800ade0:	9d05      	ldr	r5, [sp, #20]
 800ade2:	9a05      	ldr	r2, [sp, #20]
 800ade4:	441a      	add	r2, r3
 800ade6:	9205      	str	r2, [sp, #20]
 800ade8:	9a06      	ldr	r2, [sp, #24]
 800adea:	2101      	movs	r1, #1
 800adec:	441a      	add	r2, r3
 800adee:	4620      	mov	r0, r4
 800adf0:	9206      	str	r2, [sp, #24]
 800adf2:	f000 fff1 	bl	800bdd8 <__i2b>
 800adf6:	4607      	mov	r7, r0
 800adf8:	b165      	cbz	r5, 800ae14 <_dtoa_r+0x774>
 800adfa:	9b06      	ldr	r3, [sp, #24]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	dd09      	ble.n	800ae14 <_dtoa_r+0x774>
 800ae00:	42ab      	cmp	r3, r5
 800ae02:	9a05      	ldr	r2, [sp, #20]
 800ae04:	bfa8      	it	ge
 800ae06:	462b      	movge	r3, r5
 800ae08:	1ad2      	subs	r2, r2, r3
 800ae0a:	9205      	str	r2, [sp, #20]
 800ae0c:	9a06      	ldr	r2, [sp, #24]
 800ae0e:	1aed      	subs	r5, r5, r3
 800ae10:	1ad3      	subs	r3, r2, r3
 800ae12:	9306      	str	r3, [sp, #24]
 800ae14:	9b08      	ldr	r3, [sp, #32]
 800ae16:	b1f3      	cbz	r3, 800ae56 <_dtoa_r+0x7b6>
 800ae18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	f000 80a3 	beq.w	800af66 <_dtoa_r+0x8c6>
 800ae20:	2e00      	cmp	r6, #0
 800ae22:	dd10      	ble.n	800ae46 <_dtoa_r+0x7a6>
 800ae24:	4639      	mov	r1, r7
 800ae26:	4632      	mov	r2, r6
 800ae28:	4620      	mov	r0, r4
 800ae2a:	f001 f895 	bl	800bf58 <__pow5mult>
 800ae2e:	4652      	mov	r2, sl
 800ae30:	4601      	mov	r1, r0
 800ae32:	4607      	mov	r7, r0
 800ae34:	4620      	mov	r0, r4
 800ae36:	f000 ffe5 	bl	800be04 <__multiply>
 800ae3a:	4651      	mov	r1, sl
 800ae3c:	4680      	mov	r8, r0
 800ae3e:	4620      	mov	r0, r4
 800ae40:	f000 feca 	bl	800bbd8 <_Bfree>
 800ae44:	46c2      	mov	sl, r8
 800ae46:	9b08      	ldr	r3, [sp, #32]
 800ae48:	1b9a      	subs	r2, r3, r6
 800ae4a:	d004      	beq.n	800ae56 <_dtoa_r+0x7b6>
 800ae4c:	4651      	mov	r1, sl
 800ae4e:	4620      	mov	r0, r4
 800ae50:	f001 f882 	bl	800bf58 <__pow5mult>
 800ae54:	4682      	mov	sl, r0
 800ae56:	2101      	movs	r1, #1
 800ae58:	4620      	mov	r0, r4
 800ae5a:	f000 ffbd 	bl	800bdd8 <__i2b>
 800ae5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	4606      	mov	r6, r0
 800ae64:	f340 8081 	ble.w	800af6a <_dtoa_r+0x8ca>
 800ae68:	461a      	mov	r2, r3
 800ae6a:	4601      	mov	r1, r0
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	f001 f873 	bl	800bf58 <__pow5mult>
 800ae72:	9b07      	ldr	r3, [sp, #28]
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	4606      	mov	r6, r0
 800ae78:	dd7a      	ble.n	800af70 <_dtoa_r+0x8d0>
 800ae7a:	f04f 0800 	mov.w	r8, #0
 800ae7e:	6933      	ldr	r3, [r6, #16]
 800ae80:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ae84:	6918      	ldr	r0, [r3, #16]
 800ae86:	f000 ff59 	bl	800bd3c <__hi0bits>
 800ae8a:	f1c0 0020 	rsb	r0, r0, #32
 800ae8e:	9b06      	ldr	r3, [sp, #24]
 800ae90:	4418      	add	r0, r3
 800ae92:	f010 001f 	ands.w	r0, r0, #31
 800ae96:	f000 8094 	beq.w	800afc2 <_dtoa_r+0x922>
 800ae9a:	f1c0 0320 	rsb	r3, r0, #32
 800ae9e:	2b04      	cmp	r3, #4
 800aea0:	f340 8085 	ble.w	800afae <_dtoa_r+0x90e>
 800aea4:	9b05      	ldr	r3, [sp, #20]
 800aea6:	f1c0 001c 	rsb	r0, r0, #28
 800aeaa:	4403      	add	r3, r0
 800aeac:	9305      	str	r3, [sp, #20]
 800aeae:	9b06      	ldr	r3, [sp, #24]
 800aeb0:	4403      	add	r3, r0
 800aeb2:	4405      	add	r5, r0
 800aeb4:	9306      	str	r3, [sp, #24]
 800aeb6:	9b05      	ldr	r3, [sp, #20]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	dd05      	ble.n	800aec8 <_dtoa_r+0x828>
 800aebc:	4651      	mov	r1, sl
 800aebe:	461a      	mov	r2, r3
 800aec0:	4620      	mov	r0, r4
 800aec2:	f001 f8a3 	bl	800c00c <__lshift>
 800aec6:	4682      	mov	sl, r0
 800aec8:	9b06      	ldr	r3, [sp, #24]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	dd05      	ble.n	800aeda <_dtoa_r+0x83a>
 800aece:	4631      	mov	r1, r6
 800aed0:	461a      	mov	r2, r3
 800aed2:	4620      	mov	r0, r4
 800aed4:	f001 f89a 	bl	800c00c <__lshift>
 800aed8:	4606      	mov	r6, r0
 800aeda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d072      	beq.n	800afc6 <_dtoa_r+0x926>
 800aee0:	4631      	mov	r1, r6
 800aee2:	4650      	mov	r0, sl
 800aee4:	f001 f8fe 	bl	800c0e4 <__mcmp>
 800aee8:	2800      	cmp	r0, #0
 800aeea:	da6c      	bge.n	800afc6 <_dtoa_r+0x926>
 800aeec:	2300      	movs	r3, #0
 800aeee:	4651      	mov	r1, sl
 800aef0:	220a      	movs	r2, #10
 800aef2:	4620      	mov	r0, r4
 800aef4:	f000 fe92 	bl	800bc1c <__multadd>
 800aef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aefa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aefe:	4682      	mov	sl, r0
 800af00:	2b00      	cmp	r3, #0
 800af02:	f000 81b0 	beq.w	800b266 <_dtoa_r+0xbc6>
 800af06:	2300      	movs	r3, #0
 800af08:	4639      	mov	r1, r7
 800af0a:	220a      	movs	r2, #10
 800af0c:	4620      	mov	r0, r4
 800af0e:	f000 fe85 	bl	800bc1c <__multadd>
 800af12:	9b01      	ldr	r3, [sp, #4]
 800af14:	2b00      	cmp	r3, #0
 800af16:	4607      	mov	r7, r0
 800af18:	f300 8096 	bgt.w	800b048 <_dtoa_r+0x9a8>
 800af1c:	9b07      	ldr	r3, [sp, #28]
 800af1e:	2b02      	cmp	r3, #2
 800af20:	dc59      	bgt.n	800afd6 <_dtoa_r+0x936>
 800af22:	e091      	b.n	800b048 <_dtoa_r+0x9a8>
 800af24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800af2a:	e758      	b.n	800adde <_dtoa_r+0x73e>
 800af2c:	9b04      	ldr	r3, [sp, #16]
 800af2e:	1e5e      	subs	r6, r3, #1
 800af30:	9b08      	ldr	r3, [sp, #32]
 800af32:	42b3      	cmp	r3, r6
 800af34:	bfbf      	itttt	lt
 800af36:	9b08      	ldrlt	r3, [sp, #32]
 800af38:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800af3a:	9608      	strlt	r6, [sp, #32]
 800af3c:	1af3      	sublt	r3, r6, r3
 800af3e:	bfb4      	ite	lt
 800af40:	18d2      	addlt	r2, r2, r3
 800af42:	1b9e      	subge	r6, r3, r6
 800af44:	9b04      	ldr	r3, [sp, #16]
 800af46:	bfbc      	itt	lt
 800af48:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800af4a:	2600      	movlt	r6, #0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	bfb7      	itett	lt
 800af50:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800af54:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800af58:	1a9d      	sublt	r5, r3, r2
 800af5a:	2300      	movlt	r3, #0
 800af5c:	e741      	b.n	800ade2 <_dtoa_r+0x742>
 800af5e:	9e08      	ldr	r6, [sp, #32]
 800af60:	9d05      	ldr	r5, [sp, #20]
 800af62:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800af64:	e748      	b.n	800adf8 <_dtoa_r+0x758>
 800af66:	9a08      	ldr	r2, [sp, #32]
 800af68:	e770      	b.n	800ae4c <_dtoa_r+0x7ac>
 800af6a:	9b07      	ldr	r3, [sp, #28]
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	dc19      	bgt.n	800afa4 <_dtoa_r+0x904>
 800af70:	9b02      	ldr	r3, [sp, #8]
 800af72:	b9bb      	cbnz	r3, 800afa4 <_dtoa_r+0x904>
 800af74:	9b03      	ldr	r3, [sp, #12]
 800af76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af7a:	b99b      	cbnz	r3, 800afa4 <_dtoa_r+0x904>
 800af7c:	9b03      	ldr	r3, [sp, #12]
 800af7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af82:	0d1b      	lsrs	r3, r3, #20
 800af84:	051b      	lsls	r3, r3, #20
 800af86:	b183      	cbz	r3, 800afaa <_dtoa_r+0x90a>
 800af88:	9b05      	ldr	r3, [sp, #20]
 800af8a:	3301      	adds	r3, #1
 800af8c:	9305      	str	r3, [sp, #20]
 800af8e:	9b06      	ldr	r3, [sp, #24]
 800af90:	3301      	adds	r3, #1
 800af92:	9306      	str	r3, [sp, #24]
 800af94:	f04f 0801 	mov.w	r8, #1
 800af98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	f47f af6f 	bne.w	800ae7e <_dtoa_r+0x7de>
 800afa0:	2001      	movs	r0, #1
 800afa2:	e774      	b.n	800ae8e <_dtoa_r+0x7ee>
 800afa4:	f04f 0800 	mov.w	r8, #0
 800afa8:	e7f6      	b.n	800af98 <_dtoa_r+0x8f8>
 800afaa:	4698      	mov	r8, r3
 800afac:	e7f4      	b.n	800af98 <_dtoa_r+0x8f8>
 800afae:	d082      	beq.n	800aeb6 <_dtoa_r+0x816>
 800afb0:	9a05      	ldr	r2, [sp, #20]
 800afb2:	331c      	adds	r3, #28
 800afb4:	441a      	add	r2, r3
 800afb6:	9205      	str	r2, [sp, #20]
 800afb8:	9a06      	ldr	r2, [sp, #24]
 800afba:	441a      	add	r2, r3
 800afbc:	441d      	add	r5, r3
 800afbe:	9206      	str	r2, [sp, #24]
 800afc0:	e779      	b.n	800aeb6 <_dtoa_r+0x816>
 800afc2:	4603      	mov	r3, r0
 800afc4:	e7f4      	b.n	800afb0 <_dtoa_r+0x910>
 800afc6:	9b04      	ldr	r3, [sp, #16]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	dc37      	bgt.n	800b03c <_dtoa_r+0x99c>
 800afcc:	9b07      	ldr	r3, [sp, #28]
 800afce:	2b02      	cmp	r3, #2
 800afd0:	dd34      	ble.n	800b03c <_dtoa_r+0x99c>
 800afd2:	9b04      	ldr	r3, [sp, #16]
 800afd4:	9301      	str	r3, [sp, #4]
 800afd6:	9b01      	ldr	r3, [sp, #4]
 800afd8:	b963      	cbnz	r3, 800aff4 <_dtoa_r+0x954>
 800afda:	4631      	mov	r1, r6
 800afdc:	2205      	movs	r2, #5
 800afde:	4620      	mov	r0, r4
 800afe0:	f000 fe1c 	bl	800bc1c <__multadd>
 800afe4:	4601      	mov	r1, r0
 800afe6:	4606      	mov	r6, r0
 800afe8:	4650      	mov	r0, sl
 800afea:	f001 f87b 	bl	800c0e4 <__mcmp>
 800afee:	2800      	cmp	r0, #0
 800aff0:	f73f adbb 	bgt.w	800ab6a <_dtoa_r+0x4ca>
 800aff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aff6:	9d00      	ldr	r5, [sp, #0]
 800aff8:	ea6f 0b03 	mvn.w	fp, r3
 800affc:	f04f 0800 	mov.w	r8, #0
 800b000:	4631      	mov	r1, r6
 800b002:	4620      	mov	r0, r4
 800b004:	f000 fde8 	bl	800bbd8 <_Bfree>
 800b008:	2f00      	cmp	r7, #0
 800b00a:	f43f aeab 	beq.w	800ad64 <_dtoa_r+0x6c4>
 800b00e:	f1b8 0f00 	cmp.w	r8, #0
 800b012:	d005      	beq.n	800b020 <_dtoa_r+0x980>
 800b014:	45b8      	cmp	r8, r7
 800b016:	d003      	beq.n	800b020 <_dtoa_r+0x980>
 800b018:	4641      	mov	r1, r8
 800b01a:	4620      	mov	r0, r4
 800b01c:	f000 fddc 	bl	800bbd8 <_Bfree>
 800b020:	4639      	mov	r1, r7
 800b022:	4620      	mov	r0, r4
 800b024:	f000 fdd8 	bl	800bbd8 <_Bfree>
 800b028:	e69c      	b.n	800ad64 <_dtoa_r+0x6c4>
 800b02a:	2600      	movs	r6, #0
 800b02c:	4637      	mov	r7, r6
 800b02e:	e7e1      	b.n	800aff4 <_dtoa_r+0x954>
 800b030:	46bb      	mov	fp, r7
 800b032:	4637      	mov	r7, r6
 800b034:	e599      	b.n	800ab6a <_dtoa_r+0x4ca>
 800b036:	bf00      	nop
 800b038:	40240000 	.word	0x40240000
 800b03c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b03e:	2b00      	cmp	r3, #0
 800b040:	f000 80c8 	beq.w	800b1d4 <_dtoa_r+0xb34>
 800b044:	9b04      	ldr	r3, [sp, #16]
 800b046:	9301      	str	r3, [sp, #4]
 800b048:	2d00      	cmp	r5, #0
 800b04a:	dd05      	ble.n	800b058 <_dtoa_r+0x9b8>
 800b04c:	4639      	mov	r1, r7
 800b04e:	462a      	mov	r2, r5
 800b050:	4620      	mov	r0, r4
 800b052:	f000 ffdb 	bl	800c00c <__lshift>
 800b056:	4607      	mov	r7, r0
 800b058:	f1b8 0f00 	cmp.w	r8, #0
 800b05c:	d05b      	beq.n	800b116 <_dtoa_r+0xa76>
 800b05e:	6879      	ldr	r1, [r7, #4]
 800b060:	4620      	mov	r0, r4
 800b062:	f000 fd79 	bl	800bb58 <_Balloc>
 800b066:	4605      	mov	r5, r0
 800b068:	b928      	cbnz	r0, 800b076 <_dtoa_r+0x9d6>
 800b06a:	4b83      	ldr	r3, [pc, #524]	; (800b278 <_dtoa_r+0xbd8>)
 800b06c:	4602      	mov	r2, r0
 800b06e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b072:	f7ff bb2e 	b.w	800a6d2 <_dtoa_r+0x32>
 800b076:	693a      	ldr	r2, [r7, #16]
 800b078:	3202      	adds	r2, #2
 800b07a:	0092      	lsls	r2, r2, #2
 800b07c:	f107 010c 	add.w	r1, r7, #12
 800b080:	300c      	adds	r0, #12
 800b082:	f7ff fa64 	bl	800a54e <memcpy>
 800b086:	2201      	movs	r2, #1
 800b088:	4629      	mov	r1, r5
 800b08a:	4620      	mov	r0, r4
 800b08c:	f000 ffbe 	bl	800c00c <__lshift>
 800b090:	9b00      	ldr	r3, [sp, #0]
 800b092:	3301      	adds	r3, #1
 800b094:	9304      	str	r3, [sp, #16]
 800b096:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b09a:	4413      	add	r3, r2
 800b09c:	9308      	str	r3, [sp, #32]
 800b09e:	9b02      	ldr	r3, [sp, #8]
 800b0a0:	f003 0301 	and.w	r3, r3, #1
 800b0a4:	46b8      	mov	r8, r7
 800b0a6:	9306      	str	r3, [sp, #24]
 800b0a8:	4607      	mov	r7, r0
 800b0aa:	9b04      	ldr	r3, [sp, #16]
 800b0ac:	4631      	mov	r1, r6
 800b0ae:	3b01      	subs	r3, #1
 800b0b0:	4650      	mov	r0, sl
 800b0b2:	9301      	str	r3, [sp, #4]
 800b0b4:	f7ff fa6a 	bl	800a58c <quorem>
 800b0b8:	4641      	mov	r1, r8
 800b0ba:	9002      	str	r0, [sp, #8]
 800b0bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b0c0:	4650      	mov	r0, sl
 800b0c2:	f001 f80f 	bl	800c0e4 <__mcmp>
 800b0c6:	463a      	mov	r2, r7
 800b0c8:	9005      	str	r0, [sp, #20]
 800b0ca:	4631      	mov	r1, r6
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	f001 f825 	bl	800c11c <__mdiff>
 800b0d2:	68c2      	ldr	r2, [r0, #12]
 800b0d4:	4605      	mov	r5, r0
 800b0d6:	bb02      	cbnz	r2, 800b11a <_dtoa_r+0xa7a>
 800b0d8:	4601      	mov	r1, r0
 800b0da:	4650      	mov	r0, sl
 800b0dc:	f001 f802 	bl	800c0e4 <__mcmp>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	4629      	mov	r1, r5
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	9209      	str	r2, [sp, #36]	; 0x24
 800b0e8:	f000 fd76 	bl	800bbd8 <_Bfree>
 800b0ec:	9b07      	ldr	r3, [sp, #28]
 800b0ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0f0:	9d04      	ldr	r5, [sp, #16]
 800b0f2:	ea43 0102 	orr.w	r1, r3, r2
 800b0f6:	9b06      	ldr	r3, [sp, #24]
 800b0f8:	4319      	orrs	r1, r3
 800b0fa:	d110      	bne.n	800b11e <_dtoa_r+0xa7e>
 800b0fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b100:	d029      	beq.n	800b156 <_dtoa_r+0xab6>
 800b102:	9b05      	ldr	r3, [sp, #20]
 800b104:	2b00      	cmp	r3, #0
 800b106:	dd02      	ble.n	800b10e <_dtoa_r+0xa6e>
 800b108:	9b02      	ldr	r3, [sp, #8]
 800b10a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b10e:	9b01      	ldr	r3, [sp, #4]
 800b110:	f883 9000 	strb.w	r9, [r3]
 800b114:	e774      	b.n	800b000 <_dtoa_r+0x960>
 800b116:	4638      	mov	r0, r7
 800b118:	e7ba      	b.n	800b090 <_dtoa_r+0x9f0>
 800b11a:	2201      	movs	r2, #1
 800b11c:	e7e1      	b.n	800b0e2 <_dtoa_r+0xa42>
 800b11e:	9b05      	ldr	r3, [sp, #20]
 800b120:	2b00      	cmp	r3, #0
 800b122:	db04      	blt.n	800b12e <_dtoa_r+0xa8e>
 800b124:	9907      	ldr	r1, [sp, #28]
 800b126:	430b      	orrs	r3, r1
 800b128:	9906      	ldr	r1, [sp, #24]
 800b12a:	430b      	orrs	r3, r1
 800b12c:	d120      	bne.n	800b170 <_dtoa_r+0xad0>
 800b12e:	2a00      	cmp	r2, #0
 800b130:	dded      	ble.n	800b10e <_dtoa_r+0xa6e>
 800b132:	4651      	mov	r1, sl
 800b134:	2201      	movs	r2, #1
 800b136:	4620      	mov	r0, r4
 800b138:	f000 ff68 	bl	800c00c <__lshift>
 800b13c:	4631      	mov	r1, r6
 800b13e:	4682      	mov	sl, r0
 800b140:	f000 ffd0 	bl	800c0e4 <__mcmp>
 800b144:	2800      	cmp	r0, #0
 800b146:	dc03      	bgt.n	800b150 <_dtoa_r+0xab0>
 800b148:	d1e1      	bne.n	800b10e <_dtoa_r+0xa6e>
 800b14a:	f019 0f01 	tst.w	r9, #1
 800b14e:	d0de      	beq.n	800b10e <_dtoa_r+0xa6e>
 800b150:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b154:	d1d8      	bne.n	800b108 <_dtoa_r+0xa68>
 800b156:	9a01      	ldr	r2, [sp, #4]
 800b158:	2339      	movs	r3, #57	; 0x39
 800b15a:	7013      	strb	r3, [r2, #0]
 800b15c:	462b      	mov	r3, r5
 800b15e:	461d      	mov	r5, r3
 800b160:	3b01      	subs	r3, #1
 800b162:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b166:	2a39      	cmp	r2, #57	; 0x39
 800b168:	d06c      	beq.n	800b244 <_dtoa_r+0xba4>
 800b16a:	3201      	adds	r2, #1
 800b16c:	701a      	strb	r2, [r3, #0]
 800b16e:	e747      	b.n	800b000 <_dtoa_r+0x960>
 800b170:	2a00      	cmp	r2, #0
 800b172:	dd07      	ble.n	800b184 <_dtoa_r+0xae4>
 800b174:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b178:	d0ed      	beq.n	800b156 <_dtoa_r+0xab6>
 800b17a:	9a01      	ldr	r2, [sp, #4]
 800b17c:	f109 0301 	add.w	r3, r9, #1
 800b180:	7013      	strb	r3, [r2, #0]
 800b182:	e73d      	b.n	800b000 <_dtoa_r+0x960>
 800b184:	9b04      	ldr	r3, [sp, #16]
 800b186:	9a08      	ldr	r2, [sp, #32]
 800b188:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d043      	beq.n	800b218 <_dtoa_r+0xb78>
 800b190:	4651      	mov	r1, sl
 800b192:	2300      	movs	r3, #0
 800b194:	220a      	movs	r2, #10
 800b196:	4620      	mov	r0, r4
 800b198:	f000 fd40 	bl	800bc1c <__multadd>
 800b19c:	45b8      	cmp	r8, r7
 800b19e:	4682      	mov	sl, r0
 800b1a0:	f04f 0300 	mov.w	r3, #0
 800b1a4:	f04f 020a 	mov.w	r2, #10
 800b1a8:	4641      	mov	r1, r8
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	d107      	bne.n	800b1be <_dtoa_r+0xb1e>
 800b1ae:	f000 fd35 	bl	800bc1c <__multadd>
 800b1b2:	4680      	mov	r8, r0
 800b1b4:	4607      	mov	r7, r0
 800b1b6:	9b04      	ldr	r3, [sp, #16]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	9304      	str	r3, [sp, #16]
 800b1bc:	e775      	b.n	800b0aa <_dtoa_r+0xa0a>
 800b1be:	f000 fd2d 	bl	800bc1c <__multadd>
 800b1c2:	4639      	mov	r1, r7
 800b1c4:	4680      	mov	r8, r0
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	220a      	movs	r2, #10
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	f000 fd26 	bl	800bc1c <__multadd>
 800b1d0:	4607      	mov	r7, r0
 800b1d2:	e7f0      	b.n	800b1b6 <_dtoa_r+0xb16>
 800b1d4:	9b04      	ldr	r3, [sp, #16]
 800b1d6:	9301      	str	r3, [sp, #4]
 800b1d8:	9d00      	ldr	r5, [sp, #0]
 800b1da:	4631      	mov	r1, r6
 800b1dc:	4650      	mov	r0, sl
 800b1de:	f7ff f9d5 	bl	800a58c <quorem>
 800b1e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b1e6:	9b00      	ldr	r3, [sp, #0]
 800b1e8:	f805 9b01 	strb.w	r9, [r5], #1
 800b1ec:	1aea      	subs	r2, r5, r3
 800b1ee:	9b01      	ldr	r3, [sp, #4]
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	dd07      	ble.n	800b204 <_dtoa_r+0xb64>
 800b1f4:	4651      	mov	r1, sl
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	220a      	movs	r2, #10
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	f000 fd0e 	bl	800bc1c <__multadd>
 800b200:	4682      	mov	sl, r0
 800b202:	e7ea      	b.n	800b1da <_dtoa_r+0xb3a>
 800b204:	9b01      	ldr	r3, [sp, #4]
 800b206:	2b00      	cmp	r3, #0
 800b208:	bfc8      	it	gt
 800b20a:	461d      	movgt	r5, r3
 800b20c:	9b00      	ldr	r3, [sp, #0]
 800b20e:	bfd8      	it	le
 800b210:	2501      	movle	r5, #1
 800b212:	441d      	add	r5, r3
 800b214:	f04f 0800 	mov.w	r8, #0
 800b218:	4651      	mov	r1, sl
 800b21a:	2201      	movs	r2, #1
 800b21c:	4620      	mov	r0, r4
 800b21e:	f000 fef5 	bl	800c00c <__lshift>
 800b222:	4631      	mov	r1, r6
 800b224:	4682      	mov	sl, r0
 800b226:	f000 ff5d 	bl	800c0e4 <__mcmp>
 800b22a:	2800      	cmp	r0, #0
 800b22c:	dc96      	bgt.n	800b15c <_dtoa_r+0xabc>
 800b22e:	d102      	bne.n	800b236 <_dtoa_r+0xb96>
 800b230:	f019 0f01 	tst.w	r9, #1
 800b234:	d192      	bne.n	800b15c <_dtoa_r+0xabc>
 800b236:	462b      	mov	r3, r5
 800b238:	461d      	mov	r5, r3
 800b23a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b23e:	2a30      	cmp	r2, #48	; 0x30
 800b240:	d0fa      	beq.n	800b238 <_dtoa_r+0xb98>
 800b242:	e6dd      	b.n	800b000 <_dtoa_r+0x960>
 800b244:	9a00      	ldr	r2, [sp, #0]
 800b246:	429a      	cmp	r2, r3
 800b248:	d189      	bne.n	800b15e <_dtoa_r+0xabe>
 800b24a:	f10b 0b01 	add.w	fp, fp, #1
 800b24e:	2331      	movs	r3, #49	; 0x31
 800b250:	e796      	b.n	800b180 <_dtoa_r+0xae0>
 800b252:	4b0a      	ldr	r3, [pc, #40]	; (800b27c <_dtoa_r+0xbdc>)
 800b254:	f7ff ba99 	b.w	800a78a <_dtoa_r+0xea>
 800b258:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	f47f aa6d 	bne.w	800a73a <_dtoa_r+0x9a>
 800b260:	4b07      	ldr	r3, [pc, #28]	; (800b280 <_dtoa_r+0xbe0>)
 800b262:	f7ff ba92 	b.w	800a78a <_dtoa_r+0xea>
 800b266:	9b01      	ldr	r3, [sp, #4]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	dcb5      	bgt.n	800b1d8 <_dtoa_r+0xb38>
 800b26c:	9b07      	ldr	r3, [sp, #28]
 800b26e:	2b02      	cmp	r3, #2
 800b270:	f73f aeb1 	bgt.w	800afd6 <_dtoa_r+0x936>
 800b274:	e7b0      	b.n	800b1d8 <_dtoa_r+0xb38>
 800b276:	bf00      	nop
 800b278:	0800d7fe 	.word	0x0800d7fe
 800b27c:	0800d751 	.word	0x0800d751
 800b280:	0800d782 	.word	0x0800d782

0800b284 <_free_r>:
 800b284:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b286:	2900      	cmp	r1, #0
 800b288:	d044      	beq.n	800b314 <_free_r+0x90>
 800b28a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b28e:	9001      	str	r0, [sp, #4]
 800b290:	2b00      	cmp	r3, #0
 800b292:	f1a1 0404 	sub.w	r4, r1, #4
 800b296:	bfb8      	it	lt
 800b298:	18e4      	addlt	r4, r4, r3
 800b29a:	f000 fc51 	bl	800bb40 <__malloc_lock>
 800b29e:	4a1e      	ldr	r2, [pc, #120]	; (800b318 <_free_r+0x94>)
 800b2a0:	9801      	ldr	r0, [sp, #4]
 800b2a2:	6813      	ldr	r3, [r2, #0]
 800b2a4:	b933      	cbnz	r3, 800b2b4 <_free_r+0x30>
 800b2a6:	6063      	str	r3, [r4, #4]
 800b2a8:	6014      	str	r4, [r2, #0]
 800b2aa:	b003      	add	sp, #12
 800b2ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2b0:	f000 bc4c 	b.w	800bb4c <__malloc_unlock>
 800b2b4:	42a3      	cmp	r3, r4
 800b2b6:	d908      	bls.n	800b2ca <_free_r+0x46>
 800b2b8:	6825      	ldr	r5, [r4, #0]
 800b2ba:	1961      	adds	r1, r4, r5
 800b2bc:	428b      	cmp	r3, r1
 800b2be:	bf01      	itttt	eq
 800b2c0:	6819      	ldreq	r1, [r3, #0]
 800b2c2:	685b      	ldreq	r3, [r3, #4]
 800b2c4:	1949      	addeq	r1, r1, r5
 800b2c6:	6021      	streq	r1, [r4, #0]
 800b2c8:	e7ed      	b.n	800b2a6 <_free_r+0x22>
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	b10b      	cbz	r3, 800b2d4 <_free_r+0x50>
 800b2d0:	42a3      	cmp	r3, r4
 800b2d2:	d9fa      	bls.n	800b2ca <_free_r+0x46>
 800b2d4:	6811      	ldr	r1, [r2, #0]
 800b2d6:	1855      	adds	r5, r2, r1
 800b2d8:	42a5      	cmp	r5, r4
 800b2da:	d10b      	bne.n	800b2f4 <_free_r+0x70>
 800b2dc:	6824      	ldr	r4, [r4, #0]
 800b2de:	4421      	add	r1, r4
 800b2e0:	1854      	adds	r4, r2, r1
 800b2e2:	42a3      	cmp	r3, r4
 800b2e4:	6011      	str	r1, [r2, #0]
 800b2e6:	d1e0      	bne.n	800b2aa <_free_r+0x26>
 800b2e8:	681c      	ldr	r4, [r3, #0]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	6053      	str	r3, [r2, #4]
 800b2ee:	440c      	add	r4, r1
 800b2f0:	6014      	str	r4, [r2, #0]
 800b2f2:	e7da      	b.n	800b2aa <_free_r+0x26>
 800b2f4:	d902      	bls.n	800b2fc <_free_r+0x78>
 800b2f6:	230c      	movs	r3, #12
 800b2f8:	6003      	str	r3, [r0, #0]
 800b2fa:	e7d6      	b.n	800b2aa <_free_r+0x26>
 800b2fc:	6825      	ldr	r5, [r4, #0]
 800b2fe:	1961      	adds	r1, r4, r5
 800b300:	428b      	cmp	r3, r1
 800b302:	bf04      	itt	eq
 800b304:	6819      	ldreq	r1, [r3, #0]
 800b306:	685b      	ldreq	r3, [r3, #4]
 800b308:	6063      	str	r3, [r4, #4]
 800b30a:	bf04      	itt	eq
 800b30c:	1949      	addeq	r1, r1, r5
 800b30e:	6021      	streq	r1, [r4, #0]
 800b310:	6054      	str	r4, [r2, #4]
 800b312:	e7ca      	b.n	800b2aa <_free_r+0x26>
 800b314:	b003      	add	sp, #12
 800b316:	bd30      	pop	{r4, r5, pc}
 800b318:	200008a8 	.word	0x200008a8

0800b31c <rshift>:
 800b31c:	6903      	ldr	r3, [r0, #16]
 800b31e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b322:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b326:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b32a:	f100 0414 	add.w	r4, r0, #20
 800b32e:	dd45      	ble.n	800b3bc <rshift+0xa0>
 800b330:	f011 011f 	ands.w	r1, r1, #31
 800b334:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b338:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b33c:	d10c      	bne.n	800b358 <rshift+0x3c>
 800b33e:	f100 0710 	add.w	r7, r0, #16
 800b342:	4629      	mov	r1, r5
 800b344:	42b1      	cmp	r1, r6
 800b346:	d334      	bcc.n	800b3b2 <rshift+0x96>
 800b348:	1a9b      	subs	r3, r3, r2
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	1eea      	subs	r2, r5, #3
 800b34e:	4296      	cmp	r6, r2
 800b350:	bf38      	it	cc
 800b352:	2300      	movcc	r3, #0
 800b354:	4423      	add	r3, r4
 800b356:	e015      	b.n	800b384 <rshift+0x68>
 800b358:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b35c:	f1c1 0820 	rsb	r8, r1, #32
 800b360:	40cf      	lsrs	r7, r1
 800b362:	f105 0e04 	add.w	lr, r5, #4
 800b366:	46a1      	mov	r9, r4
 800b368:	4576      	cmp	r6, lr
 800b36a:	46f4      	mov	ip, lr
 800b36c:	d815      	bhi.n	800b39a <rshift+0x7e>
 800b36e:	1a9a      	subs	r2, r3, r2
 800b370:	0092      	lsls	r2, r2, #2
 800b372:	3a04      	subs	r2, #4
 800b374:	3501      	adds	r5, #1
 800b376:	42ae      	cmp	r6, r5
 800b378:	bf38      	it	cc
 800b37a:	2200      	movcc	r2, #0
 800b37c:	18a3      	adds	r3, r4, r2
 800b37e:	50a7      	str	r7, [r4, r2]
 800b380:	b107      	cbz	r7, 800b384 <rshift+0x68>
 800b382:	3304      	adds	r3, #4
 800b384:	1b1a      	subs	r2, r3, r4
 800b386:	42a3      	cmp	r3, r4
 800b388:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b38c:	bf08      	it	eq
 800b38e:	2300      	moveq	r3, #0
 800b390:	6102      	str	r2, [r0, #16]
 800b392:	bf08      	it	eq
 800b394:	6143      	streq	r3, [r0, #20]
 800b396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b39a:	f8dc c000 	ldr.w	ip, [ip]
 800b39e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b3a2:	ea4c 0707 	orr.w	r7, ip, r7
 800b3a6:	f849 7b04 	str.w	r7, [r9], #4
 800b3aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b3ae:	40cf      	lsrs	r7, r1
 800b3b0:	e7da      	b.n	800b368 <rshift+0x4c>
 800b3b2:	f851 cb04 	ldr.w	ip, [r1], #4
 800b3b6:	f847 cf04 	str.w	ip, [r7, #4]!
 800b3ba:	e7c3      	b.n	800b344 <rshift+0x28>
 800b3bc:	4623      	mov	r3, r4
 800b3be:	e7e1      	b.n	800b384 <rshift+0x68>

0800b3c0 <__hexdig_fun>:
 800b3c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b3c4:	2b09      	cmp	r3, #9
 800b3c6:	d802      	bhi.n	800b3ce <__hexdig_fun+0xe>
 800b3c8:	3820      	subs	r0, #32
 800b3ca:	b2c0      	uxtb	r0, r0
 800b3cc:	4770      	bx	lr
 800b3ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b3d2:	2b05      	cmp	r3, #5
 800b3d4:	d801      	bhi.n	800b3da <__hexdig_fun+0x1a>
 800b3d6:	3847      	subs	r0, #71	; 0x47
 800b3d8:	e7f7      	b.n	800b3ca <__hexdig_fun+0xa>
 800b3da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b3de:	2b05      	cmp	r3, #5
 800b3e0:	d801      	bhi.n	800b3e6 <__hexdig_fun+0x26>
 800b3e2:	3827      	subs	r0, #39	; 0x27
 800b3e4:	e7f1      	b.n	800b3ca <__hexdig_fun+0xa>
 800b3e6:	2000      	movs	r0, #0
 800b3e8:	4770      	bx	lr
	...

0800b3ec <__gethex>:
 800b3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f0:	4617      	mov	r7, r2
 800b3f2:	680a      	ldr	r2, [r1, #0]
 800b3f4:	b085      	sub	sp, #20
 800b3f6:	f102 0b02 	add.w	fp, r2, #2
 800b3fa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b3fe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b402:	4681      	mov	r9, r0
 800b404:	468a      	mov	sl, r1
 800b406:	9302      	str	r3, [sp, #8]
 800b408:	32fe      	adds	r2, #254	; 0xfe
 800b40a:	eb02 030b 	add.w	r3, r2, fp
 800b40e:	46d8      	mov	r8, fp
 800b410:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b414:	9301      	str	r3, [sp, #4]
 800b416:	2830      	cmp	r0, #48	; 0x30
 800b418:	d0f7      	beq.n	800b40a <__gethex+0x1e>
 800b41a:	f7ff ffd1 	bl	800b3c0 <__hexdig_fun>
 800b41e:	4604      	mov	r4, r0
 800b420:	2800      	cmp	r0, #0
 800b422:	d138      	bne.n	800b496 <__gethex+0xaa>
 800b424:	49a7      	ldr	r1, [pc, #668]	; (800b6c4 <__gethex+0x2d8>)
 800b426:	2201      	movs	r2, #1
 800b428:	4640      	mov	r0, r8
 800b42a:	f7fe fff4 	bl	800a416 <strncmp>
 800b42e:	4606      	mov	r6, r0
 800b430:	2800      	cmp	r0, #0
 800b432:	d169      	bne.n	800b508 <__gethex+0x11c>
 800b434:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b438:	465d      	mov	r5, fp
 800b43a:	f7ff ffc1 	bl	800b3c0 <__hexdig_fun>
 800b43e:	2800      	cmp	r0, #0
 800b440:	d064      	beq.n	800b50c <__gethex+0x120>
 800b442:	465a      	mov	r2, fp
 800b444:	7810      	ldrb	r0, [r2, #0]
 800b446:	2830      	cmp	r0, #48	; 0x30
 800b448:	4690      	mov	r8, r2
 800b44a:	f102 0201 	add.w	r2, r2, #1
 800b44e:	d0f9      	beq.n	800b444 <__gethex+0x58>
 800b450:	f7ff ffb6 	bl	800b3c0 <__hexdig_fun>
 800b454:	2301      	movs	r3, #1
 800b456:	fab0 f480 	clz	r4, r0
 800b45a:	0964      	lsrs	r4, r4, #5
 800b45c:	465e      	mov	r6, fp
 800b45e:	9301      	str	r3, [sp, #4]
 800b460:	4642      	mov	r2, r8
 800b462:	4615      	mov	r5, r2
 800b464:	3201      	adds	r2, #1
 800b466:	7828      	ldrb	r0, [r5, #0]
 800b468:	f7ff ffaa 	bl	800b3c0 <__hexdig_fun>
 800b46c:	2800      	cmp	r0, #0
 800b46e:	d1f8      	bne.n	800b462 <__gethex+0x76>
 800b470:	4994      	ldr	r1, [pc, #592]	; (800b6c4 <__gethex+0x2d8>)
 800b472:	2201      	movs	r2, #1
 800b474:	4628      	mov	r0, r5
 800b476:	f7fe ffce 	bl	800a416 <strncmp>
 800b47a:	b978      	cbnz	r0, 800b49c <__gethex+0xb0>
 800b47c:	b946      	cbnz	r6, 800b490 <__gethex+0xa4>
 800b47e:	1c6e      	adds	r6, r5, #1
 800b480:	4632      	mov	r2, r6
 800b482:	4615      	mov	r5, r2
 800b484:	3201      	adds	r2, #1
 800b486:	7828      	ldrb	r0, [r5, #0]
 800b488:	f7ff ff9a 	bl	800b3c0 <__hexdig_fun>
 800b48c:	2800      	cmp	r0, #0
 800b48e:	d1f8      	bne.n	800b482 <__gethex+0x96>
 800b490:	1b73      	subs	r3, r6, r5
 800b492:	009e      	lsls	r6, r3, #2
 800b494:	e004      	b.n	800b4a0 <__gethex+0xb4>
 800b496:	2400      	movs	r4, #0
 800b498:	4626      	mov	r6, r4
 800b49a:	e7e1      	b.n	800b460 <__gethex+0x74>
 800b49c:	2e00      	cmp	r6, #0
 800b49e:	d1f7      	bne.n	800b490 <__gethex+0xa4>
 800b4a0:	782b      	ldrb	r3, [r5, #0]
 800b4a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b4a6:	2b50      	cmp	r3, #80	; 0x50
 800b4a8:	d13d      	bne.n	800b526 <__gethex+0x13a>
 800b4aa:	786b      	ldrb	r3, [r5, #1]
 800b4ac:	2b2b      	cmp	r3, #43	; 0x2b
 800b4ae:	d02f      	beq.n	800b510 <__gethex+0x124>
 800b4b0:	2b2d      	cmp	r3, #45	; 0x2d
 800b4b2:	d031      	beq.n	800b518 <__gethex+0x12c>
 800b4b4:	1c69      	adds	r1, r5, #1
 800b4b6:	f04f 0b00 	mov.w	fp, #0
 800b4ba:	7808      	ldrb	r0, [r1, #0]
 800b4bc:	f7ff ff80 	bl	800b3c0 <__hexdig_fun>
 800b4c0:	1e42      	subs	r2, r0, #1
 800b4c2:	b2d2      	uxtb	r2, r2
 800b4c4:	2a18      	cmp	r2, #24
 800b4c6:	d82e      	bhi.n	800b526 <__gethex+0x13a>
 800b4c8:	f1a0 0210 	sub.w	r2, r0, #16
 800b4cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b4d0:	f7ff ff76 	bl	800b3c0 <__hexdig_fun>
 800b4d4:	f100 3cff 	add.w	ip, r0, #4294967295
 800b4d8:	fa5f fc8c 	uxtb.w	ip, ip
 800b4dc:	f1bc 0f18 	cmp.w	ip, #24
 800b4e0:	d91d      	bls.n	800b51e <__gethex+0x132>
 800b4e2:	f1bb 0f00 	cmp.w	fp, #0
 800b4e6:	d000      	beq.n	800b4ea <__gethex+0xfe>
 800b4e8:	4252      	negs	r2, r2
 800b4ea:	4416      	add	r6, r2
 800b4ec:	f8ca 1000 	str.w	r1, [sl]
 800b4f0:	b1dc      	cbz	r4, 800b52a <__gethex+0x13e>
 800b4f2:	9b01      	ldr	r3, [sp, #4]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	bf14      	ite	ne
 800b4f8:	f04f 0800 	movne.w	r8, #0
 800b4fc:	f04f 0806 	moveq.w	r8, #6
 800b500:	4640      	mov	r0, r8
 800b502:	b005      	add	sp, #20
 800b504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b508:	4645      	mov	r5, r8
 800b50a:	4626      	mov	r6, r4
 800b50c:	2401      	movs	r4, #1
 800b50e:	e7c7      	b.n	800b4a0 <__gethex+0xb4>
 800b510:	f04f 0b00 	mov.w	fp, #0
 800b514:	1ca9      	adds	r1, r5, #2
 800b516:	e7d0      	b.n	800b4ba <__gethex+0xce>
 800b518:	f04f 0b01 	mov.w	fp, #1
 800b51c:	e7fa      	b.n	800b514 <__gethex+0x128>
 800b51e:	230a      	movs	r3, #10
 800b520:	fb03 0002 	mla	r0, r3, r2, r0
 800b524:	e7d0      	b.n	800b4c8 <__gethex+0xdc>
 800b526:	4629      	mov	r1, r5
 800b528:	e7e0      	b.n	800b4ec <__gethex+0x100>
 800b52a:	eba5 0308 	sub.w	r3, r5, r8
 800b52e:	3b01      	subs	r3, #1
 800b530:	4621      	mov	r1, r4
 800b532:	2b07      	cmp	r3, #7
 800b534:	dc0a      	bgt.n	800b54c <__gethex+0x160>
 800b536:	4648      	mov	r0, r9
 800b538:	f000 fb0e 	bl	800bb58 <_Balloc>
 800b53c:	4604      	mov	r4, r0
 800b53e:	b940      	cbnz	r0, 800b552 <__gethex+0x166>
 800b540:	4b61      	ldr	r3, [pc, #388]	; (800b6c8 <__gethex+0x2dc>)
 800b542:	4602      	mov	r2, r0
 800b544:	21e4      	movs	r1, #228	; 0xe4
 800b546:	4861      	ldr	r0, [pc, #388]	; (800b6cc <__gethex+0x2e0>)
 800b548:	f001 f9f0 	bl	800c92c <__assert_func>
 800b54c:	3101      	adds	r1, #1
 800b54e:	105b      	asrs	r3, r3, #1
 800b550:	e7ef      	b.n	800b532 <__gethex+0x146>
 800b552:	f100 0a14 	add.w	sl, r0, #20
 800b556:	2300      	movs	r3, #0
 800b558:	495a      	ldr	r1, [pc, #360]	; (800b6c4 <__gethex+0x2d8>)
 800b55a:	f8cd a004 	str.w	sl, [sp, #4]
 800b55e:	469b      	mov	fp, r3
 800b560:	45a8      	cmp	r8, r5
 800b562:	d342      	bcc.n	800b5ea <__gethex+0x1fe>
 800b564:	9801      	ldr	r0, [sp, #4]
 800b566:	f840 bb04 	str.w	fp, [r0], #4
 800b56a:	eba0 000a 	sub.w	r0, r0, sl
 800b56e:	1080      	asrs	r0, r0, #2
 800b570:	6120      	str	r0, [r4, #16]
 800b572:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b576:	4658      	mov	r0, fp
 800b578:	f000 fbe0 	bl	800bd3c <__hi0bits>
 800b57c:	683d      	ldr	r5, [r7, #0]
 800b57e:	eba8 0000 	sub.w	r0, r8, r0
 800b582:	42a8      	cmp	r0, r5
 800b584:	dd59      	ble.n	800b63a <__gethex+0x24e>
 800b586:	eba0 0805 	sub.w	r8, r0, r5
 800b58a:	4641      	mov	r1, r8
 800b58c:	4620      	mov	r0, r4
 800b58e:	f000 ff6f 	bl	800c470 <__any_on>
 800b592:	4683      	mov	fp, r0
 800b594:	b1b8      	cbz	r0, 800b5c6 <__gethex+0x1da>
 800b596:	f108 33ff 	add.w	r3, r8, #4294967295
 800b59a:	1159      	asrs	r1, r3, #5
 800b59c:	f003 021f 	and.w	r2, r3, #31
 800b5a0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b5a4:	f04f 0b01 	mov.w	fp, #1
 800b5a8:	fa0b f202 	lsl.w	r2, fp, r2
 800b5ac:	420a      	tst	r2, r1
 800b5ae:	d00a      	beq.n	800b5c6 <__gethex+0x1da>
 800b5b0:	455b      	cmp	r3, fp
 800b5b2:	dd06      	ble.n	800b5c2 <__gethex+0x1d6>
 800b5b4:	f1a8 0102 	sub.w	r1, r8, #2
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	f000 ff59 	bl	800c470 <__any_on>
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	d138      	bne.n	800b634 <__gethex+0x248>
 800b5c2:	f04f 0b02 	mov.w	fp, #2
 800b5c6:	4641      	mov	r1, r8
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	f7ff fea7 	bl	800b31c <rshift>
 800b5ce:	4446      	add	r6, r8
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	42b3      	cmp	r3, r6
 800b5d4:	da41      	bge.n	800b65a <__gethex+0x26e>
 800b5d6:	4621      	mov	r1, r4
 800b5d8:	4648      	mov	r0, r9
 800b5da:	f000 fafd 	bl	800bbd8 <_Bfree>
 800b5de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	6013      	str	r3, [r2, #0]
 800b5e4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b5e8:	e78a      	b.n	800b500 <__gethex+0x114>
 800b5ea:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b5ee:	2a2e      	cmp	r2, #46	; 0x2e
 800b5f0:	d014      	beq.n	800b61c <__gethex+0x230>
 800b5f2:	2b20      	cmp	r3, #32
 800b5f4:	d106      	bne.n	800b604 <__gethex+0x218>
 800b5f6:	9b01      	ldr	r3, [sp, #4]
 800b5f8:	f843 bb04 	str.w	fp, [r3], #4
 800b5fc:	f04f 0b00 	mov.w	fp, #0
 800b600:	9301      	str	r3, [sp, #4]
 800b602:	465b      	mov	r3, fp
 800b604:	7828      	ldrb	r0, [r5, #0]
 800b606:	9303      	str	r3, [sp, #12]
 800b608:	f7ff feda 	bl	800b3c0 <__hexdig_fun>
 800b60c:	9b03      	ldr	r3, [sp, #12]
 800b60e:	f000 000f 	and.w	r0, r0, #15
 800b612:	4098      	lsls	r0, r3
 800b614:	ea4b 0b00 	orr.w	fp, fp, r0
 800b618:	3304      	adds	r3, #4
 800b61a:	e7a1      	b.n	800b560 <__gethex+0x174>
 800b61c:	45a8      	cmp	r8, r5
 800b61e:	d8e8      	bhi.n	800b5f2 <__gethex+0x206>
 800b620:	2201      	movs	r2, #1
 800b622:	4628      	mov	r0, r5
 800b624:	9303      	str	r3, [sp, #12]
 800b626:	f7fe fef6 	bl	800a416 <strncmp>
 800b62a:	4926      	ldr	r1, [pc, #152]	; (800b6c4 <__gethex+0x2d8>)
 800b62c:	9b03      	ldr	r3, [sp, #12]
 800b62e:	2800      	cmp	r0, #0
 800b630:	d1df      	bne.n	800b5f2 <__gethex+0x206>
 800b632:	e795      	b.n	800b560 <__gethex+0x174>
 800b634:	f04f 0b03 	mov.w	fp, #3
 800b638:	e7c5      	b.n	800b5c6 <__gethex+0x1da>
 800b63a:	da0b      	bge.n	800b654 <__gethex+0x268>
 800b63c:	eba5 0800 	sub.w	r8, r5, r0
 800b640:	4621      	mov	r1, r4
 800b642:	4642      	mov	r2, r8
 800b644:	4648      	mov	r0, r9
 800b646:	f000 fce1 	bl	800c00c <__lshift>
 800b64a:	eba6 0608 	sub.w	r6, r6, r8
 800b64e:	4604      	mov	r4, r0
 800b650:	f100 0a14 	add.w	sl, r0, #20
 800b654:	f04f 0b00 	mov.w	fp, #0
 800b658:	e7ba      	b.n	800b5d0 <__gethex+0x1e4>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	42b3      	cmp	r3, r6
 800b65e:	dd73      	ble.n	800b748 <__gethex+0x35c>
 800b660:	1b9e      	subs	r6, r3, r6
 800b662:	42b5      	cmp	r5, r6
 800b664:	dc34      	bgt.n	800b6d0 <__gethex+0x2e4>
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2b02      	cmp	r3, #2
 800b66a:	d023      	beq.n	800b6b4 <__gethex+0x2c8>
 800b66c:	2b03      	cmp	r3, #3
 800b66e:	d025      	beq.n	800b6bc <__gethex+0x2d0>
 800b670:	2b01      	cmp	r3, #1
 800b672:	d115      	bne.n	800b6a0 <__gethex+0x2b4>
 800b674:	42b5      	cmp	r5, r6
 800b676:	d113      	bne.n	800b6a0 <__gethex+0x2b4>
 800b678:	2d01      	cmp	r5, #1
 800b67a:	d10b      	bne.n	800b694 <__gethex+0x2a8>
 800b67c:	9a02      	ldr	r2, [sp, #8]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6013      	str	r3, [r2, #0]
 800b682:	2301      	movs	r3, #1
 800b684:	6123      	str	r3, [r4, #16]
 800b686:	f8ca 3000 	str.w	r3, [sl]
 800b68a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b68c:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b690:	601c      	str	r4, [r3, #0]
 800b692:	e735      	b.n	800b500 <__gethex+0x114>
 800b694:	1e69      	subs	r1, r5, #1
 800b696:	4620      	mov	r0, r4
 800b698:	f000 feea 	bl	800c470 <__any_on>
 800b69c:	2800      	cmp	r0, #0
 800b69e:	d1ed      	bne.n	800b67c <__gethex+0x290>
 800b6a0:	4621      	mov	r1, r4
 800b6a2:	4648      	mov	r0, r9
 800b6a4:	f000 fa98 	bl	800bbd8 <_Bfree>
 800b6a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	6013      	str	r3, [r2, #0]
 800b6ae:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b6b2:	e725      	b.n	800b500 <__gethex+0x114>
 800b6b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d1f2      	bne.n	800b6a0 <__gethex+0x2b4>
 800b6ba:	e7df      	b.n	800b67c <__gethex+0x290>
 800b6bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d1dc      	bne.n	800b67c <__gethex+0x290>
 800b6c2:	e7ed      	b.n	800b6a0 <__gethex+0x2b4>
 800b6c4:	0800d5ec 	.word	0x0800d5ec
 800b6c8:	0800d7fe 	.word	0x0800d7fe
 800b6cc:	0800d80f 	.word	0x0800d80f
 800b6d0:	f106 38ff 	add.w	r8, r6, #4294967295
 800b6d4:	f1bb 0f00 	cmp.w	fp, #0
 800b6d8:	d133      	bne.n	800b742 <__gethex+0x356>
 800b6da:	f1b8 0f00 	cmp.w	r8, #0
 800b6de:	d004      	beq.n	800b6ea <__gethex+0x2fe>
 800b6e0:	4641      	mov	r1, r8
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	f000 fec4 	bl	800c470 <__any_on>
 800b6e8:	4683      	mov	fp, r0
 800b6ea:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b6f4:	f008 081f 	and.w	r8, r8, #31
 800b6f8:	fa03 f308 	lsl.w	r3, r3, r8
 800b6fc:	4213      	tst	r3, r2
 800b6fe:	4631      	mov	r1, r6
 800b700:	4620      	mov	r0, r4
 800b702:	bf18      	it	ne
 800b704:	f04b 0b02 	orrne.w	fp, fp, #2
 800b708:	1bad      	subs	r5, r5, r6
 800b70a:	f7ff fe07 	bl	800b31c <rshift>
 800b70e:	687e      	ldr	r6, [r7, #4]
 800b710:	f04f 0802 	mov.w	r8, #2
 800b714:	f1bb 0f00 	cmp.w	fp, #0
 800b718:	d04a      	beq.n	800b7b0 <__gethex+0x3c4>
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2b02      	cmp	r3, #2
 800b71e:	d016      	beq.n	800b74e <__gethex+0x362>
 800b720:	2b03      	cmp	r3, #3
 800b722:	d018      	beq.n	800b756 <__gethex+0x36a>
 800b724:	2b01      	cmp	r3, #1
 800b726:	d109      	bne.n	800b73c <__gethex+0x350>
 800b728:	f01b 0f02 	tst.w	fp, #2
 800b72c:	d006      	beq.n	800b73c <__gethex+0x350>
 800b72e:	f8da 3000 	ldr.w	r3, [sl]
 800b732:	ea4b 0b03 	orr.w	fp, fp, r3
 800b736:	f01b 0f01 	tst.w	fp, #1
 800b73a:	d10f      	bne.n	800b75c <__gethex+0x370>
 800b73c:	f048 0810 	orr.w	r8, r8, #16
 800b740:	e036      	b.n	800b7b0 <__gethex+0x3c4>
 800b742:	f04f 0b01 	mov.w	fp, #1
 800b746:	e7d0      	b.n	800b6ea <__gethex+0x2fe>
 800b748:	f04f 0801 	mov.w	r8, #1
 800b74c:	e7e2      	b.n	800b714 <__gethex+0x328>
 800b74e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b750:	f1c3 0301 	rsb	r3, r3, #1
 800b754:	930f      	str	r3, [sp, #60]	; 0x3c
 800b756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d0ef      	beq.n	800b73c <__gethex+0x350>
 800b75c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b760:	f104 0214 	add.w	r2, r4, #20
 800b764:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b768:	9301      	str	r3, [sp, #4]
 800b76a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b76e:	2300      	movs	r3, #0
 800b770:	4694      	mov	ip, r2
 800b772:	f852 1b04 	ldr.w	r1, [r2], #4
 800b776:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b77a:	d01e      	beq.n	800b7ba <__gethex+0x3ce>
 800b77c:	3101      	adds	r1, #1
 800b77e:	f8cc 1000 	str.w	r1, [ip]
 800b782:	f1b8 0f02 	cmp.w	r8, #2
 800b786:	f104 0214 	add.w	r2, r4, #20
 800b78a:	d13d      	bne.n	800b808 <__gethex+0x41c>
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	3b01      	subs	r3, #1
 800b790:	42ab      	cmp	r3, r5
 800b792:	d10b      	bne.n	800b7ac <__gethex+0x3c0>
 800b794:	1169      	asrs	r1, r5, #5
 800b796:	2301      	movs	r3, #1
 800b798:	f005 051f 	and.w	r5, r5, #31
 800b79c:	fa03 f505 	lsl.w	r5, r3, r5
 800b7a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7a4:	421d      	tst	r5, r3
 800b7a6:	bf18      	it	ne
 800b7a8:	f04f 0801 	movne.w	r8, #1
 800b7ac:	f048 0820 	orr.w	r8, r8, #32
 800b7b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7b2:	601c      	str	r4, [r3, #0]
 800b7b4:	9b02      	ldr	r3, [sp, #8]
 800b7b6:	601e      	str	r6, [r3, #0]
 800b7b8:	e6a2      	b.n	800b500 <__gethex+0x114>
 800b7ba:	4290      	cmp	r0, r2
 800b7bc:	f842 3c04 	str.w	r3, [r2, #-4]
 800b7c0:	d8d6      	bhi.n	800b770 <__gethex+0x384>
 800b7c2:	68a2      	ldr	r2, [r4, #8]
 800b7c4:	4593      	cmp	fp, r2
 800b7c6:	db17      	blt.n	800b7f8 <__gethex+0x40c>
 800b7c8:	6861      	ldr	r1, [r4, #4]
 800b7ca:	4648      	mov	r0, r9
 800b7cc:	3101      	adds	r1, #1
 800b7ce:	f000 f9c3 	bl	800bb58 <_Balloc>
 800b7d2:	4682      	mov	sl, r0
 800b7d4:	b918      	cbnz	r0, 800b7de <__gethex+0x3f2>
 800b7d6:	4b1b      	ldr	r3, [pc, #108]	; (800b844 <__gethex+0x458>)
 800b7d8:	4602      	mov	r2, r0
 800b7da:	2184      	movs	r1, #132	; 0x84
 800b7dc:	e6b3      	b.n	800b546 <__gethex+0x15a>
 800b7de:	6922      	ldr	r2, [r4, #16]
 800b7e0:	3202      	adds	r2, #2
 800b7e2:	f104 010c 	add.w	r1, r4, #12
 800b7e6:	0092      	lsls	r2, r2, #2
 800b7e8:	300c      	adds	r0, #12
 800b7ea:	f7fe feb0 	bl	800a54e <memcpy>
 800b7ee:	4621      	mov	r1, r4
 800b7f0:	4648      	mov	r0, r9
 800b7f2:	f000 f9f1 	bl	800bbd8 <_Bfree>
 800b7f6:	4654      	mov	r4, sl
 800b7f8:	6922      	ldr	r2, [r4, #16]
 800b7fa:	1c51      	adds	r1, r2, #1
 800b7fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b800:	6121      	str	r1, [r4, #16]
 800b802:	2101      	movs	r1, #1
 800b804:	6151      	str	r1, [r2, #20]
 800b806:	e7bc      	b.n	800b782 <__gethex+0x396>
 800b808:	6921      	ldr	r1, [r4, #16]
 800b80a:	4559      	cmp	r1, fp
 800b80c:	dd0b      	ble.n	800b826 <__gethex+0x43a>
 800b80e:	2101      	movs	r1, #1
 800b810:	4620      	mov	r0, r4
 800b812:	f7ff fd83 	bl	800b31c <rshift>
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	3601      	adds	r6, #1
 800b81a:	42b3      	cmp	r3, r6
 800b81c:	f6ff aedb 	blt.w	800b5d6 <__gethex+0x1ea>
 800b820:	f04f 0801 	mov.w	r8, #1
 800b824:	e7c2      	b.n	800b7ac <__gethex+0x3c0>
 800b826:	f015 051f 	ands.w	r5, r5, #31
 800b82a:	d0f9      	beq.n	800b820 <__gethex+0x434>
 800b82c:	9b01      	ldr	r3, [sp, #4]
 800b82e:	441a      	add	r2, r3
 800b830:	f1c5 0520 	rsb	r5, r5, #32
 800b834:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b838:	f000 fa80 	bl	800bd3c <__hi0bits>
 800b83c:	42a8      	cmp	r0, r5
 800b83e:	dbe6      	blt.n	800b80e <__gethex+0x422>
 800b840:	e7ee      	b.n	800b820 <__gethex+0x434>
 800b842:	bf00      	nop
 800b844:	0800d7fe 	.word	0x0800d7fe

0800b848 <L_shift>:
 800b848:	f1c2 0208 	rsb	r2, r2, #8
 800b84c:	0092      	lsls	r2, r2, #2
 800b84e:	b570      	push	{r4, r5, r6, lr}
 800b850:	f1c2 0620 	rsb	r6, r2, #32
 800b854:	6843      	ldr	r3, [r0, #4]
 800b856:	6804      	ldr	r4, [r0, #0]
 800b858:	fa03 f506 	lsl.w	r5, r3, r6
 800b85c:	432c      	orrs	r4, r5
 800b85e:	40d3      	lsrs	r3, r2
 800b860:	6004      	str	r4, [r0, #0]
 800b862:	f840 3f04 	str.w	r3, [r0, #4]!
 800b866:	4288      	cmp	r0, r1
 800b868:	d3f4      	bcc.n	800b854 <L_shift+0xc>
 800b86a:	bd70      	pop	{r4, r5, r6, pc}

0800b86c <__match>:
 800b86c:	b530      	push	{r4, r5, lr}
 800b86e:	6803      	ldr	r3, [r0, #0]
 800b870:	3301      	adds	r3, #1
 800b872:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b876:	b914      	cbnz	r4, 800b87e <__match+0x12>
 800b878:	6003      	str	r3, [r0, #0]
 800b87a:	2001      	movs	r0, #1
 800b87c:	bd30      	pop	{r4, r5, pc}
 800b87e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b882:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b886:	2d19      	cmp	r5, #25
 800b888:	bf98      	it	ls
 800b88a:	3220      	addls	r2, #32
 800b88c:	42a2      	cmp	r2, r4
 800b88e:	d0f0      	beq.n	800b872 <__match+0x6>
 800b890:	2000      	movs	r0, #0
 800b892:	e7f3      	b.n	800b87c <__match+0x10>

0800b894 <__hexnan>:
 800b894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b898:	680b      	ldr	r3, [r1, #0]
 800b89a:	6801      	ldr	r1, [r0, #0]
 800b89c:	115e      	asrs	r6, r3, #5
 800b89e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b8a2:	f013 031f 	ands.w	r3, r3, #31
 800b8a6:	b087      	sub	sp, #28
 800b8a8:	bf18      	it	ne
 800b8aa:	3604      	addne	r6, #4
 800b8ac:	2500      	movs	r5, #0
 800b8ae:	1f37      	subs	r7, r6, #4
 800b8b0:	4682      	mov	sl, r0
 800b8b2:	4690      	mov	r8, r2
 800b8b4:	9301      	str	r3, [sp, #4]
 800b8b6:	f846 5c04 	str.w	r5, [r6, #-4]
 800b8ba:	46b9      	mov	r9, r7
 800b8bc:	463c      	mov	r4, r7
 800b8be:	9502      	str	r5, [sp, #8]
 800b8c0:	46ab      	mov	fp, r5
 800b8c2:	784a      	ldrb	r2, [r1, #1]
 800b8c4:	1c4b      	adds	r3, r1, #1
 800b8c6:	9303      	str	r3, [sp, #12]
 800b8c8:	b342      	cbz	r2, 800b91c <__hexnan+0x88>
 800b8ca:	4610      	mov	r0, r2
 800b8cc:	9105      	str	r1, [sp, #20]
 800b8ce:	9204      	str	r2, [sp, #16]
 800b8d0:	f7ff fd76 	bl	800b3c0 <__hexdig_fun>
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	d14f      	bne.n	800b978 <__hexnan+0xe4>
 800b8d8:	9a04      	ldr	r2, [sp, #16]
 800b8da:	9905      	ldr	r1, [sp, #20]
 800b8dc:	2a20      	cmp	r2, #32
 800b8de:	d818      	bhi.n	800b912 <__hexnan+0x7e>
 800b8e0:	9b02      	ldr	r3, [sp, #8]
 800b8e2:	459b      	cmp	fp, r3
 800b8e4:	dd13      	ble.n	800b90e <__hexnan+0x7a>
 800b8e6:	454c      	cmp	r4, r9
 800b8e8:	d206      	bcs.n	800b8f8 <__hexnan+0x64>
 800b8ea:	2d07      	cmp	r5, #7
 800b8ec:	dc04      	bgt.n	800b8f8 <__hexnan+0x64>
 800b8ee:	462a      	mov	r2, r5
 800b8f0:	4649      	mov	r1, r9
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	f7ff ffa8 	bl	800b848 <L_shift>
 800b8f8:	4544      	cmp	r4, r8
 800b8fa:	d950      	bls.n	800b99e <__hexnan+0x10a>
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	f1a4 0904 	sub.w	r9, r4, #4
 800b902:	f844 3c04 	str.w	r3, [r4, #-4]
 800b906:	f8cd b008 	str.w	fp, [sp, #8]
 800b90a:	464c      	mov	r4, r9
 800b90c:	461d      	mov	r5, r3
 800b90e:	9903      	ldr	r1, [sp, #12]
 800b910:	e7d7      	b.n	800b8c2 <__hexnan+0x2e>
 800b912:	2a29      	cmp	r2, #41	; 0x29
 800b914:	d155      	bne.n	800b9c2 <__hexnan+0x12e>
 800b916:	3102      	adds	r1, #2
 800b918:	f8ca 1000 	str.w	r1, [sl]
 800b91c:	f1bb 0f00 	cmp.w	fp, #0
 800b920:	d04f      	beq.n	800b9c2 <__hexnan+0x12e>
 800b922:	454c      	cmp	r4, r9
 800b924:	d206      	bcs.n	800b934 <__hexnan+0xa0>
 800b926:	2d07      	cmp	r5, #7
 800b928:	dc04      	bgt.n	800b934 <__hexnan+0xa0>
 800b92a:	462a      	mov	r2, r5
 800b92c:	4649      	mov	r1, r9
 800b92e:	4620      	mov	r0, r4
 800b930:	f7ff ff8a 	bl	800b848 <L_shift>
 800b934:	4544      	cmp	r4, r8
 800b936:	d934      	bls.n	800b9a2 <__hexnan+0x10e>
 800b938:	f1a8 0204 	sub.w	r2, r8, #4
 800b93c:	4623      	mov	r3, r4
 800b93e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b942:	f842 1f04 	str.w	r1, [r2, #4]!
 800b946:	429f      	cmp	r7, r3
 800b948:	d2f9      	bcs.n	800b93e <__hexnan+0xaa>
 800b94a:	1b3b      	subs	r3, r7, r4
 800b94c:	f023 0303 	bic.w	r3, r3, #3
 800b950:	3304      	adds	r3, #4
 800b952:	3e03      	subs	r6, #3
 800b954:	3401      	adds	r4, #1
 800b956:	42a6      	cmp	r6, r4
 800b958:	bf38      	it	cc
 800b95a:	2304      	movcc	r3, #4
 800b95c:	4443      	add	r3, r8
 800b95e:	2200      	movs	r2, #0
 800b960:	f843 2b04 	str.w	r2, [r3], #4
 800b964:	429f      	cmp	r7, r3
 800b966:	d2fb      	bcs.n	800b960 <__hexnan+0xcc>
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	b91b      	cbnz	r3, 800b974 <__hexnan+0xe0>
 800b96c:	4547      	cmp	r7, r8
 800b96e:	d126      	bne.n	800b9be <__hexnan+0x12a>
 800b970:	2301      	movs	r3, #1
 800b972:	603b      	str	r3, [r7, #0]
 800b974:	2005      	movs	r0, #5
 800b976:	e025      	b.n	800b9c4 <__hexnan+0x130>
 800b978:	3501      	adds	r5, #1
 800b97a:	2d08      	cmp	r5, #8
 800b97c:	f10b 0b01 	add.w	fp, fp, #1
 800b980:	dd06      	ble.n	800b990 <__hexnan+0xfc>
 800b982:	4544      	cmp	r4, r8
 800b984:	d9c3      	bls.n	800b90e <__hexnan+0x7a>
 800b986:	2300      	movs	r3, #0
 800b988:	f844 3c04 	str.w	r3, [r4, #-4]
 800b98c:	2501      	movs	r5, #1
 800b98e:	3c04      	subs	r4, #4
 800b990:	6822      	ldr	r2, [r4, #0]
 800b992:	f000 000f 	and.w	r0, r0, #15
 800b996:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b99a:	6020      	str	r0, [r4, #0]
 800b99c:	e7b7      	b.n	800b90e <__hexnan+0x7a>
 800b99e:	2508      	movs	r5, #8
 800b9a0:	e7b5      	b.n	800b90e <__hexnan+0x7a>
 800b9a2:	9b01      	ldr	r3, [sp, #4]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d0df      	beq.n	800b968 <__hexnan+0xd4>
 800b9a8:	f1c3 0320 	rsb	r3, r3, #32
 800b9ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b9b0:	40da      	lsrs	r2, r3
 800b9b2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b9b6:	4013      	ands	r3, r2
 800b9b8:	f846 3c04 	str.w	r3, [r6, #-4]
 800b9bc:	e7d4      	b.n	800b968 <__hexnan+0xd4>
 800b9be:	3f04      	subs	r7, #4
 800b9c0:	e7d2      	b.n	800b968 <__hexnan+0xd4>
 800b9c2:	2004      	movs	r0, #4
 800b9c4:	b007      	add	sp, #28
 800b9c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800b9cc <malloc>:
 800b9cc:	4b02      	ldr	r3, [pc, #8]	; (800b9d8 <malloc+0xc>)
 800b9ce:	4601      	mov	r1, r0
 800b9d0:	6818      	ldr	r0, [r3, #0]
 800b9d2:	f000 b823 	b.w	800ba1c <_malloc_r>
 800b9d6:	bf00      	nop
 800b9d8:	2000023c 	.word	0x2000023c

0800b9dc <sbrk_aligned>:
 800b9dc:	b570      	push	{r4, r5, r6, lr}
 800b9de:	4e0e      	ldr	r6, [pc, #56]	; (800ba18 <sbrk_aligned+0x3c>)
 800b9e0:	460c      	mov	r4, r1
 800b9e2:	6831      	ldr	r1, [r6, #0]
 800b9e4:	4605      	mov	r5, r0
 800b9e6:	b911      	cbnz	r1, 800b9ee <sbrk_aligned+0x12>
 800b9e8:	f000 ff90 	bl	800c90c <_sbrk_r>
 800b9ec:	6030      	str	r0, [r6, #0]
 800b9ee:	4621      	mov	r1, r4
 800b9f0:	4628      	mov	r0, r5
 800b9f2:	f000 ff8b 	bl	800c90c <_sbrk_r>
 800b9f6:	1c43      	adds	r3, r0, #1
 800b9f8:	d00a      	beq.n	800ba10 <sbrk_aligned+0x34>
 800b9fa:	1cc4      	adds	r4, r0, #3
 800b9fc:	f024 0403 	bic.w	r4, r4, #3
 800ba00:	42a0      	cmp	r0, r4
 800ba02:	d007      	beq.n	800ba14 <sbrk_aligned+0x38>
 800ba04:	1a21      	subs	r1, r4, r0
 800ba06:	4628      	mov	r0, r5
 800ba08:	f000 ff80 	bl	800c90c <_sbrk_r>
 800ba0c:	3001      	adds	r0, #1
 800ba0e:	d101      	bne.n	800ba14 <sbrk_aligned+0x38>
 800ba10:	f04f 34ff 	mov.w	r4, #4294967295
 800ba14:	4620      	mov	r0, r4
 800ba16:	bd70      	pop	{r4, r5, r6, pc}
 800ba18:	200008ac 	.word	0x200008ac

0800ba1c <_malloc_r>:
 800ba1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba20:	1ccd      	adds	r5, r1, #3
 800ba22:	f025 0503 	bic.w	r5, r5, #3
 800ba26:	3508      	adds	r5, #8
 800ba28:	2d0c      	cmp	r5, #12
 800ba2a:	bf38      	it	cc
 800ba2c:	250c      	movcc	r5, #12
 800ba2e:	2d00      	cmp	r5, #0
 800ba30:	4607      	mov	r7, r0
 800ba32:	db01      	blt.n	800ba38 <_malloc_r+0x1c>
 800ba34:	42a9      	cmp	r1, r5
 800ba36:	d905      	bls.n	800ba44 <_malloc_r+0x28>
 800ba38:	230c      	movs	r3, #12
 800ba3a:	603b      	str	r3, [r7, #0]
 800ba3c:	2600      	movs	r6, #0
 800ba3e:	4630      	mov	r0, r6
 800ba40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bb18 <_malloc_r+0xfc>
 800ba48:	f000 f87a 	bl	800bb40 <__malloc_lock>
 800ba4c:	f8d8 3000 	ldr.w	r3, [r8]
 800ba50:	461c      	mov	r4, r3
 800ba52:	bb5c      	cbnz	r4, 800baac <_malloc_r+0x90>
 800ba54:	4629      	mov	r1, r5
 800ba56:	4638      	mov	r0, r7
 800ba58:	f7ff ffc0 	bl	800b9dc <sbrk_aligned>
 800ba5c:	1c43      	adds	r3, r0, #1
 800ba5e:	4604      	mov	r4, r0
 800ba60:	d155      	bne.n	800bb0e <_malloc_r+0xf2>
 800ba62:	f8d8 4000 	ldr.w	r4, [r8]
 800ba66:	4626      	mov	r6, r4
 800ba68:	2e00      	cmp	r6, #0
 800ba6a:	d145      	bne.n	800baf8 <_malloc_r+0xdc>
 800ba6c:	2c00      	cmp	r4, #0
 800ba6e:	d048      	beq.n	800bb02 <_malloc_r+0xe6>
 800ba70:	6823      	ldr	r3, [r4, #0]
 800ba72:	4631      	mov	r1, r6
 800ba74:	4638      	mov	r0, r7
 800ba76:	eb04 0903 	add.w	r9, r4, r3
 800ba7a:	f000 ff47 	bl	800c90c <_sbrk_r>
 800ba7e:	4581      	cmp	r9, r0
 800ba80:	d13f      	bne.n	800bb02 <_malloc_r+0xe6>
 800ba82:	6821      	ldr	r1, [r4, #0]
 800ba84:	1a6d      	subs	r5, r5, r1
 800ba86:	4629      	mov	r1, r5
 800ba88:	4638      	mov	r0, r7
 800ba8a:	f7ff ffa7 	bl	800b9dc <sbrk_aligned>
 800ba8e:	3001      	adds	r0, #1
 800ba90:	d037      	beq.n	800bb02 <_malloc_r+0xe6>
 800ba92:	6823      	ldr	r3, [r4, #0]
 800ba94:	442b      	add	r3, r5
 800ba96:	6023      	str	r3, [r4, #0]
 800ba98:	f8d8 3000 	ldr.w	r3, [r8]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d038      	beq.n	800bb12 <_malloc_r+0xf6>
 800baa0:	685a      	ldr	r2, [r3, #4]
 800baa2:	42a2      	cmp	r2, r4
 800baa4:	d12b      	bne.n	800bafe <_malloc_r+0xe2>
 800baa6:	2200      	movs	r2, #0
 800baa8:	605a      	str	r2, [r3, #4]
 800baaa:	e00f      	b.n	800bacc <_malloc_r+0xb0>
 800baac:	6822      	ldr	r2, [r4, #0]
 800baae:	1b52      	subs	r2, r2, r5
 800bab0:	d41f      	bmi.n	800baf2 <_malloc_r+0xd6>
 800bab2:	2a0b      	cmp	r2, #11
 800bab4:	d917      	bls.n	800bae6 <_malloc_r+0xca>
 800bab6:	1961      	adds	r1, r4, r5
 800bab8:	42a3      	cmp	r3, r4
 800baba:	6025      	str	r5, [r4, #0]
 800babc:	bf18      	it	ne
 800babe:	6059      	strne	r1, [r3, #4]
 800bac0:	6863      	ldr	r3, [r4, #4]
 800bac2:	bf08      	it	eq
 800bac4:	f8c8 1000 	streq.w	r1, [r8]
 800bac8:	5162      	str	r2, [r4, r5]
 800baca:	604b      	str	r3, [r1, #4]
 800bacc:	4638      	mov	r0, r7
 800bace:	f104 060b 	add.w	r6, r4, #11
 800bad2:	f000 f83b 	bl	800bb4c <__malloc_unlock>
 800bad6:	f026 0607 	bic.w	r6, r6, #7
 800bada:	1d23      	adds	r3, r4, #4
 800badc:	1af2      	subs	r2, r6, r3
 800bade:	d0ae      	beq.n	800ba3e <_malloc_r+0x22>
 800bae0:	1b9b      	subs	r3, r3, r6
 800bae2:	50a3      	str	r3, [r4, r2]
 800bae4:	e7ab      	b.n	800ba3e <_malloc_r+0x22>
 800bae6:	42a3      	cmp	r3, r4
 800bae8:	6862      	ldr	r2, [r4, #4]
 800baea:	d1dd      	bne.n	800baa8 <_malloc_r+0x8c>
 800baec:	f8c8 2000 	str.w	r2, [r8]
 800baf0:	e7ec      	b.n	800bacc <_malloc_r+0xb0>
 800baf2:	4623      	mov	r3, r4
 800baf4:	6864      	ldr	r4, [r4, #4]
 800baf6:	e7ac      	b.n	800ba52 <_malloc_r+0x36>
 800baf8:	4634      	mov	r4, r6
 800bafa:	6876      	ldr	r6, [r6, #4]
 800bafc:	e7b4      	b.n	800ba68 <_malloc_r+0x4c>
 800bafe:	4613      	mov	r3, r2
 800bb00:	e7cc      	b.n	800ba9c <_malloc_r+0x80>
 800bb02:	230c      	movs	r3, #12
 800bb04:	603b      	str	r3, [r7, #0]
 800bb06:	4638      	mov	r0, r7
 800bb08:	f000 f820 	bl	800bb4c <__malloc_unlock>
 800bb0c:	e797      	b.n	800ba3e <_malloc_r+0x22>
 800bb0e:	6025      	str	r5, [r4, #0]
 800bb10:	e7dc      	b.n	800bacc <_malloc_r+0xb0>
 800bb12:	605b      	str	r3, [r3, #4]
 800bb14:	deff      	udf	#255	; 0xff
 800bb16:	bf00      	nop
 800bb18:	200008a8 	.word	0x200008a8

0800bb1c <__ascii_mbtowc>:
 800bb1c:	b082      	sub	sp, #8
 800bb1e:	b901      	cbnz	r1, 800bb22 <__ascii_mbtowc+0x6>
 800bb20:	a901      	add	r1, sp, #4
 800bb22:	b142      	cbz	r2, 800bb36 <__ascii_mbtowc+0x1a>
 800bb24:	b14b      	cbz	r3, 800bb3a <__ascii_mbtowc+0x1e>
 800bb26:	7813      	ldrb	r3, [r2, #0]
 800bb28:	600b      	str	r3, [r1, #0]
 800bb2a:	7812      	ldrb	r2, [r2, #0]
 800bb2c:	1e10      	subs	r0, r2, #0
 800bb2e:	bf18      	it	ne
 800bb30:	2001      	movne	r0, #1
 800bb32:	b002      	add	sp, #8
 800bb34:	4770      	bx	lr
 800bb36:	4610      	mov	r0, r2
 800bb38:	e7fb      	b.n	800bb32 <__ascii_mbtowc+0x16>
 800bb3a:	f06f 0001 	mvn.w	r0, #1
 800bb3e:	e7f8      	b.n	800bb32 <__ascii_mbtowc+0x16>

0800bb40 <__malloc_lock>:
 800bb40:	4801      	ldr	r0, [pc, #4]	; (800bb48 <__malloc_lock+0x8>)
 800bb42:	f7fe bd02 	b.w	800a54a <__retarget_lock_acquire_recursive>
 800bb46:	bf00      	nop
 800bb48:	200008a4 	.word	0x200008a4

0800bb4c <__malloc_unlock>:
 800bb4c:	4801      	ldr	r0, [pc, #4]	; (800bb54 <__malloc_unlock+0x8>)
 800bb4e:	f7fe bcfd 	b.w	800a54c <__retarget_lock_release_recursive>
 800bb52:	bf00      	nop
 800bb54:	200008a4 	.word	0x200008a4

0800bb58 <_Balloc>:
 800bb58:	b570      	push	{r4, r5, r6, lr}
 800bb5a:	69c6      	ldr	r6, [r0, #28]
 800bb5c:	4604      	mov	r4, r0
 800bb5e:	460d      	mov	r5, r1
 800bb60:	b976      	cbnz	r6, 800bb80 <_Balloc+0x28>
 800bb62:	2010      	movs	r0, #16
 800bb64:	f7ff ff32 	bl	800b9cc <malloc>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	61e0      	str	r0, [r4, #28]
 800bb6c:	b920      	cbnz	r0, 800bb78 <_Balloc+0x20>
 800bb6e:	4b18      	ldr	r3, [pc, #96]	; (800bbd0 <_Balloc+0x78>)
 800bb70:	4818      	ldr	r0, [pc, #96]	; (800bbd4 <_Balloc+0x7c>)
 800bb72:	216b      	movs	r1, #107	; 0x6b
 800bb74:	f000 feda 	bl	800c92c <__assert_func>
 800bb78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb7c:	6006      	str	r6, [r0, #0]
 800bb7e:	60c6      	str	r6, [r0, #12]
 800bb80:	69e6      	ldr	r6, [r4, #28]
 800bb82:	68f3      	ldr	r3, [r6, #12]
 800bb84:	b183      	cbz	r3, 800bba8 <_Balloc+0x50>
 800bb86:	69e3      	ldr	r3, [r4, #28]
 800bb88:	68db      	ldr	r3, [r3, #12]
 800bb8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb8e:	b9b8      	cbnz	r0, 800bbc0 <_Balloc+0x68>
 800bb90:	2101      	movs	r1, #1
 800bb92:	fa01 f605 	lsl.w	r6, r1, r5
 800bb96:	1d72      	adds	r2, r6, #5
 800bb98:	0092      	lsls	r2, r2, #2
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	f000 fee4 	bl	800c968 <_calloc_r>
 800bba0:	b160      	cbz	r0, 800bbbc <_Balloc+0x64>
 800bba2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bba6:	e00e      	b.n	800bbc6 <_Balloc+0x6e>
 800bba8:	2221      	movs	r2, #33	; 0x21
 800bbaa:	2104      	movs	r1, #4
 800bbac:	4620      	mov	r0, r4
 800bbae:	f000 fedb 	bl	800c968 <_calloc_r>
 800bbb2:	69e3      	ldr	r3, [r4, #28]
 800bbb4:	60f0      	str	r0, [r6, #12]
 800bbb6:	68db      	ldr	r3, [r3, #12]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d1e4      	bne.n	800bb86 <_Balloc+0x2e>
 800bbbc:	2000      	movs	r0, #0
 800bbbe:	bd70      	pop	{r4, r5, r6, pc}
 800bbc0:	6802      	ldr	r2, [r0, #0]
 800bbc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bbcc:	e7f7      	b.n	800bbbe <_Balloc+0x66>
 800bbce:	bf00      	nop
 800bbd0:	0800d78f 	.word	0x0800d78f
 800bbd4:	0800d86f 	.word	0x0800d86f

0800bbd8 <_Bfree>:
 800bbd8:	b570      	push	{r4, r5, r6, lr}
 800bbda:	69c6      	ldr	r6, [r0, #28]
 800bbdc:	4605      	mov	r5, r0
 800bbde:	460c      	mov	r4, r1
 800bbe0:	b976      	cbnz	r6, 800bc00 <_Bfree+0x28>
 800bbe2:	2010      	movs	r0, #16
 800bbe4:	f7ff fef2 	bl	800b9cc <malloc>
 800bbe8:	4602      	mov	r2, r0
 800bbea:	61e8      	str	r0, [r5, #28]
 800bbec:	b920      	cbnz	r0, 800bbf8 <_Bfree+0x20>
 800bbee:	4b09      	ldr	r3, [pc, #36]	; (800bc14 <_Bfree+0x3c>)
 800bbf0:	4809      	ldr	r0, [pc, #36]	; (800bc18 <_Bfree+0x40>)
 800bbf2:	218f      	movs	r1, #143	; 0x8f
 800bbf4:	f000 fe9a 	bl	800c92c <__assert_func>
 800bbf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbfc:	6006      	str	r6, [r0, #0]
 800bbfe:	60c6      	str	r6, [r0, #12]
 800bc00:	b13c      	cbz	r4, 800bc12 <_Bfree+0x3a>
 800bc02:	69eb      	ldr	r3, [r5, #28]
 800bc04:	6862      	ldr	r2, [r4, #4]
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc0c:	6021      	str	r1, [r4, #0]
 800bc0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bc12:	bd70      	pop	{r4, r5, r6, pc}
 800bc14:	0800d78f 	.word	0x0800d78f
 800bc18:	0800d86f 	.word	0x0800d86f

0800bc1c <__multadd>:
 800bc1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc20:	690d      	ldr	r5, [r1, #16]
 800bc22:	4607      	mov	r7, r0
 800bc24:	460c      	mov	r4, r1
 800bc26:	461e      	mov	r6, r3
 800bc28:	f101 0c14 	add.w	ip, r1, #20
 800bc2c:	2000      	movs	r0, #0
 800bc2e:	f8dc 3000 	ldr.w	r3, [ip]
 800bc32:	b299      	uxth	r1, r3
 800bc34:	fb02 6101 	mla	r1, r2, r1, r6
 800bc38:	0c1e      	lsrs	r6, r3, #16
 800bc3a:	0c0b      	lsrs	r3, r1, #16
 800bc3c:	fb02 3306 	mla	r3, r2, r6, r3
 800bc40:	b289      	uxth	r1, r1
 800bc42:	3001      	adds	r0, #1
 800bc44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bc48:	4285      	cmp	r5, r0
 800bc4a:	f84c 1b04 	str.w	r1, [ip], #4
 800bc4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bc52:	dcec      	bgt.n	800bc2e <__multadd+0x12>
 800bc54:	b30e      	cbz	r6, 800bc9a <__multadd+0x7e>
 800bc56:	68a3      	ldr	r3, [r4, #8]
 800bc58:	42ab      	cmp	r3, r5
 800bc5a:	dc19      	bgt.n	800bc90 <__multadd+0x74>
 800bc5c:	6861      	ldr	r1, [r4, #4]
 800bc5e:	4638      	mov	r0, r7
 800bc60:	3101      	adds	r1, #1
 800bc62:	f7ff ff79 	bl	800bb58 <_Balloc>
 800bc66:	4680      	mov	r8, r0
 800bc68:	b928      	cbnz	r0, 800bc76 <__multadd+0x5a>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	4b0c      	ldr	r3, [pc, #48]	; (800bca0 <__multadd+0x84>)
 800bc6e:	480d      	ldr	r0, [pc, #52]	; (800bca4 <__multadd+0x88>)
 800bc70:	21ba      	movs	r1, #186	; 0xba
 800bc72:	f000 fe5b 	bl	800c92c <__assert_func>
 800bc76:	6922      	ldr	r2, [r4, #16]
 800bc78:	3202      	adds	r2, #2
 800bc7a:	f104 010c 	add.w	r1, r4, #12
 800bc7e:	0092      	lsls	r2, r2, #2
 800bc80:	300c      	adds	r0, #12
 800bc82:	f7fe fc64 	bl	800a54e <memcpy>
 800bc86:	4621      	mov	r1, r4
 800bc88:	4638      	mov	r0, r7
 800bc8a:	f7ff ffa5 	bl	800bbd8 <_Bfree>
 800bc8e:	4644      	mov	r4, r8
 800bc90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc94:	3501      	adds	r5, #1
 800bc96:	615e      	str	r6, [r3, #20]
 800bc98:	6125      	str	r5, [r4, #16]
 800bc9a:	4620      	mov	r0, r4
 800bc9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bca0:	0800d7fe 	.word	0x0800d7fe
 800bca4:	0800d86f 	.word	0x0800d86f

0800bca8 <__s2b>:
 800bca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcac:	460c      	mov	r4, r1
 800bcae:	4615      	mov	r5, r2
 800bcb0:	461f      	mov	r7, r3
 800bcb2:	2209      	movs	r2, #9
 800bcb4:	3308      	adds	r3, #8
 800bcb6:	4606      	mov	r6, r0
 800bcb8:	fb93 f3f2 	sdiv	r3, r3, r2
 800bcbc:	2100      	movs	r1, #0
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	db09      	blt.n	800bcd8 <__s2b+0x30>
 800bcc4:	4630      	mov	r0, r6
 800bcc6:	f7ff ff47 	bl	800bb58 <_Balloc>
 800bcca:	b940      	cbnz	r0, 800bcde <__s2b+0x36>
 800bccc:	4602      	mov	r2, r0
 800bcce:	4b19      	ldr	r3, [pc, #100]	; (800bd34 <__s2b+0x8c>)
 800bcd0:	4819      	ldr	r0, [pc, #100]	; (800bd38 <__s2b+0x90>)
 800bcd2:	21d3      	movs	r1, #211	; 0xd3
 800bcd4:	f000 fe2a 	bl	800c92c <__assert_func>
 800bcd8:	0052      	lsls	r2, r2, #1
 800bcda:	3101      	adds	r1, #1
 800bcdc:	e7f0      	b.n	800bcc0 <__s2b+0x18>
 800bcde:	9b08      	ldr	r3, [sp, #32]
 800bce0:	6143      	str	r3, [r0, #20]
 800bce2:	2d09      	cmp	r5, #9
 800bce4:	f04f 0301 	mov.w	r3, #1
 800bce8:	6103      	str	r3, [r0, #16]
 800bcea:	dd16      	ble.n	800bd1a <__s2b+0x72>
 800bcec:	f104 0909 	add.w	r9, r4, #9
 800bcf0:	46c8      	mov	r8, r9
 800bcf2:	442c      	add	r4, r5
 800bcf4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bcf8:	4601      	mov	r1, r0
 800bcfa:	3b30      	subs	r3, #48	; 0x30
 800bcfc:	220a      	movs	r2, #10
 800bcfe:	4630      	mov	r0, r6
 800bd00:	f7ff ff8c 	bl	800bc1c <__multadd>
 800bd04:	45a0      	cmp	r8, r4
 800bd06:	d1f5      	bne.n	800bcf4 <__s2b+0x4c>
 800bd08:	f1a5 0408 	sub.w	r4, r5, #8
 800bd0c:	444c      	add	r4, r9
 800bd0e:	1b2d      	subs	r5, r5, r4
 800bd10:	1963      	adds	r3, r4, r5
 800bd12:	42bb      	cmp	r3, r7
 800bd14:	db04      	blt.n	800bd20 <__s2b+0x78>
 800bd16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd1a:	340a      	adds	r4, #10
 800bd1c:	2509      	movs	r5, #9
 800bd1e:	e7f6      	b.n	800bd0e <__s2b+0x66>
 800bd20:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bd24:	4601      	mov	r1, r0
 800bd26:	3b30      	subs	r3, #48	; 0x30
 800bd28:	220a      	movs	r2, #10
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	f7ff ff76 	bl	800bc1c <__multadd>
 800bd30:	e7ee      	b.n	800bd10 <__s2b+0x68>
 800bd32:	bf00      	nop
 800bd34:	0800d7fe 	.word	0x0800d7fe
 800bd38:	0800d86f 	.word	0x0800d86f

0800bd3c <__hi0bits>:
 800bd3c:	0c03      	lsrs	r3, r0, #16
 800bd3e:	041b      	lsls	r3, r3, #16
 800bd40:	b9d3      	cbnz	r3, 800bd78 <__hi0bits+0x3c>
 800bd42:	0400      	lsls	r0, r0, #16
 800bd44:	2310      	movs	r3, #16
 800bd46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bd4a:	bf04      	itt	eq
 800bd4c:	0200      	lsleq	r0, r0, #8
 800bd4e:	3308      	addeq	r3, #8
 800bd50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bd54:	bf04      	itt	eq
 800bd56:	0100      	lsleq	r0, r0, #4
 800bd58:	3304      	addeq	r3, #4
 800bd5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bd5e:	bf04      	itt	eq
 800bd60:	0080      	lsleq	r0, r0, #2
 800bd62:	3302      	addeq	r3, #2
 800bd64:	2800      	cmp	r0, #0
 800bd66:	db05      	blt.n	800bd74 <__hi0bits+0x38>
 800bd68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bd6c:	f103 0301 	add.w	r3, r3, #1
 800bd70:	bf08      	it	eq
 800bd72:	2320      	moveq	r3, #32
 800bd74:	4618      	mov	r0, r3
 800bd76:	4770      	bx	lr
 800bd78:	2300      	movs	r3, #0
 800bd7a:	e7e4      	b.n	800bd46 <__hi0bits+0xa>

0800bd7c <__lo0bits>:
 800bd7c:	6803      	ldr	r3, [r0, #0]
 800bd7e:	f013 0207 	ands.w	r2, r3, #7
 800bd82:	d00c      	beq.n	800bd9e <__lo0bits+0x22>
 800bd84:	07d9      	lsls	r1, r3, #31
 800bd86:	d422      	bmi.n	800bdce <__lo0bits+0x52>
 800bd88:	079a      	lsls	r2, r3, #30
 800bd8a:	bf49      	itett	mi
 800bd8c:	085b      	lsrmi	r3, r3, #1
 800bd8e:	089b      	lsrpl	r3, r3, #2
 800bd90:	6003      	strmi	r3, [r0, #0]
 800bd92:	2201      	movmi	r2, #1
 800bd94:	bf5c      	itt	pl
 800bd96:	6003      	strpl	r3, [r0, #0]
 800bd98:	2202      	movpl	r2, #2
 800bd9a:	4610      	mov	r0, r2
 800bd9c:	4770      	bx	lr
 800bd9e:	b299      	uxth	r1, r3
 800bda0:	b909      	cbnz	r1, 800bda6 <__lo0bits+0x2a>
 800bda2:	0c1b      	lsrs	r3, r3, #16
 800bda4:	2210      	movs	r2, #16
 800bda6:	b2d9      	uxtb	r1, r3
 800bda8:	b909      	cbnz	r1, 800bdae <__lo0bits+0x32>
 800bdaa:	3208      	adds	r2, #8
 800bdac:	0a1b      	lsrs	r3, r3, #8
 800bdae:	0719      	lsls	r1, r3, #28
 800bdb0:	bf04      	itt	eq
 800bdb2:	091b      	lsreq	r3, r3, #4
 800bdb4:	3204      	addeq	r2, #4
 800bdb6:	0799      	lsls	r1, r3, #30
 800bdb8:	bf04      	itt	eq
 800bdba:	089b      	lsreq	r3, r3, #2
 800bdbc:	3202      	addeq	r2, #2
 800bdbe:	07d9      	lsls	r1, r3, #31
 800bdc0:	d403      	bmi.n	800bdca <__lo0bits+0x4e>
 800bdc2:	085b      	lsrs	r3, r3, #1
 800bdc4:	f102 0201 	add.w	r2, r2, #1
 800bdc8:	d003      	beq.n	800bdd2 <__lo0bits+0x56>
 800bdca:	6003      	str	r3, [r0, #0]
 800bdcc:	e7e5      	b.n	800bd9a <__lo0bits+0x1e>
 800bdce:	2200      	movs	r2, #0
 800bdd0:	e7e3      	b.n	800bd9a <__lo0bits+0x1e>
 800bdd2:	2220      	movs	r2, #32
 800bdd4:	e7e1      	b.n	800bd9a <__lo0bits+0x1e>
	...

0800bdd8 <__i2b>:
 800bdd8:	b510      	push	{r4, lr}
 800bdda:	460c      	mov	r4, r1
 800bddc:	2101      	movs	r1, #1
 800bdde:	f7ff febb 	bl	800bb58 <_Balloc>
 800bde2:	4602      	mov	r2, r0
 800bde4:	b928      	cbnz	r0, 800bdf2 <__i2b+0x1a>
 800bde6:	4b05      	ldr	r3, [pc, #20]	; (800bdfc <__i2b+0x24>)
 800bde8:	4805      	ldr	r0, [pc, #20]	; (800be00 <__i2b+0x28>)
 800bdea:	f240 1145 	movw	r1, #325	; 0x145
 800bdee:	f000 fd9d 	bl	800c92c <__assert_func>
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	6144      	str	r4, [r0, #20]
 800bdf6:	6103      	str	r3, [r0, #16]
 800bdf8:	bd10      	pop	{r4, pc}
 800bdfa:	bf00      	nop
 800bdfc:	0800d7fe 	.word	0x0800d7fe
 800be00:	0800d86f 	.word	0x0800d86f

0800be04 <__multiply>:
 800be04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be08:	4691      	mov	r9, r2
 800be0a:	690a      	ldr	r2, [r1, #16]
 800be0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be10:	429a      	cmp	r2, r3
 800be12:	bfb8      	it	lt
 800be14:	460b      	movlt	r3, r1
 800be16:	460c      	mov	r4, r1
 800be18:	bfbc      	itt	lt
 800be1a:	464c      	movlt	r4, r9
 800be1c:	4699      	movlt	r9, r3
 800be1e:	6927      	ldr	r7, [r4, #16]
 800be20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800be24:	68a3      	ldr	r3, [r4, #8]
 800be26:	6861      	ldr	r1, [r4, #4]
 800be28:	eb07 060a 	add.w	r6, r7, sl
 800be2c:	42b3      	cmp	r3, r6
 800be2e:	b085      	sub	sp, #20
 800be30:	bfb8      	it	lt
 800be32:	3101      	addlt	r1, #1
 800be34:	f7ff fe90 	bl	800bb58 <_Balloc>
 800be38:	b930      	cbnz	r0, 800be48 <__multiply+0x44>
 800be3a:	4602      	mov	r2, r0
 800be3c:	4b44      	ldr	r3, [pc, #272]	; (800bf50 <__multiply+0x14c>)
 800be3e:	4845      	ldr	r0, [pc, #276]	; (800bf54 <__multiply+0x150>)
 800be40:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800be44:	f000 fd72 	bl	800c92c <__assert_func>
 800be48:	f100 0514 	add.w	r5, r0, #20
 800be4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800be50:	462b      	mov	r3, r5
 800be52:	2200      	movs	r2, #0
 800be54:	4543      	cmp	r3, r8
 800be56:	d321      	bcc.n	800be9c <__multiply+0x98>
 800be58:	f104 0314 	add.w	r3, r4, #20
 800be5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800be60:	f109 0314 	add.w	r3, r9, #20
 800be64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800be68:	9202      	str	r2, [sp, #8]
 800be6a:	1b3a      	subs	r2, r7, r4
 800be6c:	3a15      	subs	r2, #21
 800be6e:	f022 0203 	bic.w	r2, r2, #3
 800be72:	3204      	adds	r2, #4
 800be74:	f104 0115 	add.w	r1, r4, #21
 800be78:	428f      	cmp	r7, r1
 800be7a:	bf38      	it	cc
 800be7c:	2204      	movcc	r2, #4
 800be7e:	9201      	str	r2, [sp, #4]
 800be80:	9a02      	ldr	r2, [sp, #8]
 800be82:	9303      	str	r3, [sp, #12]
 800be84:	429a      	cmp	r2, r3
 800be86:	d80c      	bhi.n	800bea2 <__multiply+0x9e>
 800be88:	2e00      	cmp	r6, #0
 800be8a:	dd03      	ble.n	800be94 <__multiply+0x90>
 800be8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800be90:	2b00      	cmp	r3, #0
 800be92:	d05b      	beq.n	800bf4c <__multiply+0x148>
 800be94:	6106      	str	r6, [r0, #16]
 800be96:	b005      	add	sp, #20
 800be98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be9c:	f843 2b04 	str.w	r2, [r3], #4
 800bea0:	e7d8      	b.n	800be54 <__multiply+0x50>
 800bea2:	f8b3 a000 	ldrh.w	sl, [r3]
 800bea6:	f1ba 0f00 	cmp.w	sl, #0
 800beaa:	d024      	beq.n	800bef6 <__multiply+0xf2>
 800beac:	f104 0e14 	add.w	lr, r4, #20
 800beb0:	46a9      	mov	r9, r5
 800beb2:	f04f 0c00 	mov.w	ip, #0
 800beb6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800beba:	f8d9 1000 	ldr.w	r1, [r9]
 800bebe:	fa1f fb82 	uxth.w	fp, r2
 800bec2:	b289      	uxth	r1, r1
 800bec4:	fb0a 110b 	mla	r1, sl, fp, r1
 800bec8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800becc:	f8d9 2000 	ldr.w	r2, [r9]
 800bed0:	4461      	add	r1, ip
 800bed2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bed6:	fb0a c20b 	mla	r2, sl, fp, ip
 800beda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bede:	b289      	uxth	r1, r1
 800bee0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bee4:	4577      	cmp	r7, lr
 800bee6:	f849 1b04 	str.w	r1, [r9], #4
 800beea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800beee:	d8e2      	bhi.n	800beb6 <__multiply+0xb2>
 800bef0:	9a01      	ldr	r2, [sp, #4]
 800bef2:	f845 c002 	str.w	ip, [r5, r2]
 800bef6:	9a03      	ldr	r2, [sp, #12]
 800bef8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800befc:	3304      	adds	r3, #4
 800befe:	f1b9 0f00 	cmp.w	r9, #0
 800bf02:	d021      	beq.n	800bf48 <__multiply+0x144>
 800bf04:	6829      	ldr	r1, [r5, #0]
 800bf06:	f104 0c14 	add.w	ip, r4, #20
 800bf0a:	46ae      	mov	lr, r5
 800bf0c:	f04f 0a00 	mov.w	sl, #0
 800bf10:	f8bc b000 	ldrh.w	fp, [ip]
 800bf14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bf18:	fb09 220b 	mla	r2, r9, fp, r2
 800bf1c:	4452      	add	r2, sl
 800bf1e:	b289      	uxth	r1, r1
 800bf20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bf24:	f84e 1b04 	str.w	r1, [lr], #4
 800bf28:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bf2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bf30:	f8be 1000 	ldrh.w	r1, [lr]
 800bf34:	fb09 110a 	mla	r1, r9, sl, r1
 800bf38:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bf3c:	4567      	cmp	r7, ip
 800bf3e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bf42:	d8e5      	bhi.n	800bf10 <__multiply+0x10c>
 800bf44:	9a01      	ldr	r2, [sp, #4]
 800bf46:	50a9      	str	r1, [r5, r2]
 800bf48:	3504      	adds	r5, #4
 800bf4a:	e799      	b.n	800be80 <__multiply+0x7c>
 800bf4c:	3e01      	subs	r6, #1
 800bf4e:	e79b      	b.n	800be88 <__multiply+0x84>
 800bf50:	0800d7fe 	.word	0x0800d7fe
 800bf54:	0800d86f 	.word	0x0800d86f

0800bf58 <__pow5mult>:
 800bf58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf5c:	4615      	mov	r5, r2
 800bf5e:	f012 0203 	ands.w	r2, r2, #3
 800bf62:	4606      	mov	r6, r0
 800bf64:	460f      	mov	r7, r1
 800bf66:	d007      	beq.n	800bf78 <__pow5mult+0x20>
 800bf68:	4c25      	ldr	r4, [pc, #148]	; (800c000 <__pow5mult+0xa8>)
 800bf6a:	3a01      	subs	r2, #1
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf72:	f7ff fe53 	bl	800bc1c <__multadd>
 800bf76:	4607      	mov	r7, r0
 800bf78:	10ad      	asrs	r5, r5, #2
 800bf7a:	d03d      	beq.n	800bff8 <__pow5mult+0xa0>
 800bf7c:	69f4      	ldr	r4, [r6, #28]
 800bf7e:	b97c      	cbnz	r4, 800bfa0 <__pow5mult+0x48>
 800bf80:	2010      	movs	r0, #16
 800bf82:	f7ff fd23 	bl	800b9cc <malloc>
 800bf86:	4602      	mov	r2, r0
 800bf88:	61f0      	str	r0, [r6, #28]
 800bf8a:	b928      	cbnz	r0, 800bf98 <__pow5mult+0x40>
 800bf8c:	4b1d      	ldr	r3, [pc, #116]	; (800c004 <__pow5mult+0xac>)
 800bf8e:	481e      	ldr	r0, [pc, #120]	; (800c008 <__pow5mult+0xb0>)
 800bf90:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bf94:	f000 fcca 	bl	800c92c <__assert_func>
 800bf98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bf9c:	6004      	str	r4, [r0, #0]
 800bf9e:	60c4      	str	r4, [r0, #12]
 800bfa0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bfa4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bfa8:	b94c      	cbnz	r4, 800bfbe <__pow5mult+0x66>
 800bfaa:	f240 2171 	movw	r1, #625	; 0x271
 800bfae:	4630      	mov	r0, r6
 800bfb0:	f7ff ff12 	bl	800bdd8 <__i2b>
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	f8c8 0008 	str.w	r0, [r8, #8]
 800bfba:	4604      	mov	r4, r0
 800bfbc:	6003      	str	r3, [r0, #0]
 800bfbe:	f04f 0900 	mov.w	r9, #0
 800bfc2:	07eb      	lsls	r3, r5, #31
 800bfc4:	d50a      	bpl.n	800bfdc <__pow5mult+0x84>
 800bfc6:	4639      	mov	r1, r7
 800bfc8:	4622      	mov	r2, r4
 800bfca:	4630      	mov	r0, r6
 800bfcc:	f7ff ff1a 	bl	800be04 <__multiply>
 800bfd0:	4639      	mov	r1, r7
 800bfd2:	4680      	mov	r8, r0
 800bfd4:	4630      	mov	r0, r6
 800bfd6:	f7ff fdff 	bl	800bbd8 <_Bfree>
 800bfda:	4647      	mov	r7, r8
 800bfdc:	106d      	asrs	r5, r5, #1
 800bfde:	d00b      	beq.n	800bff8 <__pow5mult+0xa0>
 800bfe0:	6820      	ldr	r0, [r4, #0]
 800bfe2:	b938      	cbnz	r0, 800bff4 <__pow5mult+0x9c>
 800bfe4:	4622      	mov	r2, r4
 800bfe6:	4621      	mov	r1, r4
 800bfe8:	4630      	mov	r0, r6
 800bfea:	f7ff ff0b 	bl	800be04 <__multiply>
 800bfee:	6020      	str	r0, [r4, #0]
 800bff0:	f8c0 9000 	str.w	r9, [r0]
 800bff4:	4604      	mov	r4, r0
 800bff6:	e7e4      	b.n	800bfc2 <__pow5mult+0x6a>
 800bff8:	4638      	mov	r0, r7
 800bffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bffe:	bf00      	nop
 800c000:	0800d9b8 	.word	0x0800d9b8
 800c004:	0800d78f 	.word	0x0800d78f
 800c008:	0800d86f 	.word	0x0800d86f

0800c00c <__lshift>:
 800c00c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c010:	460c      	mov	r4, r1
 800c012:	6849      	ldr	r1, [r1, #4]
 800c014:	6923      	ldr	r3, [r4, #16]
 800c016:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c01a:	68a3      	ldr	r3, [r4, #8]
 800c01c:	4607      	mov	r7, r0
 800c01e:	4691      	mov	r9, r2
 800c020:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c024:	f108 0601 	add.w	r6, r8, #1
 800c028:	42b3      	cmp	r3, r6
 800c02a:	db0b      	blt.n	800c044 <__lshift+0x38>
 800c02c:	4638      	mov	r0, r7
 800c02e:	f7ff fd93 	bl	800bb58 <_Balloc>
 800c032:	4605      	mov	r5, r0
 800c034:	b948      	cbnz	r0, 800c04a <__lshift+0x3e>
 800c036:	4602      	mov	r2, r0
 800c038:	4b28      	ldr	r3, [pc, #160]	; (800c0dc <__lshift+0xd0>)
 800c03a:	4829      	ldr	r0, [pc, #164]	; (800c0e0 <__lshift+0xd4>)
 800c03c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c040:	f000 fc74 	bl	800c92c <__assert_func>
 800c044:	3101      	adds	r1, #1
 800c046:	005b      	lsls	r3, r3, #1
 800c048:	e7ee      	b.n	800c028 <__lshift+0x1c>
 800c04a:	2300      	movs	r3, #0
 800c04c:	f100 0114 	add.w	r1, r0, #20
 800c050:	f100 0210 	add.w	r2, r0, #16
 800c054:	4618      	mov	r0, r3
 800c056:	4553      	cmp	r3, sl
 800c058:	db33      	blt.n	800c0c2 <__lshift+0xb6>
 800c05a:	6920      	ldr	r0, [r4, #16]
 800c05c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c060:	f104 0314 	add.w	r3, r4, #20
 800c064:	f019 091f 	ands.w	r9, r9, #31
 800c068:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c06c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c070:	d02b      	beq.n	800c0ca <__lshift+0xbe>
 800c072:	f1c9 0e20 	rsb	lr, r9, #32
 800c076:	468a      	mov	sl, r1
 800c078:	2200      	movs	r2, #0
 800c07a:	6818      	ldr	r0, [r3, #0]
 800c07c:	fa00 f009 	lsl.w	r0, r0, r9
 800c080:	4310      	orrs	r0, r2
 800c082:	f84a 0b04 	str.w	r0, [sl], #4
 800c086:	f853 2b04 	ldr.w	r2, [r3], #4
 800c08a:	459c      	cmp	ip, r3
 800c08c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c090:	d8f3      	bhi.n	800c07a <__lshift+0x6e>
 800c092:	ebac 0304 	sub.w	r3, ip, r4
 800c096:	3b15      	subs	r3, #21
 800c098:	f023 0303 	bic.w	r3, r3, #3
 800c09c:	3304      	adds	r3, #4
 800c09e:	f104 0015 	add.w	r0, r4, #21
 800c0a2:	4584      	cmp	ip, r0
 800c0a4:	bf38      	it	cc
 800c0a6:	2304      	movcc	r3, #4
 800c0a8:	50ca      	str	r2, [r1, r3]
 800c0aa:	b10a      	cbz	r2, 800c0b0 <__lshift+0xa4>
 800c0ac:	f108 0602 	add.w	r6, r8, #2
 800c0b0:	3e01      	subs	r6, #1
 800c0b2:	4638      	mov	r0, r7
 800c0b4:	612e      	str	r6, [r5, #16]
 800c0b6:	4621      	mov	r1, r4
 800c0b8:	f7ff fd8e 	bl	800bbd8 <_Bfree>
 800c0bc:	4628      	mov	r0, r5
 800c0be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0c2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	e7c5      	b.n	800c056 <__lshift+0x4a>
 800c0ca:	3904      	subs	r1, #4
 800c0cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0d0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c0d4:	459c      	cmp	ip, r3
 800c0d6:	d8f9      	bhi.n	800c0cc <__lshift+0xc0>
 800c0d8:	e7ea      	b.n	800c0b0 <__lshift+0xa4>
 800c0da:	bf00      	nop
 800c0dc:	0800d7fe 	.word	0x0800d7fe
 800c0e0:	0800d86f 	.word	0x0800d86f

0800c0e4 <__mcmp>:
 800c0e4:	b530      	push	{r4, r5, lr}
 800c0e6:	6902      	ldr	r2, [r0, #16]
 800c0e8:	690c      	ldr	r4, [r1, #16]
 800c0ea:	1b12      	subs	r2, r2, r4
 800c0ec:	d10e      	bne.n	800c10c <__mcmp+0x28>
 800c0ee:	f100 0314 	add.w	r3, r0, #20
 800c0f2:	3114      	adds	r1, #20
 800c0f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c0f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c0fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c100:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c104:	42a5      	cmp	r5, r4
 800c106:	d003      	beq.n	800c110 <__mcmp+0x2c>
 800c108:	d305      	bcc.n	800c116 <__mcmp+0x32>
 800c10a:	2201      	movs	r2, #1
 800c10c:	4610      	mov	r0, r2
 800c10e:	bd30      	pop	{r4, r5, pc}
 800c110:	4283      	cmp	r3, r0
 800c112:	d3f3      	bcc.n	800c0fc <__mcmp+0x18>
 800c114:	e7fa      	b.n	800c10c <__mcmp+0x28>
 800c116:	f04f 32ff 	mov.w	r2, #4294967295
 800c11a:	e7f7      	b.n	800c10c <__mcmp+0x28>

0800c11c <__mdiff>:
 800c11c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c120:	460c      	mov	r4, r1
 800c122:	4606      	mov	r6, r0
 800c124:	4611      	mov	r1, r2
 800c126:	4620      	mov	r0, r4
 800c128:	4690      	mov	r8, r2
 800c12a:	f7ff ffdb 	bl	800c0e4 <__mcmp>
 800c12e:	1e05      	subs	r5, r0, #0
 800c130:	d110      	bne.n	800c154 <__mdiff+0x38>
 800c132:	4629      	mov	r1, r5
 800c134:	4630      	mov	r0, r6
 800c136:	f7ff fd0f 	bl	800bb58 <_Balloc>
 800c13a:	b930      	cbnz	r0, 800c14a <__mdiff+0x2e>
 800c13c:	4b3a      	ldr	r3, [pc, #232]	; (800c228 <__mdiff+0x10c>)
 800c13e:	4602      	mov	r2, r0
 800c140:	f240 2137 	movw	r1, #567	; 0x237
 800c144:	4839      	ldr	r0, [pc, #228]	; (800c22c <__mdiff+0x110>)
 800c146:	f000 fbf1 	bl	800c92c <__assert_func>
 800c14a:	2301      	movs	r3, #1
 800c14c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c150:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c154:	bfa4      	itt	ge
 800c156:	4643      	movge	r3, r8
 800c158:	46a0      	movge	r8, r4
 800c15a:	4630      	mov	r0, r6
 800c15c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c160:	bfa6      	itte	ge
 800c162:	461c      	movge	r4, r3
 800c164:	2500      	movge	r5, #0
 800c166:	2501      	movlt	r5, #1
 800c168:	f7ff fcf6 	bl	800bb58 <_Balloc>
 800c16c:	b920      	cbnz	r0, 800c178 <__mdiff+0x5c>
 800c16e:	4b2e      	ldr	r3, [pc, #184]	; (800c228 <__mdiff+0x10c>)
 800c170:	4602      	mov	r2, r0
 800c172:	f240 2145 	movw	r1, #581	; 0x245
 800c176:	e7e5      	b.n	800c144 <__mdiff+0x28>
 800c178:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c17c:	6926      	ldr	r6, [r4, #16]
 800c17e:	60c5      	str	r5, [r0, #12]
 800c180:	f104 0914 	add.w	r9, r4, #20
 800c184:	f108 0514 	add.w	r5, r8, #20
 800c188:	f100 0e14 	add.w	lr, r0, #20
 800c18c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c190:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c194:	f108 0210 	add.w	r2, r8, #16
 800c198:	46f2      	mov	sl, lr
 800c19a:	2100      	movs	r1, #0
 800c19c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c1a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c1a4:	fa11 f88b 	uxtah	r8, r1, fp
 800c1a8:	b299      	uxth	r1, r3
 800c1aa:	0c1b      	lsrs	r3, r3, #16
 800c1ac:	eba8 0801 	sub.w	r8, r8, r1
 800c1b0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c1b4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c1b8:	fa1f f888 	uxth.w	r8, r8
 800c1bc:	1419      	asrs	r1, r3, #16
 800c1be:	454e      	cmp	r6, r9
 800c1c0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c1c4:	f84a 3b04 	str.w	r3, [sl], #4
 800c1c8:	d8e8      	bhi.n	800c19c <__mdiff+0x80>
 800c1ca:	1b33      	subs	r3, r6, r4
 800c1cc:	3b15      	subs	r3, #21
 800c1ce:	f023 0303 	bic.w	r3, r3, #3
 800c1d2:	3304      	adds	r3, #4
 800c1d4:	3415      	adds	r4, #21
 800c1d6:	42a6      	cmp	r6, r4
 800c1d8:	bf38      	it	cc
 800c1da:	2304      	movcc	r3, #4
 800c1dc:	441d      	add	r5, r3
 800c1de:	4473      	add	r3, lr
 800c1e0:	469e      	mov	lr, r3
 800c1e2:	462e      	mov	r6, r5
 800c1e4:	4566      	cmp	r6, ip
 800c1e6:	d30e      	bcc.n	800c206 <__mdiff+0xea>
 800c1e8:	f10c 0203 	add.w	r2, ip, #3
 800c1ec:	1b52      	subs	r2, r2, r5
 800c1ee:	f022 0203 	bic.w	r2, r2, #3
 800c1f2:	3d03      	subs	r5, #3
 800c1f4:	45ac      	cmp	ip, r5
 800c1f6:	bf38      	it	cc
 800c1f8:	2200      	movcc	r2, #0
 800c1fa:	4413      	add	r3, r2
 800c1fc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c200:	b17a      	cbz	r2, 800c222 <__mdiff+0x106>
 800c202:	6107      	str	r7, [r0, #16]
 800c204:	e7a4      	b.n	800c150 <__mdiff+0x34>
 800c206:	f856 8b04 	ldr.w	r8, [r6], #4
 800c20a:	fa11 f288 	uxtah	r2, r1, r8
 800c20e:	1414      	asrs	r4, r2, #16
 800c210:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c214:	b292      	uxth	r2, r2
 800c216:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c21a:	f84e 2b04 	str.w	r2, [lr], #4
 800c21e:	1421      	asrs	r1, r4, #16
 800c220:	e7e0      	b.n	800c1e4 <__mdiff+0xc8>
 800c222:	3f01      	subs	r7, #1
 800c224:	e7ea      	b.n	800c1fc <__mdiff+0xe0>
 800c226:	bf00      	nop
 800c228:	0800d7fe 	.word	0x0800d7fe
 800c22c:	0800d86f 	.word	0x0800d86f

0800c230 <__ulp>:
 800c230:	b082      	sub	sp, #8
 800c232:	ed8d 0b00 	vstr	d0, [sp]
 800c236:	9a01      	ldr	r2, [sp, #4]
 800c238:	4b0f      	ldr	r3, [pc, #60]	; (800c278 <__ulp+0x48>)
 800c23a:	4013      	ands	r3, r2
 800c23c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c240:	2b00      	cmp	r3, #0
 800c242:	dc08      	bgt.n	800c256 <__ulp+0x26>
 800c244:	425b      	negs	r3, r3
 800c246:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c24a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c24e:	da04      	bge.n	800c25a <__ulp+0x2a>
 800c250:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c254:	4113      	asrs	r3, r2
 800c256:	2200      	movs	r2, #0
 800c258:	e008      	b.n	800c26c <__ulp+0x3c>
 800c25a:	f1a2 0314 	sub.w	r3, r2, #20
 800c25e:	2b1e      	cmp	r3, #30
 800c260:	bfda      	itte	le
 800c262:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c266:	40da      	lsrle	r2, r3
 800c268:	2201      	movgt	r2, #1
 800c26a:	2300      	movs	r3, #0
 800c26c:	4619      	mov	r1, r3
 800c26e:	4610      	mov	r0, r2
 800c270:	ec41 0b10 	vmov	d0, r0, r1
 800c274:	b002      	add	sp, #8
 800c276:	4770      	bx	lr
 800c278:	7ff00000 	.word	0x7ff00000

0800c27c <__b2d>:
 800c27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c280:	6906      	ldr	r6, [r0, #16]
 800c282:	f100 0814 	add.w	r8, r0, #20
 800c286:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c28a:	1f37      	subs	r7, r6, #4
 800c28c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c290:	4610      	mov	r0, r2
 800c292:	f7ff fd53 	bl	800bd3c <__hi0bits>
 800c296:	f1c0 0320 	rsb	r3, r0, #32
 800c29a:	280a      	cmp	r0, #10
 800c29c:	600b      	str	r3, [r1, #0]
 800c29e:	491b      	ldr	r1, [pc, #108]	; (800c30c <__b2d+0x90>)
 800c2a0:	dc15      	bgt.n	800c2ce <__b2d+0x52>
 800c2a2:	f1c0 0c0b 	rsb	ip, r0, #11
 800c2a6:	fa22 f30c 	lsr.w	r3, r2, ip
 800c2aa:	45b8      	cmp	r8, r7
 800c2ac:	ea43 0501 	orr.w	r5, r3, r1
 800c2b0:	bf34      	ite	cc
 800c2b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c2b6:	2300      	movcs	r3, #0
 800c2b8:	3015      	adds	r0, #21
 800c2ba:	fa02 f000 	lsl.w	r0, r2, r0
 800c2be:	fa23 f30c 	lsr.w	r3, r3, ip
 800c2c2:	4303      	orrs	r3, r0
 800c2c4:	461c      	mov	r4, r3
 800c2c6:	ec45 4b10 	vmov	d0, r4, r5
 800c2ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2ce:	45b8      	cmp	r8, r7
 800c2d0:	bf3a      	itte	cc
 800c2d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c2d6:	f1a6 0708 	subcc.w	r7, r6, #8
 800c2da:	2300      	movcs	r3, #0
 800c2dc:	380b      	subs	r0, #11
 800c2de:	d012      	beq.n	800c306 <__b2d+0x8a>
 800c2e0:	f1c0 0120 	rsb	r1, r0, #32
 800c2e4:	fa23 f401 	lsr.w	r4, r3, r1
 800c2e8:	4082      	lsls	r2, r0
 800c2ea:	4322      	orrs	r2, r4
 800c2ec:	4547      	cmp	r7, r8
 800c2ee:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c2f2:	bf8c      	ite	hi
 800c2f4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c2f8:	2200      	movls	r2, #0
 800c2fa:	4083      	lsls	r3, r0
 800c2fc:	40ca      	lsrs	r2, r1
 800c2fe:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c302:	4313      	orrs	r3, r2
 800c304:	e7de      	b.n	800c2c4 <__b2d+0x48>
 800c306:	ea42 0501 	orr.w	r5, r2, r1
 800c30a:	e7db      	b.n	800c2c4 <__b2d+0x48>
 800c30c:	3ff00000 	.word	0x3ff00000

0800c310 <__d2b>:
 800c310:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c314:	460f      	mov	r7, r1
 800c316:	2101      	movs	r1, #1
 800c318:	ec59 8b10 	vmov	r8, r9, d0
 800c31c:	4616      	mov	r6, r2
 800c31e:	f7ff fc1b 	bl	800bb58 <_Balloc>
 800c322:	4604      	mov	r4, r0
 800c324:	b930      	cbnz	r0, 800c334 <__d2b+0x24>
 800c326:	4602      	mov	r2, r0
 800c328:	4b24      	ldr	r3, [pc, #144]	; (800c3bc <__d2b+0xac>)
 800c32a:	4825      	ldr	r0, [pc, #148]	; (800c3c0 <__d2b+0xb0>)
 800c32c:	f240 310f 	movw	r1, #783	; 0x30f
 800c330:	f000 fafc 	bl	800c92c <__assert_func>
 800c334:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c338:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c33c:	bb2d      	cbnz	r5, 800c38a <__d2b+0x7a>
 800c33e:	9301      	str	r3, [sp, #4]
 800c340:	f1b8 0300 	subs.w	r3, r8, #0
 800c344:	d026      	beq.n	800c394 <__d2b+0x84>
 800c346:	4668      	mov	r0, sp
 800c348:	9300      	str	r3, [sp, #0]
 800c34a:	f7ff fd17 	bl	800bd7c <__lo0bits>
 800c34e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c352:	b1e8      	cbz	r0, 800c390 <__d2b+0x80>
 800c354:	f1c0 0320 	rsb	r3, r0, #32
 800c358:	fa02 f303 	lsl.w	r3, r2, r3
 800c35c:	430b      	orrs	r3, r1
 800c35e:	40c2      	lsrs	r2, r0
 800c360:	6163      	str	r3, [r4, #20]
 800c362:	9201      	str	r2, [sp, #4]
 800c364:	9b01      	ldr	r3, [sp, #4]
 800c366:	61a3      	str	r3, [r4, #24]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	bf14      	ite	ne
 800c36c:	2202      	movne	r2, #2
 800c36e:	2201      	moveq	r2, #1
 800c370:	6122      	str	r2, [r4, #16]
 800c372:	b1bd      	cbz	r5, 800c3a4 <__d2b+0x94>
 800c374:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c378:	4405      	add	r5, r0
 800c37a:	603d      	str	r5, [r7, #0]
 800c37c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c380:	6030      	str	r0, [r6, #0]
 800c382:	4620      	mov	r0, r4
 800c384:	b003      	add	sp, #12
 800c386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c38a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c38e:	e7d6      	b.n	800c33e <__d2b+0x2e>
 800c390:	6161      	str	r1, [r4, #20]
 800c392:	e7e7      	b.n	800c364 <__d2b+0x54>
 800c394:	a801      	add	r0, sp, #4
 800c396:	f7ff fcf1 	bl	800bd7c <__lo0bits>
 800c39a:	9b01      	ldr	r3, [sp, #4]
 800c39c:	6163      	str	r3, [r4, #20]
 800c39e:	3020      	adds	r0, #32
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	e7e5      	b.n	800c370 <__d2b+0x60>
 800c3a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c3a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c3ac:	6038      	str	r0, [r7, #0]
 800c3ae:	6918      	ldr	r0, [r3, #16]
 800c3b0:	f7ff fcc4 	bl	800bd3c <__hi0bits>
 800c3b4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c3b8:	e7e2      	b.n	800c380 <__d2b+0x70>
 800c3ba:	bf00      	nop
 800c3bc:	0800d7fe 	.word	0x0800d7fe
 800c3c0:	0800d86f 	.word	0x0800d86f

0800c3c4 <__ratio>:
 800c3c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3c8:	4688      	mov	r8, r1
 800c3ca:	4669      	mov	r1, sp
 800c3cc:	4681      	mov	r9, r0
 800c3ce:	f7ff ff55 	bl	800c27c <__b2d>
 800c3d2:	a901      	add	r1, sp, #4
 800c3d4:	4640      	mov	r0, r8
 800c3d6:	ec55 4b10 	vmov	r4, r5, d0
 800c3da:	f7ff ff4f 	bl	800c27c <__b2d>
 800c3de:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c3e2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c3e6:	eba3 0c02 	sub.w	ip, r3, r2
 800c3ea:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c3ee:	1a9b      	subs	r3, r3, r2
 800c3f0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c3f4:	ec51 0b10 	vmov	r0, r1, d0
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	bfd6      	itet	le
 800c3fc:	460a      	movle	r2, r1
 800c3fe:	462a      	movgt	r2, r5
 800c400:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c404:	468b      	mov	fp, r1
 800c406:	462f      	mov	r7, r5
 800c408:	bfd4      	ite	le
 800c40a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c40e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c412:	4620      	mov	r0, r4
 800c414:	ee10 2a10 	vmov	r2, s0
 800c418:	465b      	mov	r3, fp
 800c41a:	4639      	mov	r1, r7
 800c41c:	f7f4 fa1e 	bl	800085c <__aeabi_ddiv>
 800c420:	ec41 0b10 	vmov	d0, r0, r1
 800c424:	b003      	add	sp, #12
 800c426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c42a <__copybits>:
 800c42a:	3901      	subs	r1, #1
 800c42c:	b570      	push	{r4, r5, r6, lr}
 800c42e:	1149      	asrs	r1, r1, #5
 800c430:	6914      	ldr	r4, [r2, #16]
 800c432:	3101      	adds	r1, #1
 800c434:	f102 0314 	add.w	r3, r2, #20
 800c438:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c43c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c440:	1f05      	subs	r5, r0, #4
 800c442:	42a3      	cmp	r3, r4
 800c444:	d30c      	bcc.n	800c460 <__copybits+0x36>
 800c446:	1aa3      	subs	r3, r4, r2
 800c448:	3b11      	subs	r3, #17
 800c44a:	f023 0303 	bic.w	r3, r3, #3
 800c44e:	3211      	adds	r2, #17
 800c450:	42a2      	cmp	r2, r4
 800c452:	bf88      	it	hi
 800c454:	2300      	movhi	r3, #0
 800c456:	4418      	add	r0, r3
 800c458:	2300      	movs	r3, #0
 800c45a:	4288      	cmp	r0, r1
 800c45c:	d305      	bcc.n	800c46a <__copybits+0x40>
 800c45e:	bd70      	pop	{r4, r5, r6, pc}
 800c460:	f853 6b04 	ldr.w	r6, [r3], #4
 800c464:	f845 6f04 	str.w	r6, [r5, #4]!
 800c468:	e7eb      	b.n	800c442 <__copybits+0x18>
 800c46a:	f840 3b04 	str.w	r3, [r0], #4
 800c46e:	e7f4      	b.n	800c45a <__copybits+0x30>

0800c470 <__any_on>:
 800c470:	f100 0214 	add.w	r2, r0, #20
 800c474:	6900      	ldr	r0, [r0, #16]
 800c476:	114b      	asrs	r3, r1, #5
 800c478:	4298      	cmp	r0, r3
 800c47a:	b510      	push	{r4, lr}
 800c47c:	db11      	blt.n	800c4a2 <__any_on+0x32>
 800c47e:	dd0a      	ble.n	800c496 <__any_on+0x26>
 800c480:	f011 011f 	ands.w	r1, r1, #31
 800c484:	d007      	beq.n	800c496 <__any_on+0x26>
 800c486:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c48a:	fa24 f001 	lsr.w	r0, r4, r1
 800c48e:	fa00 f101 	lsl.w	r1, r0, r1
 800c492:	428c      	cmp	r4, r1
 800c494:	d10b      	bne.n	800c4ae <__any_on+0x3e>
 800c496:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d803      	bhi.n	800c4a6 <__any_on+0x36>
 800c49e:	2000      	movs	r0, #0
 800c4a0:	bd10      	pop	{r4, pc}
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	e7f7      	b.n	800c496 <__any_on+0x26>
 800c4a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c4aa:	2900      	cmp	r1, #0
 800c4ac:	d0f5      	beq.n	800c49a <__any_on+0x2a>
 800c4ae:	2001      	movs	r0, #1
 800c4b0:	e7f6      	b.n	800c4a0 <__any_on+0x30>

0800c4b2 <__ascii_wctomb>:
 800c4b2:	b149      	cbz	r1, 800c4c8 <__ascii_wctomb+0x16>
 800c4b4:	2aff      	cmp	r2, #255	; 0xff
 800c4b6:	bf85      	ittet	hi
 800c4b8:	238a      	movhi	r3, #138	; 0x8a
 800c4ba:	6003      	strhi	r3, [r0, #0]
 800c4bc:	700a      	strbls	r2, [r1, #0]
 800c4be:	f04f 30ff 	movhi.w	r0, #4294967295
 800c4c2:	bf98      	it	ls
 800c4c4:	2001      	movls	r0, #1
 800c4c6:	4770      	bx	lr
 800c4c8:	4608      	mov	r0, r1
 800c4ca:	4770      	bx	lr

0800c4cc <__ssputs_r>:
 800c4cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4d0:	688e      	ldr	r6, [r1, #8]
 800c4d2:	461f      	mov	r7, r3
 800c4d4:	42be      	cmp	r6, r7
 800c4d6:	680b      	ldr	r3, [r1, #0]
 800c4d8:	4682      	mov	sl, r0
 800c4da:	460c      	mov	r4, r1
 800c4dc:	4690      	mov	r8, r2
 800c4de:	d82c      	bhi.n	800c53a <__ssputs_r+0x6e>
 800c4e0:	898a      	ldrh	r2, [r1, #12]
 800c4e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c4e6:	d026      	beq.n	800c536 <__ssputs_r+0x6a>
 800c4e8:	6965      	ldr	r5, [r4, #20]
 800c4ea:	6909      	ldr	r1, [r1, #16]
 800c4ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4f0:	eba3 0901 	sub.w	r9, r3, r1
 800c4f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c4f8:	1c7b      	adds	r3, r7, #1
 800c4fa:	444b      	add	r3, r9
 800c4fc:	106d      	asrs	r5, r5, #1
 800c4fe:	429d      	cmp	r5, r3
 800c500:	bf38      	it	cc
 800c502:	461d      	movcc	r5, r3
 800c504:	0553      	lsls	r3, r2, #21
 800c506:	d527      	bpl.n	800c558 <__ssputs_r+0x8c>
 800c508:	4629      	mov	r1, r5
 800c50a:	f7ff fa87 	bl	800ba1c <_malloc_r>
 800c50e:	4606      	mov	r6, r0
 800c510:	b360      	cbz	r0, 800c56c <__ssputs_r+0xa0>
 800c512:	6921      	ldr	r1, [r4, #16]
 800c514:	464a      	mov	r2, r9
 800c516:	f7fe f81a 	bl	800a54e <memcpy>
 800c51a:	89a3      	ldrh	r3, [r4, #12]
 800c51c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c524:	81a3      	strh	r3, [r4, #12]
 800c526:	6126      	str	r6, [r4, #16]
 800c528:	6165      	str	r5, [r4, #20]
 800c52a:	444e      	add	r6, r9
 800c52c:	eba5 0509 	sub.w	r5, r5, r9
 800c530:	6026      	str	r6, [r4, #0]
 800c532:	60a5      	str	r5, [r4, #8]
 800c534:	463e      	mov	r6, r7
 800c536:	42be      	cmp	r6, r7
 800c538:	d900      	bls.n	800c53c <__ssputs_r+0x70>
 800c53a:	463e      	mov	r6, r7
 800c53c:	6820      	ldr	r0, [r4, #0]
 800c53e:	4632      	mov	r2, r6
 800c540:	4641      	mov	r1, r8
 800c542:	f000 f9c9 	bl	800c8d8 <memmove>
 800c546:	68a3      	ldr	r3, [r4, #8]
 800c548:	1b9b      	subs	r3, r3, r6
 800c54a:	60a3      	str	r3, [r4, #8]
 800c54c:	6823      	ldr	r3, [r4, #0]
 800c54e:	4433      	add	r3, r6
 800c550:	6023      	str	r3, [r4, #0]
 800c552:	2000      	movs	r0, #0
 800c554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c558:	462a      	mov	r2, r5
 800c55a:	f000 fa1b 	bl	800c994 <_realloc_r>
 800c55e:	4606      	mov	r6, r0
 800c560:	2800      	cmp	r0, #0
 800c562:	d1e0      	bne.n	800c526 <__ssputs_r+0x5a>
 800c564:	6921      	ldr	r1, [r4, #16]
 800c566:	4650      	mov	r0, sl
 800c568:	f7fe fe8c 	bl	800b284 <_free_r>
 800c56c:	230c      	movs	r3, #12
 800c56e:	f8ca 3000 	str.w	r3, [sl]
 800c572:	89a3      	ldrh	r3, [r4, #12]
 800c574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c578:	81a3      	strh	r3, [r4, #12]
 800c57a:	f04f 30ff 	mov.w	r0, #4294967295
 800c57e:	e7e9      	b.n	800c554 <__ssputs_r+0x88>

0800c580 <_svfiprintf_r>:
 800c580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c584:	4698      	mov	r8, r3
 800c586:	898b      	ldrh	r3, [r1, #12]
 800c588:	061b      	lsls	r3, r3, #24
 800c58a:	b09d      	sub	sp, #116	; 0x74
 800c58c:	4607      	mov	r7, r0
 800c58e:	460d      	mov	r5, r1
 800c590:	4614      	mov	r4, r2
 800c592:	d50e      	bpl.n	800c5b2 <_svfiprintf_r+0x32>
 800c594:	690b      	ldr	r3, [r1, #16]
 800c596:	b963      	cbnz	r3, 800c5b2 <_svfiprintf_r+0x32>
 800c598:	2140      	movs	r1, #64	; 0x40
 800c59a:	f7ff fa3f 	bl	800ba1c <_malloc_r>
 800c59e:	6028      	str	r0, [r5, #0]
 800c5a0:	6128      	str	r0, [r5, #16]
 800c5a2:	b920      	cbnz	r0, 800c5ae <_svfiprintf_r+0x2e>
 800c5a4:	230c      	movs	r3, #12
 800c5a6:	603b      	str	r3, [r7, #0]
 800c5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5ac:	e0d0      	b.n	800c750 <_svfiprintf_r+0x1d0>
 800c5ae:	2340      	movs	r3, #64	; 0x40
 800c5b0:	616b      	str	r3, [r5, #20]
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	9309      	str	r3, [sp, #36]	; 0x24
 800c5b6:	2320      	movs	r3, #32
 800c5b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5c0:	2330      	movs	r3, #48	; 0x30
 800c5c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c768 <_svfiprintf_r+0x1e8>
 800c5c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5ca:	f04f 0901 	mov.w	r9, #1
 800c5ce:	4623      	mov	r3, r4
 800c5d0:	469a      	mov	sl, r3
 800c5d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5d6:	b10a      	cbz	r2, 800c5dc <_svfiprintf_r+0x5c>
 800c5d8:	2a25      	cmp	r2, #37	; 0x25
 800c5da:	d1f9      	bne.n	800c5d0 <_svfiprintf_r+0x50>
 800c5dc:	ebba 0b04 	subs.w	fp, sl, r4
 800c5e0:	d00b      	beq.n	800c5fa <_svfiprintf_r+0x7a>
 800c5e2:	465b      	mov	r3, fp
 800c5e4:	4622      	mov	r2, r4
 800c5e6:	4629      	mov	r1, r5
 800c5e8:	4638      	mov	r0, r7
 800c5ea:	f7ff ff6f 	bl	800c4cc <__ssputs_r>
 800c5ee:	3001      	adds	r0, #1
 800c5f0:	f000 80a9 	beq.w	800c746 <_svfiprintf_r+0x1c6>
 800c5f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5f6:	445a      	add	r2, fp
 800c5f8:	9209      	str	r2, [sp, #36]	; 0x24
 800c5fa:	f89a 3000 	ldrb.w	r3, [sl]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	f000 80a1 	beq.w	800c746 <_svfiprintf_r+0x1c6>
 800c604:	2300      	movs	r3, #0
 800c606:	f04f 32ff 	mov.w	r2, #4294967295
 800c60a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c60e:	f10a 0a01 	add.w	sl, sl, #1
 800c612:	9304      	str	r3, [sp, #16]
 800c614:	9307      	str	r3, [sp, #28]
 800c616:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c61a:	931a      	str	r3, [sp, #104]	; 0x68
 800c61c:	4654      	mov	r4, sl
 800c61e:	2205      	movs	r2, #5
 800c620:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c624:	4850      	ldr	r0, [pc, #320]	; (800c768 <_svfiprintf_r+0x1e8>)
 800c626:	f7f3 fddb 	bl	80001e0 <memchr>
 800c62a:	9a04      	ldr	r2, [sp, #16]
 800c62c:	b9d8      	cbnz	r0, 800c666 <_svfiprintf_r+0xe6>
 800c62e:	06d0      	lsls	r0, r2, #27
 800c630:	bf44      	itt	mi
 800c632:	2320      	movmi	r3, #32
 800c634:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c638:	0711      	lsls	r1, r2, #28
 800c63a:	bf44      	itt	mi
 800c63c:	232b      	movmi	r3, #43	; 0x2b
 800c63e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c642:	f89a 3000 	ldrb.w	r3, [sl]
 800c646:	2b2a      	cmp	r3, #42	; 0x2a
 800c648:	d015      	beq.n	800c676 <_svfiprintf_r+0xf6>
 800c64a:	9a07      	ldr	r2, [sp, #28]
 800c64c:	4654      	mov	r4, sl
 800c64e:	2000      	movs	r0, #0
 800c650:	f04f 0c0a 	mov.w	ip, #10
 800c654:	4621      	mov	r1, r4
 800c656:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c65a:	3b30      	subs	r3, #48	; 0x30
 800c65c:	2b09      	cmp	r3, #9
 800c65e:	d94d      	bls.n	800c6fc <_svfiprintf_r+0x17c>
 800c660:	b1b0      	cbz	r0, 800c690 <_svfiprintf_r+0x110>
 800c662:	9207      	str	r2, [sp, #28]
 800c664:	e014      	b.n	800c690 <_svfiprintf_r+0x110>
 800c666:	eba0 0308 	sub.w	r3, r0, r8
 800c66a:	fa09 f303 	lsl.w	r3, r9, r3
 800c66e:	4313      	orrs	r3, r2
 800c670:	9304      	str	r3, [sp, #16]
 800c672:	46a2      	mov	sl, r4
 800c674:	e7d2      	b.n	800c61c <_svfiprintf_r+0x9c>
 800c676:	9b03      	ldr	r3, [sp, #12]
 800c678:	1d19      	adds	r1, r3, #4
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	9103      	str	r1, [sp, #12]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	bfbb      	ittet	lt
 800c682:	425b      	neglt	r3, r3
 800c684:	f042 0202 	orrlt.w	r2, r2, #2
 800c688:	9307      	strge	r3, [sp, #28]
 800c68a:	9307      	strlt	r3, [sp, #28]
 800c68c:	bfb8      	it	lt
 800c68e:	9204      	strlt	r2, [sp, #16]
 800c690:	7823      	ldrb	r3, [r4, #0]
 800c692:	2b2e      	cmp	r3, #46	; 0x2e
 800c694:	d10c      	bne.n	800c6b0 <_svfiprintf_r+0x130>
 800c696:	7863      	ldrb	r3, [r4, #1]
 800c698:	2b2a      	cmp	r3, #42	; 0x2a
 800c69a:	d134      	bne.n	800c706 <_svfiprintf_r+0x186>
 800c69c:	9b03      	ldr	r3, [sp, #12]
 800c69e:	1d1a      	adds	r2, r3, #4
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	9203      	str	r2, [sp, #12]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	bfb8      	it	lt
 800c6a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6ac:	3402      	adds	r4, #2
 800c6ae:	9305      	str	r3, [sp, #20]
 800c6b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c778 <_svfiprintf_r+0x1f8>
 800c6b4:	7821      	ldrb	r1, [r4, #0]
 800c6b6:	2203      	movs	r2, #3
 800c6b8:	4650      	mov	r0, sl
 800c6ba:	f7f3 fd91 	bl	80001e0 <memchr>
 800c6be:	b138      	cbz	r0, 800c6d0 <_svfiprintf_r+0x150>
 800c6c0:	9b04      	ldr	r3, [sp, #16]
 800c6c2:	eba0 000a 	sub.w	r0, r0, sl
 800c6c6:	2240      	movs	r2, #64	; 0x40
 800c6c8:	4082      	lsls	r2, r0
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	3401      	adds	r4, #1
 800c6ce:	9304      	str	r3, [sp, #16]
 800c6d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6d4:	4825      	ldr	r0, [pc, #148]	; (800c76c <_svfiprintf_r+0x1ec>)
 800c6d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c6da:	2206      	movs	r2, #6
 800c6dc:	f7f3 fd80 	bl	80001e0 <memchr>
 800c6e0:	2800      	cmp	r0, #0
 800c6e2:	d038      	beq.n	800c756 <_svfiprintf_r+0x1d6>
 800c6e4:	4b22      	ldr	r3, [pc, #136]	; (800c770 <_svfiprintf_r+0x1f0>)
 800c6e6:	bb1b      	cbnz	r3, 800c730 <_svfiprintf_r+0x1b0>
 800c6e8:	9b03      	ldr	r3, [sp, #12]
 800c6ea:	3307      	adds	r3, #7
 800c6ec:	f023 0307 	bic.w	r3, r3, #7
 800c6f0:	3308      	adds	r3, #8
 800c6f2:	9303      	str	r3, [sp, #12]
 800c6f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6f6:	4433      	add	r3, r6
 800c6f8:	9309      	str	r3, [sp, #36]	; 0x24
 800c6fa:	e768      	b.n	800c5ce <_svfiprintf_r+0x4e>
 800c6fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800c700:	460c      	mov	r4, r1
 800c702:	2001      	movs	r0, #1
 800c704:	e7a6      	b.n	800c654 <_svfiprintf_r+0xd4>
 800c706:	2300      	movs	r3, #0
 800c708:	3401      	adds	r4, #1
 800c70a:	9305      	str	r3, [sp, #20]
 800c70c:	4619      	mov	r1, r3
 800c70e:	f04f 0c0a 	mov.w	ip, #10
 800c712:	4620      	mov	r0, r4
 800c714:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c718:	3a30      	subs	r2, #48	; 0x30
 800c71a:	2a09      	cmp	r2, #9
 800c71c:	d903      	bls.n	800c726 <_svfiprintf_r+0x1a6>
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d0c6      	beq.n	800c6b0 <_svfiprintf_r+0x130>
 800c722:	9105      	str	r1, [sp, #20]
 800c724:	e7c4      	b.n	800c6b0 <_svfiprintf_r+0x130>
 800c726:	fb0c 2101 	mla	r1, ip, r1, r2
 800c72a:	4604      	mov	r4, r0
 800c72c:	2301      	movs	r3, #1
 800c72e:	e7f0      	b.n	800c712 <_svfiprintf_r+0x192>
 800c730:	ab03      	add	r3, sp, #12
 800c732:	9300      	str	r3, [sp, #0]
 800c734:	462a      	mov	r2, r5
 800c736:	4b0f      	ldr	r3, [pc, #60]	; (800c774 <_svfiprintf_r+0x1f4>)
 800c738:	a904      	add	r1, sp, #16
 800c73a:	4638      	mov	r0, r7
 800c73c:	f7fc ff68 	bl	8009610 <_printf_float>
 800c740:	1c42      	adds	r2, r0, #1
 800c742:	4606      	mov	r6, r0
 800c744:	d1d6      	bne.n	800c6f4 <_svfiprintf_r+0x174>
 800c746:	89ab      	ldrh	r3, [r5, #12]
 800c748:	065b      	lsls	r3, r3, #25
 800c74a:	f53f af2d 	bmi.w	800c5a8 <_svfiprintf_r+0x28>
 800c74e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c750:	b01d      	add	sp, #116	; 0x74
 800c752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c756:	ab03      	add	r3, sp, #12
 800c758:	9300      	str	r3, [sp, #0]
 800c75a:	462a      	mov	r2, r5
 800c75c:	4b05      	ldr	r3, [pc, #20]	; (800c774 <_svfiprintf_r+0x1f4>)
 800c75e:	a904      	add	r1, sp, #16
 800c760:	4638      	mov	r0, r7
 800c762:	f7fd f9f9 	bl	8009b58 <_printf_i>
 800c766:	e7eb      	b.n	800c740 <_svfiprintf_r+0x1c0>
 800c768:	0800d9c4 	.word	0x0800d9c4
 800c76c:	0800d9ce 	.word	0x0800d9ce
 800c770:	08009611 	.word	0x08009611
 800c774:	0800c4cd 	.word	0x0800c4cd
 800c778:	0800d9ca 	.word	0x0800d9ca

0800c77c <__sflush_r>:
 800c77c:	898a      	ldrh	r2, [r1, #12]
 800c77e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c782:	4605      	mov	r5, r0
 800c784:	0710      	lsls	r0, r2, #28
 800c786:	460c      	mov	r4, r1
 800c788:	d458      	bmi.n	800c83c <__sflush_r+0xc0>
 800c78a:	684b      	ldr	r3, [r1, #4]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	dc05      	bgt.n	800c79c <__sflush_r+0x20>
 800c790:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c792:	2b00      	cmp	r3, #0
 800c794:	dc02      	bgt.n	800c79c <__sflush_r+0x20>
 800c796:	2000      	movs	r0, #0
 800c798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c79c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c79e:	2e00      	cmp	r6, #0
 800c7a0:	d0f9      	beq.n	800c796 <__sflush_r+0x1a>
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c7a8:	682f      	ldr	r7, [r5, #0]
 800c7aa:	6a21      	ldr	r1, [r4, #32]
 800c7ac:	602b      	str	r3, [r5, #0]
 800c7ae:	d032      	beq.n	800c816 <__sflush_r+0x9a>
 800c7b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c7b2:	89a3      	ldrh	r3, [r4, #12]
 800c7b4:	075a      	lsls	r2, r3, #29
 800c7b6:	d505      	bpl.n	800c7c4 <__sflush_r+0x48>
 800c7b8:	6863      	ldr	r3, [r4, #4]
 800c7ba:	1ac0      	subs	r0, r0, r3
 800c7bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c7be:	b10b      	cbz	r3, 800c7c4 <__sflush_r+0x48>
 800c7c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7c2:	1ac0      	subs	r0, r0, r3
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7ca:	6a21      	ldr	r1, [r4, #32]
 800c7cc:	4628      	mov	r0, r5
 800c7ce:	47b0      	blx	r6
 800c7d0:	1c43      	adds	r3, r0, #1
 800c7d2:	89a3      	ldrh	r3, [r4, #12]
 800c7d4:	d106      	bne.n	800c7e4 <__sflush_r+0x68>
 800c7d6:	6829      	ldr	r1, [r5, #0]
 800c7d8:	291d      	cmp	r1, #29
 800c7da:	d82b      	bhi.n	800c834 <__sflush_r+0xb8>
 800c7dc:	4a29      	ldr	r2, [pc, #164]	; (800c884 <__sflush_r+0x108>)
 800c7de:	410a      	asrs	r2, r1
 800c7e0:	07d6      	lsls	r6, r2, #31
 800c7e2:	d427      	bmi.n	800c834 <__sflush_r+0xb8>
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	6062      	str	r2, [r4, #4]
 800c7e8:	04d9      	lsls	r1, r3, #19
 800c7ea:	6922      	ldr	r2, [r4, #16]
 800c7ec:	6022      	str	r2, [r4, #0]
 800c7ee:	d504      	bpl.n	800c7fa <__sflush_r+0x7e>
 800c7f0:	1c42      	adds	r2, r0, #1
 800c7f2:	d101      	bne.n	800c7f8 <__sflush_r+0x7c>
 800c7f4:	682b      	ldr	r3, [r5, #0]
 800c7f6:	b903      	cbnz	r3, 800c7fa <__sflush_r+0x7e>
 800c7f8:	6560      	str	r0, [r4, #84]	; 0x54
 800c7fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7fc:	602f      	str	r7, [r5, #0]
 800c7fe:	2900      	cmp	r1, #0
 800c800:	d0c9      	beq.n	800c796 <__sflush_r+0x1a>
 800c802:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c806:	4299      	cmp	r1, r3
 800c808:	d002      	beq.n	800c810 <__sflush_r+0x94>
 800c80a:	4628      	mov	r0, r5
 800c80c:	f7fe fd3a 	bl	800b284 <_free_r>
 800c810:	2000      	movs	r0, #0
 800c812:	6360      	str	r0, [r4, #52]	; 0x34
 800c814:	e7c0      	b.n	800c798 <__sflush_r+0x1c>
 800c816:	2301      	movs	r3, #1
 800c818:	4628      	mov	r0, r5
 800c81a:	47b0      	blx	r6
 800c81c:	1c41      	adds	r1, r0, #1
 800c81e:	d1c8      	bne.n	800c7b2 <__sflush_r+0x36>
 800c820:	682b      	ldr	r3, [r5, #0]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d0c5      	beq.n	800c7b2 <__sflush_r+0x36>
 800c826:	2b1d      	cmp	r3, #29
 800c828:	d001      	beq.n	800c82e <__sflush_r+0xb2>
 800c82a:	2b16      	cmp	r3, #22
 800c82c:	d101      	bne.n	800c832 <__sflush_r+0xb6>
 800c82e:	602f      	str	r7, [r5, #0]
 800c830:	e7b1      	b.n	800c796 <__sflush_r+0x1a>
 800c832:	89a3      	ldrh	r3, [r4, #12]
 800c834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c838:	81a3      	strh	r3, [r4, #12]
 800c83a:	e7ad      	b.n	800c798 <__sflush_r+0x1c>
 800c83c:	690f      	ldr	r7, [r1, #16]
 800c83e:	2f00      	cmp	r7, #0
 800c840:	d0a9      	beq.n	800c796 <__sflush_r+0x1a>
 800c842:	0793      	lsls	r3, r2, #30
 800c844:	680e      	ldr	r6, [r1, #0]
 800c846:	bf08      	it	eq
 800c848:	694b      	ldreq	r3, [r1, #20]
 800c84a:	600f      	str	r7, [r1, #0]
 800c84c:	bf18      	it	ne
 800c84e:	2300      	movne	r3, #0
 800c850:	eba6 0807 	sub.w	r8, r6, r7
 800c854:	608b      	str	r3, [r1, #8]
 800c856:	f1b8 0f00 	cmp.w	r8, #0
 800c85a:	dd9c      	ble.n	800c796 <__sflush_r+0x1a>
 800c85c:	6a21      	ldr	r1, [r4, #32]
 800c85e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c860:	4643      	mov	r3, r8
 800c862:	463a      	mov	r2, r7
 800c864:	4628      	mov	r0, r5
 800c866:	47b0      	blx	r6
 800c868:	2800      	cmp	r0, #0
 800c86a:	dc06      	bgt.n	800c87a <__sflush_r+0xfe>
 800c86c:	89a3      	ldrh	r3, [r4, #12]
 800c86e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c872:	81a3      	strh	r3, [r4, #12]
 800c874:	f04f 30ff 	mov.w	r0, #4294967295
 800c878:	e78e      	b.n	800c798 <__sflush_r+0x1c>
 800c87a:	4407      	add	r7, r0
 800c87c:	eba8 0800 	sub.w	r8, r8, r0
 800c880:	e7e9      	b.n	800c856 <__sflush_r+0xda>
 800c882:	bf00      	nop
 800c884:	dfbffffe 	.word	0xdfbffffe

0800c888 <_fflush_r>:
 800c888:	b538      	push	{r3, r4, r5, lr}
 800c88a:	690b      	ldr	r3, [r1, #16]
 800c88c:	4605      	mov	r5, r0
 800c88e:	460c      	mov	r4, r1
 800c890:	b913      	cbnz	r3, 800c898 <_fflush_r+0x10>
 800c892:	2500      	movs	r5, #0
 800c894:	4628      	mov	r0, r5
 800c896:	bd38      	pop	{r3, r4, r5, pc}
 800c898:	b118      	cbz	r0, 800c8a2 <_fflush_r+0x1a>
 800c89a:	6a03      	ldr	r3, [r0, #32]
 800c89c:	b90b      	cbnz	r3, 800c8a2 <_fflush_r+0x1a>
 800c89e:	f7fd fd19 	bl	800a2d4 <__sinit>
 800c8a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d0f3      	beq.n	800c892 <_fflush_r+0xa>
 800c8aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c8ac:	07d0      	lsls	r0, r2, #31
 800c8ae:	d404      	bmi.n	800c8ba <_fflush_r+0x32>
 800c8b0:	0599      	lsls	r1, r3, #22
 800c8b2:	d402      	bmi.n	800c8ba <_fflush_r+0x32>
 800c8b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8b6:	f7fd fe48 	bl	800a54a <__retarget_lock_acquire_recursive>
 800c8ba:	4628      	mov	r0, r5
 800c8bc:	4621      	mov	r1, r4
 800c8be:	f7ff ff5d 	bl	800c77c <__sflush_r>
 800c8c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8c4:	07da      	lsls	r2, r3, #31
 800c8c6:	4605      	mov	r5, r0
 800c8c8:	d4e4      	bmi.n	800c894 <_fflush_r+0xc>
 800c8ca:	89a3      	ldrh	r3, [r4, #12]
 800c8cc:	059b      	lsls	r3, r3, #22
 800c8ce:	d4e1      	bmi.n	800c894 <_fflush_r+0xc>
 800c8d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8d2:	f7fd fe3b 	bl	800a54c <__retarget_lock_release_recursive>
 800c8d6:	e7dd      	b.n	800c894 <_fflush_r+0xc>

0800c8d8 <memmove>:
 800c8d8:	4288      	cmp	r0, r1
 800c8da:	b510      	push	{r4, lr}
 800c8dc:	eb01 0402 	add.w	r4, r1, r2
 800c8e0:	d902      	bls.n	800c8e8 <memmove+0x10>
 800c8e2:	4284      	cmp	r4, r0
 800c8e4:	4623      	mov	r3, r4
 800c8e6:	d807      	bhi.n	800c8f8 <memmove+0x20>
 800c8e8:	1e43      	subs	r3, r0, #1
 800c8ea:	42a1      	cmp	r1, r4
 800c8ec:	d008      	beq.n	800c900 <memmove+0x28>
 800c8ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c8f6:	e7f8      	b.n	800c8ea <memmove+0x12>
 800c8f8:	4402      	add	r2, r0
 800c8fa:	4601      	mov	r1, r0
 800c8fc:	428a      	cmp	r2, r1
 800c8fe:	d100      	bne.n	800c902 <memmove+0x2a>
 800c900:	bd10      	pop	{r4, pc}
 800c902:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c906:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c90a:	e7f7      	b.n	800c8fc <memmove+0x24>

0800c90c <_sbrk_r>:
 800c90c:	b538      	push	{r3, r4, r5, lr}
 800c90e:	4d06      	ldr	r5, [pc, #24]	; (800c928 <_sbrk_r+0x1c>)
 800c910:	2300      	movs	r3, #0
 800c912:	4604      	mov	r4, r0
 800c914:	4608      	mov	r0, r1
 800c916:	602b      	str	r3, [r5, #0]
 800c918:	f7f8 f8f2 	bl	8004b00 <_sbrk>
 800c91c:	1c43      	adds	r3, r0, #1
 800c91e:	d102      	bne.n	800c926 <_sbrk_r+0x1a>
 800c920:	682b      	ldr	r3, [r5, #0]
 800c922:	b103      	cbz	r3, 800c926 <_sbrk_r+0x1a>
 800c924:	6023      	str	r3, [r4, #0]
 800c926:	bd38      	pop	{r3, r4, r5, pc}
 800c928:	200008a0 	.word	0x200008a0

0800c92c <__assert_func>:
 800c92c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c92e:	4614      	mov	r4, r2
 800c930:	461a      	mov	r2, r3
 800c932:	4b09      	ldr	r3, [pc, #36]	; (800c958 <__assert_func+0x2c>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	4605      	mov	r5, r0
 800c938:	68d8      	ldr	r0, [r3, #12]
 800c93a:	b14c      	cbz	r4, 800c950 <__assert_func+0x24>
 800c93c:	4b07      	ldr	r3, [pc, #28]	; (800c95c <__assert_func+0x30>)
 800c93e:	9100      	str	r1, [sp, #0]
 800c940:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c944:	4906      	ldr	r1, [pc, #24]	; (800c960 <__assert_func+0x34>)
 800c946:	462b      	mov	r3, r5
 800c948:	f000 f854 	bl	800c9f4 <fiprintf>
 800c94c:	f000 f864 	bl	800ca18 <abort>
 800c950:	4b04      	ldr	r3, [pc, #16]	; (800c964 <__assert_func+0x38>)
 800c952:	461c      	mov	r4, r3
 800c954:	e7f3      	b.n	800c93e <__assert_func+0x12>
 800c956:	bf00      	nop
 800c958:	2000023c 	.word	0x2000023c
 800c95c:	0800d9d5 	.word	0x0800d9d5
 800c960:	0800d9e2 	.word	0x0800d9e2
 800c964:	0800da10 	.word	0x0800da10

0800c968 <_calloc_r>:
 800c968:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c96a:	fba1 2402 	umull	r2, r4, r1, r2
 800c96e:	b94c      	cbnz	r4, 800c984 <_calloc_r+0x1c>
 800c970:	4611      	mov	r1, r2
 800c972:	9201      	str	r2, [sp, #4]
 800c974:	f7ff f852 	bl	800ba1c <_malloc_r>
 800c978:	9a01      	ldr	r2, [sp, #4]
 800c97a:	4605      	mov	r5, r0
 800c97c:	b930      	cbnz	r0, 800c98c <_calloc_r+0x24>
 800c97e:	4628      	mov	r0, r5
 800c980:	b003      	add	sp, #12
 800c982:	bd30      	pop	{r4, r5, pc}
 800c984:	220c      	movs	r2, #12
 800c986:	6002      	str	r2, [r0, #0]
 800c988:	2500      	movs	r5, #0
 800c98a:	e7f8      	b.n	800c97e <_calloc_r+0x16>
 800c98c:	4621      	mov	r1, r4
 800c98e:	f7fd fd3a 	bl	800a406 <memset>
 800c992:	e7f4      	b.n	800c97e <_calloc_r+0x16>

0800c994 <_realloc_r>:
 800c994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c998:	4680      	mov	r8, r0
 800c99a:	4614      	mov	r4, r2
 800c99c:	460e      	mov	r6, r1
 800c99e:	b921      	cbnz	r1, 800c9aa <_realloc_r+0x16>
 800c9a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9a4:	4611      	mov	r1, r2
 800c9a6:	f7ff b839 	b.w	800ba1c <_malloc_r>
 800c9aa:	b92a      	cbnz	r2, 800c9b8 <_realloc_r+0x24>
 800c9ac:	f7fe fc6a 	bl	800b284 <_free_r>
 800c9b0:	4625      	mov	r5, r4
 800c9b2:	4628      	mov	r0, r5
 800c9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9b8:	f000 f835 	bl	800ca26 <_malloc_usable_size_r>
 800c9bc:	4284      	cmp	r4, r0
 800c9be:	4607      	mov	r7, r0
 800c9c0:	d802      	bhi.n	800c9c8 <_realloc_r+0x34>
 800c9c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c9c6:	d812      	bhi.n	800c9ee <_realloc_r+0x5a>
 800c9c8:	4621      	mov	r1, r4
 800c9ca:	4640      	mov	r0, r8
 800c9cc:	f7ff f826 	bl	800ba1c <_malloc_r>
 800c9d0:	4605      	mov	r5, r0
 800c9d2:	2800      	cmp	r0, #0
 800c9d4:	d0ed      	beq.n	800c9b2 <_realloc_r+0x1e>
 800c9d6:	42bc      	cmp	r4, r7
 800c9d8:	4622      	mov	r2, r4
 800c9da:	4631      	mov	r1, r6
 800c9dc:	bf28      	it	cs
 800c9de:	463a      	movcs	r2, r7
 800c9e0:	f7fd fdb5 	bl	800a54e <memcpy>
 800c9e4:	4631      	mov	r1, r6
 800c9e6:	4640      	mov	r0, r8
 800c9e8:	f7fe fc4c 	bl	800b284 <_free_r>
 800c9ec:	e7e1      	b.n	800c9b2 <_realloc_r+0x1e>
 800c9ee:	4635      	mov	r5, r6
 800c9f0:	e7df      	b.n	800c9b2 <_realloc_r+0x1e>
	...

0800c9f4 <fiprintf>:
 800c9f4:	b40e      	push	{r1, r2, r3}
 800c9f6:	b503      	push	{r0, r1, lr}
 800c9f8:	4601      	mov	r1, r0
 800c9fa:	ab03      	add	r3, sp, #12
 800c9fc:	4805      	ldr	r0, [pc, #20]	; (800ca14 <fiprintf+0x20>)
 800c9fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca02:	6800      	ldr	r0, [r0, #0]
 800ca04:	9301      	str	r3, [sp, #4]
 800ca06:	f000 f83f 	bl	800ca88 <_vfiprintf_r>
 800ca0a:	b002      	add	sp, #8
 800ca0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca10:	b003      	add	sp, #12
 800ca12:	4770      	bx	lr
 800ca14:	2000023c 	.word	0x2000023c

0800ca18 <abort>:
 800ca18:	b508      	push	{r3, lr}
 800ca1a:	2006      	movs	r0, #6
 800ca1c:	f000 fa0c 	bl	800ce38 <raise>
 800ca20:	2001      	movs	r0, #1
 800ca22:	f7f7 fff5 	bl	8004a10 <_exit>

0800ca26 <_malloc_usable_size_r>:
 800ca26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca2a:	1f18      	subs	r0, r3, #4
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	bfbc      	itt	lt
 800ca30:	580b      	ldrlt	r3, [r1, r0]
 800ca32:	18c0      	addlt	r0, r0, r3
 800ca34:	4770      	bx	lr

0800ca36 <__sfputc_r>:
 800ca36:	6893      	ldr	r3, [r2, #8]
 800ca38:	3b01      	subs	r3, #1
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	b410      	push	{r4}
 800ca3e:	6093      	str	r3, [r2, #8]
 800ca40:	da08      	bge.n	800ca54 <__sfputc_r+0x1e>
 800ca42:	6994      	ldr	r4, [r2, #24]
 800ca44:	42a3      	cmp	r3, r4
 800ca46:	db01      	blt.n	800ca4c <__sfputc_r+0x16>
 800ca48:	290a      	cmp	r1, #10
 800ca4a:	d103      	bne.n	800ca54 <__sfputc_r+0x1e>
 800ca4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca50:	f000 b934 	b.w	800ccbc <__swbuf_r>
 800ca54:	6813      	ldr	r3, [r2, #0]
 800ca56:	1c58      	adds	r0, r3, #1
 800ca58:	6010      	str	r0, [r2, #0]
 800ca5a:	7019      	strb	r1, [r3, #0]
 800ca5c:	4608      	mov	r0, r1
 800ca5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca62:	4770      	bx	lr

0800ca64 <__sfputs_r>:
 800ca64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca66:	4606      	mov	r6, r0
 800ca68:	460f      	mov	r7, r1
 800ca6a:	4614      	mov	r4, r2
 800ca6c:	18d5      	adds	r5, r2, r3
 800ca6e:	42ac      	cmp	r4, r5
 800ca70:	d101      	bne.n	800ca76 <__sfputs_r+0x12>
 800ca72:	2000      	movs	r0, #0
 800ca74:	e007      	b.n	800ca86 <__sfputs_r+0x22>
 800ca76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca7a:	463a      	mov	r2, r7
 800ca7c:	4630      	mov	r0, r6
 800ca7e:	f7ff ffda 	bl	800ca36 <__sfputc_r>
 800ca82:	1c43      	adds	r3, r0, #1
 800ca84:	d1f3      	bne.n	800ca6e <__sfputs_r+0xa>
 800ca86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ca88 <_vfiprintf_r>:
 800ca88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca8c:	460d      	mov	r5, r1
 800ca8e:	b09d      	sub	sp, #116	; 0x74
 800ca90:	4614      	mov	r4, r2
 800ca92:	4698      	mov	r8, r3
 800ca94:	4606      	mov	r6, r0
 800ca96:	b118      	cbz	r0, 800caa0 <_vfiprintf_r+0x18>
 800ca98:	6a03      	ldr	r3, [r0, #32]
 800ca9a:	b90b      	cbnz	r3, 800caa0 <_vfiprintf_r+0x18>
 800ca9c:	f7fd fc1a 	bl	800a2d4 <__sinit>
 800caa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800caa2:	07d9      	lsls	r1, r3, #31
 800caa4:	d405      	bmi.n	800cab2 <_vfiprintf_r+0x2a>
 800caa6:	89ab      	ldrh	r3, [r5, #12]
 800caa8:	059a      	lsls	r2, r3, #22
 800caaa:	d402      	bmi.n	800cab2 <_vfiprintf_r+0x2a>
 800caac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800caae:	f7fd fd4c 	bl	800a54a <__retarget_lock_acquire_recursive>
 800cab2:	89ab      	ldrh	r3, [r5, #12]
 800cab4:	071b      	lsls	r3, r3, #28
 800cab6:	d501      	bpl.n	800cabc <_vfiprintf_r+0x34>
 800cab8:	692b      	ldr	r3, [r5, #16]
 800caba:	b99b      	cbnz	r3, 800cae4 <_vfiprintf_r+0x5c>
 800cabc:	4629      	mov	r1, r5
 800cabe:	4630      	mov	r0, r6
 800cac0:	f000 f93a 	bl	800cd38 <__swsetup_r>
 800cac4:	b170      	cbz	r0, 800cae4 <_vfiprintf_r+0x5c>
 800cac6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cac8:	07dc      	lsls	r4, r3, #31
 800caca:	d504      	bpl.n	800cad6 <_vfiprintf_r+0x4e>
 800cacc:	f04f 30ff 	mov.w	r0, #4294967295
 800cad0:	b01d      	add	sp, #116	; 0x74
 800cad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cad6:	89ab      	ldrh	r3, [r5, #12]
 800cad8:	0598      	lsls	r0, r3, #22
 800cada:	d4f7      	bmi.n	800cacc <_vfiprintf_r+0x44>
 800cadc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cade:	f7fd fd35 	bl	800a54c <__retarget_lock_release_recursive>
 800cae2:	e7f3      	b.n	800cacc <_vfiprintf_r+0x44>
 800cae4:	2300      	movs	r3, #0
 800cae6:	9309      	str	r3, [sp, #36]	; 0x24
 800cae8:	2320      	movs	r3, #32
 800caea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800caee:	f8cd 800c 	str.w	r8, [sp, #12]
 800caf2:	2330      	movs	r3, #48	; 0x30
 800caf4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cca8 <_vfiprintf_r+0x220>
 800caf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cafc:	f04f 0901 	mov.w	r9, #1
 800cb00:	4623      	mov	r3, r4
 800cb02:	469a      	mov	sl, r3
 800cb04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb08:	b10a      	cbz	r2, 800cb0e <_vfiprintf_r+0x86>
 800cb0a:	2a25      	cmp	r2, #37	; 0x25
 800cb0c:	d1f9      	bne.n	800cb02 <_vfiprintf_r+0x7a>
 800cb0e:	ebba 0b04 	subs.w	fp, sl, r4
 800cb12:	d00b      	beq.n	800cb2c <_vfiprintf_r+0xa4>
 800cb14:	465b      	mov	r3, fp
 800cb16:	4622      	mov	r2, r4
 800cb18:	4629      	mov	r1, r5
 800cb1a:	4630      	mov	r0, r6
 800cb1c:	f7ff ffa2 	bl	800ca64 <__sfputs_r>
 800cb20:	3001      	adds	r0, #1
 800cb22:	f000 80a9 	beq.w	800cc78 <_vfiprintf_r+0x1f0>
 800cb26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb28:	445a      	add	r2, fp
 800cb2a:	9209      	str	r2, [sp, #36]	; 0x24
 800cb2c:	f89a 3000 	ldrb.w	r3, [sl]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	f000 80a1 	beq.w	800cc78 <_vfiprintf_r+0x1f0>
 800cb36:	2300      	movs	r3, #0
 800cb38:	f04f 32ff 	mov.w	r2, #4294967295
 800cb3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb40:	f10a 0a01 	add.w	sl, sl, #1
 800cb44:	9304      	str	r3, [sp, #16]
 800cb46:	9307      	str	r3, [sp, #28]
 800cb48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb4c:	931a      	str	r3, [sp, #104]	; 0x68
 800cb4e:	4654      	mov	r4, sl
 800cb50:	2205      	movs	r2, #5
 800cb52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb56:	4854      	ldr	r0, [pc, #336]	; (800cca8 <_vfiprintf_r+0x220>)
 800cb58:	f7f3 fb42 	bl	80001e0 <memchr>
 800cb5c:	9a04      	ldr	r2, [sp, #16]
 800cb5e:	b9d8      	cbnz	r0, 800cb98 <_vfiprintf_r+0x110>
 800cb60:	06d1      	lsls	r1, r2, #27
 800cb62:	bf44      	itt	mi
 800cb64:	2320      	movmi	r3, #32
 800cb66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb6a:	0713      	lsls	r3, r2, #28
 800cb6c:	bf44      	itt	mi
 800cb6e:	232b      	movmi	r3, #43	; 0x2b
 800cb70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb74:	f89a 3000 	ldrb.w	r3, [sl]
 800cb78:	2b2a      	cmp	r3, #42	; 0x2a
 800cb7a:	d015      	beq.n	800cba8 <_vfiprintf_r+0x120>
 800cb7c:	9a07      	ldr	r2, [sp, #28]
 800cb7e:	4654      	mov	r4, sl
 800cb80:	2000      	movs	r0, #0
 800cb82:	f04f 0c0a 	mov.w	ip, #10
 800cb86:	4621      	mov	r1, r4
 800cb88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb8c:	3b30      	subs	r3, #48	; 0x30
 800cb8e:	2b09      	cmp	r3, #9
 800cb90:	d94d      	bls.n	800cc2e <_vfiprintf_r+0x1a6>
 800cb92:	b1b0      	cbz	r0, 800cbc2 <_vfiprintf_r+0x13a>
 800cb94:	9207      	str	r2, [sp, #28]
 800cb96:	e014      	b.n	800cbc2 <_vfiprintf_r+0x13a>
 800cb98:	eba0 0308 	sub.w	r3, r0, r8
 800cb9c:	fa09 f303 	lsl.w	r3, r9, r3
 800cba0:	4313      	orrs	r3, r2
 800cba2:	9304      	str	r3, [sp, #16]
 800cba4:	46a2      	mov	sl, r4
 800cba6:	e7d2      	b.n	800cb4e <_vfiprintf_r+0xc6>
 800cba8:	9b03      	ldr	r3, [sp, #12]
 800cbaa:	1d19      	adds	r1, r3, #4
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	9103      	str	r1, [sp, #12]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	bfbb      	ittet	lt
 800cbb4:	425b      	neglt	r3, r3
 800cbb6:	f042 0202 	orrlt.w	r2, r2, #2
 800cbba:	9307      	strge	r3, [sp, #28]
 800cbbc:	9307      	strlt	r3, [sp, #28]
 800cbbe:	bfb8      	it	lt
 800cbc0:	9204      	strlt	r2, [sp, #16]
 800cbc2:	7823      	ldrb	r3, [r4, #0]
 800cbc4:	2b2e      	cmp	r3, #46	; 0x2e
 800cbc6:	d10c      	bne.n	800cbe2 <_vfiprintf_r+0x15a>
 800cbc8:	7863      	ldrb	r3, [r4, #1]
 800cbca:	2b2a      	cmp	r3, #42	; 0x2a
 800cbcc:	d134      	bne.n	800cc38 <_vfiprintf_r+0x1b0>
 800cbce:	9b03      	ldr	r3, [sp, #12]
 800cbd0:	1d1a      	adds	r2, r3, #4
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	9203      	str	r2, [sp, #12]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	bfb8      	it	lt
 800cbda:	f04f 33ff 	movlt.w	r3, #4294967295
 800cbde:	3402      	adds	r4, #2
 800cbe0:	9305      	str	r3, [sp, #20]
 800cbe2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ccb8 <_vfiprintf_r+0x230>
 800cbe6:	7821      	ldrb	r1, [r4, #0]
 800cbe8:	2203      	movs	r2, #3
 800cbea:	4650      	mov	r0, sl
 800cbec:	f7f3 faf8 	bl	80001e0 <memchr>
 800cbf0:	b138      	cbz	r0, 800cc02 <_vfiprintf_r+0x17a>
 800cbf2:	9b04      	ldr	r3, [sp, #16]
 800cbf4:	eba0 000a 	sub.w	r0, r0, sl
 800cbf8:	2240      	movs	r2, #64	; 0x40
 800cbfa:	4082      	lsls	r2, r0
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	3401      	adds	r4, #1
 800cc00:	9304      	str	r3, [sp, #16]
 800cc02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc06:	4829      	ldr	r0, [pc, #164]	; (800ccac <_vfiprintf_r+0x224>)
 800cc08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc0c:	2206      	movs	r2, #6
 800cc0e:	f7f3 fae7 	bl	80001e0 <memchr>
 800cc12:	2800      	cmp	r0, #0
 800cc14:	d03f      	beq.n	800cc96 <_vfiprintf_r+0x20e>
 800cc16:	4b26      	ldr	r3, [pc, #152]	; (800ccb0 <_vfiprintf_r+0x228>)
 800cc18:	bb1b      	cbnz	r3, 800cc62 <_vfiprintf_r+0x1da>
 800cc1a:	9b03      	ldr	r3, [sp, #12]
 800cc1c:	3307      	adds	r3, #7
 800cc1e:	f023 0307 	bic.w	r3, r3, #7
 800cc22:	3308      	adds	r3, #8
 800cc24:	9303      	str	r3, [sp, #12]
 800cc26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc28:	443b      	add	r3, r7
 800cc2a:	9309      	str	r3, [sp, #36]	; 0x24
 800cc2c:	e768      	b.n	800cb00 <_vfiprintf_r+0x78>
 800cc2e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc32:	460c      	mov	r4, r1
 800cc34:	2001      	movs	r0, #1
 800cc36:	e7a6      	b.n	800cb86 <_vfiprintf_r+0xfe>
 800cc38:	2300      	movs	r3, #0
 800cc3a:	3401      	adds	r4, #1
 800cc3c:	9305      	str	r3, [sp, #20]
 800cc3e:	4619      	mov	r1, r3
 800cc40:	f04f 0c0a 	mov.w	ip, #10
 800cc44:	4620      	mov	r0, r4
 800cc46:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc4a:	3a30      	subs	r2, #48	; 0x30
 800cc4c:	2a09      	cmp	r2, #9
 800cc4e:	d903      	bls.n	800cc58 <_vfiprintf_r+0x1d0>
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d0c6      	beq.n	800cbe2 <_vfiprintf_r+0x15a>
 800cc54:	9105      	str	r1, [sp, #20]
 800cc56:	e7c4      	b.n	800cbe2 <_vfiprintf_r+0x15a>
 800cc58:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc5c:	4604      	mov	r4, r0
 800cc5e:	2301      	movs	r3, #1
 800cc60:	e7f0      	b.n	800cc44 <_vfiprintf_r+0x1bc>
 800cc62:	ab03      	add	r3, sp, #12
 800cc64:	9300      	str	r3, [sp, #0]
 800cc66:	462a      	mov	r2, r5
 800cc68:	4b12      	ldr	r3, [pc, #72]	; (800ccb4 <_vfiprintf_r+0x22c>)
 800cc6a:	a904      	add	r1, sp, #16
 800cc6c:	4630      	mov	r0, r6
 800cc6e:	f7fc fccf 	bl	8009610 <_printf_float>
 800cc72:	4607      	mov	r7, r0
 800cc74:	1c78      	adds	r0, r7, #1
 800cc76:	d1d6      	bne.n	800cc26 <_vfiprintf_r+0x19e>
 800cc78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc7a:	07d9      	lsls	r1, r3, #31
 800cc7c:	d405      	bmi.n	800cc8a <_vfiprintf_r+0x202>
 800cc7e:	89ab      	ldrh	r3, [r5, #12]
 800cc80:	059a      	lsls	r2, r3, #22
 800cc82:	d402      	bmi.n	800cc8a <_vfiprintf_r+0x202>
 800cc84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc86:	f7fd fc61 	bl	800a54c <__retarget_lock_release_recursive>
 800cc8a:	89ab      	ldrh	r3, [r5, #12]
 800cc8c:	065b      	lsls	r3, r3, #25
 800cc8e:	f53f af1d 	bmi.w	800cacc <_vfiprintf_r+0x44>
 800cc92:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc94:	e71c      	b.n	800cad0 <_vfiprintf_r+0x48>
 800cc96:	ab03      	add	r3, sp, #12
 800cc98:	9300      	str	r3, [sp, #0]
 800cc9a:	462a      	mov	r2, r5
 800cc9c:	4b05      	ldr	r3, [pc, #20]	; (800ccb4 <_vfiprintf_r+0x22c>)
 800cc9e:	a904      	add	r1, sp, #16
 800cca0:	4630      	mov	r0, r6
 800cca2:	f7fc ff59 	bl	8009b58 <_printf_i>
 800cca6:	e7e4      	b.n	800cc72 <_vfiprintf_r+0x1ea>
 800cca8:	0800d9c4 	.word	0x0800d9c4
 800ccac:	0800d9ce 	.word	0x0800d9ce
 800ccb0:	08009611 	.word	0x08009611
 800ccb4:	0800ca65 	.word	0x0800ca65
 800ccb8:	0800d9ca 	.word	0x0800d9ca

0800ccbc <__swbuf_r>:
 800ccbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccbe:	460e      	mov	r6, r1
 800ccc0:	4614      	mov	r4, r2
 800ccc2:	4605      	mov	r5, r0
 800ccc4:	b118      	cbz	r0, 800ccce <__swbuf_r+0x12>
 800ccc6:	6a03      	ldr	r3, [r0, #32]
 800ccc8:	b90b      	cbnz	r3, 800ccce <__swbuf_r+0x12>
 800ccca:	f7fd fb03 	bl	800a2d4 <__sinit>
 800ccce:	69a3      	ldr	r3, [r4, #24]
 800ccd0:	60a3      	str	r3, [r4, #8]
 800ccd2:	89a3      	ldrh	r3, [r4, #12]
 800ccd4:	071a      	lsls	r2, r3, #28
 800ccd6:	d525      	bpl.n	800cd24 <__swbuf_r+0x68>
 800ccd8:	6923      	ldr	r3, [r4, #16]
 800ccda:	b31b      	cbz	r3, 800cd24 <__swbuf_r+0x68>
 800ccdc:	6823      	ldr	r3, [r4, #0]
 800ccde:	6922      	ldr	r2, [r4, #16]
 800cce0:	1a98      	subs	r0, r3, r2
 800cce2:	6963      	ldr	r3, [r4, #20]
 800cce4:	b2f6      	uxtb	r6, r6
 800cce6:	4283      	cmp	r3, r0
 800cce8:	4637      	mov	r7, r6
 800ccea:	dc04      	bgt.n	800ccf6 <__swbuf_r+0x3a>
 800ccec:	4621      	mov	r1, r4
 800ccee:	4628      	mov	r0, r5
 800ccf0:	f7ff fdca 	bl	800c888 <_fflush_r>
 800ccf4:	b9e0      	cbnz	r0, 800cd30 <__swbuf_r+0x74>
 800ccf6:	68a3      	ldr	r3, [r4, #8]
 800ccf8:	3b01      	subs	r3, #1
 800ccfa:	60a3      	str	r3, [r4, #8]
 800ccfc:	6823      	ldr	r3, [r4, #0]
 800ccfe:	1c5a      	adds	r2, r3, #1
 800cd00:	6022      	str	r2, [r4, #0]
 800cd02:	701e      	strb	r6, [r3, #0]
 800cd04:	6962      	ldr	r2, [r4, #20]
 800cd06:	1c43      	adds	r3, r0, #1
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d004      	beq.n	800cd16 <__swbuf_r+0x5a>
 800cd0c:	89a3      	ldrh	r3, [r4, #12]
 800cd0e:	07db      	lsls	r3, r3, #31
 800cd10:	d506      	bpl.n	800cd20 <__swbuf_r+0x64>
 800cd12:	2e0a      	cmp	r6, #10
 800cd14:	d104      	bne.n	800cd20 <__swbuf_r+0x64>
 800cd16:	4621      	mov	r1, r4
 800cd18:	4628      	mov	r0, r5
 800cd1a:	f7ff fdb5 	bl	800c888 <_fflush_r>
 800cd1e:	b938      	cbnz	r0, 800cd30 <__swbuf_r+0x74>
 800cd20:	4638      	mov	r0, r7
 800cd22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd24:	4621      	mov	r1, r4
 800cd26:	4628      	mov	r0, r5
 800cd28:	f000 f806 	bl	800cd38 <__swsetup_r>
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	d0d5      	beq.n	800ccdc <__swbuf_r+0x20>
 800cd30:	f04f 37ff 	mov.w	r7, #4294967295
 800cd34:	e7f4      	b.n	800cd20 <__swbuf_r+0x64>
	...

0800cd38 <__swsetup_r>:
 800cd38:	b538      	push	{r3, r4, r5, lr}
 800cd3a:	4b2a      	ldr	r3, [pc, #168]	; (800cde4 <__swsetup_r+0xac>)
 800cd3c:	4605      	mov	r5, r0
 800cd3e:	6818      	ldr	r0, [r3, #0]
 800cd40:	460c      	mov	r4, r1
 800cd42:	b118      	cbz	r0, 800cd4c <__swsetup_r+0x14>
 800cd44:	6a03      	ldr	r3, [r0, #32]
 800cd46:	b90b      	cbnz	r3, 800cd4c <__swsetup_r+0x14>
 800cd48:	f7fd fac4 	bl	800a2d4 <__sinit>
 800cd4c:	89a3      	ldrh	r3, [r4, #12]
 800cd4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd52:	0718      	lsls	r0, r3, #28
 800cd54:	d422      	bmi.n	800cd9c <__swsetup_r+0x64>
 800cd56:	06d9      	lsls	r1, r3, #27
 800cd58:	d407      	bmi.n	800cd6a <__swsetup_r+0x32>
 800cd5a:	2309      	movs	r3, #9
 800cd5c:	602b      	str	r3, [r5, #0]
 800cd5e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd62:	81a3      	strh	r3, [r4, #12]
 800cd64:	f04f 30ff 	mov.w	r0, #4294967295
 800cd68:	e034      	b.n	800cdd4 <__swsetup_r+0x9c>
 800cd6a:	0758      	lsls	r0, r3, #29
 800cd6c:	d512      	bpl.n	800cd94 <__swsetup_r+0x5c>
 800cd6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd70:	b141      	cbz	r1, 800cd84 <__swsetup_r+0x4c>
 800cd72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd76:	4299      	cmp	r1, r3
 800cd78:	d002      	beq.n	800cd80 <__swsetup_r+0x48>
 800cd7a:	4628      	mov	r0, r5
 800cd7c:	f7fe fa82 	bl	800b284 <_free_r>
 800cd80:	2300      	movs	r3, #0
 800cd82:	6363      	str	r3, [r4, #52]	; 0x34
 800cd84:	89a3      	ldrh	r3, [r4, #12]
 800cd86:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd8a:	81a3      	strh	r3, [r4, #12]
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	6063      	str	r3, [r4, #4]
 800cd90:	6923      	ldr	r3, [r4, #16]
 800cd92:	6023      	str	r3, [r4, #0]
 800cd94:	89a3      	ldrh	r3, [r4, #12]
 800cd96:	f043 0308 	orr.w	r3, r3, #8
 800cd9a:	81a3      	strh	r3, [r4, #12]
 800cd9c:	6923      	ldr	r3, [r4, #16]
 800cd9e:	b94b      	cbnz	r3, 800cdb4 <__swsetup_r+0x7c>
 800cda0:	89a3      	ldrh	r3, [r4, #12]
 800cda2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cda6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdaa:	d003      	beq.n	800cdb4 <__swsetup_r+0x7c>
 800cdac:	4621      	mov	r1, r4
 800cdae:	4628      	mov	r0, r5
 800cdb0:	f000 f884 	bl	800cebc <__smakebuf_r>
 800cdb4:	89a0      	ldrh	r0, [r4, #12]
 800cdb6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cdba:	f010 0301 	ands.w	r3, r0, #1
 800cdbe:	d00a      	beq.n	800cdd6 <__swsetup_r+0x9e>
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	60a3      	str	r3, [r4, #8]
 800cdc4:	6963      	ldr	r3, [r4, #20]
 800cdc6:	425b      	negs	r3, r3
 800cdc8:	61a3      	str	r3, [r4, #24]
 800cdca:	6923      	ldr	r3, [r4, #16]
 800cdcc:	b943      	cbnz	r3, 800cde0 <__swsetup_r+0xa8>
 800cdce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cdd2:	d1c4      	bne.n	800cd5e <__swsetup_r+0x26>
 800cdd4:	bd38      	pop	{r3, r4, r5, pc}
 800cdd6:	0781      	lsls	r1, r0, #30
 800cdd8:	bf58      	it	pl
 800cdda:	6963      	ldrpl	r3, [r4, #20]
 800cddc:	60a3      	str	r3, [r4, #8]
 800cdde:	e7f4      	b.n	800cdca <__swsetup_r+0x92>
 800cde0:	2000      	movs	r0, #0
 800cde2:	e7f7      	b.n	800cdd4 <__swsetup_r+0x9c>
 800cde4:	2000023c 	.word	0x2000023c

0800cde8 <_raise_r>:
 800cde8:	291f      	cmp	r1, #31
 800cdea:	b538      	push	{r3, r4, r5, lr}
 800cdec:	4604      	mov	r4, r0
 800cdee:	460d      	mov	r5, r1
 800cdf0:	d904      	bls.n	800cdfc <_raise_r+0x14>
 800cdf2:	2316      	movs	r3, #22
 800cdf4:	6003      	str	r3, [r0, #0]
 800cdf6:	f04f 30ff 	mov.w	r0, #4294967295
 800cdfa:	bd38      	pop	{r3, r4, r5, pc}
 800cdfc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cdfe:	b112      	cbz	r2, 800ce06 <_raise_r+0x1e>
 800ce00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce04:	b94b      	cbnz	r3, 800ce1a <_raise_r+0x32>
 800ce06:	4620      	mov	r0, r4
 800ce08:	f000 f830 	bl	800ce6c <_getpid_r>
 800ce0c:	462a      	mov	r2, r5
 800ce0e:	4601      	mov	r1, r0
 800ce10:	4620      	mov	r0, r4
 800ce12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce16:	f000 b817 	b.w	800ce48 <_kill_r>
 800ce1a:	2b01      	cmp	r3, #1
 800ce1c:	d00a      	beq.n	800ce34 <_raise_r+0x4c>
 800ce1e:	1c59      	adds	r1, r3, #1
 800ce20:	d103      	bne.n	800ce2a <_raise_r+0x42>
 800ce22:	2316      	movs	r3, #22
 800ce24:	6003      	str	r3, [r0, #0]
 800ce26:	2001      	movs	r0, #1
 800ce28:	e7e7      	b.n	800cdfa <_raise_r+0x12>
 800ce2a:	2400      	movs	r4, #0
 800ce2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ce30:	4628      	mov	r0, r5
 800ce32:	4798      	blx	r3
 800ce34:	2000      	movs	r0, #0
 800ce36:	e7e0      	b.n	800cdfa <_raise_r+0x12>

0800ce38 <raise>:
 800ce38:	4b02      	ldr	r3, [pc, #8]	; (800ce44 <raise+0xc>)
 800ce3a:	4601      	mov	r1, r0
 800ce3c:	6818      	ldr	r0, [r3, #0]
 800ce3e:	f7ff bfd3 	b.w	800cde8 <_raise_r>
 800ce42:	bf00      	nop
 800ce44:	2000023c 	.word	0x2000023c

0800ce48 <_kill_r>:
 800ce48:	b538      	push	{r3, r4, r5, lr}
 800ce4a:	4d07      	ldr	r5, [pc, #28]	; (800ce68 <_kill_r+0x20>)
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	4604      	mov	r4, r0
 800ce50:	4608      	mov	r0, r1
 800ce52:	4611      	mov	r1, r2
 800ce54:	602b      	str	r3, [r5, #0]
 800ce56:	f7f7 fdcb 	bl	80049f0 <_kill>
 800ce5a:	1c43      	adds	r3, r0, #1
 800ce5c:	d102      	bne.n	800ce64 <_kill_r+0x1c>
 800ce5e:	682b      	ldr	r3, [r5, #0]
 800ce60:	b103      	cbz	r3, 800ce64 <_kill_r+0x1c>
 800ce62:	6023      	str	r3, [r4, #0]
 800ce64:	bd38      	pop	{r3, r4, r5, pc}
 800ce66:	bf00      	nop
 800ce68:	200008a0 	.word	0x200008a0

0800ce6c <_getpid_r>:
 800ce6c:	f7f7 bdb8 	b.w	80049e0 <_getpid>

0800ce70 <__swhatbuf_r>:
 800ce70:	b570      	push	{r4, r5, r6, lr}
 800ce72:	460c      	mov	r4, r1
 800ce74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce78:	2900      	cmp	r1, #0
 800ce7a:	b096      	sub	sp, #88	; 0x58
 800ce7c:	4615      	mov	r5, r2
 800ce7e:	461e      	mov	r6, r3
 800ce80:	da0d      	bge.n	800ce9e <__swhatbuf_r+0x2e>
 800ce82:	89a3      	ldrh	r3, [r4, #12]
 800ce84:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ce88:	f04f 0100 	mov.w	r1, #0
 800ce8c:	bf0c      	ite	eq
 800ce8e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ce92:	2340      	movne	r3, #64	; 0x40
 800ce94:	2000      	movs	r0, #0
 800ce96:	6031      	str	r1, [r6, #0]
 800ce98:	602b      	str	r3, [r5, #0]
 800ce9a:	b016      	add	sp, #88	; 0x58
 800ce9c:	bd70      	pop	{r4, r5, r6, pc}
 800ce9e:	466a      	mov	r2, sp
 800cea0:	f000 f848 	bl	800cf34 <_fstat_r>
 800cea4:	2800      	cmp	r0, #0
 800cea6:	dbec      	blt.n	800ce82 <__swhatbuf_r+0x12>
 800cea8:	9901      	ldr	r1, [sp, #4]
 800ceaa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ceae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ceb2:	4259      	negs	r1, r3
 800ceb4:	4159      	adcs	r1, r3
 800ceb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ceba:	e7eb      	b.n	800ce94 <__swhatbuf_r+0x24>

0800cebc <__smakebuf_r>:
 800cebc:	898b      	ldrh	r3, [r1, #12]
 800cebe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cec0:	079d      	lsls	r5, r3, #30
 800cec2:	4606      	mov	r6, r0
 800cec4:	460c      	mov	r4, r1
 800cec6:	d507      	bpl.n	800ced8 <__smakebuf_r+0x1c>
 800cec8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cecc:	6023      	str	r3, [r4, #0]
 800cece:	6123      	str	r3, [r4, #16]
 800ced0:	2301      	movs	r3, #1
 800ced2:	6163      	str	r3, [r4, #20]
 800ced4:	b002      	add	sp, #8
 800ced6:	bd70      	pop	{r4, r5, r6, pc}
 800ced8:	ab01      	add	r3, sp, #4
 800ceda:	466a      	mov	r2, sp
 800cedc:	f7ff ffc8 	bl	800ce70 <__swhatbuf_r>
 800cee0:	9900      	ldr	r1, [sp, #0]
 800cee2:	4605      	mov	r5, r0
 800cee4:	4630      	mov	r0, r6
 800cee6:	f7fe fd99 	bl	800ba1c <_malloc_r>
 800ceea:	b948      	cbnz	r0, 800cf00 <__smakebuf_r+0x44>
 800ceec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cef0:	059a      	lsls	r2, r3, #22
 800cef2:	d4ef      	bmi.n	800ced4 <__smakebuf_r+0x18>
 800cef4:	f023 0303 	bic.w	r3, r3, #3
 800cef8:	f043 0302 	orr.w	r3, r3, #2
 800cefc:	81a3      	strh	r3, [r4, #12]
 800cefe:	e7e3      	b.n	800cec8 <__smakebuf_r+0xc>
 800cf00:	89a3      	ldrh	r3, [r4, #12]
 800cf02:	6020      	str	r0, [r4, #0]
 800cf04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf08:	81a3      	strh	r3, [r4, #12]
 800cf0a:	9b00      	ldr	r3, [sp, #0]
 800cf0c:	6163      	str	r3, [r4, #20]
 800cf0e:	9b01      	ldr	r3, [sp, #4]
 800cf10:	6120      	str	r0, [r4, #16]
 800cf12:	b15b      	cbz	r3, 800cf2c <__smakebuf_r+0x70>
 800cf14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf18:	4630      	mov	r0, r6
 800cf1a:	f000 f81d 	bl	800cf58 <_isatty_r>
 800cf1e:	b128      	cbz	r0, 800cf2c <__smakebuf_r+0x70>
 800cf20:	89a3      	ldrh	r3, [r4, #12]
 800cf22:	f023 0303 	bic.w	r3, r3, #3
 800cf26:	f043 0301 	orr.w	r3, r3, #1
 800cf2a:	81a3      	strh	r3, [r4, #12]
 800cf2c:	89a3      	ldrh	r3, [r4, #12]
 800cf2e:	431d      	orrs	r5, r3
 800cf30:	81a5      	strh	r5, [r4, #12]
 800cf32:	e7cf      	b.n	800ced4 <__smakebuf_r+0x18>

0800cf34 <_fstat_r>:
 800cf34:	b538      	push	{r3, r4, r5, lr}
 800cf36:	4d07      	ldr	r5, [pc, #28]	; (800cf54 <_fstat_r+0x20>)
 800cf38:	2300      	movs	r3, #0
 800cf3a:	4604      	mov	r4, r0
 800cf3c:	4608      	mov	r0, r1
 800cf3e:	4611      	mov	r1, r2
 800cf40:	602b      	str	r3, [r5, #0]
 800cf42:	f7f7 fdb4 	bl	8004aae <_fstat>
 800cf46:	1c43      	adds	r3, r0, #1
 800cf48:	d102      	bne.n	800cf50 <_fstat_r+0x1c>
 800cf4a:	682b      	ldr	r3, [r5, #0]
 800cf4c:	b103      	cbz	r3, 800cf50 <_fstat_r+0x1c>
 800cf4e:	6023      	str	r3, [r4, #0]
 800cf50:	bd38      	pop	{r3, r4, r5, pc}
 800cf52:	bf00      	nop
 800cf54:	200008a0 	.word	0x200008a0

0800cf58 <_isatty_r>:
 800cf58:	b538      	push	{r3, r4, r5, lr}
 800cf5a:	4d06      	ldr	r5, [pc, #24]	; (800cf74 <_isatty_r+0x1c>)
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	4604      	mov	r4, r0
 800cf60:	4608      	mov	r0, r1
 800cf62:	602b      	str	r3, [r5, #0]
 800cf64:	f7f7 fdb3 	bl	8004ace <_isatty>
 800cf68:	1c43      	adds	r3, r0, #1
 800cf6a:	d102      	bne.n	800cf72 <_isatty_r+0x1a>
 800cf6c:	682b      	ldr	r3, [r5, #0]
 800cf6e:	b103      	cbz	r3, 800cf72 <_isatty_r+0x1a>
 800cf70:	6023      	str	r3, [r4, #0]
 800cf72:	bd38      	pop	{r3, r4, r5, pc}
 800cf74:	200008a0 	.word	0x200008a0

0800cf78 <_init>:
 800cf78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf7a:	bf00      	nop
 800cf7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf7e:	bc08      	pop	{r3}
 800cf80:	469e      	mov	lr, r3
 800cf82:	4770      	bx	lr

0800cf84 <_fini>:
 800cf84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf86:	bf00      	nop
 800cf88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf8a:	bc08      	pop	{r3}
 800cf8c:	469e      	mov	lr, r3
 800cf8e:	4770      	bx	lr
