
main-sw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a650  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800a7f0  0800a7f0  0001a7f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acb4  0800acb4  0002023c  2**0
                  CONTENTS
  4 .ARM          00000008  0800acb4  0800acb4  0001acb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acbc  0800acbc  0002023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acbc  0800acbc  0001acbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acc0  0800acc0  0001acc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  0800acc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  2000023c  0800af00  0002023c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000728  0800af00  00020728  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011a51  00000000  00000000  000202af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ced  00000000  00000000  00031d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb0  00000000  00000000  000349f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c10  00000000  00000000  000359a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017c03  00000000  00000000  000365b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013238  00000000  00000000  0004e1b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090c8a  00000000  00000000  000613eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055f0  00000000  00000000  000f2078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000f7668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000023c 	.word	0x2000023c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a7d8 	.word	0x0800a7d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000240 	.word	0x20000240
 80001dc:	0800a7d8 	.word	0x0800a7d8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <createPcReceiveHandler>:
PcReceiveHandler createPcReceiveHandler(StateMachine*  stateMachine,
										PIDController* controller,
		   								Motor* motor,
		   								PcSendHandler* sender,
		   								UART_HandleTypeDef* uart3)
{
 8001000:	b5b0      	push	{r4, r5, r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
 800100c:	603b      	str	r3, [r7, #0]
    PcReceiveHandler handler;
    handler.stateMachine	= stateMachine;
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	613b      	str	r3, [r7, #16]
    handler.pidController 	= controller;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	617b      	str	r3, [r7, #20]
    handler.motor 			= motor;
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	61bb      	str	r3, [r7, #24]
    handler.sender 			= sender;
 800101a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800101c:	61fb      	str	r3, [r7, #28]
    handler.uart3 			= uart3;
 800101e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001020:	623b      	str	r3, [r7, #32]

    // Zuweisung der globalen Variable
    gPcHandler = handler;
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <createPcReceiveHandler+0x5c>)
 8001024:	461d      	mov	r5, r3
 8001026:	f107 0410 	add.w	r4, r7, #16
 800102a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800102c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800102e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001032:	e885 0003 	stmia.w	r5, {r0, r1}

    handler.uartProcessor = createUartProcessor(pc_interface_dictionary);
 8001036:	480a      	ldr	r0, [pc, #40]	; (8001060 <createPcReceiveHandler+0x60>)
 8001038:	f000 fe74 	bl	8001d24 <createUartProcessor>
 800103c:	6278      	str	r0, [r7, #36]	; 0x24
    return handler;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	461d      	mov	r5, r3
 8001042:	f107 0410 	add.w	r4, r7, #16
 8001046:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001048:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800104a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800104e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	3728      	adds	r7, #40	; 0x28
 8001056:	46bd      	mov	sp, r7
 8001058:	bdb0      	pop	{r4, r5, r7, pc}
 800105a:	bf00      	nop
 800105c:	20000258 	.word	0x20000258
 8001060:	20000000 	.word	0x20000000

08001064 <handleSetSpeed>:

// Handle-Methods
void handleSetSpeed(uint8_t uartNr, const char* value){
 8001064:	b5b0      	push	{r4, r5, r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	71fb      	strb	r3, [r7, #7]
	if(gPcHandler.stateMachine->getState(gPcHandler.stateMachine) == STATE_MANUAL_CONTROL){
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <handleSetSpeed+0x4c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <handleSetSpeed+0x4c>)
 8001078:	6812      	ldr	r2, [r2, #0]
 800107a:	4610      	mov	r0, r2
 800107c:	4798      	blx	r3
 800107e:	4603      	mov	r3, r0
 8001080:	2b01      	cmp	r3, #1
 8001082:	d110      	bne.n	80010a6 <handleSetSpeed+0x42>
		gPcHandler.motor->setSpeed(gPcHandler.motor,extractFloatValue(3,value));
 8001084:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <handleSetSpeed+0x4c>)
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	68dc      	ldr	r4, [r3, #12]
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <handleSetSpeed+0x4c>)
 800108c:	689d      	ldr	r5, [r3, #8]
 800108e:	6839      	ldr	r1, [r7, #0]
 8001090:	2003      	movs	r0, #3
 8001092:	f000 f933 	bl	80012fc <extractFloatValue>
 8001096:	eef0 7a40 	vmov.f32	s15, s0
 800109a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800109e:	ee17 1a90 	vmov	r1, s15
 80010a2:	4628      	mov	r0, r5
 80010a4:	47a0      	blx	r4
	}

}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bdb0      	pop	{r4, r5, r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000258 	.word	0x20000258

080010b4 <handleSetState>:


void handleSetState(uint8_t uartNr, const char* value){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	71fb      	strb	r3, [r7, #7]
	int state = extractIntValue(3, value);
 80010c0:	6839      	ldr	r1, [r7, #0]
 80010c2:	2003      	movs	r0, #3
 80010c4:	f000 f9a6 	bl	8001414 <extractIntValue>
 80010c8:	60b8      	str	r0, [r7, #8]
	State s = STATE_IDLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]
	if(state == 1){
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d102      	bne.n	80010da <handleSetState+0x26>
		s = STATE_MANUAL_CONTROL;
 80010d4:	2301      	movs	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]
 80010d8:	e004      	b.n	80010e4 <handleSetState+0x30>
	}else if(state ==2){
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d101      	bne.n	80010e4 <handleSetState+0x30>
		s = STATE_AUTOMATIC_MODE;
 80010e0:	2302      	movs	r3, #2
 80010e2:	73fb      	strb	r3, [r7, #15]
	}

	gPcHandler.stateMachine->changeState(gPcHandler.stateMachine,s);
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <handleSetState+0x48>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	4a04      	ldr	r2, [pc, #16]	; (80010fc <handleSetState+0x48>)
 80010ec:	6812      	ldr	r2, [r2, #0]
 80010ee:	7bf9      	ldrb	r1, [r7, #15]
 80010f0:	4610      	mov	r0, r2
 80010f2:	4798      	blx	r3
}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000258 	.word	0x20000258

08001100 <handleSetCP>:

void handleSetCP(uint8_t uartNr, const char* value){
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
	float kp = extractFloatValue(3, value);
 800110c:	6839      	ldr	r1, [r7, #0]
 800110e:	2003      	movs	r0, #3
 8001110:	f000 f8f4 	bl	80012fc <extractFloatValue>
 8001114:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.pidController->set_kp(gPcHandler.pidController,kp);
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <handleSetCP+0x34>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	4a05      	ldr	r2, [pc, #20]	; (8001134 <handleSetCP+0x34>)
 8001120:	6852      	ldr	r2, [r2, #4]
 8001122:	ed97 0a03 	vldr	s0, [r7, #12]
 8001126:	4610      	mov	r0, r2
 8001128:	4798      	blx	r3
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000258 	.word	0x20000258

08001138 <handleSetCI>:
void handleSetCI(uint8_t uartNr, const char* value){
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	6039      	str	r1, [r7, #0]
 8001142:	71fb      	strb	r3, [r7, #7]
	float ki = extractFloatValue(3, value);
 8001144:	6839      	ldr	r1, [r7, #0]
 8001146:	2003      	movs	r0, #3
 8001148:	f000 f8d8 	bl	80012fc <extractFloatValue>
 800114c:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.pidController->set_ki(gPcHandler.pidController,ki);
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <handleSetCI+0x34>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001156:	4a05      	ldr	r2, [pc, #20]	; (800116c <handleSetCI+0x34>)
 8001158:	6852      	ldr	r2, [r2, #4]
 800115a:	ed97 0a03 	vldr	s0, [r7, #12]
 800115e:	4610      	mov	r0, r2
 8001160:	4798      	blx	r3
}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000258 	.word	0x20000258

08001170 <handleSetCD>:
void handleSetCD(uint8_t uartNr, const char* value){
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
	float kd = extractFloatValue(3, value);
 800117c:	6839      	ldr	r1, [r7, #0]
 800117e:	2003      	movs	r0, #3
 8001180:	f000 f8bc 	bl	80012fc <extractFloatValue>
 8001184:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.pidController->set_kd(gPcHandler.pidController,kd);
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <handleSetCD+0x34>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118e:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <handleSetCD+0x34>)
 8001190:	6852      	ldr	r2, [r2, #4]
 8001192:	ed97 0a03 	vldr	s0, [r7, #12]
 8001196:	4610      	mov	r0, r2
 8001198:	4798      	blx	r3
}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000258 	.word	0x20000258

080011a8 <handleGetState>:

void handleGetState(uint8_t uartNr, const char* value){
 80011a8:	b5b0      	push	{r4, r5, r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	6039      	str	r1, [r7, #0]
 80011b2:	71fb      	strb	r3, [r7, #7]
	gPcHandler.sender->interface.sendState(gPcHandler.uart3,gPcHandler.stateMachine->getState(gPcHandler.stateMachine));
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <handleGetState+0x34>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	689c      	ldr	r4, [r3, #8]
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <handleGetState+0x34>)
 80011bc:	691d      	ldr	r5, [r3, #16]
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <handleGetState+0x34>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	4a05      	ldr	r2, [pc, #20]	; (80011dc <handleGetState+0x34>)
 80011c6:	6812      	ldr	r2, [r2, #0]
 80011c8:	4610      	mov	r0, r2
 80011ca:	4798      	blx	r3
 80011cc:	4603      	mov	r3, r0
 80011ce:	4619      	mov	r1, r3
 80011d0:	4628      	mov	r0, r5
 80011d2:	47a0      	blx	r4
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bdb0      	pop	{r4, r5, r7, pc}
 80011dc:	20000258 	.word	0x20000258

080011e0 <handleGetSpeed>:
void handleGetSpeed(uint8_t uartNr, const char* value){
 80011e0:	b5b0      	push	{r4, r5, r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
	gPcHandler.sender->interface.sendSpeed(gPcHandler.uart3,gPcHandler.motor->getSpeed(gPcHandler.motor));
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <handleGetSpeed+0x3c>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	68dc      	ldr	r4, [r3, #12]
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <handleGetSpeed+0x3c>)
 80011f4:	691d      	ldr	r5, [r3, #16]
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <handleGetSpeed+0x3c>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	4a07      	ldr	r2, [pc, #28]	; (800121c <handleGetSpeed+0x3c>)
 80011fe:	6892      	ldr	r2, [r2, #8]
 8001200:	4610      	mov	r0, r2
 8001202:	4798      	blx	r3
 8001204:	ee07 0a90 	vmov	s15, r0
 8001208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800120c:	eeb0 0a67 	vmov.f32	s0, s15
 8001210:	4628      	mov	r0, r5
 8001212:	47a0      	blx	r4
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bdb0      	pop	{r4, r5, r7, pc}
 800121c:	20000258 	.word	0x20000258

08001220 <handleGetCP>:
void handleGetCP(uint8_t uartNr, const char* value){
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	71fb      	strb	r3, [r7, #7]
	float kp = gPcHandler.pidController->get_kp(gPcHandler.pidController);
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <handleGetCP+0x38>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	4a09      	ldr	r2, [pc, #36]	; (8001258 <handleGetCP+0x38>)
 8001234:	6852      	ldr	r2, [r2, #4]
 8001236:	4610      	mov	r0, r2
 8001238:	4798      	blx	r3
 800123a:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.sender->interface.sendCPvalue(gPcHandler.uart3,kp);
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <handleGetCP+0x38>)
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	4a04      	ldr	r2, [pc, #16]	; (8001258 <handleGetCP+0x38>)
 8001246:	6912      	ldr	r2, [r2, #16]
 8001248:	ed97 0a03 	vldr	s0, [r7, #12]
 800124c:	4610      	mov	r0, r2
 800124e:	4798      	blx	r3
}
 8001250:	bf00      	nop
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000258 	.word	0x20000258

0800125c <handleGetCI>:
void handleGetCI(uint8_t uartNr, const char* value){
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	6039      	str	r1, [r7, #0]
 8001266:	71fb      	strb	r3, [r7, #7]
	float ki = gPcHandler.pidController->get_ki(gPcHandler.pidController);
 8001268:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <handleGetCI+0x38>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	4a09      	ldr	r2, [pc, #36]	; (8001294 <handleGetCI+0x38>)
 8001270:	6852      	ldr	r2, [r2, #4]
 8001272:	4610      	mov	r0, r2
 8001274:	4798      	blx	r3
 8001276:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.sender->interface.sendCIvalue(gPcHandler.uart3,ki);
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <handleGetCI+0x38>)
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	695b      	ldr	r3, [r3, #20]
 8001280:	4a04      	ldr	r2, [pc, #16]	; (8001294 <handleGetCI+0x38>)
 8001282:	6912      	ldr	r2, [r2, #16]
 8001284:	ed97 0a03 	vldr	s0, [r7, #12]
 8001288:	4610      	mov	r0, r2
 800128a:	4798      	blx	r3
}
 800128c:	bf00      	nop
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000258 	.word	0x20000258

08001298 <handleGetCD>:
void handleGetCD(uint8_t uartNr, const char* value){
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
	float kd = gPcHandler.pidController->get_kd(gPcHandler.pidController);
 80012a4:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <handleGetCD+0x38>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	4a09      	ldr	r2, [pc, #36]	; (80012d0 <handleGetCD+0x38>)
 80012ac:	6852      	ldr	r2, [r2, #4]
 80012ae:	4610      	mov	r0, r2
 80012b0:	4798      	blx	r3
 80012b2:	ed87 0a03 	vstr	s0, [r7, #12]
	gPcHandler.sender->interface.sendCDvalue(gPcHandler.uart3,kd);
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <handleGetCD+0x38>)
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a04      	ldr	r2, [pc, #16]	; (80012d0 <handleGetCD+0x38>)
 80012be:	6912      	ldr	r2, [r2, #16]
 80012c0:	ed97 0a03 	vldr	s0, [r7, #12]
 80012c4:	4610      	mov	r0, r2
 80012c6:	4798      	blx	r3
}
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000258 	.word	0x20000258

080012d4 <processPcInterfaceMessage>:

void processPcInterfaceMessage(PcReceiveHandler* handler,uint8_t* receivedData, uint8_t receivedDataIndex){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	4613      	mov	r3, r2
 80012e0:	71fb      	strb	r3, [r7, #7]
	processCommand(3, &(handler->uartProcessor), receivedData, receivedDataIndex);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f103 0114 	add.w	r1, r3, #20
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	2003      	movs	r0, #3
 80012ee:	f000 fd57 	bl	8001da0 <processCommand>
}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <extractFloatValue>:

float extractFloatValue(uint8_t uartNr, const char* value) {
 80012fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001300:	b089      	sub	sp, #36	; 0x24
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	6039      	str	r1, [r7, #0]
 8001308:	71fb      	strb	r3, [r7, #7]
    int length = strlen(value);
 800130a:	6838      	ldr	r0, [r7, #0]
 800130c:	f7fe ffb8 	bl	8000280 <strlen>
 8001310:	4603      	mov	r3, r0
 8001312:	613b      	str	r3, [r7, #16]
    int startIndex = -1;  // Index des ersten Leerzeichens
 8001314:	f04f 33ff 	mov.w	r3, #4294967295
 8001318:	61fb      	str	r3, [r7, #28]
    int endIndex = -1;    // Index des zweiten Leerzeichens
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < length; i++) {
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	e019      	b.n	800135a <extractFloatValue+0x5e>
        if (value[i] == ' ' || value[i] == '\r') {
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	4413      	add	r3, r2
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b20      	cmp	r3, #32
 8001330:	d005      	beq.n	800133e <extractFloatValue+0x42>
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	4413      	add	r3, r2
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b0d      	cmp	r3, #13
 800133c:	d10a      	bne.n	8001354 <extractFloatValue+0x58>
            if (startIndex == -1) {
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001344:	d103      	bne.n	800134e <extractFloatValue+0x52>
                startIndex = i + 1;
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	3301      	adds	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	e002      	b.n	8001354 <extractFloatValue+0x58>
            } else {
                endIndex = i;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	61bb      	str	r3, [r7, #24]
                break;
 8001352:	e006      	b.n	8001362 <extractFloatValue+0x66>
    for (int i = 0; i < length; i++) {
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	3301      	adds	r3, #1
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	429a      	cmp	r2, r3
 8001360:	dbe1      	blt.n	8001326 <extractFloatValue+0x2a>
            }
        }
    }
    if (startIndex != -1 && endIndex != -1 && startIndex < endIndex) {
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001368:	d04a      	beq.n	8001400 <extractFloatValue+0x104>
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001370:	d046      	beq.n	8001400 <extractFloatValue+0x104>
 8001372:	69fa      	ldr	r2, [r7, #28]
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	429a      	cmp	r2, r3
 8001378:	da42      	bge.n	8001400 <extractFloatValue+0x104>
 800137a:	466b      	mov	r3, sp
 800137c:	461e      	mov	r6, r3
        char floatStr[endIndex - startIndex + 1];
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	1c59      	adds	r1, r3, #1
 8001386:	1e4b      	subs	r3, r1, #1
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	460a      	mov	r2, r1
 800138c:	2300      	movs	r3, #0
 800138e:	4690      	mov	r8, r2
 8001390:	4699      	mov	r9, r3
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	f04f 0300 	mov.w	r3, #0
 800139a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800139e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013a6:	460a      	mov	r2, r1
 80013a8:	2300      	movs	r3, #0
 80013aa:	4614      	mov	r4, r2
 80013ac:	461d      	mov	r5, r3
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	f04f 0300 	mov.w	r3, #0
 80013b6:	00eb      	lsls	r3, r5, #3
 80013b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80013bc:	00e2      	lsls	r2, r4, #3
 80013be:	460b      	mov	r3, r1
 80013c0:	3307      	adds	r3, #7
 80013c2:	08db      	lsrs	r3, r3, #3
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	ebad 0d03 	sub.w	sp, sp, r3
 80013ca:	466b      	mov	r3, sp
 80013cc:	3300      	adds	r3, #0
 80013ce:	60bb      	str	r3, [r7, #8]
        strncpy(floatStr, value + startIndex, endIndex - startIndex);
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	18d1      	adds	r1, r2, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	461a      	mov	r2, r3
 80013de:	68b8      	ldr	r0, [r7, #8]
 80013e0:	f006 fc5b 	bl	8007c9a <strncpy>
        floatStr[endIndex - startIndex] = '\0';
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	2100      	movs	r1, #0
 80013ee:	54d1      	strb	r1, [r2, r3]
        return strtof(floatStr, NULL);
 80013f0:	2100      	movs	r1, #0
 80013f2:	68b8      	ldr	r0, [r7, #8]
 80013f4:	f005 fb9e 	bl	8006b34 <strtof>
 80013f8:	eef0 7a40 	vmov.f32	s15, s0
 80013fc:	46b5      	mov	sp, r6
 80013fe:	e001      	b.n	8001404 <extractFloatValue+0x108>
    }
    return 0.00;
 8001400:	eddf 7a03 	vldr	s15, [pc, #12]	; 8001410 <extractFloatValue+0x114>
}
 8001404:	eeb0 0a67 	vmov.f32	s0, s15
 8001408:	3724      	adds	r7, #36	; 0x24
 800140a:	46bd      	mov	sp, r7
 800140c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001410:	00000000 	.word	0x00000000

08001414 <extractIntValue>:
int extractIntValue(uint8_t uartNr, const char* value) {
 8001414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001418:	b089      	sub	sp, #36	; 0x24
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	6039      	str	r1, [r7, #0]
 8001420:	71fb      	strb	r3, [r7, #7]
    int length = strlen(value);
 8001422:	6838      	ldr	r0, [r7, #0]
 8001424:	f7fe ff2c 	bl	8000280 <strlen>
 8001428:	4603      	mov	r3, r0
 800142a:	613b      	str	r3, [r7, #16]
    int startIndex = -1;  // Index des ersten Leerzeichens
 800142c:	f04f 33ff 	mov.w	r3, #4294967295
 8001430:	61fb      	str	r3, [r7, #28]
    int endIndex = -1;    // Index des zweiten Leerzeichens
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < length; i++) {
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	e019      	b.n	8001472 <extractIntValue+0x5e>
        if (value[i] == ' ' || value[i] == '\r') {
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	4413      	add	r3, r2
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b20      	cmp	r3, #32
 8001448:	d005      	beq.n	8001456 <extractIntValue+0x42>
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	4413      	add	r3, r2
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b0d      	cmp	r3, #13
 8001454:	d10a      	bne.n	800146c <extractIntValue+0x58>
            if (startIndex == -1) {
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800145c:	d103      	bne.n	8001466 <extractIntValue+0x52>
                startIndex = i + 1;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	3301      	adds	r3, #1
 8001462:	61fb      	str	r3, [r7, #28]
 8001464:	e002      	b.n	800146c <extractIntValue+0x58>
            } else {
                endIndex = i;
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	61bb      	str	r3, [r7, #24]
                break;
 800146a:	e006      	b.n	800147a <extractIntValue+0x66>
    for (int i = 0; i < length; i++) {
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	3301      	adds	r3, #1
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	429a      	cmp	r2, r3
 8001478:	dbe1      	blt.n	800143e <extractIntValue+0x2a>
            }
        }
    }
    if (startIndex != -1 && endIndex != -1 && startIndex < endIndex) {
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001480:	d048      	beq.n	8001514 <extractIntValue+0x100>
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001488:	d044      	beq.n	8001514 <extractIntValue+0x100>
 800148a:	69fa      	ldr	r2, [r7, #28]
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	429a      	cmp	r2, r3
 8001490:	da40      	bge.n	8001514 <extractIntValue+0x100>
 8001492:	466b      	mov	r3, sp
 8001494:	461e      	mov	r6, r3
        char intStr[endIndex - startIndex + 1];
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	1c59      	adds	r1, r3, #1
 800149e:	1e4b      	subs	r3, r1, #1
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	460a      	mov	r2, r1
 80014a4:	2300      	movs	r3, #0
 80014a6:	4690      	mov	r8, r2
 80014a8:	4699      	mov	r9, r3
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014be:	460a      	mov	r2, r1
 80014c0:	2300      	movs	r3, #0
 80014c2:	4614      	mov	r4, r2
 80014c4:	461d      	mov	r5, r3
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	f04f 0300 	mov.w	r3, #0
 80014ce:	00eb      	lsls	r3, r5, #3
 80014d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014d4:	00e2      	lsls	r2, r4, #3
 80014d6:	460b      	mov	r3, r1
 80014d8:	3307      	adds	r3, #7
 80014da:	08db      	lsrs	r3, r3, #3
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	ebad 0d03 	sub.w	sp, sp, r3
 80014e2:	466b      	mov	r3, sp
 80014e4:	3300      	adds	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
        strncpy(intStr, value + startIndex, endIndex - startIndex);
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	18d1      	adds	r1, r2, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	461a      	mov	r2, r3
 80014f6:	68b8      	ldr	r0, [r7, #8]
 80014f8:	f006 fbcf 	bl	8007c9a <strncpy>
        intStr[endIndex - startIndex] = '\0';
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	2100      	movs	r1, #0
 8001506:	54d1      	strb	r1, [r2, r3]
        return atoi(intStr);
 8001508:	68b8      	ldr	r0, [r7, #8]
 800150a:	f004 fcfd 	bl	8005f08 <atoi>
 800150e:	4603      	mov	r3, r0
 8001510:	46b5      	mov	sp, r6
 8001512:	e000      	b.n	8001516 <extractIntValue+0x102>
    }
    return 0;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3724      	adds	r7, #36	; 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001520 <sendDiamExt_impl>:
#include <stdio.h>
#include <string.h>


// Implementierung der Interface methoden
void sendDiamExt_impl(UART_HandleTypeDef *huart,float value) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	ed87 0a00 	vstr	s0, [r7]
	uint8_t tag[] = "DIAMEXT ";
 800152c:	4a21      	ldr	r2, [pc, #132]	; (80015b4 <sendDiamExt_impl+0x94>)
 800152e:	f107 031c 	add.w	r3, r7, #28
 8001532:	ca07      	ldmia	r2, {r0, r1, r2}
 8001534:	c303      	stmia	r3!, {r0, r1}
 8001536:	701a      	strb	r2, [r3, #0]
	uint8_t diameter[10];
	uint8_t endTag[] = " /r/n";
 8001538:	4a1f      	ldr	r2, [pc, #124]	; (80015b8 <sendDiamExt_impl+0x98>)
 800153a:	f107 0308 	add.w	r3, r7, #8
 800153e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001542:	6018      	str	r0, [r3, #0]
 8001544:	3304      	adds	r3, #4
 8001546:	8019      	strh	r1, [r3, #0]

	sprintf((char *)diameter, "%.2f", value);
 8001548:	6838      	ldr	r0, [r7, #0]
 800154a:	f7ff f805 	bl	8000558 <__aeabi_f2d>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	f107 0010 	add.w	r0, r7, #16
 8001556:	4919      	ldr	r1, [pc, #100]	; (80015bc <sendDiamExt_impl+0x9c>)
 8001558:	f006 fb22 	bl	8007ba0 <siprintf>

	HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 800155c:	f107 031c 	add.w	r3, r7, #28
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe fe8d 	bl	8000280 <strlen>
 8001566:	4603      	mov	r3, r0
 8001568:	b29a      	uxth	r2, r3
 800156a:	f107 011c 	add.w	r1, r7, #28
 800156e:	230a      	movs	r3, #10
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f003 fc9e 	bl	8004eb2 <HAL_UART_Transmit>
   	HAL_UART_Transmit(huart, diameter, strlen((char*)diameter), 10);
 8001576:	f107 0310 	add.w	r3, r7, #16
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe fe80 	bl	8000280 <strlen>
 8001580:	4603      	mov	r3, r0
 8001582:	b29a      	uxth	r2, r3
 8001584:	f107 0110 	add.w	r1, r7, #16
 8001588:	230a      	movs	r3, #10
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f003 fc91 	bl	8004eb2 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 8001590:	f107 0308 	add.w	r3, r7, #8
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe fe73 	bl	8000280 <strlen>
 800159a:	4603      	mov	r3, r0
 800159c:	b29a      	uxth	r2, r3
 800159e:	f107 0108 	add.w	r1, r7, #8
 80015a2:	230a      	movs	r3, #10
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f003 fc84 	bl	8004eb2 <HAL_UART_Transmit>
}
 80015aa:	bf00      	nop
 80015ac:	3728      	adds	r7, #40	; 0x28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	0800a830 	.word	0x0800a830
 80015b8:	0800a83c 	.word	0x0800a83c
 80015bc:	0800a828 	.word	0x0800a828

080015c0 <sendDiamBack_impl>:
void sendDiamBack_impl(UART_HandleTypeDef *huart,float value) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	ed87 0a00 	vstr	s0, [r7]
	uint8_t tag[] = "DIAMBACK ";
 80015cc:	4a21      	ldr	r2, [pc, #132]	; (8001654 <sendDiamBack_impl+0x94>)
 80015ce:	f107 031c 	add.w	r3, r7, #28
 80015d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80015d4:	c303      	stmia	r3!, {r0, r1}
 80015d6:	801a      	strh	r2, [r3, #0]
	uint8_t diameter[10];
	uint8_t endTag[] = " /r/n";
 80015d8:	4a1f      	ldr	r2, [pc, #124]	; (8001658 <sendDiamBack_impl+0x98>)
 80015da:	f107 0308 	add.w	r3, r7, #8
 80015de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015e2:	6018      	str	r0, [r3, #0]
 80015e4:	3304      	adds	r3, #4
 80015e6:	8019      	strh	r1, [r3, #0]

	sprintf((char *)diameter, "%.2f", value);
 80015e8:	6838      	ldr	r0, [r7, #0]
 80015ea:	f7fe ffb5 	bl	8000558 <__aeabi_f2d>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	f107 0010 	add.w	r0, r7, #16
 80015f6:	4919      	ldr	r1, [pc, #100]	; (800165c <sendDiamBack_impl+0x9c>)
 80015f8:	f006 fad2 	bl	8007ba0 <siprintf>

	HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 80015fc:	f107 031c 	add.w	r3, r7, #28
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe fe3d 	bl	8000280 <strlen>
 8001606:	4603      	mov	r3, r0
 8001608:	b29a      	uxth	r2, r3
 800160a:	f107 011c 	add.w	r1, r7, #28
 800160e:	230a      	movs	r3, #10
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f003 fc4e 	bl	8004eb2 <HAL_UART_Transmit>
   	HAL_UART_Transmit(huart, diameter, strlen((char*)diameter), 10);
 8001616:	f107 0310 	add.w	r3, r7, #16
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe fe30 	bl	8000280 <strlen>
 8001620:	4603      	mov	r3, r0
 8001622:	b29a      	uxth	r2, r3
 8001624:	f107 0110 	add.w	r1, r7, #16
 8001628:	230a      	movs	r3, #10
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f003 fc41 	bl	8004eb2 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 8001630:	f107 0308 	add.w	r3, r7, #8
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe fe23 	bl	8000280 <strlen>
 800163a:	4603      	mov	r3, r0
 800163c:	b29a      	uxth	r2, r3
 800163e:	f107 0108 	add.w	r1, r7, #8
 8001642:	230a      	movs	r3, #10
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f003 fc34 	bl	8004eb2 <HAL_UART_Transmit>
}
 800164a:	bf00      	nop
 800164c:	3728      	adds	r7, #40	; 0x28
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	0800a844 	.word	0x0800a844
 8001658:	0800a83c 	.word	0x0800a83c
 800165c:	0800a828 	.word	0x0800a828

08001660 <sendState_impl>:

void sendState_impl(UART_HandleTypeDef *huart, State state) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	70fb      	strb	r3, [r7, #3]
    uint8_t tag[] = "STATE ";
 800166c:	4a22      	ldr	r2, [pc, #136]	; (80016f8 <sendState_impl+0x98>)
 800166e:	f107 0318 	add.w	r3, r7, #24
 8001672:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001676:	6018      	str	r0, [r3, #0]
 8001678:	3304      	adds	r3, #4
 800167a:	8019      	strh	r1, [r3, #0]
 800167c:	3302      	adds	r3, #2
 800167e:	0c0a      	lsrs	r2, r1, #16
 8001680:	701a      	strb	r2, [r3, #0]
    uint8_t stateStr[10];
    uint8_t endTag[] = "\r\n";
 8001682:	4a1e      	ldr	r2, [pc, #120]	; (80016fc <sendState_impl+0x9c>)
 8001684:	f107 0308 	add.w	r3, r7, #8
 8001688:	6812      	ldr	r2, [r2, #0]
 800168a:	4611      	mov	r1, r2
 800168c:	8019      	strh	r1, [r3, #0]
 800168e:	3302      	adds	r3, #2
 8001690:	0c12      	lsrs	r2, r2, #16
 8001692:	701a      	strb	r2, [r3, #0]

    sprintf((char *)stateStr, "%d", state);
 8001694:	78fa      	ldrb	r2, [r7, #3]
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	4919      	ldr	r1, [pc, #100]	; (8001700 <sendState_impl+0xa0>)
 800169c:	4618      	mov	r0, r3
 800169e:	f006 fa7f 	bl	8007ba0 <siprintf>

    HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 80016a2:	f107 0318 	add.w	r3, r7, #24
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe fdea 	bl	8000280 <strlen>
 80016ac:	4603      	mov	r3, r0
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	f107 0118 	add.w	r1, r7, #24
 80016b4:	230a      	movs	r3, #10
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f003 fbfb 	bl	8004eb2 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, stateStr, strlen((char*)stateStr), 10);
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe fddd 	bl	8000280 <strlen>
 80016c6:	4603      	mov	r3, r0
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	f107 010c 	add.w	r1, r7, #12
 80016ce:	230a      	movs	r3, #10
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f003 fbee 	bl	8004eb2 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 80016d6:	f107 0308 	add.w	r3, r7, #8
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe fdd0 	bl	8000280 <strlen>
 80016e0:	4603      	mov	r3, r0
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	f107 0108 	add.w	r1, r7, #8
 80016e8:	230a      	movs	r3, #10
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f003 fbe1 	bl	8004eb2 <HAL_UART_Transmit>
}
 80016f0:	bf00      	nop
 80016f2:	3720      	adds	r7, #32
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	0800a854 	.word	0x0800a854
 80016fc:	0800a85c 	.word	0x0800a85c
 8001700:	0800a850 	.word	0x0800a850

08001704 <sendSpeed_impl>:
void sendSpeed_impl(UART_HandleTypeDef *huart, float speed){
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	ed87 0a00 	vstr	s0, [r7]
    uint8_t tag[] = "SPEED ";
 8001710:	4a24      	ldr	r2, [pc, #144]	; (80017a4 <sendSpeed_impl+0xa0>)
 8001712:	f107 0318 	add.w	r3, r7, #24
 8001716:	e892 0003 	ldmia.w	r2, {r0, r1}
 800171a:	6018      	str	r0, [r3, #0]
 800171c:	3304      	adds	r3, #4
 800171e:	8019      	strh	r1, [r3, #0]
 8001720:	3302      	adds	r3, #2
 8001722:	0c0a      	lsrs	r2, r1, #16
 8001724:	701a      	strb	r2, [r3, #0]
    uint8_t value[10];
    uint8_t endTag[] = "\r\n";
 8001726:	4a20      	ldr	r2, [pc, #128]	; (80017a8 <sendSpeed_impl+0xa4>)
 8001728:	f107 0308 	add.w	r3, r7, #8
 800172c:	6812      	ldr	r2, [r2, #0]
 800172e:	4611      	mov	r1, r2
 8001730:	8019      	strh	r1, [r3, #0]
 8001732:	3302      	adds	r3, #2
 8001734:	0c12      	lsrs	r2, r2, #16
 8001736:	701a      	strb	r2, [r3, #0]

    sprintf((char *)value, "%.2f", speed);
 8001738:	6838      	ldr	r0, [r7, #0]
 800173a:	f7fe ff0d 	bl	8000558 <__aeabi_f2d>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	f107 000c 	add.w	r0, r7, #12
 8001746:	4919      	ldr	r1, [pc, #100]	; (80017ac <sendSpeed_impl+0xa8>)
 8001748:	f006 fa2a 	bl	8007ba0 <siprintf>

    HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 800174c:	f107 0318 	add.w	r3, r7, #24
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe fd95 	bl	8000280 <strlen>
 8001756:	4603      	mov	r3, r0
 8001758:	b29a      	uxth	r2, r3
 800175a:	f107 0118 	add.w	r1, r7, #24
 800175e:	230a      	movs	r3, #10
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f003 fba6 	bl	8004eb2 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, value, strlen((char*)value), 10);
 8001766:	f107 030c 	add.w	r3, r7, #12
 800176a:	4618      	mov	r0, r3
 800176c:	f7fe fd88 	bl	8000280 <strlen>
 8001770:	4603      	mov	r3, r0
 8001772:	b29a      	uxth	r2, r3
 8001774:	f107 010c 	add.w	r1, r7, #12
 8001778:	230a      	movs	r3, #10
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f003 fb99 	bl	8004eb2 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fd7b 	bl	8000280 <strlen>
 800178a:	4603      	mov	r3, r0
 800178c:	b29a      	uxth	r2, r3
 800178e:	f107 0108 	add.w	r1, r7, #8
 8001792:	230a      	movs	r3, #10
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f003 fb8c 	bl	8004eb2 <HAL_UART_Transmit>

}
 800179a:	bf00      	nop
 800179c:	3720      	adds	r7, #32
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	0800a860 	.word	0x0800a860
 80017a8:	0800a85c 	.word	0x0800a85c
 80017ac:	0800a828 	.word	0x0800a828

080017b0 <sendCPvalue_impl>:
void sendCPvalue_impl(UART_HandleTypeDef *huart, float cp){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	ed87 0a00 	vstr	s0, [r7]
    uint8_t tag[] = "CP ";
 80017bc:	4b1f      	ldr	r3, [pc, #124]	; (800183c <sendCPvalue_impl+0x8c>)
 80017be:	61fb      	str	r3, [r7, #28]
    uint8_t value[10];
    uint8_t endTag[] = "\r\n";
 80017c0:	4a1f      	ldr	r2, [pc, #124]	; (8001840 <sendCPvalue_impl+0x90>)
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	6812      	ldr	r2, [r2, #0]
 80017c8:	4611      	mov	r1, r2
 80017ca:	8019      	strh	r1, [r3, #0]
 80017cc:	3302      	adds	r3, #2
 80017ce:	0c12      	lsrs	r2, r2, #16
 80017d0:	701a      	strb	r2, [r3, #0]

    sprintf((char *)value, "%.2f", cp);
 80017d2:	6838      	ldr	r0, [r7, #0]
 80017d4:	f7fe fec0 	bl	8000558 <__aeabi_f2d>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	f107 0010 	add.w	r0, r7, #16
 80017e0:	4918      	ldr	r1, [pc, #96]	; (8001844 <sendCPvalue_impl+0x94>)
 80017e2:	f006 f9dd 	bl	8007ba0 <siprintf>

    HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 80017e6:	f107 031c 	add.w	r3, r7, #28
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe fd48 	bl	8000280 <strlen>
 80017f0:	4603      	mov	r3, r0
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	f107 011c 	add.w	r1, r7, #28
 80017f8:	230a      	movs	r3, #10
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f003 fb59 	bl	8004eb2 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, value, strlen((char*)value), 10);
 8001800:	f107 0310 	add.w	r3, r7, #16
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fd3b 	bl	8000280 <strlen>
 800180a:	4603      	mov	r3, r0
 800180c:	b29a      	uxth	r2, r3
 800180e:	f107 0110 	add.w	r1, r7, #16
 8001812:	230a      	movs	r3, #10
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f003 fb4c 	bl	8004eb2 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 800181a:	f107 030c 	add.w	r3, r7, #12
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fd2e 	bl	8000280 <strlen>
 8001824:	4603      	mov	r3, r0
 8001826:	b29a      	uxth	r2, r3
 8001828:	f107 010c 	add.w	r1, r7, #12
 800182c:	230a      	movs	r3, #10
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f003 fb3f 	bl	8004eb2 <HAL_UART_Transmit>
}
 8001834:	bf00      	nop
 8001836:	3720      	adds	r7, #32
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	00205043 	.word	0x00205043
 8001840:	0800a85c 	.word	0x0800a85c
 8001844:	0800a828 	.word	0x0800a828

08001848 <sendCIvalue_impl>:
void sendCIvalue_impl(UART_HandleTypeDef *huart, float ci){
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	ed87 0a00 	vstr	s0, [r7]
    uint8_t tag[] = "CI ";
 8001854:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <sendCIvalue_impl+0x8c>)
 8001856:	61fb      	str	r3, [r7, #28]
    uint8_t value[10];
    uint8_t endTag[] = "\r\n";
 8001858:	4a1f      	ldr	r2, [pc, #124]	; (80018d8 <sendCIvalue_impl+0x90>)
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	4611      	mov	r1, r2
 8001862:	8019      	strh	r1, [r3, #0]
 8001864:	3302      	adds	r3, #2
 8001866:	0c12      	lsrs	r2, r2, #16
 8001868:	701a      	strb	r2, [r3, #0]

    sprintf((char *)value, "%.2f", ci);
 800186a:	6838      	ldr	r0, [r7, #0]
 800186c:	f7fe fe74 	bl	8000558 <__aeabi_f2d>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	f107 0010 	add.w	r0, r7, #16
 8001878:	4918      	ldr	r1, [pc, #96]	; (80018dc <sendCIvalue_impl+0x94>)
 800187a:	f006 f991 	bl	8007ba0 <siprintf>

    HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 800187e:	f107 031c 	add.w	r3, r7, #28
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fcfc 	bl	8000280 <strlen>
 8001888:	4603      	mov	r3, r0
 800188a:	b29a      	uxth	r2, r3
 800188c:	f107 011c 	add.w	r1, r7, #28
 8001890:	230a      	movs	r3, #10
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f003 fb0d 	bl	8004eb2 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, value, strlen((char*)value), 10);
 8001898:	f107 0310 	add.w	r3, r7, #16
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe fcef 	bl	8000280 <strlen>
 80018a2:	4603      	mov	r3, r0
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	f107 0110 	add.w	r1, r7, #16
 80018aa:	230a      	movs	r3, #10
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f003 fb00 	bl	8004eb2 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fce2 	bl	8000280 <strlen>
 80018bc:	4603      	mov	r3, r0
 80018be:	b29a      	uxth	r2, r3
 80018c0:	f107 010c 	add.w	r1, r7, #12
 80018c4:	230a      	movs	r3, #10
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f003 faf3 	bl	8004eb2 <HAL_UART_Transmit>
}
 80018cc:	bf00      	nop
 80018ce:	3720      	adds	r7, #32
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	00204943 	.word	0x00204943
 80018d8:	0800a85c 	.word	0x0800a85c
 80018dc:	0800a828 	.word	0x0800a828

080018e0 <sendCDvalue_impl>:
void sendCDvalue_impl(UART_HandleTypeDef *huart, float cd){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	ed87 0a00 	vstr	s0, [r7]
    uint8_t tag[] = "CD ";
 80018ec:	4b1f      	ldr	r3, [pc, #124]	; (800196c <sendCDvalue_impl+0x8c>)
 80018ee:	61fb      	str	r3, [r7, #28]
    uint8_t value[10];
    uint8_t endTag[] = "\r\n";
 80018f0:	4a1f      	ldr	r2, [pc, #124]	; (8001970 <sendCDvalue_impl+0x90>)
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	6812      	ldr	r2, [r2, #0]
 80018f8:	4611      	mov	r1, r2
 80018fa:	8019      	strh	r1, [r3, #0]
 80018fc:	3302      	adds	r3, #2
 80018fe:	0c12      	lsrs	r2, r2, #16
 8001900:	701a      	strb	r2, [r3, #0]

    sprintf((char *)value, "%.2f", cd);
 8001902:	6838      	ldr	r0, [r7, #0]
 8001904:	f7fe fe28 	bl	8000558 <__aeabi_f2d>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	f107 0010 	add.w	r0, r7, #16
 8001910:	4918      	ldr	r1, [pc, #96]	; (8001974 <sendCDvalue_impl+0x94>)
 8001912:	f006 f945 	bl	8007ba0 <siprintf>

    HAL_UART_Transmit(huart, tag, strlen((char*)tag), 10);
 8001916:	f107 031c 	add.w	r3, r7, #28
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fcb0 	bl	8000280 <strlen>
 8001920:	4603      	mov	r3, r0
 8001922:	b29a      	uxth	r2, r3
 8001924:	f107 011c 	add.w	r1, r7, #28
 8001928:	230a      	movs	r3, #10
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f003 fac1 	bl	8004eb2 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, value, strlen((char*)value), 10);
 8001930:	f107 0310 	add.w	r3, r7, #16
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fca3 	bl	8000280 <strlen>
 800193a:	4603      	mov	r3, r0
 800193c:	b29a      	uxth	r2, r3
 800193e:	f107 0110 	add.w	r1, r7, #16
 8001942:	230a      	movs	r3, #10
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f003 fab4 	bl	8004eb2 <HAL_UART_Transmit>
    HAL_UART_Transmit(huart, endTag, strlen((char*)endTag), 10);
 800194a:	f107 030c 	add.w	r3, r7, #12
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fc96 	bl	8000280 <strlen>
 8001954:	4603      	mov	r3, r0
 8001956:	b29a      	uxth	r2, r3
 8001958:	f107 010c 	add.w	r1, r7, #12
 800195c:	230a      	movs	r3, #10
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f003 faa7 	bl	8004eb2 <HAL_UART_Transmit>
}
 8001964:	bf00      	nop
 8001966:	3720      	adds	r7, #32
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	00204443 	.word	0x00204443
 8001970:	0800a85c 	.word	0x0800a85c
 8001974:	0800a828 	.word	0x0800a828

08001978 <createPcSendHandler>:
PcSendHandler createPcSendHandler(uint32_t timeout) {
 8001978:	b4b0      	push	{r4, r5, r7}
 800197a:	b08b      	sub	sp, #44	; 0x2c
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
	PcSendHandler handler;
    handler.interface.sendDiamExt	= sendDiamExt_impl;
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <createPcSendHandler+0x48>)
 8001984:	60bb      	str	r3, [r7, #8]
    handler.interface.sendDiamBack	= sendDiamBack_impl;
 8001986:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <createPcSendHandler+0x4c>)
 8001988:	60fb      	str	r3, [r7, #12]
    handler.interface.sendState		= sendState_impl;
 800198a:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <createPcSendHandler+0x50>)
 800198c:	613b      	str	r3, [r7, #16]
    handler.interface.sendSpeed		= sendSpeed_impl;
 800198e:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <createPcSendHandler+0x54>)
 8001990:	617b      	str	r3, [r7, #20]
    handler.interface.sendCPvalue	= sendCPvalue_impl;
 8001992:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <createPcSendHandler+0x58>)
 8001994:	61bb      	str	r3, [r7, #24]
    handler.interface.sendCIvalue	= sendCIvalue_impl;
 8001996:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <createPcSendHandler+0x5c>)
 8001998:	61fb      	str	r3, [r7, #28]
    handler.interface.sendCDvalue	= sendCDvalue_impl;
 800199a:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <createPcSendHandler+0x60>)
 800199c:	623b      	str	r3, [r7, #32]

    handler.interface.timeout = timeout;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
    return handler;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	461d      	mov	r5, r3
 80019a6:	f107 0408 	add.w	r4, r7, #8
 80019aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019b2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	372c      	adds	r7, #44	; 0x2c
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bcb0      	pop	{r4, r5, r7}
 80019be:	4770      	bx	lr
 80019c0:	08001521 	.word	0x08001521
 80019c4:	080015c1 	.word	0x080015c1
 80019c8:	08001661 	.word	0x08001661
 80019cc:	08001705 	.word	0x08001705
 80019d0:	080017b1 	.word	0x080017b1
 80019d4:	08001849 	.word	0x08001849
 80019d8:	080018e1 	.word	0x080018e1

080019dc <createSensorReceiveHandler>:


// Konstruktor
SensorReceiveHandler createSensorReceiveHandler(Sensor* sensorExtruder,
												Sensor* sensorBack)
{
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b089      	sub	sp, #36	; 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
	SensorReceiveHandler handler;
    handler.sensorExtruder = sensorExtruder;
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	617b      	str	r3, [r7, #20]
    handler.sensorBack = sensorBack;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	61bb      	str	r3, [r7, #24]

    // Zuweisung der globalen Variable
    gHandler = handler;
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <createSensorReceiveHandler+0x44>)
 80019f2:	461c      	mov	r4, r3
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80019fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    handler.uartProcessor = createUartProcessor(sensor_interface_dictionary);
 8001a00:	4808      	ldr	r0, [pc, #32]	; (8001a24 <createSensorReceiveHandler+0x48>)
 8001a02:	f000 f98f 	bl	8001d24 <createUartProcessor>
 8001a06:	61f8      	str	r0, [r7, #28]
    return handler;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	461c      	mov	r4, r3
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	3724      	adds	r7, #36	; 0x24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd90      	pop	{r4, r7, pc}
 8001a20:	20000270 	.word	0x20000270
 8001a24:	20000058 	.word	0x20000058

08001a28 <handleDiamRecieved>:

// Methoden
void handleDiamRecieved(uint8_t uartNr, const char* value){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	71fb      	strb	r3, [r7, #7]
	uint8_t ext = gHandler.sensorExtruder->getUartPort(gHandler.sensorExtruder);
 8001a34:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <handleDiamRecieved+0x84>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	4a1c      	ldr	r2, [pc, #112]	; (8001aac <handleDiamRecieved+0x84>)
 8001a3c:	6812      	ldr	r2, [r2, #0]
 8001a3e:	4610      	mov	r0, r2
 8001a40:	4798      	blx	r3
 8001a42:	4603      	mov	r3, r0
 8001a44:	75fb      	strb	r3, [r7, #23]
	uint8_t back = gHandler.sensorBack->getUartPort(gHandler.sensorBack);
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <handleDiamRecieved+0x84>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	4a17      	ldr	r2, [pc, #92]	; (8001aac <handleDiamRecieved+0x84>)
 8001a4e:	6852      	ldr	r2, [r2, #4]
 8001a50:	4610      	mov	r0, r2
 8001a52:	4798      	blx	r3
 8001a54:	4603      	mov	r3, r0
 8001a56:	75bb      	strb	r3, [r7, #22]
	if(ext == uartNr){
 8001a58:	7dfa      	ldrb	r2, [r7, #23]
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d10e      	bne.n	8001a7e <handleDiamRecieved+0x56>
		float diam = getFloatFromMessage(value);
 8001a60:	6838      	ldr	r0, [r7, #0]
 8001a62:	f000 f825 	bl	8001ab0 <getFloatFromMessage>
 8001a66:	ed87 0a03 	vstr	s0, [r7, #12]
		gHandler.sensorExtruder->setDiameter(gHandler.sensorExtruder,diam);
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <handleDiamRecieved+0x84>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	4a0e      	ldr	r2, [pc, #56]	; (8001aac <handleDiamRecieved+0x84>)
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	ed97 0a03 	vldr	s0, [r7, #12]
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4798      	blx	r3
	}
	else if(back == uartNr){
		float diam = getFloatFromMessage(value);
		gHandler.sensorBack->setDiameter(gHandler.sensorBack,diam);
	}
}
 8001a7c:	e011      	b.n	8001aa2 <handleDiamRecieved+0x7a>
	else if(back == uartNr){
 8001a7e:	7dba      	ldrb	r2, [r7, #22]
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d10d      	bne.n	8001aa2 <handleDiamRecieved+0x7a>
		float diam = getFloatFromMessage(value);
 8001a86:	6838      	ldr	r0, [r7, #0]
 8001a88:	f000 f812 	bl	8001ab0 <getFloatFromMessage>
 8001a8c:	ed87 0a04 	vstr	s0, [r7, #16]
		gHandler.sensorBack->setDiameter(gHandler.sensorBack,diam);
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <handleDiamRecieved+0x84>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	4a05      	ldr	r2, [pc, #20]	; (8001aac <handleDiamRecieved+0x84>)
 8001a98:	6852      	ldr	r2, [r2, #4]
 8001a9a:	ed97 0a04 	vldr	s0, [r7, #16]
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	4798      	blx	r3
}
 8001aa2:	bf00      	nop
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000270 	.word	0x20000270

08001ab0 <getFloatFromMessage>:
float getFloatFromMessage(const char* value) {
 8001ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ab4:	b089      	sub	sp, #36	; 0x24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
    int length = strlen(value);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7fe fbe0 	bl	8000280 <strlen>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	613b      	str	r3, [r7, #16]
    int startIndex = -1;  // Index des ersten Leerzeichens
 8001ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac8:	61fb      	str	r3, [r7, #28]
    int endIndex = -1;    // Index des zweiten Leerzeichens
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ace:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < length; i++) {
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	e019      	b.n	8001b0a <getFloatFromMessage+0x5a>
        if (value[i] == ' ' || value[i] == '\r') {
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	4413      	add	r3, r2
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b20      	cmp	r3, #32
 8001ae0:	d005      	beq.n	8001aee <getFloatFromMessage+0x3e>
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b0d      	cmp	r3, #13
 8001aec:	d10a      	bne.n	8001b04 <getFloatFromMessage+0x54>
            if (startIndex == -1) {
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af4:	d103      	bne.n	8001afe <getFloatFromMessage+0x4e>
                startIndex = i + 1;
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	3301      	adds	r3, #1
 8001afa:	61fb      	str	r3, [r7, #28]
 8001afc:	e002      	b.n	8001b04 <getFloatFromMessage+0x54>
            } else {
                endIndex = i;
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	61bb      	str	r3, [r7, #24]
                break;
 8001b02:	e006      	b.n	8001b12 <getFloatFromMessage+0x62>
    for (int i = 0; i < length; i++) {
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3301      	adds	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	dbe1      	blt.n	8001ad6 <getFloatFromMessage+0x26>
            }
        }
    }
    if (startIndex != -1 && endIndex != -1 && startIndex < endIndex) {
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b18:	d04a      	beq.n	8001bb0 <getFloatFromMessage+0x100>
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b20:	d046      	beq.n	8001bb0 <getFloatFromMessage+0x100>
 8001b22:	69fa      	ldr	r2, [r7, #28]
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	da42      	bge.n	8001bb0 <getFloatFromMessage+0x100>
 8001b2a:	466b      	mov	r3, sp
 8001b2c:	461e      	mov	r6, r3
        char floatStr[endIndex - startIndex + 1];
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	1c59      	adds	r1, r3, #1
 8001b36:	1e4b      	subs	r3, r1, #1
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	460a      	mov	r2, r1
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	4690      	mov	r8, r2
 8001b40:	4699      	mov	r9, r3
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	f04f 0300 	mov.w	r3, #0
 8001b4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b56:	460a      	mov	r2, r1
 8001b58:	2300      	movs	r3, #0
 8001b5a:	4614      	mov	r4, r2
 8001b5c:	461d      	mov	r5, r3
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	00eb      	lsls	r3, r5, #3
 8001b68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b6c:	00e2      	lsls	r2, r4, #3
 8001b6e:	460b      	mov	r3, r1
 8001b70:	3307      	adds	r3, #7
 8001b72:	08db      	lsrs	r3, r3, #3
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	ebad 0d03 	sub.w	sp, sp, r3
 8001b7a:	466b      	mov	r3, sp
 8001b7c:	3300      	adds	r3, #0
 8001b7e:	60bb      	str	r3, [r7, #8]
        strncpy(floatStr, value + startIndex, endIndex - startIndex);
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	18d1      	adds	r1, r2, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	68b8      	ldr	r0, [r7, #8]
 8001b90:	f006 f883 	bl	8007c9a <strncpy>
        floatStr[endIndex - startIndex] = '\0';
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	54d1      	strb	r1, [r2, r3]
        return strtof(floatStr, NULL);
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	68b8      	ldr	r0, [r7, #8]
 8001ba4:	f004 ffc6 	bl	8006b34 <strtof>
 8001ba8:	eef0 7a40 	vmov.f32	s15, s0
 8001bac:	46b5      	mov	sp, r6
 8001bae:	e001      	b.n	8001bb4 <getFloatFromMessage+0x104>
    }
    return 0.00;
 8001bb0:	eddf 7a03 	vldr	s15, [pc, #12]	; 8001bc0 <getFloatFromMessage+0x110>
}
 8001bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb8:	3724      	adds	r7, #36	; 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bc0:	00000000 	.word	0x00000000

08001bc4 <processSensorInterfaceMessage>:


void processSensorInterfaceMessage(uint8_t uartNr,SensorReceiveHandler* handler,uint8_t* receivedData, uint8_t receivedDataIndex){
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	73fb      	strb	r3, [r7, #15]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	73bb      	strb	r3, [r7, #14]
	processCommand(uartNr, &(handler->uartProcessor), receivedData, receivedDataIndex);
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	f103 0108 	add.w	r1, r3, #8
 8001bde:	7bbb      	ldrb	r3, [r7, #14]
 8001be0:	7bf8      	ldrb	r0, [r7, #15]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	f000 f8dc 	bl	8001da0 <processCommand>
}
 8001be8:	bf00      	nop
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <getReceivedData>:


#include <Kommunikation/uart_data.h>

// Getter-Methoden
const uint8_t* getReceivedData(const UartData* uartData) {
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
    return uartData->receivedData;
 8001bf8:	687b      	ldr	r3, [r7, #4]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <getDataIndex>:

int getDataIndex(const UartData* uartData) {
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
    return uartData->dataIndex;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <getMessageComplete>:

int getMessageComplete(const UartData* uartData) {
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
    return uartData->messageComplete;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <setReceivedData>:

// Setter-Methoden
void setReceivedData(UartData* uartData, const uint8_t* receivedData) {
 8001c36:	b480      	push	{r7}
 8001c38:	b085      	sub	sp, #20
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
    // Kopiere die Daten
    for (int i = 0; i < 64; i++) {
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	e00b      	b.n	8001c5e <setReceivedData+0x28>
        uartData->receivedData[i] = receivedData[i];
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	7819      	ldrb	r1, [r3, #0]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4413      	add	r3, r2
 8001c54:	460a      	mov	r2, r1
 8001c56:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 64; i++) {
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2b3f      	cmp	r3, #63	; 0x3f
 8001c62:	ddf0      	ble.n	8001c46 <setReceivedData+0x10>
    }
}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <setDataIndex>:

void setDataIndex(UartData* uartData, int dataIndex) {
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
    uartData->dataIndex = dataIndex;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <setMessageComplete>:

void setMessageComplete(UartData* uartData, int messageComplete) {
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	6039      	str	r1, [r7, #0]
    uartData->messageComplete = messageComplete;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <createUartDataObject>:

// Konstruktor
UartDataObject createUartDataObject() {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b09c      	sub	sp, #112	; 0x70
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
    UartDataObject uartDataObject;
    uartDataObject.getReceivedData = &getReceivedData;
 8001cb4:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <createUartDataObject+0x60>)
 8001cb6:	657b      	str	r3, [r7, #84]	; 0x54
    uartDataObject.getDataIndex = &getDataIndex;
 8001cb8:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <createUartDataObject+0x64>)
 8001cba:	65bb      	str	r3, [r7, #88]	; 0x58
    uartDataObject.getMessageComplete = &getMessageComplete;
 8001cbc:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <createUartDataObject+0x68>)
 8001cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
    uartDataObject.setReceivedData = &setReceivedData;
 8001cc0:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <createUartDataObject+0x6c>)
 8001cc2:	663b      	str	r3, [r7, #96]	; 0x60
    uartDataObject.setDataIndex = &setDataIndex;
 8001cc4:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <createUartDataObject+0x70>)
 8001cc6:	667b      	str	r3, [r7, #100]	; 0x64
    uartDataObject.setMessageComplete = &setMessageComplete;
 8001cc8:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <createUartDataObject+0x74>)
 8001cca:	66bb      	str	r3, [r7, #104]	; 0x68

    // Initialisiere die Daten
    for (int i = 0; i < 64; i++) {
 8001ccc:	2300      	movs	r3, #0
 8001cce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001cd0:	e008      	b.n	8001ce4 <createUartDataObject+0x38>
        uartDataObject.data.receivedData[i] = 0;
 8001cd2:	f107 020c 	add.w	r2, r7, #12
 8001cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cd8:	4413      	add	r3, r2
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 64; i++) {
 8001cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ce6:	2b3f      	cmp	r3, #63	; 0x3f
 8001ce8:	ddf3      	ble.n	8001cd2 <createUartDataObject+0x26>
    }
    uartDataObject.data.dataIndex = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	64fb      	str	r3, [r7, #76]	; 0x4c
    uartDataObject.data.messageComplete = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	653b      	str	r3, [r7, #80]	; 0x50

    return uartDataObject;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f107 030c 	add.w	r3, r7, #12
 8001cfa:	2260      	movs	r2, #96	; 0x60
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f006 f856 	bl	8007dae <memcpy>
}
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	3770      	adds	r7, #112	; 0x70
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	08001bf1 	.word	0x08001bf1
 8001d10:	08001c07 	.word	0x08001c07
 8001d14:	08001c1f 	.word	0x08001c1f
 8001d18:	08001c37 	.word	0x08001c37
 8001d1c:	08001c73 	.word	0x08001c73
 8001d20:	08001c8f 	.word	0x08001c8f

08001d24 <createUartProcessor>:
#include <string.h>



// Funktion zur Initialisierung des UART-Prozessors
UartProcessor createUartProcessor(CommandEntry* dictionary) {
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
    UartProcessor uartProcessor;
    uartProcessor.commandDictionary = dictionary;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	60fb      	str	r3, [r7, #12]
    return uartProcessor;
 8001d30:	68fb      	ldr	r3, [r7, #12]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <strncasecmp>:

// Case-insensitive String-Vergleich
int strnicmp(const char *s1, const char *s2, size_t n) {
 8001d3e:	b590      	push	{r4, r7, lr}
 8001d40:	b085      	sub	sp, #20
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
    while (*s1 && *s2 && n > 0) {
 8001d4a:	e019      	b.n	8001d80 <strncasecmp+0x42>
        if (tolower(*s1) != tolower(*s2))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f004 ffe3 	bl	8006d1c <tolower>
 8001d56:	4604      	mov	r4, r0
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f004 ffdd 	bl	8006d1c <tolower>
 8001d62:	4603      	mov	r3, r0
 8001d64:	429c      	cmp	r4, r3
 8001d66:	d002      	beq.n	8001d6e <strncasecmp+0x30>
            return -1;
 8001d68:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6c:	e014      	b.n	8001d98 <strncasecmp+0x5a>
        s1++;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	3301      	adds	r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
        s2++;
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	3301      	adds	r3, #1
 8001d78:	60bb      	str	r3, [r7, #8]
        n--;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	607b      	str	r3, [r7, #4]
    while (*s1 && *s2 && n > 0) {
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d006      	beq.n	8001d96 <strncasecmp+0x58>
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <strncasecmp+0x58>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1da      	bne.n	8001d4c <strncasecmp+0xe>
    }
    return 0;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd90      	pop	{r4, r7, pc}

08001da0 <processCommand>:

void processCommand(uint8_t uartNr, UartProcessor* uartProcessor,uint8_t* receivedData,uint8_t receivedDataIndex) {
 8001da0:	b590      	push	{r4, r7, lr}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
 8001daa:	461a      	mov	r2, r3
 8001dac:	4603      	mov	r3, r0
 8001dae:	73fb      	strb	r3, [r7, #15]
 8001db0:	4613      	mov	r3, r2
 8001db2:	73bb      	strb	r3, [r7, #14]
    for (int i = 0; uartProcessor->commandDictionary[i].command != NULL; ++i) {
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	e025      	b.n	8001e06 <processCommand+0x66>
    	if (strnicmp((char*)receivedData, uartProcessor->commandDictionary[i].command, strlen(uartProcessor->commandDictionary[i].command)) == 0) {
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	681c      	ldr	r4, [r3, #0]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4413      	add	r3, r2
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe fa54 	bl	8000280 <strlen>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4621      	mov	r1, r4
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff ffad 	bl	8001d3e <strncasecmp>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10a      	bne.n	8001e00 <processCommand+0x60>
            // Rufe den entsprechenden Handler auf
    		uartProcessor->commandDictionary[i].functionPointer(uartNr, (char*)receivedData);
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4413      	add	r3, r2
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4798      	blx	r3
            return;
 8001dfe:	e00a      	b.n	8001e16 <processCommand+0x76>
    for (int i = 0; uartProcessor->commandDictionary[i].command != NULL; ++i) {
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	3301      	adds	r3, #1
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4413      	add	r3, r2
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1d1      	bne.n	8001dba <processCommand+0x1a>
        }
    }
}
 8001e16:	371c      	adds	r7, #28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd90      	pop	{r4, r7, pc}

08001e1c <changeState>:
 */

#include <Management/global_state_machine.h>

// Change the state of the State Machine
static void changeState(StateMachine *machine, State newState) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	70fb      	strb	r3, [r7, #3]
    switch (newState) {
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d00f      	beq.n	8001e4e <changeState+0x32>
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	dc0f      	bgt.n	8001e52 <changeState+0x36>
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d002      	beq.n	8001e3c <changeState+0x20>
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d00d      	beq.n	8001e56 <changeState+0x3a>
        case STATE_AUTOMATIC_MODE:
            // TODO: Logik für Regelung implementieren
            break;
        default:
            // Handle unknown state
            break;
 8001e3a:	e00a      	b.n	8001e52 <changeState+0x36>
            machine->info.motor->setSpeed(machine->info.motor, 0);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6852      	ldr	r2, [r2, #4]
 8001e46:	2100      	movs	r1, #0
 8001e48:	4610      	mov	r0, r2
 8001e4a:	4798      	blx	r3
            break;
 8001e4c:	e004      	b.n	8001e58 <changeState+0x3c>
            break;
 8001e4e:	bf00      	nop
 8001e50:	e002      	b.n	8001e58 <changeState+0x3c>
            break;
 8001e52:	bf00      	nop
 8001e54:	e000      	b.n	8001e58 <changeState+0x3c>
            break;
 8001e56:	bf00      	nop
    }
    machine->info.currentState = newState;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	78fa      	ldrb	r2, [r7, #3]
 8001e5c:	701a      	strb	r2, [r3, #0]
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <getState>:
// Get the current state of the State Machine
static State getState(const StateMachine *machine) {
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
    return machine->info.currentState;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	781b      	ldrb	r3, [r3, #0]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <initStateMachine>:

// Initialization function for the State Machine
StateMachine initStateMachine(Motor* motor) {
 8001e80:	b4b0      	push	{r4, r5, r7}
 8001e82:	b089      	sub	sp, #36	; 0x24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
    StateMachine machine;

    machine.info.motor = motor;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	613b      	str	r3, [r7, #16]

    machine.changeState = changeState;
 8001e8e:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <initStateMachine+0x34>)
 8001e90:	61bb      	str	r3, [r7, #24]
    machine.getState = getState;
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <initStateMachine+0x38>)
 8001e94:	61fb      	str	r3, [r7, #28]

    // Set initial state and initialize motor
    machine.info.currentState = STATE_IDLE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	733b      	strb	r3, [r7, #12]
    return machine;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	461d      	mov	r5, r3
 8001e9e:	f107 040c 	add.w	r4, r7, #12
 8001ea2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ea4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ea6:	6823      	ldr	r3, [r4, #0]
 8001ea8:	602b      	str	r3, [r5, #0]
}
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	3724      	adds	r7, #36	; 0x24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bcb0      	pop	{r4, r5, r7}
 8001eb2:	4770      	bx	lr
 8001eb4:	08001e1d 	.word	0x08001e1d
 8001eb8:	08001e67 	.word	0x08001e67

08001ebc <set_kp>:
 *  Created on: Jan 3, 2024
 *      Author: Daniel Alf
 */
#include "Regelung/pid_controller.h"

void set_kp(PIDController *pid, float kp) {
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	ed87 0a00 	vstr	s0, [r7]
    pid->data.kp = kp;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	601a      	str	r2, [r3, #0]
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <get_kp>:

float get_kp(const PIDController *pid) {
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
    return pid->data.kp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	ee07 3a90 	vmov	s15, r3
}
 8001eea:	eeb0 0a67 	vmov.f32	s0, s15
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <set_ki>:

void set_ki(PIDController *pid, float ki) {
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	ed87 0a00 	vstr	s0, [r7]
	pid->data.ki = ki;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	605a      	str	r2, [r3, #4]
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <get_ki>:

float get_ki(const PIDController *pid) {
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
    return pid->data.ki;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	ee07 3a90 	vmov	s15, r3
}
 8001f26:	eeb0 0a67 	vmov.f32	s0, s15
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <set_kd>:

void set_kd(PIDController *pid, float kd) {
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	ed87 0a00 	vstr	s0, [r7]
	pid->data.kd = kd;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	609a      	str	r2, [r3, #8]
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <get_kd>:

float get_kd(const PIDController *pid) {
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
    return pid->data.kd;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	ee07 3a90 	vmov	s15, r3
}
 8001f62:	eeb0 0a67 	vmov.f32	s0, s15
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <pid_init>:

PIDController pid_init(float kp, float ki, float kd) {
 8001f70:	b4b0      	push	{r4, r5, r7}
 8001f72:	b093      	sub	sp, #76	; 0x4c
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	ed87 0a02 	vstr	s0, [r7, #8]
 8001f7c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001f80:	ed87 1a00 	vstr	s2, [r7]
    PIDController pidController;
    pidController.data.kp = kp;
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	617b      	str	r3, [r7, #20]
    pidController.data.ki = ki;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	61bb      	str	r3, [r7, #24]
    pidController.data.kd = kd;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	61fb      	str	r3, [r7, #28]
    pidController.data.setpoint = 0.0;
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	623b      	str	r3, [r7, #32]
    pidController.data.last_error = 0.0;
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
    pidController.data.integral = 0.0;
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	62bb      	str	r3, [r7, #40]	; 0x28

    //Initialisierung der getter FUnktionen
    pidController.get_kp = get_kp;
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <pid_init+0x6c>)
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pidController.get_ki = get_ki;
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <pid_init+0x70>)
 8001fa8:	633b      	str	r3, [r7, #48]	; 0x30
    pidController.get_kd = get_kd;
 8001faa:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <pid_init+0x74>)
 8001fac:	637b      	str	r3, [r7, #52]	; 0x34

    //Initialisierung der setter Funktionen
    pidController.set_kp = set_kp;
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <pid_init+0x78>)
 8001fb0:	63bb      	str	r3, [r7, #56]	; 0x38
    pidController.set_ki = set_ki;
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <pid_init+0x7c>)
 8001fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    pidController.set_kd = set_kd;
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <pid_init+0x80>)
 8001fb8:	643b      	str	r3, [r7, #64]	; 0x40

    return pidController;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	461d      	mov	r5, r3
 8001fbe:	f107 0414 	add.w	r4, r7, #20
 8001fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fce:	6823      	ldr	r3, [r4, #0]
 8001fd0:	602b      	str	r3, [r5, #0]
}
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	374c      	adds	r7, #76	; 0x4c
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bcb0      	pop	{r4, r5, r7}
 8001fda:	4770      	bx	lr
 8001fdc:	08001edb 	.word	0x08001edb
 8001fe0:	08001f17 	.word	0x08001f17
 8001fe4:	08001f53 	.word	0x08001f53
 8001fe8:	08001ebd 	.word	0x08001ebd
 8001fec:	08001ef9 	.word	0x08001ef9
 8001ff0:	08001f35 	.word	0x08001f35

08001ff4 <getSpeed>:
 */

#include <SensorActuators/motor.h>
#include "stm32f4xx_hal.h"
// Implementierung der Getter-Methode für die Geschwindigkeit des Motors
int getSpeed(const Motor *motor) {
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
    return motor->info.speed;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <setSpeed>:

// Implementierung der Setter-Methode für die Geschwindigkeit des Motors
void setSpeed(Motor *motor, int speed) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
	if(speed <= 0){
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	dc09      	bgt.n	8002030 <setSpeed+0x24>
		HAL_TIM_PWM_Stop(motor->info.timer, 0);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2100      	movs	r1, #0
 8002022:	4618      	mov	r0, r3
 8002024:	f002 f97e 	bl	8004324 <HAL_TIM_PWM_Stop>
	    motor->info.speed = 0;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
		return;
 800202e:	e01e      	b.n	800206e <setSpeed+0x62>
	}

	if(speed > 100){
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	2b64      	cmp	r3, #100	; 0x64
 8002034:	dc1a      	bgt.n	800206c <setSpeed+0x60>
		return;
	}
    motor->info.speed = speed;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	601a      	str	r2, [r3, #0]
	  // Geschwindigkeit in Frequenz umrechnen
	int frequency = (speed * 3200) / 60;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8002042:	fb02 f303 	mul.w	r3, r2, r3
 8002046:	4a0b      	ldr	r2, [pc, #44]	; (8002074 <setSpeed+0x68>)
 8002048:	fb82 1203 	smull	r1, r2, r2, r3
 800204c:	441a      	add	r2, r3
 800204e:	1152      	asrs	r2, r2, #5
 8002050:	17db      	asrs	r3, r3, #31
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	60fb      	str	r3, [r7, #12]

	      // PWM-Signal generieren
	generatePWM(motor,frequency);
 8002056:	68f9      	ldr	r1, [r7, #12]
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f80d 	bl	8002078 <generatePWM>
	HAL_TIM_PWM_Start(motor->info.timer, 0);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2100      	movs	r1, #0
 8002064:	4618      	mov	r0, r3
 8002066:	f002 f8ad 	bl	80041c4 <HAL_TIM_PWM_Start>
 800206a:	e000      	b.n	800206e <setSpeed+0x62>
		return;
 800206c:	bf00      	nop

}
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	88888889 	.word	0x88888889

08002078 <generatePWM>:

void generatePWM(Motor *motor, int frequency) {
 8002078:	b580      	push	{r7, lr}
 800207a:	b090      	sub	sp, #64	; 0x40
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
	  uint32_t period = (HAL_RCC_GetHCLKFreq() / ((motor->info.timer->Init.Prescaler + 1)* frequency)) - 1;
 8002082:	f001 ffcd 	bl	8004020 <HAL_RCC_GetHCLKFreq>
 8002086:	4601      	mov	r1, r0
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	3301      	adds	r3, #1
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	fb02 f303 	mul.w	r3, r2, r3
 8002096:	fbb1 f3f3 	udiv	r3, r1, r3
 800209a:	3b01      	subs	r3, #1
 800209c:	63fb      	str	r3, [r7, #60]	; 0x3c

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800209e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80020b6:	f107 0308 	add.w	r3, r7, #8
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	605a      	str	r2, [r3, #4]
 80020c0:	609a      	str	r2, [r3, #8]
 80020c2:	60da      	str	r2, [r3, #12]
 80020c4:	611a      	str	r2, [r3, #16]
 80020c6:	615a      	str	r2, [r3, #20]
 80020c8:	619a      	str	r2, [r3, #24]

	  motor->info.timer->Init.Period = period; //26250-1
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020d0:	60da      	str	r2, [r3, #12]
	  HAL_TIM_Base_Init(motor->info.timer);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f001 ffd6 	bl	8004088 <HAL_TIM_Base_Init>
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  HAL_TIM_ConfigClockSource(motor->info.timer, &sClockSourceConfig);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f002 fa3f 	bl	8004570 <HAL_TIM_ConfigClockSource>
	  HAL_TIM_PWM_Init(motor->info.timer);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f002 f815 	bl	8004126 <HAL_TIM_PWM_Init>
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020fc:	2300      	movs	r3, #0
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_TIMEx_MasterConfigSynchronization(motor->info.timer, &sMasterConfig);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800210c:	4611      	mov	r1, r2
 800210e:	4618      	mov	r0, r3
 8002110:	f002 fdc2 	bl	8004c98 <HAL_TIMEx_MasterConfigSynchronization>
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002114:	2360      	movs	r3, #96	; 0x60
 8002116:	60bb      	str	r3, [r7, #8]
	  sConfigOC.Pulse = motor->info.timer->Init.Period / 2; //13125-1
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	085b      	lsrs	r3, r3, #1
 8002120:	60fb      	str	r3, [r7, #12]
	  HAL_TIM_PWM_ConfigChannel(motor->info.timer, &sConfigOC, TIM_CHANNEL_1);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f107 0108 	add.w	r1, r7, #8
 800212a:	2200      	movs	r2, #0
 800212c:	4618      	mov	r0, r3
 800212e:	f002 f95d 	bl	80043ec <HAL_TIM_PWM_ConfigChannel>
	  HAL_TIM_MspPostInit(motor->info.timer);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	4618      	mov	r0, r3
 8002138:	f000 fce6 	bl	8002b08 <HAL_TIM_MspPostInit>


}
 800213c:	bf00      	nop
 800213e:	3740      	adds	r7, #64	; 0x40
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <initMotor>:

// Implementierung des Konstruktors für den Motor
Motor initMotor(TIM_HandleTypeDef *timer) {
 8002144:	b490      	push	{r4, r7}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
    Motor newMotor;
    newMotor.info.speed = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	60bb      	str	r3, [r7, #8]
    newMotor.info.timer = timer;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	60fb      	str	r3, [r7, #12]
    newMotor.getSpeed = &getSpeed;
 8002156:	4b08      	ldr	r3, [pc, #32]	; (8002178 <initMotor+0x34>)
 8002158:	613b      	str	r3, [r7, #16]
    newMotor.setSpeed = &setSpeed;
 800215a:	4b08      	ldr	r3, [pc, #32]	; (800217c <initMotor+0x38>)
 800215c:	617b      	str	r3, [r7, #20]
    return newMotor;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	461c      	mov	r4, r3
 8002162:	f107 0308 	add.w	r3, r7, #8
 8002166:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002168:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bc90      	pop	{r4, r7}
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	08001ff5 	.word	0x08001ff5
 800217c:	0800200d 	.word	0x0800200d

08002180 <getDiameter>:
#include <stdlib.h>
#include <stdint.h>
#include <SensorActuators/sensor.h>

// Getter-Methoden
float getDiameter(const Sensor* sensor) {
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
    return sensor->info.diameter;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	ee07 3a90 	vmov	s15, r3
}
 8002190:	eeb0 0a67 	vmov.f32	s0, s15
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <getUartPort>:
char getPosition(const Sensor* sensor) {
	return sensor->info.position;
}
uint8_t getUartPort(const Sensor* sensor) {
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
	return sensor->info.uartPort;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	795b      	ldrb	r3, [r3, #5]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <setDiameter>:

// Setter-Methoden
void setDiameter(Sensor* sensor, float diameter) {
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	ed87 0a00 	vstr	s0, [r7]
    sensor->info.diameter = diameter;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	601a      	str	r2, [r3, #0]
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <initSensor>:
}
void setUartPort(Sensor* sensor, uint8_t port){
	sensor->info.uartPort = port;
}
// Konstruktor
Sensor initSensor(float diameter, uint8_t port) {
 80021d4:	b4b0      	push	{r4, r5, r7}
 80021d6:	b08d      	sub	sp, #52	; 0x34
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	ed87 0a02 	vstr	s0, [r7, #8]
 80021e0:	460b      	mov	r3, r1
 80021e2:	71fb      	strb	r3, [r7, #7]
    Sensor sensor;
    sensor.info.diameter = diameter;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	613b      	str	r3, [r7, #16]
    sensor.info.uartPort = port;
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	757b      	strb	r3, [r7, #21]

    // Initialisiere die Getter-Funktionen
    sensor.getDiameter = getDiameter;
 80021ec:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <initSensor+0x44>)
 80021ee:	61bb      	str	r3, [r7, #24]
    sensor.getUartPort = getUartPort;
 80021f0:	4b0a      	ldr	r3, [pc, #40]	; (800221c <initSensor+0x48>)
 80021f2:	623b      	str	r3, [r7, #32]

    // Initialisiere die Setter-Funktionen
    sensor.setDiameter = setDiameter;
 80021f4:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <initSensor+0x4c>)
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24

    return sensor;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	461d      	mov	r5, r3
 80021fc:	f107 0410 	add.w	r4, r7, #16
 8002200:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002202:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002204:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002208:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	3734      	adds	r7, #52	; 0x34
 8002210:	46bd      	mov	sp, r7
 8002212:	bcb0      	pop	{r4, r5, r7}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	08002181 	.word	0x08002181
 800221c:	0800219f 	.word	0x0800219f
 8002220:	080021b7 	.word	0x080021b7

08002224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002224:	b5b0      	push	{r4, r5, r7, lr}
 8002226:	b0b0      	sub	sp, #192	; 0xc0
 8002228:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800222a:	f000 fee1 	bl	8002ff0 <HAL_Init>

  /* USER CODE BEGIN Init */
  sensorExtruder = initSensor(1.57, 2);
 800222e:	4c85      	ldr	r4, [pc, #532]	; (8002444 <main+0x220>)
 8002230:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002234:	2102      	movs	r1, #2
 8002236:	ed9f 0a84 	vldr	s0, [pc, #528]	; 8002448 <main+0x224>
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff ffca 	bl	80021d4 <initSensor>
 8002240:	4625      	mov	r5, r4
 8002242:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8002246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800224a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800224e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  sensorBack 	 = initSensor(2.56, 6);
 8002252:	4c7e      	ldr	r4, [pc, #504]	; (800244c <main+0x228>)
 8002254:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002258:	2106      	movs	r1, #6
 800225a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8002450 <main+0x22c>
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff ffb8 	bl	80021d4 <initSensor>
 8002264:	4625      	mov	r5, r4
 8002266:	f107 0498 	add.w	r4, r7, #152	; 0x98
 800226a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800226c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800226e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002272:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  motor 		 = initMotor(&htim1);
 8002276:	4c77      	ldr	r4, [pc, #476]	; (8002454 <main+0x230>)
 8002278:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800227c:	4976      	ldr	r1, [pc, #472]	; (8002458 <main+0x234>)
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff ff60 	bl	8002144 <initMotor>
 8002284:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002288:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800228a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800228e:	f000 f8fd 	bl	800248c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002292:	f000 fadf 	bl	8002854 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002296:	f000 fa89 	bl	80027ac <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800229a:	f000 fa03 	bl	80026a4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800229e:	f000 fa5b 	bl	8002758 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80022a2:	f000 faad 	bl	8002800 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80022a6:	f000 f95b 	bl	8002560 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, 0);
 80022aa:	2100      	movs	r1, #0
 80022ac:	486a      	ldr	r0, [pc, #424]	; (8002458 <main+0x234>)
 80022ae:	f001 ff89 	bl	80041c4 <HAL_TIM_PWM_Start>
  stateMachine = initStateMachine(&motor);
 80022b2:	4c6a      	ldr	r4, [pc, #424]	; (800245c <main+0x238>)
 80022b4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80022b8:	4966      	ldr	r1, [pc, #408]	; (8002454 <main+0x230>)
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff fde0 	bl	8001e80 <initStateMachine>
 80022c0:	4625      	mov	r5, r4
 80022c2:	f107 0498 	add.w	r4, r7, #152	; 0x98
 80022c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ca:	6823      	ldr	r3, [r4, #0]
 80022cc:	602b      	str	r3, [r5, #0]
  pidController = pid_init(1.0, 0.0,0.0);
 80022ce:	4c64      	ldr	r4, [pc, #400]	; (8002460 <main+0x23c>)
 80022d0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80022d4:	ed9f 1a63 	vldr	s2, [pc, #396]	; 8002464 <main+0x240>
 80022d8:	eddf 0a62 	vldr	s1, [pc, #392]	; 8002464 <main+0x240>
 80022dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fe45 	bl	8001f70 <pid_init>
 80022e6:	4625      	mov	r5, r4
 80022e8:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80022ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f8:	6823      	ldr	r3, [r4, #0]
 80022fa:	602b      	str	r3, [r5, #0]
  uartDataPc 		     = createUartDataObject();
 80022fc:	4c5a      	ldr	r4, [pc, #360]	; (8002468 <main+0x244>)
 80022fe:	463b      	mov	r3, r7
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fcd3 	bl	8001cac <createUartDataObject>
 8002306:	4620      	mov	r0, r4
 8002308:	463b      	mov	r3, r7
 800230a:	2260      	movs	r2, #96	; 0x60
 800230c:	4619      	mov	r1, r3
 800230e:	f005 fd4e 	bl	8007dae <memcpy>
  uartDataSensorExtruder = createUartDataObject();
 8002312:	4c56      	ldr	r4, [pc, #344]	; (800246c <main+0x248>)
 8002314:	463b      	mov	r3, r7
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fcc8 	bl	8001cac <createUartDataObject>
 800231c:	4620      	mov	r0, r4
 800231e:	463b      	mov	r3, r7
 8002320:	2260      	movs	r2, #96	; 0x60
 8002322:	4619      	mov	r1, r3
 8002324:	f005 fd43 	bl	8007dae <memcpy>
  uartDataSensorBack	 = createUartDataObject();
 8002328:	4c51      	ldr	r4, [pc, #324]	; (8002470 <main+0x24c>)
 800232a:	463b      	mov	r3, r7
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff fcbd 	bl	8001cac <createUartDataObject>
 8002332:	4620      	mov	r0, r4
 8002334:	463b      	mov	r3, r7
 8002336:	2260      	movs	r2, #96	; 0x60
 8002338:	4619      	mov	r1, r3
 800233a:	f005 fd38 	bl	8007dae <memcpy>
  pcSender 		= createPcSendHandler(10);
 800233e:	4c4d      	ldr	r4, [pc, #308]	; (8002474 <main+0x250>)
 8002340:	463b      	mov	r3, r7
 8002342:	210a      	movs	r1, #10
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fb17 	bl	8001978 <createPcSendHandler>
 800234a:	4625      	mov	r5, r4
 800234c:	463c      	mov	r4, r7
 800234e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002350:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002352:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002356:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  pcReciever 	= createPcReceiveHandler(&stateMachine,&pidController, &motor, &pcSender, &huart2);
 800235a:	4c47      	ldr	r4, [pc, #284]	; (8002478 <main+0x254>)
 800235c:	4638      	mov	r0, r7
 800235e:	4b47      	ldr	r3, [pc, #284]	; (800247c <main+0x258>)
 8002360:	9301      	str	r3, [sp, #4]
 8002362:	4b44      	ldr	r3, [pc, #272]	; (8002474 <main+0x250>)
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	4b3b      	ldr	r3, [pc, #236]	; (8002454 <main+0x230>)
 8002368:	4a3d      	ldr	r2, [pc, #244]	; (8002460 <main+0x23c>)
 800236a:	493c      	ldr	r1, [pc, #240]	; (800245c <main+0x238>)
 800236c:	f7fe fe48 	bl	8001000 <createPcReceiveHandler>
 8002370:	4625      	mov	r5, r4
 8002372:	463c      	mov	r4, r7
 8002374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002376:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002378:	e894 0003 	ldmia.w	r4, {r0, r1}
 800237c:	e885 0003 	stmia.w	r5, {r0, r1}
  sensorReciever = createSensorReceiveHandler(&sensorExtruder, &sensorBack);
 8002380:	4c3f      	ldr	r4, [pc, #252]	; (8002480 <main+0x25c>)
 8002382:	463b      	mov	r3, r7
 8002384:	4a31      	ldr	r2, [pc, #196]	; (800244c <main+0x228>)
 8002386:	492f      	ldr	r1, [pc, #188]	; (8002444 <main+0x220>)
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fb27 	bl	80019dc <createSensorReceiveHandler>
 800238e:	463b      	mov	r3, r7
 8002390:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002394:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HAL_UART_Receive_IT(&huart1, (uint8_t *)uartDataSensorExtruder.data.receivedData, 1);
 8002398:	2201      	movs	r2, #1
 800239a:	4934      	ldr	r1, [pc, #208]	; (800246c <main+0x248>)
 800239c:	4839      	ldr	r0, [pc, #228]	; (8002484 <main+0x260>)
 800239e:	f002 fe1a 	bl	8004fd6 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, (uint8_t *)uartDataSensorBack.data.receivedData, 1);
 80023a2:	2201      	movs	r2, #1
 80023a4:	4932      	ldr	r1, [pc, #200]	; (8002470 <main+0x24c>)
 80023a6:	4838      	ldr	r0, [pc, #224]	; (8002488 <main+0x264>)
 80023a8:	f002 fe15 	bl	8004fd6 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *)uartDataPc.data.receivedData, 1);
 80023ac:	2201      	movs	r2, #1
 80023ae:	492e      	ldr	r1, [pc, #184]	; (8002468 <main+0x244>)
 80023b0:	4832      	ldr	r0, [pc, #200]	; (800247c <main+0x258>)
 80023b2:	f002 fe10 	bl	8004fd6 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(uartDataPc.data.messageComplete){
 80023b6:	4b2c      	ldr	r3, [pc, #176]	; (8002468 <main+0x244>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d012      	beq.n	80023e4 <main+0x1c0>
		processPcInterfaceMessage(&pcReciever, uartDataPc.data.receivedData, uartDataPc.data.dataIndex);
 80023be:	4b2a      	ldr	r3, [pc, #168]	; (8002468 <main+0x244>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	461a      	mov	r2, r3
 80023c6:	4928      	ldr	r1, [pc, #160]	; (8002468 <main+0x244>)
 80023c8:	482b      	ldr	r0, [pc, #172]	; (8002478 <main+0x254>)
 80023ca:	f7fe ff83 	bl	80012d4 <processPcInterfaceMessage>
		// Zurücksetzen für die nächste Nachricht
		uartDataPc.data.messageComplete = 0;
 80023ce:	4b26      	ldr	r3, [pc, #152]	; (8002468 <main+0x244>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	645a      	str	r2, [r3, #68]	; 0x44
		uartDataPc.data.dataIndex = 0;
 80023d4:	4b24      	ldr	r3, [pc, #144]	; (8002468 <main+0x244>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_UART_Receive_IT(&huart2, (uint8_t *)uartDataPc.data.receivedData, 1);
 80023da:	2201      	movs	r2, #1
 80023dc:	4922      	ldr	r1, [pc, #136]	; (8002468 <main+0x244>)
 80023de:	4827      	ldr	r0, [pc, #156]	; (800247c <main+0x258>)
 80023e0:	f002 fdf9 	bl	8004fd6 <HAL_UART_Receive_IT>

	  }
	  if(uartDataSensorExtruder.data.messageComplete){
 80023e4:	4b21      	ldr	r3, [pc, #132]	; (800246c <main+0x248>)
 80023e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d012      	beq.n	8002412 <main+0x1ee>
		processSensorInterfaceMessage(1,&sensorReciever, uartDataSensorExtruder.data.receivedData, uartDataSensorExtruder.data.dataIndex);
 80023ec:	4b1f      	ldr	r3, [pc, #124]	; (800246c <main+0x248>)
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	4a1e      	ldr	r2, [pc, #120]	; (800246c <main+0x248>)
 80023f4:	4922      	ldr	r1, [pc, #136]	; (8002480 <main+0x25c>)
 80023f6:	2001      	movs	r0, #1
 80023f8:	f7ff fbe4 	bl	8001bc4 <processSensorInterfaceMessage>
		// Zurücksetzen für die nächste Nachricht
		uartDataSensorExtruder.data.messageComplete = 0;
 80023fc:	4b1b      	ldr	r3, [pc, #108]	; (800246c <main+0x248>)
 80023fe:	2200      	movs	r2, #0
 8002400:	645a      	str	r2, [r3, #68]	; 0x44
		uartDataSensorExtruder.data.dataIndex = 0;
 8002402:	4b1a      	ldr	r3, [pc, #104]	; (800246c <main+0x248>)
 8002404:	2200      	movs	r2, #0
 8002406:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_UART_Receive_IT(&huart1, (uint8_t *)uartDataSensorExtruder.data.receivedData, 1);
 8002408:	2201      	movs	r2, #1
 800240a:	4918      	ldr	r1, [pc, #96]	; (800246c <main+0x248>)
 800240c:	481d      	ldr	r0, [pc, #116]	; (8002484 <main+0x260>)
 800240e:	f002 fde2 	bl	8004fd6 <HAL_UART_Receive_IT>
	  }
	  if(uartDataSensorBack.data.messageComplete){
 8002412:	4b17      	ldr	r3, [pc, #92]	; (8002470 <main+0x24c>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0cd      	beq.n	80023b6 <main+0x192>
		processSensorInterfaceMessage(6,&sensorReciever, uartDataSensorBack.data.receivedData, uartDataSensorBack.data.dataIndex);
 800241a:	4b15      	ldr	r3, [pc, #84]	; (8002470 <main+0x24c>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	b2db      	uxtb	r3, r3
 8002420:	4a13      	ldr	r2, [pc, #76]	; (8002470 <main+0x24c>)
 8002422:	4917      	ldr	r1, [pc, #92]	; (8002480 <main+0x25c>)
 8002424:	2006      	movs	r0, #6
 8002426:	f7ff fbcd 	bl	8001bc4 <processSensorInterfaceMessage>
		// Zurücksetzen für die nächste Nachricht
		uartDataSensorBack.data.messageComplete = 0;
 800242a:	4b11      	ldr	r3, [pc, #68]	; (8002470 <main+0x24c>)
 800242c:	2200      	movs	r2, #0
 800242e:	645a      	str	r2, [r3, #68]	; 0x44
		uartDataSensorBack.data.dataIndex = 0;
 8002430:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <main+0x24c>)
 8002432:	2200      	movs	r2, #0
 8002434:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_UART_Receive_IT(&huart6, (uint8_t *)uartDataSensorBack.data.receivedData, 1);
 8002436:	2201      	movs	r2, #1
 8002438:	490d      	ldr	r1, [pc, #52]	; (8002470 <main+0x24c>)
 800243a:	4813      	ldr	r0, [pc, #76]	; (8002488 <main+0x264>)
 800243c:	f002 fdcb 	bl	8004fd6 <HAL_UART_Receive_IT>
	  if(uartDataPc.data.messageComplete){
 8002440:	e7b9      	b.n	80023b6 <main+0x192>
 8002442:	bf00      	nop
 8002444:	200003d8 	.word	0x200003d8
 8002448:	3fc8f5c3 	.word	0x3fc8f5c3
 800244c:	200003f8 	.word	0x200003f8
 8002450:	4023d70a 	.word	0x4023d70a
 8002454:	20000418 	.word	0x20000418
 8002458:	2000027c 	.word	0x2000027c
 800245c:	20000428 	.word	0x20000428
 8002460:	2000043c 	.word	0x2000043c
 8002464:	00000000 	.word	0x00000000
 8002468:	200004b4 	.word	0x200004b4
 800246c:	20000514 	.word	0x20000514
 8002470:	20000574 	.word	0x20000574
 8002474:	20000494 	.word	0x20000494
 8002478:	2000047c 	.word	0x2000047c
 800247c:	20000350 	.word	0x20000350
 8002480:	20000470 	.word	0x20000470
 8002484:	2000030c 	.word	0x2000030c
 8002488:	20000394 	.word	0x20000394

0800248c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b094      	sub	sp, #80	; 0x50
 8002490:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002492:	f107 0320 	add.w	r3, r7, #32
 8002496:	2230      	movs	r2, #48	; 0x30
 8002498:	2100      	movs	r1, #0
 800249a:	4618      	mov	r0, r3
 800249c:	f005 fbe3 	bl	8007c66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024a0:	f107 030c 	add.w	r3, r7, #12
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024b0:	2300      	movs	r3, #0
 80024b2:	60bb      	str	r3, [r7, #8]
 80024b4:	4b28      	ldr	r3, [pc, #160]	; (8002558 <SystemClock_Config+0xcc>)
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	4a27      	ldr	r2, [pc, #156]	; (8002558 <SystemClock_Config+0xcc>)
 80024ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024be:	6413      	str	r3, [r2, #64]	; 0x40
 80024c0:	4b25      	ldr	r3, [pc, #148]	; (8002558 <SystemClock_Config+0xcc>)
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c8:	60bb      	str	r3, [r7, #8]
 80024ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024cc:	2300      	movs	r3, #0
 80024ce:	607b      	str	r3, [r7, #4]
 80024d0:	4b22      	ldr	r3, [pc, #136]	; (800255c <SystemClock_Config+0xd0>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a21      	ldr	r2, [pc, #132]	; (800255c <SystemClock_Config+0xd0>)
 80024d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	4b1f      	ldr	r3, [pc, #124]	; (800255c <SystemClock_Config+0xd0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024e4:	607b      	str	r3, [r7, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024e8:	2302      	movs	r3, #2
 80024ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024ec:	2301      	movs	r3, #1
 80024ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024f0:	2310      	movs	r3, #16
 80024f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024f4:	2302      	movs	r3, #2
 80024f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024f8:	2300      	movs	r3, #0
 80024fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80024fc:	2310      	movs	r3, #16
 80024fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002500:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002504:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002506:	2304      	movs	r3, #4
 8002508:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800250a:	2304      	movs	r3, #4
 800250c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800250e:	f107 0320 	add.w	r3, r7, #32
 8002512:	4618      	mov	r0, r3
 8002514:	f001 f920 	bl	8003758 <HAL_RCC_OscConfig>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800251e:	f000 fa81 	bl	8002a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002522:	230f      	movs	r3, #15
 8002524:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002526:	2302      	movs	r3, #2
 8002528:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800252e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002532:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002534:	2300      	movs	r3, #0
 8002536:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002538:	f107 030c 	add.w	r3, r7, #12
 800253c:	2102      	movs	r1, #2
 800253e:	4618      	mov	r0, r3
 8002540:	f001 fb82 	bl	8003c48 <HAL_RCC_ClockConfig>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800254a:	f000 fa6b 	bl	8002a24 <Error_Handler>
  }
}
 800254e:	bf00      	nop
 8002550:	3750      	adds	r7, #80	; 0x50
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800
 800255c:	40007000 	.word	0x40007000

08002560 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b096      	sub	sp, #88	; 0x58
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002566:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	605a      	str	r2, [r3, #4]
 8002570:	609a      	str	r2, [r3, #8]
 8002572:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002574:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800257e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	605a      	str	r2, [r3, #4]
 8002588:	609a      	str	r2, [r3, #8]
 800258a:	60da      	str	r2, [r3, #12]
 800258c:	611a      	str	r2, [r3, #16]
 800258e:	615a      	str	r2, [r3, #20]
 8002590:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002592:	1d3b      	adds	r3, r7, #4
 8002594:	2220      	movs	r2, #32
 8002596:	2100      	movs	r1, #0
 8002598:	4618      	mov	r0, r3
 800259a:	f005 fb64 	bl	8007c66 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800259e:	4b3f      	ldr	r3, [pc, #252]	; (800269c <MX_TIM1_Init+0x13c>)
 80025a0:	4a3f      	ldr	r2, [pc, #252]	; (80026a0 <MX_TIM1_Init+0x140>)
 80025a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 80025a4:	4b3d      	ldr	r3, [pc, #244]	; (800269c <MX_TIM1_Init+0x13c>)
 80025a6:	2204      	movs	r2, #4
 80025a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025aa:	4b3c      	ldr	r3, [pc, #240]	; (800269c <MX_TIM1_Init+0x13c>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80025b0:	4b3a      	ldr	r3, [pc, #232]	; (800269c <MX_TIM1_Init+0x13c>)
 80025b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025b8:	4b38      	ldr	r3, [pc, #224]	; (800269c <MX_TIM1_Init+0x13c>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025be:	4b37      	ldr	r3, [pc, #220]	; (800269c <MX_TIM1_Init+0x13c>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c4:	4b35      	ldr	r3, [pc, #212]	; (800269c <MX_TIM1_Init+0x13c>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025ca:	4834      	ldr	r0, [pc, #208]	; (800269c <MX_TIM1_Init+0x13c>)
 80025cc:	f001 fd5c 	bl	8004088 <HAL_TIM_Base_Init>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80025d6:	f000 fa25 	bl	8002a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80025e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025e4:	4619      	mov	r1, r3
 80025e6:	482d      	ldr	r0, [pc, #180]	; (800269c <MX_TIM1_Init+0x13c>)
 80025e8:	f001 ffc2 	bl	8004570 <HAL_TIM_ConfigClockSource>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80025f2:	f000 fa17 	bl	8002a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80025f6:	4829      	ldr	r0, [pc, #164]	; (800269c <MX_TIM1_Init+0x13c>)
 80025f8:	f001 fd95 	bl	8004126 <HAL_TIM_PWM_Init>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002602:	f000 fa0f 	bl	8002a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002606:	2300      	movs	r3, #0
 8002608:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800260a:	2300      	movs	r3, #0
 800260c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800260e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002612:	4619      	mov	r1, r3
 8002614:	4821      	ldr	r0, [pc, #132]	; (800269c <MX_TIM1_Init+0x13c>)
 8002616:	f002 fb3f 	bl	8004c98 <HAL_TIMEx_MasterConfigSynchronization>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002620:	f000 fa00 	bl	8002a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002624:	2360      	movs	r3, #96	; 0x60
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 13125-1;
 8002628:	f243 3344 	movw	r3, #13124	; 0x3344
 800262c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800262e:	2300      	movs	r3, #0
 8002630:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002632:	2300      	movs	r3, #0
 8002634:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002636:	2300      	movs	r3, #0
 8002638:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800263a:	2300      	movs	r3, #0
 800263c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800263e:	2300      	movs	r3, #0
 8002640:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002646:	2200      	movs	r2, #0
 8002648:	4619      	mov	r1, r3
 800264a:	4814      	ldr	r0, [pc, #80]	; (800269c <MX_TIM1_Init+0x13c>)
 800264c:	f001 fece 	bl	80043ec <HAL_TIM_PWM_ConfigChannel>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8002656:	f000 f9e5 	bl	8002a24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800265a:	2300      	movs	r3, #0
 800265c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800265e:	2300      	movs	r3, #0
 8002660:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800266e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002672:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002674:	2300      	movs	r3, #0
 8002676:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002678:	1d3b      	adds	r3, r7, #4
 800267a:	4619      	mov	r1, r3
 800267c:	4807      	ldr	r0, [pc, #28]	; (800269c <MX_TIM1_Init+0x13c>)
 800267e:	f002 fb79 	bl	8004d74 <HAL_TIMEx_ConfigBreakDeadTime>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8002688:	f000 f9cc 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800268c:	4803      	ldr	r0, [pc, #12]	; (800269c <MX_TIM1_Init+0x13c>)
 800268e:	f000 fa3b 	bl	8002b08 <HAL_TIM_MspPostInit>

}
 8002692:	bf00      	nop
 8002694:	3758      	adds	r7, #88	; 0x58
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	2000027c 	.word	0x2000027c
 80026a0:	40010000 	.word	0x40010000

080026a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08a      	sub	sp, #40	; 0x28
 80026a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026aa:	f107 0320 	add.w	r3, r7, #32
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026b4:	1d3b      	adds	r3, r7, #4
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	609a      	str	r2, [r3, #8]
 80026be:	60da      	str	r2, [r3, #12]
 80026c0:	611a      	str	r2, [r3, #16]
 80026c2:	615a      	str	r2, [r3, #20]
 80026c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026c6:	4b22      	ldr	r3, [pc, #136]	; (8002750 <MX_TIM3_Init+0xac>)
 80026c8:	4a22      	ldr	r2, [pc, #136]	; (8002754 <MX_TIM3_Init+0xb0>)
 80026ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80026cc:	4b20      	ldr	r3, [pc, #128]	; (8002750 <MX_TIM3_Init+0xac>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d2:	4b1f      	ldr	r3, [pc, #124]	; (8002750 <MX_TIM3_Init+0xac>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80026d8:	4b1d      	ldr	r3, [pc, #116]	; (8002750 <MX_TIM3_Init+0xac>)
 80026da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e0:	4b1b      	ldr	r3, [pc, #108]	; (8002750 <MX_TIM3_Init+0xac>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026e6:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <MX_TIM3_Init+0xac>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80026ec:	4818      	ldr	r0, [pc, #96]	; (8002750 <MX_TIM3_Init+0xac>)
 80026ee:	f001 fd1a 	bl	8004126 <HAL_TIM_PWM_Init>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80026f8:	f000 f994 	bl	8002a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026fc:	2300      	movs	r3, #0
 80026fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002700:	2300      	movs	r3, #0
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002704:	f107 0320 	add.w	r3, r7, #32
 8002708:	4619      	mov	r1, r3
 800270a:	4811      	ldr	r0, [pc, #68]	; (8002750 <MX_TIM3_Init+0xac>)
 800270c:	f002 fac4 	bl	8004c98 <HAL_TIMEx_MasterConfigSynchronization>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002716:	f000 f985 	bl	8002a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800271a:	2360      	movs	r3, #96	; 0x60
 800271c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800272a:	1d3b      	adds	r3, r7, #4
 800272c:	2200      	movs	r2, #0
 800272e:	4619      	mov	r1, r3
 8002730:	4807      	ldr	r0, [pc, #28]	; (8002750 <MX_TIM3_Init+0xac>)
 8002732:	f001 fe5b 	bl	80043ec <HAL_TIM_PWM_ConfigChannel>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800273c:	f000 f972 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002740:	4803      	ldr	r0, [pc, #12]	; (8002750 <MX_TIM3_Init+0xac>)
 8002742:	f000 f9e1 	bl	8002b08 <HAL_TIM_MspPostInit>

}
 8002746:	bf00      	nop
 8002748:	3728      	adds	r7, #40	; 0x28
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	200002c4 	.word	0x200002c4
 8002754:	40000400 	.word	0x40000400

08002758 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800275c:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <MX_USART1_UART_Init+0x4c>)
 800275e:	4a12      	ldr	r2, [pc, #72]	; (80027a8 <MX_USART1_UART_Init+0x50>)
 8002760:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002762:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <MX_USART1_UART_Init+0x4c>)
 8002764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002768:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800276a:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <MX_USART1_UART_Init+0x4c>)
 800276c:	2200      	movs	r2, #0
 800276e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002770:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <MX_USART1_UART_Init+0x4c>)
 8002772:	2200      	movs	r2, #0
 8002774:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002776:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <MX_USART1_UART_Init+0x4c>)
 8002778:	2200      	movs	r2, #0
 800277a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800277c:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <MX_USART1_UART_Init+0x4c>)
 800277e:	220c      	movs	r2, #12
 8002780:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002782:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <MX_USART1_UART_Init+0x4c>)
 8002784:	2200      	movs	r2, #0
 8002786:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <MX_USART1_UART_Init+0x4c>)
 800278a:	2200      	movs	r2, #0
 800278c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800278e:	4805      	ldr	r0, [pc, #20]	; (80027a4 <MX_USART1_UART_Init+0x4c>)
 8002790:	f002 fb42 	bl	8004e18 <HAL_UART_Init>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800279a:	f000 f943 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	2000030c 	.word	0x2000030c
 80027a8:	40011000 	.word	0x40011000

080027ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027b0:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027b2:	4a12      	ldr	r2, [pc, #72]	; (80027fc <MX_USART2_UART_Init+0x50>)
 80027b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027b6:	4b10      	ldr	r3, [pc, #64]	; (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027be:	4b0e      	ldr	r3, [pc, #56]	; (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027c4:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027ca:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027d0:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027d2:	220c      	movs	r2, #12
 80027d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027d6:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027d8:	2200      	movs	r2, #0
 80027da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027dc:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027de:	2200      	movs	r2, #0
 80027e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027e2:	4805      	ldr	r0, [pc, #20]	; (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027e4:	f002 fb18 	bl	8004e18 <HAL_UART_Init>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027ee:	f000 f919 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000350 	.word	0x20000350
 80027fc:	40004400 	.word	0x40004400

08002800 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002804:	4b11      	ldr	r3, [pc, #68]	; (800284c <MX_USART6_UART_Init+0x4c>)
 8002806:	4a12      	ldr	r2, [pc, #72]	; (8002850 <MX_USART6_UART_Init+0x50>)
 8002808:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800280a:	4b10      	ldr	r3, [pc, #64]	; (800284c <MX_USART6_UART_Init+0x4c>)
 800280c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002810:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002812:	4b0e      	ldr	r3, [pc, #56]	; (800284c <MX_USART6_UART_Init+0x4c>)
 8002814:	2200      	movs	r2, #0
 8002816:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <MX_USART6_UART_Init+0x4c>)
 800281a:	2200      	movs	r2, #0
 800281c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800281e:	4b0b      	ldr	r3, [pc, #44]	; (800284c <MX_USART6_UART_Init+0x4c>)
 8002820:	2200      	movs	r2, #0
 8002822:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002824:	4b09      	ldr	r3, [pc, #36]	; (800284c <MX_USART6_UART_Init+0x4c>)
 8002826:	220c      	movs	r2, #12
 8002828:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <MX_USART6_UART_Init+0x4c>)
 800282c:	2200      	movs	r2, #0
 800282e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <MX_USART6_UART_Init+0x4c>)
 8002832:	2200      	movs	r2, #0
 8002834:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002836:	4805      	ldr	r0, [pc, #20]	; (800284c <MX_USART6_UART_Init+0x4c>)
 8002838:	f002 faee 	bl	8004e18 <HAL_UART_Init>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002842:	f000 f8ef 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20000394 	.word	0x20000394
 8002850:	40011400 	.word	0x40011400

08002854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08a      	sub	sp, #40	; 0x28
 8002858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285a:	f107 0314 	add.w	r3, r7, #20
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	605a      	str	r2, [r3, #4]
 8002864:	609a      	str	r2, [r3, #8]
 8002866:	60da      	str	r2, [r3, #12]
 8002868:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	4b2d      	ldr	r3, [pc, #180]	; (8002924 <MX_GPIO_Init+0xd0>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	4a2c      	ldr	r2, [pc, #176]	; (8002924 <MX_GPIO_Init+0xd0>)
 8002874:	f043 0304 	orr.w	r3, r3, #4
 8002878:	6313      	str	r3, [r2, #48]	; 0x30
 800287a:	4b2a      	ldr	r3, [pc, #168]	; (8002924 <MX_GPIO_Init+0xd0>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	4b26      	ldr	r3, [pc, #152]	; (8002924 <MX_GPIO_Init+0xd0>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	4a25      	ldr	r2, [pc, #148]	; (8002924 <MX_GPIO_Init+0xd0>)
 8002890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002894:	6313      	str	r3, [r2, #48]	; 0x30
 8002896:	4b23      	ldr	r3, [pc, #140]	; (8002924 <MX_GPIO_Init+0xd0>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	4b1f      	ldr	r3, [pc, #124]	; (8002924 <MX_GPIO_Init+0xd0>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	4a1e      	ldr	r2, [pc, #120]	; (8002924 <MX_GPIO_Init+0xd0>)
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	6313      	str	r3, [r2, #48]	; 0x30
 80028b2:	4b1c      	ldr	r3, [pc, #112]	; (8002924 <MX_GPIO_Init+0xd0>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	607b      	str	r3, [r7, #4]
 80028c2:	4b18      	ldr	r3, [pc, #96]	; (8002924 <MX_GPIO_Init+0xd0>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	4a17      	ldr	r2, [pc, #92]	; (8002924 <MX_GPIO_Init+0xd0>)
 80028c8:	f043 0302 	orr.w	r3, r3, #2
 80028cc:	6313      	str	r3, [r2, #48]	; 0x30
 80028ce:	4b15      	ldr	r3, [pc, #84]	; (8002924 <MX_GPIO_Init+0xd0>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	607b      	str	r3, [r7, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80028da:	2200      	movs	r2, #0
 80028dc:	2120      	movs	r1, #32
 80028de:	4812      	ldr	r0, [pc, #72]	; (8002928 <MX_GPIO_Init+0xd4>)
 80028e0:	f000 ff20 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80028e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80028ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80028f4:	f107 0314 	add.w	r3, r7, #20
 80028f8:	4619      	mov	r1, r3
 80028fa:	480c      	ldr	r0, [pc, #48]	; (800292c <MX_GPIO_Init+0xd8>)
 80028fc:	f000 fd8e 	bl	800341c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002900:	2320      	movs	r3, #32
 8002902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002904:	2301      	movs	r3, #1
 8002906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290c:	2300      	movs	r3, #0
 800290e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002910:	f107 0314 	add.w	r3, r7, #20
 8002914:	4619      	mov	r1, r3
 8002916:	4804      	ldr	r0, [pc, #16]	; (8002928 <MX_GPIO_Init+0xd4>)
 8002918:	f000 fd80 	bl	800341c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800291c:	bf00      	nop
 800291e:	3728      	adds	r7, #40	; 0x28
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40023800 	.word	0x40023800
 8002928:	40020000 	.word	0x40020000
 800292c:	40020800 	.word	0x40020800

08002930 <processUartData>:

/* USER CODE BEGIN 4 */
void processUartData(UART_HandleTypeDef *huart, UartDataObject *uartData) {
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  if (uartData->data.dataIndex == 0 && uartData->data.receivedData[0] != '?' && uartData->data.receivedData[0] != '!') {
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	2b00      	cmp	r3, #0
 8002940:	d111      	bne.n	8002966 <processUartData+0x36>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b3f      	cmp	r3, #63	; 0x3f
 8002948:	d00d      	beq.n	8002966 <processUartData+0x36>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b21      	cmp	r3, #33	; 0x21
 8002950:	d009      	beq.n	8002966 <processUartData+0x36>
    // Fehlerhafte Startbyte, Nachricht ignorieren
    uartData->data.dataIndex = 0;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2200      	movs	r2, #0
 8002956:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_UART_Receive_IT(huart, &uartData->data.receivedData[0], 1);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	2201      	movs	r2, #1
 800295c:	4619      	mov	r1, r3
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f002 fb39 	bl	8004fd6 <HAL_UART_Receive_IT>
    HAL_UART_Receive_IT(huart, &uartData->data.receivedData[0], 1);
  } else {
    uartData->data.dataIndex++;
    HAL_UART_Receive_IT(huart, (uint8_t *)&uartData->data.receivedData[uartData->data.dataIndex], 1);
  }
}
 8002964:	e02b      	b.n	80029be <processUartData+0x8e>
  } else if (uartData->data.receivedData[uartData->data.dataIndex] == '\r') {
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	5cd3      	ldrb	r3, [r2, r3]
 800296e:	2b0d      	cmp	r3, #13
 8002970:	d109      	bne.n	8002986 <processUartData+0x56>
    uartData->data.receivedData[uartData->data.dataIndex + 1] = '\0';  // Null-Terminierung hinzufügen
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	3301      	adds	r3, #1
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	2100      	movs	r1, #0
 800297c:	54d1      	strb	r1, [r2, r3]
    uartData->data.messageComplete = 1;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2201      	movs	r2, #1
 8002982:	645a      	str	r2, [r3, #68]	; 0x44
}
 8002984:	e01b      	b.n	80029be <processUartData+0x8e>
  } else if (uartData->data.dataIndex >= sizeof(uartData->data.receivedData) - 1) {
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	2b3e      	cmp	r3, #62	; 0x3e
 800298c:	d909      	bls.n	80029a2 <processUartData+0x72>
    uartData->data.dataIndex = 0;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2200      	movs	r2, #0
 8002992:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_UART_Receive_IT(huart, &uartData->data.receivedData[0], 1);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	2201      	movs	r2, #1
 8002998:	4619      	mov	r1, r3
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f002 fb1b 	bl	8004fd6 <HAL_UART_Receive_IT>
}
 80029a0:	e00d      	b.n	80029be <processUartData+0x8e>
    uartData->data.dataIndex++;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_UART_Receive_IT(huart, (uint8_t *)&uartData->data.receivedData[uartData->data.dataIndex], 1);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	4413      	add	r3, r2
 80029b4:	2201      	movs	r2, #1
 80029b6:	4619      	mov	r1, r3
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f002 fb0c 	bl	8004fd6 <HAL_UART_Receive_IT>
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  if (huart == &huart2) {
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a0e      	ldr	r2, [pc, #56]	; (8002a0c <HAL_UART_RxCpltCallback+0x44>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d104      	bne.n	80029e2 <HAL_UART_RxCpltCallback+0x1a>
    processUartData(&huart2, &uartDataPc);
 80029d8:	490d      	ldr	r1, [pc, #52]	; (8002a10 <HAL_UART_RxCpltCallback+0x48>)
 80029da:	480c      	ldr	r0, [pc, #48]	; (8002a0c <HAL_UART_RxCpltCallback+0x44>)
 80029dc:	f7ff ffa8 	bl	8002930 <processUartData>
  }else if (huart == &huart1){
	processUartData(&huart1, &uartDataSensorExtruder);
  }else if (huart == &huart6){
	  processUartData(&huart6, &uartDataSensorBack);
  }
}
 80029e0:	e010      	b.n	8002a04 <HAL_UART_RxCpltCallback+0x3c>
  }else if (huart == &huart1){
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a0b      	ldr	r2, [pc, #44]	; (8002a14 <HAL_UART_RxCpltCallback+0x4c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d104      	bne.n	80029f4 <HAL_UART_RxCpltCallback+0x2c>
	processUartData(&huart1, &uartDataSensorExtruder);
 80029ea:	490b      	ldr	r1, [pc, #44]	; (8002a18 <HAL_UART_RxCpltCallback+0x50>)
 80029ec:	4809      	ldr	r0, [pc, #36]	; (8002a14 <HAL_UART_RxCpltCallback+0x4c>)
 80029ee:	f7ff ff9f 	bl	8002930 <processUartData>
}
 80029f2:	e007      	b.n	8002a04 <HAL_UART_RxCpltCallback+0x3c>
  }else if (huart == &huart6){
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a09      	ldr	r2, [pc, #36]	; (8002a1c <HAL_UART_RxCpltCallback+0x54>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d103      	bne.n	8002a04 <HAL_UART_RxCpltCallback+0x3c>
	  processUartData(&huart6, &uartDataSensorBack);
 80029fc:	4908      	ldr	r1, [pc, #32]	; (8002a20 <HAL_UART_RxCpltCallback+0x58>)
 80029fe:	4807      	ldr	r0, [pc, #28]	; (8002a1c <HAL_UART_RxCpltCallback+0x54>)
 8002a00:	f7ff ff96 	bl	8002930 <processUartData>
}
 8002a04:	bf00      	nop
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20000350 	.word	0x20000350
 8002a10:	200004b4 	.word	0x200004b4
 8002a14:	2000030c 	.word	0x2000030c
 8002a18:	20000514 	.word	0x20000514
 8002a1c:	20000394 	.word	0x20000394
 8002a20:	20000574 	.word	0x20000574

08002a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a28:	b672      	cpsid	i
}
 8002a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a2c:	e7fe      	b.n	8002a2c <Error_Handler+0x8>
	...

08002a30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	607b      	str	r3, [r7, #4]
 8002a3a:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <HAL_MspInit+0x4c>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	4a0f      	ldr	r2, [pc, #60]	; (8002a7c <HAL_MspInit+0x4c>)
 8002a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a44:	6453      	str	r3, [r2, #68]	; 0x44
 8002a46:	4b0d      	ldr	r3, [pc, #52]	; (8002a7c <HAL_MspInit+0x4c>)
 8002a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a4e:	607b      	str	r3, [r7, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	603b      	str	r3, [r7, #0]
 8002a56:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <HAL_MspInit+0x4c>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	4a08      	ldr	r2, [pc, #32]	; (8002a7c <HAL_MspInit+0x4c>)
 8002a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a60:	6413      	str	r3, [r2, #64]	; 0x40
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_MspInit+0x4c>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002a6e:	2007      	movs	r0, #7
 8002a70:	f000 fc00 	bl	8003274 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a74:	bf00      	nop
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40023800 	.word	0x40023800

08002a80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a0b      	ldr	r2, [pc, #44]	; (8002abc <HAL_TIM_Base_MspInit+0x3c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d10d      	bne.n	8002aae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <HAL_TIM_Base_MspInit+0x40>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	4a09      	ldr	r2, [pc, #36]	; (8002ac0 <HAL_TIM_Base_MspInit+0x40>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8002aa2:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <HAL_TIM_Base_MspInit+0x40>)
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002aae:	bf00      	nop
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40010000 	.word	0x40010000
 8002ac0:	40023800 	.word	0x40023800

08002ac4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a0b      	ldr	r2, [pc, #44]	; (8002b00 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d10d      	bne.n	8002af2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <HAL_TIM_PWM_MspInit+0x40>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	4a09      	ldr	r2, [pc, #36]	; (8002b04 <HAL_TIM_PWM_MspInit+0x40>)
 8002ae0:	f043 0302 	orr.w	r3, r3, #2
 8002ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae6:	4b07      	ldr	r3, [pc, #28]	; (8002b04 <HAL_TIM_PWM_MspInit+0x40>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002af2:	bf00      	nop
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40000400 	.word	0x40000400
 8002b04:	40023800 	.word	0x40023800

08002b08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08a      	sub	sp, #40	; 0x28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b10:	f107 0314 	add.w	r3, r7, #20
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	60da      	str	r2, [r3, #12]
 8002b1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a24      	ldr	r2, [pc, #144]	; (8002bb8 <HAL_TIM_MspPostInit+0xb0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d11f      	bne.n	8002b6a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	4b23      	ldr	r3, [pc, #140]	; (8002bbc <HAL_TIM_MspPostInit+0xb4>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	4a22      	ldr	r2, [pc, #136]	; (8002bbc <HAL_TIM_MspPostInit+0xb4>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3a:	4b20      	ldr	r3, [pc, #128]	; (8002bbc <HAL_TIM_MspPostInit+0xb4>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b54:	2300      	movs	r3, #0
 8002b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5c:	f107 0314 	add.w	r3, r7, #20
 8002b60:	4619      	mov	r1, r3
 8002b62:	4817      	ldr	r0, [pc, #92]	; (8002bc0 <HAL_TIM_MspPostInit+0xb8>)
 8002b64:	f000 fc5a 	bl	800341c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b68:	e022      	b.n	8002bb0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a15      	ldr	r2, [pc, #84]	; (8002bc4 <HAL_TIM_MspPostInit+0xbc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d11d      	bne.n	8002bb0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b74:	2300      	movs	r3, #0
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <HAL_TIM_MspPostInit+0xb4>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	4a0f      	ldr	r2, [pc, #60]	; (8002bbc <HAL_TIM_MspPostInit+0xb4>)
 8002b7e:	f043 0301 	orr.w	r3, r3, #1
 8002b82:	6313      	str	r3, [r2, #48]	; 0x30
 8002b84:	4b0d      	ldr	r3, [pc, #52]	; (8002bbc <HAL_TIM_MspPostInit+0xb4>)
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b90:	2340      	movs	r3, #64	; 0x40
 8002b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b94:	2302      	movs	r3, #2
 8002b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba4:	f107 0314 	add.w	r3, r7, #20
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4805      	ldr	r0, [pc, #20]	; (8002bc0 <HAL_TIM_MspPostInit+0xb8>)
 8002bac:	f000 fc36 	bl	800341c <HAL_GPIO_Init>
}
 8002bb0:	bf00      	nop
 8002bb2:	3728      	adds	r7, #40	; 0x28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40010000 	.word	0x40010000
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	40020000 	.word	0x40020000
 8002bc4:	40000400 	.word	0x40000400

08002bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08e      	sub	sp, #56	; 0x38
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a57      	ldr	r2, [pc, #348]	; (8002d44 <HAL_UART_MspInit+0x17c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d135      	bne.n	8002c56 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	623b      	str	r3, [r7, #32]
 8002bee:	4b56      	ldr	r3, [pc, #344]	; (8002d48 <HAL_UART_MspInit+0x180>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	4a55      	ldr	r2, [pc, #340]	; (8002d48 <HAL_UART_MspInit+0x180>)
 8002bf4:	f043 0310 	orr.w	r3, r3, #16
 8002bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bfa:	4b53      	ldr	r3, [pc, #332]	; (8002d48 <HAL_UART_MspInit+0x180>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	623b      	str	r3, [r7, #32]
 8002c04:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
 8002c0a:	4b4f      	ldr	r3, [pc, #316]	; (8002d48 <HAL_UART_MspInit+0x180>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	4a4e      	ldr	r2, [pc, #312]	; (8002d48 <HAL_UART_MspInit+0x180>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	6313      	str	r3, [r2, #48]	; 0x30
 8002c16:	4b4c      	ldr	r3, [pc, #304]	; (8002d48 <HAL_UART_MspInit+0x180>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	61fb      	str	r3, [r7, #28]
 8002c20:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c22:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c30:	2303      	movs	r3, #3
 8002c32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c34:	2307      	movs	r3, #7
 8002c36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4843      	ldr	r0, [pc, #268]	; (8002d4c <HAL_UART_MspInit+0x184>)
 8002c40:	f000 fbec 	bl	800341c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c44:	2200      	movs	r2, #0
 8002c46:	2100      	movs	r1, #0
 8002c48:	2025      	movs	r0, #37	; 0x25
 8002c4a:	f000 fb1e 	bl	800328a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c4e:	2025      	movs	r0, #37	; 0x25
 8002c50:	f000 fb37 	bl	80032c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002c54:	e072      	b.n	8002d3c <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a3d      	ldr	r2, [pc, #244]	; (8002d50 <HAL_UART_MspInit+0x188>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d134      	bne.n	8002cca <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c60:	2300      	movs	r3, #0
 8002c62:	61bb      	str	r3, [r7, #24]
 8002c64:	4b38      	ldr	r3, [pc, #224]	; (8002d48 <HAL_UART_MspInit+0x180>)
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	4a37      	ldr	r2, [pc, #220]	; (8002d48 <HAL_UART_MspInit+0x180>)
 8002c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002c70:	4b35      	ldr	r3, [pc, #212]	; (8002d48 <HAL_UART_MspInit+0x180>)
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c78:	61bb      	str	r3, [r7, #24]
 8002c7a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	4b31      	ldr	r3, [pc, #196]	; (8002d48 <HAL_UART_MspInit+0x180>)
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	4a30      	ldr	r2, [pc, #192]	; (8002d48 <HAL_UART_MspInit+0x180>)
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8c:	4b2e      	ldr	r3, [pc, #184]	; (8002d48 <HAL_UART_MspInit+0x180>)
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c98:	230c      	movs	r3, #12
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ca8:	2307      	movs	r3, #7
 8002caa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4826      	ldr	r0, [pc, #152]	; (8002d4c <HAL_UART_MspInit+0x184>)
 8002cb4:	f000 fbb2 	bl	800341c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2100      	movs	r1, #0
 8002cbc:	2026      	movs	r0, #38	; 0x26
 8002cbe:	f000 fae4 	bl	800328a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002cc2:	2026      	movs	r0, #38	; 0x26
 8002cc4:	f000 fafd 	bl	80032c2 <HAL_NVIC_EnableIRQ>
}
 8002cc8:	e038      	b.n	8002d3c <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a21      	ldr	r2, [pc, #132]	; (8002d54 <HAL_UART_MspInit+0x18c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d133      	bne.n	8002d3c <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <HAL_UART_MspInit+0x180>)
 8002cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cdc:	4a1a      	ldr	r2, [pc, #104]	; (8002d48 <HAL_UART_MspInit+0x180>)
 8002cde:	f043 0320 	orr.w	r3, r3, #32
 8002ce2:	6453      	str	r3, [r2, #68]	; 0x44
 8002ce4:	4b18      	ldr	r3, [pc, #96]	; (8002d48 <HAL_UART_MspInit+0x180>)
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	4b14      	ldr	r3, [pc, #80]	; (8002d48 <HAL_UART_MspInit+0x180>)
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf8:	4a13      	ldr	r2, [pc, #76]	; (8002d48 <HAL_UART_MspInit+0x180>)
 8002cfa:	f043 0304 	orr.w	r3, r3, #4
 8002cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8002d00:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <HAL_UART_MspInit+0x180>)
 8002d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d0c:	23c0      	movs	r3, #192	; 0xc0
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d10:	2302      	movs	r3, #2
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002d1c:	2308      	movs	r3, #8
 8002d1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d24:	4619      	mov	r1, r3
 8002d26:	480c      	ldr	r0, [pc, #48]	; (8002d58 <HAL_UART_MspInit+0x190>)
 8002d28:	f000 fb78 	bl	800341c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2100      	movs	r1, #0
 8002d30:	2047      	movs	r0, #71	; 0x47
 8002d32:	f000 faaa 	bl	800328a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002d36:	2047      	movs	r0, #71	; 0x47
 8002d38:	f000 fac3 	bl	80032c2 <HAL_NVIC_EnableIRQ>
}
 8002d3c:	bf00      	nop
 8002d3e:	3738      	adds	r7, #56	; 0x38
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40011000 	.word	0x40011000
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40020000 	.word	0x40020000
 8002d50:	40004400 	.word	0x40004400
 8002d54:	40011400 	.word	0x40011400
 8002d58:	40020800 	.word	0x40020800

08002d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d60:	e7fe      	b.n	8002d60 <NMI_Handler+0x4>

08002d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d66:	e7fe      	b.n	8002d66 <HardFault_Handler+0x4>

08002d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d6c:	e7fe      	b.n	8002d6c <MemManage_Handler+0x4>

08002d6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d72:	e7fe      	b.n	8002d72 <BusFault_Handler+0x4>

08002d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d78:	e7fe      	b.n	8002d78 <UsageFault_Handler+0x4>

08002d7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d8c:	bf00      	nop
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d96:	b480      	push	{r7}
 8002d98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002da8:	f000 f974 	bl	8003094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dac:	bf00      	nop
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002db4:	4802      	ldr	r0, [pc, #8]	; (8002dc0 <USART1_IRQHandler+0x10>)
 8002db6:	f002 f93f 	bl	8005038 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	2000030c 	.word	0x2000030c

08002dc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002dc8:	4802      	ldr	r0, [pc, #8]	; (8002dd4 <USART2_IRQHandler+0x10>)
 8002dca:	f002 f935 	bl	8005038 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20000350 	.word	0x20000350

08002dd8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002ddc:	4802      	ldr	r0, [pc, #8]	; (8002de8 <USART6_IRQHandler+0x10>)
 8002dde:	f002 f92b 	bl	8005038 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20000394 	.word	0x20000394

08002dec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return 1;
 8002df0:	2301      	movs	r3, #1
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <_kill>:

int _kill(int pid, int sig)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e06:	f004 ffa5 	bl	8007d54 <__errno>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2216      	movs	r2, #22
 8002e0e:	601a      	str	r2, [r3, #0]
  return -1;
 8002e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <_exit>:

void _exit (int status)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e24:	f04f 31ff 	mov.w	r1, #4294967295
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff ffe7 	bl	8002dfc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e2e:	e7fe      	b.n	8002e2e <_exit+0x12>

08002e30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	e00a      	b.n	8002e58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e42:	f3af 8000 	nop.w
 8002e46:	4601      	mov	r1, r0
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	1c5a      	adds	r2, r3, #1
 8002e4c:	60ba      	str	r2, [r7, #8]
 8002e4e:	b2ca      	uxtb	r2, r1
 8002e50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	3301      	adds	r3, #1
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	dbf0      	blt.n	8002e42 <_read+0x12>
  }

  return len;
 8002e60:	687b      	ldr	r3, [r7, #4]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b086      	sub	sp, #24
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	60f8      	str	r0, [r7, #12]
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	e009      	b.n	8002e90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	60ba      	str	r2, [r7, #8]
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	dbf1      	blt.n	8002e7c <_write+0x12>
  }
  return len;
 8002e98:	687b      	ldr	r3, [r7, #4]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <_close>:

int _close(int file)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002eaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eca:	605a      	str	r2, [r3, #4]
  return 0;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <_isatty>:

int _isatty(int file)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ee2:	2301      	movs	r3, #1
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
	...

08002f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f14:	4a14      	ldr	r2, [pc, #80]	; (8002f68 <_sbrk+0x5c>)
 8002f16:	4b15      	ldr	r3, [pc, #84]	; (8002f6c <_sbrk+0x60>)
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f20:	4b13      	ldr	r3, [pc, #76]	; (8002f70 <_sbrk+0x64>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d102      	bne.n	8002f2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f28:	4b11      	ldr	r3, [pc, #68]	; (8002f70 <_sbrk+0x64>)
 8002f2a:	4a12      	ldr	r2, [pc, #72]	; (8002f74 <_sbrk+0x68>)
 8002f2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f2e:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <_sbrk+0x64>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4413      	add	r3, r2
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d207      	bcs.n	8002f4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f3c:	f004 ff0a 	bl	8007d54 <__errno>
 8002f40:	4603      	mov	r3, r0
 8002f42:	220c      	movs	r2, #12
 8002f44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f46:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4a:	e009      	b.n	8002f60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f4c:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <_sbrk+0x64>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f52:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <_sbrk+0x64>)
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4413      	add	r3, r2
 8002f5a:	4a05      	ldr	r2, [pc, #20]	; (8002f70 <_sbrk+0x64>)
 8002f5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20020000 	.word	0x20020000
 8002f6c:	00000400 	.word	0x00000400
 8002f70:	200005d4 	.word	0x200005d4
 8002f74:	20000728 	.word	0x20000728

08002f78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <SystemInit+0x20>)
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f82:	4a05      	ldr	r2, [pc, #20]	; (8002f98 <SystemInit+0x20>)
 8002f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fa0:	480d      	ldr	r0, [pc, #52]	; (8002fd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fa2:	490e      	ldr	r1, [pc, #56]	; (8002fdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fa4:	4a0e      	ldr	r2, [pc, #56]	; (8002fe0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fa8:	e002      	b.n	8002fb0 <LoopCopyDataInit>

08002faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fae:	3304      	adds	r3, #4

08002fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fb4:	d3f9      	bcc.n	8002faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fb6:	4a0b      	ldr	r2, [pc, #44]	; (8002fe4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fb8:	4c0b      	ldr	r4, [pc, #44]	; (8002fe8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fbc:	e001      	b.n	8002fc2 <LoopFillZerobss>

08002fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fc0:	3204      	adds	r2, #4

08002fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fc4:	d3fb      	bcc.n	8002fbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002fc6:	f7ff ffd7 	bl	8002f78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fca:	f004 fec9 	bl	8007d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fce:	f7ff f929 	bl	8002224 <main>
  bx  lr    
 8002fd2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002fd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fdc:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 8002fe0:	0800acc4 	.word	0x0800acc4
  ldr r2, =_sbss
 8002fe4:	2000023c 	.word	0x2000023c
  ldr r4, =_ebss
 8002fe8:	20000728 	.word	0x20000728

08002fec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fec:	e7fe      	b.n	8002fec <ADC_IRQHandler>
	...

08002ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ff4:	4b0e      	ldr	r3, [pc, #56]	; (8003030 <HAL_Init+0x40>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a0d      	ldr	r2, [pc, #52]	; (8003030 <HAL_Init+0x40>)
 8002ffa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ffe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003000:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <HAL_Init+0x40>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a0a      	ldr	r2, [pc, #40]	; (8003030 <HAL_Init+0x40>)
 8003006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800300a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800300c:	4b08      	ldr	r3, [pc, #32]	; (8003030 <HAL_Init+0x40>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a07      	ldr	r2, [pc, #28]	; (8003030 <HAL_Init+0x40>)
 8003012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003016:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003018:	2003      	movs	r0, #3
 800301a:	f000 f92b 	bl	8003274 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800301e:	2000      	movs	r0, #0
 8003020:	f000 f808 	bl	8003034 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003024:	f7ff fd04 	bl	8002a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40023c00 	.word	0x40023c00

08003034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800303c:	4b12      	ldr	r3, [pc, #72]	; (8003088 <HAL_InitTick+0x54>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4b12      	ldr	r3, [pc, #72]	; (800308c <HAL_InitTick+0x58>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	4619      	mov	r1, r3
 8003046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800304a:	fbb3 f3f1 	udiv	r3, r3, r1
 800304e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003052:	4618      	mov	r0, r3
 8003054:	f000 f943 	bl	80032de <HAL_SYSTICK_Config>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e00e      	b.n	8003080 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b0f      	cmp	r3, #15
 8003066:	d80a      	bhi.n	800307e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003068:	2200      	movs	r2, #0
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	f04f 30ff 	mov.w	r0, #4294967295
 8003070:	f000 f90b 	bl	800328a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003074:	4a06      	ldr	r2, [pc, #24]	; (8003090 <HAL_InitTick+0x5c>)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	e000      	b.n	8003080 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
}
 8003080:	4618      	mov	r0, r3
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20000068 	.word	0x20000068
 800308c:	20000070 	.word	0x20000070
 8003090:	2000006c 	.word	0x2000006c

08003094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003098:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <HAL_IncTick+0x20>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <HAL_IncTick+0x24>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4413      	add	r3, r2
 80030a4:	4a04      	ldr	r2, [pc, #16]	; (80030b8 <HAL_IncTick+0x24>)
 80030a6:	6013      	str	r3, [r2, #0]
}
 80030a8:	bf00      	nop
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	20000070 	.word	0x20000070
 80030b8:	200005d8 	.word	0x200005d8

080030bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return uwTick;
 80030c0:	4b03      	ldr	r3, [pc, #12]	; (80030d0 <HAL_GetTick+0x14>)
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	200005d8 	.word	0x200005d8

080030d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030e4:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <__NVIC_SetPriorityGrouping+0x44>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030f0:	4013      	ands	r3, r2
 80030f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003106:	4a04      	ldr	r2, [pc, #16]	; (8003118 <__NVIC_SetPriorityGrouping+0x44>)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	60d3      	str	r3, [r2, #12]
}
 800310c:	bf00      	nop
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	e000ed00 	.word	0xe000ed00

0800311c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003120:	4b04      	ldr	r3, [pc, #16]	; (8003134 <__NVIC_GetPriorityGrouping+0x18>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	0a1b      	lsrs	r3, r3, #8
 8003126:	f003 0307 	and.w	r3, r3, #7
}
 800312a:	4618      	mov	r0, r3
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	e000ed00 	.word	0xe000ed00

08003138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003146:	2b00      	cmp	r3, #0
 8003148:	db0b      	blt.n	8003162 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	f003 021f 	and.w	r2, r3, #31
 8003150:	4907      	ldr	r1, [pc, #28]	; (8003170 <__NVIC_EnableIRQ+0x38>)
 8003152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003156:	095b      	lsrs	r3, r3, #5
 8003158:	2001      	movs	r0, #1
 800315a:	fa00 f202 	lsl.w	r2, r0, r2
 800315e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	e000e100 	.word	0xe000e100

08003174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	6039      	str	r1, [r7, #0]
 800317e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003184:	2b00      	cmp	r3, #0
 8003186:	db0a      	blt.n	800319e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	b2da      	uxtb	r2, r3
 800318c:	490c      	ldr	r1, [pc, #48]	; (80031c0 <__NVIC_SetPriority+0x4c>)
 800318e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003192:	0112      	lsls	r2, r2, #4
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	440b      	add	r3, r1
 8003198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800319c:	e00a      	b.n	80031b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	4908      	ldr	r1, [pc, #32]	; (80031c4 <__NVIC_SetPriority+0x50>)
 80031a4:	79fb      	ldrb	r3, [r7, #7]
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	3b04      	subs	r3, #4
 80031ac:	0112      	lsls	r2, r2, #4
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	440b      	add	r3, r1
 80031b2:	761a      	strb	r2, [r3, #24]
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	e000e100 	.word	0xe000e100
 80031c4:	e000ed00 	.word	0xe000ed00

080031c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b089      	sub	sp, #36	; 0x24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f1c3 0307 	rsb	r3, r3, #7
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	bf28      	it	cs
 80031e6:	2304      	movcs	r3, #4
 80031e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	3304      	adds	r3, #4
 80031ee:	2b06      	cmp	r3, #6
 80031f0:	d902      	bls.n	80031f8 <NVIC_EncodePriority+0x30>
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	3b03      	subs	r3, #3
 80031f6:	e000      	b.n	80031fa <NVIC_EncodePriority+0x32>
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43da      	mvns	r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	401a      	ands	r2, r3
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003210:	f04f 31ff 	mov.w	r1, #4294967295
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	fa01 f303 	lsl.w	r3, r1, r3
 800321a:	43d9      	mvns	r1, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003220:	4313      	orrs	r3, r2
         );
}
 8003222:	4618      	mov	r0, r3
 8003224:	3724      	adds	r7, #36	; 0x24
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
	...

08003230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3b01      	subs	r3, #1
 800323c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003240:	d301      	bcc.n	8003246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003242:	2301      	movs	r3, #1
 8003244:	e00f      	b.n	8003266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003246:	4a0a      	ldr	r2, [pc, #40]	; (8003270 <SysTick_Config+0x40>)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3b01      	subs	r3, #1
 800324c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800324e:	210f      	movs	r1, #15
 8003250:	f04f 30ff 	mov.w	r0, #4294967295
 8003254:	f7ff ff8e 	bl	8003174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003258:	4b05      	ldr	r3, [pc, #20]	; (8003270 <SysTick_Config+0x40>)
 800325a:	2200      	movs	r2, #0
 800325c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800325e:	4b04      	ldr	r3, [pc, #16]	; (8003270 <SysTick_Config+0x40>)
 8003260:	2207      	movs	r2, #7
 8003262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	e000e010 	.word	0xe000e010

08003274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7ff ff29 	bl	80030d4 <__NVIC_SetPriorityGrouping>
}
 8003282:	bf00      	nop
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800328a:	b580      	push	{r7, lr}
 800328c:	b086      	sub	sp, #24
 800328e:	af00      	add	r7, sp, #0
 8003290:	4603      	mov	r3, r0
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	607a      	str	r2, [r7, #4]
 8003296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800329c:	f7ff ff3e 	bl	800311c <__NVIC_GetPriorityGrouping>
 80032a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	68b9      	ldr	r1, [r7, #8]
 80032a6:	6978      	ldr	r0, [r7, #20]
 80032a8:	f7ff ff8e 	bl	80031c8 <NVIC_EncodePriority>
 80032ac:	4602      	mov	r2, r0
 80032ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032b2:	4611      	mov	r1, r2
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff ff5d 	bl	8003174 <__NVIC_SetPriority>
}
 80032ba:	bf00      	nop
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	4603      	mov	r3, r0
 80032ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff ff31 	bl	8003138 <__NVIC_EnableIRQ>
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b082      	sub	sp, #8
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7ff ffa2 	bl	8003230 <SysTick_Config>
 80032ec:	4603      	mov	r3, r0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b084      	sub	sp, #16
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003302:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003304:	f7ff feda 	bl	80030bc <HAL_GetTick>
 8003308:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d008      	beq.n	8003328 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2280      	movs	r2, #128	; 0x80
 800331a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e052      	b.n	80033ce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0216 	bic.w	r2, r2, #22
 8003336:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695a      	ldr	r2, [r3, #20]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003346:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	2b00      	cmp	r3, #0
 800334e:	d103      	bne.n	8003358 <HAL_DMA_Abort+0x62>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003354:	2b00      	cmp	r3, #0
 8003356:	d007      	beq.n	8003368 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0208 	bic.w	r2, r2, #8
 8003366:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0201 	bic.w	r2, r2, #1
 8003376:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003378:	e013      	b.n	80033a2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800337a:	f7ff fe9f 	bl	80030bc <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b05      	cmp	r3, #5
 8003386:	d90c      	bls.n	80033a2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2203      	movs	r2, #3
 8003392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e015      	b.n	80033ce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1e4      	bne.n	800337a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b4:	223f      	movs	r2, #63	; 0x3f
 80033b6:	409a      	lsls	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d004      	beq.n	80033f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2280      	movs	r2, #128	; 0x80
 80033ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e00c      	b.n	800340e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2205      	movs	r2, #5
 80033f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0201 	bic.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
	...

0800341c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800341c:	b480      	push	{r7}
 800341e:	b089      	sub	sp, #36	; 0x24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800342a:	2300      	movs	r3, #0
 800342c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800342e:	2300      	movs	r3, #0
 8003430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003432:	2300      	movs	r3, #0
 8003434:	61fb      	str	r3, [r7, #28]
 8003436:	e159      	b.n	80036ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003438:	2201      	movs	r2, #1
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	4013      	ands	r3, r2
 800344a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	429a      	cmp	r2, r3
 8003452:	f040 8148 	bne.w	80036e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	2b01      	cmp	r3, #1
 8003460:	d005      	beq.n	800346e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800346a:	2b02      	cmp	r3, #2
 800346c:	d130      	bne.n	80034d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	2203      	movs	r2, #3
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4013      	ands	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4313      	orrs	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034a4:	2201      	movs	r2, #1
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	4013      	ands	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	091b      	lsrs	r3, r3, #4
 80034ba:	f003 0201 	and.w	r2, r3, #1
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	2b03      	cmp	r3, #3
 80034da:	d017      	beq.n	800350c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	2203      	movs	r2, #3
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4013      	ands	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	4313      	orrs	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 0303 	and.w	r3, r3, #3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d123      	bne.n	8003560 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	08da      	lsrs	r2, r3, #3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3208      	adds	r2, #8
 8003520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003524:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	220f      	movs	r2, #15
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4013      	ands	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4313      	orrs	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	08da      	lsrs	r2, r3, #3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3208      	adds	r2, #8
 800355a:	69b9      	ldr	r1, [r7, #24]
 800355c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	2203      	movs	r2, #3
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43db      	mvns	r3, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4013      	ands	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 0203 	and.w	r2, r3, #3
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4313      	orrs	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80a2 	beq.w	80036e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	4b57      	ldr	r3, [pc, #348]	; (8003704 <HAL_GPIO_Init+0x2e8>)
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	4a56      	ldr	r2, [pc, #344]	; (8003704 <HAL_GPIO_Init+0x2e8>)
 80035ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035b0:	6453      	str	r3, [r2, #68]	; 0x44
 80035b2:	4b54      	ldr	r3, [pc, #336]	; (8003704 <HAL_GPIO_Init+0x2e8>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035be:	4a52      	ldr	r2, [pc, #328]	; (8003708 <HAL_GPIO_Init+0x2ec>)
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	089b      	lsrs	r3, r3, #2
 80035c4:	3302      	adds	r3, #2
 80035c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	220f      	movs	r2, #15
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	43db      	mvns	r3, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4013      	ands	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a49      	ldr	r2, [pc, #292]	; (800370c <HAL_GPIO_Init+0x2f0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d019      	beq.n	800361e <HAL_GPIO_Init+0x202>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a48      	ldr	r2, [pc, #288]	; (8003710 <HAL_GPIO_Init+0x2f4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d013      	beq.n	800361a <HAL_GPIO_Init+0x1fe>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a47      	ldr	r2, [pc, #284]	; (8003714 <HAL_GPIO_Init+0x2f8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00d      	beq.n	8003616 <HAL_GPIO_Init+0x1fa>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a46      	ldr	r2, [pc, #280]	; (8003718 <HAL_GPIO_Init+0x2fc>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d007      	beq.n	8003612 <HAL_GPIO_Init+0x1f6>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a45      	ldr	r2, [pc, #276]	; (800371c <HAL_GPIO_Init+0x300>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d101      	bne.n	800360e <HAL_GPIO_Init+0x1f2>
 800360a:	2304      	movs	r3, #4
 800360c:	e008      	b.n	8003620 <HAL_GPIO_Init+0x204>
 800360e:	2307      	movs	r3, #7
 8003610:	e006      	b.n	8003620 <HAL_GPIO_Init+0x204>
 8003612:	2303      	movs	r3, #3
 8003614:	e004      	b.n	8003620 <HAL_GPIO_Init+0x204>
 8003616:	2302      	movs	r3, #2
 8003618:	e002      	b.n	8003620 <HAL_GPIO_Init+0x204>
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <HAL_GPIO_Init+0x204>
 800361e:	2300      	movs	r3, #0
 8003620:	69fa      	ldr	r2, [r7, #28]
 8003622:	f002 0203 	and.w	r2, r2, #3
 8003626:	0092      	lsls	r2, r2, #2
 8003628:	4093      	lsls	r3, r2
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4313      	orrs	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003630:	4935      	ldr	r1, [pc, #212]	; (8003708 <HAL_GPIO_Init+0x2ec>)
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	089b      	lsrs	r3, r3, #2
 8003636:	3302      	adds	r3, #2
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800363e:	4b38      	ldr	r3, [pc, #224]	; (8003720 <HAL_GPIO_Init+0x304>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	43db      	mvns	r3, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4013      	ands	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	4313      	orrs	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003662:	4a2f      	ldr	r2, [pc, #188]	; (8003720 <HAL_GPIO_Init+0x304>)
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003668:	4b2d      	ldr	r3, [pc, #180]	; (8003720 <HAL_GPIO_Init+0x304>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800368c:	4a24      	ldr	r2, [pc, #144]	; (8003720 <HAL_GPIO_Init+0x304>)
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003692:	4b23      	ldr	r3, [pc, #140]	; (8003720 <HAL_GPIO_Init+0x304>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	43db      	mvns	r3, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4013      	ands	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036b6:	4a1a      	ldr	r2, [pc, #104]	; (8003720 <HAL_GPIO_Init+0x304>)
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036bc:	4b18      	ldr	r3, [pc, #96]	; (8003720 <HAL_GPIO_Init+0x304>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	43db      	mvns	r3, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4013      	ands	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036e0:	4a0f      	ldr	r2, [pc, #60]	; (8003720 <HAL_GPIO_Init+0x304>)
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	3301      	adds	r3, #1
 80036ea:	61fb      	str	r3, [r7, #28]
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	2b0f      	cmp	r3, #15
 80036f0:	f67f aea2 	bls.w	8003438 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036f4:	bf00      	nop
 80036f6:	bf00      	nop
 80036f8:	3724      	adds	r7, #36	; 0x24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40023800 	.word	0x40023800
 8003708:	40013800 	.word	0x40013800
 800370c:	40020000 	.word	0x40020000
 8003710:	40020400 	.word	0x40020400
 8003714:	40020800 	.word	0x40020800
 8003718:	40020c00 	.word	0x40020c00
 800371c:	40021000 	.word	0x40021000
 8003720:	40013c00 	.word	0x40013c00

08003724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	807b      	strh	r3, [r7, #2]
 8003730:	4613      	mov	r3, r2
 8003732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003734:	787b      	ldrb	r3, [r7, #1]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800373a:	887a      	ldrh	r2, [r7, #2]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003740:	e003      	b.n	800374a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003742:	887b      	ldrh	r3, [r7, #2]
 8003744:	041a      	lsls	r2, r3, #16
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	619a      	str	r2, [r3, #24]
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
	...

08003758 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e267      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d075      	beq.n	8003862 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003776:	4b88      	ldr	r3, [pc, #544]	; (8003998 <HAL_RCC_OscConfig+0x240>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 030c 	and.w	r3, r3, #12
 800377e:	2b04      	cmp	r3, #4
 8003780:	d00c      	beq.n	800379c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003782:	4b85      	ldr	r3, [pc, #532]	; (8003998 <HAL_RCC_OscConfig+0x240>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800378a:	2b08      	cmp	r3, #8
 800378c:	d112      	bne.n	80037b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800378e:	4b82      	ldr	r3, [pc, #520]	; (8003998 <HAL_RCC_OscConfig+0x240>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800379a:	d10b      	bne.n	80037b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800379c:	4b7e      	ldr	r3, [pc, #504]	; (8003998 <HAL_RCC_OscConfig+0x240>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d05b      	beq.n	8003860 <HAL_RCC_OscConfig+0x108>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d157      	bne.n	8003860 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e242      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037bc:	d106      	bne.n	80037cc <HAL_RCC_OscConfig+0x74>
 80037be:	4b76      	ldr	r3, [pc, #472]	; (8003998 <HAL_RCC_OscConfig+0x240>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a75      	ldr	r2, [pc, #468]	; (8003998 <HAL_RCC_OscConfig+0x240>)
 80037c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	e01d      	b.n	8003808 <HAL_RCC_OscConfig+0xb0>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037d4:	d10c      	bne.n	80037f0 <HAL_RCC_OscConfig+0x98>
 80037d6:	4b70      	ldr	r3, [pc, #448]	; (8003998 <HAL_RCC_OscConfig+0x240>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a6f      	ldr	r2, [pc, #444]	; (8003998 <HAL_RCC_OscConfig+0x240>)
 80037dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	4b6d      	ldr	r3, [pc, #436]	; (8003998 <HAL_RCC_OscConfig+0x240>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a6c      	ldr	r2, [pc, #432]	; (8003998 <HAL_RCC_OscConfig+0x240>)
 80037e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	e00b      	b.n	8003808 <HAL_RCC_OscConfig+0xb0>
 80037f0:	4b69      	ldr	r3, [pc, #420]	; (8003998 <HAL_RCC_OscConfig+0x240>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a68      	ldr	r2, [pc, #416]	; (8003998 <HAL_RCC_OscConfig+0x240>)
 80037f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037fa:	6013      	str	r3, [r2, #0]
 80037fc:	4b66      	ldr	r3, [pc, #408]	; (8003998 <HAL_RCC_OscConfig+0x240>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a65      	ldr	r2, [pc, #404]	; (8003998 <HAL_RCC_OscConfig+0x240>)
 8003802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d013      	beq.n	8003838 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003810:	f7ff fc54 	bl	80030bc <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003818:	f7ff fc50 	bl	80030bc <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b64      	cmp	r3, #100	; 0x64
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e207      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382a:	4b5b      	ldr	r3, [pc, #364]	; (8003998 <HAL_RCC_OscConfig+0x240>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0f0      	beq.n	8003818 <HAL_RCC_OscConfig+0xc0>
 8003836:	e014      	b.n	8003862 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003838:	f7ff fc40 	bl	80030bc <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003840:	f7ff fc3c 	bl	80030bc <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	; 0x64
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e1f3      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003852:	4b51      	ldr	r3, [pc, #324]	; (8003998 <HAL_RCC_OscConfig+0x240>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f0      	bne.n	8003840 <HAL_RCC_OscConfig+0xe8>
 800385e:	e000      	b.n	8003862 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d063      	beq.n	8003936 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800386e:	4b4a      	ldr	r3, [pc, #296]	; (8003998 <HAL_RCC_OscConfig+0x240>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 030c 	and.w	r3, r3, #12
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00b      	beq.n	8003892 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800387a:	4b47      	ldr	r3, [pc, #284]	; (8003998 <HAL_RCC_OscConfig+0x240>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003882:	2b08      	cmp	r3, #8
 8003884:	d11c      	bne.n	80038c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003886:	4b44      	ldr	r3, [pc, #272]	; (8003998 <HAL_RCC_OscConfig+0x240>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d116      	bne.n	80038c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003892:	4b41      	ldr	r3, [pc, #260]	; (8003998 <HAL_RCC_OscConfig+0x240>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d005      	beq.n	80038aa <HAL_RCC_OscConfig+0x152>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d001      	beq.n	80038aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e1c7      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038aa:	4b3b      	ldr	r3, [pc, #236]	; (8003998 <HAL_RCC_OscConfig+0x240>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	4937      	ldr	r1, [pc, #220]	; (8003998 <HAL_RCC_OscConfig+0x240>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038be:	e03a      	b.n	8003936 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d020      	beq.n	800390a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038c8:	4b34      	ldr	r3, [pc, #208]	; (800399c <HAL_RCC_OscConfig+0x244>)
 80038ca:	2201      	movs	r2, #1
 80038cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ce:	f7ff fbf5 	bl	80030bc <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038d6:	f7ff fbf1 	bl	80030bc <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e1a8      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e8:	4b2b      	ldr	r3, [pc, #172]	; (8003998 <HAL_RCC_OscConfig+0x240>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0f0      	beq.n	80038d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f4:	4b28      	ldr	r3, [pc, #160]	; (8003998 <HAL_RCC_OscConfig+0x240>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	4925      	ldr	r1, [pc, #148]	; (8003998 <HAL_RCC_OscConfig+0x240>)
 8003904:	4313      	orrs	r3, r2
 8003906:	600b      	str	r3, [r1, #0]
 8003908:	e015      	b.n	8003936 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800390a:	4b24      	ldr	r3, [pc, #144]	; (800399c <HAL_RCC_OscConfig+0x244>)
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7ff fbd4 	bl	80030bc <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003918:	f7ff fbd0 	bl	80030bc <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e187      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800392a:	4b1b      	ldr	r3, [pc, #108]	; (8003998 <HAL_RCC_OscConfig+0x240>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f0      	bne.n	8003918 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d036      	beq.n	80039b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d016      	beq.n	8003978 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800394a:	4b15      	ldr	r3, [pc, #84]	; (80039a0 <HAL_RCC_OscConfig+0x248>)
 800394c:	2201      	movs	r2, #1
 800394e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003950:	f7ff fbb4 	bl	80030bc <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003958:	f7ff fbb0 	bl	80030bc <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e167      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800396a:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <HAL_RCC_OscConfig+0x240>)
 800396c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0f0      	beq.n	8003958 <HAL_RCC_OscConfig+0x200>
 8003976:	e01b      	b.n	80039b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003978:	4b09      	ldr	r3, [pc, #36]	; (80039a0 <HAL_RCC_OscConfig+0x248>)
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800397e:	f7ff fb9d 	bl	80030bc <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003984:	e00e      	b.n	80039a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003986:	f7ff fb99 	bl	80030bc <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d907      	bls.n	80039a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e150      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
 8003998:	40023800 	.word	0x40023800
 800399c:	42470000 	.word	0x42470000
 80039a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a4:	4b88      	ldr	r3, [pc, #544]	; (8003bc8 <HAL_RCC_OscConfig+0x470>)
 80039a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1ea      	bne.n	8003986 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 8097 	beq.w	8003aec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039be:	2300      	movs	r3, #0
 80039c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039c2:	4b81      	ldr	r3, [pc, #516]	; (8003bc8 <HAL_RCC_OscConfig+0x470>)
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10f      	bne.n	80039ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ce:	2300      	movs	r3, #0
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	4b7d      	ldr	r3, [pc, #500]	; (8003bc8 <HAL_RCC_OscConfig+0x470>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	4a7c      	ldr	r2, [pc, #496]	; (8003bc8 <HAL_RCC_OscConfig+0x470>)
 80039d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039dc:	6413      	str	r3, [r2, #64]	; 0x40
 80039de:	4b7a      	ldr	r3, [pc, #488]	; (8003bc8 <HAL_RCC_OscConfig+0x470>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e6:	60bb      	str	r3, [r7, #8]
 80039e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ea:	2301      	movs	r3, #1
 80039ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ee:	4b77      	ldr	r3, [pc, #476]	; (8003bcc <HAL_RCC_OscConfig+0x474>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d118      	bne.n	8003a2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039fa:	4b74      	ldr	r3, [pc, #464]	; (8003bcc <HAL_RCC_OscConfig+0x474>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a73      	ldr	r2, [pc, #460]	; (8003bcc <HAL_RCC_OscConfig+0x474>)
 8003a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a06:	f7ff fb59 	bl	80030bc <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a0e:	f7ff fb55 	bl	80030bc <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e10c      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a20:	4b6a      	ldr	r3, [pc, #424]	; (8003bcc <HAL_RCC_OscConfig+0x474>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0f0      	beq.n	8003a0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d106      	bne.n	8003a42 <HAL_RCC_OscConfig+0x2ea>
 8003a34:	4b64      	ldr	r3, [pc, #400]	; (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a38:	4a63      	ldr	r2, [pc, #396]	; (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003a3a:	f043 0301 	orr.w	r3, r3, #1
 8003a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a40:	e01c      	b.n	8003a7c <HAL_RCC_OscConfig+0x324>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b05      	cmp	r3, #5
 8003a48:	d10c      	bne.n	8003a64 <HAL_RCC_OscConfig+0x30c>
 8003a4a:	4b5f      	ldr	r3, [pc, #380]	; (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4e:	4a5e      	ldr	r2, [pc, #376]	; (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003a50:	f043 0304 	orr.w	r3, r3, #4
 8003a54:	6713      	str	r3, [r2, #112]	; 0x70
 8003a56:	4b5c      	ldr	r3, [pc, #368]	; (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5a:	4a5b      	ldr	r2, [pc, #364]	; (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	6713      	str	r3, [r2, #112]	; 0x70
 8003a62:	e00b      	b.n	8003a7c <HAL_RCC_OscConfig+0x324>
 8003a64:	4b58      	ldr	r3, [pc, #352]	; (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a68:	4a57      	ldr	r2, [pc, #348]	; (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003a6a:	f023 0301 	bic.w	r3, r3, #1
 8003a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a70:	4b55      	ldr	r3, [pc, #340]	; (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a74:	4a54      	ldr	r2, [pc, #336]	; (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003a76:	f023 0304 	bic.w	r3, r3, #4
 8003a7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d015      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a84:	f7ff fb1a 	bl	80030bc <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a8a:	e00a      	b.n	8003aa2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a8c:	f7ff fb16 	bl	80030bc <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e0cb      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa2:	4b49      	ldr	r3, [pc, #292]	; (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0ee      	beq.n	8003a8c <HAL_RCC_OscConfig+0x334>
 8003aae:	e014      	b.n	8003ada <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab0:	f7ff fb04 	bl	80030bc <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab6:	e00a      	b.n	8003ace <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ab8:	f7ff fb00 	bl	80030bc <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e0b5      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ace:	4b3e      	ldr	r3, [pc, #248]	; (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1ee      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ada:	7dfb      	ldrb	r3, [r7, #23]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d105      	bne.n	8003aec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ae0:	4b39      	ldr	r3, [pc, #228]	; (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	4a38      	ldr	r2, [pc, #224]	; (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003ae6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 80a1 	beq.w	8003c38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003af6:	4b34      	ldr	r3, [pc, #208]	; (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 030c 	and.w	r3, r3, #12
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d05c      	beq.n	8003bbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d141      	bne.n	8003b8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b0a:	4b31      	ldr	r3, [pc, #196]	; (8003bd0 <HAL_RCC_OscConfig+0x478>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b10:	f7ff fad4 	bl	80030bc <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b18:	f7ff fad0 	bl	80030bc <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e087      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b2a:	4b27      	ldr	r3, [pc, #156]	; (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f0      	bne.n	8003b18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	69da      	ldr	r2, [r3, #28]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	019b      	lsls	r3, r3, #6
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4c:	085b      	lsrs	r3, r3, #1
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	041b      	lsls	r3, r3, #16
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	061b      	lsls	r3, r3, #24
 8003b5a:	491b      	ldr	r1, [pc, #108]	; (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b60:	4b1b      	ldr	r3, [pc, #108]	; (8003bd0 <HAL_RCC_OscConfig+0x478>)
 8003b62:	2201      	movs	r2, #1
 8003b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b66:	f7ff faa9 	bl	80030bc <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b6e:	f7ff faa5 	bl	80030bc <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e05c      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b80:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0f0      	beq.n	8003b6e <HAL_RCC_OscConfig+0x416>
 8003b8c:	e054      	b.n	8003c38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b8e:	4b10      	ldr	r3, [pc, #64]	; (8003bd0 <HAL_RCC_OscConfig+0x478>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b94:	f7ff fa92 	bl	80030bc <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b9c:	f7ff fa8e 	bl	80030bc <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e045      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bae:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <HAL_RCC_OscConfig+0x470>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f0      	bne.n	8003b9c <HAL_RCC_OscConfig+0x444>
 8003bba:	e03d      	b.n	8003c38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d107      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e038      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	40007000 	.word	0x40007000
 8003bd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bd4:	4b1b      	ldr	r3, [pc, #108]	; (8003c44 <HAL_RCC_OscConfig+0x4ec>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d028      	beq.n	8003c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d121      	bne.n	8003c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d11a      	bne.n	8003c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c04:	4013      	ands	r3, r2
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d111      	bne.n	8003c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1a:	085b      	lsrs	r3, r3, #1
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d107      	bne.n	8003c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d001      	beq.n	8003c38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e000      	b.n	8003c3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40023800 	.word	0x40023800

08003c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e0cc      	b.n	8003df6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c5c:	4b68      	ldr	r3, [pc, #416]	; (8003e00 <HAL_RCC_ClockConfig+0x1b8>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d90c      	bls.n	8003c84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c6a:	4b65      	ldr	r3, [pc, #404]	; (8003e00 <HAL_RCC_ClockConfig+0x1b8>)
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c72:	4b63      	ldr	r3, [pc, #396]	; (8003e00 <HAL_RCC_ClockConfig+0x1b8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d001      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e0b8      	b.n	8003df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d020      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d005      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c9c:	4b59      	ldr	r3, [pc, #356]	; (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	4a58      	ldr	r2, [pc, #352]	; (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ca6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cb4:	4b53      	ldr	r3, [pc, #332]	; (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	4a52      	ldr	r2, [pc, #328]	; (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003cba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cc0:	4b50      	ldr	r3, [pc, #320]	; (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	494d      	ldr	r1, [pc, #308]	; (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d044      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d107      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce6:	4b47      	ldr	r3, [pc, #284]	; (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d119      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e07f      	b.n	8003df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d003      	beq.n	8003d06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d02:	2b03      	cmp	r3, #3
 8003d04:	d107      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d06:	4b3f      	ldr	r3, [pc, #252]	; (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d109      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e06f      	b.n	8003df6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d16:	4b3b      	ldr	r3, [pc, #236]	; (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e067      	b.n	8003df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d26:	4b37      	ldr	r3, [pc, #220]	; (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f023 0203 	bic.w	r2, r3, #3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	4934      	ldr	r1, [pc, #208]	; (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d38:	f7ff f9c0 	bl	80030bc <HAL_GetTick>
 8003d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3e:	e00a      	b.n	8003d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d40:	f7ff f9bc 	bl	80030bc <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e04f      	b.n	8003df6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d56:	4b2b      	ldr	r3, [pc, #172]	; (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 020c 	and.w	r2, r3, #12
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d1eb      	bne.n	8003d40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d68:	4b25      	ldr	r3, [pc, #148]	; (8003e00 <HAL_RCC_ClockConfig+0x1b8>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d20c      	bcs.n	8003d90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d76:	4b22      	ldr	r3, [pc, #136]	; (8003e00 <HAL_RCC_ClockConfig+0x1b8>)
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7e:	4b20      	ldr	r3, [pc, #128]	; (8003e00 <HAL_RCC_ClockConfig+0x1b8>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e032      	b.n	8003df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d008      	beq.n	8003dae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d9c:	4b19      	ldr	r3, [pc, #100]	; (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	4916      	ldr	r1, [pc, #88]	; (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d009      	beq.n	8003dce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dba:	4b12      	ldr	r3, [pc, #72]	; (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	490e      	ldr	r1, [pc, #56]	; (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dce:	f000 f821 	bl	8003e14 <HAL_RCC_GetSysClockFreq>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	091b      	lsrs	r3, r3, #4
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	490a      	ldr	r1, [pc, #40]	; (8003e08 <HAL_RCC_ClockConfig+0x1c0>)
 8003de0:	5ccb      	ldrb	r3, [r1, r3]
 8003de2:	fa22 f303 	lsr.w	r3, r2, r3
 8003de6:	4a09      	ldr	r2, [pc, #36]	; (8003e0c <HAL_RCC_ClockConfig+0x1c4>)
 8003de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dea:	4b09      	ldr	r3, [pc, #36]	; (8003e10 <HAL_RCC_ClockConfig+0x1c8>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff f920 	bl	8003034 <HAL_InitTick>

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40023c00 	.word	0x40023c00
 8003e04:	40023800 	.word	0x40023800
 8003e08:	0800a870 	.word	0x0800a870
 8003e0c:	20000068 	.word	0x20000068
 8003e10:	2000006c 	.word	0x2000006c

08003e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e18:	b094      	sub	sp, #80	; 0x50
 8003e1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e20:	2300      	movs	r3, #0
 8003e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e24:	2300      	movs	r3, #0
 8003e26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e2c:	4b79      	ldr	r3, [pc, #484]	; (8004014 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 030c 	and.w	r3, r3, #12
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d00d      	beq.n	8003e54 <HAL_RCC_GetSysClockFreq+0x40>
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	f200 80e1 	bhi.w	8004000 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <HAL_RCC_GetSysClockFreq+0x34>
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d003      	beq.n	8003e4e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e46:	e0db      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e48:	4b73      	ldr	r3, [pc, #460]	; (8004018 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e4c:	e0db      	b.n	8004006 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e4e:	4b73      	ldr	r3, [pc, #460]	; (800401c <HAL_RCC_GetSysClockFreq+0x208>)
 8003e50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e52:	e0d8      	b.n	8004006 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e54:	4b6f      	ldr	r3, [pc, #444]	; (8004014 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e5e:	4b6d      	ldr	r3, [pc, #436]	; (8004014 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d063      	beq.n	8003f32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e6a:	4b6a      	ldr	r3, [pc, #424]	; (8004014 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	099b      	lsrs	r3, r3, #6
 8003e70:	2200      	movs	r2, #0
 8003e72:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e7c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e7e:	2300      	movs	r3, #0
 8003e80:	637b      	str	r3, [r7, #52]	; 0x34
 8003e82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e86:	4622      	mov	r2, r4
 8003e88:	462b      	mov	r3, r5
 8003e8a:	f04f 0000 	mov.w	r0, #0
 8003e8e:	f04f 0100 	mov.w	r1, #0
 8003e92:	0159      	lsls	r1, r3, #5
 8003e94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e98:	0150      	lsls	r0, r2, #5
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	4621      	mov	r1, r4
 8003ea0:	1a51      	subs	r1, r2, r1
 8003ea2:	6139      	str	r1, [r7, #16]
 8003ea4:	4629      	mov	r1, r5
 8003ea6:	eb63 0301 	sbc.w	r3, r3, r1
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	f04f 0300 	mov.w	r3, #0
 8003eb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003eb8:	4659      	mov	r1, fp
 8003eba:	018b      	lsls	r3, r1, #6
 8003ebc:	4651      	mov	r1, sl
 8003ebe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ec2:	4651      	mov	r1, sl
 8003ec4:	018a      	lsls	r2, r1, #6
 8003ec6:	4651      	mov	r1, sl
 8003ec8:	ebb2 0801 	subs.w	r8, r2, r1
 8003ecc:	4659      	mov	r1, fp
 8003ece:	eb63 0901 	sbc.w	r9, r3, r1
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ede:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ee2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ee6:	4690      	mov	r8, r2
 8003ee8:	4699      	mov	r9, r3
 8003eea:	4623      	mov	r3, r4
 8003eec:	eb18 0303 	adds.w	r3, r8, r3
 8003ef0:	60bb      	str	r3, [r7, #8]
 8003ef2:	462b      	mov	r3, r5
 8003ef4:	eb49 0303 	adc.w	r3, r9, r3
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f06:	4629      	mov	r1, r5
 8003f08:	024b      	lsls	r3, r1, #9
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f10:	4621      	mov	r1, r4
 8003f12:	024a      	lsls	r2, r1, #9
 8003f14:	4610      	mov	r0, r2
 8003f16:	4619      	mov	r1, r3
 8003f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f24:	f7fc feb8 	bl	8000c98 <__aeabi_uldivmod>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f30:	e058      	b.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f32:	4b38      	ldr	r3, [pc, #224]	; (8004014 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	099b      	lsrs	r3, r3, #6
 8003f38:	2200      	movs	r2, #0
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f42:	623b      	str	r3, [r7, #32]
 8003f44:	2300      	movs	r3, #0
 8003f46:	627b      	str	r3, [r7, #36]	; 0x24
 8003f48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f4c:	4642      	mov	r2, r8
 8003f4e:	464b      	mov	r3, r9
 8003f50:	f04f 0000 	mov.w	r0, #0
 8003f54:	f04f 0100 	mov.w	r1, #0
 8003f58:	0159      	lsls	r1, r3, #5
 8003f5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f5e:	0150      	lsls	r0, r2, #5
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4641      	mov	r1, r8
 8003f66:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f6a:	4649      	mov	r1, r9
 8003f6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f84:	ebb2 040a 	subs.w	r4, r2, sl
 8003f88:	eb63 050b 	sbc.w	r5, r3, fp
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	00eb      	lsls	r3, r5, #3
 8003f96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f9a:	00e2      	lsls	r2, r4, #3
 8003f9c:	4614      	mov	r4, r2
 8003f9e:	461d      	mov	r5, r3
 8003fa0:	4643      	mov	r3, r8
 8003fa2:	18e3      	adds	r3, r4, r3
 8003fa4:	603b      	str	r3, [r7, #0]
 8003fa6:	464b      	mov	r3, r9
 8003fa8:	eb45 0303 	adc.w	r3, r5, r3
 8003fac:	607b      	str	r3, [r7, #4]
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	f04f 0300 	mov.w	r3, #0
 8003fb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fba:	4629      	mov	r1, r5
 8003fbc:	028b      	lsls	r3, r1, #10
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	028a      	lsls	r2, r1, #10
 8003fc8:	4610      	mov	r0, r2
 8003fca:	4619      	mov	r1, r3
 8003fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fce:	2200      	movs	r2, #0
 8003fd0:	61bb      	str	r3, [r7, #24]
 8003fd2:	61fa      	str	r2, [r7, #28]
 8003fd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fd8:	f7fc fe5e 	bl	8000c98 <__aeabi_uldivmod>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	0c1b      	lsrs	r3, r3, #16
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	3301      	adds	r3, #1
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ff4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ffe:	e002      	b.n	8004006 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004000:	4b05      	ldr	r3, [pc, #20]	; (8004018 <HAL_RCC_GetSysClockFreq+0x204>)
 8004002:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004004:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004008:	4618      	mov	r0, r3
 800400a:	3750      	adds	r7, #80	; 0x50
 800400c:	46bd      	mov	sp, r7
 800400e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004012:	bf00      	nop
 8004014:	40023800 	.word	0x40023800
 8004018:	00f42400 	.word	0x00f42400
 800401c:	007a1200 	.word	0x007a1200

08004020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004024:	4b03      	ldr	r3, [pc, #12]	; (8004034 <HAL_RCC_GetHCLKFreq+0x14>)
 8004026:	681b      	ldr	r3, [r3, #0]
}
 8004028:	4618      	mov	r0, r3
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	20000068 	.word	0x20000068

08004038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800403c:	f7ff fff0 	bl	8004020 <HAL_RCC_GetHCLKFreq>
 8004040:	4602      	mov	r2, r0
 8004042:	4b05      	ldr	r3, [pc, #20]	; (8004058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	0a9b      	lsrs	r3, r3, #10
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	4903      	ldr	r1, [pc, #12]	; (800405c <HAL_RCC_GetPCLK1Freq+0x24>)
 800404e:	5ccb      	ldrb	r3, [r1, r3]
 8004050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004054:	4618      	mov	r0, r3
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40023800 	.word	0x40023800
 800405c:	0800a880 	.word	0x0800a880

08004060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004064:	f7ff ffdc 	bl	8004020 <HAL_RCC_GetHCLKFreq>
 8004068:	4602      	mov	r2, r0
 800406a:	4b05      	ldr	r3, [pc, #20]	; (8004080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	0b5b      	lsrs	r3, r3, #13
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	4903      	ldr	r1, [pc, #12]	; (8004084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004076:	5ccb      	ldrb	r3, [r1, r3]
 8004078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800407c:	4618      	mov	r0, r3
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40023800 	.word	0x40023800
 8004084:	0800a880 	.word	0x0800a880

08004088 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e041      	b.n	800411e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d106      	bne.n	80040b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7fe fce6 	bl	8002a80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3304      	adds	r3, #4
 80040c4:	4619      	mov	r1, r3
 80040c6:	4610      	mov	r0, r2
 80040c8:	f000 fb1a 	bl	8004700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b082      	sub	sp, #8
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e041      	b.n	80041bc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	d106      	bne.n	8004152 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7fe fcb9 	bl	8002ac4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2202      	movs	r2, #2
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3304      	adds	r3, #4
 8004162:	4619      	mov	r1, r3
 8004164:	4610      	mov	r0, r2
 8004166:	f000 facb 	bl	8004700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d109      	bne.n	80041e8 <HAL_TIM_PWM_Start+0x24>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b01      	cmp	r3, #1
 80041de:	bf14      	ite	ne
 80041e0:	2301      	movne	r3, #1
 80041e2:	2300      	moveq	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	e022      	b.n	800422e <HAL_TIM_PWM_Start+0x6a>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d109      	bne.n	8004202 <HAL_TIM_PWM_Start+0x3e>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	bf14      	ite	ne
 80041fa:	2301      	movne	r3, #1
 80041fc:	2300      	moveq	r3, #0
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	e015      	b.n	800422e <HAL_TIM_PWM_Start+0x6a>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b08      	cmp	r3, #8
 8004206:	d109      	bne.n	800421c <HAL_TIM_PWM_Start+0x58>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b01      	cmp	r3, #1
 8004212:	bf14      	ite	ne
 8004214:	2301      	movne	r3, #1
 8004216:	2300      	moveq	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	e008      	b.n	800422e <HAL_TIM_PWM_Start+0x6a>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b01      	cmp	r3, #1
 8004226:	bf14      	ite	ne
 8004228:	2301      	movne	r3, #1
 800422a:	2300      	moveq	r3, #0
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e068      	b.n	8004308 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d104      	bne.n	8004246 <HAL_TIM_PWM_Start+0x82>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004244:	e013      	b.n	800426e <HAL_TIM_PWM_Start+0xaa>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b04      	cmp	r3, #4
 800424a:	d104      	bne.n	8004256 <HAL_TIM_PWM_Start+0x92>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004254:	e00b      	b.n	800426e <HAL_TIM_PWM_Start+0xaa>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b08      	cmp	r3, #8
 800425a:	d104      	bne.n	8004266 <HAL_TIM_PWM_Start+0xa2>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004264:	e003      	b.n	800426e <HAL_TIM_PWM_Start+0xaa>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2202      	movs	r2, #2
 800426a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2201      	movs	r2, #1
 8004274:	6839      	ldr	r1, [r7, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f000 fce8 	bl	8004c4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a23      	ldr	r2, [pc, #140]	; (8004310 <HAL_TIM_PWM_Start+0x14c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d107      	bne.n	8004296 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004294:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a1d      	ldr	r2, [pc, #116]	; (8004310 <HAL_TIM_PWM_Start+0x14c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d018      	beq.n	80042d2 <HAL_TIM_PWM_Start+0x10e>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a8:	d013      	beq.n	80042d2 <HAL_TIM_PWM_Start+0x10e>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a19      	ldr	r2, [pc, #100]	; (8004314 <HAL_TIM_PWM_Start+0x150>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d00e      	beq.n	80042d2 <HAL_TIM_PWM_Start+0x10e>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a17      	ldr	r2, [pc, #92]	; (8004318 <HAL_TIM_PWM_Start+0x154>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d009      	beq.n	80042d2 <HAL_TIM_PWM_Start+0x10e>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a16      	ldr	r2, [pc, #88]	; (800431c <HAL_TIM_PWM_Start+0x158>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d004      	beq.n	80042d2 <HAL_TIM_PWM_Start+0x10e>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a14      	ldr	r2, [pc, #80]	; (8004320 <HAL_TIM_PWM_Start+0x15c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d111      	bne.n	80042f6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b06      	cmp	r3, #6
 80042e2:	d010      	beq.n	8004306 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 0201 	orr.w	r2, r2, #1
 80042f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f4:	e007      	b.n	8004306 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 0201 	orr.w	r2, r2, #1
 8004304:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40010000 	.word	0x40010000
 8004314:	40000400 	.word	0x40000400
 8004318:	40000800 	.word	0x40000800
 800431c:	40000c00 	.word	0x40000c00
 8004320:	40014000 	.word	0x40014000

08004324 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2200      	movs	r2, #0
 8004334:	6839      	ldr	r1, [r7, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f000 fc88 	bl	8004c4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a29      	ldr	r2, [pc, #164]	; (80043e8 <HAL_TIM_PWM_Stop+0xc4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d117      	bne.n	8004376 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6a1a      	ldr	r2, [r3, #32]
 800434c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004350:	4013      	ands	r3, r2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10f      	bne.n	8004376 <HAL_TIM_PWM_Stop+0x52>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6a1a      	ldr	r2, [r3, #32]
 800435c:	f240 4344 	movw	r3, #1092	; 0x444
 8004360:	4013      	ands	r3, r2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d107      	bne.n	8004376 <HAL_TIM_PWM_Stop+0x52>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004374:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6a1a      	ldr	r2, [r3, #32]
 800437c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004380:	4013      	ands	r3, r2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10f      	bne.n	80043a6 <HAL_TIM_PWM_Stop+0x82>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6a1a      	ldr	r2, [r3, #32]
 800438c:	f240 4344 	movw	r3, #1092	; 0x444
 8004390:	4013      	ands	r3, r2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d107      	bne.n	80043a6 <HAL_TIM_PWM_Stop+0x82>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0201 	bic.w	r2, r2, #1
 80043a4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d104      	bne.n	80043b6 <HAL_TIM_PWM_Stop+0x92>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043b4:	e013      	b.n	80043de <HAL_TIM_PWM_Stop+0xba>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d104      	bne.n	80043c6 <HAL_TIM_PWM_Stop+0xa2>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043c4:	e00b      	b.n	80043de <HAL_TIM_PWM_Stop+0xba>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d104      	bne.n	80043d6 <HAL_TIM_PWM_Stop+0xb2>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043d4:	e003      	b.n	80043de <HAL_TIM_PWM_Stop+0xba>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40010000 	.word	0x40010000

080043ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004402:	2b01      	cmp	r3, #1
 8004404:	d101      	bne.n	800440a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004406:	2302      	movs	r3, #2
 8004408:	e0ae      	b.n	8004568 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b0c      	cmp	r3, #12
 8004416:	f200 809f 	bhi.w	8004558 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800441a:	a201      	add	r2, pc, #4	; (adr r2, 8004420 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800441c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004420:	08004455 	.word	0x08004455
 8004424:	08004559 	.word	0x08004559
 8004428:	08004559 	.word	0x08004559
 800442c:	08004559 	.word	0x08004559
 8004430:	08004495 	.word	0x08004495
 8004434:	08004559 	.word	0x08004559
 8004438:	08004559 	.word	0x08004559
 800443c:	08004559 	.word	0x08004559
 8004440:	080044d7 	.word	0x080044d7
 8004444:	08004559 	.word	0x08004559
 8004448:	08004559 	.word	0x08004559
 800444c:	08004559 	.word	0x08004559
 8004450:	08004517 	.word	0x08004517
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68b9      	ldr	r1, [r7, #8]
 800445a:	4618      	mov	r0, r3
 800445c:	f000 f9d0 	bl	8004800 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699a      	ldr	r2, [r3, #24]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0208 	orr.w	r2, r2, #8
 800446e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699a      	ldr	r2, [r3, #24]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0204 	bic.w	r2, r2, #4
 800447e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6999      	ldr	r1, [r3, #24]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	619a      	str	r2, [r3, #24]
      break;
 8004492:	e064      	b.n	800455e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68b9      	ldr	r1, [r7, #8]
 800449a:	4618      	mov	r0, r3
 800449c:	f000 fa16 	bl	80048cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699a      	ldr	r2, [r3, #24]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699a      	ldr	r2, [r3, #24]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6999      	ldr	r1, [r3, #24]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	021a      	lsls	r2, r3, #8
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	619a      	str	r2, [r3, #24]
      break;
 80044d4:	e043      	b.n	800455e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68b9      	ldr	r1, [r7, #8]
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 fa61 	bl	80049a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69da      	ldr	r2, [r3, #28]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f042 0208 	orr.w	r2, r2, #8
 80044f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	69da      	ldr	r2, [r3, #28]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0204 	bic.w	r2, r2, #4
 8004500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69d9      	ldr	r1, [r3, #28]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	691a      	ldr	r2, [r3, #16]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	61da      	str	r2, [r3, #28]
      break;
 8004514:	e023      	b.n	800455e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68b9      	ldr	r1, [r7, #8]
 800451c:	4618      	mov	r0, r3
 800451e:	f000 faab 	bl	8004a78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	69da      	ldr	r2, [r3, #28]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	69da      	ldr	r2, [r3, #28]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	69d9      	ldr	r1, [r3, #28]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	021a      	lsls	r2, r3, #8
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	61da      	str	r2, [r3, #28]
      break;
 8004556:	e002      	b.n	800455e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	75fb      	strb	r3, [r7, #23]
      break;
 800455c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004566:	7dfb      	ldrb	r3, [r7, #23]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3718      	adds	r7, #24
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004584:	2b01      	cmp	r3, #1
 8004586:	d101      	bne.n	800458c <HAL_TIM_ConfigClockSource+0x1c>
 8004588:	2302      	movs	r3, #2
 800458a:	e0b4      	b.n	80046f6 <HAL_TIM_ConfigClockSource+0x186>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045c4:	d03e      	beq.n	8004644 <HAL_TIM_ConfigClockSource+0xd4>
 80045c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ca:	f200 8087 	bhi.w	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 80045ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d2:	f000 8086 	beq.w	80046e2 <HAL_TIM_ConfigClockSource+0x172>
 80045d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045da:	d87f      	bhi.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 80045dc:	2b70      	cmp	r3, #112	; 0x70
 80045de:	d01a      	beq.n	8004616 <HAL_TIM_ConfigClockSource+0xa6>
 80045e0:	2b70      	cmp	r3, #112	; 0x70
 80045e2:	d87b      	bhi.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 80045e4:	2b60      	cmp	r3, #96	; 0x60
 80045e6:	d050      	beq.n	800468a <HAL_TIM_ConfigClockSource+0x11a>
 80045e8:	2b60      	cmp	r3, #96	; 0x60
 80045ea:	d877      	bhi.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 80045ec:	2b50      	cmp	r3, #80	; 0x50
 80045ee:	d03c      	beq.n	800466a <HAL_TIM_ConfigClockSource+0xfa>
 80045f0:	2b50      	cmp	r3, #80	; 0x50
 80045f2:	d873      	bhi.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 80045f4:	2b40      	cmp	r3, #64	; 0x40
 80045f6:	d058      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0x13a>
 80045f8:	2b40      	cmp	r3, #64	; 0x40
 80045fa:	d86f      	bhi.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 80045fc:	2b30      	cmp	r3, #48	; 0x30
 80045fe:	d064      	beq.n	80046ca <HAL_TIM_ConfigClockSource+0x15a>
 8004600:	2b30      	cmp	r3, #48	; 0x30
 8004602:	d86b      	bhi.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 8004604:	2b20      	cmp	r3, #32
 8004606:	d060      	beq.n	80046ca <HAL_TIM_ConfigClockSource+0x15a>
 8004608:	2b20      	cmp	r3, #32
 800460a:	d867      	bhi.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 800460c:	2b00      	cmp	r3, #0
 800460e:	d05c      	beq.n	80046ca <HAL_TIM_ConfigClockSource+0x15a>
 8004610:	2b10      	cmp	r3, #16
 8004612:	d05a      	beq.n	80046ca <HAL_TIM_ConfigClockSource+0x15a>
 8004614:	e062      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	6899      	ldr	r1, [r3, #8]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f000 faf1 	bl	8004c0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004638:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	609a      	str	r2, [r3, #8]
      break;
 8004642:	e04f      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6818      	ldr	r0, [r3, #0]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	6899      	ldr	r1, [r3, #8]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f000 fada 	bl	8004c0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689a      	ldr	r2, [r3, #8]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004666:	609a      	str	r2, [r3, #8]
      break;
 8004668:	e03c      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6818      	ldr	r0, [r3, #0]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	6859      	ldr	r1, [r3, #4]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	461a      	mov	r2, r3
 8004678:	f000 fa4e 	bl	8004b18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2150      	movs	r1, #80	; 0x50
 8004682:	4618      	mov	r0, r3
 8004684:	f000 faa7 	bl	8004bd6 <TIM_ITRx_SetConfig>
      break;
 8004688:	e02c      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6818      	ldr	r0, [r3, #0]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	6859      	ldr	r1, [r3, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	461a      	mov	r2, r3
 8004698:	f000 fa6d 	bl	8004b76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2160      	movs	r1, #96	; 0x60
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fa97 	bl	8004bd6 <TIM_ITRx_SetConfig>
      break;
 80046a8:	e01c      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	6859      	ldr	r1, [r3, #4]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	461a      	mov	r2, r3
 80046b8:	f000 fa2e 	bl	8004b18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2140      	movs	r1, #64	; 0x40
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fa87 	bl	8004bd6 <TIM_ITRx_SetConfig>
      break;
 80046c8:	e00c      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4619      	mov	r1, r3
 80046d4:	4610      	mov	r0, r2
 80046d6:	f000 fa7e 	bl	8004bd6 <TIM_ITRx_SetConfig>
      break;
 80046da:	e003      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	73fb      	strb	r3, [r7, #15]
      break;
 80046e0:	e000      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
	...

08004700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a34      	ldr	r2, [pc, #208]	; (80047e4 <TIM_Base_SetConfig+0xe4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00f      	beq.n	8004738 <TIM_Base_SetConfig+0x38>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800471e:	d00b      	beq.n	8004738 <TIM_Base_SetConfig+0x38>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a31      	ldr	r2, [pc, #196]	; (80047e8 <TIM_Base_SetConfig+0xe8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d007      	beq.n	8004738 <TIM_Base_SetConfig+0x38>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a30      	ldr	r2, [pc, #192]	; (80047ec <TIM_Base_SetConfig+0xec>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d003      	beq.n	8004738 <TIM_Base_SetConfig+0x38>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a2f      	ldr	r2, [pc, #188]	; (80047f0 <TIM_Base_SetConfig+0xf0>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d108      	bne.n	800474a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a25      	ldr	r2, [pc, #148]	; (80047e4 <TIM_Base_SetConfig+0xe4>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d01b      	beq.n	800478a <TIM_Base_SetConfig+0x8a>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004758:	d017      	beq.n	800478a <TIM_Base_SetConfig+0x8a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a22      	ldr	r2, [pc, #136]	; (80047e8 <TIM_Base_SetConfig+0xe8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d013      	beq.n	800478a <TIM_Base_SetConfig+0x8a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a21      	ldr	r2, [pc, #132]	; (80047ec <TIM_Base_SetConfig+0xec>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00f      	beq.n	800478a <TIM_Base_SetConfig+0x8a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a20      	ldr	r2, [pc, #128]	; (80047f0 <TIM_Base_SetConfig+0xf0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d00b      	beq.n	800478a <TIM_Base_SetConfig+0x8a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a1f      	ldr	r2, [pc, #124]	; (80047f4 <TIM_Base_SetConfig+0xf4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d007      	beq.n	800478a <TIM_Base_SetConfig+0x8a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a1e      	ldr	r2, [pc, #120]	; (80047f8 <TIM_Base_SetConfig+0xf8>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d003      	beq.n	800478a <TIM_Base_SetConfig+0x8a>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a1d      	ldr	r2, [pc, #116]	; (80047fc <TIM_Base_SetConfig+0xfc>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d108      	bne.n	800479c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4313      	orrs	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a08      	ldr	r2, [pc, #32]	; (80047e4 <TIM_Base_SetConfig+0xe4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d103      	bne.n	80047d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	615a      	str	r2, [r3, #20]
}
 80047d6:	bf00      	nop
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	40010000 	.word	0x40010000
 80047e8:	40000400 	.word	0x40000400
 80047ec:	40000800 	.word	0x40000800
 80047f0:	40000c00 	.word	0x40000c00
 80047f4:	40014000 	.word	0x40014000
 80047f8:	40014400 	.word	0x40014400
 80047fc:	40014800 	.word	0x40014800

08004800 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	f023 0201 	bic.w	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0303 	bic.w	r3, r3, #3
 8004836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f023 0302 	bic.w	r3, r3, #2
 8004848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a1c      	ldr	r2, [pc, #112]	; (80048c8 <TIM_OC1_SetConfig+0xc8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d10c      	bne.n	8004876 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f023 0308 	bic.w	r3, r3, #8
 8004862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	4313      	orrs	r3, r2
 800486c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f023 0304 	bic.w	r3, r3, #4
 8004874:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a13      	ldr	r2, [pc, #76]	; (80048c8 <TIM_OC1_SetConfig+0xc8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d111      	bne.n	80048a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800488c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	4313      	orrs	r3, r2
 80048a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	621a      	str	r2, [r3, #32]
}
 80048bc:	bf00      	nop
 80048be:	371c      	adds	r7, #28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	40010000 	.word	0x40010000

080048cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	f023 0210 	bic.w	r2, r3, #16
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	021b      	lsls	r3, r3, #8
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	4313      	orrs	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f023 0320 	bic.w	r3, r3, #32
 8004916:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	4313      	orrs	r3, r2
 8004922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a1e      	ldr	r2, [pc, #120]	; (80049a0 <TIM_OC2_SetConfig+0xd4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d10d      	bne.n	8004948 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	4313      	orrs	r3, r2
 800493e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004946:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a15      	ldr	r2, [pc, #84]	; (80049a0 <TIM_OC2_SetConfig+0xd4>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d113      	bne.n	8004978 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004956:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800495e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	4313      	orrs	r3, r2
 8004976:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	621a      	str	r2, [r3, #32]
}
 8004992:	bf00      	nop
 8004994:	371c      	adds	r7, #28
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40010000 	.word	0x40010000

080049a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 0303 	bic.w	r3, r3, #3
 80049da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a1d      	ldr	r2, [pc, #116]	; (8004a74 <TIM_OC3_SetConfig+0xd0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d10d      	bne.n	8004a1e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	021b      	lsls	r3, r3, #8
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a14      	ldr	r2, [pc, #80]	; (8004a74 <TIM_OC3_SetConfig+0xd0>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d113      	bne.n	8004a4e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	011b      	lsls	r3, r3, #4
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	621a      	str	r2, [r3, #32]
}
 8004a68:	bf00      	nop
 8004a6a:	371c      	adds	r7, #28
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	40010000 	.word	0x40010000

08004a78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	021b      	lsls	r3, r3, #8
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ac2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	031b      	lsls	r3, r3, #12
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a10      	ldr	r2, [pc, #64]	; (8004b14 <TIM_OC4_SetConfig+0x9c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d109      	bne.n	8004aec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ade:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	019b      	lsls	r3, r3, #6
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	621a      	str	r2, [r3, #32]
}
 8004b06:	bf00      	nop
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40010000 	.word	0x40010000

08004b18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	f023 0201 	bic.w	r2, r3, #1
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f023 030a 	bic.w	r3, r3, #10
 8004b54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	621a      	str	r2, [r3, #32]
}
 8004b6a:	bf00      	nop
 8004b6c:	371c      	adds	r7, #28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b087      	sub	sp, #28
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	60f8      	str	r0, [r7, #12]
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	f023 0210 	bic.w	r2, r3, #16
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ba0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	031b      	lsls	r3, r3, #12
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	621a      	str	r2, [r3, #32]
}
 8004bca:	bf00      	nop
 8004bcc:	371c      	adds	r7, #28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b085      	sub	sp, #20
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f043 0307 	orr.w	r3, r3, #7
 8004bf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	609a      	str	r2, [r3, #8]
}
 8004c00:	bf00      	nop
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	021a      	lsls	r2, r3, #8
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	609a      	str	r2, [r3, #8]
}
 8004c40:	bf00      	nop
 8004c42:	371c      	adds	r7, #28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f003 031f 	and.w	r3, r3, #31
 8004c5e:	2201      	movs	r2, #1
 8004c60:	fa02 f303 	lsl.w	r3, r2, r3
 8004c64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6a1a      	ldr	r2, [r3, #32]
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	43db      	mvns	r3, r3
 8004c6e:	401a      	ands	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6a1a      	ldr	r2, [r3, #32]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f003 031f 	and.w	r3, r3, #31
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	fa01 f303 	lsl.w	r3, r1, r3
 8004c84:	431a      	orrs	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	621a      	str	r2, [r3, #32]
}
 8004c8a:	bf00      	nop
 8004c8c:	371c      	adds	r7, #28
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
	...

08004c98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d101      	bne.n	8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cac:	2302      	movs	r3, #2
 8004cae:	e050      	b.n	8004d52 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a1c      	ldr	r2, [pc, #112]	; (8004d60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d018      	beq.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfc:	d013      	beq.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a18      	ldr	r2, [pc, #96]	; (8004d64 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00e      	beq.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a16      	ldr	r2, [pc, #88]	; (8004d68 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d009      	beq.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a15      	ldr	r2, [pc, #84]	; (8004d6c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d004      	beq.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a13      	ldr	r2, [pc, #76]	; (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d10c      	bne.n	8004d40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40010000 	.word	0x40010000
 8004d64:	40000400 	.word	0x40000400
 8004d68:	40000800 	.word	0x40000800
 8004d6c:	40000c00 	.word	0x40000c00
 8004d70:	40014000 	.word	0x40014000

08004d74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e03d      	b.n	8004e0c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e03f      	b.n	8004eaa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d106      	bne.n	8004e44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7fd fec2 	bl	8002bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2224      	movs	r2, #36	; 0x24
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fddf 	bl	8005a20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	695a      	ldr	r2, [r3, #20]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68da      	ldr	r2, [r3, #12]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b08a      	sub	sp, #40	; 0x28
 8004eb6:	af02      	add	r7, sp, #8
 8004eb8:	60f8      	str	r0, [r7, #12]
 8004eba:	60b9      	str	r1, [r7, #8]
 8004ebc:	603b      	str	r3, [r7, #0]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b20      	cmp	r3, #32
 8004ed0:	d17c      	bne.n	8004fcc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d002      	beq.n	8004ede <HAL_UART_Transmit+0x2c>
 8004ed8:	88fb      	ldrh	r3, [r7, #6]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e075      	b.n	8004fce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d101      	bne.n	8004ef0 <HAL_UART_Transmit+0x3e>
 8004eec:	2302      	movs	r3, #2
 8004eee:	e06e      	b.n	8004fce <HAL_UART_Transmit+0x11c>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2221      	movs	r2, #33	; 0x21
 8004f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f06:	f7fe f8d9 	bl	80030bc <HAL_GetTick>
 8004f0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	88fa      	ldrh	r2, [r7, #6]
 8004f10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	88fa      	ldrh	r2, [r7, #6]
 8004f16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f20:	d108      	bne.n	8004f34 <HAL_UART_Transmit+0x82>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d104      	bne.n	8004f34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	61bb      	str	r3, [r7, #24]
 8004f32:	e003      	b.n	8004f3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004f44:	e02a      	b.n	8004f9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	2180      	movs	r1, #128	; 0x80
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 fb1f 	bl	8005594 <UART_WaitOnFlagUntilTimeout>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e036      	b.n	8004fce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10b      	bne.n	8004f7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	3302      	adds	r3, #2
 8004f7a:	61bb      	str	r3, [r7, #24]
 8004f7c:	e007      	b.n	8004f8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	781a      	ldrb	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1cf      	bne.n	8004f46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	2200      	movs	r2, #0
 8004fae:	2140      	movs	r1, #64	; 0x40
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f000 faef 	bl	8005594 <UART_WaitOnFlagUntilTimeout>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e006      	b.n	8004fce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	e000      	b.n	8004fce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004fcc:	2302      	movs	r3, #2
  }
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3720      	adds	r7, #32
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b084      	sub	sp, #16
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	60f8      	str	r0, [r7, #12]
 8004fde:	60b9      	str	r1, [r7, #8]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b20      	cmp	r3, #32
 8004fee:	d11d      	bne.n	800502c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d002      	beq.n	8004ffc <HAL_UART_Receive_IT+0x26>
 8004ff6:	88fb      	ldrh	r3, [r7, #6]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e016      	b.n	800502e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005006:	2b01      	cmp	r3, #1
 8005008:	d101      	bne.n	800500e <HAL_UART_Receive_IT+0x38>
 800500a:	2302      	movs	r3, #2
 800500c:	e00f      	b.n	800502e <HAL_UART_Receive_IT+0x58>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800501c:	88fb      	ldrh	r3, [r7, #6]
 800501e:	461a      	mov	r2, r3
 8005020:	68b9      	ldr	r1, [r7, #8]
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 fb24 	bl	8005670 <UART_Start_Receive_IT>
 8005028:	4603      	mov	r3, r0
 800502a:	e000      	b.n	800502e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800502c:	2302      	movs	r3, #2
  }
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
	...

08005038 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b0ba      	sub	sp, #232	; 0xe8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800505e:	2300      	movs	r3, #0
 8005060:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005064:	2300      	movs	r3, #0
 8005066:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800506a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005076:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10f      	bne.n	800509e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800507e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005082:	f003 0320 	and.w	r3, r3, #32
 8005086:	2b00      	cmp	r3, #0
 8005088:	d009      	beq.n	800509e <HAL_UART_IRQHandler+0x66>
 800508a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800508e:	f003 0320 	and.w	r3, r3, #32
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 fc07 	bl	80058aa <UART_Receive_IT>
      return;
 800509c:	e256      	b.n	800554c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800509e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 80de 	beq.w	8005264 <HAL_UART_IRQHandler+0x22c>
 80050a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d106      	bne.n	80050c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 80d1 	beq.w	8005264 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00b      	beq.n	80050e6 <HAL_UART_IRQHandler+0xae>
 80050ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d005      	beq.n	80050e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	f043 0201 	orr.w	r2, r3, #1
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ea:	f003 0304 	and.w	r3, r3, #4
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00b      	beq.n	800510a <HAL_UART_IRQHandler+0xd2>
 80050f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d005      	beq.n	800510a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	f043 0202 	orr.w	r2, r3, #2
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800510a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00b      	beq.n	800512e <HAL_UART_IRQHandler+0xf6>
 8005116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d005      	beq.n	800512e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	f043 0204 	orr.w	r2, r3, #4
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800512e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005132:	f003 0308 	and.w	r3, r3, #8
 8005136:	2b00      	cmp	r3, #0
 8005138:	d011      	beq.n	800515e <HAL_UART_IRQHandler+0x126>
 800513a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800513e:	f003 0320 	and.w	r3, r3, #32
 8005142:	2b00      	cmp	r3, #0
 8005144:	d105      	bne.n	8005152 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d005      	beq.n	800515e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	f043 0208 	orr.w	r2, r3, #8
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	2b00      	cmp	r3, #0
 8005164:	f000 81ed 	beq.w	8005542 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800516c:	f003 0320 	and.w	r3, r3, #32
 8005170:	2b00      	cmp	r3, #0
 8005172:	d008      	beq.n	8005186 <HAL_UART_IRQHandler+0x14e>
 8005174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005178:	f003 0320 	and.w	r3, r3, #32
 800517c:	2b00      	cmp	r3, #0
 800517e:	d002      	beq.n	8005186 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 fb92 	bl	80058aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005190:	2b40      	cmp	r3, #64	; 0x40
 8005192:	bf0c      	ite	eq
 8005194:	2301      	moveq	r3, #1
 8005196:	2300      	movne	r3, #0
 8005198:	b2db      	uxtb	r3, r3
 800519a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	f003 0308 	and.w	r3, r3, #8
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d103      	bne.n	80051b2 <HAL_UART_IRQHandler+0x17a>
 80051aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d04f      	beq.n	8005252 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fa9a 	bl	80056ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c2:	2b40      	cmp	r3, #64	; 0x40
 80051c4:	d141      	bne.n	800524a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3314      	adds	r3, #20
 80051cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80051dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	3314      	adds	r3, #20
 80051ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80051f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80051f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80051fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005202:	e841 2300 	strex	r3, r2, [r1]
 8005206:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800520a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1d9      	bne.n	80051c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005216:	2b00      	cmp	r3, #0
 8005218:	d013      	beq.n	8005242 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521e:	4a7d      	ldr	r2, [pc, #500]	; (8005414 <HAL_UART_IRQHandler+0x3dc>)
 8005220:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005226:	4618      	mov	r0, r3
 8005228:	f7fe f8d5 	bl	80033d6 <HAL_DMA_Abort_IT>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d016      	beq.n	8005260 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800523c:	4610      	mov	r0, r2
 800523e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005240:	e00e      	b.n	8005260 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f990 	bl	8005568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005248:	e00a      	b.n	8005260 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f98c 	bl	8005568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005250:	e006      	b.n	8005260 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f988 	bl	8005568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800525e:	e170      	b.n	8005542 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005260:	bf00      	nop
    return;
 8005262:	e16e      	b.n	8005542 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005268:	2b01      	cmp	r3, #1
 800526a:	f040 814a 	bne.w	8005502 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800526e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005272:	f003 0310 	and.w	r3, r3, #16
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 8143 	beq.w	8005502 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800527c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005280:	f003 0310 	and.w	r3, r3, #16
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 813c 	beq.w	8005502 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800528a:	2300      	movs	r3, #0
 800528c:	60bb      	str	r3, [r7, #8]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	60bb      	str	r3, [r7, #8]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	60bb      	str	r3, [r7, #8]
 800529e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052aa:	2b40      	cmp	r3, #64	; 0x40
 80052ac:	f040 80b4 	bne.w	8005418 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 8140 	beq.w	8005546 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052ce:	429a      	cmp	r2, r3
 80052d0:	f080 8139 	bcs.w	8005546 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052e6:	f000 8088 	beq.w	80053fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	330c      	adds	r3, #12
 80052f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052f8:	e853 3f00 	ldrex	r3, [r3]
 80052fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005300:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005308:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	330c      	adds	r3, #12
 8005312:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005316:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800531a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005322:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005326:	e841 2300 	strex	r3, r2, [r1]
 800532a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800532e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1d9      	bne.n	80052ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3314      	adds	r3, #20
 800533c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005340:	e853 3f00 	ldrex	r3, [r3]
 8005344:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005346:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005348:	f023 0301 	bic.w	r3, r3, #1
 800534c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	3314      	adds	r3, #20
 8005356:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800535a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800535e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005360:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005362:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005366:	e841 2300 	strex	r3, r2, [r1]
 800536a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800536c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1e1      	bne.n	8005336 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3314      	adds	r3, #20
 8005378:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800537c:	e853 3f00 	ldrex	r3, [r3]
 8005380:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005388:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3314      	adds	r3, #20
 8005392:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005396:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005398:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800539c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800539e:	e841 2300 	strex	r3, r2, [r1]
 80053a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80053a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1e3      	bne.n	8005372 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2220      	movs	r2, #32
 80053ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	330c      	adds	r3, #12
 80053be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c2:	e853 3f00 	ldrex	r3, [r3]
 80053c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053ca:	f023 0310 	bic.w	r3, r3, #16
 80053ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	330c      	adds	r3, #12
 80053d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80053dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80053de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053e4:	e841 2300 	strex	r3, r2, [r1]
 80053e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80053ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1e3      	bne.n	80053b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7fd ff7e 	bl	80032f6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005402:	b29b      	uxth	r3, r3
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	b29b      	uxth	r3, r3
 8005408:	4619      	mov	r1, r3
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f8b6 	bl	800557c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005410:	e099      	b.n	8005546 <HAL_UART_IRQHandler+0x50e>
 8005412:	bf00      	nop
 8005414:	080057b3 	.word	0x080057b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005420:	b29b      	uxth	r3, r3
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800542c:	b29b      	uxth	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 808b 	beq.w	800554a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005434:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 8086 	beq.w	800554a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	330c      	adds	r3, #12
 8005444:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005448:	e853 3f00 	ldrex	r3, [r3]
 800544c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800544e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005450:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005454:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	330c      	adds	r3, #12
 800545e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005462:	647a      	str	r2, [r7, #68]	; 0x44
 8005464:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005466:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005468:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800546a:	e841 2300 	strex	r3, r2, [r1]
 800546e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1e3      	bne.n	800543e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	3314      	adds	r3, #20
 800547c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	e853 3f00 	ldrex	r3, [r3]
 8005484:	623b      	str	r3, [r7, #32]
   return(result);
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	f023 0301 	bic.w	r3, r3, #1
 800548c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3314      	adds	r3, #20
 8005496:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800549a:	633a      	str	r2, [r7, #48]	; 0x30
 800549c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054a2:	e841 2300 	strex	r3, r2, [r1]
 80054a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1e3      	bne.n	8005476 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2220      	movs	r2, #32
 80054b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	330c      	adds	r3, #12
 80054c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	e853 3f00 	ldrex	r3, [r3]
 80054ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f023 0310 	bic.w	r3, r3, #16
 80054d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	330c      	adds	r3, #12
 80054dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80054e0:	61fa      	str	r2, [r7, #28]
 80054e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e4:	69b9      	ldr	r1, [r7, #24]
 80054e6:	69fa      	ldr	r2, [r7, #28]
 80054e8:	e841 2300 	strex	r3, r2, [r1]
 80054ec:	617b      	str	r3, [r7, #20]
   return(result);
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1e3      	bne.n	80054bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054f8:	4619      	mov	r1, r3
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f83e 	bl	800557c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005500:	e023      	b.n	800554a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550a:	2b00      	cmp	r3, #0
 800550c:	d009      	beq.n	8005522 <HAL_UART_IRQHandler+0x4ea>
 800550e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f95d 	bl	80057da <UART_Transmit_IT>
    return;
 8005520:	e014      	b.n	800554c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00e      	beq.n	800554c <HAL_UART_IRQHandler+0x514>
 800552e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005536:	2b00      	cmp	r3, #0
 8005538:	d008      	beq.n	800554c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f99d 	bl	800587a <UART_EndTransmit_IT>
    return;
 8005540:	e004      	b.n	800554c <HAL_UART_IRQHandler+0x514>
    return;
 8005542:	bf00      	nop
 8005544:	e002      	b.n	800554c <HAL_UART_IRQHandler+0x514>
      return;
 8005546:	bf00      	nop
 8005548:	e000      	b.n	800554c <HAL_UART_IRQHandler+0x514>
      return;
 800554a:	bf00      	nop
  }
}
 800554c:	37e8      	adds	r7, #232	; 0xe8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop

08005554 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	460b      	mov	r3, r1
 8005586:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b090      	sub	sp, #64	; 0x40
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	603b      	str	r3, [r7, #0]
 80055a0:	4613      	mov	r3, r2
 80055a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055a4:	e050      	b.n	8005648 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ac:	d04c      	beq.n	8005648 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d007      	beq.n	80055c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80055b4:	f7fd fd82 	bl	80030bc <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d241      	bcs.n	8005648 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	330c      	adds	r3, #12
 80055ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ce:	e853 3f00 	ldrex	r3, [r3]
 80055d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	330c      	adds	r3, #12
 80055e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055e4:	637a      	str	r2, [r7, #52]	; 0x34
 80055e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055ec:	e841 2300 	strex	r3, r2, [r1]
 80055f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1e5      	bne.n	80055c4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3314      	adds	r3, #20
 80055fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	e853 3f00 	ldrex	r3, [r3]
 8005606:	613b      	str	r3, [r7, #16]
   return(result);
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f023 0301 	bic.w	r3, r3, #1
 800560e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3314      	adds	r3, #20
 8005616:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005618:	623a      	str	r2, [r7, #32]
 800561a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561c:	69f9      	ldr	r1, [r7, #28]
 800561e:	6a3a      	ldr	r2, [r7, #32]
 8005620:	e841 2300 	strex	r3, r2, [r1]
 8005624:	61bb      	str	r3, [r7, #24]
   return(result);
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1e5      	bne.n	80055f8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2220      	movs	r2, #32
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2220      	movs	r2, #32
 8005638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e00f      	b.n	8005668 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	4013      	ands	r3, r2
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	429a      	cmp	r2, r3
 8005656:	bf0c      	ite	eq
 8005658:	2301      	moveq	r3, #1
 800565a:	2300      	movne	r3, #0
 800565c:	b2db      	uxtb	r3, r3
 800565e:	461a      	mov	r2, r3
 8005660:	79fb      	ldrb	r3, [r7, #7]
 8005662:	429a      	cmp	r2, r3
 8005664:	d09f      	beq.n	80055a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3740      	adds	r7, #64	; 0x40
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	4613      	mov	r3, r2
 800567c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	88fa      	ldrh	r2, [r7, #6]
 8005688:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	88fa      	ldrh	r2, [r7, #6]
 800568e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2222      	movs	r2, #34	; 0x22
 800569a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d007      	beq.n	80056be <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056bc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	695a      	ldr	r2, [r3, #20]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f042 0201 	orr.w	r2, r2, #1
 80056cc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68da      	ldr	r2, [r3, #12]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f042 0220 	orr.w	r2, r2, #32
 80056dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b095      	sub	sp, #84	; 0x54
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	330c      	adds	r3, #12
 80056fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056fe:	e853 3f00 	ldrex	r3, [r3]
 8005702:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005706:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800570a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	330c      	adds	r3, #12
 8005712:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005714:	643a      	str	r2, [r7, #64]	; 0x40
 8005716:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005718:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800571a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800571c:	e841 2300 	strex	r3, r2, [r1]
 8005720:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1e5      	bne.n	80056f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	3314      	adds	r3, #20
 800572e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	e853 3f00 	ldrex	r3, [r3]
 8005736:	61fb      	str	r3, [r7, #28]
   return(result);
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	f023 0301 	bic.w	r3, r3, #1
 800573e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3314      	adds	r3, #20
 8005746:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005748:	62fa      	str	r2, [r7, #44]	; 0x2c
 800574a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800574e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005750:	e841 2300 	strex	r3, r2, [r1]
 8005754:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1e5      	bne.n	8005728 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005760:	2b01      	cmp	r3, #1
 8005762:	d119      	bne.n	8005798 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	330c      	adds	r3, #12
 800576a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	e853 3f00 	ldrex	r3, [r3]
 8005772:	60bb      	str	r3, [r7, #8]
   return(result);
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	f023 0310 	bic.w	r3, r3, #16
 800577a:	647b      	str	r3, [r7, #68]	; 0x44
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	330c      	adds	r3, #12
 8005782:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005784:	61ba      	str	r2, [r7, #24]
 8005786:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005788:	6979      	ldr	r1, [r7, #20]
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	e841 2300 	strex	r3, r2, [r1]
 8005790:	613b      	str	r3, [r7, #16]
   return(result);
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1e5      	bne.n	8005764 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2220      	movs	r2, #32
 800579c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80057a6:	bf00      	nop
 80057a8:	3754      	adds	r7, #84	; 0x54
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b084      	sub	sp, #16
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f7ff fecb 	bl	8005568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057d2:	bf00      	nop
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80057da:	b480      	push	{r7}
 80057dc:	b085      	sub	sp, #20
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b21      	cmp	r3, #33	; 0x21
 80057ec:	d13e      	bne.n	800586c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f6:	d114      	bne.n	8005822 <UART_Transmit_IT+0x48>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d110      	bne.n	8005822 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	461a      	mov	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005814:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	1c9a      	adds	r2, r3, #2
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	621a      	str	r2, [r3, #32]
 8005820:	e008      	b.n	8005834 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	1c59      	adds	r1, r3, #1
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6211      	str	r1, [r2, #32]
 800582c:	781a      	ldrb	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005838:	b29b      	uxth	r3, r3
 800583a:	3b01      	subs	r3, #1
 800583c:	b29b      	uxth	r3, r3
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	4619      	mov	r1, r3
 8005842:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10f      	bne.n	8005868 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005856:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68da      	ldr	r2, [r3, #12]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005866:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005868:	2300      	movs	r3, #0
 800586a:	e000      	b.n	800586e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800586c:	2302      	movs	r3, #2
  }
}
 800586e:	4618      	mov	r0, r3
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b082      	sub	sp, #8
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68da      	ldr	r2, [r3, #12]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005890:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2220      	movs	r2, #32
 8005896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7ff fe5a 	bl	8005554 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b08c      	sub	sp, #48	; 0x30
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b22      	cmp	r3, #34	; 0x22
 80058bc:	f040 80ab 	bne.w	8005a16 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c8:	d117      	bne.n	80058fa <UART_Receive_IT+0x50>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d113      	bne.n	80058fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80058d2:	2300      	movs	r3, #0
 80058d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f2:	1c9a      	adds	r2, r3, #2
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	629a      	str	r2, [r3, #40]	; 0x28
 80058f8:	e026      	b.n	8005948 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005900:	2300      	movs	r3, #0
 8005902:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800590c:	d007      	beq.n	800591e <UART_Receive_IT+0x74>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10a      	bne.n	800592c <UART_Receive_IT+0x82>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d106      	bne.n	800592c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	b2da      	uxtb	r2, r3
 8005926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005928:	701a      	strb	r2, [r3, #0]
 800592a:	e008      	b.n	800593e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	b2db      	uxtb	r3, r3
 8005934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005938:	b2da      	uxtb	r2, r3
 800593a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005942:	1c5a      	adds	r2, r3, #1
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800594c:	b29b      	uxth	r3, r3
 800594e:	3b01      	subs	r3, #1
 8005950:	b29b      	uxth	r3, r3
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	4619      	mov	r1, r3
 8005956:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005958:	2b00      	cmp	r3, #0
 800595a:	d15a      	bne.n	8005a12 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68da      	ldr	r2, [r3, #12]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 0220 	bic.w	r2, r2, #32
 800596a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800597a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	695a      	ldr	r2, [r3, #20]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0201 	bic.w	r2, r2, #1
 800598a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2220      	movs	r2, #32
 8005990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005998:	2b01      	cmp	r3, #1
 800599a:	d135      	bne.n	8005a08 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	330c      	adds	r3, #12
 80059a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	e853 3f00 	ldrex	r3, [r3]
 80059b0:	613b      	str	r3, [r7, #16]
   return(result);
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	f023 0310 	bic.w	r3, r3, #16
 80059b8:	627b      	str	r3, [r7, #36]	; 0x24
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	330c      	adds	r3, #12
 80059c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059c2:	623a      	str	r2, [r7, #32]
 80059c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c6:	69f9      	ldr	r1, [r7, #28]
 80059c8:	6a3a      	ldr	r2, [r7, #32]
 80059ca:	e841 2300 	strex	r3, r2, [r1]
 80059ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1e5      	bne.n	80059a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0310 	and.w	r3, r3, #16
 80059e0:	2b10      	cmp	r3, #16
 80059e2:	d10a      	bne.n	80059fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059fe:	4619      	mov	r1, r3
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f7ff fdbb 	bl	800557c <HAL_UARTEx_RxEventCallback>
 8005a06:	e002      	b.n	8005a0e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7fc ffdd 	bl	80029c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	e002      	b.n	8005a18 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005a12:	2300      	movs	r3, #0
 8005a14:	e000      	b.n	8005a18 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005a16:	2302      	movs	r3, #2
  }
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3730      	adds	r7, #48	; 0x30
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a24:	b0c0      	sub	sp, #256	; 0x100
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3c:	68d9      	ldr	r1, [r3, #12]
 8005a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	ea40 0301 	orr.w	r3, r0, r1
 8005a48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	431a      	orrs	r2, r3
 8005a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a78:	f021 010c 	bic.w	r1, r1, #12
 8005a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a86:	430b      	orrs	r3, r1
 8005a88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a9a:	6999      	ldr	r1, [r3, #24]
 8005a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	ea40 0301 	orr.w	r3, r0, r1
 8005aa6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	4b8f      	ldr	r3, [pc, #572]	; (8005cec <UART_SetConfig+0x2cc>)
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d005      	beq.n	8005ac0 <UART_SetConfig+0xa0>
 8005ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	4b8d      	ldr	r3, [pc, #564]	; (8005cf0 <UART_SetConfig+0x2d0>)
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d104      	bne.n	8005aca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ac0:	f7fe face 	bl	8004060 <HAL_RCC_GetPCLK2Freq>
 8005ac4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005ac8:	e003      	b.n	8005ad2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005aca:	f7fe fab5 	bl	8004038 <HAL_RCC_GetPCLK1Freq>
 8005ace:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005adc:	f040 810c 	bne.w	8005cf8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ae0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005aea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005aee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005af2:	4622      	mov	r2, r4
 8005af4:	462b      	mov	r3, r5
 8005af6:	1891      	adds	r1, r2, r2
 8005af8:	65b9      	str	r1, [r7, #88]	; 0x58
 8005afa:	415b      	adcs	r3, r3
 8005afc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005afe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b02:	4621      	mov	r1, r4
 8005b04:	eb12 0801 	adds.w	r8, r2, r1
 8005b08:	4629      	mov	r1, r5
 8005b0a:	eb43 0901 	adc.w	r9, r3, r1
 8005b0e:	f04f 0200 	mov.w	r2, #0
 8005b12:	f04f 0300 	mov.w	r3, #0
 8005b16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b22:	4690      	mov	r8, r2
 8005b24:	4699      	mov	r9, r3
 8005b26:	4623      	mov	r3, r4
 8005b28:	eb18 0303 	adds.w	r3, r8, r3
 8005b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b30:	462b      	mov	r3, r5
 8005b32:	eb49 0303 	adc.w	r3, r9, r3
 8005b36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005b4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b4e:	460b      	mov	r3, r1
 8005b50:	18db      	adds	r3, r3, r3
 8005b52:	653b      	str	r3, [r7, #80]	; 0x50
 8005b54:	4613      	mov	r3, r2
 8005b56:	eb42 0303 	adc.w	r3, r2, r3
 8005b5a:	657b      	str	r3, [r7, #84]	; 0x54
 8005b5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005b60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005b64:	f7fb f898 	bl	8000c98 <__aeabi_uldivmod>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	4b61      	ldr	r3, [pc, #388]	; (8005cf4 <UART_SetConfig+0x2d4>)
 8005b6e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b72:	095b      	lsrs	r3, r3, #5
 8005b74:	011c      	lsls	r4, r3, #4
 8005b76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005b84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b88:	4642      	mov	r2, r8
 8005b8a:	464b      	mov	r3, r9
 8005b8c:	1891      	adds	r1, r2, r2
 8005b8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b90:	415b      	adcs	r3, r3
 8005b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b98:	4641      	mov	r1, r8
 8005b9a:	eb12 0a01 	adds.w	sl, r2, r1
 8005b9e:	4649      	mov	r1, r9
 8005ba0:	eb43 0b01 	adc.w	fp, r3, r1
 8005ba4:	f04f 0200 	mov.w	r2, #0
 8005ba8:	f04f 0300 	mov.w	r3, #0
 8005bac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005bb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005bb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bb8:	4692      	mov	sl, r2
 8005bba:	469b      	mov	fp, r3
 8005bbc:	4643      	mov	r3, r8
 8005bbe:	eb1a 0303 	adds.w	r3, sl, r3
 8005bc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bc6:	464b      	mov	r3, r9
 8005bc8:	eb4b 0303 	adc.w	r3, fp, r3
 8005bcc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bdc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005be0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005be4:	460b      	mov	r3, r1
 8005be6:	18db      	adds	r3, r3, r3
 8005be8:	643b      	str	r3, [r7, #64]	; 0x40
 8005bea:	4613      	mov	r3, r2
 8005bec:	eb42 0303 	adc.w	r3, r2, r3
 8005bf0:	647b      	str	r3, [r7, #68]	; 0x44
 8005bf2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005bf6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005bfa:	f7fb f84d 	bl	8000c98 <__aeabi_uldivmod>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	460b      	mov	r3, r1
 8005c02:	4611      	mov	r1, r2
 8005c04:	4b3b      	ldr	r3, [pc, #236]	; (8005cf4 <UART_SetConfig+0x2d4>)
 8005c06:	fba3 2301 	umull	r2, r3, r3, r1
 8005c0a:	095b      	lsrs	r3, r3, #5
 8005c0c:	2264      	movs	r2, #100	; 0x64
 8005c0e:	fb02 f303 	mul.w	r3, r2, r3
 8005c12:	1acb      	subs	r3, r1, r3
 8005c14:	00db      	lsls	r3, r3, #3
 8005c16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005c1a:	4b36      	ldr	r3, [pc, #216]	; (8005cf4 <UART_SetConfig+0x2d4>)
 8005c1c:	fba3 2302 	umull	r2, r3, r3, r2
 8005c20:	095b      	lsrs	r3, r3, #5
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c28:	441c      	add	r4, r3
 8005c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005c38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005c3c:	4642      	mov	r2, r8
 8005c3e:	464b      	mov	r3, r9
 8005c40:	1891      	adds	r1, r2, r2
 8005c42:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c44:	415b      	adcs	r3, r3
 8005c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c4c:	4641      	mov	r1, r8
 8005c4e:	1851      	adds	r1, r2, r1
 8005c50:	6339      	str	r1, [r7, #48]	; 0x30
 8005c52:	4649      	mov	r1, r9
 8005c54:	414b      	adcs	r3, r1
 8005c56:	637b      	str	r3, [r7, #52]	; 0x34
 8005c58:	f04f 0200 	mov.w	r2, #0
 8005c5c:	f04f 0300 	mov.w	r3, #0
 8005c60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005c64:	4659      	mov	r1, fp
 8005c66:	00cb      	lsls	r3, r1, #3
 8005c68:	4651      	mov	r1, sl
 8005c6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c6e:	4651      	mov	r1, sl
 8005c70:	00ca      	lsls	r2, r1, #3
 8005c72:	4610      	mov	r0, r2
 8005c74:	4619      	mov	r1, r3
 8005c76:	4603      	mov	r3, r0
 8005c78:	4642      	mov	r2, r8
 8005c7a:	189b      	adds	r3, r3, r2
 8005c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c80:	464b      	mov	r3, r9
 8005c82:	460a      	mov	r2, r1
 8005c84:	eb42 0303 	adc.w	r3, r2, r3
 8005c88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	18db      	adds	r3, r3, r3
 8005ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	eb42 0303 	adc.w	r3, r2, r3
 8005cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005cb6:	f7fa ffef 	bl	8000c98 <__aeabi_uldivmod>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	4b0d      	ldr	r3, [pc, #52]	; (8005cf4 <UART_SetConfig+0x2d4>)
 8005cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8005cc4:	095b      	lsrs	r3, r3, #5
 8005cc6:	2164      	movs	r1, #100	; 0x64
 8005cc8:	fb01 f303 	mul.w	r3, r1, r3
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	3332      	adds	r3, #50	; 0x32
 8005cd2:	4a08      	ldr	r2, [pc, #32]	; (8005cf4 <UART_SetConfig+0x2d4>)
 8005cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd8:	095b      	lsrs	r3, r3, #5
 8005cda:	f003 0207 	and.w	r2, r3, #7
 8005cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4422      	add	r2, r4
 8005ce6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ce8:	e106      	b.n	8005ef8 <UART_SetConfig+0x4d8>
 8005cea:	bf00      	nop
 8005cec:	40011000 	.word	0x40011000
 8005cf0:	40011400 	.word	0x40011400
 8005cf4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005d06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d0a:	4642      	mov	r2, r8
 8005d0c:	464b      	mov	r3, r9
 8005d0e:	1891      	adds	r1, r2, r2
 8005d10:	6239      	str	r1, [r7, #32]
 8005d12:	415b      	adcs	r3, r3
 8005d14:	627b      	str	r3, [r7, #36]	; 0x24
 8005d16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d1a:	4641      	mov	r1, r8
 8005d1c:	1854      	adds	r4, r2, r1
 8005d1e:	4649      	mov	r1, r9
 8005d20:	eb43 0501 	adc.w	r5, r3, r1
 8005d24:	f04f 0200 	mov.w	r2, #0
 8005d28:	f04f 0300 	mov.w	r3, #0
 8005d2c:	00eb      	lsls	r3, r5, #3
 8005d2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d32:	00e2      	lsls	r2, r4, #3
 8005d34:	4614      	mov	r4, r2
 8005d36:	461d      	mov	r5, r3
 8005d38:	4643      	mov	r3, r8
 8005d3a:	18e3      	adds	r3, r4, r3
 8005d3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d40:	464b      	mov	r3, r9
 8005d42:	eb45 0303 	adc.w	r3, r5, r3
 8005d46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d5a:	f04f 0200 	mov.w	r2, #0
 8005d5e:	f04f 0300 	mov.w	r3, #0
 8005d62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005d66:	4629      	mov	r1, r5
 8005d68:	008b      	lsls	r3, r1, #2
 8005d6a:	4621      	mov	r1, r4
 8005d6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d70:	4621      	mov	r1, r4
 8005d72:	008a      	lsls	r2, r1, #2
 8005d74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d78:	f7fa ff8e 	bl	8000c98 <__aeabi_uldivmod>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4b60      	ldr	r3, [pc, #384]	; (8005f04 <UART_SetConfig+0x4e4>)
 8005d82:	fba3 2302 	umull	r2, r3, r3, r2
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	011c      	lsls	r4, r3, #4
 8005d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d9c:	4642      	mov	r2, r8
 8005d9e:	464b      	mov	r3, r9
 8005da0:	1891      	adds	r1, r2, r2
 8005da2:	61b9      	str	r1, [r7, #24]
 8005da4:	415b      	adcs	r3, r3
 8005da6:	61fb      	str	r3, [r7, #28]
 8005da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005dac:	4641      	mov	r1, r8
 8005dae:	1851      	adds	r1, r2, r1
 8005db0:	6139      	str	r1, [r7, #16]
 8005db2:	4649      	mov	r1, r9
 8005db4:	414b      	adcs	r3, r1
 8005db6:	617b      	str	r3, [r7, #20]
 8005db8:	f04f 0200 	mov.w	r2, #0
 8005dbc:	f04f 0300 	mov.w	r3, #0
 8005dc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005dc4:	4659      	mov	r1, fp
 8005dc6:	00cb      	lsls	r3, r1, #3
 8005dc8:	4651      	mov	r1, sl
 8005dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dce:	4651      	mov	r1, sl
 8005dd0:	00ca      	lsls	r2, r1, #3
 8005dd2:	4610      	mov	r0, r2
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	4642      	mov	r2, r8
 8005dda:	189b      	adds	r3, r3, r2
 8005ddc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005de0:	464b      	mov	r3, r9
 8005de2:	460a      	mov	r2, r1
 8005de4:	eb42 0303 	adc.w	r3, r2, r3
 8005de8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005df6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005df8:	f04f 0200 	mov.w	r2, #0
 8005dfc:	f04f 0300 	mov.w	r3, #0
 8005e00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e04:	4649      	mov	r1, r9
 8005e06:	008b      	lsls	r3, r1, #2
 8005e08:	4641      	mov	r1, r8
 8005e0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e0e:	4641      	mov	r1, r8
 8005e10:	008a      	lsls	r2, r1, #2
 8005e12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005e16:	f7fa ff3f 	bl	8000c98 <__aeabi_uldivmod>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	4611      	mov	r1, r2
 8005e20:	4b38      	ldr	r3, [pc, #224]	; (8005f04 <UART_SetConfig+0x4e4>)
 8005e22:	fba3 2301 	umull	r2, r3, r3, r1
 8005e26:	095b      	lsrs	r3, r3, #5
 8005e28:	2264      	movs	r2, #100	; 0x64
 8005e2a:	fb02 f303 	mul.w	r3, r2, r3
 8005e2e:	1acb      	subs	r3, r1, r3
 8005e30:	011b      	lsls	r3, r3, #4
 8005e32:	3332      	adds	r3, #50	; 0x32
 8005e34:	4a33      	ldr	r2, [pc, #204]	; (8005f04 <UART_SetConfig+0x4e4>)
 8005e36:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3a:	095b      	lsrs	r3, r3, #5
 8005e3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e40:	441c      	add	r4, r3
 8005e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e46:	2200      	movs	r2, #0
 8005e48:	673b      	str	r3, [r7, #112]	; 0x70
 8005e4a:	677a      	str	r2, [r7, #116]	; 0x74
 8005e4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005e50:	4642      	mov	r2, r8
 8005e52:	464b      	mov	r3, r9
 8005e54:	1891      	adds	r1, r2, r2
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	415b      	adcs	r3, r3
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e60:	4641      	mov	r1, r8
 8005e62:	1851      	adds	r1, r2, r1
 8005e64:	6039      	str	r1, [r7, #0]
 8005e66:	4649      	mov	r1, r9
 8005e68:	414b      	adcs	r3, r1
 8005e6a:	607b      	str	r3, [r7, #4]
 8005e6c:	f04f 0200 	mov.w	r2, #0
 8005e70:	f04f 0300 	mov.w	r3, #0
 8005e74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e78:	4659      	mov	r1, fp
 8005e7a:	00cb      	lsls	r3, r1, #3
 8005e7c:	4651      	mov	r1, sl
 8005e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e82:	4651      	mov	r1, sl
 8005e84:	00ca      	lsls	r2, r1, #3
 8005e86:	4610      	mov	r0, r2
 8005e88:	4619      	mov	r1, r3
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	4642      	mov	r2, r8
 8005e8e:	189b      	adds	r3, r3, r2
 8005e90:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e92:	464b      	mov	r3, r9
 8005e94:	460a      	mov	r2, r1
 8005e96:	eb42 0303 	adc.w	r3, r2, r3
 8005e9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	663b      	str	r3, [r7, #96]	; 0x60
 8005ea6:	667a      	str	r2, [r7, #100]	; 0x64
 8005ea8:	f04f 0200 	mov.w	r2, #0
 8005eac:	f04f 0300 	mov.w	r3, #0
 8005eb0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005eb4:	4649      	mov	r1, r9
 8005eb6:	008b      	lsls	r3, r1, #2
 8005eb8:	4641      	mov	r1, r8
 8005eba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ebe:	4641      	mov	r1, r8
 8005ec0:	008a      	lsls	r2, r1, #2
 8005ec2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005ec6:	f7fa fee7 	bl	8000c98 <__aeabi_uldivmod>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	460b      	mov	r3, r1
 8005ece:	4b0d      	ldr	r3, [pc, #52]	; (8005f04 <UART_SetConfig+0x4e4>)
 8005ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ed4:	095b      	lsrs	r3, r3, #5
 8005ed6:	2164      	movs	r1, #100	; 0x64
 8005ed8:	fb01 f303 	mul.w	r3, r1, r3
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	011b      	lsls	r3, r3, #4
 8005ee0:	3332      	adds	r3, #50	; 0x32
 8005ee2:	4a08      	ldr	r2, [pc, #32]	; (8005f04 <UART_SetConfig+0x4e4>)
 8005ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee8:	095b      	lsrs	r3, r3, #5
 8005eea:	f003 020f 	and.w	r2, r3, #15
 8005eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4422      	add	r2, r4
 8005ef6:	609a      	str	r2, [r3, #8]
}
 8005ef8:	bf00      	nop
 8005efa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005efe:	46bd      	mov	sp, r7
 8005f00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f04:	51eb851f 	.word	0x51eb851f

08005f08 <atoi>:
 8005f08:	220a      	movs	r2, #10
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	f000 befc 	b.w	8006d08 <strtol>

08005f10 <sulp>:
 8005f10:	b570      	push	{r4, r5, r6, lr}
 8005f12:	4604      	mov	r4, r0
 8005f14:	460d      	mov	r5, r1
 8005f16:	ec45 4b10 	vmov	d0, r4, r5
 8005f1a:	4616      	mov	r6, r2
 8005f1c:	f003 fdb8 	bl	8009a90 <__ulp>
 8005f20:	ec51 0b10 	vmov	r0, r1, d0
 8005f24:	b17e      	cbz	r6, 8005f46 <sulp+0x36>
 8005f26:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005f2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	dd09      	ble.n	8005f46 <sulp+0x36>
 8005f32:	051b      	lsls	r3, r3, #20
 8005f34:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005f38:	2400      	movs	r4, #0
 8005f3a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005f3e:	4622      	mov	r2, r4
 8005f40:	462b      	mov	r3, r5
 8005f42:	f7fa fb61 	bl	8000608 <__aeabi_dmul>
 8005f46:	bd70      	pop	{r4, r5, r6, pc}

08005f48 <_strtod_l>:
 8005f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f4c:	ed2d 8b02 	vpush	{d8}
 8005f50:	b09b      	sub	sp, #108	; 0x6c
 8005f52:	4604      	mov	r4, r0
 8005f54:	9213      	str	r2, [sp, #76]	; 0x4c
 8005f56:	2200      	movs	r2, #0
 8005f58:	9216      	str	r2, [sp, #88]	; 0x58
 8005f5a:	460d      	mov	r5, r1
 8005f5c:	f04f 0800 	mov.w	r8, #0
 8005f60:	f04f 0900 	mov.w	r9, #0
 8005f64:	460a      	mov	r2, r1
 8005f66:	9215      	str	r2, [sp, #84]	; 0x54
 8005f68:	7811      	ldrb	r1, [r2, #0]
 8005f6a:	292b      	cmp	r1, #43	; 0x2b
 8005f6c:	d04c      	beq.n	8006008 <_strtod_l+0xc0>
 8005f6e:	d83a      	bhi.n	8005fe6 <_strtod_l+0x9e>
 8005f70:	290d      	cmp	r1, #13
 8005f72:	d834      	bhi.n	8005fde <_strtod_l+0x96>
 8005f74:	2908      	cmp	r1, #8
 8005f76:	d834      	bhi.n	8005fe2 <_strtod_l+0x9a>
 8005f78:	2900      	cmp	r1, #0
 8005f7a:	d03d      	beq.n	8005ff8 <_strtod_l+0xb0>
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	920a      	str	r2, [sp, #40]	; 0x28
 8005f80:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8005f82:	7832      	ldrb	r2, [r6, #0]
 8005f84:	2a30      	cmp	r2, #48	; 0x30
 8005f86:	f040 80b4 	bne.w	80060f2 <_strtod_l+0x1aa>
 8005f8a:	7872      	ldrb	r2, [r6, #1]
 8005f8c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005f90:	2a58      	cmp	r2, #88	; 0x58
 8005f92:	d170      	bne.n	8006076 <_strtod_l+0x12e>
 8005f94:	9302      	str	r3, [sp, #8]
 8005f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f98:	9301      	str	r3, [sp, #4]
 8005f9a:	ab16      	add	r3, sp, #88	; 0x58
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	4a8e      	ldr	r2, [pc, #568]	; (80061d8 <_strtod_l+0x290>)
 8005fa0:	ab17      	add	r3, sp, #92	; 0x5c
 8005fa2:	a915      	add	r1, sp, #84	; 0x54
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	f002 fe51 	bl	8008c4c <__gethex>
 8005faa:	f010 070f 	ands.w	r7, r0, #15
 8005fae:	4605      	mov	r5, r0
 8005fb0:	d005      	beq.n	8005fbe <_strtod_l+0x76>
 8005fb2:	2f06      	cmp	r7, #6
 8005fb4:	d12a      	bne.n	800600c <_strtod_l+0xc4>
 8005fb6:	3601      	adds	r6, #1
 8005fb8:	2300      	movs	r3, #0
 8005fba:	9615      	str	r6, [sp, #84]	; 0x54
 8005fbc:	930a      	str	r3, [sp, #40]	; 0x28
 8005fbe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f040 857f 	bne.w	8006ac4 <_strtod_l+0xb7c>
 8005fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fc8:	b1db      	cbz	r3, 8006002 <_strtod_l+0xba>
 8005fca:	4642      	mov	r2, r8
 8005fcc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005fd0:	ec43 2b10 	vmov	d0, r2, r3
 8005fd4:	b01b      	add	sp, #108	; 0x6c
 8005fd6:	ecbd 8b02 	vpop	{d8}
 8005fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fde:	2920      	cmp	r1, #32
 8005fe0:	d1cc      	bne.n	8005f7c <_strtod_l+0x34>
 8005fe2:	3201      	adds	r2, #1
 8005fe4:	e7bf      	b.n	8005f66 <_strtod_l+0x1e>
 8005fe6:	292d      	cmp	r1, #45	; 0x2d
 8005fe8:	d1c8      	bne.n	8005f7c <_strtod_l+0x34>
 8005fea:	2101      	movs	r1, #1
 8005fec:	910a      	str	r1, [sp, #40]	; 0x28
 8005fee:	1c51      	adds	r1, r2, #1
 8005ff0:	9115      	str	r1, [sp, #84]	; 0x54
 8005ff2:	7852      	ldrb	r2, [r2, #1]
 8005ff4:	2a00      	cmp	r2, #0
 8005ff6:	d1c3      	bne.n	8005f80 <_strtod_l+0x38>
 8005ff8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005ffa:	9515      	str	r5, [sp, #84]	; 0x54
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f040 855f 	bne.w	8006ac0 <_strtod_l+0xb78>
 8006002:	4642      	mov	r2, r8
 8006004:	464b      	mov	r3, r9
 8006006:	e7e3      	b.n	8005fd0 <_strtod_l+0x88>
 8006008:	2100      	movs	r1, #0
 800600a:	e7ef      	b.n	8005fec <_strtod_l+0xa4>
 800600c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800600e:	b13a      	cbz	r2, 8006020 <_strtod_l+0xd8>
 8006010:	2135      	movs	r1, #53	; 0x35
 8006012:	a818      	add	r0, sp, #96	; 0x60
 8006014:	f003 fe39 	bl	8009c8a <__copybits>
 8006018:	9916      	ldr	r1, [sp, #88]	; 0x58
 800601a:	4620      	mov	r0, r4
 800601c:	f003 fa0c 	bl	8009438 <_Bfree>
 8006020:	3f01      	subs	r7, #1
 8006022:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006024:	2f04      	cmp	r7, #4
 8006026:	d806      	bhi.n	8006036 <_strtod_l+0xee>
 8006028:	e8df f007 	tbb	[pc, r7]
 800602c:	201d0314 	.word	0x201d0314
 8006030:	14          	.byte	0x14
 8006031:	00          	.byte	0x00
 8006032:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8006036:	05e9      	lsls	r1, r5, #23
 8006038:	bf48      	it	mi
 800603a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800603e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006042:	0d1b      	lsrs	r3, r3, #20
 8006044:	051b      	lsls	r3, r3, #20
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1b9      	bne.n	8005fbe <_strtod_l+0x76>
 800604a:	f001 fe83 	bl	8007d54 <__errno>
 800604e:	2322      	movs	r3, #34	; 0x22
 8006050:	6003      	str	r3, [r0, #0]
 8006052:	e7b4      	b.n	8005fbe <_strtod_l+0x76>
 8006054:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8006058:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800605c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006060:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006064:	e7e7      	b.n	8006036 <_strtod_l+0xee>
 8006066:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80061e0 <_strtod_l+0x298>
 800606a:	e7e4      	b.n	8006036 <_strtod_l+0xee>
 800606c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006070:	f04f 38ff 	mov.w	r8, #4294967295
 8006074:	e7df      	b.n	8006036 <_strtod_l+0xee>
 8006076:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006078:	1c5a      	adds	r2, r3, #1
 800607a:	9215      	str	r2, [sp, #84]	; 0x54
 800607c:	785b      	ldrb	r3, [r3, #1]
 800607e:	2b30      	cmp	r3, #48	; 0x30
 8006080:	d0f9      	beq.n	8006076 <_strtod_l+0x12e>
 8006082:	2b00      	cmp	r3, #0
 8006084:	d09b      	beq.n	8005fbe <_strtod_l+0x76>
 8006086:	2301      	movs	r3, #1
 8006088:	f04f 0a00 	mov.w	sl, #0
 800608c:	9304      	str	r3, [sp, #16]
 800608e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006090:	930b      	str	r3, [sp, #44]	; 0x2c
 8006092:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006096:	46d3      	mov	fp, sl
 8006098:	220a      	movs	r2, #10
 800609a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800609c:	7806      	ldrb	r6, [r0, #0]
 800609e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80060a2:	b2d9      	uxtb	r1, r3
 80060a4:	2909      	cmp	r1, #9
 80060a6:	d926      	bls.n	80060f6 <_strtod_l+0x1ae>
 80060a8:	494c      	ldr	r1, [pc, #304]	; (80061dc <_strtod_l+0x294>)
 80060aa:	2201      	movs	r2, #1
 80060ac:	f001 fde3 	bl	8007c76 <strncmp>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	d030      	beq.n	8006116 <_strtod_l+0x1ce>
 80060b4:	2000      	movs	r0, #0
 80060b6:	4632      	mov	r2, r6
 80060b8:	9005      	str	r0, [sp, #20]
 80060ba:	465e      	mov	r6, fp
 80060bc:	4603      	mov	r3, r0
 80060be:	2a65      	cmp	r2, #101	; 0x65
 80060c0:	d001      	beq.n	80060c6 <_strtod_l+0x17e>
 80060c2:	2a45      	cmp	r2, #69	; 0x45
 80060c4:	d113      	bne.n	80060ee <_strtod_l+0x1a6>
 80060c6:	b91e      	cbnz	r6, 80060d0 <_strtod_l+0x188>
 80060c8:	9a04      	ldr	r2, [sp, #16]
 80060ca:	4302      	orrs	r2, r0
 80060cc:	d094      	beq.n	8005ff8 <_strtod_l+0xb0>
 80060ce:	2600      	movs	r6, #0
 80060d0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80060d2:	1c6a      	adds	r2, r5, #1
 80060d4:	9215      	str	r2, [sp, #84]	; 0x54
 80060d6:	786a      	ldrb	r2, [r5, #1]
 80060d8:	2a2b      	cmp	r2, #43	; 0x2b
 80060da:	d074      	beq.n	80061c6 <_strtod_l+0x27e>
 80060dc:	2a2d      	cmp	r2, #45	; 0x2d
 80060de:	d078      	beq.n	80061d2 <_strtod_l+0x28a>
 80060e0:	f04f 0c00 	mov.w	ip, #0
 80060e4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80060e8:	2909      	cmp	r1, #9
 80060ea:	d97f      	bls.n	80061ec <_strtod_l+0x2a4>
 80060ec:	9515      	str	r5, [sp, #84]	; 0x54
 80060ee:	2700      	movs	r7, #0
 80060f0:	e09e      	b.n	8006230 <_strtod_l+0x2e8>
 80060f2:	2300      	movs	r3, #0
 80060f4:	e7c8      	b.n	8006088 <_strtod_l+0x140>
 80060f6:	f1bb 0f08 	cmp.w	fp, #8
 80060fa:	bfd8      	it	le
 80060fc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80060fe:	f100 0001 	add.w	r0, r0, #1
 8006102:	bfda      	itte	le
 8006104:	fb02 3301 	mlale	r3, r2, r1, r3
 8006108:	9309      	strle	r3, [sp, #36]	; 0x24
 800610a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800610e:	f10b 0b01 	add.w	fp, fp, #1
 8006112:	9015      	str	r0, [sp, #84]	; 0x54
 8006114:	e7c1      	b.n	800609a <_strtod_l+0x152>
 8006116:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	9215      	str	r2, [sp, #84]	; 0x54
 800611c:	785a      	ldrb	r2, [r3, #1]
 800611e:	f1bb 0f00 	cmp.w	fp, #0
 8006122:	d037      	beq.n	8006194 <_strtod_l+0x24c>
 8006124:	9005      	str	r0, [sp, #20]
 8006126:	465e      	mov	r6, fp
 8006128:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800612c:	2b09      	cmp	r3, #9
 800612e:	d912      	bls.n	8006156 <_strtod_l+0x20e>
 8006130:	2301      	movs	r3, #1
 8006132:	e7c4      	b.n	80060be <_strtod_l+0x176>
 8006134:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006136:	1c5a      	adds	r2, r3, #1
 8006138:	9215      	str	r2, [sp, #84]	; 0x54
 800613a:	785a      	ldrb	r2, [r3, #1]
 800613c:	3001      	adds	r0, #1
 800613e:	2a30      	cmp	r2, #48	; 0x30
 8006140:	d0f8      	beq.n	8006134 <_strtod_l+0x1ec>
 8006142:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006146:	2b08      	cmp	r3, #8
 8006148:	f200 84c1 	bhi.w	8006ace <_strtod_l+0xb86>
 800614c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800614e:	9005      	str	r0, [sp, #20]
 8006150:	2000      	movs	r0, #0
 8006152:	930b      	str	r3, [sp, #44]	; 0x2c
 8006154:	4606      	mov	r6, r0
 8006156:	3a30      	subs	r2, #48	; 0x30
 8006158:	f100 0301 	add.w	r3, r0, #1
 800615c:	d014      	beq.n	8006188 <_strtod_l+0x240>
 800615e:	9905      	ldr	r1, [sp, #20]
 8006160:	4419      	add	r1, r3
 8006162:	9105      	str	r1, [sp, #20]
 8006164:	4633      	mov	r3, r6
 8006166:	eb00 0c06 	add.w	ip, r0, r6
 800616a:	210a      	movs	r1, #10
 800616c:	4563      	cmp	r3, ip
 800616e:	d113      	bne.n	8006198 <_strtod_l+0x250>
 8006170:	1833      	adds	r3, r6, r0
 8006172:	2b08      	cmp	r3, #8
 8006174:	f106 0601 	add.w	r6, r6, #1
 8006178:	4406      	add	r6, r0
 800617a:	dc1a      	bgt.n	80061b2 <_strtod_l+0x26a>
 800617c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800617e:	230a      	movs	r3, #10
 8006180:	fb03 2301 	mla	r3, r3, r1, r2
 8006184:	9309      	str	r3, [sp, #36]	; 0x24
 8006186:	2300      	movs	r3, #0
 8006188:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800618a:	1c51      	adds	r1, r2, #1
 800618c:	9115      	str	r1, [sp, #84]	; 0x54
 800618e:	7852      	ldrb	r2, [r2, #1]
 8006190:	4618      	mov	r0, r3
 8006192:	e7c9      	b.n	8006128 <_strtod_l+0x1e0>
 8006194:	4658      	mov	r0, fp
 8006196:	e7d2      	b.n	800613e <_strtod_l+0x1f6>
 8006198:	2b08      	cmp	r3, #8
 800619a:	f103 0301 	add.w	r3, r3, #1
 800619e:	dc03      	bgt.n	80061a8 <_strtod_l+0x260>
 80061a0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80061a2:	434f      	muls	r7, r1
 80061a4:	9709      	str	r7, [sp, #36]	; 0x24
 80061a6:	e7e1      	b.n	800616c <_strtod_l+0x224>
 80061a8:	2b10      	cmp	r3, #16
 80061aa:	bfd8      	it	le
 80061ac:	fb01 fa0a 	mulle.w	sl, r1, sl
 80061b0:	e7dc      	b.n	800616c <_strtod_l+0x224>
 80061b2:	2e10      	cmp	r6, #16
 80061b4:	bfdc      	itt	le
 80061b6:	230a      	movle	r3, #10
 80061b8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80061bc:	e7e3      	b.n	8006186 <_strtod_l+0x23e>
 80061be:	2300      	movs	r3, #0
 80061c0:	9305      	str	r3, [sp, #20]
 80061c2:	2301      	movs	r3, #1
 80061c4:	e780      	b.n	80060c8 <_strtod_l+0x180>
 80061c6:	f04f 0c00 	mov.w	ip, #0
 80061ca:	1caa      	adds	r2, r5, #2
 80061cc:	9215      	str	r2, [sp, #84]	; 0x54
 80061ce:	78aa      	ldrb	r2, [r5, #2]
 80061d0:	e788      	b.n	80060e4 <_strtod_l+0x19c>
 80061d2:	f04f 0c01 	mov.w	ip, #1
 80061d6:	e7f8      	b.n	80061ca <_strtod_l+0x282>
 80061d8:	0800a88c 	.word	0x0800a88c
 80061dc:	0800a888 	.word	0x0800a888
 80061e0:	7ff00000 	.word	0x7ff00000
 80061e4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80061e6:	1c51      	adds	r1, r2, #1
 80061e8:	9115      	str	r1, [sp, #84]	; 0x54
 80061ea:	7852      	ldrb	r2, [r2, #1]
 80061ec:	2a30      	cmp	r2, #48	; 0x30
 80061ee:	d0f9      	beq.n	80061e4 <_strtod_l+0x29c>
 80061f0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80061f4:	2908      	cmp	r1, #8
 80061f6:	f63f af7a 	bhi.w	80060ee <_strtod_l+0x1a6>
 80061fa:	3a30      	subs	r2, #48	; 0x30
 80061fc:	9208      	str	r2, [sp, #32]
 80061fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006200:	920c      	str	r2, [sp, #48]	; 0x30
 8006202:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006204:	1c57      	adds	r7, r2, #1
 8006206:	9715      	str	r7, [sp, #84]	; 0x54
 8006208:	7852      	ldrb	r2, [r2, #1]
 800620a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800620e:	f1be 0f09 	cmp.w	lr, #9
 8006212:	d938      	bls.n	8006286 <_strtod_l+0x33e>
 8006214:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006216:	1a7f      	subs	r7, r7, r1
 8006218:	2f08      	cmp	r7, #8
 800621a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800621e:	dc03      	bgt.n	8006228 <_strtod_l+0x2e0>
 8006220:	9908      	ldr	r1, [sp, #32]
 8006222:	428f      	cmp	r7, r1
 8006224:	bfa8      	it	ge
 8006226:	460f      	movge	r7, r1
 8006228:	f1bc 0f00 	cmp.w	ip, #0
 800622c:	d000      	beq.n	8006230 <_strtod_l+0x2e8>
 800622e:	427f      	negs	r7, r7
 8006230:	2e00      	cmp	r6, #0
 8006232:	d14f      	bne.n	80062d4 <_strtod_l+0x38c>
 8006234:	9904      	ldr	r1, [sp, #16]
 8006236:	4301      	orrs	r1, r0
 8006238:	f47f aec1 	bne.w	8005fbe <_strtod_l+0x76>
 800623c:	2b00      	cmp	r3, #0
 800623e:	f47f aedb 	bne.w	8005ff8 <_strtod_l+0xb0>
 8006242:	2a69      	cmp	r2, #105	; 0x69
 8006244:	d029      	beq.n	800629a <_strtod_l+0x352>
 8006246:	dc26      	bgt.n	8006296 <_strtod_l+0x34e>
 8006248:	2a49      	cmp	r2, #73	; 0x49
 800624a:	d026      	beq.n	800629a <_strtod_l+0x352>
 800624c:	2a4e      	cmp	r2, #78	; 0x4e
 800624e:	f47f aed3 	bne.w	8005ff8 <_strtod_l+0xb0>
 8006252:	499b      	ldr	r1, [pc, #620]	; (80064c0 <_strtod_l+0x578>)
 8006254:	a815      	add	r0, sp, #84	; 0x54
 8006256:	f002 ff39 	bl	80090cc <__match>
 800625a:	2800      	cmp	r0, #0
 800625c:	f43f aecc 	beq.w	8005ff8 <_strtod_l+0xb0>
 8006260:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	2b28      	cmp	r3, #40	; 0x28
 8006266:	d12f      	bne.n	80062c8 <_strtod_l+0x380>
 8006268:	4996      	ldr	r1, [pc, #600]	; (80064c4 <_strtod_l+0x57c>)
 800626a:	aa18      	add	r2, sp, #96	; 0x60
 800626c:	a815      	add	r0, sp, #84	; 0x54
 800626e:	f002 ff41 	bl	80090f4 <__hexnan>
 8006272:	2805      	cmp	r0, #5
 8006274:	d128      	bne.n	80062c8 <_strtod_l+0x380>
 8006276:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006278:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800627c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006280:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006284:	e69b      	b.n	8005fbe <_strtod_l+0x76>
 8006286:	9f08      	ldr	r7, [sp, #32]
 8006288:	210a      	movs	r1, #10
 800628a:	fb01 2107 	mla	r1, r1, r7, r2
 800628e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006292:	9208      	str	r2, [sp, #32]
 8006294:	e7b5      	b.n	8006202 <_strtod_l+0x2ba>
 8006296:	2a6e      	cmp	r2, #110	; 0x6e
 8006298:	e7d9      	b.n	800624e <_strtod_l+0x306>
 800629a:	498b      	ldr	r1, [pc, #556]	; (80064c8 <_strtod_l+0x580>)
 800629c:	a815      	add	r0, sp, #84	; 0x54
 800629e:	f002 ff15 	bl	80090cc <__match>
 80062a2:	2800      	cmp	r0, #0
 80062a4:	f43f aea8 	beq.w	8005ff8 <_strtod_l+0xb0>
 80062a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062aa:	4988      	ldr	r1, [pc, #544]	; (80064cc <_strtod_l+0x584>)
 80062ac:	3b01      	subs	r3, #1
 80062ae:	a815      	add	r0, sp, #84	; 0x54
 80062b0:	9315      	str	r3, [sp, #84]	; 0x54
 80062b2:	f002 ff0b 	bl	80090cc <__match>
 80062b6:	b910      	cbnz	r0, 80062be <_strtod_l+0x376>
 80062b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062ba:	3301      	adds	r3, #1
 80062bc:	9315      	str	r3, [sp, #84]	; 0x54
 80062be:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80064dc <_strtod_l+0x594>
 80062c2:	f04f 0800 	mov.w	r8, #0
 80062c6:	e67a      	b.n	8005fbe <_strtod_l+0x76>
 80062c8:	4881      	ldr	r0, [pc, #516]	; (80064d0 <_strtod_l+0x588>)
 80062ca:	f001 fd81 	bl	8007dd0 <nan>
 80062ce:	ec59 8b10 	vmov	r8, r9, d0
 80062d2:	e674      	b.n	8005fbe <_strtod_l+0x76>
 80062d4:	9b05      	ldr	r3, [sp, #20]
 80062d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062d8:	1afb      	subs	r3, r7, r3
 80062da:	f1bb 0f00 	cmp.w	fp, #0
 80062de:	bf08      	it	eq
 80062e0:	46b3      	moveq	fp, r6
 80062e2:	2e10      	cmp	r6, #16
 80062e4:	9308      	str	r3, [sp, #32]
 80062e6:	4635      	mov	r5, r6
 80062e8:	bfa8      	it	ge
 80062ea:	2510      	movge	r5, #16
 80062ec:	f7fa f912 	bl	8000514 <__aeabi_ui2d>
 80062f0:	2e09      	cmp	r6, #9
 80062f2:	4680      	mov	r8, r0
 80062f4:	4689      	mov	r9, r1
 80062f6:	dd13      	ble.n	8006320 <_strtod_l+0x3d8>
 80062f8:	4b76      	ldr	r3, [pc, #472]	; (80064d4 <_strtod_l+0x58c>)
 80062fa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80062fe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006302:	f7fa f981 	bl	8000608 <__aeabi_dmul>
 8006306:	4680      	mov	r8, r0
 8006308:	4650      	mov	r0, sl
 800630a:	4689      	mov	r9, r1
 800630c:	f7fa f902 	bl	8000514 <__aeabi_ui2d>
 8006310:	4602      	mov	r2, r0
 8006312:	460b      	mov	r3, r1
 8006314:	4640      	mov	r0, r8
 8006316:	4649      	mov	r1, r9
 8006318:	f7f9 ffc0 	bl	800029c <__adddf3>
 800631c:	4680      	mov	r8, r0
 800631e:	4689      	mov	r9, r1
 8006320:	2e0f      	cmp	r6, #15
 8006322:	dc38      	bgt.n	8006396 <_strtod_l+0x44e>
 8006324:	9b08      	ldr	r3, [sp, #32]
 8006326:	2b00      	cmp	r3, #0
 8006328:	f43f ae49 	beq.w	8005fbe <_strtod_l+0x76>
 800632c:	dd24      	ble.n	8006378 <_strtod_l+0x430>
 800632e:	2b16      	cmp	r3, #22
 8006330:	dc0b      	bgt.n	800634a <_strtod_l+0x402>
 8006332:	4968      	ldr	r1, [pc, #416]	; (80064d4 <_strtod_l+0x58c>)
 8006334:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006338:	e9d1 0100 	ldrd	r0, r1, [r1]
 800633c:	4642      	mov	r2, r8
 800633e:	464b      	mov	r3, r9
 8006340:	f7fa f962 	bl	8000608 <__aeabi_dmul>
 8006344:	4680      	mov	r8, r0
 8006346:	4689      	mov	r9, r1
 8006348:	e639      	b.n	8005fbe <_strtod_l+0x76>
 800634a:	9a08      	ldr	r2, [sp, #32]
 800634c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006350:	4293      	cmp	r3, r2
 8006352:	db20      	blt.n	8006396 <_strtod_l+0x44e>
 8006354:	4c5f      	ldr	r4, [pc, #380]	; (80064d4 <_strtod_l+0x58c>)
 8006356:	f1c6 060f 	rsb	r6, r6, #15
 800635a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800635e:	4642      	mov	r2, r8
 8006360:	464b      	mov	r3, r9
 8006362:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006366:	f7fa f94f 	bl	8000608 <__aeabi_dmul>
 800636a:	9b08      	ldr	r3, [sp, #32]
 800636c:	1b9e      	subs	r6, r3, r6
 800636e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006372:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006376:	e7e3      	b.n	8006340 <_strtod_l+0x3f8>
 8006378:	9b08      	ldr	r3, [sp, #32]
 800637a:	3316      	adds	r3, #22
 800637c:	db0b      	blt.n	8006396 <_strtod_l+0x44e>
 800637e:	9b05      	ldr	r3, [sp, #20]
 8006380:	1bdf      	subs	r7, r3, r7
 8006382:	4b54      	ldr	r3, [pc, #336]	; (80064d4 <_strtod_l+0x58c>)
 8006384:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800638c:	4640      	mov	r0, r8
 800638e:	4649      	mov	r1, r9
 8006390:	f7fa fa64 	bl	800085c <__aeabi_ddiv>
 8006394:	e7d6      	b.n	8006344 <_strtod_l+0x3fc>
 8006396:	9b08      	ldr	r3, [sp, #32]
 8006398:	1b75      	subs	r5, r6, r5
 800639a:	441d      	add	r5, r3
 800639c:	2d00      	cmp	r5, #0
 800639e:	dd70      	ble.n	8006482 <_strtod_l+0x53a>
 80063a0:	f015 030f 	ands.w	r3, r5, #15
 80063a4:	d00a      	beq.n	80063bc <_strtod_l+0x474>
 80063a6:	494b      	ldr	r1, [pc, #300]	; (80064d4 <_strtod_l+0x58c>)
 80063a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80063ac:	4642      	mov	r2, r8
 80063ae:	464b      	mov	r3, r9
 80063b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063b4:	f7fa f928 	bl	8000608 <__aeabi_dmul>
 80063b8:	4680      	mov	r8, r0
 80063ba:	4689      	mov	r9, r1
 80063bc:	f035 050f 	bics.w	r5, r5, #15
 80063c0:	d04d      	beq.n	800645e <_strtod_l+0x516>
 80063c2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80063c6:	dd22      	ble.n	800640e <_strtod_l+0x4c6>
 80063c8:	2500      	movs	r5, #0
 80063ca:	46ab      	mov	fp, r5
 80063cc:	9509      	str	r5, [sp, #36]	; 0x24
 80063ce:	9505      	str	r5, [sp, #20]
 80063d0:	2322      	movs	r3, #34	; 0x22
 80063d2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80064dc <_strtod_l+0x594>
 80063d6:	6023      	str	r3, [r4, #0]
 80063d8:	f04f 0800 	mov.w	r8, #0
 80063dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f43f aded 	beq.w	8005fbe <_strtod_l+0x76>
 80063e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80063e6:	4620      	mov	r0, r4
 80063e8:	f003 f826 	bl	8009438 <_Bfree>
 80063ec:	9905      	ldr	r1, [sp, #20]
 80063ee:	4620      	mov	r0, r4
 80063f0:	f003 f822 	bl	8009438 <_Bfree>
 80063f4:	4659      	mov	r1, fp
 80063f6:	4620      	mov	r0, r4
 80063f8:	f003 f81e 	bl	8009438 <_Bfree>
 80063fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063fe:	4620      	mov	r0, r4
 8006400:	f003 f81a 	bl	8009438 <_Bfree>
 8006404:	4629      	mov	r1, r5
 8006406:	4620      	mov	r0, r4
 8006408:	f003 f816 	bl	8009438 <_Bfree>
 800640c:	e5d7      	b.n	8005fbe <_strtod_l+0x76>
 800640e:	4b32      	ldr	r3, [pc, #200]	; (80064d8 <_strtod_l+0x590>)
 8006410:	9304      	str	r3, [sp, #16]
 8006412:	2300      	movs	r3, #0
 8006414:	112d      	asrs	r5, r5, #4
 8006416:	4640      	mov	r0, r8
 8006418:	4649      	mov	r1, r9
 800641a:	469a      	mov	sl, r3
 800641c:	2d01      	cmp	r5, #1
 800641e:	dc21      	bgt.n	8006464 <_strtod_l+0x51c>
 8006420:	b10b      	cbz	r3, 8006426 <_strtod_l+0x4de>
 8006422:	4680      	mov	r8, r0
 8006424:	4689      	mov	r9, r1
 8006426:	492c      	ldr	r1, [pc, #176]	; (80064d8 <_strtod_l+0x590>)
 8006428:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800642c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006430:	4642      	mov	r2, r8
 8006432:	464b      	mov	r3, r9
 8006434:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006438:	f7fa f8e6 	bl	8000608 <__aeabi_dmul>
 800643c:	4b27      	ldr	r3, [pc, #156]	; (80064dc <_strtod_l+0x594>)
 800643e:	460a      	mov	r2, r1
 8006440:	400b      	ands	r3, r1
 8006442:	4927      	ldr	r1, [pc, #156]	; (80064e0 <_strtod_l+0x598>)
 8006444:	428b      	cmp	r3, r1
 8006446:	4680      	mov	r8, r0
 8006448:	d8be      	bhi.n	80063c8 <_strtod_l+0x480>
 800644a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800644e:	428b      	cmp	r3, r1
 8006450:	bf86      	itte	hi
 8006452:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80064e4 <_strtod_l+0x59c>
 8006456:	f04f 38ff 	movhi.w	r8, #4294967295
 800645a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800645e:	2300      	movs	r3, #0
 8006460:	9304      	str	r3, [sp, #16]
 8006462:	e07b      	b.n	800655c <_strtod_l+0x614>
 8006464:	07ea      	lsls	r2, r5, #31
 8006466:	d505      	bpl.n	8006474 <_strtod_l+0x52c>
 8006468:	9b04      	ldr	r3, [sp, #16]
 800646a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646e:	f7fa f8cb 	bl	8000608 <__aeabi_dmul>
 8006472:	2301      	movs	r3, #1
 8006474:	9a04      	ldr	r2, [sp, #16]
 8006476:	3208      	adds	r2, #8
 8006478:	f10a 0a01 	add.w	sl, sl, #1
 800647c:	106d      	asrs	r5, r5, #1
 800647e:	9204      	str	r2, [sp, #16]
 8006480:	e7cc      	b.n	800641c <_strtod_l+0x4d4>
 8006482:	d0ec      	beq.n	800645e <_strtod_l+0x516>
 8006484:	426d      	negs	r5, r5
 8006486:	f015 020f 	ands.w	r2, r5, #15
 800648a:	d00a      	beq.n	80064a2 <_strtod_l+0x55a>
 800648c:	4b11      	ldr	r3, [pc, #68]	; (80064d4 <_strtod_l+0x58c>)
 800648e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006492:	4640      	mov	r0, r8
 8006494:	4649      	mov	r1, r9
 8006496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649a:	f7fa f9df 	bl	800085c <__aeabi_ddiv>
 800649e:	4680      	mov	r8, r0
 80064a0:	4689      	mov	r9, r1
 80064a2:	112d      	asrs	r5, r5, #4
 80064a4:	d0db      	beq.n	800645e <_strtod_l+0x516>
 80064a6:	2d1f      	cmp	r5, #31
 80064a8:	dd1e      	ble.n	80064e8 <_strtod_l+0x5a0>
 80064aa:	2500      	movs	r5, #0
 80064ac:	46ab      	mov	fp, r5
 80064ae:	9509      	str	r5, [sp, #36]	; 0x24
 80064b0:	9505      	str	r5, [sp, #20]
 80064b2:	2322      	movs	r3, #34	; 0x22
 80064b4:	f04f 0800 	mov.w	r8, #0
 80064b8:	f04f 0900 	mov.w	r9, #0
 80064bc:	6023      	str	r3, [r4, #0]
 80064be:	e78d      	b.n	80063dc <_strtod_l+0x494>
 80064c0:	0800a9ee 	.word	0x0800a9ee
 80064c4:	0800a8a0 	.word	0x0800a8a0
 80064c8:	0800a9e6 	.word	0x0800a9e6
 80064cc:	0800aa25 	.word	0x0800aa25
 80064d0:	0800acb0 	.word	0x0800acb0
 80064d4:	0800ab90 	.word	0x0800ab90
 80064d8:	0800ab68 	.word	0x0800ab68
 80064dc:	7ff00000 	.word	0x7ff00000
 80064e0:	7ca00000 	.word	0x7ca00000
 80064e4:	7fefffff 	.word	0x7fefffff
 80064e8:	f015 0310 	ands.w	r3, r5, #16
 80064ec:	bf18      	it	ne
 80064ee:	236a      	movne	r3, #106	; 0x6a
 80064f0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8006894 <_strtod_l+0x94c>
 80064f4:	9304      	str	r3, [sp, #16]
 80064f6:	4640      	mov	r0, r8
 80064f8:	4649      	mov	r1, r9
 80064fa:	2300      	movs	r3, #0
 80064fc:	07ea      	lsls	r2, r5, #31
 80064fe:	d504      	bpl.n	800650a <_strtod_l+0x5c2>
 8006500:	e9da 2300 	ldrd	r2, r3, [sl]
 8006504:	f7fa f880 	bl	8000608 <__aeabi_dmul>
 8006508:	2301      	movs	r3, #1
 800650a:	106d      	asrs	r5, r5, #1
 800650c:	f10a 0a08 	add.w	sl, sl, #8
 8006510:	d1f4      	bne.n	80064fc <_strtod_l+0x5b4>
 8006512:	b10b      	cbz	r3, 8006518 <_strtod_l+0x5d0>
 8006514:	4680      	mov	r8, r0
 8006516:	4689      	mov	r9, r1
 8006518:	9b04      	ldr	r3, [sp, #16]
 800651a:	b1bb      	cbz	r3, 800654c <_strtod_l+0x604>
 800651c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006520:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006524:	2b00      	cmp	r3, #0
 8006526:	4649      	mov	r1, r9
 8006528:	dd10      	ble.n	800654c <_strtod_l+0x604>
 800652a:	2b1f      	cmp	r3, #31
 800652c:	f340 811e 	ble.w	800676c <_strtod_l+0x824>
 8006530:	2b34      	cmp	r3, #52	; 0x34
 8006532:	bfde      	ittt	le
 8006534:	f04f 33ff 	movle.w	r3, #4294967295
 8006538:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800653c:	4093      	lslle	r3, r2
 800653e:	f04f 0800 	mov.w	r8, #0
 8006542:	bfcc      	ite	gt
 8006544:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006548:	ea03 0901 	andle.w	r9, r3, r1
 800654c:	2200      	movs	r2, #0
 800654e:	2300      	movs	r3, #0
 8006550:	4640      	mov	r0, r8
 8006552:	4649      	mov	r1, r9
 8006554:	f7fa fac0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006558:	2800      	cmp	r0, #0
 800655a:	d1a6      	bne.n	80064aa <_strtod_l+0x562>
 800655c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006562:	4633      	mov	r3, r6
 8006564:	465a      	mov	r2, fp
 8006566:	4620      	mov	r0, r4
 8006568:	f002 ffce 	bl	8009508 <__s2b>
 800656c:	9009      	str	r0, [sp, #36]	; 0x24
 800656e:	2800      	cmp	r0, #0
 8006570:	f43f af2a 	beq.w	80063c8 <_strtod_l+0x480>
 8006574:	9a08      	ldr	r2, [sp, #32]
 8006576:	9b05      	ldr	r3, [sp, #20]
 8006578:	2a00      	cmp	r2, #0
 800657a:	eba3 0307 	sub.w	r3, r3, r7
 800657e:	bfa8      	it	ge
 8006580:	2300      	movge	r3, #0
 8006582:	930c      	str	r3, [sp, #48]	; 0x30
 8006584:	2500      	movs	r5, #0
 8006586:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800658a:	9312      	str	r3, [sp, #72]	; 0x48
 800658c:	46ab      	mov	fp, r5
 800658e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006590:	4620      	mov	r0, r4
 8006592:	6859      	ldr	r1, [r3, #4]
 8006594:	f002 ff10 	bl	80093b8 <_Balloc>
 8006598:	9005      	str	r0, [sp, #20]
 800659a:	2800      	cmp	r0, #0
 800659c:	f43f af18 	beq.w	80063d0 <_strtod_l+0x488>
 80065a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065a2:	691a      	ldr	r2, [r3, #16]
 80065a4:	3202      	adds	r2, #2
 80065a6:	f103 010c 	add.w	r1, r3, #12
 80065aa:	0092      	lsls	r2, r2, #2
 80065ac:	300c      	adds	r0, #12
 80065ae:	f001 fbfe 	bl	8007dae <memcpy>
 80065b2:	ec49 8b10 	vmov	d0, r8, r9
 80065b6:	aa18      	add	r2, sp, #96	; 0x60
 80065b8:	a917      	add	r1, sp, #92	; 0x5c
 80065ba:	4620      	mov	r0, r4
 80065bc:	f003 fad8 	bl	8009b70 <__d2b>
 80065c0:	ec49 8b18 	vmov	d8, r8, r9
 80065c4:	9016      	str	r0, [sp, #88]	; 0x58
 80065c6:	2800      	cmp	r0, #0
 80065c8:	f43f af02 	beq.w	80063d0 <_strtod_l+0x488>
 80065cc:	2101      	movs	r1, #1
 80065ce:	4620      	mov	r0, r4
 80065d0:	f003 f832 	bl	8009638 <__i2b>
 80065d4:	4683      	mov	fp, r0
 80065d6:	2800      	cmp	r0, #0
 80065d8:	f43f aefa 	beq.w	80063d0 <_strtod_l+0x488>
 80065dc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80065de:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80065e0:	2e00      	cmp	r6, #0
 80065e2:	bfab      	itete	ge
 80065e4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80065e6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80065e8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80065ea:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80065ee:	bfac      	ite	ge
 80065f0:	eb06 0a03 	addge.w	sl, r6, r3
 80065f4:	1b9f      	sublt	r7, r3, r6
 80065f6:	9b04      	ldr	r3, [sp, #16]
 80065f8:	1af6      	subs	r6, r6, r3
 80065fa:	4416      	add	r6, r2
 80065fc:	4ba0      	ldr	r3, [pc, #640]	; (8006880 <_strtod_l+0x938>)
 80065fe:	3e01      	subs	r6, #1
 8006600:	429e      	cmp	r6, r3
 8006602:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006606:	f280 80c4 	bge.w	8006792 <_strtod_l+0x84a>
 800660a:	1b9b      	subs	r3, r3, r6
 800660c:	2b1f      	cmp	r3, #31
 800660e:	eba2 0203 	sub.w	r2, r2, r3
 8006612:	f04f 0101 	mov.w	r1, #1
 8006616:	f300 80b0 	bgt.w	800677a <_strtod_l+0x832>
 800661a:	fa01 f303 	lsl.w	r3, r1, r3
 800661e:	930e      	str	r3, [sp, #56]	; 0x38
 8006620:	2300      	movs	r3, #0
 8006622:	930d      	str	r3, [sp, #52]	; 0x34
 8006624:	eb0a 0602 	add.w	r6, sl, r2
 8006628:	9b04      	ldr	r3, [sp, #16]
 800662a:	45b2      	cmp	sl, r6
 800662c:	4417      	add	r7, r2
 800662e:	441f      	add	r7, r3
 8006630:	4653      	mov	r3, sl
 8006632:	bfa8      	it	ge
 8006634:	4633      	movge	r3, r6
 8006636:	42bb      	cmp	r3, r7
 8006638:	bfa8      	it	ge
 800663a:	463b      	movge	r3, r7
 800663c:	2b00      	cmp	r3, #0
 800663e:	bfc2      	ittt	gt
 8006640:	1af6      	subgt	r6, r6, r3
 8006642:	1aff      	subgt	r7, r7, r3
 8006644:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800664a:	2b00      	cmp	r3, #0
 800664c:	dd17      	ble.n	800667e <_strtod_l+0x736>
 800664e:	4659      	mov	r1, fp
 8006650:	461a      	mov	r2, r3
 8006652:	4620      	mov	r0, r4
 8006654:	f003 f8b0 	bl	80097b8 <__pow5mult>
 8006658:	4683      	mov	fp, r0
 800665a:	2800      	cmp	r0, #0
 800665c:	f43f aeb8 	beq.w	80063d0 <_strtod_l+0x488>
 8006660:	4601      	mov	r1, r0
 8006662:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006664:	4620      	mov	r0, r4
 8006666:	f002 fffd 	bl	8009664 <__multiply>
 800666a:	900b      	str	r0, [sp, #44]	; 0x2c
 800666c:	2800      	cmp	r0, #0
 800666e:	f43f aeaf 	beq.w	80063d0 <_strtod_l+0x488>
 8006672:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006674:	4620      	mov	r0, r4
 8006676:	f002 fedf 	bl	8009438 <_Bfree>
 800667a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800667c:	9316      	str	r3, [sp, #88]	; 0x58
 800667e:	2e00      	cmp	r6, #0
 8006680:	f300 808c 	bgt.w	800679c <_strtod_l+0x854>
 8006684:	9b08      	ldr	r3, [sp, #32]
 8006686:	2b00      	cmp	r3, #0
 8006688:	dd08      	ble.n	800669c <_strtod_l+0x754>
 800668a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800668c:	9905      	ldr	r1, [sp, #20]
 800668e:	4620      	mov	r0, r4
 8006690:	f003 f892 	bl	80097b8 <__pow5mult>
 8006694:	9005      	str	r0, [sp, #20]
 8006696:	2800      	cmp	r0, #0
 8006698:	f43f ae9a 	beq.w	80063d0 <_strtod_l+0x488>
 800669c:	2f00      	cmp	r7, #0
 800669e:	dd08      	ble.n	80066b2 <_strtod_l+0x76a>
 80066a0:	9905      	ldr	r1, [sp, #20]
 80066a2:	463a      	mov	r2, r7
 80066a4:	4620      	mov	r0, r4
 80066a6:	f003 f8e1 	bl	800986c <__lshift>
 80066aa:	9005      	str	r0, [sp, #20]
 80066ac:	2800      	cmp	r0, #0
 80066ae:	f43f ae8f 	beq.w	80063d0 <_strtod_l+0x488>
 80066b2:	f1ba 0f00 	cmp.w	sl, #0
 80066b6:	dd08      	ble.n	80066ca <_strtod_l+0x782>
 80066b8:	4659      	mov	r1, fp
 80066ba:	4652      	mov	r2, sl
 80066bc:	4620      	mov	r0, r4
 80066be:	f003 f8d5 	bl	800986c <__lshift>
 80066c2:	4683      	mov	fp, r0
 80066c4:	2800      	cmp	r0, #0
 80066c6:	f43f ae83 	beq.w	80063d0 <_strtod_l+0x488>
 80066ca:	9a05      	ldr	r2, [sp, #20]
 80066cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80066ce:	4620      	mov	r0, r4
 80066d0:	f003 f954 	bl	800997c <__mdiff>
 80066d4:	4605      	mov	r5, r0
 80066d6:	2800      	cmp	r0, #0
 80066d8:	f43f ae7a 	beq.w	80063d0 <_strtod_l+0x488>
 80066dc:	68c3      	ldr	r3, [r0, #12]
 80066de:	930b      	str	r3, [sp, #44]	; 0x2c
 80066e0:	2300      	movs	r3, #0
 80066e2:	60c3      	str	r3, [r0, #12]
 80066e4:	4659      	mov	r1, fp
 80066e6:	f003 f92d 	bl	8009944 <__mcmp>
 80066ea:	2800      	cmp	r0, #0
 80066ec:	da60      	bge.n	80067b0 <_strtod_l+0x868>
 80066ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066f0:	ea53 0308 	orrs.w	r3, r3, r8
 80066f4:	f040 8084 	bne.w	8006800 <_strtod_l+0x8b8>
 80066f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d17f      	bne.n	8006800 <_strtod_l+0x8b8>
 8006700:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006704:	0d1b      	lsrs	r3, r3, #20
 8006706:	051b      	lsls	r3, r3, #20
 8006708:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800670c:	d978      	bls.n	8006800 <_strtod_l+0x8b8>
 800670e:	696b      	ldr	r3, [r5, #20]
 8006710:	b913      	cbnz	r3, 8006718 <_strtod_l+0x7d0>
 8006712:	692b      	ldr	r3, [r5, #16]
 8006714:	2b01      	cmp	r3, #1
 8006716:	dd73      	ble.n	8006800 <_strtod_l+0x8b8>
 8006718:	4629      	mov	r1, r5
 800671a:	2201      	movs	r2, #1
 800671c:	4620      	mov	r0, r4
 800671e:	f003 f8a5 	bl	800986c <__lshift>
 8006722:	4659      	mov	r1, fp
 8006724:	4605      	mov	r5, r0
 8006726:	f003 f90d 	bl	8009944 <__mcmp>
 800672a:	2800      	cmp	r0, #0
 800672c:	dd68      	ble.n	8006800 <_strtod_l+0x8b8>
 800672e:	9904      	ldr	r1, [sp, #16]
 8006730:	4a54      	ldr	r2, [pc, #336]	; (8006884 <_strtod_l+0x93c>)
 8006732:	464b      	mov	r3, r9
 8006734:	2900      	cmp	r1, #0
 8006736:	f000 8084 	beq.w	8006842 <_strtod_l+0x8fa>
 800673a:	ea02 0109 	and.w	r1, r2, r9
 800673e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006742:	dc7e      	bgt.n	8006842 <_strtod_l+0x8fa>
 8006744:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006748:	f77f aeb3 	ble.w	80064b2 <_strtod_l+0x56a>
 800674c:	4b4e      	ldr	r3, [pc, #312]	; (8006888 <_strtod_l+0x940>)
 800674e:	4640      	mov	r0, r8
 8006750:	4649      	mov	r1, r9
 8006752:	2200      	movs	r2, #0
 8006754:	f7f9 ff58 	bl	8000608 <__aeabi_dmul>
 8006758:	4b4a      	ldr	r3, [pc, #296]	; (8006884 <_strtod_l+0x93c>)
 800675a:	400b      	ands	r3, r1
 800675c:	4680      	mov	r8, r0
 800675e:	4689      	mov	r9, r1
 8006760:	2b00      	cmp	r3, #0
 8006762:	f47f ae3f 	bne.w	80063e4 <_strtod_l+0x49c>
 8006766:	2322      	movs	r3, #34	; 0x22
 8006768:	6023      	str	r3, [r4, #0]
 800676a:	e63b      	b.n	80063e4 <_strtod_l+0x49c>
 800676c:	f04f 32ff 	mov.w	r2, #4294967295
 8006770:	fa02 f303 	lsl.w	r3, r2, r3
 8006774:	ea03 0808 	and.w	r8, r3, r8
 8006778:	e6e8      	b.n	800654c <_strtod_l+0x604>
 800677a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800677e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006782:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006786:	36e2      	adds	r6, #226	; 0xe2
 8006788:	fa01 f306 	lsl.w	r3, r1, r6
 800678c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8006790:	e748      	b.n	8006624 <_strtod_l+0x6dc>
 8006792:	2100      	movs	r1, #0
 8006794:	2301      	movs	r3, #1
 8006796:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800679a:	e743      	b.n	8006624 <_strtod_l+0x6dc>
 800679c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800679e:	4632      	mov	r2, r6
 80067a0:	4620      	mov	r0, r4
 80067a2:	f003 f863 	bl	800986c <__lshift>
 80067a6:	9016      	str	r0, [sp, #88]	; 0x58
 80067a8:	2800      	cmp	r0, #0
 80067aa:	f47f af6b 	bne.w	8006684 <_strtod_l+0x73c>
 80067ae:	e60f      	b.n	80063d0 <_strtod_l+0x488>
 80067b0:	46ca      	mov	sl, r9
 80067b2:	d171      	bne.n	8006898 <_strtod_l+0x950>
 80067b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80067ba:	b352      	cbz	r2, 8006812 <_strtod_l+0x8ca>
 80067bc:	4a33      	ldr	r2, [pc, #204]	; (800688c <_strtod_l+0x944>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d12a      	bne.n	8006818 <_strtod_l+0x8d0>
 80067c2:	9b04      	ldr	r3, [sp, #16]
 80067c4:	4641      	mov	r1, r8
 80067c6:	b1fb      	cbz	r3, 8006808 <_strtod_l+0x8c0>
 80067c8:	4b2e      	ldr	r3, [pc, #184]	; (8006884 <_strtod_l+0x93c>)
 80067ca:	ea09 0303 	and.w	r3, r9, r3
 80067ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80067d2:	f04f 32ff 	mov.w	r2, #4294967295
 80067d6:	d81a      	bhi.n	800680e <_strtod_l+0x8c6>
 80067d8:	0d1b      	lsrs	r3, r3, #20
 80067da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80067de:	fa02 f303 	lsl.w	r3, r2, r3
 80067e2:	4299      	cmp	r1, r3
 80067e4:	d118      	bne.n	8006818 <_strtod_l+0x8d0>
 80067e6:	4b2a      	ldr	r3, [pc, #168]	; (8006890 <_strtod_l+0x948>)
 80067e8:	459a      	cmp	sl, r3
 80067ea:	d102      	bne.n	80067f2 <_strtod_l+0x8aa>
 80067ec:	3101      	adds	r1, #1
 80067ee:	f43f adef 	beq.w	80063d0 <_strtod_l+0x488>
 80067f2:	4b24      	ldr	r3, [pc, #144]	; (8006884 <_strtod_l+0x93c>)
 80067f4:	ea0a 0303 	and.w	r3, sl, r3
 80067f8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80067fc:	f04f 0800 	mov.w	r8, #0
 8006800:	9b04      	ldr	r3, [sp, #16]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1a2      	bne.n	800674c <_strtod_l+0x804>
 8006806:	e5ed      	b.n	80063e4 <_strtod_l+0x49c>
 8006808:	f04f 33ff 	mov.w	r3, #4294967295
 800680c:	e7e9      	b.n	80067e2 <_strtod_l+0x89a>
 800680e:	4613      	mov	r3, r2
 8006810:	e7e7      	b.n	80067e2 <_strtod_l+0x89a>
 8006812:	ea53 0308 	orrs.w	r3, r3, r8
 8006816:	d08a      	beq.n	800672e <_strtod_l+0x7e6>
 8006818:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800681a:	b1e3      	cbz	r3, 8006856 <_strtod_l+0x90e>
 800681c:	ea13 0f0a 	tst.w	r3, sl
 8006820:	d0ee      	beq.n	8006800 <_strtod_l+0x8b8>
 8006822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006824:	9a04      	ldr	r2, [sp, #16]
 8006826:	4640      	mov	r0, r8
 8006828:	4649      	mov	r1, r9
 800682a:	b1c3      	cbz	r3, 800685e <_strtod_l+0x916>
 800682c:	f7ff fb70 	bl	8005f10 <sulp>
 8006830:	4602      	mov	r2, r0
 8006832:	460b      	mov	r3, r1
 8006834:	ec51 0b18 	vmov	r0, r1, d8
 8006838:	f7f9 fd30 	bl	800029c <__adddf3>
 800683c:	4680      	mov	r8, r0
 800683e:	4689      	mov	r9, r1
 8006840:	e7de      	b.n	8006800 <_strtod_l+0x8b8>
 8006842:	4013      	ands	r3, r2
 8006844:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006848:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800684c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006850:	f04f 38ff 	mov.w	r8, #4294967295
 8006854:	e7d4      	b.n	8006800 <_strtod_l+0x8b8>
 8006856:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006858:	ea13 0f08 	tst.w	r3, r8
 800685c:	e7e0      	b.n	8006820 <_strtod_l+0x8d8>
 800685e:	f7ff fb57 	bl	8005f10 <sulp>
 8006862:	4602      	mov	r2, r0
 8006864:	460b      	mov	r3, r1
 8006866:	ec51 0b18 	vmov	r0, r1, d8
 800686a:	f7f9 fd15 	bl	8000298 <__aeabi_dsub>
 800686e:	2200      	movs	r2, #0
 8006870:	2300      	movs	r3, #0
 8006872:	4680      	mov	r8, r0
 8006874:	4689      	mov	r9, r1
 8006876:	f7fa f92f 	bl	8000ad8 <__aeabi_dcmpeq>
 800687a:	2800      	cmp	r0, #0
 800687c:	d0c0      	beq.n	8006800 <_strtod_l+0x8b8>
 800687e:	e618      	b.n	80064b2 <_strtod_l+0x56a>
 8006880:	fffffc02 	.word	0xfffffc02
 8006884:	7ff00000 	.word	0x7ff00000
 8006888:	39500000 	.word	0x39500000
 800688c:	000fffff 	.word	0x000fffff
 8006890:	7fefffff 	.word	0x7fefffff
 8006894:	0800a8b8 	.word	0x0800a8b8
 8006898:	4659      	mov	r1, fp
 800689a:	4628      	mov	r0, r5
 800689c:	f003 f9c2 	bl	8009c24 <__ratio>
 80068a0:	ec57 6b10 	vmov	r6, r7, d0
 80068a4:	ee10 0a10 	vmov	r0, s0
 80068a8:	2200      	movs	r2, #0
 80068aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80068ae:	4639      	mov	r1, r7
 80068b0:	f7fa f926 	bl	8000b00 <__aeabi_dcmple>
 80068b4:	2800      	cmp	r0, #0
 80068b6:	d071      	beq.n	800699c <_strtod_l+0xa54>
 80068b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d17c      	bne.n	80069b8 <_strtod_l+0xa70>
 80068be:	f1b8 0f00 	cmp.w	r8, #0
 80068c2:	d15a      	bne.n	800697a <_strtod_l+0xa32>
 80068c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d15d      	bne.n	8006988 <_strtod_l+0xa40>
 80068cc:	4b90      	ldr	r3, [pc, #576]	; (8006b10 <_strtod_l+0xbc8>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	4630      	mov	r0, r6
 80068d2:	4639      	mov	r1, r7
 80068d4:	f7fa f90a 	bl	8000aec <__aeabi_dcmplt>
 80068d8:	2800      	cmp	r0, #0
 80068da:	d15c      	bne.n	8006996 <_strtod_l+0xa4e>
 80068dc:	4630      	mov	r0, r6
 80068de:	4639      	mov	r1, r7
 80068e0:	4b8c      	ldr	r3, [pc, #560]	; (8006b14 <_strtod_l+0xbcc>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	f7f9 fe90 	bl	8000608 <__aeabi_dmul>
 80068e8:	4606      	mov	r6, r0
 80068ea:	460f      	mov	r7, r1
 80068ec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80068f0:	9606      	str	r6, [sp, #24]
 80068f2:	9307      	str	r3, [sp, #28]
 80068f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068f8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80068fc:	4b86      	ldr	r3, [pc, #536]	; (8006b18 <_strtod_l+0xbd0>)
 80068fe:	ea0a 0303 	and.w	r3, sl, r3
 8006902:	930d      	str	r3, [sp, #52]	; 0x34
 8006904:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006906:	4b85      	ldr	r3, [pc, #532]	; (8006b1c <_strtod_l+0xbd4>)
 8006908:	429a      	cmp	r2, r3
 800690a:	f040 8090 	bne.w	8006a2e <_strtod_l+0xae6>
 800690e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8006912:	ec49 8b10 	vmov	d0, r8, r9
 8006916:	f003 f8bb 	bl	8009a90 <__ulp>
 800691a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800691e:	ec51 0b10 	vmov	r0, r1, d0
 8006922:	f7f9 fe71 	bl	8000608 <__aeabi_dmul>
 8006926:	4642      	mov	r2, r8
 8006928:	464b      	mov	r3, r9
 800692a:	f7f9 fcb7 	bl	800029c <__adddf3>
 800692e:	460b      	mov	r3, r1
 8006930:	4979      	ldr	r1, [pc, #484]	; (8006b18 <_strtod_l+0xbd0>)
 8006932:	4a7b      	ldr	r2, [pc, #492]	; (8006b20 <_strtod_l+0xbd8>)
 8006934:	4019      	ands	r1, r3
 8006936:	4291      	cmp	r1, r2
 8006938:	4680      	mov	r8, r0
 800693a:	d944      	bls.n	80069c6 <_strtod_l+0xa7e>
 800693c:	ee18 2a90 	vmov	r2, s17
 8006940:	4b78      	ldr	r3, [pc, #480]	; (8006b24 <_strtod_l+0xbdc>)
 8006942:	429a      	cmp	r2, r3
 8006944:	d104      	bne.n	8006950 <_strtod_l+0xa08>
 8006946:	ee18 3a10 	vmov	r3, s16
 800694a:	3301      	adds	r3, #1
 800694c:	f43f ad40 	beq.w	80063d0 <_strtod_l+0x488>
 8006950:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8006b24 <_strtod_l+0xbdc>
 8006954:	f04f 38ff 	mov.w	r8, #4294967295
 8006958:	9916      	ldr	r1, [sp, #88]	; 0x58
 800695a:	4620      	mov	r0, r4
 800695c:	f002 fd6c 	bl	8009438 <_Bfree>
 8006960:	9905      	ldr	r1, [sp, #20]
 8006962:	4620      	mov	r0, r4
 8006964:	f002 fd68 	bl	8009438 <_Bfree>
 8006968:	4659      	mov	r1, fp
 800696a:	4620      	mov	r0, r4
 800696c:	f002 fd64 	bl	8009438 <_Bfree>
 8006970:	4629      	mov	r1, r5
 8006972:	4620      	mov	r0, r4
 8006974:	f002 fd60 	bl	8009438 <_Bfree>
 8006978:	e609      	b.n	800658e <_strtod_l+0x646>
 800697a:	f1b8 0f01 	cmp.w	r8, #1
 800697e:	d103      	bne.n	8006988 <_strtod_l+0xa40>
 8006980:	f1b9 0f00 	cmp.w	r9, #0
 8006984:	f43f ad95 	beq.w	80064b2 <_strtod_l+0x56a>
 8006988:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8006ae0 <_strtod_l+0xb98>
 800698c:	4f60      	ldr	r7, [pc, #384]	; (8006b10 <_strtod_l+0xbc8>)
 800698e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006992:	2600      	movs	r6, #0
 8006994:	e7ae      	b.n	80068f4 <_strtod_l+0x9ac>
 8006996:	4f5f      	ldr	r7, [pc, #380]	; (8006b14 <_strtod_l+0xbcc>)
 8006998:	2600      	movs	r6, #0
 800699a:	e7a7      	b.n	80068ec <_strtod_l+0x9a4>
 800699c:	4b5d      	ldr	r3, [pc, #372]	; (8006b14 <_strtod_l+0xbcc>)
 800699e:	4630      	mov	r0, r6
 80069a0:	4639      	mov	r1, r7
 80069a2:	2200      	movs	r2, #0
 80069a4:	f7f9 fe30 	bl	8000608 <__aeabi_dmul>
 80069a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069aa:	4606      	mov	r6, r0
 80069ac:	460f      	mov	r7, r1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d09c      	beq.n	80068ec <_strtod_l+0x9a4>
 80069b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80069b6:	e79d      	b.n	80068f4 <_strtod_l+0x9ac>
 80069b8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8006ae8 <_strtod_l+0xba0>
 80069bc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80069c0:	ec57 6b17 	vmov	r6, r7, d7
 80069c4:	e796      	b.n	80068f4 <_strtod_l+0x9ac>
 80069c6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80069ca:	9b04      	ldr	r3, [sp, #16]
 80069cc:	46ca      	mov	sl, r9
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1c2      	bne.n	8006958 <_strtod_l+0xa10>
 80069d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80069d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069d8:	0d1b      	lsrs	r3, r3, #20
 80069da:	051b      	lsls	r3, r3, #20
 80069dc:	429a      	cmp	r2, r3
 80069de:	d1bb      	bne.n	8006958 <_strtod_l+0xa10>
 80069e0:	4630      	mov	r0, r6
 80069e2:	4639      	mov	r1, r7
 80069e4:	f7fa f970 	bl	8000cc8 <__aeabi_d2lz>
 80069e8:	f7f9 fde0 	bl	80005ac <__aeabi_l2d>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4630      	mov	r0, r6
 80069f2:	4639      	mov	r1, r7
 80069f4:	f7f9 fc50 	bl	8000298 <__aeabi_dsub>
 80069f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80069fe:	ea43 0308 	orr.w	r3, r3, r8
 8006a02:	4313      	orrs	r3, r2
 8006a04:	4606      	mov	r6, r0
 8006a06:	460f      	mov	r7, r1
 8006a08:	d054      	beq.n	8006ab4 <_strtod_l+0xb6c>
 8006a0a:	a339      	add	r3, pc, #228	; (adr r3, 8006af0 <_strtod_l+0xba8>)
 8006a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a10:	f7fa f86c 	bl	8000aec <__aeabi_dcmplt>
 8006a14:	2800      	cmp	r0, #0
 8006a16:	f47f ace5 	bne.w	80063e4 <_strtod_l+0x49c>
 8006a1a:	a337      	add	r3, pc, #220	; (adr r3, 8006af8 <_strtod_l+0xbb0>)
 8006a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a20:	4630      	mov	r0, r6
 8006a22:	4639      	mov	r1, r7
 8006a24:	f7fa f880 	bl	8000b28 <__aeabi_dcmpgt>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d095      	beq.n	8006958 <_strtod_l+0xa10>
 8006a2c:	e4da      	b.n	80063e4 <_strtod_l+0x49c>
 8006a2e:	9b04      	ldr	r3, [sp, #16]
 8006a30:	b333      	cbz	r3, 8006a80 <_strtod_l+0xb38>
 8006a32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a34:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006a38:	d822      	bhi.n	8006a80 <_strtod_l+0xb38>
 8006a3a:	a331      	add	r3, pc, #196	; (adr r3, 8006b00 <_strtod_l+0xbb8>)
 8006a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a40:	4630      	mov	r0, r6
 8006a42:	4639      	mov	r1, r7
 8006a44:	f7fa f85c 	bl	8000b00 <__aeabi_dcmple>
 8006a48:	b1a0      	cbz	r0, 8006a74 <_strtod_l+0xb2c>
 8006a4a:	4639      	mov	r1, r7
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	f7fa f8b3 	bl	8000bb8 <__aeabi_d2uiz>
 8006a52:	2801      	cmp	r0, #1
 8006a54:	bf38      	it	cc
 8006a56:	2001      	movcc	r0, #1
 8006a58:	f7f9 fd5c 	bl	8000514 <__aeabi_ui2d>
 8006a5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a5e:	4606      	mov	r6, r0
 8006a60:	460f      	mov	r7, r1
 8006a62:	bb23      	cbnz	r3, 8006aae <_strtod_l+0xb66>
 8006a64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a68:	9010      	str	r0, [sp, #64]	; 0x40
 8006a6a:	9311      	str	r3, [sp, #68]	; 0x44
 8006a6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a70:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006a74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a78:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006a7c:	1a9b      	subs	r3, r3, r2
 8006a7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a80:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006a84:	eeb0 0a48 	vmov.f32	s0, s16
 8006a88:	eef0 0a68 	vmov.f32	s1, s17
 8006a8c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006a90:	f002 fffe 	bl	8009a90 <__ulp>
 8006a94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006a98:	ec53 2b10 	vmov	r2, r3, d0
 8006a9c:	f7f9 fdb4 	bl	8000608 <__aeabi_dmul>
 8006aa0:	ec53 2b18 	vmov	r2, r3, d8
 8006aa4:	f7f9 fbfa 	bl	800029c <__adddf3>
 8006aa8:	4680      	mov	r8, r0
 8006aaa:	4689      	mov	r9, r1
 8006aac:	e78d      	b.n	80069ca <_strtod_l+0xa82>
 8006aae:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8006ab2:	e7db      	b.n	8006a6c <_strtod_l+0xb24>
 8006ab4:	a314      	add	r3, pc, #80	; (adr r3, 8006b08 <_strtod_l+0xbc0>)
 8006ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aba:	f7fa f817 	bl	8000aec <__aeabi_dcmplt>
 8006abe:	e7b3      	b.n	8006a28 <_strtod_l+0xae0>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	930a      	str	r3, [sp, #40]	; 0x28
 8006ac4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006ac6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ac8:	6013      	str	r3, [r2, #0]
 8006aca:	f7ff ba7c 	b.w	8005fc6 <_strtod_l+0x7e>
 8006ace:	2a65      	cmp	r2, #101	; 0x65
 8006ad0:	f43f ab75 	beq.w	80061be <_strtod_l+0x276>
 8006ad4:	2a45      	cmp	r2, #69	; 0x45
 8006ad6:	f43f ab72 	beq.w	80061be <_strtod_l+0x276>
 8006ada:	2301      	movs	r3, #1
 8006adc:	f7ff bbaa 	b.w	8006234 <_strtod_l+0x2ec>
 8006ae0:	00000000 	.word	0x00000000
 8006ae4:	bff00000 	.word	0xbff00000
 8006ae8:	00000000 	.word	0x00000000
 8006aec:	3ff00000 	.word	0x3ff00000
 8006af0:	94a03595 	.word	0x94a03595
 8006af4:	3fdfffff 	.word	0x3fdfffff
 8006af8:	35afe535 	.word	0x35afe535
 8006afc:	3fe00000 	.word	0x3fe00000
 8006b00:	ffc00000 	.word	0xffc00000
 8006b04:	41dfffff 	.word	0x41dfffff
 8006b08:	94a03595 	.word	0x94a03595
 8006b0c:	3fcfffff 	.word	0x3fcfffff
 8006b10:	3ff00000 	.word	0x3ff00000
 8006b14:	3fe00000 	.word	0x3fe00000
 8006b18:	7ff00000 	.word	0x7ff00000
 8006b1c:	7fe00000 	.word	0x7fe00000
 8006b20:	7c9fffff 	.word	0x7c9fffff
 8006b24:	7fefffff 	.word	0x7fefffff

08006b28 <_strtod_r>:
 8006b28:	4b01      	ldr	r3, [pc, #4]	; (8006b30 <_strtod_r+0x8>)
 8006b2a:	f7ff ba0d 	b.w	8005f48 <_strtod_l>
 8006b2e:	bf00      	nop
 8006b30:	20000080 	.word	0x20000080

08006b34 <strtof>:
 8006b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b38:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8006bfc <strtof+0xc8>
 8006b3c:	4b2a      	ldr	r3, [pc, #168]	; (8006be8 <strtof+0xb4>)
 8006b3e:	460a      	mov	r2, r1
 8006b40:	ed2d 8b02 	vpush	{d8}
 8006b44:	4601      	mov	r1, r0
 8006b46:	f8d8 0000 	ldr.w	r0, [r8]
 8006b4a:	f7ff f9fd 	bl	8005f48 <_strtod_l>
 8006b4e:	ec55 4b10 	vmov	r4, r5, d0
 8006b52:	ee10 2a10 	vmov	r2, s0
 8006b56:	ee10 0a10 	vmov	r0, s0
 8006b5a:	462b      	mov	r3, r5
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	f7f9 ffed 	bl	8000b3c <__aeabi_dcmpun>
 8006b62:	b190      	cbz	r0, 8006b8a <strtof+0x56>
 8006b64:	2d00      	cmp	r5, #0
 8006b66:	4821      	ldr	r0, [pc, #132]	; (8006bec <strtof+0xb8>)
 8006b68:	da09      	bge.n	8006b7e <strtof+0x4a>
 8006b6a:	f001 f939 	bl	8007de0 <nanf>
 8006b6e:	eeb1 8a40 	vneg.f32	s16, s0
 8006b72:	eeb0 0a48 	vmov.f32	s0, s16
 8006b76:	ecbd 8b02 	vpop	{d8}
 8006b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b7e:	ecbd 8b02 	vpop	{d8}
 8006b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b86:	f001 b92b 	b.w	8007de0 <nanf>
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	4629      	mov	r1, r5
 8006b8e:	f7fa f833 	bl	8000bf8 <__aeabi_d2f>
 8006b92:	ee08 0a10 	vmov	s16, r0
 8006b96:	eddf 7a16 	vldr	s15, [pc, #88]	; 8006bf0 <strtof+0xbc>
 8006b9a:	eeb0 7ac8 	vabs.f32	s14, s16
 8006b9e:	eeb4 7a67 	vcmp.f32	s14, s15
 8006ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ba6:	dd11      	ble.n	8006bcc <strtof+0x98>
 8006ba8:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8006bac:	4b11      	ldr	r3, [pc, #68]	; (8006bf4 <strtof+0xc0>)
 8006bae:	f04f 32ff 	mov.w	r2, #4294967295
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	4639      	mov	r1, r7
 8006bb6:	f7f9 ffc1 	bl	8000b3c <__aeabi_dcmpun>
 8006bba:	b980      	cbnz	r0, 8006bde <strtof+0xaa>
 8006bbc:	4b0d      	ldr	r3, [pc, #52]	; (8006bf4 <strtof+0xc0>)
 8006bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	4639      	mov	r1, r7
 8006bc6:	f7f9 ff9b 	bl	8000b00 <__aeabi_dcmple>
 8006bca:	b940      	cbnz	r0, 8006bde <strtof+0xaa>
 8006bcc:	ee18 3a10 	vmov	r3, s16
 8006bd0:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8006bd4:	d1cd      	bne.n	8006b72 <strtof+0x3e>
 8006bd6:	4b08      	ldr	r3, [pc, #32]	; (8006bf8 <strtof+0xc4>)
 8006bd8:	402b      	ands	r3, r5
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d0c9      	beq.n	8006b72 <strtof+0x3e>
 8006bde:	f8d8 3000 	ldr.w	r3, [r8]
 8006be2:	2222      	movs	r2, #34	; 0x22
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	e7c4      	b.n	8006b72 <strtof+0x3e>
 8006be8:	20000080 	.word	0x20000080
 8006bec:	0800acb0 	.word	0x0800acb0
 8006bf0:	7f7fffff 	.word	0x7f7fffff
 8006bf4:	7fefffff 	.word	0x7fefffff
 8006bf8:	7ff00000 	.word	0x7ff00000
 8006bfc:	20000238 	.word	0x20000238

08006c00 <_strtol_l.constprop.0>:
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c06:	d001      	beq.n	8006c0c <_strtol_l.constprop.0+0xc>
 8006c08:	2b24      	cmp	r3, #36	; 0x24
 8006c0a:	d906      	bls.n	8006c1a <_strtol_l.constprop.0+0x1a>
 8006c0c:	f001 f8a2 	bl	8007d54 <__errno>
 8006c10:	2316      	movs	r3, #22
 8006c12:	6003      	str	r3, [r0, #0]
 8006c14:	2000      	movs	r0, #0
 8006c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c1a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006d00 <_strtol_l.constprop.0+0x100>
 8006c1e:	460d      	mov	r5, r1
 8006c20:	462e      	mov	r6, r5
 8006c22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c26:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006c2a:	f017 0708 	ands.w	r7, r7, #8
 8006c2e:	d1f7      	bne.n	8006c20 <_strtol_l.constprop.0+0x20>
 8006c30:	2c2d      	cmp	r4, #45	; 0x2d
 8006c32:	d132      	bne.n	8006c9a <_strtol_l.constprop.0+0x9a>
 8006c34:	782c      	ldrb	r4, [r5, #0]
 8006c36:	2701      	movs	r7, #1
 8006c38:	1cb5      	adds	r5, r6, #2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d05b      	beq.n	8006cf6 <_strtol_l.constprop.0+0xf6>
 8006c3e:	2b10      	cmp	r3, #16
 8006c40:	d109      	bne.n	8006c56 <_strtol_l.constprop.0+0x56>
 8006c42:	2c30      	cmp	r4, #48	; 0x30
 8006c44:	d107      	bne.n	8006c56 <_strtol_l.constprop.0+0x56>
 8006c46:	782c      	ldrb	r4, [r5, #0]
 8006c48:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006c4c:	2c58      	cmp	r4, #88	; 0x58
 8006c4e:	d14d      	bne.n	8006cec <_strtol_l.constprop.0+0xec>
 8006c50:	786c      	ldrb	r4, [r5, #1]
 8006c52:	2310      	movs	r3, #16
 8006c54:	3502      	adds	r5, #2
 8006c56:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006c5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006c5e:	f04f 0e00 	mov.w	lr, #0
 8006c62:	fbb8 f9f3 	udiv	r9, r8, r3
 8006c66:	4676      	mov	r6, lr
 8006c68:	fb03 8a19 	mls	sl, r3, r9, r8
 8006c6c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006c70:	f1bc 0f09 	cmp.w	ip, #9
 8006c74:	d816      	bhi.n	8006ca4 <_strtol_l.constprop.0+0xa4>
 8006c76:	4664      	mov	r4, ip
 8006c78:	42a3      	cmp	r3, r4
 8006c7a:	dd24      	ble.n	8006cc6 <_strtol_l.constprop.0+0xc6>
 8006c7c:	f1be 3fff 	cmp.w	lr, #4294967295
 8006c80:	d008      	beq.n	8006c94 <_strtol_l.constprop.0+0x94>
 8006c82:	45b1      	cmp	r9, r6
 8006c84:	d31c      	bcc.n	8006cc0 <_strtol_l.constprop.0+0xc0>
 8006c86:	d101      	bne.n	8006c8c <_strtol_l.constprop.0+0x8c>
 8006c88:	45a2      	cmp	sl, r4
 8006c8a:	db19      	blt.n	8006cc0 <_strtol_l.constprop.0+0xc0>
 8006c8c:	fb06 4603 	mla	r6, r6, r3, r4
 8006c90:	f04f 0e01 	mov.w	lr, #1
 8006c94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c98:	e7e8      	b.n	8006c6c <_strtol_l.constprop.0+0x6c>
 8006c9a:	2c2b      	cmp	r4, #43	; 0x2b
 8006c9c:	bf04      	itt	eq
 8006c9e:	782c      	ldrbeq	r4, [r5, #0]
 8006ca0:	1cb5      	addeq	r5, r6, #2
 8006ca2:	e7ca      	b.n	8006c3a <_strtol_l.constprop.0+0x3a>
 8006ca4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006ca8:	f1bc 0f19 	cmp.w	ip, #25
 8006cac:	d801      	bhi.n	8006cb2 <_strtol_l.constprop.0+0xb2>
 8006cae:	3c37      	subs	r4, #55	; 0x37
 8006cb0:	e7e2      	b.n	8006c78 <_strtol_l.constprop.0+0x78>
 8006cb2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006cb6:	f1bc 0f19 	cmp.w	ip, #25
 8006cba:	d804      	bhi.n	8006cc6 <_strtol_l.constprop.0+0xc6>
 8006cbc:	3c57      	subs	r4, #87	; 0x57
 8006cbe:	e7db      	b.n	8006c78 <_strtol_l.constprop.0+0x78>
 8006cc0:	f04f 3eff 	mov.w	lr, #4294967295
 8006cc4:	e7e6      	b.n	8006c94 <_strtol_l.constprop.0+0x94>
 8006cc6:	f1be 3fff 	cmp.w	lr, #4294967295
 8006cca:	d105      	bne.n	8006cd8 <_strtol_l.constprop.0+0xd8>
 8006ccc:	2322      	movs	r3, #34	; 0x22
 8006cce:	6003      	str	r3, [r0, #0]
 8006cd0:	4646      	mov	r6, r8
 8006cd2:	b942      	cbnz	r2, 8006ce6 <_strtol_l.constprop.0+0xe6>
 8006cd4:	4630      	mov	r0, r6
 8006cd6:	e79e      	b.n	8006c16 <_strtol_l.constprop.0+0x16>
 8006cd8:	b107      	cbz	r7, 8006cdc <_strtol_l.constprop.0+0xdc>
 8006cda:	4276      	negs	r6, r6
 8006cdc:	2a00      	cmp	r2, #0
 8006cde:	d0f9      	beq.n	8006cd4 <_strtol_l.constprop.0+0xd4>
 8006ce0:	f1be 0f00 	cmp.w	lr, #0
 8006ce4:	d000      	beq.n	8006ce8 <_strtol_l.constprop.0+0xe8>
 8006ce6:	1e69      	subs	r1, r5, #1
 8006ce8:	6011      	str	r1, [r2, #0]
 8006cea:	e7f3      	b.n	8006cd4 <_strtol_l.constprop.0+0xd4>
 8006cec:	2430      	movs	r4, #48	; 0x30
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1b1      	bne.n	8006c56 <_strtol_l.constprop.0+0x56>
 8006cf2:	2308      	movs	r3, #8
 8006cf4:	e7af      	b.n	8006c56 <_strtol_l.constprop.0+0x56>
 8006cf6:	2c30      	cmp	r4, #48	; 0x30
 8006cf8:	d0a5      	beq.n	8006c46 <_strtol_l.constprop.0+0x46>
 8006cfa:	230a      	movs	r3, #10
 8006cfc:	e7ab      	b.n	8006c56 <_strtol_l.constprop.0+0x56>
 8006cfe:	bf00      	nop
 8006d00:	0800a8e1 	.word	0x0800a8e1

08006d04 <_strtol_r>:
 8006d04:	f7ff bf7c 	b.w	8006c00 <_strtol_l.constprop.0>

08006d08 <strtol>:
 8006d08:	4613      	mov	r3, r2
 8006d0a:	460a      	mov	r2, r1
 8006d0c:	4601      	mov	r1, r0
 8006d0e:	4802      	ldr	r0, [pc, #8]	; (8006d18 <strtol+0x10>)
 8006d10:	6800      	ldr	r0, [r0, #0]
 8006d12:	f7ff bf75 	b.w	8006c00 <_strtol_l.constprop.0>
 8006d16:	bf00      	nop
 8006d18:	20000238 	.word	0x20000238

08006d1c <tolower>:
 8006d1c:	4b03      	ldr	r3, [pc, #12]	; (8006d2c <tolower+0x10>)
 8006d1e:	5c1b      	ldrb	r3, [r3, r0]
 8006d20:	f003 0303 	and.w	r3, r3, #3
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	bf08      	it	eq
 8006d28:	3020      	addeq	r0, #32
 8006d2a:	4770      	bx	lr
 8006d2c:	0800a8e1 	.word	0x0800a8e1

08006d30 <__cvt>:
 8006d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d34:	ec55 4b10 	vmov	r4, r5, d0
 8006d38:	2d00      	cmp	r5, #0
 8006d3a:	460e      	mov	r6, r1
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	462b      	mov	r3, r5
 8006d40:	bfbb      	ittet	lt
 8006d42:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006d46:	461d      	movlt	r5, r3
 8006d48:	2300      	movge	r3, #0
 8006d4a:	232d      	movlt	r3, #45	; 0x2d
 8006d4c:	700b      	strb	r3, [r1, #0]
 8006d4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d50:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006d54:	4691      	mov	r9, r2
 8006d56:	f023 0820 	bic.w	r8, r3, #32
 8006d5a:	bfbc      	itt	lt
 8006d5c:	4622      	movlt	r2, r4
 8006d5e:	4614      	movlt	r4, r2
 8006d60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d64:	d005      	beq.n	8006d72 <__cvt+0x42>
 8006d66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006d6a:	d100      	bne.n	8006d6e <__cvt+0x3e>
 8006d6c:	3601      	adds	r6, #1
 8006d6e:	2102      	movs	r1, #2
 8006d70:	e000      	b.n	8006d74 <__cvt+0x44>
 8006d72:	2103      	movs	r1, #3
 8006d74:	ab03      	add	r3, sp, #12
 8006d76:	9301      	str	r3, [sp, #4]
 8006d78:	ab02      	add	r3, sp, #8
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	ec45 4b10 	vmov	d0, r4, r5
 8006d80:	4653      	mov	r3, sl
 8006d82:	4632      	mov	r2, r6
 8006d84:	f001 f8bc 	bl	8007f00 <_dtoa_r>
 8006d88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d8c:	4607      	mov	r7, r0
 8006d8e:	d102      	bne.n	8006d96 <__cvt+0x66>
 8006d90:	f019 0f01 	tst.w	r9, #1
 8006d94:	d022      	beq.n	8006ddc <__cvt+0xac>
 8006d96:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d9a:	eb07 0906 	add.w	r9, r7, r6
 8006d9e:	d110      	bne.n	8006dc2 <__cvt+0x92>
 8006da0:	783b      	ldrb	r3, [r7, #0]
 8006da2:	2b30      	cmp	r3, #48	; 0x30
 8006da4:	d10a      	bne.n	8006dbc <__cvt+0x8c>
 8006da6:	2200      	movs	r2, #0
 8006da8:	2300      	movs	r3, #0
 8006daa:	4620      	mov	r0, r4
 8006dac:	4629      	mov	r1, r5
 8006dae:	f7f9 fe93 	bl	8000ad8 <__aeabi_dcmpeq>
 8006db2:	b918      	cbnz	r0, 8006dbc <__cvt+0x8c>
 8006db4:	f1c6 0601 	rsb	r6, r6, #1
 8006db8:	f8ca 6000 	str.w	r6, [sl]
 8006dbc:	f8da 3000 	ldr.w	r3, [sl]
 8006dc0:	4499      	add	r9, r3
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	4629      	mov	r1, r5
 8006dca:	f7f9 fe85 	bl	8000ad8 <__aeabi_dcmpeq>
 8006dce:	b108      	cbz	r0, 8006dd4 <__cvt+0xa4>
 8006dd0:	f8cd 900c 	str.w	r9, [sp, #12]
 8006dd4:	2230      	movs	r2, #48	; 0x30
 8006dd6:	9b03      	ldr	r3, [sp, #12]
 8006dd8:	454b      	cmp	r3, r9
 8006dda:	d307      	bcc.n	8006dec <__cvt+0xbc>
 8006ddc:	9b03      	ldr	r3, [sp, #12]
 8006dde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006de0:	1bdb      	subs	r3, r3, r7
 8006de2:	4638      	mov	r0, r7
 8006de4:	6013      	str	r3, [r2, #0]
 8006de6:	b004      	add	sp, #16
 8006de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dec:	1c59      	adds	r1, r3, #1
 8006dee:	9103      	str	r1, [sp, #12]
 8006df0:	701a      	strb	r2, [r3, #0]
 8006df2:	e7f0      	b.n	8006dd6 <__cvt+0xa6>

08006df4 <__exponent>:
 8006df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006df6:	4603      	mov	r3, r0
 8006df8:	2900      	cmp	r1, #0
 8006dfa:	bfb8      	it	lt
 8006dfc:	4249      	neglt	r1, r1
 8006dfe:	f803 2b02 	strb.w	r2, [r3], #2
 8006e02:	bfb4      	ite	lt
 8006e04:	222d      	movlt	r2, #45	; 0x2d
 8006e06:	222b      	movge	r2, #43	; 0x2b
 8006e08:	2909      	cmp	r1, #9
 8006e0a:	7042      	strb	r2, [r0, #1]
 8006e0c:	dd2a      	ble.n	8006e64 <__exponent+0x70>
 8006e0e:	f10d 0207 	add.w	r2, sp, #7
 8006e12:	4617      	mov	r7, r2
 8006e14:	260a      	movs	r6, #10
 8006e16:	4694      	mov	ip, r2
 8006e18:	fb91 f5f6 	sdiv	r5, r1, r6
 8006e1c:	fb06 1415 	mls	r4, r6, r5, r1
 8006e20:	3430      	adds	r4, #48	; 0x30
 8006e22:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006e26:	460c      	mov	r4, r1
 8006e28:	2c63      	cmp	r4, #99	; 0x63
 8006e2a:	f102 32ff 	add.w	r2, r2, #4294967295
 8006e2e:	4629      	mov	r1, r5
 8006e30:	dcf1      	bgt.n	8006e16 <__exponent+0x22>
 8006e32:	3130      	adds	r1, #48	; 0x30
 8006e34:	f1ac 0402 	sub.w	r4, ip, #2
 8006e38:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006e3c:	1c41      	adds	r1, r0, #1
 8006e3e:	4622      	mov	r2, r4
 8006e40:	42ba      	cmp	r2, r7
 8006e42:	d30a      	bcc.n	8006e5a <__exponent+0x66>
 8006e44:	f10d 0209 	add.w	r2, sp, #9
 8006e48:	eba2 020c 	sub.w	r2, r2, ip
 8006e4c:	42bc      	cmp	r4, r7
 8006e4e:	bf88      	it	hi
 8006e50:	2200      	movhi	r2, #0
 8006e52:	4413      	add	r3, r2
 8006e54:	1a18      	subs	r0, r3, r0
 8006e56:	b003      	add	sp, #12
 8006e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e5a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006e5e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006e62:	e7ed      	b.n	8006e40 <__exponent+0x4c>
 8006e64:	2330      	movs	r3, #48	; 0x30
 8006e66:	3130      	adds	r1, #48	; 0x30
 8006e68:	7083      	strb	r3, [r0, #2]
 8006e6a:	70c1      	strb	r1, [r0, #3]
 8006e6c:	1d03      	adds	r3, r0, #4
 8006e6e:	e7f1      	b.n	8006e54 <__exponent+0x60>

08006e70 <_printf_float>:
 8006e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e74:	ed2d 8b02 	vpush	{d8}
 8006e78:	b08d      	sub	sp, #52	; 0x34
 8006e7a:	460c      	mov	r4, r1
 8006e7c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006e80:	4616      	mov	r6, r2
 8006e82:	461f      	mov	r7, r3
 8006e84:	4605      	mov	r5, r0
 8006e86:	f000 ff1b 	bl	8007cc0 <_localeconv_r>
 8006e8a:	f8d0 a000 	ldr.w	sl, [r0]
 8006e8e:	4650      	mov	r0, sl
 8006e90:	f7f9 f9f6 	bl	8000280 <strlen>
 8006e94:	2300      	movs	r3, #0
 8006e96:	930a      	str	r3, [sp, #40]	; 0x28
 8006e98:	6823      	ldr	r3, [r4, #0]
 8006e9a:	9305      	str	r3, [sp, #20]
 8006e9c:	f8d8 3000 	ldr.w	r3, [r8]
 8006ea0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006ea4:	3307      	adds	r3, #7
 8006ea6:	f023 0307 	bic.w	r3, r3, #7
 8006eaa:	f103 0208 	add.w	r2, r3, #8
 8006eae:	f8c8 2000 	str.w	r2, [r8]
 8006eb2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006eb6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006eba:	9307      	str	r3, [sp, #28]
 8006ebc:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ec0:	ee08 0a10 	vmov	s16, r0
 8006ec4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006ec8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ecc:	4b9e      	ldr	r3, [pc, #632]	; (8007148 <_printf_float+0x2d8>)
 8006ece:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed2:	f7f9 fe33 	bl	8000b3c <__aeabi_dcmpun>
 8006ed6:	bb88      	cbnz	r0, 8006f3c <_printf_float+0xcc>
 8006ed8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006edc:	4b9a      	ldr	r3, [pc, #616]	; (8007148 <_printf_float+0x2d8>)
 8006ede:	f04f 32ff 	mov.w	r2, #4294967295
 8006ee2:	f7f9 fe0d 	bl	8000b00 <__aeabi_dcmple>
 8006ee6:	bb48      	cbnz	r0, 8006f3c <_printf_float+0xcc>
 8006ee8:	2200      	movs	r2, #0
 8006eea:	2300      	movs	r3, #0
 8006eec:	4640      	mov	r0, r8
 8006eee:	4649      	mov	r1, r9
 8006ef0:	f7f9 fdfc 	bl	8000aec <__aeabi_dcmplt>
 8006ef4:	b110      	cbz	r0, 8006efc <_printf_float+0x8c>
 8006ef6:	232d      	movs	r3, #45	; 0x2d
 8006ef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006efc:	4a93      	ldr	r2, [pc, #588]	; (800714c <_printf_float+0x2dc>)
 8006efe:	4b94      	ldr	r3, [pc, #592]	; (8007150 <_printf_float+0x2e0>)
 8006f00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006f04:	bf94      	ite	ls
 8006f06:	4690      	movls	r8, r2
 8006f08:	4698      	movhi	r8, r3
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	6123      	str	r3, [r4, #16]
 8006f0e:	9b05      	ldr	r3, [sp, #20]
 8006f10:	f023 0304 	bic.w	r3, r3, #4
 8006f14:	6023      	str	r3, [r4, #0]
 8006f16:	f04f 0900 	mov.w	r9, #0
 8006f1a:	9700      	str	r7, [sp, #0]
 8006f1c:	4633      	mov	r3, r6
 8006f1e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006f20:	4621      	mov	r1, r4
 8006f22:	4628      	mov	r0, r5
 8006f24:	f000 f9da 	bl	80072dc <_printf_common>
 8006f28:	3001      	adds	r0, #1
 8006f2a:	f040 8090 	bne.w	800704e <_printf_float+0x1de>
 8006f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f32:	b00d      	add	sp, #52	; 0x34
 8006f34:	ecbd 8b02 	vpop	{d8}
 8006f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f3c:	4642      	mov	r2, r8
 8006f3e:	464b      	mov	r3, r9
 8006f40:	4640      	mov	r0, r8
 8006f42:	4649      	mov	r1, r9
 8006f44:	f7f9 fdfa 	bl	8000b3c <__aeabi_dcmpun>
 8006f48:	b140      	cbz	r0, 8006f5c <_printf_float+0xec>
 8006f4a:	464b      	mov	r3, r9
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	bfbc      	itt	lt
 8006f50:	232d      	movlt	r3, #45	; 0x2d
 8006f52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f56:	4a7f      	ldr	r2, [pc, #508]	; (8007154 <_printf_float+0x2e4>)
 8006f58:	4b7f      	ldr	r3, [pc, #508]	; (8007158 <_printf_float+0x2e8>)
 8006f5a:	e7d1      	b.n	8006f00 <_printf_float+0x90>
 8006f5c:	6863      	ldr	r3, [r4, #4]
 8006f5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006f62:	9206      	str	r2, [sp, #24]
 8006f64:	1c5a      	adds	r2, r3, #1
 8006f66:	d13f      	bne.n	8006fe8 <_printf_float+0x178>
 8006f68:	2306      	movs	r3, #6
 8006f6a:	6063      	str	r3, [r4, #4]
 8006f6c:	9b05      	ldr	r3, [sp, #20]
 8006f6e:	6861      	ldr	r1, [r4, #4]
 8006f70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006f74:	2300      	movs	r3, #0
 8006f76:	9303      	str	r3, [sp, #12]
 8006f78:	ab0a      	add	r3, sp, #40	; 0x28
 8006f7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006f7e:	ab09      	add	r3, sp, #36	; 0x24
 8006f80:	ec49 8b10 	vmov	d0, r8, r9
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	6022      	str	r2, [r4, #0]
 8006f88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	f7ff fecf 	bl	8006d30 <__cvt>
 8006f92:	9b06      	ldr	r3, [sp, #24]
 8006f94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f96:	2b47      	cmp	r3, #71	; 0x47
 8006f98:	4680      	mov	r8, r0
 8006f9a:	d108      	bne.n	8006fae <_printf_float+0x13e>
 8006f9c:	1cc8      	adds	r0, r1, #3
 8006f9e:	db02      	blt.n	8006fa6 <_printf_float+0x136>
 8006fa0:	6863      	ldr	r3, [r4, #4]
 8006fa2:	4299      	cmp	r1, r3
 8006fa4:	dd41      	ble.n	800702a <_printf_float+0x1ba>
 8006fa6:	f1ab 0302 	sub.w	r3, fp, #2
 8006faa:	fa5f fb83 	uxtb.w	fp, r3
 8006fae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006fb2:	d820      	bhi.n	8006ff6 <_printf_float+0x186>
 8006fb4:	3901      	subs	r1, #1
 8006fb6:	465a      	mov	r2, fp
 8006fb8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006fbc:	9109      	str	r1, [sp, #36]	; 0x24
 8006fbe:	f7ff ff19 	bl	8006df4 <__exponent>
 8006fc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fc4:	1813      	adds	r3, r2, r0
 8006fc6:	2a01      	cmp	r2, #1
 8006fc8:	4681      	mov	r9, r0
 8006fca:	6123      	str	r3, [r4, #16]
 8006fcc:	dc02      	bgt.n	8006fd4 <_printf_float+0x164>
 8006fce:	6822      	ldr	r2, [r4, #0]
 8006fd0:	07d2      	lsls	r2, r2, #31
 8006fd2:	d501      	bpl.n	8006fd8 <_printf_float+0x168>
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	6123      	str	r3, [r4, #16]
 8006fd8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d09c      	beq.n	8006f1a <_printf_float+0xaa>
 8006fe0:	232d      	movs	r3, #45	; 0x2d
 8006fe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fe6:	e798      	b.n	8006f1a <_printf_float+0xaa>
 8006fe8:	9a06      	ldr	r2, [sp, #24]
 8006fea:	2a47      	cmp	r2, #71	; 0x47
 8006fec:	d1be      	bne.n	8006f6c <_printf_float+0xfc>
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1bc      	bne.n	8006f6c <_printf_float+0xfc>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e7b9      	b.n	8006f6a <_printf_float+0xfa>
 8006ff6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006ffa:	d118      	bne.n	800702e <_printf_float+0x1be>
 8006ffc:	2900      	cmp	r1, #0
 8006ffe:	6863      	ldr	r3, [r4, #4]
 8007000:	dd0b      	ble.n	800701a <_printf_float+0x1aa>
 8007002:	6121      	str	r1, [r4, #16]
 8007004:	b913      	cbnz	r3, 800700c <_printf_float+0x19c>
 8007006:	6822      	ldr	r2, [r4, #0]
 8007008:	07d0      	lsls	r0, r2, #31
 800700a:	d502      	bpl.n	8007012 <_printf_float+0x1a2>
 800700c:	3301      	adds	r3, #1
 800700e:	440b      	add	r3, r1
 8007010:	6123      	str	r3, [r4, #16]
 8007012:	65a1      	str	r1, [r4, #88]	; 0x58
 8007014:	f04f 0900 	mov.w	r9, #0
 8007018:	e7de      	b.n	8006fd8 <_printf_float+0x168>
 800701a:	b913      	cbnz	r3, 8007022 <_printf_float+0x1b2>
 800701c:	6822      	ldr	r2, [r4, #0]
 800701e:	07d2      	lsls	r2, r2, #31
 8007020:	d501      	bpl.n	8007026 <_printf_float+0x1b6>
 8007022:	3302      	adds	r3, #2
 8007024:	e7f4      	b.n	8007010 <_printf_float+0x1a0>
 8007026:	2301      	movs	r3, #1
 8007028:	e7f2      	b.n	8007010 <_printf_float+0x1a0>
 800702a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800702e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007030:	4299      	cmp	r1, r3
 8007032:	db05      	blt.n	8007040 <_printf_float+0x1d0>
 8007034:	6823      	ldr	r3, [r4, #0]
 8007036:	6121      	str	r1, [r4, #16]
 8007038:	07d8      	lsls	r0, r3, #31
 800703a:	d5ea      	bpl.n	8007012 <_printf_float+0x1a2>
 800703c:	1c4b      	adds	r3, r1, #1
 800703e:	e7e7      	b.n	8007010 <_printf_float+0x1a0>
 8007040:	2900      	cmp	r1, #0
 8007042:	bfd4      	ite	le
 8007044:	f1c1 0202 	rsble	r2, r1, #2
 8007048:	2201      	movgt	r2, #1
 800704a:	4413      	add	r3, r2
 800704c:	e7e0      	b.n	8007010 <_printf_float+0x1a0>
 800704e:	6823      	ldr	r3, [r4, #0]
 8007050:	055a      	lsls	r2, r3, #21
 8007052:	d407      	bmi.n	8007064 <_printf_float+0x1f4>
 8007054:	6923      	ldr	r3, [r4, #16]
 8007056:	4642      	mov	r2, r8
 8007058:	4631      	mov	r1, r6
 800705a:	4628      	mov	r0, r5
 800705c:	47b8      	blx	r7
 800705e:	3001      	adds	r0, #1
 8007060:	d12c      	bne.n	80070bc <_printf_float+0x24c>
 8007062:	e764      	b.n	8006f2e <_printf_float+0xbe>
 8007064:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007068:	f240 80e0 	bls.w	800722c <_printf_float+0x3bc>
 800706c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007070:	2200      	movs	r2, #0
 8007072:	2300      	movs	r3, #0
 8007074:	f7f9 fd30 	bl	8000ad8 <__aeabi_dcmpeq>
 8007078:	2800      	cmp	r0, #0
 800707a:	d034      	beq.n	80070e6 <_printf_float+0x276>
 800707c:	4a37      	ldr	r2, [pc, #220]	; (800715c <_printf_float+0x2ec>)
 800707e:	2301      	movs	r3, #1
 8007080:	4631      	mov	r1, r6
 8007082:	4628      	mov	r0, r5
 8007084:	47b8      	blx	r7
 8007086:	3001      	adds	r0, #1
 8007088:	f43f af51 	beq.w	8006f2e <_printf_float+0xbe>
 800708c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007090:	429a      	cmp	r2, r3
 8007092:	db02      	blt.n	800709a <_printf_float+0x22a>
 8007094:	6823      	ldr	r3, [r4, #0]
 8007096:	07d8      	lsls	r0, r3, #31
 8007098:	d510      	bpl.n	80070bc <_printf_float+0x24c>
 800709a:	ee18 3a10 	vmov	r3, s16
 800709e:	4652      	mov	r2, sl
 80070a0:	4631      	mov	r1, r6
 80070a2:	4628      	mov	r0, r5
 80070a4:	47b8      	blx	r7
 80070a6:	3001      	adds	r0, #1
 80070a8:	f43f af41 	beq.w	8006f2e <_printf_float+0xbe>
 80070ac:	f04f 0800 	mov.w	r8, #0
 80070b0:	f104 091a 	add.w	r9, r4, #26
 80070b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070b6:	3b01      	subs	r3, #1
 80070b8:	4543      	cmp	r3, r8
 80070ba:	dc09      	bgt.n	80070d0 <_printf_float+0x260>
 80070bc:	6823      	ldr	r3, [r4, #0]
 80070be:	079b      	lsls	r3, r3, #30
 80070c0:	f100 8107 	bmi.w	80072d2 <_printf_float+0x462>
 80070c4:	68e0      	ldr	r0, [r4, #12]
 80070c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070c8:	4298      	cmp	r0, r3
 80070ca:	bfb8      	it	lt
 80070cc:	4618      	movlt	r0, r3
 80070ce:	e730      	b.n	8006f32 <_printf_float+0xc2>
 80070d0:	2301      	movs	r3, #1
 80070d2:	464a      	mov	r2, r9
 80070d4:	4631      	mov	r1, r6
 80070d6:	4628      	mov	r0, r5
 80070d8:	47b8      	blx	r7
 80070da:	3001      	adds	r0, #1
 80070dc:	f43f af27 	beq.w	8006f2e <_printf_float+0xbe>
 80070e0:	f108 0801 	add.w	r8, r8, #1
 80070e4:	e7e6      	b.n	80070b4 <_printf_float+0x244>
 80070e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	dc39      	bgt.n	8007160 <_printf_float+0x2f0>
 80070ec:	4a1b      	ldr	r2, [pc, #108]	; (800715c <_printf_float+0x2ec>)
 80070ee:	2301      	movs	r3, #1
 80070f0:	4631      	mov	r1, r6
 80070f2:	4628      	mov	r0, r5
 80070f4:	47b8      	blx	r7
 80070f6:	3001      	adds	r0, #1
 80070f8:	f43f af19 	beq.w	8006f2e <_printf_float+0xbe>
 80070fc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007100:	4313      	orrs	r3, r2
 8007102:	d102      	bne.n	800710a <_printf_float+0x29a>
 8007104:	6823      	ldr	r3, [r4, #0]
 8007106:	07d9      	lsls	r1, r3, #31
 8007108:	d5d8      	bpl.n	80070bc <_printf_float+0x24c>
 800710a:	ee18 3a10 	vmov	r3, s16
 800710e:	4652      	mov	r2, sl
 8007110:	4631      	mov	r1, r6
 8007112:	4628      	mov	r0, r5
 8007114:	47b8      	blx	r7
 8007116:	3001      	adds	r0, #1
 8007118:	f43f af09 	beq.w	8006f2e <_printf_float+0xbe>
 800711c:	f04f 0900 	mov.w	r9, #0
 8007120:	f104 0a1a 	add.w	sl, r4, #26
 8007124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007126:	425b      	negs	r3, r3
 8007128:	454b      	cmp	r3, r9
 800712a:	dc01      	bgt.n	8007130 <_printf_float+0x2c0>
 800712c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800712e:	e792      	b.n	8007056 <_printf_float+0x1e6>
 8007130:	2301      	movs	r3, #1
 8007132:	4652      	mov	r2, sl
 8007134:	4631      	mov	r1, r6
 8007136:	4628      	mov	r0, r5
 8007138:	47b8      	blx	r7
 800713a:	3001      	adds	r0, #1
 800713c:	f43f aef7 	beq.w	8006f2e <_printf_float+0xbe>
 8007140:	f109 0901 	add.w	r9, r9, #1
 8007144:	e7ee      	b.n	8007124 <_printf_float+0x2b4>
 8007146:	bf00      	nop
 8007148:	7fefffff 	.word	0x7fefffff
 800714c:	0800a9e1 	.word	0x0800a9e1
 8007150:	0800a9e5 	.word	0x0800a9e5
 8007154:	0800a9e9 	.word	0x0800a9e9
 8007158:	0800a9ed 	.word	0x0800a9ed
 800715c:	0800a9f1 	.word	0x0800a9f1
 8007160:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007162:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007164:	429a      	cmp	r2, r3
 8007166:	bfa8      	it	ge
 8007168:	461a      	movge	r2, r3
 800716a:	2a00      	cmp	r2, #0
 800716c:	4691      	mov	r9, r2
 800716e:	dc37      	bgt.n	80071e0 <_printf_float+0x370>
 8007170:	f04f 0b00 	mov.w	fp, #0
 8007174:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007178:	f104 021a 	add.w	r2, r4, #26
 800717c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800717e:	9305      	str	r3, [sp, #20]
 8007180:	eba3 0309 	sub.w	r3, r3, r9
 8007184:	455b      	cmp	r3, fp
 8007186:	dc33      	bgt.n	80071f0 <_printf_float+0x380>
 8007188:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800718c:	429a      	cmp	r2, r3
 800718e:	db3b      	blt.n	8007208 <_printf_float+0x398>
 8007190:	6823      	ldr	r3, [r4, #0]
 8007192:	07da      	lsls	r2, r3, #31
 8007194:	d438      	bmi.n	8007208 <_printf_float+0x398>
 8007196:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800719a:	eba2 0903 	sub.w	r9, r2, r3
 800719e:	9b05      	ldr	r3, [sp, #20]
 80071a0:	1ad2      	subs	r2, r2, r3
 80071a2:	4591      	cmp	r9, r2
 80071a4:	bfa8      	it	ge
 80071a6:	4691      	movge	r9, r2
 80071a8:	f1b9 0f00 	cmp.w	r9, #0
 80071ac:	dc35      	bgt.n	800721a <_printf_float+0x3aa>
 80071ae:	f04f 0800 	mov.w	r8, #0
 80071b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071b6:	f104 0a1a 	add.w	sl, r4, #26
 80071ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071be:	1a9b      	subs	r3, r3, r2
 80071c0:	eba3 0309 	sub.w	r3, r3, r9
 80071c4:	4543      	cmp	r3, r8
 80071c6:	f77f af79 	ble.w	80070bc <_printf_float+0x24c>
 80071ca:	2301      	movs	r3, #1
 80071cc:	4652      	mov	r2, sl
 80071ce:	4631      	mov	r1, r6
 80071d0:	4628      	mov	r0, r5
 80071d2:	47b8      	blx	r7
 80071d4:	3001      	adds	r0, #1
 80071d6:	f43f aeaa 	beq.w	8006f2e <_printf_float+0xbe>
 80071da:	f108 0801 	add.w	r8, r8, #1
 80071de:	e7ec      	b.n	80071ba <_printf_float+0x34a>
 80071e0:	4613      	mov	r3, r2
 80071e2:	4631      	mov	r1, r6
 80071e4:	4642      	mov	r2, r8
 80071e6:	4628      	mov	r0, r5
 80071e8:	47b8      	blx	r7
 80071ea:	3001      	adds	r0, #1
 80071ec:	d1c0      	bne.n	8007170 <_printf_float+0x300>
 80071ee:	e69e      	b.n	8006f2e <_printf_float+0xbe>
 80071f0:	2301      	movs	r3, #1
 80071f2:	4631      	mov	r1, r6
 80071f4:	4628      	mov	r0, r5
 80071f6:	9205      	str	r2, [sp, #20]
 80071f8:	47b8      	blx	r7
 80071fa:	3001      	adds	r0, #1
 80071fc:	f43f ae97 	beq.w	8006f2e <_printf_float+0xbe>
 8007200:	9a05      	ldr	r2, [sp, #20]
 8007202:	f10b 0b01 	add.w	fp, fp, #1
 8007206:	e7b9      	b.n	800717c <_printf_float+0x30c>
 8007208:	ee18 3a10 	vmov	r3, s16
 800720c:	4652      	mov	r2, sl
 800720e:	4631      	mov	r1, r6
 8007210:	4628      	mov	r0, r5
 8007212:	47b8      	blx	r7
 8007214:	3001      	adds	r0, #1
 8007216:	d1be      	bne.n	8007196 <_printf_float+0x326>
 8007218:	e689      	b.n	8006f2e <_printf_float+0xbe>
 800721a:	9a05      	ldr	r2, [sp, #20]
 800721c:	464b      	mov	r3, r9
 800721e:	4442      	add	r2, r8
 8007220:	4631      	mov	r1, r6
 8007222:	4628      	mov	r0, r5
 8007224:	47b8      	blx	r7
 8007226:	3001      	adds	r0, #1
 8007228:	d1c1      	bne.n	80071ae <_printf_float+0x33e>
 800722a:	e680      	b.n	8006f2e <_printf_float+0xbe>
 800722c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800722e:	2a01      	cmp	r2, #1
 8007230:	dc01      	bgt.n	8007236 <_printf_float+0x3c6>
 8007232:	07db      	lsls	r3, r3, #31
 8007234:	d53a      	bpl.n	80072ac <_printf_float+0x43c>
 8007236:	2301      	movs	r3, #1
 8007238:	4642      	mov	r2, r8
 800723a:	4631      	mov	r1, r6
 800723c:	4628      	mov	r0, r5
 800723e:	47b8      	blx	r7
 8007240:	3001      	adds	r0, #1
 8007242:	f43f ae74 	beq.w	8006f2e <_printf_float+0xbe>
 8007246:	ee18 3a10 	vmov	r3, s16
 800724a:	4652      	mov	r2, sl
 800724c:	4631      	mov	r1, r6
 800724e:	4628      	mov	r0, r5
 8007250:	47b8      	blx	r7
 8007252:	3001      	adds	r0, #1
 8007254:	f43f ae6b 	beq.w	8006f2e <_printf_float+0xbe>
 8007258:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800725c:	2200      	movs	r2, #0
 800725e:	2300      	movs	r3, #0
 8007260:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007264:	f7f9 fc38 	bl	8000ad8 <__aeabi_dcmpeq>
 8007268:	b9d8      	cbnz	r0, 80072a2 <_printf_float+0x432>
 800726a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800726e:	f108 0201 	add.w	r2, r8, #1
 8007272:	4631      	mov	r1, r6
 8007274:	4628      	mov	r0, r5
 8007276:	47b8      	blx	r7
 8007278:	3001      	adds	r0, #1
 800727a:	d10e      	bne.n	800729a <_printf_float+0x42a>
 800727c:	e657      	b.n	8006f2e <_printf_float+0xbe>
 800727e:	2301      	movs	r3, #1
 8007280:	4652      	mov	r2, sl
 8007282:	4631      	mov	r1, r6
 8007284:	4628      	mov	r0, r5
 8007286:	47b8      	blx	r7
 8007288:	3001      	adds	r0, #1
 800728a:	f43f ae50 	beq.w	8006f2e <_printf_float+0xbe>
 800728e:	f108 0801 	add.w	r8, r8, #1
 8007292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007294:	3b01      	subs	r3, #1
 8007296:	4543      	cmp	r3, r8
 8007298:	dcf1      	bgt.n	800727e <_printf_float+0x40e>
 800729a:	464b      	mov	r3, r9
 800729c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80072a0:	e6da      	b.n	8007058 <_printf_float+0x1e8>
 80072a2:	f04f 0800 	mov.w	r8, #0
 80072a6:	f104 0a1a 	add.w	sl, r4, #26
 80072aa:	e7f2      	b.n	8007292 <_printf_float+0x422>
 80072ac:	2301      	movs	r3, #1
 80072ae:	4642      	mov	r2, r8
 80072b0:	e7df      	b.n	8007272 <_printf_float+0x402>
 80072b2:	2301      	movs	r3, #1
 80072b4:	464a      	mov	r2, r9
 80072b6:	4631      	mov	r1, r6
 80072b8:	4628      	mov	r0, r5
 80072ba:	47b8      	blx	r7
 80072bc:	3001      	adds	r0, #1
 80072be:	f43f ae36 	beq.w	8006f2e <_printf_float+0xbe>
 80072c2:	f108 0801 	add.w	r8, r8, #1
 80072c6:	68e3      	ldr	r3, [r4, #12]
 80072c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072ca:	1a5b      	subs	r3, r3, r1
 80072cc:	4543      	cmp	r3, r8
 80072ce:	dcf0      	bgt.n	80072b2 <_printf_float+0x442>
 80072d0:	e6f8      	b.n	80070c4 <_printf_float+0x254>
 80072d2:	f04f 0800 	mov.w	r8, #0
 80072d6:	f104 0919 	add.w	r9, r4, #25
 80072da:	e7f4      	b.n	80072c6 <_printf_float+0x456>

080072dc <_printf_common>:
 80072dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072e0:	4616      	mov	r6, r2
 80072e2:	4699      	mov	r9, r3
 80072e4:	688a      	ldr	r2, [r1, #8]
 80072e6:	690b      	ldr	r3, [r1, #16]
 80072e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072ec:	4293      	cmp	r3, r2
 80072ee:	bfb8      	it	lt
 80072f0:	4613      	movlt	r3, r2
 80072f2:	6033      	str	r3, [r6, #0]
 80072f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072f8:	4607      	mov	r7, r0
 80072fa:	460c      	mov	r4, r1
 80072fc:	b10a      	cbz	r2, 8007302 <_printf_common+0x26>
 80072fe:	3301      	adds	r3, #1
 8007300:	6033      	str	r3, [r6, #0]
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	0699      	lsls	r1, r3, #26
 8007306:	bf42      	ittt	mi
 8007308:	6833      	ldrmi	r3, [r6, #0]
 800730a:	3302      	addmi	r3, #2
 800730c:	6033      	strmi	r3, [r6, #0]
 800730e:	6825      	ldr	r5, [r4, #0]
 8007310:	f015 0506 	ands.w	r5, r5, #6
 8007314:	d106      	bne.n	8007324 <_printf_common+0x48>
 8007316:	f104 0a19 	add.w	sl, r4, #25
 800731a:	68e3      	ldr	r3, [r4, #12]
 800731c:	6832      	ldr	r2, [r6, #0]
 800731e:	1a9b      	subs	r3, r3, r2
 8007320:	42ab      	cmp	r3, r5
 8007322:	dc26      	bgt.n	8007372 <_printf_common+0x96>
 8007324:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007328:	1e13      	subs	r3, r2, #0
 800732a:	6822      	ldr	r2, [r4, #0]
 800732c:	bf18      	it	ne
 800732e:	2301      	movne	r3, #1
 8007330:	0692      	lsls	r2, r2, #26
 8007332:	d42b      	bmi.n	800738c <_printf_common+0xb0>
 8007334:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007338:	4649      	mov	r1, r9
 800733a:	4638      	mov	r0, r7
 800733c:	47c0      	blx	r8
 800733e:	3001      	adds	r0, #1
 8007340:	d01e      	beq.n	8007380 <_printf_common+0xa4>
 8007342:	6823      	ldr	r3, [r4, #0]
 8007344:	6922      	ldr	r2, [r4, #16]
 8007346:	f003 0306 	and.w	r3, r3, #6
 800734a:	2b04      	cmp	r3, #4
 800734c:	bf02      	ittt	eq
 800734e:	68e5      	ldreq	r5, [r4, #12]
 8007350:	6833      	ldreq	r3, [r6, #0]
 8007352:	1aed      	subeq	r5, r5, r3
 8007354:	68a3      	ldr	r3, [r4, #8]
 8007356:	bf0c      	ite	eq
 8007358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800735c:	2500      	movne	r5, #0
 800735e:	4293      	cmp	r3, r2
 8007360:	bfc4      	itt	gt
 8007362:	1a9b      	subgt	r3, r3, r2
 8007364:	18ed      	addgt	r5, r5, r3
 8007366:	2600      	movs	r6, #0
 8007368:	341a      	adds	r4, #26
 800736a:	42b5      	cmp	r5, r6
 800736c:	d11a      	bne.n	80073a4 <_printf_common+0xc8>
 800736e:	2000      	movs	r0, #0
 8007370:	e008      	b.n	8007384 <_printf_common+0xa8>
 8007372:	2301      	movs	r3, #1
 8007374:	4652      	mov	r2, sl
 8007376:	4649      	mov	r1, r9
 8007378:	4638      	mov	r0, r7
 800737a:	47c0      	blx	r8
 800737c:	3001      	adds	r0, #1
 800737e:	d103      	bne.n	8007388 <_printf_common+0xac>
 8007380:	f04f 30ff 	mov.w	r0, #4294967295
 8007384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007388:	3501      	adds	r5, #1
 800738a:	e7c6      	b.n	800731a <_printf_common+0x3e>
 800738c:	18e1      	adds	r1, r4, r3
 800738e:	1c5a      	adds	r2, r3, #1
 8007390:	2030      	movs	r0, #48	; 0x30
 8007392:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007396:	4422      	add	r2, r4
 8007398:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800739c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073a0:	3302      	adds	r3, #2
 80073a2:	e7c7      	b.n	8007334 <_printf_common+0x58>
 80073a4:	2301      	movs	r3, #1
 80073a6:	4622      	mov	r2, r4
 80073a8:	4649      	mov	r1, r9
 80073aa:	4638      	mov	r0, r7
 80073ac:	47c0      	blx	r8
 80073ae:	3001      	adds	r0, #1
 80073b0:	d0e6      	beq.n	8007380 <_printf_common+0xa4>
 80073b2:	3601      	adds	r6, #1
 80073b4:	e7d9      	b.n	800736a <_printf_common+0x8e>
	...

080073b8 <_printf_i>:
 80073b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073bc:	7e0f      	ldrb	r7, [r1, #24]
 80073be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073c0:	2f78      	cmp	r7, #120	; 0x78
 80073c2:	4691      	mov	r9, r2
 80073c4:	4680      	mov	r8, r0
 80073c6:	460c      	mov	r4, r1
 80073c8:	469a      	mov	sl, r3
 80073ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80073ce:	d807      	bhi.n	80073e0 <_printf_i+0x28>
 80073d0:	2f62      	cmp	r7, #98	; 0x62
 80073d2:	d80a      	bhi.n	80073ea <_printf_i+0x32>
 80073d4:	2f00      	cmp	r7, #0
 80073d6:	f000 80d4 	beq.w	8007582 <_printf_i+0x1ca>
 80073da:	2f58      	cmp	r7, #88	; 0x58
 80073dc:	f000 80c0 	beq.w	8007560 <_printf_i+0x1a8>
 80073e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073e8:	e03a      	b.n	8007460 <_printf_i+0xa8>
 80073ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073ee:	2b15      	cmp	r3, #21
 80073f0:	d8f6      	bhi.n	80073e0 <_printf_i+0x28>
 80073f2:	a101      	add	r1, pc, #4	; (adr r1, 80073f8 <_printf_i+0x40>)
 80073f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073f8:	08007451 	.word	0x08007451
 80073fc:	08007465 	.word	0x08007465
 8007400:	080073e1 	.word	0x080073e1
 8007404:	080073e1 	.word	0x080073e1
 8007408:	080073e1 	.word	0x080073e1
 800740c:	080073e1 	.word	0x080073e1
 8007410:	08007465 	.word	0x08007465
 8007414:	080073e1 	.word	0x080073e1
 8007418:	080073e1 	.word	0x080073e1
 800741c:	080073e1 	.word	0x080073e1
 8007420:	080073e1 	.word	0x080073e1
 8007424:	08007569 	.word	0x08007569
 8007428:	08007491 	.word	0x08007491
 800742c:	08007523 	.word	0x08007523
 8007430:	080073e1 	.word	0x080073e1
 8007434:	080073e1 	.word	0x080073e1
 8007438:	0800758b 	.word	0x0800758b
 800743c:	080073e1 	.word	0x080073e1
 8007440:	08007491 	.word	0x08007491
 8007444:	080073e1 	.word	0x080073e1
 8007448:	080073e1 	.word	0x080073e1
 800744c:	0800752b 	.word	0x0800752b
 8007450:	682b      	ldr	r3, [r5, #0]
 8007452:	1d1a      	adds	r2, r3, #4
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	602a      	str	r2, [r5, #0]
 8007458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800745c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007460:	2301      	movs	r3, #1
 8007462:	e09f      	b.n	80075a4 <_printf_i+0x1ec>
 8007464:	6820      	ldr	r0, [r4, #0]
 8007466:	682b      	ldr	r3, [r5, #0]
 8007468:	0607      	lsls	r7, r0, #24
 800746a:	f103 0104 	add.w	r1, r3, #4
 800746e:	6029      	str	r1, [r5, #0]
 8007470:	d501      	bpl.n	8007476 <_printf_i+0xbe>
 8007472:	681e      	ldr	r6, [r3, #0]
 8007474:	e003      	b.n	800747e <_printf_i+0xc6>
 8007476:	0646      	lsls	r6, r0, #25
 8007478:	d5fb      	bpl.n	8007472 <_printf_i+0xba>
 800747a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800747e:	2e00      	cmp	r6, #0
 8007480:	da03      	bge.n	800748a <_printf_i+0xd2>
 8007482:	232d      	movs	r3, #45	; 0x2d
 8007484:	4276      	negs	r6, r6
 8007486:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800748a:	485a      	ldr	r0, [pc, #360]	; (80075f4 <_printf_i+0x23c>)
 800748c:	230a      	movs	r3, #10
 800748e:	e012      	b.n	80074b6 <_printf_i+0xfe>
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	6820      	ldr	r0, [r4, #0]
 8007494:	1d19      	adds	r1, r3, #4
 8007496:	6029      	str	r1, [r5, #0]
 8007498:	0605      	lsls	r5, r0, #24
 800749a:	d501      	bpl.n	80074a0 <_printf_i+0xe8>
 800749c:	681e      	ldr	r6, [r3, #0]
 800749e:	e002      	b.n	80074a6 <_printf_i+0xee>
 80074a0:	0641      	lsls	r1, r0, #25
 80074a2:	d5fb      	bpl.n	800749c <_printf_i+0xe4>
 80074a4:	881e      	ldrh	r6, [r3, #0]
 80074a6:	4853      	ldr	r0, [pc, #332]	; (80075f4 <_printf_i+0x23c>)
 80074a8:	2f6f      	cmp	r7, #111	; 0x6f
 80074aa:	bf0c      	ite	eq
 80074ac:	2308      	moveq	r3, #8
 80074ae:	230a      	movne	r3, #10
 80074b0:	2100      	movs	r1, #0
 80074b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074b6:	6865      	ldr	r5, [r4, #4]
 80074b8:	60a5      	str	r5, [r4, #8]
 80074ba:	2d00      	cmp	r5, #0
 80074bc:	bfa2      	ittt	ge
 80074be:	6821      	ldrge	r1, [r4, #0]
 80074c0:	f021 0104 	bicge.w	r1, r1, #4
 80074c4:	6021      	strge	r1, [r4, #0]
 80074c6:	b90e      	cbnz	r6, 80074cc <_printf_i+0x114>
 80074c8:	2d00      	cmp	r5, #0
 80074ca:	d04b      	beq.n	8007564 <_printf_i+0x1ac>
 80074cc:	4615      	mov	r5, r2
 80074ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80074d2:	fb03 6711 	mls	r7, r3, r1, r6
 80074d6:	5dc7      	ldrb	r7, [r0, r7]
 80074d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80074dc:	4637      	mov	r7, r6
 80074de:	42bb      	cmp	r3, r7
 80074e0:	460e      	mov	r6, r1
 80074e2:	d9f4      	bls.n	80074ce <_printf_i+0x116>
 80074e4:	2b08      	cmp	r3, #8
 80074e6:	d10b      	bne.n	8007500 <_printf_i+0x148>
 80074e8:	6823      	ldr	r3, [r4, #0]
 80074ea:	07de      	lsls	r6, r3, #31
 80074ec:	d508      	bpl.n	8007500 <_printf_i+0x148>
 80074ee:	6923      	ldr	r3, [r4, #16]
 80074f0:	6861      	ldr	r1, [r4, #4]
 80074f2:	4299      	cmp	r1, r3
 80074f4:	bfde      	ittt	le
 80074f6:	2330      	movle	r3, #48	; 0x30
 80074f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007500:	1b52      	subs	r2, r2, r5
 8007502:	6122      	str	r2, [r4, #16]
 8007504:	f8cd a000 	str.w	sl, [sp]
 8007508:	464b      	mov	r3, r9
 800750a:	aa03      	add	r2, sp, #12
 800750c:	4621      	mov	r1, r4
 800750e:	4640      	mov	r0, r8
 8007510:	f7ff fee4 	bl	80072dc <_printf_common>
 8007514:	3001      	adds	r0, #1
 8007516:	d14a      	bne.n	80075ae <_printf_i+0x1f6>
 8007518:	f04f 30ff 	mov.w	r0, #4294967295
 800751c:	b004      	add	sp, #16
 800751e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007522:	6823      	ldr	r3, [r4, #0]
 8007524:	f043 0320 	orr.w	r3, r3, #32
 8007528:	6023      	str	r3, [r4, #0]
 800752a:	4833      	ldr	r0, [pc, #204]	; (80075f8 <_printf_i+0x240>)
 800752c:	2778      	movs	r7, #120	; 0x78
 800752e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007532:	6823      	ldr	r3, [r4, #0]
 8007534:	6829      	ldr	r1, [r5, #0]
 8007536:	061f      	lsls	r7, r3, #24
 8007538:	f851 6b04 	ldr.w	r6, [r1], #4
 800753c:	d402      	bmi.n	8007544 <_printf_i+0x18c>
 800753e:	065f      	lsls	r7, r3, #25
 8007540:	bf48      	it	mi
 8007542:	b2b6      	uxthmi	r6, r6
 8007544:	07df      	lsls	r7, r3, #31
 8007546:	bf48      	it	mi
 8007548:	f043 0320 	orrmi.w	r3, r3, #32
 800754c:	6029      	str	r1, [r5, #0]
 800754e:	bf48      	it	mi
 8007550:	6023      	strmi	r3, [r4, #0]
 8007552:	b91e      	cbnz	r6, 800755c <_printf_i+0x1a4>
 8007554:	6823      	ldr	r3, [r4, #0]
 8007556:	f023 0320 	bic.w	r3, r3, #32
 800755a:	6023      	str	r3, [r4, #0]
 800755c:	2310      	movs	r3, #16
 800755e:	e7a7      	b.n	80074b0 <_printf_i+0xf8>
 8007560:	4824      	ldr	r0, [pc, #144]	; (80075f4 <_printf_i+0x23c>)
 8007562:	e7e4      	b.n	800752e <_printf_i+0x176>
 8007564:	4615      	mov	r5, r2
 8007566:	e7bd      	b.n	80074e4 <_printf_i+0x12c>
 8007568:	682b      	ldr	r3, [r5, #0]
 800756a:	6826      	ldr	r6, [r4, #0]
 800756c:	6961      	ldr	r1, [r4, #20]
 800756e:	1d18      	adds	r0, r3, #4
 8007570:	6028      	str	r0, [r5, #0]
 8007572:	0635      	lsls	r5, r6, #24
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	d501      	bpl.n	800757c <_printf_i+0x1c4>
 8007578:	6019      	str	r1, [r3, #0]
 800757a:	e002      	b.n	8007582 <_printf_i+0x1ca>
 800757c:	0670      	lsls	r0, r6, #25
 800757e:	d5fb      	bpl.n	8007578 <_printf_i+0x1c0>
 8007580:	8019      	strh	r1, [r3, #0]
 8007582:	2300      	movs	r3, #0
 8007584:	6123      	str	r3, [r4, #16]
 8007586:	4615      	mov	r5, r2
 8007588:	e7bc      	b.n	8007504 <_printf_i+0x14c>
 800758a:	682b      	ldr	r3, [r5, #0]
 800758c:	1d1a      	adds	r2, r3, #4
 800758e:	602a      	str	r2, [r5, #0]
 8007590:	681d      	ldr	r5, [r3, #0]
 8007592:	6862      	ldr	r2, [r4, #4]
 8007594:	2100      	movs	r1, #0
 8007596:	4628      	mov	r0, r5
 8007598:	f7f8 fe22 	bl	80001e0 <memchr>
 800759c:	b108      	cbz	r0, 80075a2 <_printf_i+0x1ea>
 800759e:	1b40      	subs	r0, r0, r5
 80075a0:	6060      	str	r0, [r4, #4]
 80075a2:	6863      	ldr	r3, [r4, #4]
 80075a4:	6123      	str	r3, [r4, #16]
 80075a6:	2300      	movs	r3, #0
 80075a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075ac:	e7aa      	b.n	8007504 <_printf_i+0x14c>
 80075ae:	6923      	ldr	r3, [r4, #16]
 80075b0:	462a      	mov	r2, r5
 80075b2:	4649      	mov	r1, r9
 80075b4:	4640      	mov	r0, r8
 80075b6:	47d0      	blx	sl
 80075b8:	3001      	adds	r0, #1
 80075ba:	d0ad      	beq.n	8007518 <_printf_i+0x160>
 80075bc:	6823      	ldr	r3, [r4, #0]
 80075be:	079b      	lsls	r3, r3, #30
 80075c0:	d413      	bmi.n	80075ea <_printf_i+0x232>
 80075c2:	68e0      	ldr	r0, [r4, #12]
 80075c4:	9b03      	ldr	r3, [sp, #12]
 80075c6:	4298      	cmp	r0, r3
 80075c8:	bfb8      	it	lt
 80075ca:	4618      	movlt	r0, r3
 80075cc:	e7a6      	b.n	800751c <_printf_i+0x164>
 80075ce:	2301      	movs	r3, #1
 80075d0:	4632      	mov	r2, r6
 80075d2:	4649      	mov	r1, r9
 80075d4:	4640      	mov	r0, r8
 80075d6:	47d0      	blx	sl
 80075d8:	3001      	adds	r0, #1
 80075da:	d09d      	beq.n	8007518 <_printf_i+0x160>
 80075dc:	3501      	adds	r5, #1
 80075de:	68e3      	ldr	r3, [r4, #12]
 80075e0:	9903      	ldr	r1, [sp, #12]
 80075e2:	1a5b      	subs	r3, r3, r1
 80075e4:	42ab      	cmp	r3, r5
 80075e6:	dcf2      	bgt.n	80075ce <_printf_i+0x216>
 80075e8:	e7eb      	b.n	80075c2 <_printf_i+0x20a>
 80075ea:	2500      	movs	r5, #0
 80075ec:	f104 0619 	add.w	r6, r4, #25
 80075f0:	e7f5      	b.n	80075de <_printf_i+0x226>
 80075f2:	bf00      	nop
 80075f4:	0800a9f3 	.word	0x0800a9f3
 80075f8:	0800aa04 	.word	0x0800aa04

080075fc <_scanf_float>:
 80075fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007600:	b087      	sub	sp, #28
 8007602:	4617      	mov	r7, r2
 8007604:	9303      	str	r3, [sp, #12]
 8007606:	688b      	ldr	r3, [r1, #8]
 8007608:	1e5a      	subs	r2, r3, #1
 800760a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800760e:	bf83      	ittte	hi
 8007610:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007614:	195b      	addhi	r3, r3, r5
 8007616:	9302      	strhi	r3, [sp, #8]
 8007618:	2300      	movls	r3, #0
 800761a:	bf86      	itte	hi
 800761c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007620:	608b      	strhi	r3, [r1, #8]
 8007622:	9302      	strls	r3, [sp, #8]
 8007624:	680b      	ldr	r3, [r1, #0]
 8007626:	468b      	mov	fp, r1
 8007628:	2500      	movs	r5, #0
 800762a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800762e:	f84b 3b1c 	str.w	r3, [fp], #28
 8007632:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007636:	4680      	mov	r8, r0
 8007638:	460c      	mov	r4, r1
 800763a:	465e      	mov	r6, fp
 800763c:	46aa      	mov	sl, r5
 800763e:	46a9      	mov	r9, r5
 8007640:	9501      	str	r5, [sp, #4]
 8007642:	68a2      	ldr	r2, [r4, #8]
 8007644:	b152      	cbz	r2, 800765c <_scanf_float+0x60>
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	2b4e      	cmp	r3, #78	; 0x4e
 800764c:	d864      	bhi.n	8007718 <_scanf_float+0x11c>
 800764e:	2b40      	cmp	r3, #64	; 0x40
 8007650:	d83c      	bhi.n	80076cc <_scanf_float+0xd0>
 8007652:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007656:	b2c8      	uxtb	r0, r1
 8007658:	280e      	cmp	r0, #14
 800765a:	d93a      	bls.n	80076d2 <_scanf_float+0xd6>
 800765c:	f1b9 0f00 	cmp.w	r9, #0
 8007660:	d003      	beq.n	800766a <_scanf_float+0x6e>
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800766e:	f1ba 0f01 	cmp.w	sl, #1
 8007672:	f200 8113 	bhi.w	800789c <_scanf_float+0x2a0>
 8007676:	455e      	cmp	r6, fp
 8007678:	f200 8105 	bhi.w	8007886 <_scanf_float+0x28a>
 800767c:	2501      	movs	r5, #1
 800767e:	4628      	mov	r0, r5
 8007680:	b007      	add	sp, #28
 8007682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007686:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800768a:	2a0d      	cmp	r2, #13
 800768c:	d8e6      	bhi.n	800765c <_scanf_float+0x60>
 800768e:	a101      	add	r1, pc, #4	; (adr r1, 8007694 <_scanf_float+0x98>)
 8007690:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007694:	080077d3 	.word	0x080077d3
 8007698:	0800765d 	.word	0x0800765d
 800769c:	0800765d 	.word	0x0800765d
 80076a0:	0800765d 	.word	0x0800765d
 80076a4:	08007833 	.word	0x08007833
 80076a8:	0800780b 	.word	0x0800780b
 80076ac:	0800765d 	.word	0x0800765d
 80076b0:	0800765d 	.word	0x0800765d
 80076b4:	080077e1 	.word	0x080077e1
 80076b8:	0800765d 	.word	0x0800765d
 80076bc:	0800765d 	.word	0x0800765d
 80076c0:	0800765d 	.word	0x0800765d
 80076c4:	0800765d 	.word	0x0800765d
 80076c8:	08007799 	.word	0x08007799
 80076cc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80076d0:	e7db      	b.n	800768a <_scanf_float+0x8e>
 80076d2:	290e      	cmp	r1, #14
 80076d4:	d8c2      	bhi.n	800765c <_scanf_float+0x60>
 80076d6:	a001      	add	r0, pc, #4	; (adr r0, 80076dc <_scanf_float+0xe0>)
 80076d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80076dc:	0800778b 	.word	0x0800778b
 80076e0:	0800765d 	.word	0x0800765d
 80076e4:	0800778b 	.word	0x0800778b
 80076e8:	0800781f 	.word	0x0800781f
 80076ec:	0800765d 	.word	0x0800765d
 80076f0:	08007739 	.word	0x08007739
 80076f4:	08007775 	.word	0x08007775
 80076f8:	08007775 	.word	0x08007775
 80076fc:	08007775 	.word	0x08007775
 8007700:	08007775 	.word	0x08007775
 8007704:	08007775 	.word	0x08007775
 8007708:	08007775 	.word	0x08007775
 800770c:	08007775 	.word	0x08007775
 8007710:	08007775 	.word	0x08007775
 8007714:	08007775 	.word	0x08007775
 8007718:	2b6e      	cmp	r3, #110	; 0x6e
 800771a:	d809      	bhi.n	8007730 <_scanf_float+0x134>
 800771c:	2b60      	cmp	r3, #96	; 0x60
 800771e:	d8b2      	bhi.n	8007686 <_scanf_float+0x8a>
 8007720:	2b54      	cmp	r3, #84	; 0x54
 8007722:	d077      	beq.n	8007814 <_scanf_float+0x218>
 8007724:	2b59      	cmp	r3, #89	; 0x59
 8007726:	d199      	bne.n	800765c <_scanf_float+0x60>
 8007728:	2d07      	cmp	r5, #7
 800772a:	d197      	bne.n	800765c <_scanf_float+0x60>
 800772c:	2508      	movs	r5, #8
 800772e:	e029      	b.n	8007784 <_scanf_float+0x188>
 8007730:	2b74      	cmp	r3, #116	; 0x74
 8007732:	d06f      	beq.n	8007814 <_scanf_float+0x218>
 8007734:	2b79      	cmp	r3, #121	; 0x79
 8007736:	e7f6      	b.n	8007726 <_scanf_float+0x12a>
 8007738:	6821      	ldr	r1, [r4, #0]
 800773a:	05c8      	lsls	r0, r1, #23
 800773c:	d51a      	bpl.n	8007774 <_scanf_float+0x178>
 800773e:	9b02      	ldr	r3, [sp, #8]
 8007740:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007744:	6021      	str	r1, [r4, #0]
 8007746:	f109 0901 	add.w	r9, r9, #1
 800774a:	b11b      	cbz	r3, 8007754 <_scanf_float+0x158>
 800774c:	3b01      	subs	r3, #1
 800774e:	3201      	adds	r2, #1
 8007750:	9302      	str	r3, [sp, #8]
 8007752:	60a2      	str	r2, [r4, #8]
 8007754:	68a3      	ldr	r3, [r4, #8]
 8007756:	3b01      	subs	r3, #1
 8007758:	60a3      	str	r3, [r4, #8]
 800775a:	6923      	ldr	r3, [r4, #16]
 800775c:	3301      	adds	r3, #1
 800775e:	6123      	str	r3, [r4, #16]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	3b01      	subs	r3, #1
 8007764:	2b00      	cmp	r3, #0
 8007766:	607b      	str	r3, [r7, #4]
 8007768:	f340 8084 	ble.w	8007874 <_scanf_float+0x278>
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	3301      	adds	r3, #1
 8007770:	603b      	str	r3, [r7, #0]
 8007772:	e766      	b.n	8007642 <_scanf_float+0x46>
 8007774:	eb1a 0f05 	cmn.w	sl, r5
 8007778:	f47f af70 	bne.w	800765c <_scanf_float+0x60>
 800777c:	6822      	ldr	r2, [r4, #0]
 800777e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007782:	6022      	str	r2, [r4, #0]
 8007784:	f806 3b01 	strb.w	r3, [r6], #1
 8007788:	e7e4      	b.n	8007754 <_scanf_float+0x158>
 800778a:	6822      	ldr	r2, [r4, #0]
 800778c:	0610      	lsls	r0, r2, #24
 800778e:	f57f af65 	bpl.w	800765c <_scanf_float+0x60>
 8007792:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007796:	e7f4      	b.n	8007782 <_scanf_float+0x186>
 8007798:	f1ba 0f00 	cmp.w	sl, #0
 800779c:	d10e      	bne.n	80077bc <_scanf_float+0x1c0>
 800779e:	f1b9 0f00 	cmp.w	r9, #0
 80077a2:	d10e      	bne.n	80077c2 <_scanf_float+0x1c6>
 80077a4:	6822      	ldr	r2, [r4, #0]
 80077a6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80077aa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80077ae:	d108      	bne.n	80077c2 <_scanf_float+0x1c6>
 80077b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80077b4:	6022      	str	r2, [r4, #0]
 80077b6:	f04f 0a01 	mov.w	sl, #1
 80077ba:	e7e3      	b.n	8007784 <_scanf_float+0x188>
 80077bc:	f1ba 0f02 	cmp.w	sl, #2
 80077c0:	d055      	beq.n	800786e <_scanf_float+0x272>
 80077c2:	2d01      	cmp	r5, #1
 80077c4:	d002      	beq.n	80077cc <_scanf_float+0x1d0>
 80077c6:	2d04      	cmp	r5, #4
 80077c8:	f47f af48 	bne.w	800765c <_scanf_float+0x60>
 80077cc:	3501      	adds	r5, #1
 80077ce:	b2ed      	uxtb	r5, r5
 80077d0:	e7d8      	b.n	8007784 <_scanf_float+0x188>
 80077d2:	f1ba 0f01 	cmp.w	sl, #1
 80077d6:	f47f af41 	bne.w	800765c <_scanf_float+0x60>
 80077da:	f04f 0a02 	mov.w	sl, #2
 80077de:	e7d1      	b.n	8007784 <_scanf_float+0x188>
 80077e0:	b97d      	cbnz	r5, 8007802 <_scanf_float+0x206>
 80077e2:	f1b9 0f00 	cmp.w	r9, #0
 80077e6:	f47f af3c 	bne.w	8007662 <_scanf_float+0x66>
 80077ea:	6822      	ldr	r2, [r4, #0]
 80077ec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80077f0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80077f4:	f47f af39 	bne.w	800766a <_scanf_float+0x6e>
 80077f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80077fc:	6022      	str	r2, [r4, #0]
 80077fe:	2501      	movs	r5, #1
 8007800:	e7c0      	b.n	8007784 <_scanf_float+0x188>
 8007802:	2d03      	cmp	r5, #3
 8007804:	d0e2      	beq.n	80077cc <_scanf_float+0x1d0>
 8007806:	2d05      	cmp	r5, #5
 8007808:	e7de      	b.n	80077c8 <_scanf_float+0x1cc>
 800780a:	2d02      	cmp	r5, #2
 800780c:	f47f af26 	bne.w	800765c <_scanf_float+0x60>
 8007810:	2503      	movs	r5, #3
 8007812:	e7b7      	b.n	8007784 <_scanf_float+0x188>
 8007814:	2d06      	cmp	r5, #6
 8007816:	f47f af21 	bne.w	800765c <_scanf_float+0x60>
 800781a:	2507      	movs	r5, #7
 800781c:	e7b2      	b.n	8007784 <_scanf_float+0x188>
 800781e:	6822      	ldr	r2, [r4, #0]
 8007820:	0591      	lsls	r1, r2, #22
 8007822:	f57f af1b 	bpl.w	800765c <_scanf_float+0x60>
 8007826:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800782a:	6022      	str	r2, [r4, #0]
 800782c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007830:	e7a8      	b.n	8007784 <_scanf_float+0x188>
 8007832:	6822      	ldr	r2, [r4, #0]
 8007834:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007838:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800783c:	d006      	beq.n	800784c <_scanf_float+0x250>
 800783e:	0550      	lsls	r0, r2, #21
 8007840:	f57f af0c 	bpl.w	800765c <_scanf_float+0x60>
 8007844:	f1b9 0f00 	cmp.w	r9, #0
 8007848:	f43f af0f 	beq.w	800766a <_scanf_float+0x6e>
 800784c:	0591      	lsls	r1, r2, #22
 800784e:	bf58      	it	pl
 8007850:	9901      	ldrpl	r1, [sp, #4]
 8007852:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007856:	bf58      	it	pl
 8007858:	eba9 0101 	subpl.w	r1, r9, r1
 800785c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007860:	bf58      	it	pl
 8007862:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007866:	6022      	str	r2, [r4, #0]
 8007868:	f04f 0900 	mov.w	r9, #0
 800786c:	e78a      	b.n	8007784 <_scanf_float+0x188>
 800786e:	f04f 0a03 	mov.w	sl, #3
 8007872:	e787      	b.n	8007784 <_scanf_float+0x188>
 8007874:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007878:	4639      	mov	r1, r7
 800787a:	4640      	mov	r0, r8
 800787c:	4798      	blx	r3
 800787e:	2800      	cmp	r0, #0
 8007880:	f43f aedf 	beq.w	8007642 <_scanf_float+0x46>
 8007884:	e6ea      	b.n	800765c <_scanf_float+0x60>
 8007886:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800788a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800788e:	463a      	mov	r2, r7
 8007890:	4640      	mov	r0, r8
 8007892:	4798      	blx	r3
 8007894:	6923      	ldr	r3, [r4, #16]
 8007896:	3b01      	subs	r3, #1
 8007898:	6123      	str	r3, [r4, #16]
 800789a:	e6ec      	b.n	8007676 <_scanf_float+0x7a>
 800789c:	1e6b      	subs	r3, r5, #1
 800789e:	2b06      	cmp	r3, #6
 80078a0:	d825      	bhi.n	80078ee <_scanf_float+0x2f2>
 80078a2:	2d02      	cmp	r5, #2
 80078a4:	d836      	bhi.n	8007914 <_scanf_float+0x318>
 80078a6:	455e      	cmp	r6, fp
 80078a8:	f67f aee8 	bls.w	800767c <_scanf_float+0x80>
 80078ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078b0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80078b4:	463a      	mov	r2, r7
 80078b6:	4640      	mov	r0, r8
 80078b8:	4798      	blx	r3
 80078ba:	6923      	ldr	r3, [r4, #16]
 80078bc:	3b01      	subs	r3, #1
 80078be:	6123      	str	r3, [r4, #16]
 80078c0:	e7f1      	b.n	80078a6 <_scanf_float+0x2aa>
 80078c2:	9802      	ldr	r0, [sp, #8]
 80078c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078c8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80078cc:	9002      	str	r0, [sp, #8]
 80078ce:	463a      	mov	r2, r7
 80078d0:	4640      	mov	r0, r8
 80078d2:	4798      	blx	r3
 80078d4:	6923      	ldr	r3, [r4, #16]
 80078d6:	3b01      	subs	r3, #1
 80078d8:	6123      	str	r3, [r4, #16]
 80078da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078de:	fa5f fa8a 	uxtb.w	sl, sl
 80078e2:	f1ba 0f02 	cmp.w	sl, #2
 80078e6:	d1ec      	bne.n	80078c2 <_scanf_float+0x2c6>
 80078e8:	3d03      	subs	r5, #3
 80078ea:	b2ed      	uxtb	r5, r5
 80078ec:	1b76      	subs	r6, r6, r5
 80078ee:	6823      	ldr	r3, [r4, #0]
 80078f0:	05da      	lsls	r2, r3, #23
 80078f2:	d52f      	bpl.n	8007954 <_scanf_float+0x358>
 80078f4:	055b      	lsls	r3, r3, #21
 80078f6:	d510      	bpl.n	800791a <_scanf_float+0x31e>
 80078f8:	455e      	cmp	r6, fp
 80078fa:	f67f aebf 	bls.w	800767c <_scanf_float+0x80>
 80078fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007902:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007906:	463a      	mov	r2, r7
 8007908:	4640      	mov	r0, r8
 800790a:	4798      	blx	r3
 800790c:	6923      	ldr	r3, [r4, #16]
 800790e:	3b01      	subs	r3, #1
 8007910:	6123      	str	r3, [r4, #16]
 8007912:	e7f1      	b.n	80078f8 <_scanf_float+0x2fc>
 8007914:	46aa      	mov	sl, r5
 8007916:	9602      	str	r6, [sp, #8]
 8007918:	e7df      	b.n	80078da <_scanf_float+0x2de>
 800791a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800791e:	6923      	ldr	r3, [r4, #16]
 8007920:	2965      	cmp	r1, #101	; 0x65
 8007922:	f103 33ff 	add.w	r3, r3, #4294967295
 8007926:	f106 35ff 	add.w	r5, r6, #4294967295
 800792a:	6123      	str	r3, [r4, #16]
 800792c:	d00c      	beq.n	8007948 <_scanf_float+0x34c>
 800792e:	2945      	cmp	r1, #69	; 0x45
 8007930:	d00a      	beq.n	8007948 <_scanf_float+0x34c>
 8007932:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007936:	463a      	mov	r2, r7
 8007938:	4640      	mov	r0, r8
 800793a:	4798      	blx	r3
 800793c:	6923      	ldr	r3, [r4, #16]
 800793e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007942:	3b01      	subs	r3, #1
 8007944:	1eb5      	subs	r5, r6, #2
 8007946:	6123      	str	r3, [r4, #16]
 8007948:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800794c:	463a      	mov	r2, r7
 800794e:	4640      	mov	r0, r8
 8007950:	4798      	blx	r3
 8007952:	462e      	mov	r6, r5
 8007954:	6825      	ldr	r5, [r4, #0]
 8007956:	f015 0510 	ands.w	r5, r5, #16
 800795a:	d158      	bne.n	8007a0e <_scanf_float+0x412>
 800795c:	7035      	strb	r5, [r6, #0]
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007968:	d11c      	bne.n	80079a4 <_scanf_float+0x3a8>
 800796a:	9b01      	ldr	r3, [sp, #4]
 800796c:	454b      	cmp	r3, r9
 800796e:	eba3 0209 	sub.w	r2, r3, r9
 8007972:	d124      	bne.n	80079be <_scanf_float+0x3c2>
 8007974:	2200      	movs	r2, #0
 8007976:	4659      	mov	r1, fp
 8007978:	4640      	mov	r0, r8
 800797a:	f7ff f8d5 	bl	8006b28 <_strtod_r>
 800797e:	9b03      	ldr	r3, [sp, #12]
 8007980:	6821      	ldr	r1, [r4, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f011 0f02 	tst.w	r1, #2
 8007988:	ec57 6b10 	vmov	r6, r7, d0
 800798c:	f103 0204 	add.w	r2, r3, #4
 8007990:	d020      	beq.n	80079d4 <_scanf_float+0x3d8>
 8007992:	9903      	ldr	r1, [sp, #12]
 8007994:	600a      	str	r2, [r1, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	e9c3 6700 	strd	r6, r7, [r3]
 800799c:	68e3      	ldr	r3, [r4, #12]
 800799e:	3301      	adds	r3, #1
 80079a0:	60e3      	str	r3, [r4, #12]
 80079a2:	e66c      	b.n	800767e <_scanf_float+0x82>
 80079a4:	9b04      	ldr	r3, [sp, #16]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d0e4      	beq.n	8007974 <_scanf_float+0x378>
 80079aa:	9905      	ldr	r1, [sp, #20]
 80079ac:	230a      	movs	r3, #10
 80079ae:	462a      	mov	r2, r5
 80079b0:	3101      	adds	r1, #1
 80079b2:	4640      	mov	r0, r8
 80079b4:	f7ff f9a6 	bl	8006d04 <_strtol_r>
 80079b8:	9b04      	ldr	r3, [sp, #16]
 80079ba:	9e05      	ldr	r6, [sp, #20]
 80079bc:	1ac2      	subs	r2, r0, r3
 80079be:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80079c2:	429e      	cmp	r6, r3
 80079c4:	bf28      	it	cs
 80079c6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80079ca:	4912      	ldr	r1, [pc, #72]	; (8007a14 <_scanf_float+0x418>)
 80079cc:	4630      	mov	r0, r6
 80079ce:	f000 f8e7 	bl	8007ba0 <siprintf>
 80079d2:	e7cf      	b.n	8007974 <_scanf_float+0x378>
 80079d4:	f011 0f04 	tst.w	r1, #4
 80079d8:	9903      	ldr	r1, [sp, #12]
 80079da:	600a      	str	r2, [r1, #0]
 80079dc:	d1db      	bne.n	8007996 <_scanf_float+0x39a>
 80079de:	f8d3 8000 	ldr.w	r8, [r3]
 80079e2:	ee10 2a10 	vmov	r2, s0
 80079e6:	ee10 0a10 	vmov	r0, s0
 80079ea:	463b      	mov	r3, r7
 80079ec:	4639      	mov	r1, r7
 80079ee:	f7f9 f8a5 	bl	8000b3c <__aeabi_dcmpun>
 80079f2:	b128      	cbz	r0, 8007a00 <_scanf_float+0x404>
 80079f4:	4808      	ldr	r0, [pc, #32]	; (8007a18 <_scanf_float+0x41c>)
 80079f6:	f000 f9f3 	bl	8007de0 <nanf>
 80079fa:	ed88 0a00 	vstr	s0, [r8]
 80079fe:	e7cd      	b.n	800799c <_scanf_float+0x3a0>
 8007a00:	4630      	mov	r0, r6
 8007a02:	4639      	mov	r1, r7
 8007a04:	f7f9 f8f8 	bl	8000bf8 <__aeabi_d2f>
 8007a08:	f8c8 0000 	str.w	r0, [r8]
 8007a0c:	e7c6      	b.n	800799c <_scanf_float+0x3a0>
 8007a0e:	2500      	movs	r5, #0
 8007a10:	e635      	b.n	800767e <_scanf_float+0x82>
 8007a12:	bf00      	nop
 8007a14:	0800aa15 	.word	0x0800aa15
 8007a18:	0800acb0 	.word	0x0800acb0

08007a1c <std>:
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	b510      	push	{r4, lr}
 8007a20:	4604      	mov	r4, r0
 8007a22:	e9c0 3300 	strd	r3, r3, [r0]
 8007a26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a2a:	6083      	str	r3, [r0, #8]
 8007a2c:	8181      	strh	r1, [r0, #12]
 8007a2e:	6643      	str	r3, [r0, #100]	; 0x64
 8007a30:	81c2      	strh	r2, [r0, #14]
 8007a32:	6183      	str	r3, [r0, #24]
 8007a34:	4619      	mov	r1, r3
 8007a36:	2208      	movs	r2, #8
 8007a38:	305c      	adds	r0, #92	; 0x5c
 8007a3a:	f000 f914 	bl	8007c66 <memset>
 8007a3e:	4b0d      	ldr	r3, [pc, #52]	; (8007a74 <std+0x58>)
 8007a40:	6263      	str	r3, [r4, #36]	; 0x24
 8007a42:	4b0d      	ldr	r3, [pc, #52]	; (8007a78 <std+0x5c>)
 8007a44:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a46:	4b0d      	ldr	r3, [pc, #52]	; (8007a7c <std+0x60>)
 8007a48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a4a:	4b0d      	ldr	r3, [pc, #52]	; (8007a80 <std+0x64>)
 8007a4c:	6323      	str	r3, [r4, #48]	; 0x30
 8007a4e:	4b0d      	ldr	r3, [pc, #52]	; (8007a84 <std+0x68>)
 8007a50:	6224      	str	r4, [r4, #32]
 8007a52:	429c      	cmp	r4, r3
 8007a54:	d006      	beq.n	8007a64 <std+0x48>
 8007a56:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007a5a:	4294      	cmp	r4, r2
 8007a5c:	d002      	beq.n	8007a64 <std+0x48>
 8007a5e:	33d0      	adds	r3, #208	; 0xd0
 8007a60:	429c      	cmp	r4, r3
 8007a62:	d105      	bne.n	8007a70 <std+0x54>
 8007a64:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a6c:	f000 b99c 	b.w	8007da8 <__retarget_lock_init_recursive>
 8007a70:	bd10      	pop	{r4, pc}
 8007a72:	bf00      	nop
 8007a74:	08007be1 	.word	0x08007be1
 8007a78:	08007c03 	.word	0x08007c03
 8007a7c:	08007c3b 	.word	0x08007c3b
 8007a80:	08007c5f 	.word	0x08007c5f
 8007a84:	200005dc 	.word	0x200005dc

08007a88 <stdio_exit_handler>:
 8007a88:	4a02      	ldr	r2, [pc, #8]	; (8007a94 <stdio_exit_handler+0xc>)
 8007a8a:	4903      	ldr	r1, [pc, #12]	; (8007a98 <stdio_exit_handler+0x10>)
 8007a8c:	4803      	ldr	r0, [pc, #12]	; (8007a9c <stdio_exit_handler+0x14>)
 8007a8e:	f000 b869 	b.w	8007b64 <_fwalk_sglue>
 8007a92:	bf00      	nop
 8007a94:	20000074 	.word	0x20000074
 8007a98:	0800a0e9 	.word	0x0800a0e9
 8007a9c:	200001ec 	.word	0x200001ec

08007aa0 <cleanup_stdio>:
 8007aa0:	6841      	ldr	r1, [r0, #4]
 8007aa2:	4b0c      	ldr	r3, [pc, #48]	; (8007ad4 <cleanup_stdio+0x34>)
 8007aa4:	4299      	cmp	r1, r3
 8007aa6:	b510      	push	{r4, lr}
 8007aa8:	4604      	mov	r4, r0
 8007aaa:	d001      	beq.n	8007ab0 <cleanup_stdio+0x10>
 8007aac:	f002 fb1c 	bl	800a0e8 <_fflush_r>
 8007ab0:	68a1      	ldr	r1, [r4, #8]
 8007ab2:	4b09      	ldr	r3, [pc, #36]	; (8007ad8 <cleanup_stdio+0x38>)
 8007ab4:	4299      	cmp	r1, r3
 8007ab6:	d002      	beq.n	8007abe <cleanup_stdio+0x1e>
 8007ab8:	4620      	mov	r0, r4
 8007aba:	f002 fb15 	bl	800a0e8 <_fflush_r>
 8007abe:	68e1      	ldr	r1, [r4, #12]
 8007ac0:	4b06      	ldr	r3, [pc, #24]	; (8007adc <cleanup_stdio+0x3c>)
 8007ac2:	4299      	cmp	r1, r3
 8007ac4:	d004      	beq.n	8007ad0 <cleanup_stdio+0x30>
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007acc:	f002 bb0c 	b.w	800a0e8 <_fflush_r>
 8007ad0:	bd10      	pop	{r4, pc}
 8007ad2:	bf00      	nop
 8007ad4:	200005dc 	.word	0x200005dc
 8007ad8:	20000644 	.word	0x20000644
 8007adc:	200006ac 	.word	0x200006ac

08007ae0 <global_stdio_init.part.0>:
 8007ae0:	b510      	push	{r4, lr}
 8007ae2:	4b0b      	ldr	r3, [pc, #44]	; (8007b10 <global_stdio_init.part.0+0x30>)
 8007ae4:	4c0b      	ldr	r4, [pc, #44]	; (8007b14 <global_stdio_init.part.0+0x34>)
 8007ae6:	4a0c      	ldr	r2, [pc, #48]	; (8007b18 <global_stdio_init.part.0+0x38>)
 8007ae8:	601a      	str	r2, [r3, #0]
 8007aea:	4620      	mov	r0, r4
 8007aec:	2200      	movs	r2, #0
 8007aee:	2104      	movs	r1, #4
 8007af0:	f7ff ff94 	bl	8007a1c <std>
 8007af4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007af8:	2201      	movs	r2, #1
 8007afa:	2109      	movs	r1, #9
 8007afc:	f7ff ff8e 	bl	8007a1c <std>
 8007b00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007b04:	2202      	movs	r2, #2
 8007b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b0a:	2112      	movs	r1, #18
 8007b0c:	f7ff bf86 	b.w	8007a1c <std>
 8007b10:	20000714 	.word	0x20000714
 8007b14:	200005dc 	.word	0x200005dc
 8007b18:	08007a89 	.word	0x08007a89

08007b1c <__sfp_lock_acquire>:
 8007b1c:	4801      	ldr	r0, [pc, #4]	; (8007b24 <__sfp_lock_acquire+0x8>)
 8007b1e:	f000 b944 	b.w	8007daa <__retarget_lock_acquire_recursive>
 8007b22:	bf00      	nop
 8007b24:	2000071d 	.word	0x2000071d

08007b28 <__sfp_lock_release>:
 8007b28:	4801      	ldr	r0, [pc, #4]	; (8007b30 <__sfp_lock_release+0x8>)
 8007b2a:	f000 b93f 	b.w	8007dac <__retarget_lock_release_recursive>
 8007b2e:	bf00      	nop
 8007b30:	2000071d 	.word	0x2000071d

08007b34 <__sinit>:
 8007b34:	b510      	push	{r4, lr}
 8007b36:	4604      	mov	r4, r0
 8007b38:	f7ff fff0 	bl	8007b1c <__sfp_lock_acquire>
 8007b3c:	6a23      	ldr	r3, [r4, #32]
 8007b3e:	b11b      	cbz	r3, 8007b48 <__sinit+0x14>
 8007b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b44:	f7ff bff0 	b.w	8007b28 <__sfp_lock_release>
 8007b48:	4b04      	ldr	r3, [pc, #16]	; (8007b5c <__sinit+0x28>)
 8007b4a:	6223      	str	r3, [r4, #32]
 8007b4c:	4b04      	ldr	r3, [pc, #16]	; (8007b60 <__sinit+0x2c>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1f5      	bne.n	8007b40 <__sinit+0xc>
 8007b54:	f7ff ffc4 	bl	8007ae0 <global_stdio_init.part.0>
 8007b58:	e7f2      	b.n	8007b40 <__sinit+0xc>
 8007b5a:	bf00      	nop
 8007b5c:	08007aa1 	.word	0x08007aa1
 8007b60:	20000714 	.word	0x20000714

08007b64 <_fwalk_sglue>:
 8007b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b68:	4607      	mov	r7, r0
 8007b6a:	4688      	mov	r8, r1
 8007b6c:	4614      	mov	r4, r2
 8007b6e:	2600      	movs	r6, #0
 8007b70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b74:	f1b9 0901 	subs.w	r9, r9, #1
 8007b78:	d505      	bpl.n	8007b86 <_fwalk_sglue+0x22>
 8007b7a:	6824      	ldr	r4, [r4, #0]
 8007b7c:	2c00      	cmp	r4, #0
 8007b7e:	d1f7      	bne.n	8007b70 <_fwalk_sglue+0xc>
 8007b80:	4630      	mov	r0, r6
 8007b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b86:	89ab      	ldrh	r3, [r5, #12]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d907      	bls.n	8007b9c <_fwalk_sglue+0x38>
 8007b8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b90:	3301      	adds	r3, #1
 8007b92:	d003      	beq.n	8007b9c <_fwalk_sglue+0x38>
 8007b94:	4629      	mov	r1, r5
 8007b96:	4638      	mov	r0, r7
 8007b98:	47c0      	blx	r8
 8007b9a:	4306      	orrs	r6, r0
 8007b9c:	3568      	adds	r5, #104	; 0x68
 8007b9e:	e7e9      	b.n	8007b74 <_fwalk_sglue+0x10>

08007ba0 <siprintf>:
 8007ba0:	b40e      	push	{r1, r2, r3}
 8007ba2:	b500      	push	{lr}
 8007ba4:	b09c      	sub	sp, #112	; 0x70
 8007ba6:	ab1d      	add	r3, sp, #116	; 0x74
 8007ba8:	9002      	str	r0, [sp, #8]
 8007baa:	9006      	str	r0, [sp, #24]
 8007bac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007bb0:	4809      	ldr	r0, [pc, #36]	; (8007bd8 <siprintf+0x38>)
 8007bb2:	9107      	str	r1, [sp, #28]
 8007bb4:	9104      	str	r1, [sp, #16]
 8007bb6:	4909      	ldr	r1, [pc, #36]	; (8007bdc <siprintf+0x3c>)
 8007bb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bbc:	9105      	str	r1, [sp, #20]
 8007bbe:	6800      	ldr	r0, [r0, #0]
 8007bc0:	9301      	str	r3, [sp, #4]
 8007bc2:	a902      	add	r1, sp, #8
 8007bc4:	f002 f90c 	bl	8009de0 <_svfiprintf_r>
 8007bc8:	9b02      	ldr	r3, [sp, #8]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	701a      	strb	r2, [r3, #0]
 8007bce:	b01c      	add	sp, #112	; 0x70
 8007bd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bd4:	b003      	add	sp, #12
 8007bd6:	4770      	bx	lr
 8007bd8:	20000238 	.word	0x20000238
 8007bdc:	ffff0208 	.word	0xffff0208

08007be0 <__sread>:
 8007be0:	b510      	push	{r4, lr}
 8007be2:	460c      	mov	r4, r1
 8007be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be8:	f000 f890 	bl	8007d0c <_read_r>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	bfab      	itete	ge
 8007bf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007bf2:	89a3      	ldrhlt	r3, [r4, #12]
 8007bf4:	181b      	addge	r3, r3, r0
 8007bf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007bfa:	bfac      	ite	ge
 8007bfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007bfe:	81a3      	strhlt	r3, [r4, #12]
 8007c00:	bd10      	pop	{r4, pc}

08007c02 <__swrite>:
 8007c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c06:	461f      	mov	r7, r3
 8007c08:	898b      	ldrh	r3, [r1, #12]
 8007c0a:	05db      	lsls	r3, r3, #23
 8007c0c:	4605      	mov	r5, r0
 8007c0e:	460c      	mov	r4, r1
 8007c10:	4616      	mov	r6, r2
 8007c12:	d505      	bpl.n	8007c20 <__swrite+0x1e>
 8007c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c18:	2302      	movs	r3, #2
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f000 f864 	bl	8007ce8 <_lseek_r>
 8007c20:	89a3      	ldrh	r3, [r4, #12]
 8007c22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c2a:	81a3      	strh	r3, [r4, #12]
 8007c2c:	4632      	mov	r2, r6
 8007c2e:	463b      	mov	r3, r7
 8007c30:	4628      	mov	r0, r5
 8007c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c36:	f000 b87b 	b.w	8007d30 <_write_r>

08007c3a <__sseek>:
 8007c3a:	b510      	push	{r4, lr}
 8007c3c:	460c      	mov	r4, r1
 8007c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c42:	f000 f851 	bl	8007ce8 <_lseek_r>
 8007c46:	1c43      	adds	r3, r0, #1
 8007c48:	89a3      	ldrh	r3, [r4, #12]
 8007c4a:	bf15      	itete	ne
 8007c4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c56:	81a3      	strheq	r3, [r4, #12]
 8007c58:	bf18      	it	ne
 8007c5a:	81a3      	strhne	r3, [r4, #12]
 8007c5c:	bd10      	pop	{r4, pc}

08007c5e <__sclose>:
 8007c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c62:	f000 b831 	b.w	8007cc8 <_close_r>

08007c66 <memset>:
 8007c66:	4402      	add	r2, r0
 8007c68:	4603      	mov	r3, r0
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d100      	bne.n	8007c70 <memset+0xa>
 8007c6e:	4770      	bx	lr
 8007c70:	f803 1b01 	strb.w	r1, [r3], #1
 8007c74:	e7f9      	b.n	8007c6a <memset+0x4>

08007c76 <strncmp>:
 8007c76:	b510      	push	{r4, lr}
 8007c78:	b16a      	cbz	r2, 8007c96 <strncmp+0x20>
 8007c7a:	3901      	subs	r1, #1
 8007c7c:	1884      	adds	r4, r0, r2
 8007c7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c82:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d103      	bne.n	8007c92 <strncmp+0x1c>
 8007c8a:	42a0      	cmp	r0, r4
 8007c8c:	d001      	beq.n	8007c92 <strncmp+0x1c>
 8007c8e:	2a00      	cmp	r2, #0
 8007c90:	d1f5      	bne.n	8007c7e <strncmp+0x8>
 8007c92:	1ad0      	subs	r0, r2, r3
 8007c94:	bd10      	pop	{r4, pc}
 8007c96:	4610      	mov	r0, r2
 8007c98:	e7fc      	b.n	8007c94 <strncmp+0x1e>

08007c9a <strncpy>:
 8007c9a:	b510      	push	{r4, lr}
 8007c9c:	3901      	subs	r1, #1
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	b132      	cbz	r2, 8007cb0 <strncpy+0x16>
 8007ca2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007ca6:	f803 4b01 	strb.w	r4, [r3], #1
 8007caa:	3a01      	subs	r2, #1
 8007cac:	2c00      	cmp	r4, #0
 8007cae:	d1f7      	bne.n	8007ca0 <strncpy+0x6>
 8007cb0:	441a      	add	r2, r3
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d100      	bne.n	8007cba <strncpy+0x20>
 8007cb8:	bd10      	pop	{r4, pc}
 8007cba:	f803 1b01 	strb.w	r1, [r3], #1
 8007cbe:	e7f9      	b.n	8007cb4 <strncpy+0x1a>

08007cc0 <_localeconv_r>:
 8007cc0:	4800      	ldr	r0, [pc, #0]	; (8007cc4 <_localeconv_r+0x4>)
 8007cc2:	4770      	bx	lr
 8007cc4:	20000170 	.word	0x20000170

08007cc8 <_close_r>:
 8007cc8:	b538      	push	{r3, r4, r5, lr}
 8007cca:	4d06      	ldr	r5, [pc, #24]	; (8007ce4 <_close_r+0x1c>)
 8007ccc:	2300      	movs	r3, #0
 8007cce:	4604      	mov	r4, r0
 8007cd0:	4608      	mov	r0, r1
 8007cd2:	602b      	str	r3, [r5, #0]
 8007cd4:	f7fb f8e5 	bl	8002ea2 <_close>
 8007cd8:	1c43      	adds	r3, r0, #1
 8007cda:	d102      	bne.n	8007ce2 <_close_r+0x1a>
 8007cdc:	682b      	ldr	r3, [r5, #0]
 8007cde:	b103      	cbz	r3, 8007ce2 <_close_r+0x1a>
 8007ce0:	6023      	str	r3, [r4, #0]
 8007ce2:	bd38      	pop	{r3, r4, r5, pc}
 8007ce4:	20000718 	.word	0x20000718

08007ce8 <_lseek_r>:
 8007ce8:	b538      	push	{r3, r4, r5, lr}
 8007cea:	4d07      	ldr	r5, [pc, #28]	; (8007d08 <_lseek_r+0x20>)
 8007cec:	4604      	mov	r4, r0
 8007cee:	4608      	mov	r0, r1
 8007cf0:	4611      	mov	r1, r2
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	602a      	str	r2, [r5, #0]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	f7fb f8fa 	bl	8002ef0 <_lseek>
 8007cfc:	1c43      	adds	r3, r0, #1
 8007cfe:	d102      	bne.n	8007d06 <_lseek_r+0x1e>
 8007d00:	682b      	ldr	r3, [r5, #0]
 8007d02:	b103      	cbz	r3, 8007d06 <_lseek_r+0x1e>
 8007d04:	6023      	str	r3, [r4, #0]
 8007d06:	bd38      	pop	{r3, r4, r5, pc}
 8007d08:	20000718 	.word	0x20000718

08007d0c <_read_r>:
 8007d0c:	b538      	push	{r3, r4, r5, lr}
 8007d0e:	4d07      	ldr	r5, [pc, #28]	; (8007d2c <_read_r+0x20>)
 8007d10:	4604      	mov	r4, r0
 8007d12:	4608      	mov	r0, r1
 8007d14:	4611      	mov	r1, r2
 8007d16:	2200      	movs	r2, #0
 8007d18:	602a      	str	r2, [r5, #0]
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	f7fb f888 	bl	8002e30 <_read>
 8007d20:	1c43      	adds	r3, r0, #1
 8007d22:	d102      	bne.n	8007d2a <_read_r+0x1e>
 8007d24:	682b      	ldr	r3, [r5, #0]
 8007d26:	b103      	cbz	r3, 8007d2a <_read_r+0x1e>
 8007d28:	6023      	str	r3, [r4, #0]
 8007d2a:	bd38      	pop	{r3, r4, r5, pc}
 8007d2c:	20000718 	.word	0x20000718

08007d30 <_write_r>:
 8007d30:	b538      	push	{r3, r4, r5, lr}
 8007d32:	4d07      	ldr	r5, [pc, #28]	; (8007d50 <_write_r+0x20>)
 8007d34:	4604      	mov	r4, r0
 8007d36:	4608      	mov	r0, r1
 8007d38:	4611      	mov	r1, r2
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	602a      	str	r2, [r5, #0]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	f7fb f893 	bl	8002e6a <_write>
 8007d44:	1c43      	adds	r3, r0, #1
 8007d46:	d102      	bne.n	8007d4e <_write_r+0x1e>
 8007d48:	682b      	ldr	r3, [r5, #0]
 8007d4a:	b103      	cbz	r3, 8007d4e <_write_r+0x1e>
 8007d4c:	6023      	str	r3, [r4, #0]
 8007d4e:	bd38      	pop	{r3, r4, r5, pc}
 8007d50:	20000718 	.word	0x20000718

08007d54 <__errno>:
 8007d54:	4b01      	ldr	r3, [pc, #4]	; (8007d5c <__errno+0x8>)
 8007d56:	6818      	ldr	r0, [r3, #0]
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	20000238 	.word	0x20000238

08007d60 <__libc_init_array>:
 8007d60:	b570      	push	{r4, r5, r6, lr}
 8007d62:	4d0d      	ldr	r5, [pc, #52]	; (8007d98 <__libc_init_array+0x38>)
 8007d64:	4c0d      	ldr	r4, [pc, #52]	; (8007d9c <__libc_init_array+0x3c>)
 8007d66:	1b64      	subs	r4, r4, r5
 8007d68:	10a4      	asrs	r4, r4, #2
 8007d6a:	2600      	movs	r6, #0
 8007d6c:	42a6      	cmp	r6, r4
 8007d6e:	d109      	bne.n	8007d84 <__libc_init_array+0x24>
 8007d70:	4d0b      	ldr	r5, [pc, #44]	; (8007da0 <__libc_init_array+0x40>)
 8007d72:	4c0c      	ldr	r4, [pc, #48]	; (8007da4 <__libc_init_array+0x44>)
 8007d74:	f002 fd30 	bl	800a7d8 <_init>
 8007d78:	1b64      	subs	r4, r4, r5
 8007d7a:	10a4      	asrs	r4, r4, #2
 8007d7c:	2600      	movs	r6, #0
 8007d7e:	42a6      	cmp	r6, r4
 8007d80:	d105      	bne.n	8007d8e <__libc_init_array+0x2e>
 8007d82:	bd70      	pop	{r4, r5, r6, pc}
 8007d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d88:	4798      	blx	r3
 8007d8a:	3601      	adds	r6, #1
 8007d8c:	e7ee      	b.n	8007d6c <__libc_init_array+0xc>
 8007d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d92:	4798      	blx	r3
 8007d94:	3601      	adds	r6, #1
 8007d96:	e7f2      	b.n	8007d7e <__libc_init_array+0x1e>
 8007d98:	0800acbc 	.word	0x0800acbc
 8007d9c:	0800acbc 	.word	0x0800acbc
 8007da0:	0800acbc 	.word	0x0800acbc
 8007da4:	0800acc0 	.word	0x0800acc0

08007da8 <__retarget_lock_init_recursive>:
 8007da8:	4770      	bx	lr

08007daa <__retarget_lock_acquire_recursive>:
 8007daa:	4770      	bx	lr

08007dac <__retarget_lock_release_recursive>:
 8007dac:	4770      	bx	lr

08007dae <memcpy>:
 8007dae:	440a      	add	r2, r1
 8007db0:	4291      	cmp	r1, r2
 8007db2:	f100 33ff 	add.w	r3, r0, #4294967295
 8007db6:	d100      	bne.n	8007dba <memcpy+0xc>
 8007db8:	4770      	bx	lr
 8007dba:	b510      	push	{r4, lr}
 8007dbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dc4:	4291      	cmp	r1, r2
 8007dc6:	d1f9      	bne.n	8007dbc <memcpy+0xe>
 8007dc8:	bd10      	pop	{r4, pc}
 8007dca:	0000      	movs	r0, r0
 8007dcc:	0000      	movs	r0, r0
	...

08007dd0 <nan>:
 8007dd0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007dd8 <nan+0x8>
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop
 8007dd8:	00000000 	.word	0x00000000
 8007ddc:	7ff80000 	.word	0x7ff80000

08007de0 <nanf>:
 8007de0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007de8 <nanf+0x8>
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	7fc00000 	.word	0x7fc00000

08007dec <quorem>:
 8007dec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df0:	6903      	ldr	r3, [r0, #16]
 8007df2:	690c      	ldr	r4, [r1, #16]
 8007df4:	42a3      	cmp	r3, r4
 8007df6:	4607      	mov	r7, r0
 8007df8:	db7e      	blt.n	8007ef8 <quorem+0x10c>
 8007dfa:	3c01      	subs	r4, #1
 8007dfc:	f101 0814 	add.w	r8, r1, #20
 8007e00:	f100 0514 	add.w	r5, r0, #20
 8007e04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e08:	9301      	str	r3, [sp, #4]
 8007e0a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e12:	3301      	adds	r3, #1
 8007e14:	429a      	cmp	r2, r3
 8007e16:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e1a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e1e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e22:	d331      	bcc.n	8007e88 <quorem+0x9c>
 8007e24:	f04f 0e00 	mov.w	lr, #0
 8007e28:	4640      	mov	r0, r8
 8007e2a:	46ac      	mov	ip, r5
 8007e2c:	46f2      	mov	sl, lr
 8007e2e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e32:	b293      	uxth	r3, r2
 8007e34:	fb06 e303 	mla	r3, r6, r3, lr
 8007e38:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007e3c:	0c1a      	lsrs	r2, r3, #16
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	ebaa 0303 	sub.w	r3, sl, r3
 8007e44:	f8dc a000 	ldr.w	sl, [ip]
 8007e48:	fa13 f38a 	uxtah	r3, r3, sl
 8007e4c:	fb06 220e 	mla	r2, r6, lr, r2
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	9b00      	ldr	r3, [sp, #0]
 8007e54:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007e58:	b292      	uxth	r2, r2
 8007e5a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007e5e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e62:	f8bd 3000 	ldrh.w	r3, [sp]
 8007e66:	4581      	cmp	r9, r0
 8007e68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e6c:	f84c 3b04 	str.w	r3, [ip], #4
 8007e70:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007e74:	d2db      	bcs.n	8007e2e <quorem+0x42>
 8007e76:	f855 300b 	ldr.w	r3, [r5, fp]
 8007e7a:	b92b      	cbnz	r3, 8007e88 <quorem+0x9c>
 8007e7c:	9b01      	ldr	r3, [sp, #4]
 8007e7e:	3b04      	subs	r3, #4
 8007e80:	429d      	cmp	r5, r3
 8007e82:	461a      	mov	r2, r3
 8007e84:	d32c      	bcc.n	8007ee0 <quorem+0xf4>
 8007e86:	613c      	str	r4, [r7, #16]
 8007e88:	4638      	mov	r0, r7
 8007e8a:	f001 fd5b 	bl	8009944 <__mcmp>
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	db22      	blt.n	8007ed8 <quorem+0xec>
 8007e92:	3601      	adds	r6, #1
 8007e94:	4629      	mov	r1, r5
 8007e96:	2000      	movs	r0, #0
 8007e98:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e9c:	f8d1 c000 	ldr.w	ip, [r1]
 8007ea0:	b293      	uxth	r3, r2
 8007ea2:	1ac3      	subs	r3, r0, r3
 8007ea4:	0c12      	lsrs	r2, r2, #16
 8007ea6:	fa13 f38c 	uxtah	r3, r3, ip
 8007eaa:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007eae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007eb8:	45c1      	cmp	r9, r8
 8007eba:	f841 3b04 	str.w	r3, [r1], #4
 8007ebe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007ec2:	d2e9      	bcs.n	8007e98 <quorem+0xac>
 8007ec4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ec8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ecc:	b922      	cbnz	r2, 8007ed8 <quorem+0xec>
 8007ece:	3b04      	subs	r3, #4
 8007ed0:	429d      	cmp	r5, r3
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	d30a      	bcc.n	8007eec <quorem+0x100>
 8007ed6:	613c      	str	r4, [r7, #16]
 8007ed8:	4630      	mov	r0, r6
 8007eda:	b003      	add	sp, #12
 8007edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee0:	6812      	ldr	r2, [r2, #0]
 8007ee2:	3b04      	subs	r3, #4
 8007ee4:	2a00      	cmp	r2, #0
 8007ee6:	d1ce      	bne.n	8007e86 <quorem+0x9a>
 8007ee8:	3c01      	subs	r4, #1
 8007eea:	e7c9      	b.n	8007e80 <quorem+0x94>
 8007eec:	6812      	ldr	r2, [r2, #0]
 8007eee:	3b04      	subs	r3, #4
 8007ef0:	2a00      	cmp	r2, #0
 8007ef2:	d1f0      	bne.n	8007ed6 <quorem+0xea>
 8007ef4:	3c01      	subs	r4, #1
 8007ef6:	e7eb      	b.n	8007ed0 <quorem+0xe4>
 8007ef8:	2000      	movs	r0, #0
 8007efa:	e7ee      	b.n	8007eda <quorem+0xee>
 8007efc:	0000      	movs	r0, r0
	...

08007f00 <_dtoa_r>:
 8007f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f04:	ed2d 8b04 	vpush	{d8-d9}
 8007f08:	69c5      	ldr	r5, [r0, #28]
 8007f0a:	b093      	sub	sp, #76	; 0x4c
 8007f0c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007f10:	ec57 6b10 	vmov	r6, r7, d0
 8007f14:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f18:	9107      	str	r1, [sp, #28]
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	920a      	str	r2, [sp, #40]	; 0x28
 8007f1e:	930d      	str	r3, [sp, #52]	; 0x34
 8007f20:	b975      	cbnz	r5, 8007f40 <_dtoa_r+0x40>
 8007f22:	2010      	movs	r0, #16
 8007f24:	f001 f982 	bl	800922c <malloc>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	61e0      	str	r0, [r4, #28]
 8007f2c:	b920      	cbnz	r0, 8007f38 <_dtoa_r+0x38>
 8007f2e:	4bae      	ldr	r3, [pc, #696]	; (80081e8 <_dtoa_r+0x2e8>)
 8007f30:	21ef      	movs	r1, #239	; 0xef
 8007f32:	48ae      	ldr	r0, [pc, #696]	; (80081ec <_dtoa_r+0x2ec>)
 8007f34:	f002 f92a 	bl	800a18c <__assert_func>
 8007f38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f3c:	6005      	str	r5, [r0, #0]
 8007f3e:	60c5      	str	r5, [r0, #12]
 8007f40:	69e3      	ldr	r3, [r4, #28]
 8007f42:	6819      	ldr	r1, [r3, #0]
 8007f44:	b151      	cbz	r1, 8007f5c <_dtoa_r+0x5c>
 8007f46:	685a      	ldr	r2, [r3, #4]
 8007f48:	604a      	str	r2, [r1, #4]
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	4093      	lsls	r3, r2
 8007f4e:	608b      	str	r3, [r1, #8]
 8007f50:	4620      	mov	r0, r4
 8007f52:	f001 fa71 	bl	8009438 <_Bfree>
 8007f56:	69e3      	ldr	r3, [r4, #28]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	601a      	str	r2, [r3, #0]
 8007f5c:	1e3b      	subs	r3, r7, #0
 8007f5e:	bfbb      	ittet	lt
 8007f60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007f64:	9303      	strlt	r3, [sp, #12]
 8007f66:	2300      	movge	r3, #0
 8007f68:	2201      	movlt	r2, #1
 8007f6a:	bfac      	ite	ge
 8007f6c:	f8c8 3000 	strge.w	r3, [r8]
 8007f70:	f8c8 2000 	strlt.w	r2, [r8]
 8007f74:	4b9e      	ldr	r3, [pc, #632]	; (80081f0 <_dtoa_r+0x2f0>)
 8007f76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007f7a:	ea33 0308 	bics.w	r3, r3, r8
 8007f7e:	d11b      	bne.n	8007fb8 <_dtoa_r+0xb8>
 8007f80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f82:	f242 730f 	movw	r3, #9999	; 0x270f
 8007f86:	6013      	str	r3, [r2, #0]
 8007f88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007f8c:	4333      	orrs	r3, r6
 8007f8e:	f000 8593 	beq.w	8008ab8 <_dtoa_r+0xbb8>
 8007f92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f94:	b963      	cbnz	r3, 8007fb0 <_dtoa_r+0xb0>
 8007f96:	4b97      	ldr	r3, [pc, #604]	; (80081f4 <_dtoa_r+0x2f4>)
 8007f98:	e027      	b.n	8007fea <_dtoa_r+0xea>
 8007f9a:	4b97      	ldr	r3, [pc, #604]	; (80081f8 <_dtoa_r+0x2f8>)
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	3308      	adds	r3, #8
 8007fa0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007fa2:	6013      	str	r3, [r2, #0]
 8007fa4:	9800      	ldr	r0, [sp, #0]
 8007fa6:	b013      	add	sp, #76	; 0x4c
 8007fa8:	ecbd 8b04 	vpop	{d8-d9}
 8007fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb0:	4b90      	ldr	r3, [pc, #576]	; (80081f4 <_dtoa_r+0x2f4>)
 8007fb2:	9300      	str	r3, [sp, #0]
 8007fb4:	3303      	adds	r3, #3
 8007fb6:	e7f3      	b.n	8007fa0 <_dtoa_r+0xa0>
 8007fb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	ec51 0b17 	vmov	r0, r1, d7
 8007fc2:	eeb0 8a47 	vmov.f32	s16, s14
 8007fc6:	eef0 8a67 	vmov.f32	s17, s15
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f7f8 fd84 	bl	8000ad8 <__aeabi_dcmpeq>
 8007fd0:	4681      	mov	r9, r0
 8007fd2:	b160      	cbz	r0, 8007fee <_dtoa_r+0xee>
 8007fd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	6013      	str	r3, [r2, #0]
 8007fda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f000 8568 	beq.w	8008ab2 <_dtoa_r+0xbb2>
 8007fe2:	4b86      	ldr	r3, [pc, #536]	; (80081fc <_dtoa_r+0x2fc>)
 8007fe4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007fe6:	6013      	str	r3, [r2, #0]
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	9300      	str	r3, [sp, #0]
 8007fec:	e7da      	b.n	8007fa4 <_dtoa_r+0xa4>
 8007fee:	aa10      	add	r2, sp, #64	; 0x40
 8007ff0:	a911      	add	r1, sp, #68	; 0x44
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	eeb0 0a48 	vmov.f32	s0, s16
 8007ff8:	eef0 0a68 	vmov.f32	s1, s17
 8007ffc:	f001 fdb8 	bl	8009b70 <__d2b>
 8008000:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008004:	4682      	mov	sl, r0
 8008006:	2d00      	cmp	r5, #0
 8008008:	d07f      	beq.n	800810a <_dtoa_r+0x20a>
 800800a:	ee18 3a90 	vmov	r3, s17
 800800e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008012:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008016:	ec51 0b18 	vmov	r0, r1, d8
 800801a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800801e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008022:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008026:	4619      	mov	r1, r3
 8008028:	2200      	movs	r2, #0
 800802a:	4b75      	ldr	r3, [pc, #468]	; (8008200 <_dtoa_r+0x300>)
 800802c:	f7f8 f934 	bl	8000298 <__aeabi_dsub>
 8008030:	a367      	add	r3, pc, #412	; (adr r3, 80081d0 <_dtoa_r+0x2d0>)
 8008032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008036:	f7f8 fae7 	bl	8000608 <__aeabi_dmul>
 800803a:	a367      	add	r3, pc, #412	; (adr r3, 80081d8 <_dtoa_r+0x2d8>)
 800803c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008040:	f7f8 f92c 	bl	800029c <__adddf3>
 8008044:	4606      	mov	r6, r0
 8008046:	4628      	mov	r0, r5
 8008048:	460f      	mov	r7, r1
 800804a:	f7f8 fa73 	bl	8000534 <__aeabi_i2d>
 800804e:	a364      	add	r3, pc, #400	; (adr r3, 80081e0 <_dtoa_r+0x2e0>)
 8008050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008054:	f7f8 fad8 	bl	8000608 <__aeabi_dmul>
 8008058:	4602      	mov	r2, r0
 800805a:	460b      	mov	r3, r1
 800805c:	4630      	mov	r0, r6
 800805e:	4639      	mov	r1, r7
 8008060:	f7f8 f91c 	bl	800029c <__adddf3>
 8008064:	4606      	mov	r6, r0
 8008066:	460f      	mov	r7, r1
 8008068:	f7f8 fd7e 	bl	8000b68 <__aeabi_d2iz>
 800806c:	2200      	movs	r2, #0
 800806e:	4683      	mov	fp, r0
 8008070:	2300      	movs	r3, #0
 8008072:	4630      	mov	r0, r6
 8008074:	4639      	mov	r1, r7
 8008076:	f7f8 fd39 	bl	8000aec <__aeabi_dcmplt>
 800807a:	b148      	cbz	r0, 8008090 <_dtoa_r+0x190>
 800807c:	4658      	mov	r0, fp
 800807e:	f7f8 fa59 	bl	8000534 <__aeabi_i2d>
 8008082:	4632      	mov	r2, r6
 8008084:	463b      	mov	r3, r7
 8008086:	f7f8 fd27 	bl	8000ad8 <__aeabi_dcmpeq>
 800808a:	b908      	cbnz	r0, 8008090 <_dtoa_r+0x190>
 800808c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008090:	f1bb 0f16 	cmp.w	fp, #22
 8008094:	d857      	bhi.n	8008146 <_dtoa_r+0x246>
 8008096:	4b5b      	ldr	r3, [pc, #364]	; (8008204 <_dtoa_r+0x304>)
 8008098:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800809c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a0:	ec51 0b18 	vmov	r0, r1, d8
 80080a4:	f7f8 fd22 	bl	8000aec <__aeabi_dcmplt>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d04e      	beq.n	800814a <_dtoa_r+0x24a>
 80080ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80080b0:	2300      	movs	r3, #0
 80080b2:	930c      	str	r3, [sp, #48]	; 0x30
 80080b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080b6:	1b5b      	subs	r3, r3, r5
 80080b8:	1e5a      	subs	r2, r3, #1
 80080ba:	bf45      	ittet	mi
 80080bc:	f1c3 0301 	rsbmi	r3, r3, #1
 80080c0:	9305      	strmi	r3, [sp, #20]
 80080c2:	2300      	movpl	r3, #0
 80080c4:	2300      	movmi	r3, #0
 80080c6:	9206      	str	r2, [sp, #24]
 80080c8:	bf54      	ite	pl
 80080ca:	9305      	strpl	r3, [sp, #20]
 80080cc:	9306      	strmi	r3, [sp, #24]
 80080ce:	f1bb 0f00 	cmp.w	fp, #0
 80080d2:	db3c      	blt.n	800814e <_dtoa_r+0x24e>
 80080d4:	9b06      	ldr	r3, [sp, #24]
 80080d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80080da:	445b      	add	r3, fp
 80080dc:	9306      	str	r3, [sp, #24]
 80080de:	2300      	movs	r3, #0
 80080e0:	9308      	str	r3, [sp, #32]
 80080e2:	9b07      	ldr	r3, [sp, #28]
 80080e4:	2b09      	cmp	r3, #9
 80080e6:	d868      	bhi.n	80081ba <_dtoa_r+0x2ba>
 80080e8:	2b05      	cmp	r3, #5
 80080ea:	bfc4      	itt	gt
 80080ec:	3b04      	subgt	r3, #4
 80080ee:	9307      	strgt	r3, [sp, #28]
 80080f0:	9b07      	ldr	r3, [sp, #28]
 80080f2:	f1a3 0302 	sub.w	r3, r3, #2
 80080f6:	bfcc      	ite	gt
 80080f8:	2500      	movgt	r5, #0
 80080fa:	2501      	movle	r5, #1
 80080fc:	2b03      	cmp	r3, #3
 80080fe:	f200 8085 	bhi.w	800820c <_dtoa_r+0x30c>
 8008102:	e8df f003 	tbb	[pc, r3]
 8008106:	3b2e      	.short	0x3b2e
 8008108:	5839      	.short	0x5839
 800810a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800810e:	441d      	add	r5, r3
 8008110:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008114:	2b20      	cmp	r3, #32
 8008116:	bfc1      	itttt	gt
 8008118:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800811c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008120:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008124:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008128:	bfd6      	itet	le
 800812a:	f1c3 0320 	rsble	r3, r3, #32
 800812e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008132:	fa06 f003 	lslle.w	r0, r6, r3
 8008136:	f7f8 f9ed 	bl	8000514 <__aeabi_ui2d>
 800813a:	2201      	movs	r2, #1
 800813c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008140:	3d01      	subs	r5, #1
 8008142:	920e      	str	r2, [sp, #56]	; 0x38
 8008144:	e76f      	b.n	8008026 <_dtoa_r+0x126>
 8008146:	2301      	movs	r3, #1
 8008148:	e7b3      	b.n	80080b2 <_dtoa_r+0x1b2>
 800814a:	900c      	str	r0, [sp, #48]	; 0x30
 800814c:	e7b2      	b.n	80080b4 <_dtoa_r+0x1b4>
 800814e:	9b05      	ldr	r3, [sp, #20]
 8008150:	eba3 030b 	sub.w	r3, r3, fp
 8008154:	9305      	str	r3, [sp, #20]
 8008156:	f1cb 0300 	rsb	r3, fp, #0
 800815a:	9308      	str	r3, [sp, #32]
 800815c:	2300      	movs	r3, #0
 800815e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008160:	e7bf      	b.n	80080e2 <_dtoa_r+0x1e2>
 8008162:	2300      	movs	r3, #0
 8008164:	9309      	str	r3, [sp, #36]	; 0x24
 8008166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008168:	2b00      	cmp	r3, #0
 800816a:	dc52      	bgt.n	8008212 <_dtoa_r+0x312>
 800816c:	2301      	movs	r3, #1
 800816e:	9301      	str	r3, [sp, #4]
 8008170:	9304      	str	r3, [sp, #16]
 8008172:	461a      	mov	r2, r3
 8008174:	920a      	str	r2, [sp, #40]	; 0x28
 8008176:	e00b      	b.n	8008190 <_dtoa_r+0x290>
 8008178:	2301      	movs	r3, #1
 800817a:	e7f3      	b.n	8008164 <_dtoa_r+0x264>
 800817c:	2300      	movs	r3, #0
 800817e:	9309      	str	r3, [sp, #36]	; 0x24
 8008180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008182:	445b      	add	r3, fp
 8008184:	9301      	str	r3, [sp, #4]
 8008186:	3301      	adds	r3, #1
 8008188:	2b01      	cmp	r3, #1
 800818a:	9304      	str	r3, [sp, #16]
 800818c:	bfb8      	it	lt
 800818e:	2301      	movlt	r3, #1
 8008190:	69e0      	ldr	r0, [r4, #28]
 8008192:	2100      	movs	r1, #0
 8008194:	2204      	movs	r2, #4
 8008196:	f102 0614 	add.w	r6, r2, #20
 800819a:	429e      	cmp	r6, r3
 800819c:	d93d      	bls.n	800821a <_dtoa_r+0x31a>
 800819e:	6041      	str	r1, [r0, #4]
 80081a0:	4620      	mov	r0, r4
 80081a2:	f001 f909 	bl	80093b8 <_Balloc>
 80081a6:	9000      	str	r0, [sp, #0]
 80081a8:	2800      	cmp	r0, #0
 80081aa:	d139      	bne.n	8008220 <_dtoa_r+0x320>
 80081ac:	4b16      	ldr	r3, [pc, #88]	; (8008208 <_dtoa_r+0x308>)
 80081ae:	4602      	mov	r2, r0
 80081b0:	f240 11af 	movw	r1, #431	; 0x1af
 80081b4:	e6bd      	b.n	8007f32 <_dtoa_r+0x32>
 80081b6:	2301      	movs	r3, #1
 80081b8:	e7e1      	b.n	800817e <_dtoa_r+0x27e>
 80081ba:	2501      	movs	r5, #1
 80081bc:	2300      	movs	r3, #0
 80081be:	9307      	str	r3, [sp, #28]
 80081c0:	9509      	str	r5, [sp, #36]	; 0x24
 80081c2:	f04f 33ff 	mov.w	r3, #4294967295
 80081c6:	9301      	str	r3, [sp, #4]
 80081c8:	9304      	str	r3, [sp, #16]
 80081ca:	2200      	movs	r2, #0
 80081cc:	2312      	movs	r3, #18
 80081ce:	e7d1      	b.n	8008174 <_dtoa_r+0x274>
 80081d0:	636f4361 	.word	0x636f4361
 80081d4:	3fd287a7 	.word	0x3fd287a7
 80081d8:	8b60c8b3 	.word	0x8b60c8b3
 80081dc:	3fc68a28 	.word	0x3fc68a28
 80081e0:	509f79fb 	.word	0x509f79fb
 80081e4:	3fd34413 	.word	0x3fd34413
 80081e8:	0800aa2f 	.word	0x0800aa2f
 80081ec:	0800aa46 	.word	0x0800aa46
 80081f0:	7ff00000 	.word	0x7ff00000
 80081f4:	0800aa2b 	.word	0x0800aa2b
 80081f8:	0800aa22 	.word	0x0800aa22
 80081fc:	0800a9f2 	.word	0x0800a9f2
 8008200:	3ff80000 	.word	0x3ff80000
 8008204:	0800ab90 	.word	0x0800ab90
 8008208:	0800aa9e 	.word	0x0800aa9e
 800820c:	2301      	movs	r3, #1
 800820e:	9309      	str	r3, [sp, #36]	; 0x24
 8008210:	e7d7      	b.n	80081c2 <_dtoa_r+0x2c2>
 8008212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008214:	9301      	str	r3, [sp, #4]
 8008216:	9304      	str	r3, [sp, #16]
 8008218:	e7ba      	b.n	8008190 <_dtoa_r+0x290>
 800821a:	3101      	adds	r1, #1
 800821c:	0052      	lsls	r2, r2, #1
 800821e:	e7ba      	b.n	8008196 <_dtoa_r+0x296>
 8008220:	69e3      	ldr	r3, [r4, #28]
 8008222:	9a00      	ldr	r2, [sp, #0]
 8008224:	601a      	str	r2, [r3, #0]
 8008226:	9b04      	ldr	r3, [sp, #16]
 8008228:	2b0e      	cmp	r3, #14
 800822a:	f200 80a8 	bhi.w	800837e <_dtoa_r+0x47e>
 800822e:	2d00      	cmp	r5, #0
 8008230:	f000 80a5 	beq.w	800837e <_dtoa_r+0x47e>
 8008234:	f1bb 0f00 	cmp.w	fp, #0
 8008238:	dd38      	ble.n	80082ac <_dtoa_r+0x3ac>
 800823a:	4bc0      	ldr	r3, [pc, #768]	; (800853c <_dtoa_r+0x63c>)
 800823c:	f00b 020f 	and.w	r2, fp, #15
 8008240:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008244:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008248:	e9d3 6700 	ldrd	r6, r7, [r3]
 800824c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008250:	d019      	beq.n	8008286 <_dtoa_r+0x386>
 8008252:	4bbb      	ldr	r3, [pc, #748]	; (8008540 <_dtoa_r+0x640>)
 8008254:	ec51 0b18 	vmov	r0, r1, d8
 8008258:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800825c:	f7f8 fafe 	bl	800085c <__aeabi_ddiv>
 8008260:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008264:	f008 080f 	and.w	r8, r8, #15
 8008268:	2503      	movs	r5, #3
 800826a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008540 <_dtoa_r+0x640>
 800826e:	f1b8 0f00 	cmp.w	r8, #0
 8008272:	d10a      	bne.n	800828a <_dtoa_r+0x38a>
 8008274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008278:	4632      	mov	r2, r6
 800827a:	463b      	mov	r3, r7
 800827c:	f7f8 faee 	bl	800085c <__aeabi_ddiv>
 8008280:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008284:	e02b      	b.n	80082de <_dtoa_r+0x3de>
 8008286:	2502      	movs	r5, #2
 8008288:	e7ef      	b.n	800826a <_dtoa_r+0x36a>
 800828a:	f018 0f01 	tst.w	r8, #1
 800828e:	d008      	beq.n	80082a2 <_dtoa_r+0x3a2>
 8008290:	4630      	mov	r0, r6
 8008292:	4639      	mov	r1, r7
 8008294:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008298:	f7f8 f9b6 	bl	8000608 <__aeabi_dmul>
 800829c:	3501      	adds	r5, #1
 800829e:	4606      	mov	r6, r0
 80082a0:	460f      	mov	r7, r1
 80082a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80082a6:	f109 0908 	add.w	r9, r9, #8
 80082aa:	e7e0      	b.n	800826e <_dtoa_r+0x36e>
 80082ac:	f000 809f 	beq.w	80083ee <_dtoa_r+0x4ee>
 80082b0:	f1cb 0600 	rsb	r6, fp, #0
 80082b4:	4ba1      	ldr	r3, [pc, #644]	; (800853c <_dtoa_r+0x63c>)
 80082b6:	4fa2      	ldr	r7, [pc, #648]	; (8008540 <_dtoa_r+0x640>)
 80082b8:	f006 020f 	and.w	r2, r6, #15
 80082bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c4:	ec51 0b18 	vmov	r0, r1, d8
 80082c8:	f7f8 f99e 	bl	8000608 <__aeabi_dmul>
 80082cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082d0:	1136      	asrs	r6, r6, #4
 80082d2:	2300      	movs	r3, #0
 80082d4:	2502      	movs	r5, #2
 80082d6:	2e00      	cmp	r6, #0
 80082d8:	d17e      	bne.n	80083d8 <_dtoa_r+0x4d8>
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1d0      	bne.n	8008280 <_dtoa_r+0x380>
 80082de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f000 8084 	beq.w	80083f2 <_dtoa_r+0x4f2>
 80082ea:	4b96      	ldr	r3, [pc, #600]	; (8008544 <_dtoa_r+0x644>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	4640      	mov	r0, r8
 80082f0:	4649      	mov	r1, r9
 80082f2:	f7f8 fbfb 	bl	8000aec <__aeabi_dcmplt>
 80082f6:	2800      	cmp	r0, #0
 80082f8:	d07b      	beq.n	80083f2 <_dtoa_r+0x4f2>
 80082fa:	9b04      	ldr	r3, [sp, #16]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d078      	beq.n	80083f2 <_dtoa_r+0x4f2>
 8008300:	9b01      	ldr	r3, [sp, #4]
 8008302:	2b00      	cmp	r3, #0
 8008304:	dd39      	ble.n	800837a <_dtoa_r+0x47a>
 8008306:	4b90      	ldr	r3, [pc, #576]	; (8008548 <_dtoa_r+0x648>)
 8008308:	2200      	movs	r2, #0
 800830a:	4640      	mov	r0, r8
 800830c:	4649      	mov	r1, r9
 800830e:	f7f8 f97b 	bl	8000608 <__aeabi_dmul>
 8008312:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008316:	9e01      	ldr	r6, [sp, #4]
 8008318:	f10b 37ff 	add.w	r7, fp, #4294967295
 800831c:	3501      	adds	r5, #1
 800831e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008322:	4628      	mov	r0, r5
 8008324:	f7f8 f906 	bl	8000534 <__aeabi_i2d>
 8008328:	4642      	mov	r2, r8
 800832a:	464b      	mov	r3, r9
 800832c:	f7f8 f96c 	bl	8000608 <__aeabi_dmul>
 8008330:	4b86      	ldr	r3, [pc, #536]	; (800854c <_dtoa_r+0x64c>)
 8008332:	2200      	movs	r2, #0
 8008334:	f7f7 ffb2 	bl	800029c <__adddf3>
 8008338:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800833c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008340:	9303      	str	r3, [sp, #12]
 8008342:	2e00      	cmp	r6, #0
 8008344:	d158      	bne.n	80083f8 <_dtoa_r+0x4f8>
 8008346:	4b82      	ldr	r3, [pc, #520]	; (8008550 <_dtoa_r+0x650>)
 8008348:	2200      	movs	r2, #0
 800834a:	4640      	mov	r0, r8
 800834c:	4649      	mov	r1, r9
 800834e:	f7f7 ffa3 	bl	8000298 <__aeabi_dsub>
 8008352:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008356:	4680      	mov	r8, r0
 8008358:	4689      	mov	r9, r1
 800835a:	f7f8 fbe5 	bl	8000b28 <__aeabi_dcmpgt>
 800835e:	2800      	cmp	r0, #0
 8008360:	f040 8296 	bne.w	8008890 <_dtoa_r+0x990>
 8008364:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008368:	4640      	mov	r0, r8
 800836a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800836e:	4649      	mov	r1, r9
 8008370:	f7f8 fbbc 	bl	8000aec <__aeabi_dcmplt>
 8008374:	2800      	cmp	r0, #0
 8008376:	f040 8289 	bne.w	800888c <_dtoa_r+0x98c>
 800837a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800837e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008380:	2b00      	cmp	r3, #0
 8008382:	f2c0 814e 	blt.w	8008622 <_dtoa_r+0x722>
 8008386:	f1bb 0f0e 	cmp.w	fp, #14
 800838a:	f300 814a 	bgt.w	8008622 <_dtoa_r+0x722>
 800838e:	4b6b      	ldr	r3, [pc, #428]	; (800853c <_dtoa_r+0x63c>)
 8008390:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008394:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800839a:	2b00      	cmp	r3, #0
 800839c:	f280 80dc 	bge.w	8008558 <_dtoa_r+0x658>
 80083a0:	9b04      	ldr	r3, [sp, #16]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f300 80d8 	bgt.w	8008558 <_dtoa_r+0x658>
 80083a8:	f040 826f 	bne.w	800888a <_dtoa_r+0x98a>
 80083ac:	4b68      	ldr	r3, [pc, #416]	; (8008550 <_dtoa_r+0x650>)
 80083ae:	2200      	movs	r2, #0
 80083b0:	4640      	mov	r0, r8
 80083b2:	4649      	mov	r1, r9
 80083b4:	f7f8 f928 	bl	8000608 <__aeabi_dmul>
 80083b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083bc:	f7f8 fbaa 	bl	8000b14 <__aeabi_dcmpge>
 80083c0:	9e04      	ldr	r6, [sp, #16]
 80083c2:	4637      	mov	r7, r6
 80083c4:	2800      	cmp	r0, #0
 80083c6:	f040 8245 	bne.w	8008854 <_dtoa_r+0x954>
 80083ca:	9d00      	ldr	r5, [sp, #0]
 80083cc:	2331      	movs	r3, #49	; 0x31
 80083ce:	f805 3b01 	strb.w	r3, [r5], #1
 80083d2:	f10b 0b01 	add.w	fp, fp, #1
 80083d6:	e241      	b.n	800885c <_dtoa_r+0x95c>
 80083d8:	07f2      	lsls	r2, r6, #31
 80083da:	d505      	bpl.n	80083e8 <_dtoa_r+0x4e8>
 80083dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083e0:	f7f8 f912 	bl	8000608 <__aeabi_dmul>
 80083e4:	3501      	adds	r5, #1
 80083e6:	2301      	movs	r3, #1
 80083e8:	1076      	asrs	r6, r6, #1
 80083ea:	3708      	adds	r7, #8
 80083ec:	e773      	b.n	80082d6 <_dtoa_r+0x3d6>
 80083ee:	2502      	movs	r5, #2
 80083f0:	e775      	b.n	80082de <_dtoa_r+0x3de>
 80083f2:	9e04      	ldr	r6, [sp, #16]
 80083f4:	465f      	mov	r7, fp
 80083f6:	e792      	b.n	800831e <_dtoa_r+0x41e>
 80083f8:	9900      	ldr	r1, [sp, #0]
 80083fa:	4b50      	ldr	r3, [pc, #320]	; (800853c <_dtoa_r+0x63c>)
 80083fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008400:	4431      	add	r1, r6
 8008402:	9102      	str	r1, [sp, #8]
 8008404:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008406:	eeb0 9a47 	vmov.f32	s18, s14
 800840a:	eef0 9a67 	vmov.f32	s19, s15
 800840e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008412:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008416:	2900      	cmp	r1, #0
 8008418:	d044      	beq.n	80084a4 <_dtoa_r+0x5a4>
 800841a:	494e      	ldr	r1, [pc, #312]	; (8008554 <_dtoa_r+0x654>)
 800841c:	2000      	movs	r0, #0
 800841e:	f7f8 fa1d 	bl	800085c <__aeabi_ddiv>
 8008422:	ec53 2b19 	vmov	r2, r3, d9
 8008426:	f7f7 ff37 	bl	8000298 <__aeabi_dsub>
 800842a:	9d00      	ldr	r5, [sp, #0]
 800842c:	ec41 0b19 	vmov	d9, r0, r1
 8008430:	4649      	mov	r1, r9
 8008432:	4640      	mov	r0, r8
 8008434:	f7f8 fb98 	bl	8000b68 <__aeabi_d2iz>
 8008438:	4606      	mov	r6, r0
 800843a:	f7f8 f87b 	bl	8000534 <__aeabi_i2d>
 800843e:	4602      	mov	r2, r0
 8008440:	460b      	mov	r3, r1
 8008442:	4640      	mov	r0, r8
 8008444:	4649      	mov	r1, r9
 8008446:	f7f7 ff27 	bl	8000298 <__aeabi_dsub>
 800844a:	3630      	adds	r6, #48	; 0x30
 800844c:	f805 6b01 	strb.w	r6, [r5], #1
 8008450:	ec53 2b19 	vmov	r2, r3, d9
 8008454:	4680      	mov	r8, r0
 8008456:	4689      	mov	r9, r1
 8008458:	f7f8 fb48 	bl	8000aec <__aeabi_dcmplt>
 800845c:	2800      	cmp	r0, #0
 800845e:	d164      	bne.n	800852a <_dtoa_r+0x62a>
 8008460:	4642      	mov	r2, r8
 8008462:	464b      	mov	r3, r9
 8008464:	4937      	ldr	r1, [pc, #220]	; (8008544 <_dtoa_r+0x644>)
 8008466:	2000      	movs	r0, #0
 8008468:	f7f7 ff16 	bl	8000298 <__aeabi_dsub>
 800846c:	ec53 2b19 	vmov	r2, r3, d9
 8008470:	f7f8 fb3c 	bl	8000aec <__aeabi_dcmplt>
 8008474:	2800      	cmp	r0, #0
 8008476:	f040 80b6 	bne.w	80085e6 <_dtoa_r+0x6e6>
 800847a:	9b02      	ldr	r3, [sp, #8]
 800847c:	429d      	cmp	r5, r3
 800847e:	f43f af7c 	beq.w	800837a <_dtoa_r+0x47a>
 8008482:	4b31      	ldr	r3, [pc, #196]	; (8008548 <_dtoa_r+0x648>)
 8008484:	ec51 0b19 	vmov	r0, r1, d9
 8008488:	2200      	movs	r2, #0
 800848a:	f7f8 f8bd 	bl	8000608 <__aeabi_dmul>
 800848e:	4b2e      	ldr	r3, [pc, #184]	; (8008548 <_dtoa_r+0x648>)
 8008490:	ec41 0b19 	vmov	d9, r0, r1
 8008494:	2200      	movs	r2, #0
 8008496:	4640      	mov	r0, r8
 8008498:	4649      	mov	r1, r9
 800849a:	f7f8 f8b5 	bl	8000608 <__aeabi_dmul>
 800849e:	4680      	mov	r8, r0
 80084a0:	4689      	mov	r9, r1
 80084a2:	e7c5      	b.n	8008430 <_dtoa_r+0x530>
 80084a4:	ec51 0b17 	vmov	r0, r1, d7
 80084a8:	f7f8 f8ae 	bl	8000608 <__aeabi_dmul>
 80084ac:	9b02      	ldr	r3, [sp, #8]
 80084ae:	9d00      	ldr	r5, [sp, #0]
 80084b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80084b2:	ec41 0b19 	vmov	d9, r0, r1
 80084b6:	4649      	mov	r1, r9
 80084b8:	4640      	mov	r0, r8
 80084ba:	f7f8 fb55 	bl	8000b68 <__aeabi_d2iz>
 80084be:	4606      	mov	r6, r0
 80084c0:	f7f8 f838 	bl	8000534 <__aeabi_i2d>
 80084c4:	3630      	adds	r6, #48	; 0x30
 80084c6:	4602      	mov	r2, r0
 80084c8:	460b      	mov	r3, r1
 80084ca:	4640      	mov	r0, r8
 80084cc:	4649      	mov	r1, r9
 80084ce:	f7f7 fee3 	bl	8000298 <__aeabi_dsub>
 80084d2:	f805 6b01 	strb.w	r6, [r5], #1
 80084d6:	9b02      	ldr	r3, [sp, #8]
 80084d8:	429d      	cmp	r5, r3
 80084da:	4680      	mov	r8, r0
 80084dc:	4689      	mov	r9, r1
 80084de:	f04f 0200 	mov.w	r2, #0
 80084e2:	d124      	bne.n	800852e <_dtoa_r+0x62e>
 80084e4:	4b1b      	ldr	r3, [pc, #108]	; (8008554 <_dtoa_r+0x654>)
 80084e6:	ec51 0b19 	vmov	r0, r1, d9
 80084ea:	f7f7 fed7 	bl	800029c <__adddf3>
 80084ee:	4602      	mov	r2, r0
 80084f0:	460b      	mov	r3, r1
 80084f2:	4640      	mov	r0, r8
 80084f4:	4649      	mov	r1, r9
 80084f6:	f7f8 fb17 	bl	8000b28 <__aeabi_dcmpgt>
 80084fa:	2800      	cmp	r0, #0
 80084fc:	d173      	bne.n	80085e6 <_dtoa_r+0x6e6>
 80084fe:	ec53 2b19 	vmov	r2, r3, d9
 8008502:	4914      	ldr	r1, [pc, #80]	; (8008554 <_dtoa_r+0x654>)
 8008504:	2000      	movs	r0, #0
 8008506:	f7f7 fec7 	bl	8000298 <__aeabi_dsub>
 800850a:	4602      	mov	r2, r0
 800850c:	460b      	mov	r3, r1
 800850e:	4640      	mov	r0, r8
 8008510:	4649      	mov	r1, r9
 8008512:	f7f8 faeb 	bl	8000aec <__aeabi_dcmplt>
 8008516:	2800      	cmp	r0, #0
 8008518:	f43f af2f 	beq.w	800837a <_dtoa_r+0x47a>
 800851c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800851e:	1e6b      	subs	r3, r5, #1
 8008520:	930f      	str	r3, [sp, #60]	; 0x3c
 8008522:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008526:	2b30      	cmp	r3, #48	; 0x30
 8008528:	d0f8      	beq.n	800851c <_dtoa_r+0x61c>
 800852a:	46bb      	mov	fp, r7
 800852c:	e04a      	b.n	80085c4 <_dtoa_r+0x6c4>
 800852e:	4b06      	ldr	r3, [pc, #24]	; (8008548 <_dtoa_r+0x648>)
 8008530:	f7f8 f86a 	bl	8000608 <__aeabi_dmul>
 8008534:	4680      	mov	r8, r0
 8008536:	4689      	mov	r9, r1
 8008538:	e7bd      	b.n	80084b6 <_dtoa_r+0x5b6>
 800853a:	bf00      	nop
 800853c:	0800ab90 	.word	0x0800ab90
 8008540:	0800ab68 	.word	0x0800ab68
 8008544:	3ff00000 	.word	0x3ff00000
 8008548:	40240000 	.word	0x40240000
 800854c:	401c0000 	.word	0x401c0000
 8008550:	40140000 	.word	0x40140000
 8008554:	3fe00000 	.word	0x3fe00000
 8008558:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800855c:	9d00      	ldr	r5, [sp, #0]
 800855e:	4642      	mov	r2, r8
 8008560:	464b      	mov	r3, r9
 8008562:	4630      	mov	r0, r6
 8008564:	4639      	mov	r1, r7
 8008566:	f7f8 f979 	bl	800085c <__aeabi_ddiv>
 800856a:	f7f8 fafd 	bl	8000b68 <__aeabi_d2iz>
 800856e:	9001      	str	r0, [sp, #4]
 8008570:	f7f7 ffe0 	bl	8000534 <__aeabi_i2d>
 8008574:	4642      	mov	r2, r8
 8008576:	464b      	mov	r3, r9
 8008578:	f7f8 f846 	bl	8000608 <__aeabi_dmul>
 800857c:	4602      	mov	r2, r0
 800857e:	460b      	mov	r3, r1
 8008580:	4630      	mov	r0, r6
 8008582:	4639      	mov	r1, r7
 8008584:	f7f7 fe88 	bl	8000298 <__aeabi_dsub>
 8008588:	9e01      	ldr	r6, [sp, #4]
 800858a:	9f04      	ldr	r7, [sp, #16]
 800858c:	3630      	adds	r6, #48	; 0x30
 800858e:	f805 6b01 	strb.w	r6, [r5], #1
 8008592:	9e00      	ldr	r6, [sp, #0]
 8008594:	1bae      	subs	r6, r5, r6
 8008596:	42b7      	cmp	r7, r6
 8008598:	4602      	mov	r2, r0
 800859a:	460b      	mov	r3, r1
 800859c:	d134      	bne.n	8008608 <_dtoa_r+0x708>
 800859e:	f7f7 fe7d 	bl	800029c <__adddf3>
 80085a2:	4642      	mov	r2, r8
 80085a4:	464b      	mov	r3, r9
 80085a6:	4606      	mov	r6, r0
 80085a8:	460f      	mov	r7, r1
 80085aa:	f7f8 fabd 	bl	8000b28 <__aeabi_dcmpgt>
 80085ae:	b9c8      	cbnz	r0, 80085e4 <_dtoa_r+0x6e4>
 80085b0:	4642      	mov	r2, r8
 80085b2:	464b      	mov	r3, r9
 80085b4:	4630      	mov	r0, r6
 80085b6:	4639      	mov	r1, r7
 80085b8:	f7f8 fa8e 	bl	8000ad8 <__aeabi_dcmpeq>
 80085bc:	b110      	cbz	r0, 80085c4 <_dtoa_r+0x6c4>
 80085be:	9b01      	ldr	r3, [sp, #4]
 80085c0:	07db      	lsls	r3, r3, #31
 80085c2:	d40f      	bmi.n	80085e4 <_dtoa_r+0x6e4>
 80085c4:	4651      	mov	r1, sl
 80085c6:	4620      	mov	r0, r4
 80085c8:	f000 ff36 	bl	8009438 <_Bfree>
 80085cc:	2300      	movs	r3, #0
 80085ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80085d0:	702b      	strb	r3, [r5, #0]
 80085d2:	f10b 0301 	add.w	r3, fp, #1
 80085d6:	6013      	str	r3, [r2, #0]
 80085d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f43f ace2 	beq.w	8007fa4 <_dtoa_r+0xa4>
 80085e0:	601d      	str	r5, [r3, #0]
 80085e2:	e4df      	b.n	8007fa4 <_dtoa_r+0xa4>
 80085e4:	465f      	mov	r7, fp
 80085e6:	462b      	mov	r3, r5
 80085e8:	461d      	mov	r5, r3
 80085ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085ee:	2a39      	cmp	r2, #57	; 0x39
 80085f0:	d106      	bne.n	8008600 <_dtoa_r+0x700>
 80085f2:	9a00      	ldr	r2, [sp, #0]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d1f7      	bne.n	80085e8 <_dtoa_r+0x6e8>
 80085f8:	9900      	ldr	r1, [sp, #0]
 80085fa:	2230      	movs	r2, #48	; 0x30
 80085fc:	3701      	adds	r7, #1
 80085fe:	700a      	strb	r2, [r1, #0]
 8008600:	781a      	ldrb	r2, [r3, #0]
 8008602:	3201      	adds	r2, #1
 8008604:	701a      	strb	r2, [r3, #0]
 8008606:	e790      	b.n	800852a <_dtoa_r+0x62a>
 8008608:	4ba3      	ldr	r3, [pc, #652]	; (8008898 <_dtoa_r+0x998>)
 800860a:	2200      	movs	r2, #0
 800860c:	f7f7 fffc 	bl	8000608 <__aeabi_dmul>
 8008610:	2200      	movs	r2, #0
 8008612:	2300      	movs	r3, #0
 8008614:	4606      	mov	r6, r0
 8008616:	460f      	mov	r7, r1
 8008618:	f7f8 fa5e 	bl	8000ad8 <__aeabi_dcmpeq>
 800861c:	2800      	cmp	r0, #0
 800861e:	d09e      	beq.n	800855e <_dtoa_r+0x65e>
 8008620:	e7d0      	b.n	80085c4 <_dtoa_r+0x6c4>
 8008622:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008624:	2a00      	cmp	r2, #0
 8008626:	f000 80ca 	beq.w	80087be <_dtoa_r+0x8be>
 800862a:	9a07      	ldr	r2, [sp, #28]
 800862c:	2a01      	cmp	r2, #1
 800862e:	f300 80ad 	bgt.w	800878c <_dtoa_r+0x88c>
 8008632:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008634:	2a00      	cmp	r2, #0
 8008636:	f000 80a5 	beq.w	8008784 <_dtoa_r+0x884>
 800863a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800863e:	9e08      	ldr	r6, [sp, #32]
 8008640:	9d05      	ldr	r5, [sp, #20]
 8008642:	9a05      	ldr	r2, [sp, #20]
 8008644:	441a      	add	r2, r3
 8008646:	9205      	str	r2, [sp, #20]
 8008648:	9a06      	ldr	r2, [sp, #24]
 800864a:	2101      	movs	r1, #1
 800864c:	441a      	add	r2, r3
 800864e:	4620      	mov	r0, r4
 8008650:	9206      	str	r2, [sp, #24]
 8008652:	f000 fff1 	bl	8009638 <__i2b>
 8008656:	4607      	mov	r7, r0
 8008658:	b165      	cbz	r5, 8008674 <_dtoa_r+0x774>
 800865a:	9b06      	ldr	r3, [sp, #24]
 800865c:	2b00      	cmp	r3, #0
 800865e:	dd09      	ble.n	8008674 <_dtoa_r+0x774>
 8008660:	42ab      	cmp	r3, r5
 8008662:	9a05      	ldr	r2, [sp, #20]
 8008664:	bfa8      	it	ge
 8008666:	462b      	movge	r3, r5
 8008668:	1ad2      	subs	r2, r2, r3
 800866a:	9205      	str	r2, [sp, #20]
 800866c:	9a06      	ldr	r2, [sp, #24]
 800866e:	1aed      	subs	r5, r5, r3
 8008670:	1ad3      	subs	r3, r2, r3
 8008672:	9306      	str	r3, [sp, #24]
 8008674:	9b08      	ldr	r3, [sp, #32]
 8008676:	b1f3      	cbz	r3, 80086b6 <_dtoa_r+0x7b6>
 8008678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800867a:	2b00      	cmp	r3, #0
 800867c:	f000 80a3 	beq.w	80087c6 <_dtoa_r+0x8c6>
 8008680:	2e00      	cmp	r6, #0
 8008682:	dd10      	ble.n	80086a6 <_dtoa_r+0x7a6>
 8008684:	4639      	mov	r1, r7
 8008686:	4632      	mov	r2, r6
 8008688:	4620      	mov	r0, r4
 800868a:	f001 f895 	bl	80097b8 <__pow5mult>
 800868e:	4652      	mov	r2, sl
 8008690:	4601      	mov	r1, r0
 8008692:	4607      	mov	r7, r0
 8008694:	4620      	mov	r0, r4
 8008696:	f000 ffe5 	bl	8009664 <__multiply>
 800869a:	4651      	mov	r1, sl
 800869c:	4680      	mov	r8, r0
 800869e:	4620      	mov	r0, r4
 80086a0:	f000 feca 	bl	8009438 <_Bfree>
 80086a4:	46c2      	mov	sl, r8
 80086a6:	9b08      	ldr	r3, [sp, #32]
 80086a8:	1b9a      	subs	r2, r3, r6
 80086aa:	d004      	beq.n	80086b6 <_dtoa_r+0x7b6>
 80086ac:	4651      	mov	r1, sl
 80086ae:	4620      	mov	r0, r4
 80086b0:	f001 f882 	bl	80097b8 <__pow5mult>
 80086b4:	4682      	mov	sl, r0
 80086b6:	2101      	movs	r1, #1
 80086b8:	4620      	mov	r0, r4
 80086ba:	f000 ffbd 	bl	8009638 <__i2b>
 80086be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	4606      	mov	r6, r0
 80086c4:	f340 8081 	ble.w	80087ca <_dtoa_r+0x8ca>
 80086c8:	461a      	mov	r2, r3
 80086ca:	4601      	mov	r1, r0
 80086cc:	4620      	mov	r0, r4
 80086ce:	f001 f873 	bl	80097b8 <__pow5mult>
 80086d2:	9b07      	ldr	r3, [sp, #28]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	4606      	mov	r6, r0
 80086d8:	dd7a      	ble.n	80087d0 <_dtoa_r+0x8d0>
 80086da:	f04f 0800 	mov.w	r8, #0
 80086de:	6933      	ldr	r3, [r6, #16]
 80086e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80086e4:	6918      	ldr	r0, [r3, #16]
 80086e6:	f000 ff59 	bl	800959c <__hi0bits>
 80086ea:	f1c0 0020 	rsb	r0, r0, #32
 80086ee:	9b06      	ldr	r3, [sp, #24]
 80086f0:	4418      	add	r0, r3
 80086f2:	f010 001f 	ands.w	r0, r0, #31
 80086f6:	f000 8094 	beq.w	8008822 <_dtoa_r+0x922>
 80086fa:	f1c0 0320 	rsb	r3, r0, #32
 80086fe:	2b04      	cmp	r3, #4
 8008700:	f340 8085 	ble.w	800880e <_dtoa_r+0x90e>
 8008704:	9b05      	ldr	r3, [sp, #20]
 8008706:	f1c0 001c 	rsb	r0, r0, #28
 800870a:	4403      	add	r3, r0
 800870c:	9305      	str	r3, [sp, #20]
 800870e:	9b06      	ldr	r3, [sp, #24]
 8008710:	4403      	add	r3, r0
 8008712:	4405      	add	r5, r0
 8008714:	9306      	str	r3, [sp, #24]
 8008716:	9b05      	ldr	r3, [sp, #20]
 8008718:	2b00      	cmp	r3, #0
 800871a:	dd05      	ble.n	8008728 <_dtoa_r+0x828>
 800871c:	4651      	mov	r1, sl
 800871e:	461a      	mov	r2, r3
 8008720:	4620      	mov	r0, r4
 8008722:	f001 f8a3 	bl	800986c <__lshift>
 8008726:	4682      	mov	sl, r0
 8008728:	9b06      	ldr	r3, [sp, #24]
 800872a:	2b00      	cmp	r3, #0
 800872c:	dd05      	ble.n	800873a <_dtoa_r+0x83a>
 800872e:	4631      	mov	r1, r6
 8008730:	461a      	mov	r2, r3
 8008732:	4620      	mov	r0, r4
 8008734:	f001 f89a 	bl	800986c <__lshift>
 8008738:	4606      	mov	r6, r0
 800873a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800873c:	2b00      	cmp	r3, #0
 800873e:	d072      	beq.n	8008826 <_dtoa_r+0x926>
 8008740:	4631      	mov	r1, r6
 8008742:	4650      	mov	r0, sl
 8008744:	f001 f8fe 	bl	8009944 <__mcmp>
 8008748:	2800      	cmp	r0, #0
 800874a:	da6c      	bge.n	8008826 <_dtoa_r+0x926>
 800874c:	2300      	movs	r3, #0
 800874e:	4651      	mov	r1, sl
 8008750:	220a      	movs	r2, #10
 8008752:	4620      	mov	r0, r4
 8008754:	f000 fe92 	bl	800947c <__multadd>
 8008758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800875a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800875e:	4682      	mov	sl, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	f000 81b0 	beq.w	8008ac6 <_dtoa_r+0xbc6>
 8008766:	2300      	movs	r3, #0
 8008768:	4639      	mov	r1, r7
 800876a:	220a      	movs	r2, #10
 800876c:	4620      	mov	r0, r4
 800876e:	f000 fe85 	bl	800947c <__multadd>
 8008772:	9b01      	ldr	r3, [sp, #4]
 8008774:	2b00      	cmp	r3, #0
 8008776:	4607      	mov	r7, r0
 8008778:	f300 8096 	bgt.w	80088a8 <_dtoa_r+0x9a8>
 800877c:	9b07      	ldr	r3, [sp, #28]
 800877e:	2b02      	cmp	r3, #2
 8008780:	dc59      	bgt.n	8008836 <_dtoa_r+0x936>
 8008782:	e091      	b.n	80088a8 <_dtoa_r+0x9a8>
 8008784:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008786:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800878a:	e758      	b.n	800863e <_dtoa_r+0x73e>
 800878c:	9b04      	ldr	r3, [sp, #16]
 800878e:	1e5e      	subs	r6, r3, #1
 8008790:	9b08      	ldr	r3, [sp, #32]
 8008792:	42b3      	cmp	r3, r6
 8008794:	bfbf      	itttt	lt
 8008796:	9b08      	ldrlt	r3, [sp, #32]
 8008798:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800879a:	9608      	strlt	r6, [sp, #32]
 800879c:	1af3      	sublt	r3, r6, r3
 800879e:	bfb4      	ite	lt
 80087a0:	18d2      	addlt	r2, r2, r3
 80087a2:	1b9e      	subge	r6, r3, r6
 80087a4:	9b04      	ldr	r3, [sp, #16]
 80087a6:	bfbc      	itt	lt
 80087a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80087aa:	2600      	movlt	r6, #0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	bfb7      	itett	lt
 80087b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80087b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80087b8:	1a9d      	sublt	r5, r3, r2
 80087ba:	2300      	movlt	r3, #0
 80087bc:	e741      	b.n	8008642 <_dtoa_r+0x742>
 80087be:	9e08      	ldr	r6, [sp, #32]
 80087c0:	9d05      	ldr	r5, [sp, #20]
 80087c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80087c4:	e748      	b.n	8008658 <_dtoa_r+0x758>
 80087c6:	9a08      	ldr	r2, [sp, #32]
 80087c8:	e770      	b.n	80086ac <_dtoa_r+0x7ac>
 80087ca:	9b07      	ldr	r3, [sp, #28]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	dc19      	bgt.n	8008804 <_dtoa_r+0x904>
 80087d0:	9b02      	ldr	r3, [sp, #8]
 80087d2:	b9bb      	cbnz	r3, 8008804 <_dtoa_r+0x904>
 80087d4:	9b03      	ldr	r3, [sp, #12]
 80087d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087da:	b99b      	cbnz	r3, 8008804 <_dtoa_r+0x904>
 80087dc:	9b03      	ldr	r3, [sp, #12]
 80087de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087e2:	0d1b      	lsrs	r3, r3, #20
 80087e4:	051b      	lsls	r3, r3, #20
 80087e6:	b183      	cbz	r3, 800880a <_dtoa_r+0x90a>
 80087e8:	9b05      	ldr	r3, [sp, #20]
 80087ea:	3301      	adds	r3, #1
 80087ec:	9305      	str	r3, [sp, #20]
 80087ee:	9b06      	ldr	r3, [sp, #24]
 80087f0:	3301      	adds	r3, #1
 80087f2:	9306      	str	r3, [sp, #24]
 80087f4:	f04f 0801 	mov.w	r8, #1
 80087f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f47f af6f 	bne.w	80086de <_dtoa_r+0x7de>
 8008800:	2001      	movs	r0, #1
 8008802:	e774      	b.n	80086ee <_dtoa_r+0x7ee>
 8008804:	f04f 0800 	mov.w	r8, #0
 8008808:	e7f6      	b.n	80087f8 <_dtoa_r+0x8f8>
 800880a:	4698      	mov	r8, r3
 800880c:	e7f4      	b.n	80087f8 <_dtoa_r+0x8f8>
 800880e:	d082      	beq.n	8008716 <_dtoa_r+0x816>
 8008810:	9a05      	ldr	r2, [sp, #20]
 8008812:	331c      	adds	r3, #28
 8008814:	441a      	add	r2, r3
 8008816:	9205      	str	r2, [sp, #20]
 8008818:	9a06      	ldr	r2, [sp, #24]
 800881a:	441a      	add	r2, r3
 800881c:	441d      	add	r5, r3
 800881e:	9206      	str	r2, [sp, #24]
 8008820:	e779      	b.n	8008716 <_dtoa_r+0x816>
 8008822:	4603      	mov	r3, r0
 8008824:	e7f4      	b.n	8008810 <_dtoa_r+0x910>
 8008826:	9b04      	ldr	r3, [sp, #16]
 8008828:	2b00      	cmp	r3, #0
 800882a:	dc37      	bgt.n	800889c <_dtoa_r+0x99c>
 800882c:	9b07      	ldr	r3, [sp, #28]
 800882e:	2b02      	cmp	r3, #2
 8008830:	dd34      	ble.n	800889c <_dtoa_r+0x99c>
 8008832:	9b04      	ldr	r3, [sp, #16]
 8008834:	9301      	str	r3, [sp, #4]
 8008836:	9b01      	ldr	r3, [sp, #4]
 8008838:	b963      	cbnz	r3, 8008854 <_dtoa_r+0x954>
 800883a:	4631      	mov	r1, r6
 800883c:	2205      	movs	r2, #5
 800883e:	4620      	mov	r0, r4
 8008840:	f000 fe1c 	bl	800947c <__multadd>
 8008844:	4601      	mov	r1, r0
 8008846:	4606      	mov	r6, r0
 8008848:	4650      	mov	r0, sl
 800884a:	f001 f87b 	bl	8009944 <__mcmp>
 800884e:	2800      	cmp	r0, #0
 8008850:	f73f adbb 	bgt.w	80083ca <_dtoa_r+0x4ca>
 8008854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008856:	9d00      	ldr	r5, [sp, #0]
 8008858:	ea6f 0b03 	mvn.w	fp, r3
 800885c:	f04f 0800 	mov.w	r8, #0
 8008860:	4631      	mov	r1, r6
 8008862:	4620      	mov	r0, r4
 8008864:	f000 fde8 	bl	8009438 <_Bfree>
 8008868:	2f00      	cmp	r7, #0
 800886a:	f43f aeab 	beq.w	80085c4 <_dtoa_r+0x6c4>
 800886e:	f1b8 0f00 	cmp.w	r8, #0
 8008872:	d005      	beq.n	8008880 <_dtoa_r+0x980>
 8008874:	45b8      	cmp	r8, r7
 8008876:	d003      	beq.n	8008880 <_dtoa_r+0x980>
 8008878:	4641      	mov	r1, r8
 800887a:	4620      	mov	r0, r4
 800887c:	f000 fddc 	bl	8009438 <_Bfree>
 8008880:	4639      	mov	r1, r7
 8008882:	4620      	mov	r0, r4
 8008884:	f000 fdd8 	bl	8009438 <_Bfree>
 8008888:	e69c      	b.n	80085c4 <_dtoa_r+0x6c4>
 800888a:	2600      	movs	r6, #0
 800888c:	4637      	mov	r7, r6
 800888e:	e7e1      	b.n	8008854 <_dtoa_r+0x954>
 8008890:	46bb      	mov	fp, r7
 8008892:	4637      	mov	r7, r6
 8008894:	e599      	b.n	80083ca <_dtoa_r+0x4ca>
 8008896:	bf00      	nop
 8008898:	40240000 	.word	0x40240000
 800889c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f000 80c8 	beq.w	8008a34 <_dtoa_r+0xb34>
 80088a4:	9b04      	ldr	r3, [sp, #16]
 80088a6:	9301      	str	r3, [sp, #4]
 80088a8:	2d00      	cmp	r5, #0
 80088aa:	dd05      	ble.n	80088b8 <_dtoa_r+0x9b8>
 80088ac:	4639      	mov	r1, r7
 80088ae:	462a      	mov	r2, r5
 80088b0:	4620      	mov	r0, r4
 80088b2:	f000 ffdb 	bl	800986c <__lshift>
 80088b6:	4607      	mov	r7, r0
 80088b8:	f1b8 0f00 	cmp.w	r8, #0
 80088bc:	d05b      	beq.n	8008976 <_dtoa_r+0xa76>
 80088be:	6879      	ldr	r1, [r7, #4]
 80088c0:	4620      	mov	r0, r4
 80088c2:	f000 fd79 	bl	80093b8 <_Balloc>
 80088c6:	4605      	mov	r5, r0
 80088c8:	b928      	cbnz	r0, 80088d6 <_dtoa_r+0x9d6>
 80088ca:	4b83      	ldr	r3, [pc, #524]	; (8008ad8 <_dtoa_r+0xbd8>)
 80088cc:	4602      	mov	r2, r0
 80088ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 80088d2:	f7ff bb2e 	b.w	8007f32 <_dtoa_r+0x32>
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	3202      	adds	r2, #2
 80088da:	0092      	lsls	r2, r2, #2
 80088dc:	f107 010c 	add.w	r1, r7, #12
 80088e0:	300c      	adds	r0, #12
 80088e2:	f7ff fa64 	bl	8007dae <memcpy>
 80088e6:	2201      	movs	r2, #1
 80088e8:	4629      	mov	r1, r5
 80088ea:	4620      	mov	r0, r4
 80088ec:	f000 ffbe 	bl	800986c <__lshift>
 80088f0:	9b00      	ldr	r3, [sp, #0]
 80088f2:	3301      	adds	r3, #1
 80088f4:	9304      	str	r3, [sp, #16]
 80088f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088fa:	4413      	add	r3, r2
 80088fc:	9308      	str	r3, [sp, #32]
 80088fe:	9b02      	ldr	r3, [sp, #8]
 8008900:	f003 0301 	and.w	r3, r3, #1
 8008904:	46b8      	mov	r8, r7
 8008906:	9306      	str	r3, [sp, #24]
 8008908:	4607      	mov	r7, r0
 800890a:	9b04      	ldr	r3, [sp, #16]
 800890c:	4631      	mov	r1, r6
 800890e:	3b01      	subs	r3, #1
 8008910:	4650      	mov	r0, sl
 8008912:	9301      	str	r3, [sp, #4]
 8008914:	f7ff fa6a 	bl	8007dec <quorem>
 8008918:	4641      	mov	r1, r8
 800891a:	9002      	str	r0, [sp, #8]
 800891c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008920:	4650      	mov	r0, sl
 8008922:	f001 f80f 	bl	8009944 <__mcmp>
 8008926:	463a      	mov	r2, r7
 8008928:	9005      	str	r0, [sp, #20]
 800892a:	4631      	mov	r1, r6
 800892c:	4620      	mov	r0, r4
 800892e:	f001 f825 	bl	800997c <__mdiff>
 8008932:	68c2      	ldr	r2, [r0, #12]
 8008934:	4605      	mov	r5, r0
 8008936:	bb02      	cbnz	r2, 800897a <_dtoa_r+0xa7a>
 8008938:	4601      	mov	r1, r0
 800893a:	4650      	mov	r0, sl
 800893c:	f001 f802 	bl	8009944 <__mcmp>
 8008940:	4602      	mov	r2, r0
 8008942:	4629      	mov	r1, r5
 8008944:	4620      	mov	r0, r4
 8008946:	9209      	str	r2, [sp, #36]	; 0x24
 8008948:	f000 fd76 	bl	8009438 <_Bfree>
 800894c:	9b07      	ldr	r3, [sp, #28]
 800894e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008950:	9d04      	ldr	r5, [sp, #16]
 8008952:	ea43 0102 	orr.w	r1, r3, r2
 8008956:	9b06      	ldr	r3, [sp, #24]
 8008958:	4319      	orrs	r1, r3
 800895a:	d110      	bne.n	800897e <_dtoa_r+0xa7e>
 800895c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008960:	d029      	beq.n	80089b6 <_dtoa_r+0xab6>
 8008962:	9b05      	ldr	r3, [sp, #20]
 8008964:	2b00      	cmp	r3, #0
 8008966:	dd02      	ble.n	800896e <_dtoa_r+0xa6e>
 8008968:	9b02      	ldr	r3, [sp, #8]
 800896a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800896e:	9b01      	ldr	r3, [sp, #4]
 8008970:	f883 9000 	strb.w	r9, [r3]
 8008974:	e774      	b.n	8008860 <_dtoa_r+0x960>
 8008976:	4638      	mov	r0, r7
 8008978:	e7ba      	b.n	80088f0 <_dtoa_r+0x9f0>
 800897a:	2201      	movs	r2, #1
 800897c:	e7e1      	b.n	8008942 <_dtoa_r+0xa42>
 800897e:	9b05      	ldr	r3, [sp, #20]
 8008980:	2b00      	cmp	r3, #0
 8008982:	db04      	blt.n	800898e <_dtoa_r+0xa8e>
 8008984:	9907      	ldr	r1, [sp, #28]
 8008986:	430b      	orrs	r3, r1
 8008988:	9906      	ldr	r1, [sp, #24]
 800898a:	430b      	orrs	r3, r1
 800898c:	d120      	bne.n	80089d0 <_dtoa_r+0xad0>
 800898e:	2a00      	cmp	r2, #0
 8008990:	dded      	ble.n	800896e <_dtoa_r+0xa6e>
 8008992:	4651      	mov	r1, sl
 8008994:	2201      	movs	r2, #1
 8008996:	4620      	mov	r0, r4
 8008998:	f000 ff68 	bl	800986c <__lshift>
 800899c:	4631      	mov	r1, r6
 800899e:	4682      	mov	sl, r0
 80089a0:	f000 ffd0 	bl	8009944 <__mcmp>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	dc03      	bgt.n	80089b0 <_dtoa_r+0xab0>
 80089a8:	d1e1      	bne.n	800896e <_dtoa_r+0xa6e>
 80089aa:	f019 0f01 	tst.w	r9, #1
 80089ae:	d0de      	beq.n	800896e <_dtoa_r+0xa6e>
 80089b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80089b4:	d1d8      	bne.n	8008968 <_dtoa_r+0xa68>
 80089b6:	9a01      	ldr	r2, [sp, #4]
 80089b8:	2339      	movs	r3, #57	; 0x39
 80089ba:	7013      	strb	r3, [r2, #0]
 80089bc:	462b      	mov	r3, r5
 80089be:	461d      	mov	r5, r3
 80089c0:	3b01      	subs	r3, #1
 80089c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80089c6:	2a39      	cmp	r2, #57	; 0x39
 80089c8:	d06c      	beq.n	8008aa4 <_dtoa_r+0xba4>
 80089ca:	3201      	adds	r2, #1
 80089cc:	701a      	strb	r2, [r3, #0]
 80089ce:	e747      	b.n	8008860 <_dtoa_r+0x960>
 80089d0:	2a00      	cmp	r2, #0
 80089d2:	dd07      	ble.n	80089e4 <_dtoa_r+0xae4>
 80089d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80089d8:	d0ed      	beq.n	80089b6 <_dtoa_r+0xab6>
 80089da:	9a01      	ldr	r2, [sp, #4]
 80089dc:	f109 0301 	add.w	r3, r9, #1
 80089e0:	7013      	strb	r3, [r2, #0]
 80089e2:	e73d      	b.n	8008860 <_dtoa_r+0x960>
 80089e4:	9b04      	ldr	r3, [sp, #16]
 80089e6:	9a08      	ldr	r2, [sp, #32]
 80089e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d043      	beq.n	8008a78 <_dtoa_r+0xb78>
 80089f0:	4651      	mov	r1, sl
 80089f2:	2300      	movs	r3, #0
 80089f4:	220a      	movs	r2, #10
 80089f6:	4620      	mov	r0, r4
 80089f8:	f000 fd40 	bl	800947c <__multadd>
 80089fc:	45b8      	cmp	r8, r7
 80089fe:	4682      	mov	sl, r0
 8008a00:	f04f 0300 	mov.w	r3, #0
 8008a04:	f04f 020a 	mov.w	r2, #10
 8008a08:	4641      	mov	r1, r8
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	d107      	bne.n	8008a1e <_dtoa_r+0xb1e>
 8008a0e:	f000 fd35 	bl	800947c <__multadd>
 8008a12:	4680      	mov	r8, r0
 8008a14:	4607      	mov	r7, r0
 8008a16:	9b04      	ldr	r3, [sp, #16]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	9304      	str	r3, [sp, #16]
 8008a1c:	e775      	b.n	800890a <_dtoa_r+0xa0a>
 8008a1e:	f000 fd2d 	bl	800947c <__multadd>
 8008a22:	4639      	mov	r1, r7
 8008a24:	4680      	mov	r8, r0
 8008a26:	2300      	movs	r3, #0
 8008a28:	220a      	movs	r2, #10
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f000 fd26 	bl	800947c <__multadd>
 8008a30:	4607      	mov	r7, r0
 8008a32:	e7f0      	b.n	8008a16 <_dtoa_r+0xb16>
 8008a34:	9b04      	ldr	r3, [sp, #16]
 8008a36:	9301      	str	r3, [sp, #4]
 8008a38:	9d00      	ldr	r5, [sp, #0]
 8008a3a:	4631      	mov	r1, r6
 8008a3c:	4650      	mov	r0, sl
 8008a3e:	f7ff f9d5 	bl	8007dec <quorem>
 8008a42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008a46:	9b00      	ldr	r3, [sp, #0]
 8008a48:	f805 9b01 	strb.w	r9, [r5], #1
 8008a4c:	1aea      	subs	r2, r5, r3
 8008a4e:	9b01      	ldr	r3, [sp, #4]
 8008a50:	4293      	cmp	r3, r2
 8008a52:	dd07      	ble.n	8008a64 <_dtoa_r+0xb64>
 8008a54:	4651      	mov	r1, sl
 8008a56:	2300      	movs	r3, #0
 8008a58:	220a      	movs	r2, #10
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f000 fd0e 	bl	800947c <__multadd>
 8008a60:	4682      	mov	sl, r0
 8008a62:	e7ea      	b.n	8008a3a <_dtoa_r+0xb3a>
 8008a64:	9b01      	ldr	r3, [sp, #4]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	bfc8      	it	gt
 8008a6a:	461d      	movgt	r5, r3
 8008a6c:	9b00      	ldr	r3, [sp, #0]
 8008a6e:	bfd8      	it	le
 8008a70:	2501      	movle	r5, #1
 8008a72:	441d      	add	r5, r3
 8008a74:	f04f 0800 	mov.w	r8, #0
 8008a78:	4651      	mov	r1, sl
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f000 fef5 	bl	800986c <__lshift>
 8008a82:	4631      	mov	r1, r6
 8008a84:	4682      	mov	sl, r0
 8008a86:	f000 ff5d 	bl	8009944 <__mcmp>
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	dc96      	bgt.n	80089bc <_dtoa_r+0xabc>
 8008a8e:	d102      	bne.n	8008a96 <_dtoa_r+0xb96>
 8008a90:	f019 0f01 	tst.w	r9, #1
 8008a94:	d192      	bne.n	80089bc <_dtoa_r+0xabc>
 8008a96:	462b      	mov	r3, r5
 8008a98:	461d      	mov	r5, r3
 8008a9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a9e:	2a30      	cmp	r2, #48	; 0x30
 8008aa0:	d0fa      	beq.n	8008a98 <_dtoa_r+0xb98>
 8008aa2:	e6dd      	b.n	8008860 <_dtoa_r+0x960>
 8008aa4:	9a00      	ldr	r2, [sp, #0]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d189      	bne.n	80089be <_dtoa_r+0xabe>
 8008aaa:	f10b 0b01 	add.w	fp, fp, #1
 8008aae:	2331      	movs	r3, #49	; 0x31
 8008ab0:	e796      	b.n	80089e0 <_dtoa_r+0xae0>
 8008ab2:	4b0a      	ldr	r3, [pc, #40]	; (8008adc <_dtoa_r+0xbdc>)
 8008ab4:	f7ff ba99 	b.w	8007fea <_dtoa_r+0xea>
 8008ab8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	f47f aa6d 	bne.w	8007f9a <_dtoa_r+0x9a>
 8008ac0:	4b07      	ldr	r3, [pc, #28]	; (8008ae0 <_dtoa_r+0xbe0>)
 8008ac2:	f7ff ba92 	b.w	8007fea <_dtoa_r+0xea>
 8008ac6:	9b01      	ldr	r3, [sp, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	dcb5      	bgt.n	8008a38 <_dtoa_r+0xb38>
 8008acc:	9b07      	ldr	r3, [sp, #28]
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	f73f aeb1 	bgt.w	8008836 <_dtoa_r+0x936>
 8008ad4:	e7b0      	b.n	8008a38 <_dtoa_r+0xb38>
 8008ad6:	bf00      	nop
 8008ad8:	0800aa9e 	.word	0x0800aa9e
 8008adc:	0800a9f1 	.word	0x0800a9f1
 8008ae0:	0800aa22 	.word	0x0800aa22

08008ae4 <_free_r>:
 8008ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ae6:	2900      	cmp	r1, #0
 8008ae8:	d044      	beq.n	8008b74 <_free_r+0x90>
 8008aea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008aee:	9001      	str	r0, [sp, #4]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f1a1 0404 	sub.w	r4, r1, #4
 8008af6:	bfb8      	it	lt
 8008af8:	18e4      	addlt	r4, r4, r3
 8008afa:	f000 fc51 	bl	80093a0 <__malloc_lock>
 8008afe:	4a1e      	ldr	r2, [pc, #120]	; (8008b78 <_free_r+0x94>)
 8008b00:	9801      	ldr	r0, [sp, #4]
 8008b02:	6813      	ldr	r3, [r2, #0]
 8008b04:	b933      	cbnz	r3, 8008b14 <_free_r+0x30>
 8008b06:	6063      	str	r3, [r4, #4]
 8008b08:	6014      	str	r4, [r2, #0]
 8008b0a:	b003      	add	sp, #12
 8008b0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b10:	f000 bc4c 	b.w	80093ac <__malloc_unlock>
 8008b14:	42a3      	cmp	r3, r4
 8008b16:	d908      	bls.n	8008b2a <_free_r+0x46>
 8008b18:	6825      	ldr	r5, [r4, #0]
 8008b1a:	1961      	adds	r1, r4, r5
 8008b1c:	428b      	cmp	r3, r1
 8008b1e:	bf01      	itttt	eq
 8008b20:	6819      	ldreq	r1, [r3, #0]
 8008b22:	685b      	ldreq	r3, [r3, #4]
 8008b24:	1949      	addeq	r1, r1, r5
 8008b26:	6021      	streq	r1, [r4, #0]
 8008b28:	e7ed      	b.n	8008b06 <_free_r+0x22>
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	b10b      	cbz	r3, 8008b34 <_free_r+0x50>
 8008b30:	42a3      	cmp	r3, r4
 8008b32:	d9fa      	bls.n	8008b2a <_free_r+0x46>
 8008b34:	6811      	ldr	r1, [r2, #0]
 8008b36:	1855      	adds	r5, r2, r1
 8008b38:	42a5      	cmp	r5, r4
 8008b3a:	d10b      	bne.n	8008b54 <_free_r+0x70>
 8008b3c:	6824      	ldr	r4, [r4, #0]
 8008b3e:	4421      	add	r1, r4
 8008b40:	1854      	adds	r4, r2, r1
 8008b42:	42a3      	cmp	r3, r4
 8008b44:	6011      	str	r1, [r2, #0]
 8008b46:	d1e0      	bne.n	8008b0a <_free_r+0x26>
 8008b48:	681c      	ldr	r4, [r3, #0]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	6053      	str	r3, [r2, #4]
 8008b4e:	440c      	add	r4, r1
 8008b50:	6014      	str	r4, [r2, #0]
 8008b52:	e7da      	b.n	8008b0a <_free_r+0x26>
 8008b54:	d902      	bls.n	8008b5c <_free_r+0x78>
 8008b56:	230c      	movs	r3, #12
 8008b58:	6003      	str	r3, [r0, #0]
 8008b5a:	e7d6      	b.n	8008b0a <_free_r+0x26>
 8008b5c:	6825      	ldr	r5, [r4, #0]
 8008b5e:	1961      	adds	r1, r4, r5
 8008b60:	428b      	cmp	r3, r1
 8008b62:	bf04      	itt	eq
 8008b64:	6819      	ldreq	r1, [r3, #0]
 8008b66:	685b      	ldreq	r3, [r3, #4]
 8008b68:	6063      	str	r3, [r4, #4]
 8008b6a:	bf04      	itt	eq
 8008b6c:	1949      	addeq	r1, r1, r5
 8008b6e:	6021      	streq	r1, [r4, #0]
 8008b70:	6054      	str	r4, [r2, #4]
 8008b72:	e7ca      	b.n	8008b0a <_free_r+0x26>
 8008b74:	b003      	add	sp, #12
 8008b76:	bd30      	pop	{r4, r5, pc}
 8008b78:	20000720 	.word	0x20000720

08008b7c <rshift>:
 8008b7c:	6903      	ldr	r3, [r0, #16]
 8008b7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008b82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b86:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008b8a:	f100 0414 	add.w	r4, r0, #20
 8008b8e:	dd45      	ble.n	8008c1c <rshift+0xa0>
 8008b90:	f011 011f 	ands.w	r1, r1, #31
 8008b94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008b98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008b9c:	d10c      	bne.n	8008bb8 <rshift+0x3c>
 8008b9e:	f100 0710 	add.w	r7, r0, #16
 8008ba2:	4629      	mov	r1, r5
 8008ba4:	42b1      	cmp	r1, r6
 8008ba6:	d334      	bcc.n	8008c12 <rshift+0x96>
 8008ba8:	1a9b      	subs	r3, r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	1eea      	subs	r2, r5, #3
 8008bae:	4296      	cmp	r6, r2
 8008bb0:	bf38      	it	cc
 8008bb2:	2300      	movcc	r3, #0
 8008bb4:	4423      	add	r3, r4
 8008bb6:	e015      	b.n	8008be4 <rshift+0x68>
 8008bb8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008bbc:	f1c1 0820 	rsb	r8, r1, #32
 8008bc0:	40cf      	lsrs	r7, r1
 8008bc2:	f105 0e04 	add.w	lr, r5, #4
 8008bc6:	46a1      	mov	r9, r4
 8008bc8:	4576      	cmp	r6, lr
 8008bca:	46f4      	mov	ip, lr
 8008bcc:	d815      	bhi.n	8008bfa <rshift+0x7e>
 8008bce:	1a9a      	subs	r2, r3, r2
 8008bd0:	0092      	lsls	r2, r2, #2
 8008bd2:	3a04      	subs	r2, #4
 8008bd4:	3501      	adds	r5, #1
 8008bd6:	42ae      	cmp	r6, r5
 8008bd8:	bf38      	it	cc
 8008bda:	2200      	movcc	r2, #0
 8008bdc:	18a3      	adds	r3, r4, r2
 8008bde:	50a7      	str	r7, [r4, r2]
 8008be0:	b107      	cbz	r7, 8008be4 <rshift+0x68>
 8008be2:	3304      	adds	r3, #4
 8008be4:	1b1a      	subs	r2, r3, r4
 8008be6:	42a3      	cmp	r3, r4
 8008be8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008bec:	bf08      	it	eq
 8008bee:	2300      	moveq	r3, #0
 8008bf0:	6102      	str	r2, [r0, #16]
 8008bf2:	bf08      	it	eq
 8008bf4:	6143      	streq	r3, [r0, #20]
 8008bf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bfa:	f8dc c000 	ldr.w	ip, [ip]
 8008bfe:	fa0c fc08 	lsl.w	ip, ip, r8
 8008c02:	ea4c 0707 	orr.w	r7, ip, r7
 8008c06:	f849 7b04 	str.w	r7, [r9], #4
 8008c0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008c0e:	40cf      	lsrs	r7, r1
 8008c10:	e7da      	b.n	8008bc8 <rshift+0x4c>
 8008c12:	f851 cb04 	ldr.w	ip, [r1], #4
 8008c16:	f847 cf04 	str.w	ip, [r7, #4]!
 8008c1a:	e7c3      	b.n	8008ba4 <rshift+0x28>
 8008c1c:	4623      	mov	r3, r4
 8008c1e:	e7e1      	b.n	8008be4 <rshift+0x68>

08008c20 <__hexdig_fun>:
 8008c20:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008c24:	2b09      	cmp	r3, #9
 8008c26:	d802      	bhi.n	8008c2e <__hexdig_fun+0xe>
 8008c28:	3820      	subs	r0, #32
 8008c2a:	b2c0      	uxtb	r0, r0
 8008c2c:	4770      	bx	lr
 8008c2e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008c32:	2b05      	cmp	r3, #5
 8008c34:	d801      	bhi.n	8008c3a <__hexdig_fun+0x1a>
 8008c36:	3847      	subs	r0, #71	; 0x47
 8008c38:	e7f7      	b.n	8008c2a <__hexdig_fun+0xa>
 8008c3a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008c3e:	2b05      	cmp	r3, #5
 8008c40:	d801      	bhi.n	8008c46 <__hexdig_fun+0x26>
 8008c42:	3827      	subs	r0, #39	; 0x27
 8008c44:	e7f1      	b.n	8008c2a <__hexdig_fun+0xa>
 8008c46:	2000      	movs	r0, #0
 8008c48:	4770      	bx	lr
	...

08008c4c <__gethex>:
 8008c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c50:	4617      	mov	r7, r2
 8008c52:	680a      	ldr	r2, [r1, #0]
 8008c54:	b085      	sub	sp, #20
 8008c56:	f102 0b02 	add.w	fp, r2, #2
 8008c5a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008c5e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008c62:	4681      	mov	r9, r0
 8008c64:	468a      	mov	sl, r1
 8008c66:	9302      	str	r3, [sp, #8]
 8008c68:	32fe      	adds	r2, #254	; 0xfe
 8008c6a:	eb02 030b 	add.w	r3, r2, fp
 8008c6e:	46d8      	mov	r8, fp
 8008c70:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008c74:	9301      	str	r3, [sp, #4]
 8008c76:	2830      	cmp	r0, #48	; 0x30
 8008c78:	d0f7      	beq.n	8008c6a <__gethex+0x1e>
 8008c7a:	f7ff ffd1 	bl	8008c20 <__hexdig_fun>
 8008c7e:	4604      	mov	r4, r0
 8008c80:	2800      	cmp	r0, #0
 8008c82:	d138      	bne.n	8008cf6 <__gethex+0xaa>
 8008c84:	49a7      	ldr	r1, [pc, #668]	; (8008f24 <__gethex+0x2d8>)
 8008c86:	2201      	movs	r2, #1
 8008c88:	4640      	mov	r0, r8
 8008c8a:	f7fe fff4 	bl	8007c76 <strncmp>
 8008c8e:	4606      	mov	r6, r0
 8008c90:	2800      	cmp	r0, #0
 8008c92:	d169      	bne.n	8008d68 <__gethex+0x11c>
 8008c94:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008c98:	465d      	mov	r5, fp
 8008c9a:	f7ff ffc1 	bl	8008c20 <__hexdig_fun>
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	d064      	beq.n	8008d6c <__gethex+0x120>
 8008ca2:	465a      	mov	r2, fp
 8008ca4:	7810      	ldrb	r0, [r2, #0]
 8008ca6:	2830      	cmp	r0, #48	; 0x30
 8008ca8:	4690      	mov	r8, r2
 8008caa:	f102 0201 	add.w	r2, r2, #1
 8008cae:	d0f9      	beq.n	8008ca4 <__gethex+0x58>
 8008cb0:	f7ff ffb6 	bl	8008c20 <__hexdig_fun>
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	fab0 f480 	clz	r4, r0
 8008cba:	0964      	lsrs	r4, r4, #5
 8008cbc:	465e      	mov	r6, fp
 8008cbe:	9301      	str	r3, [sp, #4]
 8008cc0:	4642      	mov	r2, r8
 8008cc2:	4615      	mov	r5, r2
 8008cc4:	3201      	adds	r2, #1
 8008cc6:	7828      	ldrb	r0, [r5, #0]
 8008cc8:	f7ff ffaa 	bl	8008c20 <__hexdig_fun>
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	d1f8      	bne.n	8008cc2 <__gethex+0x76>
 8008cd0:	4994      	ldr	r1, [pc, #592]	; (8008f24 <__gethex+0x2d8>)
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	f7fe ffce 	bl	8007c76 <strncmp>
 8008cda:	b978      	cbnz	r0, 8008cfc <__gethex+0xb0>
 8008cdc:	b946      	cbnz	r6, 8008cf0 <__gethex+0xa4>
 8008cde:	1c6e      	adds	r6, r5, #1
 8008ce0:	4632      	mov	r2, r6
 8008ce2:	4615      	mov	r5, r2
 8008ce4:	3201      	adds	r2, #1
 8008ce6:	7828      	ldrb	r0, [r5, #0]
 8008ce8:	f7ff ff9a 	bl	8008c20 <__hexdig_fun>
 8008cec:	2800      	cmp	r0, #0
 8008cee:	d1f8      	bne.n	8008ce2 <__gethex+0x96>
 8008cf0:	1b73      	subs	r3, r6, r5
 8008cf2:	009e      	lsls	r6, r3, #2
 8008cf4:	e004      	b.n	8008d00 <__gethex+0xb4>
 8008cf6:	2400      	movs	r4, #0
 8008cf8:	4626      	mov	r6, r4
 8008cfa:	e7e1      	b.n	8008cc0 <__gethex+0x74>
 8008cfc:	2e00      	cmp	r6, #0
 8008cfe:	d1f7      	bne.n	8008cf0 <__gethex+0xa4>
 8008d00:	782b      	ldrb	r3, [r5, #0]
 8008d02:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008d06:	2b50      	cmp	r3, #80	; 0x50
 8008d08:	d13d      	bne.n	8008d86 <__gethex+0x13a>
 8008d0a:	786b      	ldrb	r3, [r5, #1]
 8008d0c:	2b2b      	cmp	r3, #43	; 0x2b
 8008d0e:	d02f      	beq.n	8008d70 <__gethex+0x124>
 8008d10:	2b2d      	cmp	r3, #45	; 0x2d
 8008d12:	d031      	beq.n	8008d78 <__gethex+0x12c>
 8008d14:	1c69      	adds	r1, r5, #1
 8008d16:	f04f 0b00 	mov.w	fp, #0
 8008d1a:	7808      	ldrb	r0, [r1, #0]
 8008d1c:	f7ff ff80 	bl	8008c20 <__hexdig_fun>
 8008d20:	1e42      	subs	r2, r0, #1
 8008d22:	b2d2      	uxtb	r2, r2
 8008d24:	2a18      	cmp	r2, #24
 8008d26:	d82e      	bhi.n	8008d86 <__gethex+0x13a>
 8008d28:	f1a0 0210 	sub.w	r2, r0, #16
 8008d2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008d30:	f7ff ff76 	bl	8008c20 <__hexdig_fun>
 8008d34:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d38:	fa5f fc8c 	uxtb.w	ip, ip
 8008d3c:	f1bc 0f18 	cmp.w	ip, #24
 8008d40:	d91d      	bls.n	8008d7e <__gethex+0x132>
 8008d42:	f1bb 0f00 	cmp.w	fp, #0
 8008d46:	d000      	beq.n	8008d4a <__gethex+0xfe>
 8008d48:	4252      	negs	r2, r2
 8008d4a:	4416      	add	r6, r2
 8008d4c:	f8ca 1000 	str.w	r1, [sl]
 8008d50:	b1dc      	cbz	r4, 8008d8a <__gethex+0x13e>
 8008d52:	9b01      	ldr	r3, [sp, #4]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	bf14      	ite	ne
 8008d58:	f04f 0800 	movne.w	r8, #0
 8008d5c:	f04f 0806 	moveq.w	r8, #6
 8008d60:	4640      	mov	r0, r8
 8008d62:	b005      	add	sp, #20
 8008d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d68:	4645      	mov	r5, r8
 8008d6a:	4626      	mov	r6, r4
 8008d6c:	2401      	movs	r4, #1
 8008d6e:	e7c7      	b.n	8008d00 <__gethex+0xb4>
 8008d70:	f04f 0b00 	mov.w	fp, #0
 8008d74:	1ca9      	adds	r1, r5, #2
 8008d76:	e7d0      	b.n	8008d1a <__gethex+0xce>
 8008d78:	f04f 0b01 	mov.w	fp, #1
 8008d7c:	e7fa      	b.n	8008d74 <__gethex+0x128>
 8008d7e:	230a      	movs	r3, #10
 8008d80:	fb03 0002 	mla	r0, r3, r2, r0
 8008d84:	e7d0      	b.n	8008d28 <__gethex+0xdc>
 8008d86:	4629      	mov	r1, r5
 8008d88:	e7e0      	b.n	8008d4c <__gethex+0x100>
 8008d8a:	eba5 0308 	sub.w	r3, r5, r8
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	4621      	mov	r1, r4
 8008d92:	2b07      	cmp	r3, #7
 8008d94:	dc0a      	bgt.n	8008dac <__gethex+0x160>
 8008d96:	4648      	mov	r0, r9
 8008d98:	f000 fb0e 	bl	80093b8 <_Balloc>
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	b940      	cbnz	r0, 8008db2 <__gethex+0x166>
 8008da0:	4b61      	ldr	r3, [pc, #388]	; (8008f28 <__gethex+0x2dc>)
 8008da2:	4602      	mov	r2, r0
 8008da4:	21e4      	movs	r1, #228	; 0xe4
 8008da6:	4861      	ldr	r0, [pc, #388]	; (8008f2c <__gethex+0x2e0>)
 8008da8:	f001 f9f0 	bl	800a18c <__assert_func>
 8008dac:	3101      	adds	r1, #1
 8008dae:	105b      	asrs	r3, r3, #1
 8008db0:	e7ef      	b.n	8008d92 <__gethex+0x146>
 8008db2:	f100 0a14 	add.w	sl, r0, #20
 8008db6:	2300      	movs	r3, #0
 8008db8:	495a      	ldr	r1, [pc, #360]	; (8008f24 <__gethex+0x2d8>)
 8008dba:	f8cd a004 	str.w	sl, [sp, #4]
 8008dbe:	469b      	mov	fp, r3
 8008dc0:	45a8      	cmp	r8, r5
 8008dc2:	d342      	bcc.n	8008e4a <__gethex+0x1fe>
 8008dc4:	9801      	ldr	r0, [sp, #4]
 8008dc6:	f840 bb04 	str.w	fp, [r0], #4
 8008dca:	eba0 000a 	sub.w	r0, r0, sl
 8008dce:	1080      	asrs	r0, r0, #2
 8008dd0:	6120      	str	r0, [r4, #16]
 8008dd2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8008dd6:	4658      	mov	r0, fp
 8008dd8:	f000 fbe0 	bl	800959c <__hi0bits>
 8008ddc:	683d      	ldr	r5, [r7, #0]
 8008dde:	eba8 0000 	sub.w	r0, r8, r0
 8008de2:	42a8      	cmp	r0, r5
 8008de4:	dd59      	ble.n	8008e9a <__gethex+0x24e>
 8008de6:	eba0 0805 	sub.w	r8, r0, r5
 8008dea:	4641      	mov	r1, r8
 8008dec:	4620      	mov	r0, r4
 8008dee:	f000 ff6f 	bl	8009cd0 <__any_on>
 8008df2:	4683      	mov	fp, r0
 8008df4:	b1b8      	cbz	r0, 8008e26 <__gethex+0x1da>
 8008df6:	f108 33ff 	add.w	r3, r8, #4294967295
 8008dfa:	1159      	asrs	r1, r3, #5
 8008dfc:	f003 021f 	and.w	r2, r3, #31
 8008e00:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008e04:	f04f 0b01 	mov.w	fp, #1
 8008e08:	fa0b f202 	lsl.w	r2, fp, r2
 8008e0c:	420a      	tst	r2, r1
 8008e0e:	d00a      	beq.n	8008e26 <__gethex+0x1da>
 8008e10:	455b      	cmp	r3, fp
 8008e12:	dd06      	ble.n	8008e22 <__gethex+0x1d6>
 8008e14:	f1a8 0102 	sub.w	r1, r8, #2
 8008e18:	4620      	mov	r0, r4
 8008e1a:	f000 ff59 	bl	8009cd0 <__any_on>
 8008e1e:	2800      	cmp	r0, #0
 8008e20:	d138      	bne.n	8008e94 <__gethex+0x248>
 8008e22:	f04f 0b02 	mov.w	fp, #2
 8008e26:	4641      	mov	r1, r8
 8008e28:	4620      	mov	r0, r4
 8008e2a:	f7ff fea7 	bl	8008b7c <rshift>
 8008e2e:	4446      	add	r6, r8
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	42b3      	cmp	r3, r6
 8008e34:	da41      	bge.n	8008eba <__gethex+0x26e>
 8008e36:	4621      	mov	r1, r4
 8008e38:	4648      	mov	r0, r9
 8008e3a:	f000 fafd 	bl	8009438 <_Bfree>
 8008e3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e40:	2300      	movs	r3, #0
 8008e42:	6013      	str	r3, [r2, #0]
 8008e44:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008e48:	e78a      	b.n	8008d60 <__gethex+0x114>
 8008e4a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008e4e:	2a2e      	cmp	r2, #46	; 0x2e
 8008e50:	d014      	beq.n	8008e7c <__gethex+0x230>
 8008e52:	2b20      	cmp	r3, #32
 8008e54:	d106      	bne.n	8008e64 <__gethex+0x218>
 8008e56:	9b01      	ldr	r3, [sp, #4]
 8008e58:	f843 bb04 	str.w	fp, [r3], #4
 8008e5c:	f04f 0b00 	mov.w	fp, #0
 8008e60:	9301      	str	r3, [sp, #4]
 8008e62:	465b      	mov	r3, fp
 8008e64:	7828      	ldrb	r0, [r5, #0]
 8008e66:	9303      	str	r3, [sp, #12]
 8008e68:	f7ff feda 	bl	8008c20 <__hexdig_fun>
 8008e6c:	9b03      	ldr	r3, [sp, #12]
 8008e6e:	f000 000f 	and.w	r0, r0, #15
 8008e72:	4098      	lsls	r0, r3
 8008e74:	ea4b 0b00 	orr.w	fp, fp, r0
 8008e78:	3304      	adds	r3, #4
 8008e7a:	e7a1      	b.n	8008dc0 <__gethex+0x174>
 8008e7c:	45a8      	cmp	r8, r5
 8008e7e:	d8e8      	bhi.n	8008e52 <__gethex+0x206>
 8008e80:	2201      	movs	r2, #1
 8008e82:	4628      	mov	r0, r5
 8008e84:	9303      	str	r3, [sp, #12]
 8008e86:	f7fe fef6 	bl	8007c76 <strncmp>
 8008e8a:	4926      	ldr	r1, [pc, #152]	; (8008f24 <__gethex+0x2d8>)
 8008e8c:	9b03      	ldr	r3, [sp, #12]
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	d1df      	bne.n	8008e52 <__gethex+0x206>
 8008e92:	e795      	b.n	8008dc0 <__gethex+0x174>
 8008e94:	f04f 0b03 	mov.w	fp, #3
 8008e98:	e7c5      	b.n	8008e26 <__gethex+0x1da>
 8008e9a:	da0b      	bge.n	8008eb4 <__gethex+0x268>
 8008e9c:	eba5 0800 	sub.w	r8, r5, r0
 8008ea0:	4621      	mov	r1, r4
 8008ea2:	4642      	mov	r2, r8
 8008ea4:	4648      	mov	r0, r9
 8008ea6:	f000 fce1 	bl	800986c <__lshift>
 8008eaa:	eba6 0608 	sub.w	r6, r6, r8
 8008eae:	4604      	mov	r4, r0
 8008eb0:	f100 0a14 	add.w	sl, r0, #20
 8008eb4:	f04f 0b00 	mov.w	fp, #0
 8008eb8:	e7ba      	b.n	8008e30 <__gethex+0x1e4>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	42b3      	cmp	r3, r6
 8008ebe:	dd73      	ble.n	8008fa8 <__gethex+0x35c>
 8008ec0:	1b9e      	subs	r6, r3, r6
 8008ec2:	42b5      	cmp	r5, r6
 8008ec4:	dc34      	bgt.n	8008f30 <__gethex+0x2e4>
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	d023      	beq.n	8008f14 <__gethex+0x2c8>
 8008ecc:	2b03      	cmp	r3, #3
 8008ece:	d025      	beq.n	8008f1c <__gethex+0x2d0>
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d115      	bne.n	8008f00 <__gethex+0x2b4>
 8008ed4:	42b5      	cmp	r5, r6
 8008ed6:	d113      	bne.n	8008f00 <__gethex+0x2b4>
 8008ed8:	2d01      	cmp	r5, #1
 8008eda:	d10b      	bne.n	8008ef4 <__gethex+0x2a8>
 8008edc:	9a02      	ldr	r2, [sp, #8]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6013      	str	r3, [r2, #0]
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	6123      	str	r3, [r4, #16]
 8008ee6:	f8ca 3000 	str.w	r3, [sl]
 8008eea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008eec:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008ef0:	601c      	str	r4, [r3, #0]
 8008ef2:	e735      	b.n	8008d60 <__gethex+0x114>
 8008ef4:	1e69      	subs	r1, r5, #1
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	f000 feea 	bl	8009cd0 <__any_on>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	d1ed      	bne.n	8008edc <__gethex+0x290>
 8008f00:	4621      	mov	r1, r4
 8008f02:	4648      	mov	r0, r9
 8008f04:	f000 fa98 	bl	8009438 <_Bfree>
 8008f08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	6013      	str	r3, [r2, #0]
 8008f0e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008f12:	e725      	b.n	8008d60 <__gethex+0x114>
 8008f14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1f2      	bne.n	8008f00 <__gethex+0x2b4>
 8008f1a:	e7df      	b.n	8008edc <__gethex+0x290>
 8008f1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1dc      	bne.n	8008edc <__gethex+0x290>
 8008f22:	e7ed      	b.n	8008f00 <__gethex+0x2b4>
 8008f24:	0800a888 	.word	0x0800a888
 8008f28:	0800aa9e 	.word	0x0800aa9e
 8008f2c:	0800aaaf 	.word	0x0800aaaf
 8008f30:	f106 38ff 	add.w	r8, r6, #4294967295
 8008f34:	f1bb 0f00 	cmp.w	fp, #0
 8008f38:	d133      	bne.n	8008fa2 <__gethex+0x356>
 8008f3a:	f1b8 0f00 	cmp.w	r8, #0
 8008f3e:	d004      	beq.n	8008f4a <__gethex+0x2fe>
 8008f40:	4641      	mov	r1, r8
 8008f42:	4620      	mov	r0, r4
 8008f44:	f000 fec4 	bl	8009cd0 <__any_on>
 8008f48:	4683      	mov	fp, r0
 8008f4a:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008f4e:	2301      	movs	r3, #1
 8008f50:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008f54:	f008 081f 	and.w	r8, r8, #31
 8008f58:	fa03 f308 	lsl.w	r3, r3, r8
 8008f5c:	4213      	tst	r3, r2
 8008f5e:	4631      	mov	r1, r6
 8008f60:	4620      	mov	r0, r4
 8008f62:	bf18      	it	ne
 8008f64:	f04b 0b02 	orrne.w	fp, fp, #2
 8008f68:	1bad      	subs	r5, r5, r6
 8008f6a:	f7ff fe07 	bl	8008b7c <rshift>
 8008f6e:	687e      	ldr	r6, [r7, #4]
 8008f70:	f04f 0802 	mov.w	r8, #2
 8008f74:	f1bb 0f00 	cmp.w	fp, #0
 8008f78:	d04a      	beq.n	8009010 <__gethex+0x3c4>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2b02      	cmp	r3, #2
 8008f7e:	d016      	beq.n	8008fae <__gethex+0x362>
 8008f80:	2b03      	cmp	r3, #3
 8008f82:	d018      	beq.n	8008fb6 <__gethex+0x36a>
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d109      	bne.n	8008f9c <__gethex+0x350>
 8008f88:	f01b 0f02 	tst.w	fp, #2
 8008f8c:	d006      	beq.n	8008f9c <__gethex+0x350>
 8008f8e:	f8da 3000 	ldr.w	r3, [sl]
 8008f92:	ea4b 0b03 	orr.w	fp, fp, r3
 8008f96:	f01b 0f01 	tst.w	fp, #1
 8008f9a:	d10f      	bne.n	8008fbc <__gethex+0x370>
 8008f9c:	f048 0810 	orr.w	r8, r8, #16
 8008fa0:	e036      	b.n	8009010 <__gethex+0x3c4>
 8008fa2:	f04f 0b01 	mov.w	fp, #1
 8008fa6:	e7d0      	b.n	8008f4a <__gethex+0x2fe>
 8008fa8:	f04f 0801 	mov.w	r8, #1
 8008fac:	e7e2      	b.n	8008f74 <__gethex+0x328>
 8008fae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fb0:	f1c3 0301 	rsb	r3, r3, #1
 8008fb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d0ef      	beq.n	8008f9c <__gethex+0x350>
 8008fbc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008fc0:	f104 0214 	add.w	r2, r4, #20
 8008fc4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008fc8:	9301      	str	r3, [sp, #4]
 8008fca:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008fce:	2300      	movs	r3, #0
 8008fd0:	4694      	mov	ip, r2
 8008fd2:	f852 1b04 	ldr.w	r1, [r2], #4
 8008fd6:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008fda:	d01e      	beq.n	800901a <__gethex+0x3ce>
 8008fdc:	3101      	adds	r1, #1
 8008fde:	f8cc 1000 	str.w	r1, [ip]
 8008fe2:	f1b8 0f02 	cmp.w	r8, #2
 8008fe6:	f104 0214 	add.w	r2, r4, #20
 8008fea:	d13d      	bne.n	8009068 <__gethex+0x41c>
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	42ab      	cmp	r3, r5
 8008ff2:	d10b      	bne.n	800900c <__gethex+0x3c0>
 8008ff4:	1169      	asrs	r1, r5, #5
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	f005 051f 	and.w	r5, r5, #31
 8008ffc:	fa03 f505 	lsl.w	r5, r3, r5
 8009000:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009004:	421d      	tst	r5, r3
 8009006:	bf18      	it	ne
 8009008:	f04f 0801 	movne.w	r8, #1
 800900c:	f048 0820 	orr.w	r8, r8, #32
 8009010:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009012:	601c      	str	r4, [r3, #0]
 8009014:	9b02      	ldr	r3, [sp, #8]
 8009016:	601e      	str	r6, [r3, #0]
 8009018:	e6a2      	b.n	8008d60 <__gethex+0x114>
 800901a:	4290      	cmp	r0, r2
 800901c:	f842 3c04 	str.w	r3, [r2, #-4]
 8009020:	d8d6      	bhi.n	8008fd0 <__gethex+0x384>
 8009022:	68a2      	ldr	r2, [r4, #8]
 8009024:	4593      	cmp	fp, r2
 8009026:	db17      	blt.n	8009058 <__gethex+0x40c>
 8009028:	6861      	ldr	r1, [r4, #4]
 800902a:	4648      	mov	r0, r9
 800902c:	3101      	adds	r1, #1
 800902e:	f000 f9c3 	bl	80093b8 <_Balloc>
 8009032:	4682      	mov	sl, r0
 8009034:	b918      	cbnz	r0, 800903e <__gethex+0x3f2>
 8009036:	4b1b      	ldr	r3, [pc, #108]	; (80090a4 <__gethex+0x458>)
 8009038:	4602      	mov	r2, r0
 800903a:	2184      	movs	r1, #132	; 0x84
 800903c:	e6b3      	b.n	8008da6 <__gethex+0x15a>
 800903e:	6922      	ldr	r2, [r4, #16]
 8009040:	3202      	adds	r2, #2
 8009042:	f104 010c 	add.w	r1, r4, #12
 8009046:	0092      	lsls	r2, r2, #2
 8009048:	300c      	adds	r0, #12
 800904a:	f7fe feb0 	bl	8007dae <memcpy>
 800904e:	4621      	mov	r1, r4
 8009050:	4648      	mov	r0, r9
 8009052:	f000 f9f1 	bl	8009438 <_Bfree>
 8009056:	4654      	mov	r4, sl
 8009058:	6922      	ldr	r2, [r4, #16]
 800905a:	1c51      	adds	r1, r2, #1
 800905c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009060:	6121      	str	r1, [r4, #16]
 8009062:	2101      	movs	r1, #1
 8009064:	6151      	str	r1, [r2, #20]
 8009066:	e7bc      	b.n	8008fe2 <__gethex+0x396>
 8009068:	6921      	ldr	r1, [r4, #16]
 800906a:	4559      	cmp	r1, fp
 800906c:	dd0b      	ble.n	8009086 <__gethex+0x43a>
 800906e:	2101      	movs	r1, #1
 8009070:	4620      	mov	r0, r4
 8009072:	f7ff fd83 	bl	8008b7c <rshift>
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	3601      	adds	r6, #1
 800907a:	42b3      	cmp	r3, r6
 800907c:	f6ff aedb 	blt.w	8008e36 <__gethex+0x1ea>
 8009080:	f04f 0801 	mov.w	r8, #1
 8009084:	e7c2      	b.n	800900c <__gethex+0x3c0>
 8009086:	f015 051f 	ands.w	r5, r5, #31
 800908a:	d0f9      	beq.n	8009080 <__gethex+0x434>
 800908c:	9b01      	ldr	r3, [sp, #4]
 800908e:	441a      	add	r2, r3
 8009090:	f1c5 0520 	rsb	r5, r5, #32
 8009094:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009098:	f000 fa80 	bl	800959c <__hi0bits>
 800909c:	42a8      	cmp	r0, r5
 800909e:	dbe6      	blt.n	800906e <__gethex+0x422>
 80090a0:	e7ee      	b.n	8009080 <__gethex+0x434>
 80090a2:	bf00      	nop
 80090a4:	0800aa9e 	.word	0x0800aa9e

080090a8 <L_shift>:
 80090a8:	f1c2 0208 	rsb	r2, r2, #8
 80090ac:	0092      	lsls	r2, r2, #2
 80090ae:	b570      	push	{r4, r5, r6, lr}
 80090b0:	f1c2 0620 	rsb	r6, r2, #32
 80090b4:	6843      	ldr	r3, [r0, #4]
 80090b6:	6804      	ldr	r4, [r0, #0]
 80090b8:	fa03 f506 	lsl.w	r5, r3, r6
 80090bc:	432c      	orrs	r4, r5
 80090be:	40d3      	lsrs	r3, r2
 80090c0:	6004      	str	r4, [r0, #0]
 80090c2:	f840 3f04 	str.w	r3, [r0, #4]!
 80090c6:	4288      	cmp	r0, r1
 80090c8:	d3f4      	bcc.n	80090b4 <L_shift+0xc>
 80090ca:	bd70      	pop	{r4, r5, r6, pc}

080090cc <__match>:
 80090cc:	b530      	push	{r4, r5, lr}
 80090ce:	6803      	ldr	r3, [r0, #0]
 80090d0:	3301      	adds	r3, #1
 80090d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090d6:	b914      	cbnz	r4, 80090de <__match+0x12>
 80090d8:	6003      	str	r3, [r0, #0]
 80090da:	2001      	movs	r0, #1
 80090dc:	bd30      	pop	{r4, r5, pc}
 80090de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80090e6:	2d19      	cmp	r5, #25
 80090e8:	bf98      	it	ls
 80090ea:	3220      	addls	r2, #32
 80090ec:	42a2      	cmp	r2, r4
 80090ee:	d0f0      	beq.n	80090d2 <__match+0x6>
 80090f0:	2000      	movs	r0, #0
 80090f2:	e7f3      	b.n	80090dc <__match+0x10>

080090f4 <__hexnan>:
 80090f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f8:	680b      	ldr	r3, [r1, #0]
 80090fa:	6801      	ldr	r1, [r0, #0]
 80090fc:	115e      	asrs	r6, r3, #5
 80090fe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009102:	f013 031f 	ands.w	r3, r3, #31
 8009106:	b087      	sub	sp, #28
 8009108:	bf18      	it	ne
 800910a:	3604      	addne	r6, #4
 800910c:	2500      	movs	r5, #0
 800910e:	1f37      	subs	r7, r6, #4
 8009110:	4682      	mov	sl, r0
 8009112:	4690      	mov	r8, r2
 8009114:	9301      	str	r3, [sp, #4]
 8009116:	f846 5c04 	str.w	r5, [r6, #-4]
 800911a:	46b9      	mov	r9, r7
 800911c:	463c      	mov	r4, r7
 800911e:	9502      	str	r5, [sp, #8]
 8009120:	46ab      	mov	fp, r5
 8009122:	784a      	ldrb	r2, [r1, #1]
 8009124:	1c4b      	adds	r3, r1, #1
 8009126:	9303      	str	r3, [sp, #12]
 8009128:	b342      	cbz	r2, 800917c <__hexnan+0x88>
 800912a:	4610      	mov	r0, r2
 800912c:	9105      	str	r1, [sp, #20]
 800912e:	9204      	str	r2, [sp, #16]
 8009130:	f7ff fd76 	bl	8008c20 <__hexdig_fun>
 8009134:	2800      	cmp	r0, #0
 8009136:	d14f      	bne.n	80091d8 <__hexnan+0xe4>
 8009138:	9a04      	ldr	r2, [sp, #16]
 800913a:	9905      	ldr	r1, [sp, #20]
 800913c:	2a20      	cmp	r2, #32
 800913e:	d818      	bhi.n	8009172 <__hexnan+0x7e>
 8009140:	9b02      	ldr	r3, [sp, #8]
 8009142:	459b      	cmp	fp, r3
 8009144:	dd13      	ble.n	800916e <__hexnan+0x7a>
 8009146:	454c      	cmp	r4, r9
 8009148:	d206      	bcs.n	8009158 <__hexnan+0x64>
 800914a:	2d07      	cmp	r5, #7
 800914c:	dc04      	bgt.n	8009158 <__hexnan+0x64>
 800914e:	462a      	mov	r2, r5
 8009150:	4649      	mov	r1, r9
 8009152:	4620      	mov	r0, r4
 8009154:	f7ff ffa8 	bl	80090a8 <L_shift>
 8009158:	4544      	cmp	r4, r8
 800915a:	d950      	bls.n	80091fe <__hexnan+0x10a>
 800915c:	2300      	movs	r3, #0
 800915e:	f1a4 0904 	sub.w	r9, r4, #4
 8009162:	f844 3c04 	str.w	r3, [r4, #-4]
 8009166:	f8cd b008 	str.w	fp, [sp, #8]
 800916a:	464c      	mov	r4, r9
 800916c:	461d      	mov	r5, r3
 800916e:	9903      	ldr	r1, [sp, #12]
 8009170:	e7d7      	b.n	8009122 <__hexnan+0x2e>
 8009172:	2a29      	cmp	r2, #41	; 0x29
 8009174:	d155      	bne.n	8009222 <__hexnan+0x12e>
 8009176:	3102      	adds	r1, #2
 8009178:	f8ca 1000 	str.w	r1, [sl]
 800917c:	f1bb 0f00 	cmp.w	fp, #0
 8009180:	d04f      	beq.n	8009222 <__hexnan+0x12e>
 8009182:	454c      	cmp	r4, r9
 8009184:	d206      	bcs.n	8009194 <__hexnan+0xa0>
 8009186:	2d07      	cmp	r5, #7
 8009188:	dc04      	bgt.n	8009194 <__hexnan+0xa0>
 800918a:	462a      	mov	r2, r5
 800918c:	4649      	mov	r1, r9
 800918e:	4620      	mov	r0, r4
 8009190:	f7ff ff8a 	bl	80090a8 <L_shift>
 8009194:	4544      	cmp	r4, r8
 8009196:	d934      	bls.n	8009202 <__hexnan+0x10e>
 8009198:	f1a8 0204 	sub.w	r2, r8, #4
 800919c:	4623      	mov	r3, r4
 800919e:	f853 1b04 	ldr.w	r1, [r3], #4
 80091a2:	f842 1f04 	str.w	r1, [r2, #4]!
 80091a6:	429f      	cmp	r7, r3
 80091a8:	d2f9      	bcs.n	800919e <__hexnan+0xaa>
 80091aa:	1b3b      	subs	r3, r7, r4
 80091ac:	f023 0303 	bic.w	r3, r3, #3
 80091b0:	3304      	adds	r3, #4
 80091b2:	3e03      	subs	r6, #3
 80091b4:	3401      	adds	r4, #1
 80091b6:	42a6      	cmp	r6, r4
 80091b8:	bf38      	it	cc
 80091ba:	2304      	movcc	r3, #4
 80091bc:	4443      	add	r3, r8
 80091be:	2200      	movs	r2, #0
 80091c0:	f843 2b04 	str.w	r2, [r3], #4
 80091c4:	429f      	cmp	r7, r3
 80091c6:	d2fb      	bcs.n	80091c0 <__hexnan+0xcc>
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	b91b      	cbnz	r3, 80091d4 <__hexnan+0xe0>
 80091cc:	4547      	cmp	r7, r8
 80091ce:	d126      	bne.n	800921e <__hexnan+0x12a>
 80091d0:	2301      	movs	r3, #1
 80091d2:	603b      	str	r3, [r7, #0]
 80091d4:	2005      	movs	r0, #5
 80091d6:	e025      	b.n	8009224 <__hexnan+0x130>
 80091d8:	3501      	adds	r5, #1
 80091da:	2d08      	cmp	r5, #8
 80091dc:	f10b 0b01 	add.w	fp, fp, #1
 80091e0:	dd06      	ble.n	80091f0 <__hexnan+0xfc>
 80091e2:	4544      	cmp	r4, r8
 80091e4:	d9c3      	bls.n	800916e <__hexnan+0x7a>
 80091e6:	2300      	movs	r3, #0
 80091e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80091ec:	2501      	movs	r5, #1
 80091ee:	3c04      	subs	r4, #4
 80091f0:	6822      	ldr	r2, [r4, #0]
 80091f2:	f000 000f 	and.w	r0, r0, #15
 80091f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80091fa:	6020      	str	r0, [r4, #0]
 80091fc:	e7b7      	b.n	800916e <__hexnan+0x7a>
 80091fe:	2508      	movs	r5, #8
 8009200:	e7b5      	b.n	800916e <__hexnan+0x7a>
 8009202:	9b01      	ldr	r3, [sp, #4]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d0df      	beq.n	80091c8 <__hexnan+0xd4>
 8009208:	f1c3 0320 	rsb	r3, r3, #32
 800920c:	f04f 32ff 	mov.w	r2, #4294967295
 8009210:	40da      	lsrs	r2, r3
 8009212:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009216:	4013      	ands	r3, r2
 8009218:	f846 3c04 	str.w	r3, [r6, #-4]
 800921c:	e7d4      	b.n	80091c8 <__hexnan+0xd4>
 800921e:	3f04      	subs	r7, #4
 8009220:	e7d2      	b.n	80091c8 <__hexnan+0xd4>
 8009222:	2004      	movs	r0, #4
 8009224:	b007      	add	sp, #28
 8009226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800922c <malloc>:
 800922c:	4b02      	ldr	r3, [pc, #8]	; (8009238 <malloc+0xc>)
 800922e:	4601      	mov	r1, r0
 8009230:	6818      	ldr	r0, [r3, #0]
 8009232:	f000 b823 	b.w	800927c <_malloc_r>
 8009236:	bf00      	nop
 8009238:	20000238 	.word	0x20000238

0800923c <sbrk_aligned>:
 800923c:	b570      	push	{r4, r5, r6, lr}
 800923e:	4e0e      	ldr	r6, [pc, #56]	; (8009278 <sbrk_aligned+0x3c>)
 8009240:	460c      	mov	r4, r1
 8009242:	6831      	ldr	r1, [r6, #0]
 8009244:	4605      	mov	r5, r0
 8009246:	b911      	cbnz	r1, 800924e <sbrk_aligned+0x12>
 8009248:	f000 ff90 	bl	800a16c <_sbrk_r>
 800924c:	6030      	str	r0, [r6, #0]
 800924e:	4621      	mov	r1, r4
 8009250:	4628      	mov	r0, r5
 8009252:	f000 ff8b 	bl	800a16c <_sbrk_r>
 8009256:	1c43      	adds	r3, r0, #1
 8009258:	d00a      	beq.n	8009270 <sbrk_aligned+0x34>
 800925a:	1cc4      	adds	r4, r0, #3
 800925c:	f024 0403 	bic.w	r4, r4, #3
 8009260:	42a0      	cmp	r0, r4
 8009262:	d007      	beq.n	8009274 <sbrk_aligned+0x38>
 8009264:	1a21      	subs	r1, r4, r0
 8009266:	4628      	mov	r0, r5
 8009268:	f000 ff80 	bl	800a16c <_sbrk_r>
 800926c:	3001      	adds	r0, #1
 800926e:	d101      	bne.n	8009274 <sbrk_aligned+0x38>
 8009270:	f04f 34ff 	mov.w	r4, #4294967295
 8009274:	4620      	mov	r0, r4
 8009276:	bd70      	pop	{r4, r5, r6, pc}
 8009278:	20000724 	.word	0x20000724

0800927c <_malloc_r>:
 800927c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009280:	1ccd      	adds	r5, r1, #3
 8009282:	f025 0503 	bic.w	r5, r5, #3
 8009286:	3508      	adds	r5, #8
 8009288:	2d0c      	cmp	r5, #12
 800928a:	bf38      	it	cc
 800928c:	250c      	movcc	r5, #12
 800928e:	2d00      	cmp	r5, #0
 8009290:	4607      	mov	r7, r0
 8009292:	db01      	blt.n	8009298 <_malloc_r+0x1c>
 8009294:	42a9      	cmp	r1, r5
 8009296:	d905      	bls.n	80092a4 <_malloc_r+0x28>
 8009298:	230c      	movs	r3, #12
 800929a:	603b      	str	r3, [r7, #0]
 800929c:	2600      	movs	r6, #0
 800929e:	4630      	mov	r0, r6
 80092a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009378 <_malloc_r+0xfc>
 80092a8:	f000 f87a 	bl	80093a0 <__malloc_lock>
 80092ac:	f8d8 3000 	ldr.w	r3, [r8]
 80092b0:	461c      	mov	r4, r3
 80092b2:	bb5c      	cbnz	r4, 800930c <_malloc_r+0x90>
 80092b4:	4629      	mov	r1, r5
 80092b6:	4638      	mov	r0, r7
 80092b8:	f7ff ffc0 	bl	800923c <sbrk_aligned>
 80092bc:	1c43      	adds	r3, r0, #1
 80092be:	4604      	mov	r4, r0
 80092c0:	d155      	bne.n	800936e <_malloc_r+0xf2>
 80092c2:	f8d8 4000 	ldr.w	r4, [r8]
 80092c6:	4626      	mov	r6, r4
 80092c8:	2e00      	cmp	r6, #0
 80092ca:	d145      	bne.n	8009358 <_malloc_r+0xdc>
 80092cc:	2c00      	cmp	r4, #0
 80092ce:	d048      	beq.n	8009362 <_malloc_r+0xe6>
 80092d0:	6823      	ldr	r3, [r4, #0]
 80092d2:	4631      	mov	r1, r6
 80092d4:	4638      	mov	r0, r7
 80092d6:	eb04 0903 	add.w	r9, r4, r3
 80092da:	f000 ff47 	bl	800a16c <_sbrk_r>
 80092de:	4581      	cmp	r9, r0
 80092e0:	d13f      	bne.n	8009362 <_malloc_r+0xe6>
 80092e2:	6821      	ldr	r1, [r4, #0]
 80092e4:	1a6d      	subs	r5, r5, r1
 80092e6:	4629      	mov	r1, r5
 80092e8:	4638      	mov	r0, r7
 80092ea:	f7ff ffa7 	bl	800923c <sbrk_aligned>
 80092ee:	3001      	adds	r0, #1
 80092f0:	d037      	beq.n	8009362 <_malloc_r+0xe6>
 80092f2:	6823      	ldr	r3, [r4, #0]
 80092f4:	442b      	add	r3, r5
 80092f6:	6023      	str	r3, [r4, #0]
 80092f8:	f8d8 3000 	ldr.w	r3, [r8]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d038      	beq.n	8009372 <_malloc_r+0xf6>
 8009300:	685a      	ldr	r2, [r3, #4]
 8009302:	42a2      	cmp	r2, r4
 8009304:	d12b      	bne.n	800935e <_malloc_r+0xe2>
 8009306:	2200      	movs	r2, #0
 8009308:	605a      	str	r2, [r3, #4]
 800930a:	e00f      	b.n	800932c <_malloc_r+0xb0>
 800930c:	6822      	ldr	r2, [r4, #0]
 800930e:	1b52      	subs	r2, r2, r5
 8009310:	d41f      	bmi.n	8009352 <_malloc_r+0xd6>
 8009312:	2a0b      	cmp	r2, #11
 8009314:	d917      	bls.n	8009346 <_malloc_r+0xca>
 8009316:	1961      	adds	r1, r4, r5
 8009318:	42a3      	cmp	r3, r4
 800931a:	6025      	str	r5, [r4, #0]
 800931c:	bf18      	it	ne
 800931e:	6059      	strne	r1, [r3, #4]
 8009320:	6863      	ldr	r3, [r4, #4]
 8009322:	bf08      	it	eq
 8009324:	f8c8 1000 	streq.w	r1, [r8]
 8009328:	5162      	str	r2, [r4, r5]
 800932a:	604b      	str	r3, [r1, #4]
 800932c:	4638      	mov	r0, r7
 800932e:	f104 060b 	add.w	r6, r4, #11
 8009332:	f000 f83b 	bl	80093ac <__malloc_unlock>
 8009336:	f026 0607 	bic.w	r6, r6, #7
 800933a:	1d23      	adds	r3, r4, #4
 800933c:	1af2      	subs	r2, r6, r3
 800933e:	d0ae      	beq.n	800929e <_malloc_r+0x22>
 8009340:	1b9b      	subs	r3, r3, r6
 8009342:	50a3      	str	r3, [r4, r2]
 8009344:	e7ab      	b.n	800929e <_malloc_r+0x22>
 8009346:	42a3      	cmp	r3, r4
 8009348:	6862      	ldr	r2, [r4, #4]
 800934a:	d1dd      	bne.n	8009308 <_malloc_r+0x8c>
 800934c:	f8c8 2000 	str.w	r2, [r8]
 8009350:	e7ec      	b.n	800932c <_malloc_r+0xb0>
 8009352:	4623      	mov	r3, r4
 8009354:	6864      	ldr	r4, [r4, #4]
 8009356:	e7ac      	b.n	80092b2 <_malloc_r+0x36>
 8009358:	4634      	mov	r4, r6
 800935a:	6876      	ldr	r6, [r6, #4]
 800935c:	e7b4      	b.n	80092c8 <_malloc_r+0x4c>
 800935e:	4613      	mov	r3, r2
 8009360:	e7cc      	b.n	80092fc <_malloc_r+0x80>
 8009362:	230c      	movs	r3, #12
 8009364:	603b      	str	r3, [r7, #0]
 8009366:	4638      	mov	r0, r7
 8009368:	f000 f820 	bl	80093ac <__malloc_unlock>
 800936c:	e797      	b.n	800929e <_malloc_r+0x22>
 800936e:	6025      	str	r5, [r4, #0]
 8009370:	e7dc      	b.n	800932c <_malloc_r+0xb0>
 8009372:	605b      	str	r3, [r3, #4]
 8009374:	deff      	udf	#255	; 0xff
 8009376:	bf00      	nop
 8009378:	20000720 	.word	0x20000720

0800937c <__ascii_mbtowc>:
 800937c:	b082      	sub	sp, #8
 800937e:	b901      	cbnz	r1, 8009382 <__ascii_mbtowc+0x6>
 8009380:	a901      	add	r1, sp, #4
 8009382:	b142      	cbz	r2, 8009396 <__ascii_mbtowc+0x1a>
 8009384:	b14b      	cbz	r3, 800939a <__ascii_mbtowc+0x1e>
 8009386:	7813      	ldrb	r3, [r2, #0]
 8009388:	600b      	str	r3, [r1, #0]
 800938a:	7812      	ldrb	r2, [r2, #0]
 800938c:	1e10      	subs	r0, r2, #0
 800938e:	bf18      	it	ne
 8009390:	2001      	movne	r0, #1
 8009392:	b002      	add	sp, #8
 8009394:	4770      	bx	lr
 8009396:	4610      	mov	r0, r2
 8009398:	e7fb      	b.n	8009392 <__ascii_mbtowc+0x16>
 800939a:	f06f 0001 	mvn.w	r0, #1
 800939e:	e7f8      	b.n	8009392 <__ascii_mbtowc+0x16>

080093a0 <__malloc_lock>:
 80093a0:	4801      	ldr	r0, [pc, #4]	; (80093a8 <__malloc_lock+0x8>)
 80093a2:	f7fe bd02 	b.w	8007daa <__retarget_lock_acquire_recursive>
 80093a6:	bf00      	nop
 80093a8:	2000071c 	.word	0x2000071c

080093ac <__malloc_unlock>:
 80093ac:	4801      	ldr	r0, [pc, #4]	; (80093b4 <__malloc_unlock+0x8>)
 80093ae:	f7fe bcfd 	b.w	8007dac <__retarget_lock_release_recursive>
 80093b2:	bf00      	nop
 80093b4:	2000071c 	.word	0x2000071c

080093b8 <_Balloc>:
 80093b8:	b570      	push	{r4, r5, r6, lr}
 80093ba:	69c6      	ldr	r6, [r0, #28]
 80093bc:	4604      	mov	r4, r0
 80093be:	460d      	mov	r5, r1
 80093c0:	b976      	cbnz	r6, 80093e0 <_Balloc+0x28>
 80093c2:	2010      	movs	r0, #16
 80093c4:	f7ff ff32 	bl	800922c <malloc>
 80093c8:	4602      	mov	r2, r0
 80093ca:	61e0      	str	r0, [r4, #28]
 80093cc:	b920      	cbnz	r0, 80093d8 <_Balloc+0x20>
 80093ce:	4b18      	ldr	r3, [pc, #96]	; (8009430 <_Balloc+0x78>)
 80093d0:	4818      	ldr	r0, [pc, #96]	; (8009434 <_Balloc+0x7c>)
 80093d2:	216b      	movs	r1, #107	; 0x6b
 80093d4:	f000 feda 	bl	800a18c <__assert_func>
 80093d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093dc:	6006      	str	r6, [r0, #0]
 80093de:	60c6      	str	r6, [r0, #12]
 80093e0:	69e6      	ldr	r6, [r4, #28]
 80093e2:	68f3      	ldr	r3, [r6, #12]
 80093e4:	b183      	cbz	r3, 8009408 <_Balloc+0x50>
 80093e6:	69e3      	ldr	r3, [r4, #28]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80093ee:	b9b8      	cbnz	r0, 8009420 <_Balloc+0x68>
 80093f0:	2101      	movs	r1, #1
 80093f2:	fa01 f605 	lsl.w	r6, r1, r5
 80093f6:	1d72      	adds	r2, r6, #5
 80093f8:	0092      	lsls	r2, r2, #2
 80093fa:	4620      	mov	r0, r4
 80093fc:	f000 fee4 	bl	800a1c8 <_calloc_r>
 8009400:	b160      	cbz	r0, 800941c <_Balloc+0x64>
 8009402:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009406:	e00e      	b.n	8009426 <_Balloc+0x6e>
 8009408:	2221      	movs	r2, #33	; 0x21
 800940a:	2104      	movs	r1, #4
 800940c:	4620      	mov	r0, r4
 800940e:	f000 fedb 	bl	800a1c8 <_calloc_r>
 8009412:	69e3      	ldr	r3, [r4, #28]
 8009414:	60f0      	str	r0, [r6, #12]
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d1e4      	bne.n	80093e6 <_Balloc+0x2e>
 800941c:	2000      	movs	r0, #0
 800941e:	bd70      	pop	{r4, r5, r6, pc}
 8009420:	6802      	ldr	r2, [r0, #0]
 8009422:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009426:	2300      	movs	r3, #0
 8009428:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800942c:	e7f7      	b.n	800941e <_Balloc+0x66>
 800942e:	bf00      	nop
 8009430:	0800aa2f 	.word	0x0800aa2f
 8009434:	0800ab0f 	.word	0x0800ab0f

08009438 <_Bfree>:
 8009438:	b570      	push	{r4, r5, r6, lr}
 800943a:	69c6      	ldr	r6, [r0, #28]
 800943c:	4605      	mov	r5, r0
 800943e:	460c      	mov	r4, r1
 8009440:	b976      	cbnz	r6, 8009460 <_Bfree+0x28>
 8009442:	2010      	movs	r0, #16
 8009444:	f7ff fef2 	bl	800922c <malloc>
 8009448:	4602      	mov	r2, r0
 800944a:	61e8      	str	r0, [r5, #28]
 800944c:	b920      	cbnz	r0, 8009458 <_Bfree+0x20>
 800944e:	4b09      	ldr	r3, [pc, #36]	; (8009474 <_Bfree+0x3c>)
 8009450:	4809      	ldr	r0, [pc, #36]	; (8009478 <_Bfree+0x40>)
 8009452:	218f      	movs	r1, #143	; 0x8f
 8009454:	f000 fe9a 	bl	800a18c <__assert_func>
 8009458:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800945c:	6006      	str	r6, [r0, #0]
 800945e:	60c6      	str	r6, [r0, #12]
 8009460:	b13c      	cbz	r4, 8009472 <_Bfree+0x3a>
 8009462:	69eb      	ldr	r3, [r5, #28]
 8009464:	6862      	ldr	r2, [r4, #4]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800946c:	6021      	str	r1, [r4, #0]
 800946e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009472:	bd70      	pop	{r4, r5, r6, pc}
 8009474:	0800aa2f 	.word	0x0800aa2f
 8009478:	0800ab0f 	.word	0x0800ab0f

0800947c <__multadd>:
 800947c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009480:	690d      	ldr	r5, [r1, #16]
 8009482:	4607      	mov	r7, r0
 8009484:	460c      	mov	r4, r1
 8009486:	461e      	mov	r6, r3
 8009488:	f101 0c14 	add.w	ip, r1, #20
 800948c:	2000      	movs	r0, #0
 800948e:	f8dc 3000 	ldr.w	r3, [ip]
 8009492:	b299      	uxth	r1, r3
 8009494:	fb02 6101 	mla	r1, r2, r1, r6
 8009498:	0c1e      	lsrs	r6, r3, #16
 800949a:	0c0b      	lsrs	r3, r1, #16
 800949c:	fb02 3306 	mla	r3, r2, r6, r3
 80094a0:	b289      	uxth	r1, r1
 80094a2:	3001      	adds	r0, #1
 80094a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80094a8:	4285      	cmp	r5, r0
 80094aa:	f84c 1b04 	str.w	r1, [ip], #4
 80094ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80094b2:	dcec      	bgt.n	800948e <__multadd+0x12>
 80094b4:	b30e      	cbz	r6, 80094fa <__multadd+0x7e>
 80094b6:	68a3      	ldr	r3, [r4, #8]
 80094b8:	42ab      	cmp	r3, r5
 80094ba:	dc19      	bgt.n	80094f0 <__multadd+0x74>
 80094bc:	6861      	ldr	r1, [r4, #4]
 80094be:	4638      	mov	r0, r7
 80094c0:	3101      	adds	r1, #1
 80094c2:	f7ff ff79 	bl	80093b8 <_Balloc>
 80094c6:	4680      	mov	r8, r0
 80094c8:	b928      	cbnz	r0, 80094d6 <__multadd+0x5a>
 80094ca:	4602      	mov	r2, r0
 80094cc:	4b0c      	ldr	r3, [pc, #48]	; (8009500 <__multadd+0x84>)
 80094ce:	480d      	ldr	r0, [pc, #52]	; (8009504 <__multadd+0x88>)
 80094d0:	21ba      	movs	r1, #186	; 0xba
 80094d2:	f000 fe5b 	bl	800a18c <__assert_func>
 80094d6:	6922      	ldr	r2, [r4, #16]
 80094d8:	3202      	adds	r2, #2
 80094da:	f104 010c 	add.w	r1, r4, #12
 80094de:	0092      	lsls	r2, r2, #2
 80094e0:	300c      	adds	r0, #12
 80094e2:	f7fe fc64 	bl	8007dae <memcpy>
 80094e6:	4621      	mov	r1, r4
 80094e8:	4638      	mov	r0, r7
 80094ea:	f7ff ffa5 	bl	8009438 <_Bfree>
 80094ee:	4644      	mov	r4, r8
 80094f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80094f4:	3501      	adds	r5, #1
 80094f6:	615e      	str	r6, [r3, #20]
 80094f8:	6125      	str	r5, [r4, #16]
 80094fa:	4620      	mov	r0, r4
 80094fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009500:	0800aa9e 	.word	0x0800aa9e
 8009504:	0800ab0f 	.word	0x0800ab0f

08009508 <__s2b>:
 8009508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800950c:	460c      	mov	r4, r1
 800950e:	4615      	mov	r5, r2
 8009510:	461f      	mov	r7, r3
 8009512:	2209      	movs	r2, #9
 8009514:	3308      	adds	r3, #8
 8009516:	4606      	mov	r6, r0
 8009518:	fb93 f3f2 	sdiv	r3, r3, r2
 800951c:	2100      	movs	r1, #0
 800951e:	2201      	movs	r2, #1
 8009520:	429a      	cmp	r2, r3
 8009522:	db09      	blt.n	8009538 <__s2b+0x30>
 8009524:	4630      	mov	r0, r6
 8009526:	f7ff ff47 	bl	80093b8 <_Balloc>
 800952a:	b940      	cbnz	r0, 800953e <__s2b+0x36>
 800952c:	4602      	mov	r2, r0
 800952e:	4b19      	ldr	r3, [pc, #100]	; (8009594 <__s2b+0x8c>)
 8009530:	4819      	ldr	r0, [pc, #100]	; (8009598 <__s2b+0x90>)
 8009532:	21d3      	movs	r1, #211	; 0xd3
 8009534:	f000 fe2a 	bl	800a18c <__assert_func>
 8009538:	0052      	lsls	r2, r2, #1
 800953a:	3101      	adds	r1, #1
 800953c:	e7f0      	b.n	8009520 <__s2b+0x18>
 800953e:	9b08      	ldr	r3, [sp, #32]
 8009540:	6143      	str	r3, [r0, #20]
 8009542:	2d09      	cmp	r5, #9
 8009544:	f04f 0301 	mov.w	r3, #1
 8009548:	6103      	str	r3, [r0, #16]
 800954a:	dd16      	ble.n	800957a <__s2b+0x72>
 800954c:	f104 0909 	add.w	r9, r4, #9
 8009550:	46c8      	mov	r8, r9
 8009552:	442c      	add	r4, r5
 8009554:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009558:	4601      	mov	r1, r0
 800955a:	3b30      	subs	r3, #48	; 0x30
 800955c:	220a      	movs	r2, #10
 800955e:	4630      	mov	r0, r6
 8009560:	f7ff ff8c 	bl	800947c <__multadd>
 8009564:	45a0      	cmp	r8, r4
 8009566:	d1f5      	bne.n	8009554 <__s2b+0x4c>
 8009568:	f1a5 0408 	sub.w	r4, r5, #8
 800956c:	444c      	add	r4, r9
 800956e:	1b2d      	subs	r5, r5, r4
 8009570:	1963      	adds	r3, r4, r5
 8009572:	42bb      	cmp	r3, r7
 8009574:	db04      	blt.n	8009580 <__s2b+0x78>
 8009576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800957a:	340a      	adds	r4, #10
 800957c:	2509      	movs	r5, #9
 800957e:	e7f6      	b.n	800956e <__s2b+0x66>
 8009580:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009584:	4601      	mov	r1, r0
 8009586:	3b30      	subs	r3, #48	; 0x30
 8009588:	220a      	movs	r2, #10
 800958a:	4630      	mov	r0, r6
 800958c:	f7ff ff76 	bl	800947c <__multadd>
 8009590:	e7ee      	b.n	8009570 <__s2b+0x68>
 8009592:	bf00      	nop
 8009594:	0800aa9e 	.word	0x0800aa9e
 8009598:	0800ab0f 	.word	0x0800ab0f

0800959c <__hi0bits>:
 800959c:	0c03      	lsrs	r3, r0, #16
 800959e:	041b      	lsls	r3, r3, #16
 80095a0:	b9d3      	cbnz	r3, 80095d8 <__hi0bits+0x3c>
 80095a2:	0400      	lsls	r0, r0, #16
 80095a4:	2310      	movs	r3, #16
 80095a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80095aa:	bf04      	itt	eq
 80095ac:	0200      	lsleq	r0, r0, #8
 80095ae:	3308      	addeq	r3, #8
 80095b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80095b4:	bf04      	itt	eq
 80095b6:	0100      	lsleq	r0, r0, #4
 80095b8:	3304      	addeq	r3, #4
 80095ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80095be:	bf04      	itt	eq
 80095c0:	0080      	lsleq	r0, r0, #2
 80095c2:	3302      	addeq	r3, #2
 80095c4:	2800      	cmp	r0, #0
 80095c6:	db05      	blt.n	80095d4 <__hi0bits+0x38>
 80095c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80095cc:	f103 0301 	add.w	r3, r3, #1
 80095d0:	bf08      	it	eq
 80095d2:	2320      	moveq	r3, #32
 80095d4:	4618      	mov	r0, r3
 80095d6:	4770      	bx	lr
 80095d8:	2300      	movs	r3, #0
 80095da:	e7e4      	b.n	80095a6 <__hi0bits+0xa>

080095dc <__lo0bits>:
 80095dc:	6803      	ldr	r3, [r0, #0]
 80095de:	f013 0207 	ands.w	r2, r3, #7
 80095e2:	d00c      	beq.n	80095fe <__lo0bits+0x22>
 80095e4:	07d9      	lsls	r1, r3, #31
 80095e6:	d422      	bmi.n	800962e <__lo0bits+0x52>
 80095e8:	079a      	lsls	r2, r3, #30
 80095ea:	bf49      	itett	mi
 80095ec:	085b      	lsrmi	r3, r3, #1
 80095ee:	089b      	lsrpl	r3, r3, #2
 80095f0:	6003      	strmi	r3, [r0, #0]
 80095f2:	2201      	movmi	r2, #1
 80095f4:	bf5c      	itt	pl
 80095f6:	6003      	strpl	r3, [r0, #0]
 80095f8:	2202      	movpl	r2, #2
 80095fa:	4610      	mov	r0, r2
 80095fc:	4770      	bx	lr
 80095fe:	b299      	uxth	r1, r3
 8009600:	b909      	cbnz	r1, 8009606 <__lo0bits+0x2a>
 8009602:	0c1b      	lsrs	r3, r3, #16
 8009604:	2210      	movs	r2, #16
 8009606:	b2d9      	uxtb	r1, r3
 8009608:	b909      	cbnz	r1, 800960e <__lo0bits+0x32>
 800960a:	3208      	adds	r2, #8
 800960c:	0a1b      	lsrs	r3, r3, #8
 800960e:	0719      	lsls	r1, r3, #28
 8009610:	bf04      	itt	eq
 8009612:	091b      	lsreq	r3, r3, #4
 8009614:	3204      	addeq	r2, #4
 8009616:	0799      	lsls	r1, r3, #30
 8009618:	bf04      	itt	eq
 800961a:	089b      	lsreq	r3, r3, #2
 800961c:	3202      	addeq	r2, #2
 800961e:	07d9      	lsls	r1, r3, #31
 8009620:	d403      	bmi.n	800962a <__lo0bits+0x4e>
 8009622:	085b      	lsrs	r3, r3, #1
 8009624:	f102 0201 	add.w	r2, r2, #1
 8009628:	d003      	beq.n	8009632 <__lo0bits+0x56>
 800962a:	6003      	str	r3, [r0, #0]
 800962c:	e7e5      	b.n	80095fa <__lo0bits+0x1e>
 800962e:	2200      	movs	r2, #0
 8009630:	e7e3      	b.n	80095fa <__lo0bits+0x1e>
 8009632:	2220      	movs	r2, #32
 8009634:	e7e1      	b.n	80095fa <__lo0bits+0x1e>
	...

08009638 <__i2b>:
 8009638:	b510      	push	{r4, lr}
 800963a:	460c      	mov	r4, r1
 800963c:	2101      	movs	r1, #1
 800963e:	f7ff febb 	bl	80093b8 <_Balloc>
 8009642:	4602      	mov	r2, r0
 8009644:	b928      	cbnz	r0, 8009652 <__i2b+0x1a>
 8009646:	4b05      	ldr	r3, [pc, #20]	; (800965c <__i2b+0x24>)
 8009648:	4805      	ldr	r0, [pc, #20]	; (8009660 <__i2b+0x28>)
 800964a:	f240 1145 	movw	r1, #325	; 0x145
 800964e:	f000 fd9d 	bl	800a18c <__assert_func>
 8009652:	2301      	movs	r3, #1
 8009654:	6144      	str	r4, [r0, #20]
 8009656:	6103      	str	r3, [r0, #16]
 8009658:	bd10      	pop	{r4, pc}
 800965a:	bf00      	nop
 800965c:	0800aa9e 	.word	0x0800aa9e
 8009660:	0800ab0f 	.word	0x0800ab0f

08009664 <__multiply>:
 8009664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009668:	4691      	mov	r9, r2
 800966a:	690a      	ldr	r2, [r1, #16]
 800966c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009670:	429a      	cmp	r2, r3
 8009672:	bfb8      	it	lt
 8009674:	460b      	movlt	r3, r1
 8009676:	460c      	mov	r4, r1
 8009678:	bfbc      	itt	lt
 800967a:	464c      	movlt	r4, r9
 800967c:	4699      	movlt	r9, r3
 800967e:	6927      	ldr	r7, [r4, #16]
 8009680:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009684:	68a3      	ldr	r3, [r4, #8]
 8009686:	6861      	ldr	r1, [r4, #4]
 8009688:	eb07 060a 	add.w	r6, r7, sl
 800968c:	42b3      	cmp	r3, r6
 800968e:	b085      	sub	sp, #20
 8009690:	bfb8      	it	lt
 8009692:	3101      	addlt	r1, #1
 8009694:	f7ff fe90 	bl	80093b8 <_Balloc>
 8009698:	b930      	cbnz	r0, 80096a8 <__multiply+0x44>
 800969a:	4602      	mov	r2, r0
 800969c:	4b44      	ldr	r3, [pc, #272]	; (80097b0 <__multiply+0x14c>)
 800969e:	4845      	ldr	r0, [pc, #276]	; (80097b4 <__multiply+0x150>)
 80096a0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80096a4:	f000 fd72 	bl	800a18c <__assert_func>
 80096a8:	f100 0514 	add.w	r5, r0, #20
 80096ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80096b0:	462b      	mov	r3, r5
 80096b2:	2200      	movs	r2, #0
 80096b4:	4543      	cmp	r3, r8
 80096b6:	d321      	bcc.n	80096fc <__multiply+0x98>
 80096b8:	f104 0314 	add.w	r3, r4, #20
 80096bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80096c0:	f109 0314 	add.w	r3, r9, #20
 80096c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80096c8:	9202      	str	r2, [sp, #8]
 80096ca:	1b3a      	subs	r2, r7, r4
 80096cc:	3a15      	subs	r2, #21
 80096ce:	f022 0203 	bic.w	r2, r2, #3
 80096d2:	3204      	adds	r2, #4
 80096d4:	f104 0115 	add.w	r1, r4, #21
 80096d8:	428f      	cmp	r7, r1
 80096da:	bf38      	it	cc
 80096dc:	2204      	movcc	r2, #4
 80096de:	9201      	str	r2, [sp, #4]
 80096e0:	9a02      	ldr	r2, [sp, #8]
 80096e2:	9303      	str	r3, [sp, #12]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d80c      	bhi.n	8009702 <__multiply+0x9e>
 80096e8:	2e00      	cmp	r6, #0
 80096ea:	dd03      	ble.n	80096f4 <__multiply+0x90>
 80096ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d05b      	beq.n	80097ac <__multiply+0x148>
 80096f4:	6106      	str	r6, [r0, #16]
 80096f6:	b005      	add	sp, #20
 80096f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096fc:	f843 2b04 	str.w	r2, [r3], #4
 8009700:	e7d8      	b.n	80096b4 <__multiply+0x50>
 8009702:	f8b3 a000 	ldrh.w	sl, [r3]
 8009706:	f1ba 0f00 	cmp.w	sl, #0
 800970a:	d024      	beq.n	8009756 <__multiply+0xf2>
 800970c:	f104 0e14 	add.w	lr, r4, #20
 8009710:	46a9      	mov	r9, r5
 8009712:	f04f 0c00 	mov.w	ip, #0
 8009716:	f85e 2b04 	ldr.w	r2, [lr], #4
 800971a:	f8d9 1000 	ldr.w	r1, [r9]
 800971e:	fa1f fb82 	uxth.w	fp, r2
 8009722:	b289      	uxth	r1, r1
 8009724:	fb0a 110b 	mla	r1, sl, fp, r1
 8009728:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800972c:	f8d9 2000 	ldr.w	r2, [r9]
 8009730:	4461      	add	r1, ip
 8009732:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009736:	fb0a c20b 	mla	r2, sl, fp, ip
 800973a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800973e:	b289      	uxth	r1, r1
 8009740:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009744:	4577      	cmp	r7, lr
 8009746:	f849 1b04 	str.w	r1, [r9], #4
 800974a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800974e:	d8e2      	bhi.n	8009716 <__multiply+0xb2>
 8009750:	9a01      	ldr	r2, [sp, #4]
 8009752:	f845 c002 	str.w	ip, [r5, r2]
 8009756:	9a03      	ldr	r2, [sp, #12]
 8009758:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800975c:	3304      	adds	r3, #4
 800975e:	f1b9 0f00 	cmp.w	r9, #0
 8009762:	d021      	beq.n	80097a8 <__multiply+0x144>
 8009764:	6829      	ldr	r1, [r5, #0]
 8009766:	f104 0c14 	add.w	ip, r4, #20
 800976a:	46ae      	mov	lr, r5
 800976c:	f04f 0a00 	mov.w	sl, #0
 8009770:	f8bc b000 	ldrh.w	fp, [ip]
 8009774:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009778:	fb09 220b 	mla	r2, r9, fp, r2
 800977c:	4452      	add	r2, sl
 800977e:	b289      	uxth	r1, r1
 8009780:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009784:	f84e 1b04 	str.w	r1, [lr], #4
 8009788:	f85c 1b04 	ldr.w	r1, [ip], #4
 800978c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009790:	f8be 1000 	ldrh.w	r1, [lr]
 8009794:	fb09 110a 	mla	r1, r9, sl, r1
 8009798:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800979c:	4567      	cmp	r7, ip
 800979e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80097a2:	d8e5      	bhi.n	8009770 <__multiply+0x10c>
 80097a4:	9a01      	ldr	r2, [sp, #4]
 80097a6:	50a9      	str	r1, [r5, r2]
 80097a8:	3504      	adds	r5, #4
 80097aa:	e799      	b.n	80096e0 <__multiply+0x7c>
 80097ac:	3e01      	subs	r6, #1
 80097ae:	e79b      	b.n	80096e8 <__multiply+0x84>
 80097b0:	0800aa9e 	.word	0x0800aa9e
 80097b4:	0800ab0f 	.word	0x0800ab0f

080097b8 <__pow5mult>:
 80097b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097bc:	4615      	mov	r5, r2
 80097be:	f012 0203 	ands.w	r2, r2, #3
 80097c2:	4606      	mov	r6, r0
 80097c4:	460f      	mov	r7, r1
 80097c6:	d007      	beq.n	80097d8 <__pow5mult+0x20>
 80097c8:	4c25      	ldr	r4, [pc, #148]	; (8009860 <__pow5mult+0xa8>)
 80097ca:	3a01      	subs	r2, #1
 80097cc:	2300      	movs	r3, #0
 80097ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80097d2:	f7ff fe53 	bl	800947c <__multadd>
 80097d6:	4607      	mov	r7, r0
 80097d8:	10ad      	asrs	r5, r5, #2
 80097da:	d03d      	beq.n	8009858 <__pow5mult+0xa0>
 80097dc:	69f4      	ldr	r4, [r6, #28]
 80097de:	b97c      	cbnz	r4, 8009800 <__pow5mult+0x48>
 80097e0:	2010      	movs	r0, #16
 80097e2:	f7ff fd23 	bl	800922c <malloc>
 80097e6:	4602      	mov	r2, r0
 80097e8:	61f0      	str	r0, [r6, #28]
 80097ea:	b928      	cbnz	r0, 80097f8 <__pow5mult+0x40>
 80097ec:	4b1d      	ldr	r3, [pc, #116]	; (8009864 <__pow5mult+0xac>)
 80097ee:	481e      	ldr	r0, [pc, #120]	; (8009868 <__pow5mult+0xb0>)
 80097f0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80097f4:	f000 fcca 	bl	800a18c <__assert_func>
 80097f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097fc:	6004      	str	r4, [r0, #0]
 80097fe:	60c4      	str	r4, [r0, #12]
 8009800:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009804:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009808:	b94c      	cbnz	r4, 800981e <__pow5mult+0x66>
 800980a:	f240 2171 	movw	r1, #625	; 0x271
 800980e:	4630      	mov	r0, r6
 8009810:	f7ff ff12 	bl	8009638 <__i2b>
 8009814:	2300      	movs	r3, #0
 8009816:	f8c8 0008 	str.w	r0, [r8, #8]
 800981a:	4604      	mov	r4, r0
 800981c:	6003      	str	r3, [r0, #0]
 800981e:	f04f 0900 	mov.w	r9, #0
 8009822:	07eb      	lsls	r3, r5, #31
 8009824:	d50a      	bpl.n	800983c <__pow5mult+0x84>
 8009826:	4639      	mov	r1, r7
 8009828:	4622      	mov	r2, r4
 800982a:	4630      	mov	r0, r6
 800982c:	f7ff ff1a 	bl	8009664 <__multiply>
 8009830:	4639      	mov	r1, r7
 8009832:	4680      	mov	r8, r0
 8009834:	4630      	mov	r0, r6
 8009836:	f7ff fdff 	bl	8009438 <_Bfree>
 800983a:	4647      	mov	r7, r8
 800983c:	106d      	asrs	r5, r5, #1
 800983e:	d00b      	beq.n	8009858 <__pow5mult+0xa0>
 8009840:	6820      	ldr	r0, [r4, #0]
 8009842:	b938      	cbnz	r0, 8009854 <__pow5mult+0x9c>
 8009844:	4622      	mov	r2, r4
 8009846:	4621      	mov	r1, r4
 8009848:	4630      	mov	r0, r6
 800984a:	f7ff ff0b 	bl	8009664 <__multiply>
 800984e:	6020      	str	r0, [r4, #0]
 8009850:	f8c0 9000 	str.w	r9, [r0]
 8009854:	4604      	mov	r4, r0
 8009856:	e7e4      	b.n	8009822 <__pow5mult+0x6a>
 8009858:	4638      	mov	r0, r7
 800985a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800985e:	bf00      	nop
 8009860:	0800ac58 	.word	0x0800ac58
 8009864:	0800aa2f 	.word	0x0800aa2f
 8009868:	0800ab0f 	.word	0x0800ab0f

0800986c <__lshift>:
 800986c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009870:	460c      	mov	r4, r1
 8009872:	6849      	ldr	r1, [r1, #4]
 8009874:	6923      	ldr	r3, [r4, #16]
 8009876:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800987a:	68a3      	ldr	r3, [r4, #8]
 800987c:	4607      	mov	r7, r0
 800987e:	4691      	mov	r9, r2
 8009880:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009884:	f108 0601 	add.w	r6, r8, #1
 8009888:	42b3      	cmp	r3, r6
 800988a:	db0b      	blt.n	80098a4 <__lshift+0x38>
 800988c:	4638      	mov	r0, r7
 800988e:	f7ff fd93 	bl	80093b8 <_Balloc>
 8009892:	4605      	mov	r5, r0
 8009894:	b948      	cbnz	r0, 80098aa <__lshift+0x3e>
 8009896:	4602      	mov	r2, r0
 8009898:	4b28      	ldr	r3, [pc, #160]	; (800993c <__lshift+0xd0>)
 800989a:	4829      	ldr	r0, [pc, #164]	; (8009940 <__lshift+0xd4>)
 800989c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80098a0:	f000 fc74 	bl	800a18c <__assert_func>
 80098a4:	3101      	adds	r1, #1
 80098a6:	005b      	lsls	r3, r3, #1
 80098a8:	e7ee      	b.n	8009888 <__lshift+0x1c>
 80098aa:	2300      	movs	r3, #0
 80098ac:	f100 0114 	add.w	r1, r0, #20
 80098b0:	f100 0210 	add.w	r2, r0, #16
 80098b4:	4618      	mov	r0, r3
 80098b6:	4553      	cmp	r3, sl
 80098b8:	db33      	blt.n	8009922 <__lshift+0xb6>
 80098ba:	6920      	ldr	r0, [r4, #16]
 80098bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80098c0:	f104 0314 	add.w	r3, r4, #20
 80098c4:	f019 091f 	ands.w	r9, r9, #31
 80098c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80098cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80098d0:	d02b      	beq.n	800992a <__lshift+0xbe>
 80098d2:	f1c9 0e20 	rsb	lr, r9, #32
 80098d6:	468a      	mov	sl, r1
 80098d8:	2200      	movs	r2, #0
 80098da:	6818      	ldr	r0, [r3, #0]
 80098dc:	fa00 f009 	lsl.w	r0, r0, r9
 80098e0:	4310      	orrs	r0, r2
 80098e2:	f84a 0b04 	str.w	r0, [sl], #4
 80098e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80098ea:	459c      	cmp	ip, r3
 80098ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80098f0:	d8f3      	bhi.n	80098da <__lshift+0x6e>
 80098f2:	ebac 0304 	sub.w	r3, ip, r4
 80098f6:	3b15      	subs	r3, #21
 80098f8:	f023 0303 	bic.w	r3, r3, #3
 80098fc:	3304      	adds	r3, #4
 80098fe:	f104 0015 	add.w	r0, r4, #21
 8009902:	4584      	cmp	ip, r0
 8009904:	bf38      	it	cc
 8009906:	2304      	movcc	r3, #4
 8009908:	50ca      	str	r2, [r1, r3]
 800990a:	b10a      	cbz	r2, 8009910 <__lshift+0xa4>
 800990c:	f108 0602 	add.w	r6, r8, #2
 8009910:	3e01      	subs	r6, #1
 8009912:	4638      	mov	r0, r7
 8009914:	612e      	str	r6, [r5, #16]
 8009916:	4621      	mov	r1, r4
 8009918:	f7ff fd8e 	bl	8009438 <_Bfree>
 800991c:	4628      	mov	r0, r5
 800991e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009922:	f842 0f04 	str.w	r0, [r2, #4]!
 8009926:	3301      	adds	r3, #1
 8009928:	e7c5      	b.n	80098b6 <__lshift+0x4a>
 800992a:	3904      	subs	r1, #4
 800992c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009930:	f841 2f04 	str.w	r2, [r1, #4]!
 8009934:	459c      	cmp	ip, r3
 8009936:	d8f9      	bhi.n	800992c <__lshift+0xc0>
 8009938:	e7ea      	b.n	8009910 <__lshift+0xa4>
 800993a:	bf00      	nop
 800993c:	0800aa9e 	.word	0x0800aa9e
 8009940:	0800ab0f 	.word	0x0800ab0f

08009944 <__mcmp>:
 8009944:	b530      	push	{r4, r5, lr}
 8009946:	6902      	ldr	r2, [r0, #16]
 8009948:	690c      	ldr	r4, [r1, #16]
 800994a:	1b12      	subs	r2, r2, r4
 800994c:	d10e      	bne.n	800996c <__mcmp+0x28>
 800994e:	f100 0314 	add.w	r3, r0, #20
 8009952:	3114      	adds	r1, #20
 8009954:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009958:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800995c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009960:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009964:	42a5      	cmp	r5, r4
 8009966:	d003      	beq.n	8009970 <__mcmp+0x2c>
 8009968:	d305      	bcc.n	8009976 <__mcmp+0x32>
 800996a:	2201      	movs	r2, #1
 800996c:	4610      	mov	r0, r2
 800996e:	bd30      	pop	{r4, r5, pc}
 8009970:	4283      	cmp	r3, r0
 8009972:	d3f3      	bcc.n	800995c <__mcmp+0x18>
 8009974:	e7fa      	b.n	800996c <__mcmp+0x28>
 8009976:	f04f 32ff 	mov.w	r2, #4294967295
 800997a:	e7f7      	b.n	800996c <__mcmp+0x28>

0800997c <__mdiff>:
 800997c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009980:	460c      	mov	r4, r1
 8009982:	4606      	mov	r6, r0
 8009984:	4611      	mov	r1, r2
 8009986:	4620      	mov	r0, r4
 8009988:	4690      	mov	r8, r2
 800998a:	f7ff ffdb 	bl	8009944 <__mcmp>
 800998e:	1e05      	subs	r5, r0, #0
 8009990:	d110      	bne.n	80099b4 <__mdiff+0x38>
 8009992:	4629      	mov	r1, r5
 8009994:	4630      	mov	r0, r6
 8009996:	f7ff fd0f 	bl	80093b8 <_Balloc>
 800999a:	b930      	cbnz	r0, 80099aa <__mdiff+0x2e>
 800999c:	4b3a      	ldr	r3, [pc, #232]	; (8009a88 <__mdiff+0x10c>)
 800999e:	4602      	mov	r2, r0
 80099a0:	f240 2137 	movw	r1, #567	; 0x237
 80099a4:	4839      	ldr	r0, [pc, #228]	; (8009a8c <__mdiff+0x110>)
 80099a6:	f000 fbf1 	bl	800a18c <__assert_func>
 80099aa:	2301      	movs	r3, #1
 80099ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80099b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b4:	bfa4      	itt	ge
 80099b6:	4643      	movge	r3, r8
 80099b8:	46a0      	movge	r8, r4
 80099ba:	4630      	mov	r0, r6
 80099bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80099c0:	bfa6      	itte	ge
 80099c2:	461c      	movge	r4, r3
 80099c4:	2500      	movge	r5, #0
 80099c6:	2501      	movlt	r5, #1
 80099c8:	f7ff fcf6 	bl	80093b8 <_Balloc>
 80099cc:	b920      	cbnz	r0, 80099d8 <__mdiff+0x5c>
 80099ce:	4b2e      	ldr	r3, [pc, #184]	; (8009a88 <__mdiff+0x10c>)
 80099d0:	4602      	mov	r2, r0
 80099d2:	f240 2145 	movw	r1, #581	; 0x245
 80099d6:	e7e5      	b.n	80099a4 <__mdiff+0x28>
 80099d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80099dc:	6926      	ldr	r6, [r4, #16]
 80099de:	60c5      	str	r5, [r0, #12]
 80099e0:	f104 0914 	add.w	r9, r4, #20
 80099e4:	f108 0514 	add.w	r5, r8, #20
 80099e8:	f100 0e14 	add.w	lr, r0, #20
 80099ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80099f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80099f4:	f108 0210 	add.w	r2, r8, #16
 80099f8:	46f2      	mov	sl, lr
 80099fa:	2100      	movs	r1, #0
 80099fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009a04:	fa11 f88b 	uxtah	r8, r1, fp
 8009a08:	b299      	uxth	r1, r3
 8009a0a:	0c1b      	lsrs	r3, r3, #16
 8009a0c:	eba8 0801 	sub.w	r8, r8, r1
 8009a10:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009a14:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009a18:	fa1f f888 	uxth.w	r8, r8
 8009a1c:	1419      	asrs	r1, r3, #16
 8009a1e:	454e      	cmp	r6, r9
 8009a20:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009a24:	f84a 3b04 	str.w	r3, [sl], #4
 8009a28:	d8e8      	bhi.n	80099fc <__mdiff+0x80>
 8009a2a:	1b33      	subs	r3, r6, r4
 8009a2c:	3b15      	subs	r3, #21
 8009a2e:	f023 0303 	bic.w	r3, r3, #3
 8009a32:	3304      	adds	r3, #4
 8009a34:	3415      	adds	r4, #21
 8009a36:	42a6      	cmp	r6, r4
 8009a38:	bf38      	it	cc
 8009a3a:	2304      	movcc	r3, #4
 8009a3c:	441d      	add	r5, r3
 8009a3e:	4473      	add	r3, lr
 8009a40:	469e      	mov	lr, r3
 8009a42:	462e      	mov	r6, r5
 8009a44:	4566      	cmp	r6, ip
 8009a46:	d30e      	bcc.n	8009a66 <__mdiff+0xea>
 8009a48:	f10c 0203 	add.w	r2, ip, #3
 8009a4c:	1b52      	subs	r2, r2, r5
 8009a4e:	f022 0203 	bic.w	r2, r2, #3
 8009a52:	3d03      	subs	r5, #3
 8009a54:	45ac      	cmp	ip, r5
 8009a56:	bf38      	it	cc
 8009a58:	2200      	movcc	r2, #0
 8009a5a:	4413      	add	r3, r2
 8009a5c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009a60:	b17a      	cbz	r2, 8009a82 <__mdiff+0x106>
 8009a62:	6107      	str	r7, [r0, #16]
 8009a64:	e7a4      	b.n	80099b0 <__mdiff+0x34>
 8009a66:	f856 8b04 	ldr.w	r8, [r6], #4
 8009a6a:	fa11 f288 	uxtah	r2, r1, r8
 8009a6e:	1414      	asrs	r4, r2, #16
 8009a70:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009a74:	b292      	uxth	r2, r2
 8009a76:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009a7a:	f84e 2b04 	str.w	r2, [lr], #4
 8009a7e:	1421      	asrs	r1, r4, #16
 8009a80:	e7e0      	b.n	8009a44 <__mdiff+0xc8>
 8009a82:	3f01      	subs	r7, #1
 8009a84:	e7ea      	b.n	8009a5c <__mdiff+0xe0>
 8009a86:	bf00      	nop
 8009a88:	0800aa9e 	.word	0x0800aa9e
 8009a8c:	0800ab0f 	.word	0x0800ab0f

08009a90 <__ulp>:
 8009a90:	b082      	sub	sp, #8
 8009a92:	ed8d 0b00 	vstr	d0, [sp]
 8009a96:	9a01      	ldr	r2, [sp, #4]
 8009a98:	4b0f      	ldr	r3, [pc, #60]	; (8009ad8 <__ulp+0x48>)
 8009a9a:	4013      	ands	r3, r2
 8009a9c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	dc08      	bgt.n	8009ab6 <__ulp+0x26>
 8009aa4:	425b      	negs	r3, r3
 8009aa6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009aaa:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009aae:	da04      	bge.n	8009aba <__ulp+0x2a>
 8009ab0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009ab4:	4113      	asrs	r3, r2
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	e008      	b.n	8009acc <__ulp+0x3c>
 8009aba:	f1a2 0314 	sub.w	r3, r2, #20
 8009abe:	2b1e      	cmp	r3, #30
 8009ac0:	bfda      	itte	le
 8009ac2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009ac6:	40da      	lsrle	r2, r3
 8009ac8:	2201      	movgt	r2, #1
 8009aca:	2300      	movs	r3, #0
 8009acc:	4619      	mov	r1, r3
 8009ace:	4610      	mov	r0, r2
 8009ad0:	ec41 0b10 	vmov	d0, r0, r1
 8009ad4:	b002      	add	sp, #8
 8009ad6:	4770      	bx	lr
 8009ad8:	7ff00000 	.word	0x7ff00000

08009adc <__b2d>:
 8009adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ae0:	6906      	ldr	r6, [r0, #16]
 8009ae2:	f100 0814 	add.w	r8, r0, #20
 8009ae6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009aea:	1f37      	subs	r7, r6, #4
 8009aec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009af0:	4610      	mov	r0, r2
 8009af2:	f7ff fd53 	bl	800959c <__hi0bits>
 8009af6:	f1c0 0320 	rsb	r3, r0, #32
 8009afa:	280a      	cmp	r0, #10
 8009afc:	600b      	str	r3, [r1, #0]
 8009afe:	491b      	ldr	r1, [pc, #108]	; (8009b6c <__b2d+0x90>)
 8009b00:	dc15      	bgt.n	8009b2e <__b2d+0x52>
 8009b02:	f1c0 0c0b 	rsb	ip, r0, #11
 8009b06:	fa22 f30c 	lsr.w	r3, r2, ip
 8009b0a:	45b8      	cmp	r8, r7
 8009b0c:	ea43 0501 	orr.w	r5, r3, r1
 8009b10:	bf34      	ite	cc
 8009b12:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009b16:	2300      	movcs	r3, #0
 8009b18:	3015      	adds	r0, #21
 8009b1a:	fa02 f000 	lsl.w	r0, r2, r0
 8009b1e:	fa23 f30c 	lsr.w	r3, r3, ip
 8009b22:	4303      	orrs	r3, r0
 8009b24:	461c      	mov	r4, r3
 8009b26:	ec45 4b10 	vmov	d0, r4, r5
 8009b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b2e:	45b8      	cmp	r8, r7
 8009b30:	bf3a      	itte	cc
 8009b32:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009b36:	f1a6 0708 	subcc.w	r7, r6, #8
 8009b3a:	2300      	movcs	r3, #0
 8009b3c:	380b      	subs	r0, #11
 8009b3e:	d012      	beq.n	8009b66 <__b2d+0x8a>
 8009b40:	f1c0 0120 	rsb	r1, r0, #32
 8009b44:	fa23 f401 	lsr.w	r4, r3, r1
 8009b48:	4082      	lsls	r2, r0
 8009b4a:	4322      	orrs	r2, r4
 8009b4c:	4547      	cmp	r7, r8
 8009b4e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8009b52:	bf8c      	ite	hi
 8009b54:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009b58:	2200      	movls	r2, #0
 8009b5a:	4083      	lsls	r3, r0
 8009b5c:	40ca      	lsrs	r2, r1
 8009b5e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009b62:	4313      	orrs	r3, r2
 8009b64:	e7de      	b.n	8009b24 <__b2d+0x48>
 8009b66:	ea42 0501 	orr.w	r5, r2, r1
 8009b6a:	e7db      	b.n	8009b24 <__b2d+0x48>
 8009b6c:	3ff00000 	.word	0x3ff00000

08009b70 <__d2b>:
 8009b70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009b74:	460f      	mov	r7, r1
 8009b76:	2101      	movs	r1, #1
 8009b78:	ec59 8b10 	vmov	r8, r9, d0
 8009b7c:	4616      	mov	r6, r2
 8009b7e:	f7ff fc1b 	bl	80093b8 <_Balloc>
 8009b82:	4604      	mov	r4, r0
 8009b84:	b930      	cbnz	r0, 8009b94 <__d2b+0x24>
 8009b86:	4602      	mov	r2, r0
 8009b88:	4b24      	ldr	r3, [pc, #144]	; (8009c1c <__d2b+0xac>)
 8009b8a:	4825      	ldr	r0, [pc, #148]	; (8009c20 <__d2b+0xb0>)
 8009b8c:	f240 310f 	movw	r1, #783	; 0x30f
 8009b90:	f000 fafc 	bl	800a18c <__assert_func>
 8009b94:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009b98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b9c:	bb2d      	cbnz	r5, 8009bea <__d2b+0x7a>
 8009b9e:	9301      	str	r3, [sp, #4]
 8009ba0:	f1b8 0300 	subs.w	r3, r8, #0
 8009ba4:	d026      	beq.n	8009bf4 <__d2b+0x84>
 8009ba6:	4668      	mov	r0, sp
 8009ba8:	9300      	str	r3, [sp, #0]
 8009baa:	f7ff fd17 	bl	80095dc <__lo0bits>
 8009bae:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009bb2:	b1e8      	cbz	r0, 8009bf0 <__d2b+0x80>
 8009bb4:	f1c0 0320 	rsb	r3, r0, #32
 8009bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bbc:	430b      	orrs	r3, r1
 8009bbe:	40c2      	lsrs	r2, r0
 8009bc0:	6163      	str	r3, [r4, #20]
 8009bc2:	9201      	str	r2, [sp, #4]
 8009bc4:	9b01      	ldr	r3, [sp, #4]
 8009bc6:	61a3      	str	r3, [r4, #24]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	bf14      	ite	ne
 8009bcc:	2202      	movne	r2, #2
 8009bce:	2201      	moveq	r2, #1
 8009bd0:	6122      	str	r2, [r4, #16]
 8009bd2:	b1bd      	cbz	r5, 8009c04 <__d2b+0x94>
 8009bd4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009bd8:	4405      	add	r5, r0
 8009bda:	603d      	str	r5, [r7, #0]
 8009bdc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009be0:	6030      	str	r0, [r6, #0]
 8009be2:	4620      	mov	r0, r4
 8009be4:	b003      	add	sp, #12
 8009be6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009bee:	e7d6      	b.n	8009b9e <__d2b+0x2e>
 8009bf0:	6161      	str	r1, [r4, #20]
 8009bf2:	e7e7      	b.n	8009bc4 <__d2b+0x54>
 8009bf4:	a801      	add	r0, sp, #4
 8009bf6:	f7ff fcf1 	bl	80095dc <__lo0bits>
 8009bfa:	9b01      	ldr	r3, [sp, #4]
 8009bfc:	6163      	str	r3, [r4, #20]
 8009bfe:	3020      	adds	r0, #32
 8009c00:	2201      	movs	r2, #1
 8009c02:	e7e5      	b.n	8009bd0 <__d2b+0x60>
 8009c04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c0c:	6038      	str	r0, [r7, #0]
 8009c0e:	6918      	ldr	r0, [r3, #16]
 8009c10:	f7ff fcc4 	bl	800959c <__hi0bits>
 8009c14:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c18:	e7e2      	b.n	8009be0 <__d2b+0x70>
 8009c1a:	bf00      	nop
 8009c1c:	0800aa9e 	.word	0x0800aa9e
 8009c20:	0800ab0f 	.word	0x0800ab0f

08009c24 <__ratio>:
 8009c24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c28:	4688      	mov	r8, r1
 8009c2a:	4669      	mov	r1, sp
 8009c2c:	4681      	mov	r9, r0
 8009c2e:	f7ff ff55 	bl	8009adc <__b2d>
 8009c32:	a901      	add	r1, sp, #4
 8009c34:	4640      	mov	r0, r8
 8009c36:	ec55 4b10 	vmov	r4, r5, d0
 8009c3a:	f7ff ff4f 	bl	8009adc <__b2d>
 8009c3e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c42:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009c46:	eba3 0c02 	sub.w	ip, r3, r2
 8009c4a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009c4e:	1a9b      	subs	r3, r3, r2
 8009c50:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009c54:	ec51 0b10 	vmov	r0, r1, d0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	bfd6      	itet	le
 8009c5c:	460a      	movle	r2, r1
 8009c5e:	462a      	movgt	r2, r5
 8009c60:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009c64:	468b      	mov	fp, r1
 8009c66:	462f      	mov	r7, r5
 8009c68:	bfd4      	ite	le
 8009c6a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009c6e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009c72:	4620      	mov	r0, r4
 8009c74:	ee10 2a10 	vmov	r2, s0
 8009c78:	465b      	mov	r3, fp
 8009c7a:	4639      	mov	r1, r7
 8009c7c:	f7f6 fdee 	bl	800085c <__aeabi_ddiv>
 8009c80:	ec41 0b10 	vmov	d0, r0, r1
 8009c84:	b003      	add	sp, #12
 8009c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c8a <__copybits>:
 8009c8a:	3901      	subs	r1, #1
 8009c8c:	b570      	push	{r4, r5, r6, lr}
 8009c8e:	1149      	asrs	r1, r1, #5
 8009c90:	6914      	ldr	r4, [r2, #16]
 8009c92:	3101      	adds	r1, #1
 8009c94:	f102 0314 	add.w	r3, r2, #20
 8009c98:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009c9c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009ca0:	1f05      	subs	r5, r0, #4
 8009ca2:	42a3      	cmp	r3, r4
 8009ca4:	d30c      	bcc.n	8009cc0 <__copybits+0x36>
 8009ca6:	1aa3      	subs	r3, r4, r2
 8009ca8:	3b11      	subs	r3, #17
 8009caa:	f023 0303 	bic.w	r3, r3, #3
 8009cae:	3211      	adds	r2, #17
 8009cb0:	42a2      	cmp	r2, r4
 8009cb2:	bf88      	it	hi
 8009cb4:	2300      	movhi	r3, #0
 8009cb6:	4418      	add	r0, r3
 8009cb8:	2300      	movs	r3, #0
 8009cba:	4288      	cmp	r0, r1
 8009cbc:	d305      	bcc.n	8009cca <__copybits+0x40>
 8009cbe:	bd70      	pop	{r4, r5, r6, pc}
 8009cc0:	f853 6b04 	ldr.w	r6, [r3], #4
 8009cc4:	f845 6f04 	str.w	r6, [r5, #4]!
 8009cc8:	e7eb      	b.n	8009ca2 <__copybits+0x18>
 8009cca:	f840 3b04 	str.w	r3, [r0], #4
 8009cce:	e7f4      	b.n	8009cba <__copybits+0x30>

08009cd0 <__any_on>:
 8009cd0:	f100 0214 	add.w	r2, r0, #20
 8009cd4:	6900      	ldr	r0, [r0, #16]
 8009cd6:	114b      	asrs	r3, r1, #5
 8009cd8:	4298      	cmp	r0, r3
 8009cda:	b510      	push	{r4, lr}
 8009cdc:	db11      	blt.n	8009d02 <__any_on+0x32>
 8009cde:	dd0a      	ble.n	8009cf6 <__any_on+0x26>
 8009ce0:	f011 011f 	ands.w	r1, r1, #31
 8009ce4:	d007      	beq.n	8009cf6 <__any_on+0x26>
 8009ce6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009cea:	fa24 f001 	lsr.w	r0, r4, r1
 8009cee:	fa00 f101 	lsl.w	r1, r0, r1
 8009cf2:	428c      	cmp	r4, r1
 8009cf4:	d10b      	bne.n	8009d0e <__any_on+0x3e>
 8009cf6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d803      	bhi.n	8009d06 <__any_on+0x36>
 8009cfe:	2000      	movs	r0, #0
 8009d00:	bd10      	pop	{r4, pc}
 8009d02:	4603      	mov	r3, r0
 8009d04:	e7f7      	b.n	8009cf6 <__any_on+0x26>
 8009d06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d0a:	2900      	cmp	r1, #0
 8009d0c:	d0f5      	beq.n	8009cfa <__any_on+0x2a>
 8009d0e:	2001      	movs	r0, #1
 8009d10:	e7f6      	b.n	8009d00 <__any_on+0x30>

08009d12 <__ascii_wctomb>:
 8009d12:	b149      	cbz	r1, 8009d28 <__ascii_wctomb+0x16>
 8009d14:	2aff      	cmp	r2, #255	; 0xff
 8009d16:	bf85      	ittet	hi
 8009d18:	238a      	movhi	r3, #138	; 0x8a
 8009d1a:	6003      	strhi	r3, [r0, #0]
 8009d1c:	700a      	strbls	r2, [r1, #0]
 8009d1e:	f04f 30ff 	movhi.w	r0, #4294967295
 8009d22:	bf98      	it	ls
 8009d24:	2001      	movls	r0, #1
 8009d26:	4770      	bx	lr
 8009d28:	4608      	mov	r0, r1
 8009d2a:	4770      	bx	lr

08009d2c <__ssputs_r>:
 8009d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d30:	688e      	ldr	r6, [r1, #8]
 8009d32:	461f      	mov	r7, r3
 8009d34:	42be      	cmp	r6, r7
 8009d36:	680b      	ldr	r3, [r1, #0]
 8009d38:	4682      	mov	sl, r0
 8009d3a:	460c      	mov	r4, r1
 8009d3c:	4690      	mov	r8, r2
 8009d3e:	d82c      	bhi.n	8009d9a <__ssputs_r+0x6e>
 8009d40:	898a      	ldrh	r2, [r1, #12]
 8009d42:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d46:	d026      	beq.n	8009d96 <__ssputs_r+0x6a>
 8009d48:	6965      	ldr	r5, [r4, #20]
 8009d4a:	6909      	ldr	r1, [r1, #16]
 8009d4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d50:	eba3 0901 	sub.w	r9, r3, r1
 8009d54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d58:	1c7b      	adds	r3, r7, #1
 8009d5a:	444b      	add	r3, r9
 8009d5c:	106d      	asrs	r5, r5, #1
 8009d5e:	429d      	cmp	r5, r3
 8009d60:	bf38      	it	cc
 8009d62:	461d      	movcc	r5, r3
 8009d64:	0553      	lsls	r3, r2, #21
 8009d66:	d527      	bpl.n	8009db8 <__ssputs_r+0x8c>
 8009d68:	4629      	mov	r1, r5
 8009d6a:	f7ff fa87 	bl	800927c <_malloc_r>
 8009d6e:	4606      	mov	r6, r0
 8009d70:	b360      	cbz	r0, 8009dcc <__ssputs_r+0xa0>
 8009d72:	6921      	ldr	r1, [r4, #16]
 8009d74:	464a      	mov	r2, r9
 8009d76:	f7fe f81a 	bl	8007dae <memcpy>
 8009d7a:	89a3      	ldrh	r3, [r4, #12]
 8009d7c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d84:	81a3      	strh	r3, [r4, #12]
 8009d86:	6126      	str	r6, [r4, #16]
 8009d88:	6165      	str	r5, [r4, #20]
 8009d8a:	444e      	add	r6, r9
 8009d8c:	eba5 0509 	sub.w	r5, r5, r9
 8009d90:	6026      	str	r6, [r4, #0]
 8009d92:	60a5      	str	r5, [r4, #8]
 8009d94:	463e      	mov	r6, r7
 8009d96:	42be      	cmp	r6, r7
 8009d98:	d900      	bls.n	8009d9c <__ssputs_r+0x70>
 8009d9a:	463e      	mov	r6, r7
 8009d9c:	6820      	ldr	r0, [r4, #0]
 8009d9e:	4632      	mov	r2, r6
 8009da0:	4641      	mov	r1, r8
 8009da2:	f000 f9c9 	bl	800a138 <memmove>
 8009da6:	68a3      	ldr	r3, [r4, #8]
 8009da8:	1b9b      	subs	r3, r3, r6
 8009daa:	60a3      	str	r3, [r4, #8]
 8009dac:	6823      	ldr	r3, [r4, #0]
 8009dae:	4433      	add	r3, r6
 8009db0:	6023      	str	r3, [r4, #0]
 8009db2:	2000      	movs	r0, #0
 8009db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009db8:	462a      	mov	r2, r5
 8009dba:	f000 fa1b 	bl	800a1f4 <_realloc_r>
 8009dbe:	4606      	mov	r6, r0
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	d1e0      	bne.n	8009d86 <__ssputs_r+0x5a>
 8009dc4:	6921      	ldr	r1, [r4, #16]
 8009dc6:	4650      	mov	r0, sl
 8009dc8:	f7fe fe8c 	bl	8008ae4 <_free_r>
 8009dcc:	230c      	movs	r3, #12
 8009dce:	f8ca 3000 	str.w	r3, [sl]
 8009dd2:	89a3      	ldrh	r3, [r4, #12]
 8009dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dd8:	81a3      	strh	r3, [r4, #12]
 8009dda:	f04f 30ff 	mov.w	r0, #4294967295
 8009dde:	e7e9      	b.n	8009db4 <__ssputs_r+0x88>

08009de0 <_svfiprintf_r>:
 8009de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009de4:	4698      	mov	r8, r3
 8009de6:	898b      	ldrh	r3, [r1, #12]
 8009de8:	061b      	lsls	r3, r3, #24
 8009dea:	b09d      	sub	sp, #116	; 0x74
 8009dec:	4607      	mov	r7, r0
 8009dee:	460d      	mov	r5, r1
 8009df0:	4614      	mov	r4, r2
 8009df2:	d50e      	bpl.n	8009e12 <_svfiprintf_r+0x32>
 8009df4:	690b      	ldr	r3, [r1, #16]
 8009df6:	b963      	cbnz	r3, 8009e12 <_svfiprintf_r+0x32>
 8009df8:	2140      	movs	r1, #64	; 0x40
 8009dfa:	f7ff fa3f 	bl	800927c <_malloc_r>
 8009dfe:	6028      	str	r0, [r5, #0]
 8009e00:	6128      	str	r0, [r5, #16]
 8009e02:	b920      	cbnz	r0, 8009e0e <_svfiprintf_r+0x2e>
 8009e04:	230c      	movs	r3, #12
 8009e06:	603b      	str	r3, [r7, #0]
 8009e08:	f04f 30ff 	mov.w	r0, #4294967295
 8009e0c:	e0d0      	b.n	8009fb0 <_svfiprintf_r+0x1d0>
 8009e0e:	2340      	movs	r3, #64	; 0x40
 8009e10:	616b      	str	r3, [r5, #20]
 8009e12:	2300      	movs	r3, #0
 8009e14:	9309      	str	r3, [sp, #36]	; 0x24
 8009e16:	2320      	movs	r3, #32
 8009e18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e20:	2330      	movs	r3, #48	; 0x30
 8009e22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009fc8 <_svfiprintf_r+0x1e8>
 8009e26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e2a:	f04f 0901 	mov.w	r9, #1
 8009e2e:	4623      	mov	r3, r4
 8009e30:	469a      	mov	sl, r3
 8009e32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e36:	b10a      	cbz	r2, 8009e3c <_svfiprintf_r+0x5c>
 8009e38:	2a25      	cmp	r2, #37	; 0x25
 8009e3a:	d1f9      	bne.n	8009e30 <_svfiprintf_r+0x50>
 8009e3c:	ebba 0b04 	subs.w	fp, sl, r4
 8009e40:	d00b      	beq.n	8009e5a <_svfiprintf_r+0x7a>
 8009e42:	465b      	mov	r3, fp
 8009e44:	4622      	mov	r2, r4
 8009e46:	4629      	mov	r1, r5
 8009e48:	4638      	mov	r0, r7
 8009e4a:	f7ff ff6f 	bl	8009d2c <__ssputs_r>
 8009e4e:	3001      	adds	r0, #1
 8009e50:	f000 80a9 	beq.w	8009fa6 <_svfiprintf_r+0x1c6>
 8009e54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e56:	445a      	add	r2, fp
 8009e58:	9209      	str	r2, [sp, #36]	; 0x24
 8009e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f000 80a1 	beq.w	8009fa6 <_svfiprintf_r+0x1c6>
 8009e64:	2300      	movs	r3, #0
 8009e66:	f04f 32ff 	mov.w	r2, #4294967295
 8009e6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e6e:	f10a 0a01 	add.w	sl, sl, #1
 8009e72:	9304      	str	r3, [sp, #16]
 8009e74:	9307      	str	r3, [sp, #28]
 8009e76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e7a:	931a      	str	r3, [sp, #104]	; 0x68
 8009e7c:	4654      	mov	r4, sl
 8009e7e:	2205      	movs	r2, #5
 8009e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e84:	4850      	ldr	r0, [pc, #320]	; (8009fc8 <_svfiprintf_r+0x1e8>)
 8009e86:	f7f6 f9ab 	bl	80001e0 <memchr>
 8009e8a:	9a04      	ldr	r2, [sp, #16]
 8009e8c:	b9d8      	cbnz	r0, 8009ec6 <_svfiprintf_r+0xe6>
 8009e8e:	06d0      	lsls	r0, r2, #27
 8009e90:	bf44      	itt	mi
 8009e92:	2320      	movmi	r3, #32
 8009e94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e98:	0711      	lsls	r1, r2, #28
 8009e9a:	bf44      	itt	mi
 8009e9c:	232b      	movmi	r3, #43	; 0x2b
 8009e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ea8:	d015      	beq.n	8009ed6 <_svfiprintf_r+0xf6>
 8009eaa:	9a07      	ldr	r2, [sp, #28]
 8009eac:	4654      	mov	r4, sl
 8009eae:	2000      	movs	r0, #0
 8009eb0:	f04f 0c0a 	mov.w	ip, #10
 8009eb4:	4621      	mov	r1, r4
 8009eb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009eba:	3b30      	subs	r3, #48	; 0x30
 8009ebc:	2b09      	cmp	r3, #9
 8009ebe:	d94d      	bls.n	8009f5c <_svfiprintf_r+0x17c>
 8009ec0:	b1b0      	cbz	r0, 8009ef0 <_svfiprintf_r+0x110>
 8009ec2:	9207      	str	r2, [sp, #28]
 8009ec4:	e014      	b.n	8009ef0 <_svfiprintf_r+0x110>
 8009ec6:	eba0 0308 	sub.w	r3, r0, r8
 8009eca:	fa09 f303 	lsl.w	r3, r9, r3
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	9304      	str	r3, [sp, #16]
 8009ed2:	46a2      	mov	sl, r4
 8009ed4:	e7d2      	b.n	8009e7c <_svfiprintf_r+0x9c>
 8009ed6:	9b03      	ldr	r3, [sp, #12]
 8009ed8:	1d19      	adds	r1, r3, #4
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	9103      	str	r1, [sp, #12]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	bfbb      	ittet	lt
 8009ee2:	425b      	neglt	r3, r3
 8009ee4:	f042 0202 	orrlt.w	r2, r2, #2
 8009ee8:	9307      	strge	r3, [sp, #28]
 8009eea:	9307      	strlt	r3, [sp, #28]
 8009eec:	bfb8      	it	lt
 8009eee:	9204      	strlt	r2, [sp, #16]
 8009ef0:	7823      	ldrb	r3, [r4, #0]
 8009ef2:	2b2e      	cmp	r3, #46	; 0x2e
 8009ef4:	d10c      	bne.n	8009f10 <_svfiprintf_r+0x130>
 8009ef6:	7863      	ldrb	r3, [r4, #1]
 8009ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8009efa:	d134      	bne.n	8009f66 <_svfiprintf_r+0x186>
 8009efc:	9b03      	ldr	r3, [sp, #12]
 8009efe:	1d1a      	adds	r2, r3, #4
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	9203      	str	r2, [sp, #12]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	bfb8      	it	lt
 8009f08:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f0c:	3402      	adds	r4, #2
 8009f0e:	9305      	str	r3, [sp, #20]
 8009f10:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009fd8 <_svfiprintf_r+0x1f8>
 8009f14:	7821      	ldrb	r1, [r4, #0]
 8009f16:	2203      	movs	r2, #3
 8009f18:	4650      	mov	r0, sl
 8009f1a:	f7f6 f961 	bl	80001e0 <memchr>
 8009f1e:	b138      	cbz	r0, 8009f30 <_svfiprintf_r+0x150>
 8009f20:	9b04      	ldr	r3, [sp, #16]
 8009f22:	eba0 000a 	sub.w	r0, r0, sl
 8009f26:	2240      	movs	r2, #64	; 0x40
 8009f28:	4082      	lsls	r2, r0
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	3401      	adds	r4, #1
 8009f2e:	9304      	str	r3, [sp, #16]
 8009f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f34:	4825      	ldr	r0, [pc, #148]	; (8009fcc <_svfiprintf_r+0x1ec>)
 8009f36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f3a:	2206      	movs	r2, #6
 8009f3c:	f7f6 f950 	bl	80001e0 <memchr>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	d038      	beq.n	8009fb6 <_svfiprintf_r+0x1d6>
 8009f44:	4b22      	ldr	r3, [pc, #136]	; (8009fd0 <_svfiprintf_r+0x1f0>)
 8009f46:	bb1b      	cbnz	r3, 8009f90 <_svfiprintf_r+0x1b0>
 8009f48:	9b03      	ldr	r3, [sp, #12]
 8009f4a:	3307      	adds	r3, #7
 8009f4c:	f023 0307 	bic.w	r3, r3, #7
 8009f50:	3308      	adds	r3, #8
 8009f52:	9303      	str	r3, [sp, #12]
 8009f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f56:	4433      	add	r3, r6
 8009f58:	9309      	str	r3, [sp, #36]	; 0x24
 8009f5a:	e768      	b.n	8009e2e <_svfiprintf_r+0x4e>
 8009f5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f60:	460c      	mov	r4, r1
 8009f62:	2001      	movs	r0, #1
 8009f64:	e7a6      	b.n	8009eb4 <_svfiprintf_r+0xd4>
 8009f66:	2300      	movs	r3, #0
 8009f68:	3401      	adds	r4, #1
 8009f6a:	9305      	str	r3, [sp, #20]
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	f04f 0c0a 	mov.w	ip, #10
 8009f72:	4620      	mov	r0, r4
 8009f74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f78:	3a30      	subs	r2, #48	; 0x30
 8009f7a:	2a09      	cmp	r2, #9
 8009f7c:	d903      	bls.n	8009f86 <_svfiprintf_r+0x1a6>
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d0c6      	beq.n	8009f10 <_svfiprintf_r+0x130>
 8009f82:	9105      	str	r1, [sp, #20]
 8009f84:	e7c4      	b.n	8009f10 <_svfiprintf_r+0x130>
 8009f86:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	e7f0      	b.n	8009f72 <_svfiprintf_r+0x192>
 8009f90:	ab03      	add	r3, sp, #12
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	462a      	mov	r2, r5
 8009f96:	4b0f      	ldr	r3, [pc, #60]	; (8009fd4 <_svfiprintf_r+0x1f4>)
 8009f98:	a904      	add	r1, sp, #16
 8009f9a:	4638      	mov	r0, r7
 8009f9c:	f7fc ff68 	bl	8006e70 <_printf_float>
 8009fa0:	1c42      	adds	r2, r0, #1
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	d1d6      	bne.n	8009f54 <_svfiprintf_r+0x174>
 8009fa6:	89ab      	ldrh	r3, [r5, #12]
 8009fa8:	065b      	lsls	r3, r3, #25
 8009faa:	f53f af2d 	bmi.w	8009e08 <_svfiprintf_r+0x28>
 8009fae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fb0:	b01d      	add	sp, #116	; 0x74
 8009fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb6:	ab03      	add	r3, sp, #12
 8009fb8:	9300      	str	r3, [sp, #0]
 8009fba:	462a      	mov	r2, r5
 8009fbc:	4b05      	ldr	r3, [pc, #20]	; (8009fd4 <_svfiprintf_r+0x1f4>)
 8009fbe:	a904      	add	r1, sp, #16
 8009fc0:	4638      	mov	r0, r7
 8009fc2:	f7fd f9f9 	bl	80073b8 <_printf_i>
 8009fc6:	e7eb      	b.n	8009fa0 <_svfiprintf_r+0x1c0>
 8009fc8:	0800ac64 	.word	0x0800ac64
 8009fcc:	0800ac6e 	.word	0x0800ac6e
 8009fd0:	08006e71 	.word	0x08006e71
 8009fd4:	08009d2d 	.word	0x08009d2d
 8009fd8:	0800ac6a 	.word	0x0800ac6a

08009fdc <__sflush_r>:
 8009fdc:	898a      	ldrh	r2, [r1, #12]
 8009fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fe2:	4605      	mov	r5, r0
 8009fe4:	0710      	lsls	r0, r2, #28
 8009fe6:	460c      	mov	r4, r1
 8009fe8:	d458      	bmi.n	800a09c <__sflush_r+0xc0>
 8009fea:	684b      	ldr	r3, [r1, #4]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	dc05      	bgt.n	8009ffc <__sflush_r+0x20>
 8009ff0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	dc02      	bgt.n	8009ffc <__sflush_r+0x20>
 8009ff6:	2000      	movs	r0, #0
 8009ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ffc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ffe:	2e00      	cmp	r6, #0
 800a000:	d0f9      	beq.n	8009ff6 <__sflush_r+0x1a>
 800a002:	2300      	movs	r3, #0
 800a004:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a008:	682f      	ldr	r7, [r5, #0]
 800a00a:	6a21      	ldr	r1, [r4, #32]
 800a00c:	602b      	str	r3, [r5, #0]
 800a00e:	d032      	beq.n	800a076 <__sflush_r+0x9a>
 800a010:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a012:	89a3      	ldrh	r3, [r4, #12]
 800a014:	075a      	lsls	r2, r3, #29
 800a016:	d505      	bpl.n	800a024 <__sflush_r+0x48>
 800a018:	6863      	ldr	r3, [r4, #4]
 800a01a:	1ac0      	subs	r0, r0, r3
 800a01c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a01e:	b10b      	cbz	r3, 800a024 <__sflush_r+0x48>
 800a020:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a022:	1ac0      	subs	r0, r0, r3
 800a024:	2300      	movs	r3, #0
 800a026:	4602      	mov	r2, r0
 800a028:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a02a:	6a21      	ldr	r1, [r4, #32]
 800a02c:	4628      	mov	r0, r5
 800a02e:	47b0      	blx	r6
 800a030:	1c43      	adds	r3, r0, #1
 800a032:	89a3      	ldrh	r3, [r4, #12]
 800a034:	d106      	bne.n	800a044 <__sflush_r+0x68>
 800a036:	6829      	ldr	r1, [r5, #0]
 800a038:	291d      	cmp	r1, #29
 800a03a:	d82b      	bhi.n	800a094 <__sflush_r+0xb8>
 800a03c:	4a29      	ldr	r2, [pc, #164]	; (800a0e4 <__sflush_r+0x108>)
 800a03e:	410a      	asrs	r2, r1
 800a040:	07d6      	lsls	r6, r2, #31
 800a042:	d427      	bmi.n	800a094 <__sflush_r+0xb8>
 800a044:	2200      	movs	r2, #0
 800a046:	6062      	str	r2, [r4, #4]
 800a048:	04d9      	lsls	r1, r3, #19
 800a04a:	6922      	ldr	r2, [r4, #16]
 800a04c:	6022      	str	r2, [r4, #0]
 800a04e:	d504      	bpl.n	800a05a <__sflush_r+0x7e>
 800a050:	1c42      	adds	r2, r0, #1
 800a052:	d101      	bne.n	800a058 <__sflush_r+0x7c>
 800a054:	682b      	ldr	r3, [r5, #0]
 800a056:	b903      	cbnz	r3, 800a05a <__sflush_r+0x7e>
 800a058:	6560      	str	r0, [r4, #84]	; 0x54
 800a05a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a05c:	602f      	str	r7, [r5, #0]
 800a05e:	2900      	cmp	r1, #0
 800a060:	d0c9      	beq.n	8009ff6 <__sflush_r+0x1a>
 800a062:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a066:	4299      	cmp	r1, r3
 800a068:	d002      	beq.n	800a070 <__sflush_r+0x94>
 800a06a:	4628      	mov	r0, r5
 800a06c:	f7fe fd3a 	bl	8008ae4 <_free_r>
 800a070:	2000      	movs	r0, #0
 800a072:	6360      	str	r0, [r4, #52]	; 0x34
 800a074:	e7c0      	b.n	8009ff8 <__sflush_r+0x1c>
 800a076:	2301      	movs	r3, #1
 800a078:	4628      	mov	r0, r5
 800a07a:	47b0      	blx	r6
 800a07c:	1c41      	adds	r1, r0, #1
 800a07e:	d1c8      	bne.n	800a012 <__sflush_r+0x36>
 800a080:	682b      	ldr	r3, [r5, #0]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d0c5      	beq.n	800a012 <__sflush_r+0x36>
 800a086:	2b1d      	cmp	r3, #29
 800a088:	d001      	beq.n	800a08e <__sflush_r+0xb2>
 800a08a:	2b16      	cmp	r3, #22
 800a08c:	d101      	bne.n	800a092 <__sflush_r+0xb6>
 800a08e:	602f      	str	r7, [r5, #0]
 800a090:	e7b1      	b.n	8009ff6 <__sflush_r+0x1a>
 800a092:	89a3      	ldrh	r3, [r4, #12]
 800a094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a098:	81a3      	strh	r3, [r4, #12]
 800a09a:	e7ad      	b.n	8009ff8 <__sflush_r+0x1c>
 800a09c:	690f      	ldr	r7, [r1, #16]
 800a09e:	2f00      	cmp	r7, #0
 800a0a0:	d0a9      	beq.n	8009ff6 <__sflush_r+0x1a>
 800a0a2:	0793      	lsls	r3, r2, #30
 800a0a4:	680e      	ldr	r6, [r1, #0]
 800a0a6:	bf08      	it	eq
 800a0a8:	694b      	ldreq	r3, [r1, #20]
 800a0aa:	600f      	str	r7, [r1, #0]
 800a0ac:	bf18      	it	ne
 800a0ae:	2300      	movne	r3, #0
 800a0b0:	eba6 0807 	sub.w	r8, r6, r7
 800a0b4:	608b      	str	r3, [r1, #8]
 800a0b6:	f1b8 0f00 	cmp.w	r8, #0
 800a0ba:	dd9c      	ble.n	8009ff6 <__sflush_r+0x1a>
 800a0bc:	6a21      	ldr	r1, [r4, #32]
 800a0be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a0c0:	4643      	mov	r3, r8
 800a0c2:	463a      	mov	r2, r7
 800a0c4:	4628      	mov	r0, r5
 800a0c6:	47b0      	blx	r6
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	dc06      	bgt.n	800a0da <__sflush_r+0xfe>
 800a0cc:	89a3      	ldrh	r3, [r4, #12]
 800a0ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0d2:	81a3      	strh	r3, [r4, #12]
 800a0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0d8:	e78e      	b.n	8009ff8 <__sflush_r+0x1c>
 800a0da:	4407      	add	r7, r0
 800a0dc:	eba8 0800 	sub.w	r8, r8, r0
 800a0e0:	e7e9      	b.n	800a0b6 <__sflush_r+0xda>
 800a0e2:	bf00      	nop
 800a0e4:	dfbffffe 	.word	0xdfbffffe

0800a0e8 <_fflush_r>:
 800a0e8:	b538      	push	{r3, r4, r5, lr}
 800a0ea:	690b      	ldr	r3, [r1, #16]
 800a0ec:	4605      	mov	r5, r0
 800a0ee:	460c      	mov	r4, r1
 800a0f0:	b913      	cbnz	r3, 800a0f8 <_fflush_r+0x10>
 800a0f2:	2500      	movs	r5, #0
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	bd38      	pop	{r3, r4, r5, pc}
 800a0f8:	b118      	cbz	r0, 800a102 <_fflush_r+0x1a>
 800a0fa:	6a03      	ldr	r3, [r0, #32]
 800a0fc:	b90b      	cbnz	r3, 800a102 <_fflush_r+0x1a>
 800a0fe:	f7fd fd19 	bl	8007b34 <__sinit>
 800a102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d0f3      	beq.n	800a0f2 <_fflush_r+0xa>
 800a10a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a10c:	07d0      	lsls	r0, r2, #31
 800a10e:	d404      	bmi.n	800a11a <_fflush_r+0x32>
 800a110:	0599      	lsls	r1, r3, #22
 800a112:	d402      	bmi.n	800a11a <_fflush_r+0x32>
 800a114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a116:	f7fd fe48 	bl	8007daa <__retarget_lock_acquire_recursive>
 800a11a:	4628      	mov	r0, r5
 800a11c:	4621      	mov	r1, r4
 800a11e:	f7ff ff5d 	bl	8009fdc <__sflush_r>
 800a122:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a124:	07da      	lsls	r2, r3, #31
 800a126:	4605      	mov	r5, r0
 800a128:	d4e4      	bmi.n	800a0f4 <_fflush_r+0xc>
 800a12a:	89a3      	ldrh	r3, [r4, #12]
 800a12c:	059b      	lsls	r3, r3, #22
 800a12e:	d4e1      	bmi.n	800a0f4 <_fflush_r+0xc>
 800a130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a132:	f7fd fe3b 	bl	8007dac <__retarget_lock_release_recursive>
 800a136:	e7dd      	b.n	800a0f4 <_fflush_r+0xc>

0800a138 <memmove>:
 800a138:	4288      	cmp	r0, r1
 800a13a:	b510      	push	{r4, lr}
 800a13c:	eb01 0402 	add.w	r4, r1, r2
 800a140:	d902      	bls.n	800a148 <memmove+0x10>
 800a142:	4284      	cmp	r4, r0
 800a144:	4623      	mov	r3, r4
 800a146:	d807      	bhi.n	800a158 <memmove+0x20>
 800a148:	1e43      	subs	r3, r0, #1
 800a14a:	42a1      	cmp	r1, r4
 800a14c:	d008      	beq.n	800a160 <memmove+0x28>
 800a14e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a152:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a156:	e7f8      	b.n	800a14a <memmove+0x12>
 800a158:	4402      	add	r2, r0
 800a15a:	4601      	mov	r1, r0
 800a15c:	428a      	cmp	r2, r1
 800a15e:	d100      	bne.n	800a162 <memmove+0x2a>
 800a160:	bd10      	pop	{r4, pc}
 800a162:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a166:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a16a:	e7f7      	b.n	800a15c <memmove+0x24>

0800a16c <_sbrk_r>:
 800a16c:	b538      	push	{r3, r4, r5, lr}
 800a16e:	4d06      	ldr	r5, [pc, #24]	; (800a188 <_sbrk_r+0x1c>)
 800a170:	2300      	movs	r3, #0
 800a172:	4604      	mov	r4, r0
 800a174:	4608      	mov	r0, r1
 800a176:	602b      	str	r3, [r5, #0]
 800a178:	f7f8 fec8 	bl	8002f0c <_sbrk>
 800a17c:	1c43      	adds	r3, r0, #1
 800a17e:	d102      	bne.n	800a186 <_sbrk_r+0x1a>
 800a180:	682b      	ldr	r3, [r5, #0]
 800a182:	b103      	cbz	r3, 800a186 <_sbrk_r+0x1a>
 800a184:	6023      	str	r3, [r4, #0]
 800a186:	bd38      	pop	{r3, r4, r5, pc}
 800a188:	20000718 	.word	0x20000718

0800a18c <__assert_func>:
 800a18c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a18e:	4614      	mov	r4, r2
 800a190:	461a      	mov	r2, r3
 800a192:	4b09      	ldr	r3, [pc, #36]	; (800a1b8 <__assert_func+0x2c>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4605      	mov	r5, r0
 800a198:	68d8      	ldr	r0, [r3, #12]
 800a19a:	b14c      	cbz	r4, 800a1b0 <__assert_func+0x24>
 800a19c:	4b07      	ldr	r3, [pc, #28]	; (800a1bc <__assert_func+0x30>)
 800a19e:	9100      	str	r1, [sp, #0]
 800a1a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a1a4:	4906      	ldr	r1, [pc, #24]	; (800a1c0 <__assert_func+0x34>)
 800a1a6:	462b      	mov	r3, r5
 800a1a8:	f000 f854 	bl	800a254 <fiprintf>
 800a1ac:	f000 f864 	bl	800a278 <abort>
 800a1b0:	4b04      	ldr	r3, [pc, #16]	; (800a1c4 <__assert_func+0x38>)
 800a1b2:	461c      	mov	r4, r3
 800a1b4:	e7f3      	b.n	800a19e <__assert_func+0x12>
 800a1b6:	bf00      	nop
 800a1b8:	20000238 	.word	0x20000238
 800a1bc:	0800ac75 	.word	0x0800ac75
 800a1c0:	0800ac82 	.word	0x0800ac82
 800a1c4:	0800acb0 	.word	0x0800acb0

0800a1c8 <_calloc_r>:
 800a1c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1ca:	fba1 2402 	umull	r2, r4, r1, r2
 800a1ce:	b94c      	cbnz	r4, 800a1e4 <_calloc_r+0x1c>
 800a1d0:	4611      	mov	r1, r2
 800a1d2:	9201      	str	r2, [sp, #4]
 800a1d4:	f7ff f852 	bl	800927c <_malloc_r>
 800a1d8:	9a01      	ldr	r2, [sp, #4]
 800a1da:	4605      	mov	r5, r0
 800a1dc:	b930      	cbnz	r0, 800a1ec <_calloc_r+0x24>
 800a1de:	4628      	mov	r0, r5
 800a1e0:	b003      	add	sp, #12
 800a1e2:	bd30      	pop	{r4, r5, pc}
 800a1e4:	220c      	movs	r2, #12
 800a1e6:	6002      	str	r2, [r0, #0]
 800a1e8:	2500      	movs	r5, #0
 800a1ea:	e7f8      	b.n	800a1de <_calloc_r+0x16>
 800a1ec:	4621      	mov	r1, r4
 800a1ee:	f7fd fd3a 	bl	8007c66 <memset>
 800a1f2:	e7f4      	b.n	800a1de <_calloc_r+0x16>

0800a1f4 <_realloc_r>:
 800a1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1f8:	4680      	mov	r8, r0
 800a1fa:	4614      	mov	r4, r2
 800a1fc:	460e      	mov	r6, r1
 800a1fe:	b921      	cbnz	r1, 800a20a <_realloc_r+0x16>
 800a200:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a204:	4611      	mov	r1, r2
 800a206:	f7ff b839 	b.w	800927c <_malloc_r>
 800a20a:	b92a      	cbnz	r2, 800a218 <_realloc_r+0x24>
 800a20c:	f7fe fc6a 	bl	8008ae4 <_free_r>
 800a210:	4625      	mov	r5, r4
 800a212:	4628      	mov	r0, r5
 800a214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a218:	f000 f835 	bl	800a286 <_malloc_usable_size_r>
 800a21c:	4284      	cmp	r4, r0
 800a21e:	4607      	mov	r7, r0
 800a220:	d802      	bhi.n	800a228 <_realloc_r+0x34>
 800a222:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a226:	d812      	bhi.n	800a24e <_realloc_r+0x5a>
 800a228:	4621      	mov	r1, r4
 800a22a:	4640      	mov	r0, r8
 800a22c:	f7ff f826 	bl	800927c <_malloc_r>
 800a230:	4605      	mov	r5, r0
 800a232:	2800      	cmp	r0, #0
 800a234:	d0ed      	beq.n	800a212 <_realloc_r+0x1e>
 800a236:	42bc      	cmp	r4, r7
 800a238:	4622      	mov	r2, r4
 800a23a:	4631      	mov	r1, r6
 800a23c:	bf28      	it	cs
 800a23e:	463a      	movcs	r2, r7
 800a240:	f7fd fdb5 	bl	8007dae <memcpy>
 800a244:	4631      	mov	r1, r6
 800a246:	4640      	mov	r0, r8
 800a248:	f7fe fc4c 	bl	8008ae4 <_free_r>
 800a24c:	e7e1      	b.n	800a212 <_realloc_r+0x1e>
 800a24e:	4635      	mov	r5, r6
 800a250:	e7df      	b.n	800a212 <_realloc_r+0x1e>
	...

0800a254 <fiprintf>:
 800a254:	b40e      	push	{r1, r2, r3}
 800a256:	b503      	push	{r0, r1, lr}
 800a258:	4601      	mov	r1, r0
 800a25a:	ab03      	add	r3, sp, #12
 800a25c:	4805      	ldr	r0, [pc, #20]	; (800a274 <fiprintf+0x20>)
 800a25e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a262:	6800      	ldr	r0, [r0, #0]
 800a264:	9301      	str	r3, [sp, #4]
 800a266:	f000 f83f 	bl	800a2e8 <_vfiprintf_r>
 800a26a:	b002      	add	sp, #8
 800a26c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a270:	b003      	add	sp, #12
 800a272:	4770      	bx	lr
 800a274:	20000238 	.word	0x20000238

0800a278 <abort>:
 800a278:	b508      	push	{r3, lr}
 800a27a:	2006      	movs	r0, #6
 800a27c:	f000 fa0c 	bl	800a698 <raise>
 800a280:	2001      	movs	r0, #1
 800a282:	f7f8 fdcb 	bl	8002e1c <_exit>

0800a286 <_malloc_usable_size_r>:
 800a286:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a28a:	1f18      	subs	r0, r3, #4
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	bfbc      	itt	lt
 800a290:	580b      	ldrlt	r3, [r1, r0]
 800a292:	18c0      	addlt	r0, r0, r3
 800a294:	4770      	bx	lr

0800a296 <__sfputc_r>:
 800a296:	6893      	ldr	r3, [r2, #8]
 800a298:	3b01      	subs	r3, #1
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	b410      	push	{r4}
 800a29e:	6093      	str	r3, [r2, #8]
 800a2a0:	da08      	bge.n	800a2b4 <__sfputc_r+0x1e>
 800a2a2:	6994      	ldr	r4, [r2, #24]
 800a2a4:	42a3      	cmp	r3, r4
 800a2a6:	db01      	blt.n	800a2ac <__sfputc_r+0x16>
 800a2a8:	290a      	cmp	r1, #10
 800a2aa:	d103      	bne.n	800a2b4 <__sfputc_r+0x1e>
 800a2ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2b0:	f000 b934 	b.w	800a51c <__swbuf_r>
 800a2b4:	6813      	ldr	r3, [r2, #0]
 800a2b6:	1c58      	adds	r0, r3, #1
 800a2b8:	6010      	str	r0, [r2, #0]
 800a2ba:	7019      	strb	r1, [r3, #0]
 800a2bc:	4608      	mov	r0, r1
 800a2be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <__sfputs_r>:
 800a2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2c6:	4606      	mov	r6, r0
 800a2c8:	460f      	mov	r7, r1
 800a2ca:	4614      	mov	r4, r2
 800a2cc:	18d5      	adds	r5, r2, r3
 800a2ce:	42ac      	cmp	r4, r5
 800a2d0:	d101      	bne.n	800a2d6 <__sfputs_r+0x12>
 800a2d2:	2000      	movs	r0, #0
 800a2d4:	e007      	b.n	800a2e6 <__sfputs_r+0x22>
 800a2d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2da:	463a      	mov	r2, r7
 800a2dc:	4630      	mov	r0, r6
 800a2de:	f7ff ffda 	bl	800a296 <__sfputc_r>
 800a2e2:	1c43      	adds	r3, r0, #1
 800a2e4:	d1f3      	bne.n	800a2ce <__sfputs_r+0xa>
 800a2e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a2e8 <_vfiprintf_r>:
 800a2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ec:	460d      	mov	r5, r1
 800a2ee:	b09d      	sub	sp, #116	; 0x74
 800a2f0:	4614      	mov	r4, r2
 800a2f2:	4698      	mov	r8, r3
 800a2f4:	4606      	mov	r6, r0
 800a2f6:	b118      	cbz	r0, 800a300 <_vfiprintf_r+0x18>
 800a2f8:	6a03      	ldr	r3, [r0, #32]
 800a2fa:	b90b      	cbnz	r3, 800a300 <_vfiprintf_r+0x18>
 800a2fc:	f7fd fc1a 	bl	8007b34 <__sinit>
 800a300:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a302:	07d9      	lsls	r1, r3, #31
 800a304:	d405      	bmi.n	800a312 <_vfiprintf_r+0x2a>
 800a306:	89ab      	ldrh	r3, [r5, #12]
 800a308:	059a      	lsls	r2, r3, #22
 800a30a:	d402      	bmi.n	800a312 <_vfiprintf_r+0x2a>
 800a30c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a30e:	f7fd fd4c 	bl	8007daa <__retarget_lock_acquire_recursive>
 800a312:	89ab      	ldrh	r3, [r5, #12]
 800a314:	071b      	lsls	r3, r3, #28
 800a316:	d501      	bpl.n	800a31c <_vfiprintf_r+0x34>
 800a318:	692b      	ldr	r3, [r5, #16]
 800a31a:	b99b      	cbnz	r3, 800a344 <_vfiprintf_r+0x5c>
 800a31c:	4629      	mov	r1, r5
 800a31e:	4630      	mov	r0, r6
 800a320:	f000 f93a 	bl	800a598 <__swsetup_r>
 800a324:	b170      	cbz	r0, 800a344 <_vfiprintf_r+0x5c>
 800a326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a328:	07dc      	lsls	r4, r3, #31
 800a32a:	d504      	bpl.n	800a336 <_vfiprintf_r+0x4e>
 800a32c:	f04f 30ff 	mov.w	r0, #4294967295
 800a330:	b01d      	add	sp, #116	; 0x74
 800a332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a336:	89ab      	ldrh	r3, [r5, #12]
 800a338:	0598      	lsls	r0, r3, #22
 800a33a:	d4f7      	bmi.n	800a32c <_vfiprintf_r+0x44>
 800a33c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a33e:	f7fd fd35 	bl	8007dac <__retarget_lock_release_recursive>
 800a342:	e7f3      	b.n	800a32c <_vfiprintf_r+0x44>
 800a344:	2300      	movs	r3, #0
 800a346:	9309      	str	r3, [sp, #36]	; 0x24
 800a348:	2320      	movs	r3, #32
 800a34a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a34e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a352:	2330      	movs	r3, #48	; 0x30
 800a354:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a508 <_vfiprintf_r+0x220>
 800a358:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a35c:	f04f 0901 	mov.w	r9, #1
 800a360:	4623      	mov	r3, r4
 800a362:	469a      	mov	sl, r3
 800a364:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a368:	b10a      	cbz	r2, 800a36e <_vfiprintf_r+0x86>
 800a36a:	2a25      	cmp	r2, #37	; 0x25
 800a36c:	d1f9      	bne.n	800a362 <_vfiprintf_r+0x7a>
 800a36e:	ebba 0b04 	subs.w	fp, sl, r4
 800a372:	d00b      	beq.n	800a38c <_vfiprintf_r+0xa4>
 800a374:	465b      	mov	r3, fp
 800a376:	4622      	mov	r2, r4
 800a378:	4629      	mov	r1, r5
 800a37a:	4630      	mov	r0, r6
 800a37c:	f7ff ffa2 	bl	800a2c4 <__sfputs_r>
 800a380:	3001      	adds	r0, #1
 800a382:	f000 80a9 	beq.w	800a4d8 <_vfiprintf_r+0x1f0>
 800a386:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a388:	445a      	add	r2, fp
 800a38a:	9209      	str	r2, [sp, #36]	; 0x24
 800a38c:	f89a 3000 	ldrb.w	r3, [sl]
 800a390:	2b00      	cmp	r3, #0
 800a392:	f000 80a1 	beq.w	800a4d8 <_vfiprintf_r+0x1f0>
 800a396:	2300      	movs	r3, #0
 800a398:	f04f 32ff 	mov.w	r2, #4294967295
 800a39c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3a0:	f10a 0a01 	add.w	sl, sl, #1
 800a3a4:	9304      	str	r3, [sp, #16]
 800a3a6:	9307      	str	r3, [sp, #28]
 800a3a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3ac:	931a      	str	r3, [sp, #104]	; 0x68
 800a3ae:	4654      	mov	r4, sl
 800a3b0:	2205      	movs	r2, #5
 800a3b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3b6:	4854      	ldr	r0, [pc, #336]	; (800a508 <_vfiprintf_r+0x220>)
 800a3b8:	f7f5 ff12 	bl	80001e0 <memchr>
 800a3bc:	9a04      	ldr	r2, [sp, #16]
 800a3be:	b9d8      	cbnz	r0, 800a3f8 <_vfiprintf_r+0x110>
 800a3c0:	06d1      	lsls	r1, r2, #27
 800a3c2:	bf44      	itt	mi
 800a3c4:	2320      	movmi	r3, #32
 800a3c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3ca:	0713      	lsls	r3, r2, #28
 800a3cc:	bf44      	itt	mi
 800a3ce:	232b      	movmi	r3, #43	; 0x2b
 800a3d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a3d8:	2b2a      	cmp	r3, #42	; 0x2a
 800a3da:	d015      	beq.n	800a408 <_vfiprintf_r+0x120>
 800a3dc:	9a07      	ldr	r2, [sp, #28]
 800a3de:	4654      	mov	r4, sl
 800a3e0:	2000      	movs	r0, #0
 800a3e2:	f04f 0c0a 	mov.w	ip, #10
 800a3e6:	4621      	mov	r1, r4
 800a3e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3ec:	3b30      	subs	r3, #48	; 0x30
 800a3ee:	2b09      	cmp	r3, #9
 800a3f0:	d94d      	bls.n	800a48e <_vfiprintf_r+0x1a6>
 800a3f2:	b1b0      	cbz	r0, 800a422 <_vfiprintf_r+0x13a>
 800a3f4:	9207      	str	r2, [sp, #28]
 800a3f6:	e014      	b.n	800a422 <_vfiprintf_r+0x13a>
 800a3f8:	eba0 0308 	sub.w	r3, r0, r8
 800a3fc:	fa09 f303 	lsl.w	r3, r9, r3
 800a400:	4313      	orrs	r3, r2
 800a402:	9304      	str	r3, [sp, #16]
 800a404:	46a2      	mov	sl, r4
 800a406:	e7d2      	b.n	800a3ae <_vfiprintf_r+0xc6>
 800a408:	9b03      	ldr	r3, [sp, #12]
 800a40a:	1d19      	adds	r1, r3, #4
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	9103      	str	r1, [sp, #12]
 800a410:	2b00      	cmp	r3, #0
 800a412:	bfbb      	ittet	lt
 800a414:	425b      	neglt	r3, r3
 800a416:	f042 0202 	orrlt.w	r2, r2, #2
 800a41a:	9307      	strge	r3, [sp, #28]
 800a41c:	9307      	strlt	r3, [sp, #28]
 800a41e:	bfb8      	it	lt
 800a420:	9204      	strlt	r2, [sp, #16]
 800a422:	7823      	ldrb	r3, [r4, #0]
 800a424:	2b2e      	cmp	r3, #46	; 0x2e
 800a426:	d10c      	bne.n	800a442 <_vfiprintf_r+0x15a>
 800a428:	7863      	ldrb	r3, [r4, #1]
 800a42a:	2b2a      	cmp	r3, #42	; 0x2a
 800a42c:	d134      	bne.n	800a498 <_vfiprintf_r+0x1b0>
 800a42e:	9b03      	ldr	r3, [sp, #12]
 800a430:	1d1a      	adds	r2, r3, #4
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	9203      	str	r2, [sp, #12]
 800a436:	2b00      	cmp	r3, #0
 800a438:	bfb8      	it	lt
 800a43a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a43e:	3402      	adds	r4, #2
 800a440:	9305      	str	r3, [sp, #20]
 800a442:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a518 <_vfiprintf_r+0x230>
 800a446:	7821      	ldrb	r1, [r4, #0]
 800a448:	2203      	movs	r2, #3
 800a44a:	4650      	mov	r0, sl
 800a44c:	f7f5 fec8 	bl	80001e0 <memchr>
 800a450:	b138      	cbz	r0, 800a462 <_vfiprintf_r+0x17a>
 800a452:	9b04      	ldr	r3, [sp, #16]
 800a454:	eba0 000a 	sub.w	r0, r0, sl
 800a458:	2240      	movs	r2, #64	; 0x40
 800a45a:	4082      	lsls	r2, r0
 800a45c:	4313      	orrs	r3, r2
 800a45e:	3401      	adds	r4, #1
 800a460:	9304      	str	r3, [sp, #16]
 800a462:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a466:	4829      	ldr	r0, [pc, #164]	; (800a50c <_vfiprintf_r+0x224>)
 800a468:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a46c:	2206      	movs	r2, #6
 800a46e:	f7f5 feb7 	bl	80001e0 <memchr>
 800a472:	2800      	cmp	r0, #0
 800a474:	d03f      	beq.n	800a4f6 <_vfiprintf_r+0x20e>
 800a476:	4b26      	ldr	r3, [pc, #152]	; (800a510 <_vfiprintf_r+0x228>)
 800a478:	bb1b      	cbnz	r3, 800a4c2 <_vfiprintf_r+0x1da>
 800a47a:	9b03      	ldr	r3, [sp, #12]
 800a47c:	3307      	adds	r3, #7
 800a47e:	f023 0307 	bic.w	r3, r3, #7
 800a482:	3308      	adds	r3, #8
 800a484:	9303      	str	r3, [sp, #12]
 800a486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a488:	443b      	add	r3, r7
 800a48a:	9309      	str	r3, [sp, #36]	; 0x24
 800a48c:	e768      	b.n	800a360 <_vfiprintf_r+0x78>
 800a48e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a492:	460c      	mov	r4, r1
 800a494:	2001      	movs	r0, #1
 800a496:	e7a6      	b.n	800a3e6 <_vfiprintf_r+0xfe>
 800a498:	2300      	movs	r3, #0
 800a49a:	3401      	adds	r4, #1
 800a49c:	9305      	str	r3, [sp, #20]
 800a49e:	4619      	mov	r1, r3
 800a4a0:	f04f 0c0a 	mov.w	ip, #10
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4aa:	3a30      	subs	r2, #48	; 0x30
 800a4ac:	2a09      	cmp	r2, #9
 800a4ae:	d903      	bls.n	800a4b8 <_vfiprintf_r+0x1d0>
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d0c6      	beq.n	800a442 <_vfiprintf_r+0x15a>
 800a4b4:	9105      	str	r1, [sp, #20]
 800a4b6:	e7c4      	b.n	800a442 <_vfiprintf_r+0x15a>
 800a4b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4bc:	4604      	mov	r4, r0
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e7f0      	b.n	800a4a4 <_vfiprintf_r+0x1bc>
 800a4c2:	ab03      	add	r3, sp, #12
 800a4c4:	9300      	str	r3, [sp, #0]
 800a4c6:	462a      	mov	r2, r5
 800a4c8:	4b12      	ldr	r3, [pc, #72]	; (800a514 <_vfiprintf_r+0x22c>)
 800a4ca:	a904      	add	r1, sp, #16
 800a4cc:	4630      	mov	r0, r6
 800a4ce:	f7fc fccf 	bl	8006e70 <_printf_float>
 800a4d2:	4607      	mov	r7, r0
 800a4d4:	1c78      	adds	r0, r7, #1
 800a4d6:	d1d6      	bne.n	800a486 <_vfiprintf_r+0x19e>
 800a4d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4da:	07d9      	lsls	r1, r3, #31
 800a4dc:	d405      	bmi.n	800a4ea <_vfiprintf_r+0x202>
 800a4de:	89ab      	ldrh	r3, [r5, #12]
 800a4e0:	059a      	lsls	r2, r3, #22
 800a4e2:	d402      	bmi.n	800a4ea <_vfiprintf_r+0x202>
 800a4e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4e6:	f7fd fc61 	bl	8007dac <__retarget_lock_release_recursive>
 800a4ea:	89ab      	ldrh	r3, [r5, #12]
 800a4ec:	065b      	lsls	r3, r3, #25
 800a4ee:	f53f af1d 	bmi.w	800a32c <_vfiprintf_r+0x44>
 800a4f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4f4:	e71c      	b.n	800a330 <_vfiprintf_r+0x48>
 800a4f6:	ab03      	add	r3, sp, #12
 800a4f8:	9300      	str	r3, [sp, #0]
 800a4fa:	462a      	mov	r2, r5
 800a4fc:	4b05      	ldr	r3, [pc, #20]	; (800a514 <_vfiprintf_r+0x22c>)
 800a4fe:	a904      	add	r1, sp, #16
 800a500:	4630      	mov	r0, r6
 800a502:	f7fc ff59 	bl	80073b8 <_printf_i>
 800a506:	e7e4      	b.n	800a4d2 <_vfiprintf_r+0x1ea>
 800a508:	0800ac64 	.word	0x0800ac64
 800a50c:	0800ac6e 	.word	0x0800ac6e
 800a510:	08006e71 	.word	0x08006e71
 800a514:	0800a2c5 	.word	0x0800a2c5
 800a518:	0800ac6a 	.word	0x0800ac6a

0800a51c <__swbuf_r>:
 800a51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a51e:	460e      	mov	r6, r1
 800a520:	4614      	mov	r4, r2
 800a522:	4605      	mov	r5, r0
 800a524:	b118      	cbz	r0, 800a52e <__swbuf_r+0x12>
 800a526:	6a03      	ldr	r3, [r0, #32]
 800a528:	b90b      	cbnz	r3, 800a52e <__swbuf_r+0x12>
 800a52a:	f7fd fb03 	bl	8007b34 <__sinit>
 800a52e:	69a3      	ldr	r3, [r4, #24]
 800a530:	60a3      	str	r3, [r4, #8]
 800a532:	89a3      	ldrh	r3, [r4, #12]
 800a534:	071a      	lsls	r2, r3, #28
 800a536:	d525      	bpl.n	800a584 <__swbuf_r+0x68>
 800a538:	6923      	ldr	r3, [r4, #16]
 800a53a:	b31b      	cbz	r3, 800a584 <__swbuf_r+0x68>
 800a53c:	6823      	ldr	r3, [r4, #0]
 800a53e:	6922      	ldr	r2, [r4, #16]
 800a540:	1a98      	subs	r0, r3, r2
 800a542:	6963      	ldr	r3, [r4, #20]
 800a544:	b2f6      	uxtb	r6, r6
 800a546:	4283      	cmp	r3, r0
 800a548:	4637      	mov	r7, r6
 800a54a:	dc04      	bgt.n	800a556 <__swbuf_r+0x3a>
 800a54c:	4621      	mov	r1, r4
 800a54e:	4628      	mov	r0, r5
 800a550:	f7ff fdca 	bl	800a0e8 <_fflush_r>
 800a554:	b9e0      	cbnz	r0, 800a590 <__swbuf_r+0x74>
 800a556:	68a3      	ldr	r3, [r4, #8]
 800a558:	3b01      	subs	r3, #1
 800a55a:	60a3      	str	r3, [r4, #8]
 800a55c:	6823      	ldr	r3, [r4, #0]
 800a55e:	1c5a      	adds	r2, r3, #1
 800a560:	6022      	str	r2, [r4, #0]
 800a562:	701e      	strb	r6, [r3, #0]
 800a564:	6962      	ldr	r2, [r4, #20]
 800a566:	1c43      	adds	r3, r0, #1
 800a568:	429a      	cmp	r2, r3
 800a56a:	d004      	beq.n	800a576 <__swbuf_r+0x5a>
 800a56c:	89a3      	ldrh	r3, [r4, #12]
 800a56e:	07db      	lsls	r3, r3, #31
 800a570:	d506      	bpl.n	800a580 <__swbuf_r+0x64>
 800a572:	2e0a      	cmp	r6, #10
 800a574:	d104      	bne.n	800a580 <__swbuf_r+0x64>
 800a576:	4621      	mov	r1, r4
 800a578:	4628      	mov	r0, r5
 800a57a:	f7ff fdb5 	bl	800a0e8 <_fflush_r>
 800a57e:	b938      	cbnz	r0, 800a590 <__swbuf_r+0x74>
 800a580:	4638      	mov	r0, r7
 800a582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a584:	4621      	mov	r1, r4
 800a586:	4628      	mov	r0, r5
 800a588:	f000 f806 	bl	800a598 <__swsetup_r>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	d0d5      	beq.n	800a53c <__swbuf_r+0x20>
 800a590:	f04f 37ff 	mov.w	r7, #4294967295
 800a594:	e7f4      	b.n	800a580 <__swbuf_r+0x64>
	...

0800a598 <__swsetup_r>:
 800a598:	b538      	push	{r3, r4, r5, lr}
 800a59a:	4b2a      	ldr	r3, [pc, #168]	; (800a644 <__swsetup_r+0xac>)
 800a59c:	4605      	mov	r5, r0
 800a59e:	6818      	ldr	r0, [r3, #0]
 800a5a0:	460c      	mov	r4, r1
 800a5a2:	b118      	cbz	r0, 800a5ac <__swsetup_r+0x14>
 800a5a4:	6a03      	ldr	r3, [r0, #32]
 800a5a6:	b90b      	cbnz	r3, 800a5ac <__swsetup_r+0x14>
 800a5a8:	f7fd fac4 	bl	8007b34 <__sinit>
 800a5ac:	89a3      	ldrh	r3, [r4, #12]
 800a5ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5b2:	0718      	lsls	r0, r3, #28
 800a5b4:	d422      	bmi.n	800a5fc <__swsetup_r+0x64>
 800a5b6:	06d9      	lsls	r1, r3, #27
 800a5b8:	d407      	bmi.n	800a5ca <__swsetup_r+0x32>
 800a5ba:	2309      	movs	r3, #9
 800a5bc:	602b      	str	r3, [r5, #0]
 800a5be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a5c2:	81a3      	strh	r3, [r4, #12]
 800a5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c8:	e034      	b.n	800a634 <__swsetup_r+0x9c>
 800a5ca:	0758      	lsls	r0, r3, #29
 800a5cc:	d512      	bpl.n	800a5f4 <__swsetup_r+0x5c>
 800a5ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5d0:	b141      	cbz	r1, 800a5e4 <__swsetup_r+0x4c>
 800a5d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5d6:	4299      	cmp	r1, r3
 800a5d8:	d002      	beq.n	800a5e0 <__swsetup_r+0x48>
 800a5da:	4628      	mov	r0, r5
 800a5dc:	f7fe fa82 	bl	8008ae4 <_free_r>
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	6363      	str	r3, [r4, #52]	; 0x34
 800a5e4:	89a3      	ldrh	r3, [r4, #12]
 800a5e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a5ea:	81a3      	strh	r3, [r4, #12]
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	6063      	str	r3, [r4, #4]
 800a5f0:	6923      	ldr	r3, [r4, #16]
 800a5f2:	6023      	str	r3, [r4, #0]
 800a5f4:	89a3      	ldrh	r3, [r4, #12]
 800a5f6:	f043 0308 	orr.w	r3, r3, #8
 800a5fa:	81a3      	strh	r3, [r4, #12]
 800a5fc:	6923      	ldr	r3, [r4, #16]
 800a5fe:	b94b      	cbnz	r3, 800a614 <__swsetup_r+0x7c>
 800a600:	89a3      	ldrh	r3, [r4, #12]
 800a602:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a606:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a60a:	d003      	beq.n	800a614 <__swsetup_r+0x7c>
 800a60c:	4621      	mov	r1, r4
 800a60e:	4628      	mov	r0, r5
 800a610:	f000 f884 	bl	800a71c <__smakebuf_r>
 800a614:	89a0      	ldrh	r0, [r4, #12]
 800a616:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a61a:	f010 0301 	ands.w	r3, r0, #1
 800a61e:	d00a      	beq.n	800a636 <__swsetup_r+0x9e>
 800a620:	2300      	movs	r3, #0
 800a622:	60a3      	str	r3, [r4, #8]
 800a624:	6963      	ldr	r3, [r4, #20]
 800a626:	425b      	negs	r3, r3
 800a628:	61a3      	str	r3, [r4, #24]
 800a62a:	6923      	ldr	r3, [r4, #16]
 800a62c:	b943      	cbnz	r3, 800a640 <__swsetup_r+0xa8>
 800a62e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a632:	d1c4      	bne.n	800a5be <__swsetup_r+0x26>
 800a634:	bd38      	pop	{r3, r4, r5, pc}
 800a636:	0781      	lsls	r1, r0, #30
 800a638:	bf58      	it	pl
 800a63a:	6963      	ldrpl	r3, [r4, #20]
 800a63c:	60a3      	str	r3, [r4, #8]
 800a63e:	e7f4      	b.n	800a62a <__swsetup_r+0x92>
 800a640:	2000      	movs	r0, #0
 800a642:	e7f7      	b.n	800a634 <__swsetup_r+0x9c>
 800a644:	20000238 	.word	0x20000238

0800a648 <_raise_r>:
 800a648:	291f      	cmp	r1, #31
 800a64a:	b538      	push	{r3, r4, r5, lr}
 800a64c:	4604      	mov	r4, r0
 800a64e:	460d      	mov	r5, r1
 800a650:	d904      	bls.n	800a65c <_raise_r+0x14>
 800a652:	2316      	movs	r3, #22
 800a654:	6003      	str	r3, [r0, #0]
 800a656:	f04f 30ff 	mov.w	r0, #4294967295
 800a65a:	bd38      	pop	{r3, r4, r5, pc}
 800a65c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a65e:	b112      	cbz	r2, 800a666 <_raise_r+0x1e>
 800a660:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a664:	b94b      	cbnz	r3, 800a67a <_raise_r+0x32>
 800a666:	4620      	mov	r0, r4
 800a668:	f000 f830 	bl	800a6cc <_getpid_r>
 800a66c:	462a      	mov	r2, r5
 800a66e:	4601      	mov	r1, r0
 800a670:	4620      	mov	r0, r4
 800a672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a676:	f000 b817 	b.w	800a6a8 <_kill_r>
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d00a      	beq.n	800a694 <_raise_r+0x4c>
 800a67e:	1c59      	adds	r1, r3, #1
 800a680:	d103      	bne.n	800a68a <_raise_r+0x42>
 800a682:	2316      	movs	r3, #22
 800a684:	6003      	str	r3, [r0, #0]
 800a686:	2001      	movs	r0, #1
 800a688:	e7e7      	b.n	800a65a <_raise_r+0x12>
 800a68a:	2400      	movs	r4, #0
 800a68c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a690:	4628      	mov	r0, r5
 800a692:	4798      	blx	r3
 800a694:	2000      	movs	r0, #0
 800a696:	e7e0      	b.n	800a65a <_raise_r+0x12>

0800a698 <raise>:
 800a698:	4b02      	ldr	r3, [pc, #8]	; (800a6a4 <raise+0xc>)
 800a69a:	4601      	mov	r1, r0
 800a69c:	6818      	ldr	r0, [r3, #0]
 800a69e:	f7ff bfd3 	b.w	800a648 <_raise_r>
 800a6a2:	bf00      	nop
 800a6a4:	20000238 	.word	0x20000238

0800a6a8 <_kill_r>:
 800a6a8:	b538      	push	{r3, r4, r5, lr}
 800a6aa:	4d07      	ldr	r5, [pc, #28]	; (800a6c8 <_kill_r+0x20>)
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	4604      	mov	r4, r0
 800a6b0:	4608      	mov	r0, r1
 800a6b2:	4611      	mov	r1, r2
 800a6b4:	602b      	str	r3, [r5, #0]
 800a6b6:	f7f8 fba1 	bl	8002dfc <_kill>
 800a6ba:	1c43      	adds	r3, r0, #1
 800a6bc:	d102      	bne.n	800a6c4 <_kill_r+0x1c>
 800a6be:	682b      	ldr	r3, [r5, #0]
 800a6c0:	b103      	cbz	r3, 800a6c4 <_kill_r+0x1c>
 800a6c2:	6023      	str	r3, [r4, #0]
 800a6c4:	bd38      	pop	{r3, r4, r5, pc}
 800a6c6:	bf00      	nop
 800a6c8:	20000718 	.word	0x20000718

0800a6cc <_getpid_r>:
 800a6cc:	f7f8 bb8e 	b.w	8002dec <_getpid>

0800a6d0 <__swhatbuf_r>:
 800a6d0:	b570      	push	{r4, r5, r6, lr}
 800a6d2:	460c      	mov	r4, r1
 800a6d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6d8:	2900      	cmp	r1, #0
 800a6da:	b096      	sub	sp, #88	; 0x58
 800a6dc:	4615      	mov	r5, r2
 800a6de:	461e      	mov	r6, r3
 800a6e0:	da0d      	bge.n	800a6fe <__swhatbuf_r+0x2e>
 800a6e2:	89a3      	ldrh	r3, [r4, #12]
 800a6e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a6e8:	f04f 0100 	mov.w	r1, #0
 800a6ec:	bf0c      	ite	eq
 800a6ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a6f2:	2340      	movne	r3, #64	; 0x40
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	6031      	str	r1, [r6, #0]
 800a6f8:	602b      	str	r3, [r5, #0]
 800a6fa:	b016      	add	sp, #88	; 0x58
 800a6fc:	bd70      	pop	{r4, r5, r6, pc}
 800a6fe:	466a      	mov	r2, sp
 800a700:	f000 f848 	bl	800a794 <_fstat_r>
 800a704:	2800      	cmp	r0, #0
 800a706:	dbec      	blt.n	800a6e2 <__swhatbuf_r+0x12>
 800a708:	9901      	ldr	r1, [sp, #4]
 800a70a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a70e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a712:	4259      	negs	r1, r3
 800a714:	4159      	adcs	r1, r3
 800a716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a71a:	e7eb      	b.n	800a6f4 <__swhatbuf_r+0x24>

0800a71c <__smakebuf_r>:
 800a71c:	898b      	ldrh	r3, [r1, #12]
 800a71e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a720:	079d      	lsls	r5, r3, #30
 800a722:	4606      	mov	r6, r0
 800a724:	460c      	mov	r4, r1
 800a726:	d507      	bpl.n	800a738 <__smakebuf_r+0x1c>
 800a728:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a72c:	6023      	str	r3, [r4, #0]
 800a72e:	6123      	str	r3, [r4, #16]
 800a730:	2301      	movs	r3, #1
 800a732:	6163      	str	r3, [r4, #20]
 800a734:	b002      	add	sp, #8
 800a736:	bd70      	pop	{r4, r5, r6, pc}
 800a738:	ab01      	add	r3, sp, #4
 800a73a:	466a      	mov	r2, sp
 800a73c:	f7ff ffc8 	bl	800a6d0 <__swhatbuf_r>
 800a740:	9900      	ldr	r1, [sp, #0]
 800a742:	4605      	mov	r5, r0
 800a744:	4630      	mov	r0, r6
 800a746:	f7fe fd99 	bl	800927c <_malloc_r>
 800a74a:	b948      	cbnz	r0, 800a760 <__smakebuf_r+0x44>
 800a74c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a750:	059a      	lsls	r2, r3, #22
 800a752:	d4ef      	bmi.n	800a734 <__smakebuf_r+0x18>
 800a754:	f023 0303 	bic.w	r3, r3, #3
 800a758:	f043 0302 	orr.w	r3, r3, #2
 800a75c:	81a3      	strh	r3, [r4, #12]
 800a75e:	e7e3      	b.n	800a728 <__smakebuf_r+0xc>
 800a760:	89a3      	ldrh	r3, [r4, #12]
 800a762:	6020      	str	r0, [r4, #0]
 800a764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a768:	81a3      	strh	r3, [r4, #12]
 800a76a:	9b00      	ldr	r3, [sp, #0]
 800a76c:	6163      	str	r3, [r4, #20]
 800a76e:	9b01      	ldr	r3, [sp, #4]
 800a770:	6120      	str	r0, [r4, #16]
 800a772:	b15b      	cbz	r3, 800a78c <__smakebuf_r+0x70>
 800a774:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a778:	4630      	mov	r0, r6
 800a77a:	f000 f81d 	bl	800a7b8 <_isatty_r>
 800a77e:	b128      	cbz	r0, 800a78c <__smakebuf_r+0x70>
 800a780:	89a3      	ldrh	r3, [r4, #12]
 800a782:	f023 0303 	bic.w	r3, r3, #3
 800a786:	f043 0301 	orr.w	r3, r3, #1
 800a78a:	81a3      	strh	r3, [r4, #12]
 800a78c:	89a3      	ldrh	r3, [r4, #12]
 800a78e:	431d      	orrs	r5, r3
 800a790:	81a5      	strh	r5, [r4, #12]
 800a792:	e7cf      	b.n	800a734 <__smakebuf_r+0x18>

0800a794 <_fstat_r>:
 800a794:	b538      	push	{r3, r4, r5, lr}
 800a796:	4d07      	ldr	r5, [pc, #28]	; (800a7b4 <_fstat_r+0x20>)
 800a798:	2300      	movs	r3, #0
 800a79a:	4604      	mov	r4, r0
 800a79c:	4608      	mov	r0, r1
 800a79e:	4611      	mov	r1, r2
 800a7a0:	602b      	str	r3, [r5, #0]
 800a7a2:	f7f8 fb8a 	bl	8002eba <_fstat>
 800a7a6:	1c43      	adds	r3, r0, #1
 800a7a8:	d102      	bne.n	800a7b0 <_fstat_r+0x1c>
 800a7aa:	682b      	ldr	r3, [r5, #0]
 800a7ac:	b103      	cbz	r3, 800a7b0 <_fstat_r+0x1c>
 800a7ae:	6023      	str	r3, [r4, #0]
 800a7b0:	bd38      	pop	{r3, r4, r5, pc}
 800a7b2:	bf00      	nop
 800a7b4:	20000718 	.word	0x20000718

0800a7b8 <_isatty_r>:
 800a7b8:	b538      	push	{r3, r4, r5, lr}
 800a7ba:	4d06      	ldr	r5, [pc, #24]	; (800a7d4 <_isatty_r+0x1c>)
 800a7bc:	2300      	movs	r3, #0
 800a7be:	4604      	mov	r4, r0
 800a7c0:	4608      	mov	r0, r1
 800a7c2:	602b      	str	r3, [r5, #0]
 800a7c4:	f7f8 fb89 	bl	8002eda <_isatty>
 800a7c8:	1c43      	adds	r3, r0, #1
 800a7ca:	d102      	bne.n	800a7d2 <_isatty_r+0x1a>
 800a7cc:	682b      	ldr	r3, [r5, #0]
 800a7ce:	b103      	cbz	r3, 800a7d2 <_isatty_r+0x1a>
 800a7d0:	6023      	str	r3, [r4, #0]
 800a7d2:	bd38      	pop	{r3, r4, r5, pc}
 800a7d4:	20000718 	.word	0x20000718

0800a7d8 <_init>:
 800a7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7da:	bf00      	nop
 800a7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7de:	bc08      	pop	{r3}
 800a7e0:	469e      	mov	lr, r3
 800a7e2:	4770      	bx	lr

0800a7e4 <_fini>:
 800a7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7e6:	bf00      	nop
 800a7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ea:	bc08      	pop	{r3}
 800a7ec:	469e      	mov	lr, r3
 800a7ee:	4770      	bx	lr
